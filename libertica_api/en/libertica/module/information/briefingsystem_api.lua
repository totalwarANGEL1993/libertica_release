--- Allows to define briefings
---
--- The apex for scripting dialogs and simple camera animations. A versatile
--- tool to script the plot of the map.
---
Lib.BriefingSystem = Lib.BriefingSystem or {};



--- Starts a briefing.
---
--- #### Settings
---
--- Possible fields for the briefing table:
--- * `Starting`                - Function called when briefing is started              
--- * `Finished`                - Function called when briefing is finished             
--- * `RestoreCamera`           - Camera position is saved and restored at briefing end 
--- * `RestoreGameSpeed`        - Game speed is saved and restored at briefing end      
--- * `EnableGlobalImmortality` - During briefings all entities are invulnerable        
--- * `EnableSky`               - Display the sky during the briefing                   
--- * `EnableFoW`               - Displays the fog of war during the briefing           
--- * `EnableBorderPins`        - Displays the border pins during the briefing          
---
--- *-> Example #1*
---
--- #### Animations
--- The camera settings can be separated from the text of the page. Not only
--- allows this to fluetly write dialogs, also more possibilities are unlocked
--- when using the notation. To create a animation the page musn't have a
--- position. Otherwise defaults will be used.
---
--- The animation frames should be provided as a table. Frames are linearly 
--- interpolated if there are at least 2 entries, and cubically interpolated 
--- if there are at least 4 entries.
---
--- *-> Example #2*
---
--- *-> Example #3*
---
--- *-> Example #4*
---
--- #### Parallax
--- In the context of a video game parallaxes are scrollable backgrounds. This
--- technique was used by side scrollers. During a briefing page up to 4 layers
--- of graphics can be shown and animated. Parallaxes are notated similar to
--- camera animations. Scrolling is done by setting UV coordinates.
---
--- Graphics must allways be in 16:9 format. If a player has a 4:3 resolution
--- the image is cropped left and right to fit the frame. Coordinates - as long
--- as provided as relative coordinates - will be adjusted.
---
--- It is also possible to provide a table of animation frames for the image.
--- The frames are linearly interpolated, if there are at least 2 entries and
--- interpolated cubically if there are at least 4 entries.
---
--- *-> Example #5*
---
--- *-> Example #6*
---
--- #### Examples
---
--- * Example #1: Basic structure
--- ```lua
--- function Briefing1(_Name, _PlayerID)
---     local Briefing = {};
---     local AP, ASP = AddBriefingPages(Briefing);
---
---     -- Pages ...
---
---     Briefing.Starting = function(_Data)
---     end
---     Briefing.Finished = function(_Data)
---     end
---     StartBriefing(Briefing, _Name, _PlayerID);
--- end
--- ```
---
--- * Example #2: Notation for animations
--- ```lua
--- Briefing.PageAnimation = {
---     ["Page1"] = {
---         {30, {GetFrameVector("pos1", 500, "pos2", 1000)},
---              {GetFrameVector("pos3", 500, "pos4", 1000)}},
---     },
---     ["Page3"] = {
---         {30, {GetFrameVector("pos1", 500, "pos2", 1000)},
---              {GetFrameVector("pos3", 500, "pos4", 1000)},
---              {GetFrameVector("pos7", 500, "pos8", 1000)},
---              {GetFrameVector("pos5", 500, "pos6", 1000)}},
---     },
--- };
--- ```
---
--- * Example #3: Replace animations
--- ```lua
--- Briefing.PageAnimation = {
---     ["Page1"] = {
---         Clear = true,
---         {30, {GetFrameVector("pos1", 500, "pos2", 1000)},
---              {GetFrameVector("pos3", 500, "pos4", 1000)}},
---     },
--- };
--- ```
---
--- * Example #4: Endlessly repeating animation
--- ```lua
--- Briefing.PageAnimation = {
---     ["Page1"] = {
---         Repeat = true,
---         {30, {GetFrameVector("pos1", 500, "pos2", 1000)},
---              {GetFrameVector("pos3", 500, "pos4", 1000)},
---              {GetFrameVector("pos7", 500, "pos8", 1000)},
---              {GetFrameVector("pos5", 500, "pos6", 1000)}},
---     },
--- };
--- ```
---
--- * Example #5: Notation of paralaxes
--- ```lua
--- Briefing.PageParallax = {
---     ["Page1"] = {
---         {"maps/externalmap/mapname/graphics/Parallax6.png", 60,
---          {0, 0, 0.8, 1, 255},
---          {0.2, 0, 1, 1, 255}},
---     },
---     ["Page3"] = {
---         {"maps/externalmap/mapname/graphics/Parallax1.png", 1,
---          {0, 0, 0.8, 1, 255},
---          {0.2, 0, 1, 1, 255},
---          {0, 0, 0.8, 1, 255},
---          {0.2, 0, 1, 1, 255}},
---     },
---     ["Page7"] = {
---         {"maps/externalmap/mapname/graphics/Parallax6.png", 60,
---          {0, 0, 0.8, 1, 255}},
---     },
--- };
--- ```
---
--- * Example #6: Replace parallaxes
--- ```lua
--- Briefing.PageParallax = {
---     ["Page1"] = {
---         Clear = true,
---         {"maps/externalmap/mapname/graphics/Parallax6.png", 60,
---          {0, 0, 0.8, 1, 255},
---          {0.2, 0, 1, 1, 255}},
---     },
--- };
--- ```
---
--- @param _Briefing table   Briefing table
--- @param _Name string      Name of briefing
--- @param _PlayerID integer Player ID of receiver
function StartBriefing(_Briefing, _Name, _PlayerID)
end
API.StartBriefing = StartBriefing;

--- Asks the player for the permission to change graphic settings.
---
--- This feature is deactivated in Multiplayer.
function RequestBriefingAlternateGraphics()
end
API.RequestBriefingAlternateGraphics = RequestBriefingAlternateGraphics;

--- Checks if a briefing ist active.
--- @param _PlayerID integer PlayerID of receiver
--- @return boolean IsActive Briefing is active
function IsBriefingActive(_PlayerID)
    return true;
end
API.IsBriefingActive = IsBriefingActive;

--- Creates a point from a position.
--- @param _Entity any      Target entity
--- @param _ZOffset integer Z-Offset
--- @return number X X-Koordinate
--- @return number Y Y-Koordinate
--- @return number Z Z-Koordinate
function GetFramePosition(_Entity, _ZOffset)
    return 0, 0, 0;
end

--- Creates an vector from 2 positions.
--- @param _Entity1 any      Target position entity
--- @param _ZOffset1 integer Z-Offset of position
--- @param _Entity2 any      Target lookat entity
--- @param _ZOffset2 integer Z-Offset of lookat
--- @return number X1        X-Coordinate Position
--- @return number Y1        Y-Coordinate Position
--- @return number Z1        Z-Coordinate Position
--- @return number X2        X-Coordinate LookAt
--- @return number Y2        Y-Coordinate LookAt
--- @return number Z2        Z-Coordinate LookAt
function GetFrameVector(_Entity1, _ZOffset1, _Entity2, _ZOffset2)
    return 0, 0, 0, 0, 0, 0;
end

--- Prepares the briefing and returns the page functions.
---
--- Must be called before pages are added.
--- @param _Briefing table Briefing table
--- @return function AP  Page function
--- @return function ASP Short page function
function AddBriefingPages(_Briefing)
    return function() end, function() end;
end
API.AddBriefingPages = AddBriefingPages;

--- Creates a page.
---
--- #### Briefing Page
--- Possible fields for the page:
---
--- * `Title`           - Displayed page title
--- * `Text`            - Displayed page text
--- * `Position`        - Script name of position
--- * `Duration`        - Time until automatic skip
--- * `DialogCamera`    - Use closeup camera
--- * `DisableSkipping` - Allow/forbid skipping pages
--- * `Action`          - Function called when page is displayed
--- * `FarClipPlane`    - Render distance
--- * `Rotation`        - Camera rotation
--- * `Zoom`            - Camera zoom
--- * `Angle`           - Camera angle
--- * `FadeIn`          - Duration of fadein from black
--- * `FadeOut`         - Duration of fadeout to black
--- * `FaderAlpha`      - Mask alpha
--- * `BarOpacity`      - Opacity of bars
--- * `BigBars`         - Use big bars
--- * `FlyTo`           - Table with second set of camera configuration were camera flys to
--- * `MC`              - Table with choices to branch of in dialogs
---
--- *-> Example #1*
---
--- #### Flow control
--- In a briefing the player can be forced to make a choice that will have
--- different results. That is called multiple choice. Options must be provided
--- in a table. The target page can be defined with it's name or a function can
--- be provided for more control over the flow. Such funktions must return a
--- page name.
---
--- *-> Example #2*
---
--- Additionally each funktion can be marked to be removed when used
--- and not shown again when reentering the page.
---
--- *-> Example #3*
---
--- Also pages can be hidden by providing a function to check conditions.
---
--- *-> Example #4*
---
--- If a briefing is branched it must be manually ended after a branch is done
--- or it just simply shows the next page. To end a briefing, an empty page
--- must be added.
---
--- *-> Example #5*
---
--- Alternativly the briefing can continue at a different page. This allows to
--- create repeating structures within a briefing.
---
--- *-> Example #6*
---
--- To obtain selected answers at a later point the selection can be saved in a
--- global variable either in a option callback or in the finished function. The
--- number returned is the ID of the answer.
---
--- *-> Example #7*
---
--- #### Examples
---
--- * Example #1: A simple page
--- ```lua
--- AP {
---    Title        = "Marcus",
---    Text         = "This is a simple page.",
---    Position     = "Marcus",
---    Rotation     = 30,
---    DialogCamera = true,
--- };
--- ```
---
--- * Example #2: Usage of multiple choices
--- ```lua
--- AP {
---    Title        = "Marcus",
---    Text         = "That is a not so simple page.",
---    Position     = "Marcus",
---    Rotation     = 30,
---    DialogCamera = true,
---    MC = {
---        {"Option 1", "TargetPage"},
---        {"Option 2", Option2Clicked},
---    },
--- };
--- ```
---
--- * Example #3: One time usage option
--- ```lua
--- MC = {
---     ...
---     {"Option 3", "AnotherPage", Remove = true},
--- }
--- ```
---
--- * Example #4: Option with condition
--- ```lua
--- MC = {
---     ...
---     {"Option 3", "AnotherPage", Disable = OptionIsDisabled},
--- }
--- ```
---
--- * Example #5: Abort briefing
--- ```lua
--- AP()
--- ```
---
--- * Example #6: Jump to other page
--- ```lua
--- AP("SomePageName")
--- ```
---
--- * Example #7: Get selected option
--- ```lua
--- Briefing.Finished = function(_Data)
---     MyChoosenOption = _Data:GetPage("Choice"):GetSelected();
--- end
--- ```
---
--- @param _Data table Page data
function AP(_Data)
end

--- Creates a page in a simplified manner.
---
--- The function can create a automatic page name based of the page index. A
--- name can be an optional parameter at the start.
---
--- #### Settings
--- The function expects the following parameters:
--- 
--- * `Name`           - (Optional) Name of page
--- * `Title`          - Displayed page title
--- * `Text`           - Displayed page text
--- * `DialogCamera`   - Use closeup camera
--- * `Position`       - (Optional) Scriptname of focused entity
--- * `Action`         - (Optional) Action when page is shown
--- * `EnableSkipping` - (Optional) Allow/Forbid skipping page
---
--- #### Examples
---
--- ```lua
--- -- Long shot
--- ASP("Title", "Some important text.", false, "HQ");
--- -- Page Name
--- ASP("Page1", "Title", "Some important text.", false, "HQ");
--- -- Close-Up
--- ASP("Title", "Some important text.", true, "Marcus");
--- -- Call action
--- ASP("Title", "Some important text.", true, "Marcus", MyFunction);
--- -- Allow/forbid skipping
--- ASP("Title", "Some important text.", true, "HQ", nil, true);
--- ```
---
--- @param ... any List of page parameters
function ASP(...)
end


Lib={Loader={Paths={"maps/externalmap/"..Framework.GetCurrentMapName().."/","script/"},Version="LIB 1.0.0",Root="libertica",IsLocalEnv=GUI~=nil,IsHistoryEdition=Network.IsNATReady~=nil,Sources={},Loaded={}}}API={}QSB={}function Lib.Loader.PushPath(a)end;function Lib.Loader.Require(a)end;Lib.Require=Lib.Loader.Require;function Lib.Loader.Register(a)end;Lib.Register=Lib.Loader.Register;function Lib.Loader.LoadSourceFile(b,a)end;Lib.Register("comfort/CopyTable")function CopyTable(b,c)local d=c or{}assert(type(b)=="table","CopyTable: Source is nil!")assert(type(d)=="table")local e=0;for f=1,#b do e=e+1;if type(b[f])=="table"then table.insert(d,CopyTable(b[f]))else table.insert(d,b[f])end end;for g,h in pairs(b)do if type(g)=="number"then if g<=0 or g>e then if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end else if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end end;return d end;API.CopyTable=CopyTable;Lib.Register("comfort/DumpTable")function DumpTable(i,j)local k="{"if j then k=j.." = \n"..k end;Framework.WriteToLog(k)for g,h in pairs(i)do if type(h)=="table"then Framework.WriteToLog("["..g.."] = ")DumpTable(h)elseif type(h)=="string"then Framework.WriteToLog("["..g.."] = \""..h.."\"")else Framework.WriteToLog("["..g.."] = "..tostring(h))end end;Framework.WriteToLog("}")end;API.DumpTable=DumpTable;Lib.Register("comfort/GetActivePlayers")function GetActivePlayers()local l={}for f=1,8 do if Network.IsNetworkSlotIDUsed(f)then local m=Logic.GetSlotPlayerID(f)if Logic.PlayerGetIsHumanFlag(m)and Logic.PlayerGetGameState(m)~=0 then table.insert(l,m)end end end;return l end;API.GetActivePlayers=GetActivePlayers;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetAngleBetween")function GetAngleBetween(n,o)local p=0;local q=0;local r=0;if type(n)=="string"or type(n)=="number"then n=GetPosition(GetID(n))end;if type(o)=="string"or type(o)=="number"then o=GetPosition(GetID(o))end;assert(n~=nil)assert(o~=nil)p=n.X-o.X;q=n.Y-o.Y;if p==0 and q==0 then return 0 end;r=math.deg(math.asin(math.abs(p)/math.sqrt(p%2+q%2)))if p>=0 and q>0 then r=270-r elseif p<0 and q>0 then r=270+r elseif p<0 and q<=0 then r=90-r elseif p>=0 and q<=0 then r=90+r end;return r end;API.GetAngleBetween=GetAngleBetween;Lib.Require("comfort/GetCategoriesOfType")Lib.Register("comfort/GetCategoriesOfEntity")function GetCategoriesOfEntity(s)local t=Logic.GetEntityType(s)return GetCategoriesOfType(t)end;Lib.Register("comfort/GetCategoriesOfType")function GetCategoriesOfType(u)local v={}for g,h in pairs(EntityCategories)do if Logic.IsEntityTypeInCategory(u,h)==1 then table.insert(v,h)end end;return v end;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetCirclePosition")function GetCirclePosition(w,x,y)if not IsValidPosition(w)and not IsExisting(w)then error(false,"Target does not exist or is invalid position!")end;local z=w;local A=0+(y or 0)if type(w)~="table"then local B=GetID(w)A=Logic.GetEntityOrientation(B)+(y or 0)z=GetPosition(B)end;local d={X=z.X+x*math.cos(math.rad(A)),Y=z.Y+x*math.sin(math.rad(A)),Z=z.Z}return d end;API.GetRelatiePos=GetCirclePosition;Lib.Require("comfort/GetDistance")Lib.Register("comfort/GetClosestToTarget")function GetClosestToTarget(w,C)local D=0;local E=Logic.WorldGetSize()^2;for f=1,#C,1 do assert(type(C[f])~="table","Invalid entity.")local F=GetDistance(C[f],w,true)if F<E then E=F;D=C[f]end end;return D end;API.GetClosestToTarget=GetClosestToTarget;Lib.Require("comfort/GetActivePlayers")Lib.Register("comfort/GetDelayedPlayers")function GetDelayedPlayers()local l={}for g,h in pairs(GetActivePlayers())do if Network.IsWaitingForNetworkSlotID(API.GetPlayerSlotID(h))then table.insert(l,h)end end;return l end;API.GetDelayedPlayers=GetDelayedPlayers;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetDistance")function GetDistance(n,o,G)if type(n)=="string"or type(n)=="number"then n=GetPosition(n)end;if type(o)=="string"or type(o)=="number"then o=GetPosition(o)end;assert(type(n)=="table","Invalid frist position.")assert(type(o)=="table","Invalid second position.")local H=n.X-o.X;local I=n.Y-o.Y;if G then return H^2+I^2 end;return math.sqrt(H^2+I^2)end;API.GetDistance=GetDistance;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetGeometricFocus")function GetGeometricFocus(...)local arg={...}local J={X=0,Y=0,Z=0}local K=0;for f=1,#arg do local z=GetPosition(arg[f])if z then J.X=J.X+z.X;J.Y=J.Y+z.Y;J.Z=J.Z+(z.Z or 0)K=K+1 end end;return{X=J.X*1/K,Y=J.Y*1/K,Z=J.Z*1/K}end;API.GetGeometricFocus=GetGeometricFocus;Lib.Register("comfort/GetHealth")function GetHealth(s)local B=GetID(s)if IsExisting(B)then local L=Logic.GetEntityMaxHealth(B)local M=Logic.GetEntityHealth(B)return M/L*100 end;return 0 end;API.GetHealth=GetHealth;Lib.Register("comfort/GetPlayerAtSlot")function GetPlayerAtSlot(N)if Network.IsNetworkSlotIDUsed(N)then local O=Logic.GetSlotPlayerID(N)if Logic.PlayerGetIsHumanFlag(O)then return O end end;return 0 end;API.GetSlotPlayerID=GetPlayerAtSlot;Lib.Register("comfort/GetPosition")function GetPosition(s)if not s then return{X=0,Y=0,Z=0}end;if type(s)=="table"and s.X and s.Y then s.Z=s.Z or 0;return s end;assert(IsExisting(s),"Entity does not exist.")local P,Q,R=Logic.EntityGetPos(GetID(s))return{X=P,Y=Q,Z=R}end;API.GetPosition=GetPosition;Lib.Register("comfort/GetSiegecartTypeByEngineType")CONST_CART_TO_ENGINE={[Entities.U_MilitaryBatteringRam]=Entities.U_BatteringRamCart,[Entities.U_MilitaryCatapult]=Entities.U_CatapultCart,[Entities.U_MilitarySiegeTower]=Entities.U_SiegeTowerCart}function GetSiegecartTypeByEngineType(u)return CONST_CART_TO_ENGINE[u]end;Lib.Register("comfort/GetSiegeengineTypeByCartType")CONST_CART_TO_ENGINE={[Entities.U_BatteringRamCart]=Entities.U_MilitaryBatteringRam,[Entities.U_CatapultCart]=Entities.U_MilitaryCatapult,[Entities.U_SiegeTowerCart]=Entities.U_MilitarySiegeTower}function GetSiegeengineTypeByCartType(u)return CONST_CART_TO_ENGINE[u]end;Lib.Register("comfort/GetSoldiersOfGroup")function GetSoldiersOfGroup(S)local T={}local B=GetID(S)assert(B~=0,"Entity does not exist.")if Logic.IsLeader(B)==1 then local U={Logic.GetSoldiersAttachedToLeader(B)}for f=2,U[1]+1 do table.insert(T,U[f])end end;return T end;API.GetSoldiersOfGroup=GetSoldiersOfGroup;Lib.Register("comfort/global/CreateCartByGoodType")function CreateCartByGoodType(V,W,X,Y,Z)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")Y=Y or 0;local _=0;local z=GetID(W)assert(z~=0,"Entity does not exist.")local P,Q,R=Logic.EntityGetPos(z)if Logic.IsBuilding(z)==1 then P,Q=Logic.GetBuildingApproachPosition(z)Y=Logic.GetEntityOrientation(z)-90 end;local a0=Logic.GetGoodCategoryForGoodType(X)if a0==GoodCategories.GC_Resource then _=Logic.CreateEntityOnUnblockedLand(Entities.U_ResourceMerchant,P,Q,Y,V)elseif X==Goods.G_Medicine then _=Logic.CreateEntityOnUnblockedLand(Entities.U_Medicus,P,Q,Y,V)elseif X==Goods.G_Gold or X==Goods.G_None or X==Goods.G_Information then if Z then _=Logic.CreateEntityOnUnblockedLand(Z,P,Q,Y,V)else _=Logic.CreateEntityOnUnblockedLand(Entities.U_GoldCart,P,Q,Y,V)end else _=Logic.CreateEntityOnUnblockedLand(Entities.U_Marketer,P,Q,Y,V)end;return _ end;API.CreateCartByGoodType=CreateCartByGoodType;Lib.Register("comfort/global/CreateEntityName")CreateEntityName_Sequence_ID=0;function CreateEntityName(a1)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")if type(a1)=="string"then return a1 else assert(type(a1)=="number","Invalid entity ID.")local a2=Logic.GetEntityName(a1)if type(a2)~="string"or a2==""then CreateEntityName_Sequence_ID=CreateEntityName_Sequence_ID+1;a2="AutomaticScriptName_"..CreateEntityName_Sequence_ID;Logic.SetEntityName(a1,a2)end;return a2 end end;API.CreateEntityName=CreateEntityName;Lib.Register("comfort/global/CreateStock")function CreateStock(V,X)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local a0=Logic.GetGoodCategoryForGoodType(X)if a0==GoodCategories.GC_Resource or X==Goods.G_None then local a3=Logic.GetStoreHouse(V)local a4=Logic.GetHeadquarters(V)if a3~=0 and Logic.GetIndexOnInStockByGoodType(a3,X)==-1 then if X~=Goods.G_Gold or X==Goods.G_Gold and a4==0 then Logic.AddGoodToStock(a3,X,0,true,true)end end end end;API.CreateStock=CreateStock;Lib.Register("comfort/global/GetQuestID")function GetQuestID(j)if type(j)=="number"then return j end;for g,h in pairs(Quests)do if h and g>0 then if h.Identifier==j then return g end end end;return-1 end;API.GetQuestID=GetQuestID;Lib.Require("comfort/global/GetQuestID")Lib.Register("comfort/global/IsValidQuest")function IsValidQuest(a5)return Quests[a5]~=nil or Quests[GetQuestID(a5)]~=nil end;API.IsValidQuest=IsValidQuest;Lib.Register("comfort/global/IsValidQuestName")CONST_REGEX_QUEST_NAME="^[A-Za-z0-9_ @ÄÖÜäöüß]+$"function IsValidQuestName(j)return string.find(j,CONST_REGEX_QUEST_NAME)~=nil end;API.IsValidQuestName=IsValidQuestName;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/LookAt")function LookAt(s,w)local a6=GetID(s)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(a6~=0,"Looking entity does not exist!")local a7,a8,a9=Logic.EntityGetPos(a6)local aa;local ab,ac,ad;if type(w)=="table"then ab=w.X;ac=w.Y;ad=w.Z else aa=GetID(w)assert(aa~=0,"Target entity does not exist!")ab,ac,ad=Logic.EntityGetPos(aa)end;assert(IsValidPosition({X=a7,Y=a8,Z=a9}),"Invalid looking position!")assert(IsValidPosition({X=ab,Y=ac,Z=ad}),"Invalid target position!")Angle=math.deg(math.atan2(ac-a8,ab-a7))Angle=Angle<0 and Angle+360 or Angle;if Logic.IsLeader(a6)==1 then local ae={Logic.GetSoldiersAttachedToLeader(a6)}for f=2,ae[1]+1 do Logic.SetOrientation(ae[f],Angle)end end;Logic.SetOrientation(a6,Angle)end;API.LookAt=LookAt;Lib.Register("comfort/global/Move")function Move(s,w,af)local _=GetID(s)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(_~=0,"Moving entity does not exist!")local ag;if type(w)~="table"then local aa=GetID(w)local P,Q,R=Logic.EntityGetPos(aa)ag={X=P,Y=Q}else ag=w end;if af then Logic.MoveEntity(_,ag.X,ag.Y)if Logic.IsSettler(_)==1 then Logic.SetTaskList(_,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(_,ag.X,ag.Y)end;StartSimpleJobEx(function(ah,w)if not IsExisting(ah)then return true end;if Logic.IsEntityMoving(ah)==false then if Logic.IsSettler(ah)==1 then Logic.SetTaskList(ah,TaskLists.TL_NPC_IDLE)end;return true end end,_,ag)end;API.Move=Move;Lib.Register("comfort/global/ReplaceEntity")function ReplaceEntity(s,u,ai)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local a6=GetID(s)if a6==0 then return 0 end;local aj=GetPosition(a6)local ak=ai or Logic.EntityGetPlayer(a6)local al=Logic.GetEntityOrientation(a6)local a2=Logic.GetEntityName(a6)DestroyEntity(a6)local aa=Logic.CreateEntity(u,aj.X,aj.Y,al,ak)Logic.SetEntityName(aa,a2)if Logic.IsSettler(aa)==1 then Logic.SetTaskList(aa,TaskLists.TL_NPC_IDLE)end;return aa end;API.ReplaceEntity=ReplaceEntity;Lib.Require("comfort/global/CreateStock")Lib.Require("comfort/global/CreateCartByGoodType")Lib.Register("comfort/global/SendCart")function SendCart(W,V,X,am,Z,an,ao)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local ap=GetID(W)if not IsExisting(ap)then return 0 end;local A=Logic.GetEntityOrientation(ap)local aq=Logic.GetEntityName(ap)local _=CreateCartByGoodType(V,ap,X,A,Z)assert(_~=0,"Cart was not created properly.")CreateStock(V,X)Logic.HireMerchant(_,V,X,am,V,an)if ao and Logic.IsBuilding(ap)==0 then Logic.SetEntityName(_,aq)DestroyEntity(ap)end;return _ end;API.SendCart=SendCart;Lib.Register("comfort/global/SetHealth")function SetHealth(s,ar)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(type(ar)=="number"and ar>=0)local B=GetID(s)assert(B~=0,"Entity does not exist.")assert(Logic.IsLeader(B)==0,"Can not be used on groups.")local L=Logic.GetEntityMaxHealth(B)local M=math.max(math.min(ar,L),0)local as=Logic.GetEntityHealth(B)local at=math.ceil(L*M/100)if at>as then Logic.HealEntity(B,at-as)elseif at<as then Logic.HurtEntity(B,as-at)end end;API.SetHealth=SetHealth;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/SetPosition")function SetPosition(s,w)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local _=GetID(s)if not _ then return end;local ag=GetPosition(w)assert(IsValidPosition(ag),"Invalid position.")for g,h in pairs(GetSoldiersOfGroup(_))do SetPosition(h,w)end;Logic.DEBUG_SetSettlerPosition(_,ag.X,ag.Y)end;API.SetPosition=SetPosition;Lib.Register("comfort/IsHistoryEdition")function IsHistoryEdition()return Network.IsNATReady~=nil end;API.IsHistoryEdition=IsHistoryEdition;Lib.Require("comfort/GetAngleBetween")Lib.Register("comfort/IsInCone")function IsInCone(W,au,av,aw)local ax=GetAngleBetween(au,W)local ay=av-aw;local az=av+aw;if ax>=ay and ax<=az then return true end;if(ax+180)%360>=(ay+180)%360 and(ax+180)%360<=(az+180)%360 then return true end;return false end;API.IsInCone=IsInCone;Lib.Register("comfort/IsLocalScript")function IsLocalScript()return GUI~=nil end;API.IsLocalScript=IsLocalScript;Lib.Register("comfort/IsMultiplayer")function IsMultiplayer()return Framework.IsNetworkGame()end;API.IsMultiplayer=IsMultiplayer;Lib.Register("comfort/IsMultiplayerReady")function IsMultiplayerReady()return Framework.IsNetworkGame()and Network.SessionHaveAllPlayersFinishedLoading()==true end;API.IsMultiplayerReady=IsMultiplayerReady;Lib.Register("comfort/IsValidPosition")function IsValidPosition(aA)if type(aA)=="table"then if aA.X~=nil and type(aA.X)=="number"and(aA.Y~=nil and type(aA.Y)=="number")then local aB={Logic.WorldGetSize()}if not aA.Z or aA.Z>=0 then if aA.X<aB[1]and aA.X>0 and aA.Y<aB[2]and aA.Y>0 then return true end end end end;return false end;API.IsValidPosition=IsValidPosition;Lib.Register("comfort/KeyOf")function KeyOf(aC,aD)if aD==nil then return false end;for g,h in pairs(aD)do if h==aC then return g end end end;API.KeyOf=KeyOf;Lib.Register("comfort/local/Test")Lib.Register("comfort/Round")function Round(aE,aF)aF=math.ceil(aF or 0)if aF<=0 then return math.floor(aE+0.5)end;return tonumber(string.format("%."..aF.."f",aE))end;API.Round=Round;Lib.Register("comfort/SerializeTable")function SerializeTable(i)local aG="{"for g,h in pairs(i)do local aH=type(g)=="string"and g or"["..g.."]"if type(h)=="table"then aG=aG..aH.." = "..SerializeTable(h)..", "elseif type(h)=="number"then aG=aG..aH.." = "..h..", "elseif type(h)=="string"then aG=aG..aH.." = \""..h.."\", "elseif type(h)=="boolean"or type(h)=="nil"then aG=aG..aH.." = "..tostring(h)..", "else aG=aG..aH.." = \""..tostring(h).."\", "end end;aG=aG.."}"return aG end;API.SerializeTable=SerializeTable;Lib.Register("comfort/ToBoolean")function ToBoolean(aI)if type(aI)=="boolean"then return aI end;if type(aI)=="number"then return aI==1 end;if string.find(string.lower(tostring(aI)),"^[1tjy\\+].*$")then return true end;return false end;API.ToBoolean=ToBoolean;Lib.Core=Lib.Core or{ModuleList={},Global={IsInstalled=false},Local={IsInstalled=false}}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Chat")Lib.Require("core/feature/Core_Debug")Lib.Require("core/feature/Core_LuaExtension")Lib.Require("core/feature/Core_Bugfix")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_ScriptingValue")Lib.Require("core/feature/Core_Text")Lib.Require("core/feature/Core_Job")Lib.Require("core/feature/Core_Save")Lib.Require("core/feature/Core_Quest")Lib.Register("core/Core")function log(aJ,...)local aK=aJ;if#arg>0 then aK=string.format(aK,unpack(arg))end;Framework.WriteToLog(aK)return aK end;function warn(aL,aJ,...)if not aL then local aM="{@color:255,0,0,255}"local aK=aM..log(aJ,unpack(arg))if GUI then GUI.AddNote(aK)else Logic.DEBUG_Addnote(aK)end;return aK end end;function error(aL,aJ,...)if not aL then local aK=log(aJ,unpack(arg))return assert(aL,aK)end end;function Lib.Core.Global:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if GameCallback_Lib_GetExternFilesToLoad then local aN=GameCallback_Lib_GetExternFilesToLoad()for f=1,#aN do Script.Load(aN)end end;for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Global and aO.Global.Initialize then aO.Global:Initialize()end end;self:OverrideOnSaveGameLoaded()self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()LoadBehaviors()Lib.Core.Local=nil end;self.IsInstalled=true end;function Lib.Core.Global:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Global and aO.Global.OnSaveGameLoaded then aO.Global:OnSaveGameLoaded()end end end;function Lib.Core.Global:OverrideOnSaveGameLoaded()Mission_OnSaveGameLoaded_Orig_Libertica=Mission_OnSaveGameLoaded;Mission_OnSaveGameLoaded=function()Lib.Core.Global:ExecuteLocal("Lib.Core.Local:OnSaveGameLoaded()")Lib.Core.Global:OnSaveGameLoaded()end end;function Lib.Core.Global:InitReportListener()GameCallback_Lib_OnEventReceived=function(ah,...)Lib.Core.LuaExtension:OnReportReceived(ah,...)Lib.Core.Report:OnReportReceived(ah,...)Lib.Core.Text:OnReportReceived(ah,...)Lib.Core.Job:OnReportReceived(ah,...)Lib.Core.ScriptingValue:OnReportReceived(ah,...)Lib.Core.Save:OnReportReceived(ah,...)Lib.Core.Quest:OnReportReceived(ah,...)Lib.Core.Chat:OnReportReceived(ah,...)Lib.Core.Debug:OnReportReceived(ah,...)Lib.Core.Bugfix:OnReportReceived(ah,...)if ah==Report.LoadingFinished then SendReportToLocal(Report.LoadingFinished,...)end;if ah==Report.EscapePressed then SendReportToLocal(Report.EscapePressed,...)end;for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Global and aO.Global.OnReportReceived then aO.Global:OnReportReceived(ah,...)end end;if ah==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Global:ExecuteLocal(aP,...)local aQ=aP;if arg and#arg>0 then aQ=aQ:format(unpack(arg))end;Logic.ExecuteInLuaLocalState(aQ)end;function Lib.Core.Global:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")end;function Lib.Core.Global:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")end;function Lib.Core.Local:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if GameCallback_Lib_GetExternFilesToLoad then local aN=GameCallback_Lib_GetExternFilesToLoad()for f=1,#aN do Script.Load(aN)end end;for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Local and aO.Local.Initialize then aO.Local:Initialize()end end;self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()Lib.Core.Global=nil end;self.IsInstalled=true end;function Lib.Core.Local:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Local and aO.Local.OnSaveGameLoaded then aO.Local:OnSaveGameLoaded()end end;self:SetEscapeKeyTrigger()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Local:InitReportListener()GameCallback_Lib_OnEventReceived=function(ah,...)Lib.Core.LuaExtension:OnReportReceived(ah,...)Lib.Core.Report:OnReportReceived(ah,...)Lib.Core.Text:OnReportReceived(ah,...)Lib.Core.Job:OnReportReceived(ah,...)Lib.Core.ScriptingValue:OnReportReceived(ah,...)Lib.Core.Save:OnReportReceived(ah,...)Lib.Core.Quest:OnReportReceived(ah,...)Lib.Core.Chat:OnReportReceived(ah,...)Lib.Core.Debug:OnReportReceived(ah,...)Lib.Core.Bugfix:OnReportReceived(ah,...)if ah==Report.LoadingFinished then XGUIEng.PopPage()end;for f=1,#Lib.Core.ModuleList do local aO=Lib[Lib.Core.ModuleList[f]]if aO.Local and aO.Local.OnReportReceived then aO.Local:OnReportReceived(ah,...)end end;if ah==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Local:ExecuteGlobal(aP,...)local aQ=aP;assert(not(IsHistoryEdition()and IsMultiplayer()),"Script command is not allowed in history edition multiplayer.")if arg and#arg>0 then aQ=aQ:format(unpack(arg))end;GUI.SendScriptCommand(aQ)end;function Lib.Core.Local:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")self:SetEscapeKeyTrigger()end;function Lib.Core.Local:SetEscapeKeyTrigger()Input.KeyBindDown(Keys.Escape,"SendReportToGlobal(Report.EscapePressed, GUI.GetPlayerID())",30,false)end;function Lib.Core.Local:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")self.LoadscreenWatchJobID=RequestHiResJob(function()if XGUIEng.IsWidgetShownEx("/LoadScreen/LoadScreen")==0 then SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())return true end end)HideLoadScreen_Orig_Core=HideLoadScreen;HideLoadScreen=function()HideLoadScreen_Orig_Core()XGUIEng.PushPage("/LoadScreen/LoadScreen",true)XGUIEng.ShowWidget("/LoadScreen/LoadScreen/ButtonStart",0)EndJob(Lib.Core.Local.LoadscreenWatchJobID)SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())end end;function PrepareLibrary()assert(not IsLocalScript(),"Must be called from global script!")Lib.Core.Global:Initialize()ExecuteLocal("Lib.Core.Local:Initialize()")end;function RegisterModule(j)assert(Lib[j],"Module '"..j.."' does not exist!")table.insert(Lib.Core.ModuleList,j)end;function ExecuteLocal(aP,...)assert(not IsLocalScript(),"Can not be used in local script.")Lib.Core.Global:ExecuteLocal(aP,...)end;function ExecuteGlobal(aP,...)assert(IsLocalScript(),"Can not be used in global script.")Lib.Core.Local:ExecuteGlobal(aP,...)end;Lib.Camera={Name="Camera",Global={},Local={BorderScrollDeactivated=false,ExtendedZoomHotKeyID=0,ExtendedZoomAllowed=true}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/camera/Camera_API")Lib.Require("module/camera/Camera_Text")Lib.Register("module/camera/Camera")function Lib.Camera.Global:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")Lib.Camera.Local=nil end;self.IsInstalled=true end;function Lib.Camera.Global:OnSaveGameLoaded()end;function Lib.Camera.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Camera.Local:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")self:ResetRenderDistance()self:DescribeExtendedZoomShortcut()self:InitExtendedZoomHotkey()Lib.Camera.Global=nil end;self.IsInstalled=true end;function Lib.Camera.Local:OnSaveGameLoaded()end;function Lib.Camera.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.SaveGameLoaded then if self.ExtendedZoomActive then self:ActivateExtendedZoom(GUI.GetPlayerID())end;self:InitExtendedZoomHotkey()self:ResetRenderDistance()end end;function Lib.Camera.Local:SetRenderDistance(aR)Camera.Cutscene_SetFarClipPlane(aR,aR)Display.SetFarClipPlaneMinAndMax(aR,aR)end;function Lib.Camera.Local:ResetRenderDistance()Camera.Cutscene_SetFarClipPlane(CONST_FARCLIPPLANE)Display.SetFarClipPlaneMinAndMax(CONST_FARCLIPPLANE_DEFAULT,CONST_FARCLIPPLANE_DEFAULT)end;function Lib.Camera.Local:DeactivateBorderScroll(V,aS)if V~=-1 and V~=GUI.GetPlayerID()or self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=true;if aS then Camera.RTS_FollowEntity(aS)end;Camera.RTS_SetBorderScrollSize(0)Camera.RTS_SetZoomWheelSpeed(0)SendReportToGlobal(Report.BorderScrollLocked,V,aS or 0)SendReport(Report.BorderScrollLocked,V,aS or 0)end;function Lib.Camera.Local:ActivateBorderScroll(V)if V~=-1 and V~=GUI.GetPlayerID()or not self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=false;Camera.RTS_FollowEntity(0)Camera.RTS_SetBorderScrollSize(3.0)Camera.RTS_SetZoomWheelSpeed(4.2)SendReportToGlobal(Report.BorderScrollReset,V)SendReport(Report.BorderScrollReset,V)end;function Lib.Camera.Local:SetCameraToEntity(s,aT,aU)local aj=GetPosition(s)local aV=aT or-45;local aW=aU or 0.5;Camera.RTS_SetLookAtPosition(aj.X,aj.Y)Camera.RTS_SetRotationAngle(aV)Camera.RTS_SetZoomFactor(aW)end;function Lib.Camera.Local:DescribeExtendedZoomShortcut()self:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID==0 then self.ExtendedZoomHotKeyID=AddShortcutDescription(Localize(Lib.Camera.Text.Shortcut.Hotkey),Localize(Lib.Camera.Text.Shortcut.Description))end end;function Lib.Camera.Local:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID~=0 then RemoveShortcutDescription(self.ExtendedZoomHotKeyID)self.ExtendedZoomHotKeyID=0 end end;function Lib.Camera.Local:InitExtendedZoomHotkey()Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.K,"Lib.Camera.Local:ToggleExtendedZoom(GUI.GetPlayerID())",2)end;function Lib.Camera.Local:ToggleExtendedZoom(V)if self.ExtendedZoomAllowed then if self.ExtendedZoomActive then self:DeactivateExtendedZoom(V)else self:ActivateExtendedZoom(V)end end end;function Lib.Camera.Local:ActivateExtendedZoom(V)if V~=-1 and V~=GUI.GetPlayerID()then return end;if not self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomDeactivated,V)end;self.ExtendedZoomActive=true;Camera.RTS_SetZoomFactorMax(0.870001)Camera.RTS_SetZoomFactor(0.870000)Camera.RTS_SetZoomFactorMin(0.099999)SendReportToGlobal(Report.ExtendedZoomDeactivated,V)end;function Lib.Camera.Local:DeactivateExtendedZoom(V)if V~=-1 and V~=GUI.GetPlayerID()then return end;if self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomActivated,V)end;self.ExtendedZoomActive=false;Camera.RTS_SetZoomFactor(0.500000)Camera.RTS_SetZoomFactorMax(0.500001)Camera.RTS_SetZoomFactorMin(0.099999)end;RegisterModule(Lib.Camera.Name)Lib.Construction={Name="Construction",Global={Construction={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}},Local={Construction={Restriction={BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={LastSelectedBuildingType=0,LastSelectedRoadType=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}}Lib.Require("comfort/GetCategoriesOfType")Lib.Require("comfort/GetDistance")Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/city/Construction_API")Lib.Require("module/city/Construction_Text")Lib.Register("module/city/Construction")function Lib.Construction.Global:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;Lib.Construction.Local=nil end;self.IsInstalled=true end;function Lib.Construction.Global:OnSaveGameLoaded()end;function Lib.Construction.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Global:WhitelistConstructTypeInArea(V,u,aX,aY,aZ)return self:ListConstructArea("BuildingAreaWhitelist",V,u,nil,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistConstructCategoryInArea(V,a_,aX,aY,aZ)return self:ListConstructArea("BuildingCateWhitelist",V,nil,a_,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistConstructTypeInTerritory(V,u,b0)return self:ListConstructTerritory("BuildingTerritoryWhitelist",V,u,nil,b0)end;function Lib.Construction.Global:WhitelistConstructCategoryInTerritory(V,a_,b0)return self:ListConstructTerritory("BuildingTerritoryWhitelist",V,nil,a_,b0)end;function Lib.Construction.Global:BlacklistConstructTypeInArea(V,u,aX,aY,aZ)return self:ListConstructArea("BuildingAreaBlacklist",V,u,nil,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistConstructCategoryInArea(V,a_,aX,aY,aZ)return self:ListConstructArea("BuildingAreaBlacklist",V,nil,a_,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistConstructTypeInTerritory(V,u,b0)return self:ListConstructTerritory("BuildingTerritoryBlacklist",V,u,nil,b0)end;function Lib.Construction.Global:BlacklistConstructCategoryInTerritory(V,a_,b0)return self:ListConstructTerritory("BuildingTerritoryBlacklist",V,nil,a_,b0)end;function Lib.Construction.Global:WhitelistConstructRoadInArea(V,b1,aX,aY,aZ)return self:ListConstructArea("RoadAreaWhitelist",V,b1,nil,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistConstructWallInArea(V,b2,aX,aY,aZ)return self:ListConstructArea("WallAreaWhitelist",V,b2,nil,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistConstructRoadInTerritory(V,b1,b0)return self:ListConstructTerritory("RoadTerritoryWhitelist",V,b1,nil,b0)end;function Lib.Construction.Global:WhitelistConstructWallInTerritory(V,b2,b0)return self:ListConstructTerritory("WallTerritoryWhitelist",V,b2,nil,b0)end;function Lib.Construction.Global:BlacklistConstructRoadInArea(V,b1,aX,aY,aZ)return self:ListConstructArea("RoadAreaBlacklist",V,b1,nil,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistConstructWallInArea(V,b2,aX,aY,aZ)return self:ListConstructArea("WallAreaBlacklist",V,b2,nil,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistConstructRoadInTerritory(V,b1,b0)return self:ListConstructTerritory("RoadTerritoryBlacklist",V,b1,nil,b0)end;function Lib.Construction.Global:BlacklistConstructWallInTerritory(V,b2,b0)return self:ListConstructTerritory("WallTerritoryBlacklist",V,b2,nil,b0)end;function Lib.Construction.Global:CustomRuleConstructBuilding(V,b3,...)return self:ListConstructCustom("BuildingCustomRule",V,b3,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructRoad(V,b3,...)return self:ListConstructCustom("RoadCustomRule",V,b3,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructWall(V,b3,...)return self:ListConstructCustom("WallCustomRule",V,b3,unpack(arg))end;function Lib.Construction.Global:ListConstructArea(C,V,u,a_,aX,aY,aZ)local _=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[C][V],{ID=_,Category=a_,Type=u,Center={X=aX,Y=aY},Area=aZ})self:MirrorConstructionRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:ListConstructTerritory(C,V,u,a_,b0)local _=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[C][V],{ID=_,Category=a_,Type=u,Territory=b0})self:MirrorConstructionRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:ListConstructCustom(C,V,b4,...)local _=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[C][V],{ID=_,Function=b4,Arguments=arg})self:MirrorConstructionRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:GetNewRestrictionID()self.Construction.Restriction.Index=self.Construction.Restriction.Index+1;local b5=self.Construction.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Construction.Restriction.Index = %d]],b5)return b5 end;function Lib.Construction.Global:MirrorConstructionRestrictionsToLocalScript()local b6=table.tostring(self.Construction.Restriction)ExecuteLocal([[Lib.Construction.Local.Construction.Restriction = %s]],b6)end;function Lib.Construction.Global:WhitelistKnockdownTypeInArea(V,u,aX,aY,aZ)return self:ListKnockdownArea("BuildingAreaWhitelist",V,u,nil,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInArea(V,a_,aX,aY,aZ)return self:ListKnockdownArea("BuildingAreaWhitelist",V,nil,a_,aX,aY,aZ)end;function Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(V,u,b0)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",V,u,nil,b0)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(V,a_,b0)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",V,nil,a_,b0)end;function Lib.Construction.Global:BlacklistKnockdownTypeInArea(V,u,aX,aY,aZ)return self:ListKnockdownArea("BuildingAreaBlacklist",V,u,nil,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInArea(V,a_,aX,aY,aZ)return self:ListKnockdownArea("BuildingAreaBlacklist",V,nil,a_,aX,aY,aZ)end;function Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(V,u,b0)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",V,u,nil,b0)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(V,a_,b0)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",V,nil,a_,b0)end;function Lib.Construction.Global:CustomRuleKnockdownBuilding(V,b3,...)return self:ListKnockdownCustom("BuildingCustomRule",V,b3,unpack(arg))end;function Lib.Construction.Global:ListKnockdownArea(C,V,u,a_,aX,aY,aZ)local _=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[C][V],{ID=_,Category=a_,Type=u,Center={X=aX,Y=aY},Area=aZ})self:MirrorKnockdownRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:ListKnockdownTerritory(C,V,u,a_,b0)local _=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[C][V],{ID=_,Category=a_,Type=u,Territory=b0})self:MirrorKnockdownRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:ListKnockdownCustom(C,V,b4,...)local _=self:GetNewRestrictionID()table.insert(self.Knockdown.Restriction[C][V],{ID=_,Function=b4,Arguments=arg})self:MirrorKnockdownRestrictionsToLocalScript()return _ end;function Lib.Construction.Global:GetNewProtectionID()self.Knockdown.Restriction.Index=self.Knockdown.Restriction.Index+1;local b5=self.Knockdown.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction.Index = %d]],b5)return b5 end;function Lib.Construction.Global:MirrorKnockdownRestrictionsToLocalScript()local b6=table.tostring(self.Knockdown.Restriction)ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction = %s]],b6)end;function Lib.Construction.Global:IsConstructionAllowed(V,u,aX,aY)local b7=Logic.GetTerritoryAtPosition(aX,aY)local v=GetCategoriesOfType(u)local b8=self.Construction.Restriction.BuildingTerritoryWhitelist[V]if#b8>0 then for g,h in pairs(b8)do if(h.Type==u or table.contains(v,h.Category))and h.Territory==b7 then return true end end;return false end;local b9=self.Construction.Restriction.BuildingAreaWhitelist[V]if#b9>0 then for g,h in pairs(b9)do if(h.Type==u or table.contains(v,h.Category))and h.Center and GetDistance({X=aX,Y=aY},h.Center)<=h.Area then return true end end;return false end;local ba=self.Construction.Restriction.BuildingTerritoryBlacklist[V]for g,h in pairs(ba)do if(h.Type==u or table.contains(v,h.Category))and h.Territory==b7 then return false end end;local bb=self.Construction.Restriction.BuildingAreaBlacklist[V]for g,h in pairs(bb)do if(h.Type==u or table.contains(v,h.Category))and h.Center and GetDistance({X=aX,Y=aY},h.Center)<=h.Area then return false end end;local bc=self.Construction.Restriction.BuildingCustomRule[V]for g,h in pairs(bc)do if _G[h.Function]and not _G[h.Function](V,u,aX,aY,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Global:OverwriteGameCallbacks()self.Orig_GameCallback_CanPlayerPlaceBuilding=GameCallback_CanPlayerPlaceBuilding;GameCallback_CanPlayerPlaceBuilding=function(V,u,aX,aY)if Lib.Construction.Global:IsConstructionAllowed(V,u,aX,aY)then return Lib.Construction.Global.Orig_GameCallback_CanPlayerPlaceBuilding(V,u,aX,aY)end;return false end end;function Lib.Construction.Local:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;self:OverrideBuildButtonClicked()self:OverridePlacementUpdate()Lib.Construction.Global=nil end;self.IsInstalled=true end;function Lib.Construction.Local:OnSaveGameLoaded()end;function Lib.Construction.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Local:IsKnockdownAllowed(V,a1,bd)local t=Logic.GetEntityType(a1)local P,Q,R=Logic.EntityGetPos(a1)local b7=GetTerritoryUnderEntity(a1)local v=GetCategoriesOfType(t)local b8=self.Knockdown.Restriction.BuildingTerritoryWhitelist[V]if#b8>0 then for g,h in pairs(b8)do if(h.Type==t or table.contains(v,h.Category))and h.Territory==b7 then return true end end;return false end;local b9=self.Knockdown.Restriction.BuildingAreaWhitelist[V]if#b9>0 then for g,h in pairs(b9)do if(h.Type==t or table.contains(v,h.Category))and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then return true end end;return false end;local ba=self.Knockdown.Restriction.BuildingTerritoryBlacklist[V]for g,h in pairs(ba)do if(h.Type==t or table.contains(v,h.Category))and h.Territory==b7 then return false end end;local bb=self.Knockdown.Restriction.BuildingAreaBlacklist[V]for g,h in pairs(bb)do if(h.Type==t or table.contains(v,h.Category))and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then return false end end;local bc=self.Knockdown.Restriction.BuildingCustomRule[V]for g,h in pairs(bc)do if _G[h.Function]and not _G[h.Function](V,a1,P,Q,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Local:OverwriteGameCallbacks()self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(be,bd)local m=Logic.EntityGetPlayer(be)if not Lib.Construction.Local:IsKnockdownAllowed(m,be,bd)then Message(Localize(Lib.Construction.Text.NoKnockdown))GUI.CancelBuildingKnockDown(be)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(be,bd)end end;function Lib.Construction.Local:OverrideBuildButtonClicked()self.Orig_BuildClicked=GUI_Construction.BuildClicked;GUI_Construction.BuildClicked=function(bf)Lib.Construction.Local.LastSelectedBuildingType=bf;Lib.Construction.Local.Orig_BuildClicked(bf)end;self.Orig_BuildStreetClicked=GUI_Construction.BuildStreetClicked;GUI_Construction.BuildStreetClicked=function(bg)bg=bg~=nil and bg or false;Lib.Construction.Local.LastSelectedRoadType=bg;Lib.Construction.Local.Orig_BuildStreetClicked(bg)end;self.Orig_BuildWallClicked=GUI_Construction.BuildWallClicked;GUI_Construction.BuildWallClicked=function(bf)if bf==nil then bf=GetUpgradeCategoryForClimatezone("WallSegment")end;Lib.Construction.Local.LastSelectedBuildingType=bf;Lib.Construction.Local.Orig_BuildWallClicked(bf)end;self.Orig_BuildWallGateClicked=GUI_Construction.BuildWallGateClicked;GUI_Construction.BuildWallGateClicked=function(bf)if bf==nil then bf=GetUpgradeCategoryForClimatezone("WallGate")end;Lib.Construction.Local.LastSelectedBuildingType=bf;Lib.Construction.Local.Orig_BuildWallGateClicked(bf)end;self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local bh=Logic.GetEntityType(GUI.GetSelectedEntity())Lib.Construction.Local.LastSelectedBuildingType=bh;Lib.Construction.Local.Orig_PlaceFieldClicked()end end;function Lib.Construction.Local:OverridePlacementUpdate()self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged=GameCallBack_GUI_ConstructWallSegmentCountChanged;GameCallBack_GUI_ConstructWallSegmentCountChanged=function(bi,bj)self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged(bi,bj)Lib.Construction.Local:CancleConstructWallState(GUI.GetPlayerID(),bi,bj)end;self.Orig_GameCallBack_GUI_BuildRoadCostChanged=GameCallBack_GUI_BuildRoadCostChanged;GameCallBack_GUI_BuildRoadCostChanged=function(bk)self.Orig_GameCallBack_GUI_BuildRoadCostChanged(bk)Lib.Construction.Local:CancleConstructRoad(GUI.GetPlayerID(),bk)end;self.Orig_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()Lib.Construction.Local:CancleWallGatesToCloseToEachother(GUI.GetPlayerID())Lib.Construction.Local.Orig_PlacementUpdate()end;self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local B=GUI.GetSelectedEntity()local m=Logic.EntityGetPlayer(B)local P,Q,R=Logic.EntityGetPos(B)if Lib.Construction.Local:AreOtherBallistasToCloseToPosition(m,P,Q,2500)then Message(Localize(Lib.Construction.Text.NoBallista))return end;Lib.Construction.Local.Orig_UpgradeTurretClicked()end end;function Lib.Construction.Local:AreOtherBallistasToCloseToPosition(V,bl,bm,bn)local bo,bp=Logic.GetPlayerEntitiesInArea(V,Entities.U_MilitaryBallista_BuildingSite,bl,bm,bn,1)local bq,br=Logic.GetPlayerEntitiesInArea(V,Entities.U_MilitaryBallista,bl,bm,bn,1)return bo>0 or bq>0 end;function Lib.Construction.Local:CancleConstructWallState(V,bi,bj)local bs=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType~=1 then local bt={Logic.GetCostForWall(bi,bj,StartTurretX,StartTurretY,EndTurretX,EndTurretY)}if bs==2 and bt[1]and bt[2]>0 then local P,Q=GUI.Debug_GetMapPositionUnderMouse()local b7=Logic.GetTerritoryAtPosition(P or 1,Q or 1)local bu=self.LastSelectedBuildingType;local bv,t=Logic.GetBuildingTypesInUpgradeCategory(bu)local bw=Logic.IsEntityTypeInCategory(t,EntityCategories.Wall)==1;local b8=self.Construction.Restriction.WallTerritoryWhitelist[V]if bw and#b8>0 then for g,h in pairs(b8)do if h.Type==true then if string.find(Logic.GetEntityTypeName(t),"B_Wall")and h.Territory==b7 then return end else if(t==Entities.B_PalisadeSegment or t==Entities.B_PalisadeGate)and h.Territory==b7 then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local b9=self.Construction.Restriction.WallAreaWhitelist[V]if bw and#b9>0 then for g,h in pairs(b8)do if h.Type==true then if string.find(Logic.GetEntityTypeName(t),"B_Wall")and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then return end else if(t==Entities.B_PalisadeSegment or t==Entities.B_PalisadeGate)and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local ba=self.Construction.Restriction.WallTerritoryBlacklist[V]if bw then for g,h in pairs(ba)do if h.Type==true then if string.find(Logic.GetEntityTypeName(t),"B_Wall")and h.Territory==b7 then self:CancelState(g_Construction.CurrentPlacementType)return end else if(t==Entities.B_PalisadeSegment or t==Entities.B_PalisadeGate)and h.Territory==b7 then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local bb=self.Construction.Restriction.WallAreaBlacklist[V]if bw then for g,h in pairs(bb)do if h.Type==true then if string.find(Logic.GetEntityTypeName(t),"B_Wall")and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end else if(t==Entities.B_PalisadeSegment or t==Entities.B_PalisadeGate)and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local bc=self.Construction.Restriction.WallCustomRule[V]for g,h in pairs(bc)do local bx=string.find(Logic.GetEntityTypeName(t),"B_Wall")~=nil;if _G[h.Function]and not _G[h.Function](V,bx,P,Q,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleConstructRoad(V,bk)local bs=GUI.GetCurrentStateID()local P,Q=GUI.Debug_GetMapPositionUnderMouse()local b7=Logic.GetTerritoryAtPosition(P or 1,Q or 1)if g_Construction.CurrentPlacementType==1 then if bs==5 and bk>0 then local by=not self.LastSelectedRoadType;local b8=self.Construction.Restriction.RoadTerritoryWhitelist[V]if#b8>0 then for g,h in pairs(b8)do if h.Type==by and h.Territory==b7 then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local b9=self.Construction.Restriction.RoadAreaWhitelist[V]if#b9>0 then for g,h in pairs(b9)do if h.Type==by and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local ba=self.Construction.Restriction.RoadTerritoryBlacklist[V]for g,h in pairs(ba)do if h.Type==by and h.Territory==b7 then self:CancelState(g_Construction.CurrentPlacementType)return end end;local bb=self.Construction.Restriction.RoadAreaBlacklist[V]for g,h in pairs(bb)do if h.Type==by and h.Center and GetDistance({X=P,Y=Q},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end;local bc=self.Construction.Restriction.RoadCustomRule[V]for g,h in pairs(bc)do if _G[h.Function]and not _G[h.Function](V,by,P,Q,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleWallGatesToCloseToEachother(V)local bs=GUI.GetCurrentStateID()if bs==3 then local bz=Lib.Construction.Local.LastSelectedBuildingType;local bA,t=Logic.GetBuildingTypesInUpgradeCategory(bz)local bB=t==Entities.B_PalisadeGate and 1200 or 2350;local P,Q=GUI.Debug_GetMapPositionUnderMouse()local bv,_=Logic.GetPlayerEntitiesInArea(V,t,P,Q,bB,1)if bv>0 then self:CancelState(-1)end end end;function Lib.Construction.Local:CancelState(bC)local aK=Lib.Construction.Text.NoWall;if bC==1 then aK=Lib.Construction.Text.NoRoad elseif bC==-1 then aK=Lib.Construction.Text.NoWallGate end;Message(Localize(aK))GUI.CancelState()end;RegisterModule(Lib.Construction.Name)Lib.LifestockSystem={Name="LifestockSystem",Global={CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleStarved="",SheepStarved=""}},Local={BuyLock=false,CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleTitle="",CattleDescription="",CattleDisabled="",SheepTitle="",SheepDescription="",SheepDisabled=""}},Shared={TechnologyConfig={{"R_Cattle",{de="Kühe züchten",en="Breeding Cows",fr="Vaches reproductrices"},{3,16,0},0},{"R_Sheep",{de="Schafe züchten",en="Breeding Sheeps",fr="Moutons reproducteurs"},{4,1,0},0}}}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/ui/UIBuilding")Lib.Require("module/faker/Technology")Lib.Require("module/promotion/Promotion")Lib.Require("module/city/LifestockSystem_API")Lib.Require("module/city/LifestockSystem_Text")Lib.Register("module/city/LifestockSystem")function Lib.LifestockSystem.Global:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()RequestJob(function()Lib.LifestockSystem.Global:ControlFeeding()Lib.LifestockSystem.Global:ControlDecay()end)Lib.LifestockSystem.Local=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Global:OnSaveGameLoaded()end;function Lib.LifestockSystem.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.LanguageChanged then self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)elseif ah==Report.BreedAnimalClicked then Lib.LifestockSystem.Global:BuyAnimal(arg[1],arg[2],arg[3])end end;function Lib.LifestockSystem.Global:BuyAnimal(bD,V,be)local bE=bD=="Cattle"and Entities.A_X_Cow01 or Entities.A_X_Sheep01;local bF=self[bD.."GrainCost"]if GetPlayerResources(Goods.G_Grain,V)<bF then return end;local P,Q=Logic.GetBuildingApproachPosition(be)local B=Logic.CreateEntity(bE,P,Q,0,V)AddGood(Goods.G_Grain,-1*bF,V)SendReport(Report[bD.."Bought"],V,B,be)SendReportToLocal(Report[bD.."Bought"],V,B,be)end;function Lib.LifestockSystem.Global:ControlFeeding()for m=1,8 do if Logic.PlayerGetIsHumanFlag(m)then local bG=self.CattleFeedingTimer;local bH={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.CattlePasture)}if bG>0 then local bI=math.max(bG*(1-0.03*#bH),15)if#bH>0 and Logic.GetTime()%math.floor(bI)==0 then local bJ=self.CattleGrainUpkeep;local bK=GetPlayerResources(Goods.G_Grain,m)if bK<bJ then local bL=false;for g,h in pairs(bH)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_CattlePasture,P,Q,750,1)if IsExisting(bM)and math.random(1,100)<=self.CattleStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.CattleStarved,m,h)SendReport(Report.CattleStarved,m,h)bL=true end end;if bL then local aK=Localize(self.Text.CattleStarved)AddMessage(aK)end else AddGood(Goods.G_Grain,-1*bJ,m)end end end;local bN=self.SheepFeedingTimer;local bO={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.SheepPasture)}if bN>0 then local bI=math.max(bN*(1-0.03*#bO),15)if#bO>0 and Logic.GetTime()%math.floor(bI)==0 then local bJ=self.SheepGrainUpkeep;local bK=GetPlayerResources(Goods.G_Grain,m)if bK<bJ then local bL=false;for g,h in pairs(bO)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_CattlePasture,P,Q,750,1)if IsExisting(bM)and math.random(1,100)<=self.SheepStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.SheepStarved,m,h)SendReport(Report.SheepStarved,m,h)end end;if bL then local aK=Localize(self.Text.SheepStarved)AddMessage(aK)end else AddGood(Goods.G_Grain,-1*bJ,m)end end end end end end;function Lib.LifestockSystem.Global:ControlDecay()if Logic.GetTime()%10==0 then local bP=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(bP)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_CattlePasture,P,Q,900,1)if IsExisting(bM)then local bQ=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,bQ-1)end end;local bR=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(bR)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_SheepPasture,P,Q,900,1)if IsExisting(bM)then local bQ=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,bQ-1)end end end end;function Lib.LifestockSystem.Local:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleTitle=XGUIEng.GetStringTableText("Names/A_X_Cow01")self.Text.CattleDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Cow")self.Text.CattleDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")self.Text.SheepTitle=XGUIEng.GetStringTableText("Names/A_X_Sheep01")self.Text.SheepDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Sheep")self.Text.SheepDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()self:InitBuyCowButton()self:InitBuySheepButton()Lib.LifestockSystem.Global=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Local:OnSaveGameLoaded()end;function Lib.LifestockSystem.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.CattleBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end elseif ah==Report.SheepBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end end end;function Lib.LifestockSystem.Local:BuyAnimalAction(bD,bS,a1)local bF=self[bD.."GrainCost"]local m=Logic.EntityGetPlayer(a1)if GetPlayerResources(Goods.G_Grain,m)<bF then local aK=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")Message(aK)return end;self.BuyLock=true;SendReportToGlobal(Report.BreedAnimalClicked,bD,m,a1)SendReport(Report.BreedAnimalClicked,bD,m,a1)end;function Lib.LifestockSystem.Local:BuyAnimalTooltip(bD,bS,a1)local bT=self.Text[bD.."Title"]local aK=self.Text[bD.."Description"]local bU=""local bF=self[bD.."GrainCost"]local m=Logic.EntityGetPlayer(a1)local bV=bD=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;if Logic.TechnologyGetState(m,bV)==0 then local bW=GUI_Tooltip.GetDisabledKeyForTechnologyType(bV)bU=GetStringText("UI_ButtonDisabled/"..bW)elseif XGUIEng.IsButtonDisabled(bS)==1 then bU=self.Text[bD.."Disabled"]end;SetTooltipCosts(bT,aK,bU,{Goods.G_Grain,bF},true)end;function Lib.LifestockSystem.Local:BuyAnimalUpdate(bD,bS,a1)local m=Logic.EntityGetPlayer(a1)local bV=bD=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;local bX=Logic.GetEntityType(a1)local bY=Logic.TechnologyGetState(m,bV)local bZ=bD=="Cattle"and{3,16}or{4,1}local b_=0;local c0=GetPlayerEntities(m,bX)local c1={Logic.GetPlayerEntitiesInCategory(m,EntityCategories[bD.."Pasture"])}if bY~=TechnologyStates.Unlocked and bY~=TechnologyStates.Researched or self.BuyLock or#c0*5<=#c1 then bZ=bD=="Cattle"and{4,2}or{4,3}b_=1 end;XGUIEng.DisableButton(bS,b_)SetIcon(bS,bZ)end;function Lib.LifestockSystem.Local:InitBuyCowButton()local z={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_CattlePasture,z[1],z[2],function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalAction("Cattle",bS,a1)end,function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalTooltip("Cattle",bS,a1)end,function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalUpdate("Cattle",bS,a1)end)end;function Lib.LifestockSystem.Local:InitBuySheepButton()local z={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_SheepPasture,z[1],z[2],function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalAction("Sheep",bS,a1)end,function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalTooltip("Sheep",bS,a1)end,function(bS,a1)Lib.LifestockSystem.Local:BuyAnimalUpdate("Sheep",bS,a1)end)end;function Lib.LifestockSystem.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for c2=1,8 do Logic.TechnologySetState(c2,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.LifestockSystem.Name)Lib.SettlementSurvival={Name="SettlementSurvival",Global={AnimalPlague={AnimalsBecomeSick=false,IsActive=false,AffectAI=false},Famine={IsActive=false,AffectAI=false},ColdWeather={IsActive=false,AffectAI=false},HotWeather={IsActive=false,AffectAI=false},Negligence={IsActive=false,AffectAI=false},Plague={IsActive=false,AffectAI=false},SuspendedSettlers={}},Local={SuspendedSettlers={}},Shared={AnimalPlague={InfectionChance=6,InfectionTimer=60,DeathChance=12,DeathTimer=30},ColdWeather={ConsumptionFactor=0.01,ConsumptionTimer=30,Temperature=5,InfectionChance=12},HotWeather={IgnitionChance=5,IgnitionTimer=30,Temperature=30},Famine={DeathChance=6,DeathTimer=30},Negligence={InfectionChance=6,InfectionTimer=90},Plague={DeathChance=12,DeathTimer=30},SuspendedSettlers={MourningTime=5*60}}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/city/SettlementSurvival_API")Lib.Require("module/city/SettlementSurvival_Text")Lib.Register("module/city/SettlementSurvival")function Lib.SettlementSurvival.Global:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")for m=1,8 do self.AnimalPlague[m]={}self.ColdWeather[m]={Consumption=0}self.Famine[m]={}self.Negligence[m]={}self.Plague[m]={}self.SuspendedSettlers[m]={}end;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()local c3=Logic.GetCurrentTurn()Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(c3)Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(c3)Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(c3)Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(c3)Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(c3)Lib.SettlementSurvival.Global:ControlAnimalInfections(c3)Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(c3)Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(c3)Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(c3)end)Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Global:OnSaveGameLoaded()self:RestoreSettlerSuspension()end;function Lib.SettlementSurvival.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.FireAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif ah==Report.FireAlarmActivated_Internal then self:RestoreSettlerSuspension()elseif ah==Report.RepairAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif ah==Report.ReRepairAlarmActivated_Internal then self:RestoreSettlerSuspension()end end;function Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.AnimalPlague.IsActive and m>=1 and m<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(m)then local bO={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.SheepPasture)}local c6={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.CattlePasture)}local c1=Array_Append(bO,c6)for f=1,#c1 do if not self.AnimalPlague[m][c1[f]]and Logic.IsFarmAnimalInPasture(c1[f])and Logic.IsFarmAnimalIll(c1[f])then self.AnimalPlague[m][c1[f]]={c5}end end;for c7,h in pairs(self.AnimalPlague[m])do if not IsExisting(c7)or not Logic.IsFarmAnimalInPasture(c7)or not Logic.IsFarmAnimalIll(c7)then self.AnimalPlague[m][c7]=nil end end;local c8=Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer;local c9=false;if c5%c8==0 then for c7,bA in pairs(self.AnimalPlague[m])do local ca=Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance;if GetPlayerResources(Goods.G_Herb,m)>10 then AddGood(Goods.G_Herb,-1,m)ca=ca/2 end;if ca>=1 and math.random(1,100)<=math.min(ca,100)then SendReport(Report.AnimalDiedFromIllness,c7)SendReportToLocal(Report.AnimalDiedFromIllness,c7)SetHealth(c7,0)c9=true end end end;if c9 then self:Print(m,Lib.SettlementSurvival.Text.Alarms.AnimalDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(c4)if not Lib.LifestockSystem or not Lib.LifestockSystem.Global.IsInstalled then if Logic.GetTime()%10==0 then local bP=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(bP)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_CattlePasture,P,Q,900,1)if IsExisting(bM)then local bQ=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,bQ-1)end end;local bR=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(bR)do local P,Q,R=Logic.EntityGetPos(h)local bA,bM=Logic.GetEntitiesInArea(Entities.B_SheepPasture,P,Q,900,1)if IsExisting(bM)then local bQ=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,bQ-1)end end end end end;function Lib.SettlementSurvival.Global:ControlAnimalInfections(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.AnimalPlague.AnimalsBecomeSick then if self.AnimalPlague.IsActive and m>=1 and m<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(m)then local cb=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer;if c5%cb==0 then local bO={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.SheepPasture)}local c6={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.CattlePasture)}local c1=Array_Append(bO,c6)local ca=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;for f=#c1,1,-1 do if Logic.IsFarmAnimalInPasture(c1[f])and not Logic.IsFarmAnimalIll(c1[f])then if math.random(1,100)<=ca then Logic.MakeFarmAnimalIll(c1[f])end end end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.HotWeather.IsActive and m>=1 and m<=8 then if self.HotWeather.AffectAI or Logic.PlayerGetIsHumanFlag(m)then if Logic.GetCurrentTemperature()>=Lib.SettlementSurvival.Shared.HotWeather.Temperature then local cc=Lib.SettlementSurvival.Shared.HotWeather.IgnitionTimer;if c5%cc==0 then local cd={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.OuterRimBuilding)}local ce={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.CityBuilding)}local cf=Array_Append(cd,ce)local cg=false;for f=1,#cf do if Logic.IsConstructionComplete(cf[f])==1 and not Logic.IsBurning(cf[f])then local ch=Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance;if math.random(1,100)<=ch then Logic.DEBUG_SetBuildingOnFire(cf[f],50)cg=true end end end;if cg then self:Print(m,Lib.SettlementSurvival.Text.Alarms.BuildingBurning)end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.ColdWeather.IsActive and m>=1 and m<=8 then if self.ColdWeather.AffectAI or Logic.PlayerGetIsHumanFlag(m)then if Logic.GetCurrentTemperature()<=Lib.SettlementSurvival.Shared.ColdWeather.Temperature then local ci=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer;if c5%ci==0 then local cj=0;local cd={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.OuterRimBuilding)}local ce={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.CityBuilding)}local cf=Array_Append(cd,ce)for f=1,#cf do if Logic.IsConstructionComplete(cf[f])==1 then local ck=0;for bA,cl in pairs({Logic.GetWorkersAndSpousesForBuilding(cf[f])})do if not self:IsSettlerSuspended(cl)then ck=ck+1 end end;if Logic.IsNeedActive(cf[f],Needs.Clothes)and Logic.GetNeedState(cf[f],Needs.Clothes)>0.5 then ck=ck*0.5 end;cj=cj+ck end end;local cm=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionFactor*cj;local cn=GetPlayerResources(Goods.G_Wood,m)self.ColdWeather[m].Consumption=self.ColdWeather[m].Consumption+cm;if self.ColdWeather[m].Consumption>1 then local co=math.floor(cm)AddGood(Goods.G_Wood,-1*math.min(co,cn),m)self.ColdWeather[m].Consumption=self.ColdWeather[m].Consumption-co end;if cm>cn then local cp=Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance;for f=1,#cf do if math.random(1,100)<=cp then Logic.MakeBuildingIll(cf[f])end end;self:Print(m,Lib.SettlementSurvival.Text.Alarms.SettlerTemperature)end end end end end end;function Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.Negligence.IsActive and m>=1 and m<=8 then if self.Negligence.AffectAI or Logic.PlayerGetIsHumanFlag(m)then local cq={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Spouse)}local cr={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Worker)}cr=Array_Append(cq,cr)for f=1,#cr do if not self.Negligence[m][cr[f]]and Logic.GetEntityType(cr[f])~=Entities.U_Pharmacist and(self:IsSettlerDirty(cr[f])or self:IsSettlerBored(cr[f]))and not self:IsSettlerSuspended(cr[f])and not Logic.IsIll(cr[f])then self.Negligence[m][cr[f]]={c5}end end;for cl,h in pairs(self.Negligence[m])do if not self:IsSettlerBored(cl)and not self:IsSettlerDirty(cl)then self.Negligence[m][cl]=nil end end;local cb=Lib.SettlementSurvival.Shared.Negligence.InfectionTimer;local c9=false;if c5%cb==0 then for cl,h in pairs(self.Negligence[m])do if h[1]+cb<c5 then local ca=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;if math.random(1,100)<=ca then if not self:IsSettlerCarryingHygiene(cl)and not self:IsSettlerCarryingBeer(cl)and not self:IsSettlerSuspended(cl)then Logic.MakeSettlerIll(cl)c9=true end end end end end;if c9 then self:Print(m,Lib.SettlementSurvival.Text.Alarms.SettlerNegligence)end end end end;function Lib.SettlementSurvival.Global:IsSettlerDirty(s)local B=GetID(s)local cs=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(cs,Needs.Hygiene)end;function Lib.SettlementSurvival.Global:IsSettlerBored(s)local B=GetID(s)local cs=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(cs,Needs.Entertainment)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingHygiene(s)local B=GetID(s)local ct=Logic.GetCurrentTaskList(B)return ct and ct:find("_HYGIENE")end;function Lib.SettlementSurvival.Global:IsSettlerCarryingBeer(s)local B=GetID(s)local ct=Logic.GetCurrentTaskList(B)return ct and ct:find("_ENTERTAINMENT")end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.Famine.IsActive and m>=1 and m<=8 then if self.Famine.AffectAI or Logic.PlayerGetIsHumanFlag(m)then local cq={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Spouse)}local cr={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Worker)}cr=Array_Append(cq,cr)for f=1,#cr do if not self.Famine[m][cr[f]]and self:IsSettlerHungry(cr[f])and not self:IsSettlerSuspended(cr[f])then self.Famine[m][cr[f]]={c5}end end;for cl,h in pairs(self.Famine[m])do if not IsExisting(cl)or not self:IsSettlerHungry(cl)then self.Famine[m][cl]=nil end end;local c8=Lib.SettlementSurvival.Shared.Famine.DeathTimer;local c9=false;if c5%c8==0 then for cl,h in pairs(self.Famine[m])do if not self:IsSettlerCarryingFood(cl)and not self:IsSettlerSuspended(cl)then local ca=Lib.SettlementSurvival.Shared.Famine.DeathChance;if ca>=1 and math.random(1,100)<=math.ceil(ca)then SendReport(Report.SettlerDiedFromStarvation,cl)SendReportToLocal(Report.SettlerDiedFromStarvation,cl)self:SuspendSettler(cl,true)c9=true end end end end;if c9 then self:Print(m,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromHunger)end end end end;function Lib.SettlementSurvival.Global:IsSettlerHungry(s)local B=GetID(s)local cs=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(cs,Needs.Nutrition)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingFood(s)local B=GetID(s)local ct=Logic.GetCurrentTaskList(B)return ct and(ct:find("_NUTRITION")or ct:find("_FOOD"))end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(c4)local c5=math.floor(Logic.GetTime())local m=c4%10;if self.Plague.IsActive and m>=1 and m<=8 then if self.Plague.AffectAI or Logic.PlayerGetIsHumanFlag(m)then local cq={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Spouse)}local cr={Logic.GetPlayerEntitiesInCategory(m,EntityCategories.Worker)}cr=Array_Append(cq,cr)for f=1,#cr do if not self.Plague[m][cr[f]]and Logic.GetEntityType(cr[f])~=Entities.U_Pharmacist and Logic.IsIll(cr[f])and not self:IsSettlerSuspended(cr[f])then self.Plague[m][cr[f]]={c5}end end;for cl,h in pairs(self.Plague[m])do if not IsExisting(cl)or not Logic.IsIll(cl)then self.Plague[m][cl]=nil end end;local c8=Lib.SettlementSurvival.Shared.Plague.DeathTimer;local c9=false;if c5%c8==0 then for cl,h in pairs(self.Plague[m])do if not self:IsSettlerCarryingMedicine(cl)and not self:IsSettlerSuspended(cl)then local ca=Lib.SettlementSurvival.Shared.Plague.DeathChance;if GetPlayerResources(Goods.G_Herb,m)>10 then AddGood(Goods.G_Herb,-1,m)ca=ca/2 end;if ca>=1 and math.random(1,100)<=math.ceil(ca)then SendReport(Report.SettlerDiedFromIllness,cl)SendReportToLocal(Report.SettlerDiedFromIllness,cl)self:SuspendSettler(cl,true)c9=true end end end end;if c9 then self:Print(m,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:IsSettlerCarryingMedicine(s)local B=GetID(s)local ct=Logic.GetCurrentTaskList(B)return ct and ct:find("_MEDICINE")end;function Lib.SettlementSurvival.Global:ResumeSettler(s)local B=GetID(s)local m=Logic.EntityGetPlayer(B)local cu=Logic.GetStoreHouse(m)if cu~=0 then Logic.SetTaskList(B,TaskLists.TL_WAIT_THEN_WALK)Logic.SetVisible(B,true)if self.SuspendedSettlers[m][B]then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",m,B)self.SuspendedSettlers[m][B]=nil end end end;function Lib.SettlementSurvival.Global:SuspendSettler(s,cv)local B=GetID(s)local m=Logic.EntityGetPlayer(B)local cu=Logic.GetStoreHouse(m)if cu~=0 then local cs=Logic.GetSettlersWorkBuilding(B)local cw={Logic.GetWorkersAndSpousesForBuilding(cs)}local cx=false;for f=1,#cw do if not self:IsSettlerSuspended(s)then cx=true;break end end;if cx==false then Logic.SetNeedState(B,Needs.Nutrition,1.0)Logic.SetNeedState(B,Needs.Entertainment,1.0)Logic.SetNeedState(B,Needs.Clothes,1.0)Logic.SetNeedState(B,Needs.Hygiene,1.0)Logic.SetNeedState(B,Needs.Medicine,1.0)end;local P,Q,R=Logic.EntityGetPos(cu)Logic.DEBUG_SetSettlerPosition(B,P,Q)Logic.SetVisible(B,false)Logic.SetTaskList(B,TaskLists.TL_NPC_IDLE)if not self.SuspendedSettlers[m][B]then local cy=cv and Logic.GetTime()or-1;ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = {%d}",m,B,cy)self.SuspendedSettlers[m][B]={cy}end end end;function Lib.SettlementSurvival.Global:IsSettlerSuspended(s)local B=GetID(s)local m=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[m]and self.SuspendedSettlers[m][B]~=nil end;function Lib.SettlementSurvival.Global:HasSuspendedInhabitants(s)local cs=GetID(s)local cw={Logic.GetWorkersAndSpousesForBuilding(cs)}for f=1,#cw do if self:IsSettlerSuspended(cw[f])then return true end end;return false end;function Lib.SettlementSurvival.Global:RestoreSettlerSuspension()for m=1,8 do for g,h in pairs(self.SuspendedSettlers[m])do if not IsExisting(g)then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",m,g)self.SuspendedSettlers[m][g]=nil else self:SuspendSettler(g)end end end end;function Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(c4)local cz=Lib.SettlementSurvival.Shared.SuspendedSettlers.MourningTime;local c5=Logic.GetTime()local m=c4%10;if m>=1 and m<=8 then for g,h in pairs(self.SuspendedSettlers[m])do if h[1]>-1 and h[1]+cz<=c5 then self:ResumeSettler(g)DestroyEntity(g)end end end end;function Lib.SettlementSurvival.Global:Print(V,aJ)local aK=ConvertPlaceholders(Localize(aJ))ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            GUI.ClearNotes()
            GUI.AddNote("%s")
        end
    ]],V,aK)end;function Lib.SettlementSurvival.Local:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")self:OverwriteAlarmButtons()self:OverwriteGameCallbacks()self:OverwriteJumpToWorker()self:OverwriteUpgradeButton()for m=1,8 do self.SuspendedSettlers[m]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Local:OnSaveGameLoaded()end;function Lib.SettlementSurvival.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementSurvival.Local:OverwriteJumpToWorker()GUI_BuildingInfo.JumpToWorkerClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local m=GUI.GetPlayerID()local cA=GUI.GetSelectedEntity()local cB=0;local cC;if Logic.IsBuilding(cA)==1 then cB=cA;cC=false else if Logic.IsWorker(cA)==1 or Logic.IsSpouse(cA)==true or Logic.GetEntityType(cA)==Entities.U_Priest then cB=Logic.GetSettlersWorkBuilding(cA)cC=true end end;if cB~=0 then local cD={Logic.GetWorkersAndSpousesForBuilding(cB)}for f=#cD,1,-1 do local cl=cD[f]if Lib.SettlementSurvival.Local.SuspendedSettlers[m]then if Lib.SettlementSurvival.Local.SuspendedSettlers[m][cl]then table.remove(cD,f)end end end;local cE;if g_CloseUpView.Active==false and cC==true then cE=cA else local cF=1;for f=1,#cD do if cD[f]==g_LastSelectedInhabitant then cF=f+1;break end end;cE=cD[cF]if cE==0 then cE=cD[cF+1]end end;if cE==nil then local P,Q=Logic.GetEntityPosition(cB)g_LastSelectedInhabitant=nil;ShowCloseUpView(0,P,Q)GUI.SetSelectedEntity(cB)else GUI.SetSelectedEntity(cE)ShowCloseUpView(cE)g_LastSelectedInhabitant=cE end end end end;function Lib.SettlementSurvival.Local:IsSettlerSuspended(s)local B=GetID(s)local m=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[m]and self.SuspendedSettlers[m][B]~=nil end;function Lib.SettlementSurvival.Local:HasSuspendedInhabitants(s)local cs=GetID(s)local cw={Logic.GetWorkersAndSpousesForBuilding(cs)}for f=1,#cw do if self:IsSettlerSuspended(cw[f])then return true end end;return false end;function Lib.SettlementSurvival.Local:OverwriteGameCallbacks()self.Orig_GameCallback_Feedback_OnBuildingBurning=GameCallback_Feedback_OnBuildingBurning;GameCallback_Feedback_OnBuildingBurning=function(V,a1)Lib.SettlementSurvival.Local.Orig_GameCallback_Feedback_OnBuildingBurning(V,a1)SendReportToGlobal(Report.FireAlarmActivated_Internal,a1)end;self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(be,bd)if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(be)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(be)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(be,bd)end end;function Lib.SettlementSurvival.Local:OverwriteAlarmButtons()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopFireAlarmClicked;GUI_BuildingButtons.StartStopFireAlarmClicked=function()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsFireAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.FireAlarmActivated_Internal,B)else SendReportToGlobal(Report.FireAlarmDeactivated_Internal,B)end end;GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopRepairAlarmClicked;GUI_BuildingButtons.StartStopRepairAlarmClicked=function()GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsRepairAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.ReRepairAlarmActivated_Internal,B)else SendReportToGlobal(Report.RepairAlarmDeactivated_Internal,B)end end end;function Lib.SettlementSurvival.Local:OverwriteUpgradeButton()GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival=GUI_BuildingButtons.UpgradeClicked;GUI_BuildingButtons.UpgradeClicked=function()local cs=GUI.GetSelectedEntity()if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(cs)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(cs)return end;GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival()end end;RegisterModule(Lib.SettlementSurvival.Name)Lib.Selection={Name="Selection",Global={TrebuchetIDToCart={},SelectedEntities={}},Local={SelectedEntities={},TrebuchetDisassemble=false,TrebuchetErect=false,ThiefRelease=false,SiegeEngineRelease=true,MilitaryRelease=true}}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/entity/Selection_API")Lib.Require("module/entity/Selection_Text")Lib.Register("module/entity/Selection")function Lib.Selection.Global:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")for f=1,8 do self.SelectedEntities[f]={}end;Lib.Selection.Local=nil end;self.IsInstalled=true end;function Lib.Selection.Global:OnSaveGameLoaded()end;function Lib.Selection.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ForceTrebuchetTasklist then Logic.SetTaskList(arg[1],arg[2])elseif ah==Report.ErectTrebuchet then Lib.Selection.Global:MilitaryErectTrebuchet(arg[1])elseif ah==Report.DisambleTrebuchet then Lib.Selection.Global:MilitaryDisambleTrebuchet(arg[1])elseif ah==Report.ExpelSettler then DestroyEntity(arg[1])elseif ah==Report.SelectionChanged then local m=table.remove(arg,1)Lib.Selection.Global.SelectedEntities[m]=arg end end;function Lib.Selection.Global:MilitaryDisambleTrebuchet(a1)local P,Q,R=Logic.EntityGetPos(a1)local m=Logic.EntityGetPlayer(a1)if GameCallback_Lib_OnDisambleTrebuchet then GameCallback_Lib_OnDisambleTrebuchet(a1,m,P,Q,R)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,P,Q,0)Logic.SetEntityInvulnerabilityFlag(a1,1)Logic.SetEntitySelectableFlag(a1,0)Logic.SetVisible(a1,false)local cG=self.TrebuchetIDToCart[a1]if cG~=nil then Logic.SetEntityInvulnerabilityFlag(cG,0)Logic.SetEntitySelectableFlag(cG,1)Logic.SetVisible(cG,true)else cG=Logic.CreateEntity(Entities.U_SiegeEngineCart,P,Q,0,m)self.TrebuchetIDToCart[a1]=cG end;Logic.DEBUG_SetSettlerPosition(cG,P,Q)Logic.SetTaskList(cG,TaskLists.TL_NPC_IDLE)ExecuteLocal([[GUI.SelectEntity(%d)]],cG)end;function Lib.Selection.Global:MilitaryErectTrebuchet(a1)local P,Q,R=Logic.EntityGetPos(a1)local m=Logic.EntityGetPlayer(a1)if GameCallback_Lib_OnErectTrebuchet then GameCallback_Lib_OnErectTrebuchet(a1,m,P,Q,R)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,P,Q,0)Logic.SetEntityInvulnerabilityFlag(a1,1)Logic.SetEntitySelectableFlag(a1,0)Logic.SetVisible(a1,false)local cH;for g,h in pairs(self.TrebuchetIDToCart)do if h==a1 then cH=tonumber(g)end end;if cH==nil then cH=Logic.CreateEntity(Entities.U_Trebuchet,P,Q,0,m)self.TrebuchetIDToCart[cH]=a1 end;Logic.SetEntityInvulnerabilityFlag(cH,0)Logic.SetEntitySelectableFlag(cH,1)Logic.SetVisible(cH,true)Logic.DEBUG_SetSettlerPosition(cH,P,Q)ExecuteLocal([[GUI.SelectEntity(%d)]],cH)end;function Lib.Selection.Local:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")if not(IsHistoryEdition()and IsMultiplayer())then self:OverrideSelection()self:OverwriteMilitaryCommands()self:OverwriteMilitaryErect()self:OverwriteMilitaryDisamble()self:OverwriteMultiselectIcon()self:OverwriteMilitaryDismount()self:OverwriteThiefDeliver()self:OverwriteSelectKnight()self:OverwriteSelectAllUnits()self:OverwriteNamesAndDescription()end;for f=1,8 do self.SelectedEntities[f]={}end;Lib.Selection.Global=nil end;self.IsInstalled=true end;function Lib.Selection.Local:OnSaveGameLoaded()end;function Lib.Selection.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Selection.Local:OverrideSelection()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.Selection.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.Selection.Local:OnSelectionCanged(b)end end;function Lib.Selection.Local:OverwriteMilitaryCommands()GUI_Military.StandGroundClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local cI={GUI.GetSelectedEntities()}for f=1,#cI do local cJ=cI[f]local cK=Logic.GetEntityType(cJ)GUI.SendCommandStationaryDefend(cJ)if cK==Entities.U_Trebuchet then SendReportToGlobal(Report.ForceTrebuchetTasklist,cJ,TaskLists.TL_NPC_IDLE)SendReport(Report.ForceTrebuchetTasklist,cJ,TaskLists.TL_NPC_IDLE)end end end;GUI_Military.StandGroundUpdate=function()local cL="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack"local cI={GUI.GetSelectedEntities()}SetIcon(cL,{12,4})if#cI==1 then local cM=cI[1]local cK=Logic.GetEntityType(cM)if cK==Entities.U_Trebuchet then if Logic.GetAmmunitionAmount(cM)>0 then XGUIEng.ShowWidget(cL,0)else XGUIEng.ShowWidget(cL,1)end;SetIcon(cL,{1,10})else XGUIEng.ShowWidget(cL,1)end end end end;function Lib.Selection.Local:OverwriteMilitaryErect()GUI_Military.ErectClicked_Orig_Selection=GUI_Military.ErectClicked;GUI_Military.ErectClicked=function()GUI_Military.ErectClicked_Orig_Selection()local cI={GUI.GetSelectedEntities()}for f=1,#cI,1 do local bh=Logic.GetEntityType(cI[f])if bh==Entities.U_SiegeEngineCart then SendReportToGlobal(Report.ErectTrebuchet,cI[f])SendReport(Report.ErectTrebuchet,cI[f])end end end;GUI_Military.ErectUpdate_Orig_Selection=GUI_Military.ErectUpdate;GUI_Military.ErectUpdate=function()local cN=XGUIEng.GetCurrentWidgetID()local cO=GUI.GetSelectedEntity()local bh=Logic.GetEntityType(cO)if bh==Entities.U_SiegeEngineCart then local bU=Lib.Selection.Local.TrebuchetErect and 0 or 1;XGUIEng.DisableButton(cN,bU)SetIcon(cN,{12,6})else GUI_Military.ErectUpdate_Orig_Selection()end end;GUI_Military.ErectMouseOver_Orig_Selection=GUI_Military.ErectMouseOver;GUI_Military.ErectMouseOver=function()local cO=GUI.GetSelectedEntity()local cP;if Logic.GetEntityType(cO)==Entities.U_SiegeEngineCart then cP="ErectCatapult"else GUI_Military.ErectMouseOver_Orig_Selection()return end;GUI_Tooltip.TooltipNormal(cP,"Erect")end end;function Lib.Selection.Local:OverwriteMilitaryDisamble()GUI_Military.DisassembleClicked_Orig_Selection=GUI_Military.DisassembleClicked;GUI_Military.DisassembleClicked=function()GUI_Military.DisassembleClicked_Orig_Selection()local cI={GUI.GetSelectedEntities()}for f=1,#cI,1 do local bh=Logic.GetEntityType(cI[f])if bh==Entities.U_Trebuchet then SendReportToGlobal(Report.DisambleTrebuchet,cI[f])SendReport(Report.DisambleTrebuchet,cI[f])end end end;GUI_Military.DisassembleMouseOver_Orig_Selection=GUI_Military.DisassembleMouseOver;GUI_Military.DisassembleMouseOver=function()local cQ=GUI.GetSelectedEntity()local cR;if Logic.IsSiegeEngineUnderConstruction(cQ)==true then cR="Disassemble"else cR="DisassembleNoSoldiersAttached"if not Lib.Selection.Local.TrebuchetDisassemble then cR="Disassemble"end end;GUI_Tooltip.TooltipNormal(nil,cR)end;GUI_Military.DisassembleUpdate_Orig_Selection=GUI_Military.DisassembleUpdate;GUI_Military.DisassembleUpdate=function()local cN=XGUIEng.GetCurrentWidgetID()local cQ=GUI.GetSelectedEntity()local bh=Logic.GetEntityType(cQ)if bh==Entities.U_Trebuchet then local bU=Lib.Selection.Local.TrebuchetDisassemble and 0 or 1;XGUIEng.DisableButton(cN,bU)SetIcon(cN,{12,9})else GUI_Military.DisassembleUpdate_Orig_Selection()end end end;function Lib.Selection.Local:OnSelectionCanged(b)local m=GUI.GetPlayerID()local B=GUI.GetSelectedEntity()local bh=Logic.GetEntityType(B)local cI={GUI.GetSelectedEntities()}self.SelectedEntities[m]=cI;SendReportToGlobal(Report.SelectionChanged,m,unpack(cI))SendReport(Report.SelectionChanged,m,unpack(cI))if B~=nil then if bh==Entities.U_SiegeEngineCart then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngineCart",1)elseif bh==Entities.U_Trebuchet then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack",0)GUI_Military.StrengthUpdate()XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngine",1)end end end;function Lib.Selection.Local:OverwriteMultiselectIcon()GUI_MultiSelection.IconUpdate_Orig_Selection=GUI_MultiSelection.IconUpdate;GUI_MultiSelection.IconUpdate=function()local cN=XGUIEng.GetCurrentWidgetID()local cS=XGUIEng.GetWidgetsMotherID(cN)local cT=XGUIEng.GetWidgetNameByID(cS)local b5=cT+0;local cU=XGUIEng.GetWidgetPathByID(cS)local cV=cU.."/Health"local B=g_MultiSelection.EntityList[b5]local bh=Logic.GetEntityType(B)local cW=Logic.GetEntityHealth(B)local cX=Logic.GetEntityMaxHealth(B)if bh~=Entities.U_SiegeEngineCart and bh~=Entities.U_Trebuchet then GUI_MultiSelection.IconUpdate_Orig_Selection()return end;if Logic.IsEntityAlive(B)==false then XGUIEng.ShowWidget(cS,0)GUI_MultiSelection.CreateEX()return end;SetIcon(cN,g_TexturePositions.Entities[bh])cW=math.floor(cW/cX*100)if cW<50 then local cY=math.floor(2*255*cW/100)XGUIEng.SetMaterialColor(cV,0,255,cY,20,255)else local cZ=2*255-math.floor(2*255*cW/100)XGUIEng.SetMaterialColor(cV,0,cZ,255,20,255)end;XGUIEng.SetProgressBarValues(cV,cW,100)end;GUI_MultiSelection.IconMouseOver_Orig_Selection=GUI_MultiSelection.IconMouseOver;GUI_MultiSelection.IconMouseOver=function()local cN=XGUIEng.GetCurrentWidgetID()local cS=XGUIEng.GetWidgetsMotherID(cN)local cT=XGUIEng.GetWidgetNameByID(cS)local b5=tonumber(cT)local B=g_MultiSelection.EntityList[b5]local bh=Logic.GetEntityType(B)if bh~=Entities.U_SiegeEngineCart and bh~=Entities.U_Trebuchet then GUI_MultiSelection.IconMouseOver_Orig_Selection()return end;if bh==Entities.U_SiegeEngineCart then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.TrebuchetCart.Title),Localize(Lib.Selection.Text.Tooltips.TrebuchetCart.Text))elseif bh==Entities.U_Trebuchet then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.Trebuchet.Title),Localize(Lib.Selection.Text.Tooltips.Trebuchet.Text))end end end;function Lib.Selection.Local:OverwriteMilitaryDismount()GUI_Military.DismountClicked_Orig_Selection=GUI_Military.DismountClicked;GUI_Military.DismountClicked=function()local c_=GUI.GetSelectedEntity()local t=Logic.GetEntityType(c_)local d0=Logic.GetGuardedEntityID(c_)local d1=Logic.GetGuardianEntityID(c_)if d0~=0 and Logic.EntityGetPlayer(d0)~=GUI.GetPlayerID()then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsKnight(c_)or Logic.IsEntityInCategory(c_,EntityCategories.AttackableMerchant)==1 then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsLeader(c_)==1 and d0==0 then if Lib.Selection.Local.MilitaryRelease then Sound.FXPlay2DSound("ui\\menu_click")local ae={Logic.GetSoldiersAttachedToLeader(c_)}SendReportToGlobal(Report.ExpelSettler,ae[#ae])SendReport(Report.ExpelSettler,ae[#ae])return end end;if t==Entities.U_AmmunitionCart or t==Entities.U_BatteringRamCart or t==Entities.U_CatapultCart or t==Entities.U_SiegeTowerCart or t==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or t==Entities.U_MilitarySiegeTower then if Lib.Selection.Local.SiegeEngineRelease and d1==0 then Sound.FXPlay2DSound("ui\\menu_click")SendReportToGlobal(Report.ExpelSettler,c_)SendReport(Report.ExpelSettler,c_)else GUI_Military.DismountClicked_Orig_Selection()end end end;GUI_Military.DismountUpdate_Orig_Selection=GUI_Military.DismountUpdate;GUI_Military.DismountUpdate=function()local cN=XGUIEng.GetCurrentWidgetID()local c_=GUI.GetSelectedEntity()local t=Logic.GetEntityType(c_)local d0=Logic.GetGuardedEntityID(c_)local d1=Logic.GetGuardianEntityID(c_)SetIcon(cN,{12,1})if d0~=0 and Logic.EntityGetPlayer(d0)~=GUI.GetPlayerID()then XGUIEng.DisableButton(cN,0)GUI_Military.DismountUpdate_Orig_Selection()return end;if Logic.IsKnight(c_)or Logic.IsEntityInCategory(c_,EntityCategories.AttackableMerchant)==1 then XGUIEng.DisableButton(cN,0)GUI_Military.DismountUpdate_Orig_Selection()return end;SetIcon(cN,{14,12})if t==Entities.U_MilitaryLeader then if not Lib.Selection.Local.MilitaryRelease then XGUIEng.DisableButton(cN,1)else XGUIEng.DisableButton(cN,0)end;return end;if t==Entities.U_AmmunitionCart or t==Entities.U_BatteringRamCart or t==Entities.U_CatapultCart or t==Entities.U_SiegeTowerCart or t==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or t==Entities.U_MilitarySiegeTower then if d1~=0 then SetIcon(cN,{12,1})XGUIEng.DisableButton(cN,0)else if not Lib.Selection.Local.SiegeEngineRelease then XGUIEng.DisableButton(cN,1)else XGUIEng.DisableButton(cN,0)end end end end end;function Lib.Selection.Local:OverwriteThiefDeliver()GUI_Thief.ThiefDeliverClicked_Orig_Selection=GUI_Thief.ThiefDeliverClicked;GUI_Thief.ThiefDeliverClicked=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverClicked_Orig_Selection()return end;Sound.FXPlay2DSound("ui\\menu_click")local d2=GUI.GetSelectedEntity()if d2==nil or Logic.GetEntityType(d2)~=Entities.U_Thief then return end;SendReportToGlobal(Report.ExpelSettler,d2)SendReport(Report.ExpelSettler,d2)end;GUI_Thief.ThiefDeliverMouseOver_Orig_Selection=GUI_Thief.ThiefDeliverMouseOver;GUI_Thief.ThiefDeliverMouseOver=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverMouseOver_Orig_Selection()return end;SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Disabled))end;GUI_Thief.ThiefDeliverUpdate_Orig_Selection=GUI_Thief.ThiefDeliverUpdate;GUI_Thief.ThiefDeliverUpdate=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverUpdate_Orig_Selection()return end;local cN=XGUIEng.GetCurrentWidgetID()local d2=GUI.GetSelectedEntity()if d2==nil or Logic.GetEntityType(d2)~=Entities.U_Thief then XGUIEng.DisableButton(cN,1)else XGUIEng.DisableButton(cN,0)end;SetIcon(cN,{14,12})end end;function Lib.Selection.Local:OverwriteSelectKnight()GUI_Knight.JumpToButtonClicked=function()local m=GUI.GetPlayerID()local d3=Logic.GetKnightID(m)if d3>0 then g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}GUI.ClearSelection()if XGUIEng.IsModifierPressed(Keys.ModifierControl)then local d4={}Logic.GetKnights(m,d4)for f=1,#d4 do GUI.SelectEntity(d4[f])end else GUI.SelectEntity(Logic.GetKnightID(m))if Framework.GetTimeMs()-g_Selection.LastClickTime<g_Selection.MaxDoubleClickTime then local aj=GetPosition(d3)Camera.RTS_SetLookAtPosition(aj.X,aj.Y)else Sound.FXPlay2DSound("ui\\mini_knight")end;g_Selection.LastClickTime=Framework.GetTimeMs()end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)else GUI.AddNote("Debug: You do not have a knight!")end end end;function Lib.Selection.Local:OverwriteSelectAllUnits()GUI_MultiSelection.SelectAllPlayerUnitsClicked=function()if XGUIEng.IsModifierPressed(Keys.ModifierShift)then Lib.Selection.Local:ExtendedLeaderSortOrder()else Lib.Selection.Local:NormalLeaderSortOrder()end;Sound.FXPlay2DSound("ui\\menu_click")GUI.ClearSelection()local m=GUI.GetPlayerID()for f=1,#LeaderSortOrder do local d5=GetPlayerEntities(m,LeaderSortOrder[f])for c2=1,#d5 do GUI.SelectEntity(d5[c2])end end;local d6={}Logic.GetKnights(m,d6)for g=1,#d6 do GUI.SelectEntity(d6[g])end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)end end;function Lib.Selection.Local:NormalLeaderSortOrder()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_MilitarySiegeTower;LeaderSortOrder[15]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[16]=Entities.U_CatapultCart;LeaderSortOrder[17]=Entities.U_SiegeTowerCart;LeaderSortOrder[18]=Entities.U_BatteringRamCart;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,2,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,2,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.Selection.Local:ExtendedLeaderSortOrder()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_Trebuchet;LeaderSortOrder[15]=Entities.U_MilitarySiegeTower;LeaderSortOrder[16]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[17]=Entities.U_CatapultCart;LeaderSortOrder[18]=Entities.U_SiegeTowerCart;LeaderSortOrder[19]=Entities.U_BatteringRamCart;LeaderSortOrder[20]=Entities.U_AmmunitionCart;LeaderSortOrder[21]=Entities.U_Thief;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,2,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,2,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.Selection.Local:OverwriteNamesAndDescription()GUI_Tooltip.SetNameAndDescription_Orig_Selection=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(d7,d8,d9,da,db)local dc="/InGame/Root/Normal/AlignBottomRight"local cN=XGUIEng.GetCurrentWidgetID()if XGUIEng.GetWidgetID(dc.."/MapFrame/KnightButton")==cN then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.KnightButton.Title),Localize(Lib.Selection.Text.Tooltips.KnightButton.Text))return end;if XGUIEng.GetWidgetID(dc.."/MapFrame/BattalionButton")==cN then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.BattalionButton.Title),Localize(Lib.Selection.Text.Tooltips.BattalionButton.Text))return end;if XGUIEng.GetWidgetID(dc.."/DialogButtons/SiegeEngineCart/Dismount")==cN or XGUIEng.GetWidgetID(dc.."/DialogButtons/AmmunitionCart/Dismount")==cN or XGUIEng.GetWidgetID(dc.."/DialogButtons/Military/Dismount")==cN then local dd=GUI.GetSelectedEntity()if dd~=0 then if Logic.IsEntityInCategory(dd,EntityCategories.Military)==1 then local de=Logic.GetGuardianEntityID(dd)local df=Logic.GetGuardedEntityID(dd)if de==0 and df==0 then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Disabled))return end end end end;GUI_Tooltip.SetNameAndDescription_Orig_Selection(d7,d8,d9,da,db)end end;RegisterModule(Lib.Selection.Name)Lib.Technology={Name="Technology",Global={},Local={},Shared={CustomTechnologySequence=0,CustomTechnologies={}}}CONST_TECHNOLOGY_TO_INDEX={}Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/faker/Technology_API")Lib.Register("module/faker/Technology")function Lib.Technology.Global:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Local=nil end;self.IsInstalled=true end;function Lib.Technology.Global:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Local:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Global=nil end;self.IsInstalled=true end;function Lib.Technology.Local:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Shared:AddCustomTechnology(dg,j,dh)if Technologies[dg]then return end;self.CustomTechnologySequence=self.CustomTechnologySequence+1;local di={dg,self.CustomTechnologySequence,dh,{},j}table.insert(self.CustomTechnologies,di)Technologies[dg]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[dg]]=#self.CustomTechnologies;CONST_TECHNOLOGY_TO_INDEX[dg]=#self.CustomTechnologies;if IsLocalScript()then g_TexturePositions.Technologies[Technologies[dg]]=dh;AddStringText("UI_ObjectNames/"..dg,j)else for f=1,8 do Logic.TechnologySetState(f,Technologies[dg],0)end end end;function Lib.Technology.Shared:IsCustomTechnology(dj)return dj>=1000 and CONST_TECHNOLOGY_TO_INDEX[dj]~=nil end;function Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared.Orig_Logic_TechnologyGetState=Logic.TechnologyGetState;Logic.TechnologyGetState=function(V,dj)if dj and Lib.Technology.Shared:IsCustomTechnology(dj)then local b5=CONST_TECHNOLOGY_TO_INDEX[dj]if self.CustomTechnologies[b5]then return self.CustomTechnologies[b5][4][V]or TechnologyStates.Locked end end;return Lib.Technology.Shared.Orig_Logic_TechnologyGetState(V,dj)end;if not IsLocalScript()then Lib.Technology.Shared.Orig_Logic_TechnologySetState=Logic.TechnologySetState;Logic.TechnologySetState=function(V,dj,bd)if dj and Lib.Technology.Shared:IsCustomTechnology(dj)then local b5=CONST_TECHNOLOGY_TO_INDEX[dj]if self.CustomTechnologies[b5]then self.CustomTechnologies[b5][4][V]=bd;RequestHiResDelay(1,ExecuteLocal,[[Lib.Technology.Shared.CustomTechnologies[%d][4][%d] = %d]],b5,V,bd)return end end;Lib.Technology.Shared.Orig_Logic_TechnologySetState(V,dj,bd)end end end;function Lib.Technology.Shared:InitNewTechnologies()self.CustomTechnologySequence=0;for g,h in pairs(Technologies)do if self.CustomTechnologySequence<h then self.CustomTechnologySequence=h end end;self.CustomTechnologySequence=self.CustomTechnologySequence+1000-self.CustomTechnologySequence;for f=1,#self.CustomTechnologies do self.CustomTechnologySequence=self.CustomTechnologySequence+1;self.CustomTechnologies[f][2]=self.CustomTechnologySequence;local dk=self.CustomTechnologies[f]Technologies[dk[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[dk[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[dk[1]]=f;if IsLocalScript()then g_TexturePositions.Technologies[Technologies[dk[1]]]=dk[3]AddStringText("UI_ObjectNames/"..dk[1],dk[4])end end end;function Lib.Technology.Shared:RestoreNewTechnologies()for f=1,#self.CustomTechnologies do local dk=self.CustomTechnologies[f]Technologies[dk[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[dk[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[dk[1]]=f end end;RegisterModule(Lib.Technology.Name)Lib.BriefingSystem={Name="BriefingSystem",Global={Briefing={},BriefingQueue={},BriefingCounter=0},Local={ParallaxWidgets={{"/EndScreen/EndScreen/BackGround","/EndScreen/EndScreen"},{"/InGame/Root/EndScreen/BlackBG","/InGame/Root/EndScreen"},{"/InGame/Root/EndScreen/BG","/InGame/Root/EndScreen"},{"/InGame/Root/BlackStartScreen/BG","/InGame/Root/BlackStartScreen"}},Briefing={}},Text={NextButton={de="Weiter",en="Forward",fr="Continuer"},PrevButton={de="Zurück",en="Previous",fr="Retour"},EndButton={de="Beenden",en="Close",fr="Quitter"}}}CONST_BRIEFING={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/BriefingSystem_API")Lib.Register("module/information/BriefingSystem")CinematicEventTypes.Briefing=2;function Lib.BriefingSystem.Global:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")for f=1,8 do self.BriefingQueue[f]={}end;RequestHiResJob(function()Lib.BriefingSystem.Global:UpdateQueue()Lib.BriefingSystem.Global:BriefingExecutionController()end)Lib.BriefingSystem.Local=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Global:OnSaveGameLoaded()end;function Lib.BriefingSystem.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then elseif ah==Report.BriefingStarted then self:NextPage(arg[1])elseif ah==Report.BriefingEnded then SendReportToLocal(Report.BriefingEnded,arg[1],arg[2])elseif ah==Report.BriefingPageShown then SendReportToLocal(Report.BriefingPageShown,arg[1],arg[2])elseif ah==Report.BriefingOptionSelected then self:OnOptionSelected(arg[1],arg[2])elseif ah==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartBriefing(f)then local dl=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if dl and dl[1]==CinematicEventTypes.Briefing then self:NextBriefing(f)end end end end;function Lib.BriefingSystem.Global:BriefingExecutionController()for f=1,8 do if self.Briefing[f]and not self.Briefing[f].DisplayIngameCutscene then local dm=self.Briefing[f].CurrentPage;local dn=self.Briefing[f][dm]if dn and not dn.MC and dn.Duration>0 then if dn.Started+dn.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.BriefingSystem.Global:CreateBriefingGetPage(dp)dp.GetPage=function(self,dq)local _=Lib.BriefingSystem.Global:GetPageIDByName(dp.PlayerID,dq)return Lib.BriefingSystem.Global.Briefing[dp.PlayerID][_]end end;function Lib.BriefingSystem.Global:CreateBriefingAddPage(dp)dp.AddPage=function(self,dr)self.Length=(self.Length or 0)+1;dp.PageAnimation=dp.PageAnimation or{}dp.PageParallax=dp.PageParallax or{}local ds="Page"..#self+1;if dr.Name then ds=dr.Name else dr.Name=ds end;dr.__Legit=true;dr.Title=Localize(dr.Title or"")dr.Text=Localize(dr.Text or"")if dr.BigBars==nil then dr.BigBars=true end;if dr.Position then if not dr.Angle then dr.Angle=CONST_BRIEFING.CAMERA_ANGLEDEFAULT;if dr.DialogCamera then dr.Angle=CONST_BRIEFING.DLGCAMERA_ANGLEDEFAULT end end;if not dr.Rotation then dr.Rotation=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if dr.DialogCamera then dr.Rotation=CONST_BRIEFING.DLGCAMERA_ROTATIONDEFAULT end end;if not dr.Zoom then dr.Zoom=CONST_BRIEFING.CAMERA_ZOOMDEFAULT;if dr.DialogCamera then dr.Zoom=CONST_BRIEFING.DLGCAMERA_ZOOMDEFAULT end end;local dt,du,dv,dw;if dr.FlyTo then dt=dr.FlyTo.Position or dt;du=dr.FlyTo.Rotation or du;dv=dr.FlyTo.Zoom or dv;dw=dr.FlyTo.Angle or dw end;dp.PageAnimation[ds]={Clear=true,{dr.Duration or 1,dr.Position,dr.Rotation,dr.Zoom,dr.Angle,dt,du,dv,dw}}end;if not dr.FOV then if dr.DialogCamera then dr.FOV=CONST_BRIEFING.DLGCAMERA_FOVDEFAULT else dr.FOV=CONST_BRIEFING.CAMERA_FOVDEFAULT end end;if not dr.Duration then if not dr.Position then dr.DisableSkipping=false;dr.Duration=-1 else if dr.DisableSkipping==nil then dr.DisableSkipping=false end;dr.Duration=dr.Text:len()*CONST_BRIEFING.TIMER_PER_CHAR;dr.Duration=dr.Duration<6 and 6 or dr.Duration<6 end end;dr.GetSelected=function(self)return 0 end;table.insert(self,dr)return dr end end;function Lib.BriefingSystem.Global:CreateBriefingAddMCPage(dp)dp.AddMCPage=function(self,dr)local dn=self:AddPage(dr)dn.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;if dn.MC then for f=1,#dn.MC do dn.MC[f][1]=Localize(dn.MC[f][1])dn.MC[f].ID=dn.MC[f].ID or f end;dn.BigBars=true;dn.DisableSkipping=true;dn.Duration=-1 end;return dn end end;function Lib.BriefingSystem.Global:CreateBriefingAddRedirect(dp)dp.AddRedirect=function(self,w)self.Length=(self.Length or 0)+1;local dn=w==nil and-1 or w;table.insert(self,dn)return dn end end;function Lib.BriefingSystem.Global:StartBriefing(j,V,dx)self.BriefingQueue[V]=self.BriefingQueue[V]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(V,CinematicEventTypes.Briefing,j,dx)end;function Lib.BriefingSystem.Global:EndBriefing(V)Logic.SetGlobalInvulnerability(0)local dy=self.Briefing[V]SendReport(Report.BriefingEnded,V,dy.Name)if dy.Finished then dy:Finished()end;FinishCinematicEvent(dy.Name,V)self.Briefing[V]=nil end;function Lib.BriefingSystem.Global:NextBriefing(V)if self:CanStartBriefing(V)then local dz=Lib.UIEffects.Global:PopCinematicEventFromQueue(V)assert(dz[1]==CinematicEventTypes.Briefing)StartCinematicEvent(dz[2],V)local dy=dz[3]dy.Name=dz[2]dy.PlayerID=V;dy.CurrentPage=0;self.Briefing[V]=dy;self:TransformAnimations(V)self:TransformParallaxes(V)if dy.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Briefing[V].Starting then self.Briefing[V]:Starting()end;SendReportToLocal(Report.BriefingStarted,V,dy.Name,dy)SendReport(Report.BriefingStarted,V,dy.Name)end end;function Lib.BriefingSystem.Global:TransformAnimations(V)if self.Briefing[V].PageAnimation then for g,h in pairs(self.Briefing[V].PageAnimation)do local dm=self:GetPageIDByName(V,g)if dm~=0 then self.Briefing[V][dm].Animations={}self.Briefing[V][dm].Animations.Repeat=h.Repeat==true;self.Briefing[V][dm].Animations.Clear=h.Clear==true;for f=1,#h,1 do local dA={}dA.Interpolation=h[f].Interpolation;dA.Duration=h[f][1]or 2*60;if h[f][4]and type(h[f][4])~="table"then dA.Start={Position=type(h[f][2])~="table"and{h[f][2],0}or h[f][2],Rotation=h[f][3]or CONST_BRIEFING.CAMERA_ROTATIONDEFAULT,Zoom=h[f][4]or CONST_BRIEFING.CAMERA_ZOOMDEFAULT,Angle=h[f][5]or CONST_BRIEFING.CAMERA_ANGLEDEFAULT}local dB=h[f][6]or dA.Start.Position;dA.End={Position=type(dB)~="table"and{dB,0}or dB,Rotation=h[f][7]or dA.Start.Rotation,Zoom=h[f][8]or dA.Start.Zoom,Angle=h[f][9]or dA.Start.Angle}table.insert(self.Briefing[V][dm].Animations,dA)else dA.AnimFrames={}for c2=2,#h[f]do table.insert(dA.AnimFrames,h[f][c2])end end;table.insert(self.Briefing[V][dm].Animations,dA)end end end;self.Briefing[V].PageAnimation=nil end end;function Lib.BriefingSystem.Global:TransformParallaxes(V)if self.Briefing[V].PageParallax then for g,h in pairs(self.Briefing[V].PageParallax)do local dm=self:GetPageIDByName(V,g)if dm~=0 then self.Briefing[V][dm].Parallax={}self.Briefing[V][dm].Parallax.Clear=h.Clear==true;for f=1,4,1 do if h[f]then local dA={}dA.Image=h[f][1]dA.Interpolation=h[f].Interpolation;dA.Duration=h[f][2]or 2*60;dA.AnimData={}for c2=3,#h[f]do table.insert(dA.AnimData,h[f][c2])end;self.Briefing[V][dm].Parallax[f]=dA end end end end;self.Briefing[V].PageParallax=nil end end;function Lib.BriefingSystem.Global:NextPage(V)if self.Briefing[V]==nil then return end;self.Briefing[V].CurrentPage=self.Briefing[V].CurrentPage+1;local dm=self.Briefing[V].CurrentPage;if dm==-1 or dm==0 then self:EndBriefing(V)return end;local dn=self.Briefing[V][dm]if type(dn)=="table"then if dm<=#self.Briefing[V]then self.Briefing[V][dm].Started=Logic.GetTime()self.Briefing[V][dm].Duration=dn.Duration or-1;if self.Briefing[V][dm].Action then self.Briefing[V][dm]:Action()end;self:DisplayPage(V,dm)else self:EndBriefing(V)end elseif type(dn)=="number"or type(dn)=="string"then local ag=self:GetPageIDByName(V,self.Briefing[V][dm])self.Briefing[V].CurrentPage=ag-1;self:NextPage(V)else self:EndBriefing(V)end end;function Lib.BriefingSystem.Global:DisplayPage(V,dC)if self.Briefing[V]==nil then return end;local dn=self.Briefing[V][dC]if type(dn)=="table"then local dm=self.Briefing[V].CurrentPage;if dn.MC then for f=1,#dn.MC,1 do if type(dn.MC[f][3])=="function"then self.Briefing[V][dm].MC[f].Visible=dn.MC[f][3](V,dm,f)end end end end;SendReport(Report.BriefingPageShown,V,dC)end;function Lib.BriefingSystem.Global:SkipButtonPressed(V,dC)if not self.Briefing[V]then return end;local dm=self.Briefing[V].CurrentPage;if self.Briefing[V][dm].OnForward then self.Briefing[V][dm]:OnForward()end;self:NextPage(V)end;function Lib.BriefingSystem.Global:OnOptionSelected(V,dD)if self.Briefing[V]==nil then return end;local dm=self.Briefing[V].CurrentPage;if type(self.Briefing[V][dm])~="table"then return end;local dn=self.Briefing[V][dm]if dn.MC then local dE;for f=1,#dn.MC,1 do if dn.MC[f].ID==dD then dE=dn.MC[f]end end;if dE~=nil then local ag=dE[2]if type(dE[2])=="function"then ag=dE[2](V,dm,dD)end;self.Briefing[V][dm].MC.Selected=dE.ID;self.Briefing[V].CurrentPage=self:GetPageIDByName(V,ag)-1;self:NextPage(V)end end end;function Lib.BriefingSystem.Global:GetCurrentBriefing(V)return self.Briefing[V]end;function Lib.BriefingSystem.Global:GetCurrentBriefingPage(V)if self.Briefing[V]then local dm=self.Briefing[V].CurrentPage;return self.Briefing[V][dm]end end;function Lib.BriefingSystem.Global:GetPageIDByName(V,j)if type(j)=="string"then if self.Briefing[V]~=nil then for f=1,#self.Briefing[V],1 do if type(self.Briefing[V][f])=="table"and self.Briefing[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.BriefingSystem.Global:CanStartBriefing(V)return self.Briefing[V]==nil and not IsCinematicEventActive(V)and self.LoadscreenClosed end;function Lib.BriefingSystem.Local:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")self:OverrideThroneRoomFunctions()Lib.BriefingSystem.Global=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Local:OnSaveGameLoaded()end;function Lib.BriefingSystem.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then elseif ah==Report.BriefingStarted then self:StartBriefing(arg[1],arg[2],arg[3])elseif ah==Report.BriefingEnded then self:EndBriefing(arg[1],arg[2])elseif ah==Report.BriefingPageShown then self:DisplayPage(arg[1],arg[2])elseif ah==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Local:StartBriefing(V,dF,dp)if GUI.GetPlayerID()~=V then return end;self.Briefing[V]=dp;self.Briefing[V].LastSkipButtonPressed=0;self.Briefing[V].CurrentPage=0;local dG,dH=Camera.RTS_GetLookAtPosition()local dI=Camera.RTS_GetRotationAngle()local dJ=Camera.RTS_GetZoomFactor()local dK=Game.GameTimeGetFactor(V)self.Briefing[V].Backup={Camera={dG,dH,dI,dJ},Speed=dK}DeactivateNormalInterface(V)DeactivateBorderScroll(V)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,1)end;self:ActivateCinematicMode(V)end;function Lib.BriefingSystem.Local:EndBriefing(V,dF)if GUI.GetPlayerID()~=V then return end;local dy=self.Briefing[V]if dy.RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,dy.Backup.Speed)end;if dy.RestoreCamera then Camera.RTS_SetLookAtPosition(dy.Backup.Camera[1],dy.Backup.Camera[2])Camera.RTS_SetRotationAngle(dy.Backup.Camera[3])Camera.RTS_SetZoomFactor(dy.Backup.Camera[4])end;self:DeactivateCinematicMode(V)ActivateNormalInterface(V)ActivateBorderScroll(V)Lib.UITools.Widget:UpdateHiddenWidgets()self.Briefing[V]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.BriefingSystem.Local:DisplayPage(V,dC)if GUI.GetPlayerID()~=V then return end;self.Briefing[V].AnimationQueue=self.Briefing[V].AnimationQueue or{}self.Briefing[V].ParallaxLayers=self.Briefing[V].ParallaxLayers or{}self.Briefing[V].CurrentPage=dC;if type(self.Briefing[V][dC])=="table"then self.Briefing[V][dC].Started=Logic.GetTime()self:SetPageFarClipPlane(V,dC)self:DisplayPageBars(V,dC)self:DisplayPageTitle(V,dC)self:DisplayPageText(V,dC)self:DisplayPageControls(V,dC)self:DisplayPageAnimation(V,dC)self:DisplayPageFader(V,dC)self:DisplayPageParallaxes(V,dC)if self.Briefing[V][dC].MC then self:DisplayPageOptionsDialog(V,dC)end end end;function Lib.BriefingSystem.Local:SetPageFarClipPlane(V,dC)ResetRenderDistance()local dn=self.Briefing[V][dC]if dn.FarClipPlane then SetRenderDistance(dn.FarClipPlane)end end;function Lib.BriefingSystem.Local:DisplayPageBars(V,dC)local dn=self.Briefing[V][dC]local dL=dn.BarOpacity~=nil and dn.BarOpacity or 1;local dM=255*dL;local dN=255*dL;local dO=dn.BigBars and 1 or 0;local dP=dn.BigBars and 0 or 1;if dL==0 then dO=0;dP=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",dO)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",dP)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",dO)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",dP)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,dM)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,dM)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,dN)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,dN)end;function Lib.BriefingSystem.Local:DisplayPageTitle(V,dC)local dn=self.Briefing[V][dC]local dQ="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(dQ,"")if dn.Title then local bT=ConvertPlaceholders(Localize(dn.Title))if bT:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bT=XGUIEng.GetStringTableText(bT)end;if bT:sub(1,1)~="{"then bT="{@color:255,250,0,255}{center}"..bT end;XGUIEng.SetText(dQ,bT)end end;function Lib.BriefingSystem.Local:DisplayPageText(V,dC)local dn=self.Briefing[V][dC]local dR="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(dR,"")if dn.Text then local aK=ConvertPlaceholders(Localize(dn.Text))if aK:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then aK=XGUIEng.GetStringTableText(aK)end;if aK:sub(1,1)~="{"then aK="{center}"..aK end;if not dn.BigBars then aK="{cr}{cr}{cr}"..aK end;XGUIEng.SetText(dR,aK)end end;function Lib.BriefingSystem.Local:DisplayPageControls(V,dC)local dn=self.Briefing[V][dC]local dS=1;dS=(dn.Duration==nil or dn.Duration==-1)and 1 or 0;if dn.DisableSkipping~=nil then dS=dn.DisableSkipping and 0 or 1 end;if dn.MC~=nil then dS=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",dS)end;function Lib.BriefingSystem.Local:DisplayPageAnimation(V,dC)local dn=self.Briefing[V][dC]if dn.Animations then if dn.Animations.Clear then self.Briefing[V].CurrentAnimation=nil;self.Briefing[V].AnimationQueue={}end;for f=1,#dn.Animations,1 do local dT=table.copy(dn.Animations[f])table.insert(self.Briefing[V].AnimationQueue,dT)end end end;function Lib.BriefingSystem.Local:DisplayPageFader(V,dC)local dn=self.Briefing[V][dC]g_Fade.To=dn.FaderAlpha or 0;local dU=dn.FadeIn;if dU then FadeIn(dU)end;local dV=dn.FadeOut;if dV then self.Briefing[V].FaderJob=RequestHiResJob(function(dW,dX)if Logic.GetTimeMs()>dW-dX*1000 then FadeOut(dX)return true end end,Logic.GetTimeMs()+(dn.Duration or 0)*1000,dV)end end;function Lib.BriefingSystem.Local:DisplayPageParallaxes(V,dC)local dn=self.Briefing[V][dC]if dn.Parallax then if dn.Parallax.Clear then for f=1,#self.ParallaxWidgets do XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)end;self.Briefing[V].ParallaxLayers={}end;for f=1,4,1 do if dn.Parallax[f]then local dT=table.copy(dn.Parallax[f])dT.Started=XGUIEng.GetSystemTime()self.Briefing[V].ParallaxLayers[f]=dT end end end end;function Lib.BriefingSystem.Local:ControlParallaxes(V)if self.Briefing[V].ParallaxLayers then local c5=XGUIEng.GetSystemTime()for b5,dk in pairs(self.Briefing[V].ParallaxLayers)do local dY=self.ParallaxWidgets[b5][1]local dZ={GUI.GetScreenSize()}local d_=math.min(math.lerp(dk.Started,c5,dk.Duration),1)if dk.Interpolation then d_=math.min(dk:Interpolation(c5),1)end;local e0=dk.Image;if type(e0)=="function"then e0=dk:Image(d_,dk.Started,c5,dk.Duration)end;if type(e0)=="table"then local e1=math.min(math.ceil(#e0*d_),#e0)e0=e0[e1]end;local e2,e3,e4,e5,e6=0,0,1,1,255;if dk.AnimData then local e7=#dk.AnimData;if dk.AnimData[3]and type(dk.AnimData[3])~="table"then e2,e3,e4,e5,e6=unpack(dk.AnimData)else if#dk.AnimData>=4 then local e8=math.floor(d_*(e7-3))+1;e8=math.min(e8,e7-3)e2,e3,e4,e5,e6=self:CubicParallaxInterpolation(dk.AnimData[e8],dk.AnimData[e8+1],dk.AnimData[e8+2],dk.AnimData[e8+3],d_)elseif#dk.AnimData>=2 then local e8=math.floor(d_*(e7-1))+1;e8=math.min(e8,e7-1)e2,e3,e4,e5,e6=self:LinearParallaxInterpolation(dk.AnimData[e8],dk.AnimData[e8+1],d_)end end end;if dZ[1]/dZ[2]<1.6 then e2=e2+e2/0.125;e4=e4-e4*0.125 end;XGUIEng.SetMaterialAlpha(dY,1,e6 or 255)XGUIEng.SetMaterialTexture(dY,1,e0)XGUIEng.SetMaterialUV(dY,1,e2,e3,e4,e5)end end end;function Lib.BriefingSystem.Local:DisplayPageOptionsDialog(V,dC)local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local e9={GUI.GetScreenSize()}local dn=self.Briefing[V][dC]local ea=XGUIEng.GetWidgetID(dY.."/ListBox")self.Briefing[V].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(dY)}XGUIEng.ListBoxPopAll(ea)self.Briefing[V].MCSelectionOptionsMap={}for f=1,#dn.MC,1 do if dn.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(ea,dn.MC[f][1])table.insert(self.Briefing[V].MCSelectionOptionsMap,dn.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(ea,0)local eb={XGUIEng.GetWidgetScreenSize(dY)}local ec=math.ceil(e9[1]/2-eb[1]/2)local ed=math.ceil(e9[2]-(eb[2]-10))if dn.Text and dn.Text~=""then ed=math.ceil(e9[2]/2-eb[2]/2)end;XGUIEng.SetWidgetScreenPosition(dY,ec,ed)XGUIEng.PushPage(dY,false)XGUIEng.ShowWidget(dY,1)self.Briefing[V].MCSelectionIsShown=true end;function Lib.BriefingSystem.Local:OnOptionSelected(V)local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local z=self.Briefing[V].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(dY,z[1],z[2])XGUIEng.ShowWidget(dY,0)XGUIEng.PopPage()local c_=XGUIEng.ListBoxGetSelectedIndex(dY.."/ListBox")+1;local ee=self.Briefing[V].MCSelectionOptionsMap[c_]SendReport(Report.BriefingOptionSelected,V,ee)SendReportToGlobal(Report.BriefingOptionSelected,V,ee)end;function Lib.BriefingSystem.Local:ThroneRoomCameraControl(V,dr)if dr then self:ControlCameraAnimation(V)local ef=type(dr)=="table"and dr.FOV or 42;local eg,eh,ei,ej,ek,el=0,0,0,0,0,0;local em=self.Briefing[V].CurrentAnimation;if em and em.AnimFrames then if#em.AnimFrames>=4 then local d_=self:GetInterpolationFactor(V)local e7=#em.AnimFrames;local e8=math.floor(d_*(e7-3))+1;e8=math.min(e8,#em.AnimFrames-3)eg,eh,ei,ej,ek,el=self:CubicInterpolation(em.AnimFrames[e8],em.AnimFrames[e8+1],em.AnimFrames[e8+2],em.AnimFrames[e8+3],d_)elseif#em.AnimFrames>=2 then local d_=self:GetInterpolationFactor(V)local e7=#em.AnimFrames;local e8=math.floor(d_*(e7-1))+1;e8=math.min(e8,#em.AnimFrames-1)eg,eh,ei,ej,ek,el=self:LinearInterpolation(em.AnimFrames[e8],em.AnimFrames[e8+1],d_)else eg,eh,ei,ej,ek,el=unpack(em.AnimFrames[1])end else eg,eh,ei=self:GetPagePosition(V)ej,ek,el=self:GetPageLookAt(V)if eg and not ej then ej,ek,el,eg,eh,ei,ef=self:GetCameraProperties(V,ef)end end;Camera.ThroneRoom_SetPosition(eg,eh,ei)Camera.ThroneRoom_SetLookAt(ej,ek,el)Camera.ThroneRoom_SetFOV(ef)self:ControlParallaxes(V)if self.Briefing[V].MCSelectionIsShown then local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(dY)==0 then self.Briefing[V].MCSelectionIsShown=false;self:OnOptionSelected(V)end end;local en=Localize(Lib.BriefingSystem.Text.NextButton)local dm=self.Briefing[V].CurrentPage;if dm==#self.Briefing[V]or self.Briefing[V][dm+1]==-1 then en=Localize(Lib.BriefingSystem.Text.EndButton)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..en)end end;function Lib.BriefingSystem.Local:ControlCameraAnimation(V)if self.Briefing[V].CurrentAnimation then local c5=XGUIEng.GetSystemTime()local dT=self.Briefing[V].CurrentAnimation;if c5>dT.Started+dT.Duration then if#self.Briefing[V].AnimationQueue>0 then self.Briefing[V].CurrentAnimation=nil end end end;if self.Briefing[V].CurrentAnimation==nil then if self.Briefing[V].AnimationQueue and#self.Briefing[V].AnimationQueue>0 then local dm=self.Briefing[V].CurrentPage;local dn=self.Briefing[V][dm]local dl=table.remove(self.Briefing[V].AnimationQueue,1)if dn and dn.Animations and dn.Animations.Repeat then table.insert(self.Briefing[V].AnimationQueue,dl)end;dl.Started=XGUIEng.GetSystemTime()self.Briefing[V].CurrentAnimation=dl end end end;function Lib.BriefingSystem.Local:GetPagePosition(V)local P,Q,R=0,0,0;local z,eo;if self.Briefing[V].CurrentAnimation then z=self.Briefing[V].CurrentAnimation.Start.Position;eo=self.Briefing[V].CurrentAnimation.End;P,Q,R=self:ConvertPosition(z)if eo then local ep,eq,er=self:ConvertPosition(eo.Position)if ep and eq and er then P=P+(ep-P)*self:GetInterpolationFactor(V)Q=Q+(eq-Q)*self:GetInterpolationFactor(V)R=R+(er-R)*self:GetInterpolationFactor(V)end end end;return P,Q,R end;function Lib.BriefingSystem.Local:GetPageLookAt(V)local LookAt,eo;if self.Briefing[V].CurrentAnimation then LookAt=self.Briefing[V].CurrentAnimation.Start.LookAt;eo=self.Briefing[V].CurrentAnimation.End end;local P,Q,R=self:ConvertPosition(LookAt)if eo and P then local ep,eq,er=self:ConvertPosition(eo.LookAt)if ep and eq and er then P=P+(ep-P)*self:GetInterpolationFactor(V)Q=Q+(eq-Q)*self:GetInterpolationFactor(V)R=R+(er-R)*self:GetInterpolationFactor(V)end end;return P,Q,R end;function Lib.BriefingSystem.Local:ConvertPosition(i)local P,Q,R;if i and type(i)=="table"then if i.X then P=i.X;Q=i.Y;R=i.Z elseif i[3]then P=i[1]Q=i[2]R=i[3]else P,Q,R=Logic.EntityGetPos(GetID(i[1]))R=R+(i[2]or 0)end end;return P,Q,R end;function Lib.BriefingSystem.Local:GetInterpolationFactor(V)if self.Briefing[V].CurrentAnimation then local c5=XGUIEng.GetSystemTime()if self.Briefing[V].CurrentAnimation.Interpolation then return self.Briefing[V].CurrentAnimation:Interpolation(c5)end;local d_=math.lerp(self.Briefing[V].CurrentAnimation.Started,c5,self.Briefing[V].CurrentAnimation.Duration)return math.min(d_,1)end;return 1 end;function Lib.BriefingSystem.Local:LinearInterpolation(n,o,es)local z={PX=(1-es)*n[1]+es*o[1],PY=(1-es)*n[2]+es*o[2],PZ=(1-es)*n[3]+es*o[3]}local LookAt={LX=(1-es)*n[4]+es*o[4],LY=(1-es)*n[5]+es*o[5],LZ=(1-es)*n[6]+es*o[6]}return z.PX,z.PY,z.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:LinearParallaxInterpolation(et,eu,es)es=math.max(0,math.min(1,es))local ev={U0=(1-es)*et[1]+es*eu[1],V0=(1-es)*et[2]+es*eu[2],U1=(1-es)*et[3]+es*eu[3],V1=(1-es)*et[4]+es*eu[4],A=(1-es)*et[5]+es*eu[5]}return ev.U0,ev.V0,ev.U1,ev.V1,ev.A end;function Lib.BriefingSystem.Local:CubicInterpolation(n,o,ew,ex,es)local z={PX=0.5*(2*o[1]+(ew[1]-n[1])*es+(2*n[1]-5*o[1]+4*ew[1]-ex[1])*es^2+(3*(o[1]-ew[1])+ex[1]-n[1])*es^3),PY=0.5*(2*o[2]+(ew[2]-n[2])*es+(2*n[2]-5*o[2]+4*ew[2]-ex[2])*es^2+(3*(o[2]-ew[2])+ex[2]-n[2])*es^3),PZ=0.5*(2*o[3]+(ew[3]-n[3])*es+(2*n[3]-5*o[3]+4*ew[3]-ex[3])*es^2+(3*(o[3]-ew[3])+ex[3]-n[3])*es^3)}local LookAt={LX=0.5*(2*o[1]+(ew[4]-n[4])*es+(2*n[4]-5*o[4]+4*ew[4]-ex[4])*es^2+(3*(o[4]-ew[4])+ex[4]-n[4])*es^3),LY=0.5*(2*o[5]+(ew[5]-n[5])*es+(2*n[5]-5*o[5]+4*ew[5]-ex[5])*es^2+(3*(o[5]-ew[5])+ex[5]-n[5])*es^3),LZ=0.5*(2*o[6]+(ew[6]-n[6])*es+(2*n[6]-5*o[6]+4*ew[6]-ex[6])*es^2+(3*(o[6]-ew[6])+ex[6]-n[6])*es^3)}return z.PX,z.PY,z.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:CubicParallaxInterpolation(et,eu,ey,ez,es)es=math.max(0,math.min(1,es))local ev={U0=0.5*(2*eu[1]+(ey[1]-et[1])*es+(2*et[1]-5*eu[1]+4*ey[1]-ez[1])*es^2+(3*(eu[1]-ey[1])+ez[1]-et[1])*es^3),V0=0.5*(2*eu[2]+(ey[2]-et[2])*es+(2*et[2]-5*eu[2]+4*ey[2]-ez[2])*es^2+(3*(eu[2]-ey[2])+ez[2]-et[2])*es^3),U1=0.5*(2*eu[3]+(ey[3]-et[3])*es+(2*et[3]-5*eu[3]+4*ey[3]-ez[3])*es^2+(3*(eu[3]-ey[3])+ez[3]-et[3])*es^3),V1=0.5*(2*eu[4]+(ey[4]-et[4])*es+(2*et[4]-5*eu[4]+4*ey[4]-ez[4])*es^2+(3*(eu[4]-ey[4])+ez[4]-et[4])*es^3),A=0.5*(2*eu[5]+(ey[5]-et[5])*es+(2*et[5]-5*eu[5]+4*ey[5]-ez[5])*es^2+(3*(eu[5]-ey[5])+ez[5]-et[5])*es^3)}return ev.U0,ev.V0,ev.U1,ev.V1,ev.A end;function Lib.BriefingSystem.Local:GetCameraProperties(V,eA)local eB,eo;if self.Briefing[V].CurrentAnimation then eB=self.Briefing[V].CurrentAnimation.Start;eo=self.Briefing[V].CurrentAnimation.End end;local eC=eB.Position;local eD=eo and eo.Position or eB.Position;local eE=eB.Rotation;local eF=eo and eo.Rotation or eB.Rotation;local eG=eB.Angle;local eH=eo and eo.Angle or eB.Angle;local eI=eB.Zoom;local eJ=eo and eo.Zoom or eB.Zoom;local eK=self:GetInterpolationFactor(V)local eL,eM,eN=self:ConvertPosition(eC)local eO,eP,eQ=self:ConvertPosition(eD)local eR=eL+(eO-eL)*eK;local eS=eM+(eP-eM)*eK;local eT=eN+(eQ-eN)*eK;local eU=eI+(eJ-eI)*eK;local eV=eG+(eH-eG)*eK;local aV=eE+(eF-eE)*eK;local eW=eU*math.cos(math.rad(eV))local eX=eR+math.cos(math.rad(aV-90))*eW;local eY=eS+math.sin(math.rad(aV-90))*eW;local eZ=eT+eU*math.sin(math.rad(eV))return eR,eS,eT,eX,eY,eZ,eA end;function Lib.BriefingSystem.Local:SkipButtonPressed(V,dr)if not self.Briefing[V]then return end;if self.Briefing[V].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Briefing[V].LastSkipButtonPressed=Logic.GetTimeMs()end end;function Lib.BriefingSystem.Local:GetCurrentBriefing(V)return self.Briefing[V]end;function Lib.BriefingSystem.Local:GetCurrentBriefingPage(V)if self.Briefing[V]then local dm=self.Briefing[V].CurrentPage;return self.Briefing[V][dm]end end;function Lib.BriefingSystem.Local:GetPageIDByName(V,j)if type(j)=="string"then if self.Briefing[V]~=nil then for f=1,#self.Briefing[V],1 do if type(self.Briefing[V][f])=="table"and self.Briefing[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.BriefingSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneRoomLeftClick=GameCallback_Camera_ThroneRoomLeftClick;GameCallback_Camera_ThroneRoomLeftClick=function(V)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneRoomLeftClick(V)if V==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingLeftClick,V)SendReport(Report.BriefingLeftClick,V)end end;self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(V)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(V)if V==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingSkipButtonPressed,V)SendReport(Report.BriefingSkipButtonPressed,V)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(V)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(V)if V==GUI.GetPlayerID()then local dy=Lib.BriefingSystem.Local:GetCurrentBriefing(V)if dy~=nil then Lib.BriefingSystem.Local:ThroneRoomCameraControl(V,Lib.BriefingSystem.Local:GetCurrentBriefingPage(V))end end end;GameCallback_Escape_Orig_BriefingSystem=GameCallback_Escape;GameCallback_Escape=function()if Lib.BriefingSystem.Local.Briefing[GUI.GetPlayerID()]then return end;GameCallback_Escape_Orig_BriefingSystem()end end;function Lib.BriefingSystem.Local:ActivateCinematicMode(V)if self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local e_,f0=GUI.GetScreenSize()function EndScreen_ExitGame()end;function MissionFadeInEndScreen()end;for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],1)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],1)XGUIEng.PushPage(self.ParallaxWidgets[f][2],false)XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)XGUIEng.SetMaterialUV(self.ParallaxWidgets[f][1],1,0,0,1,1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo",false)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo/LeftFrame",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local P,Q=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",P,65*f0/1080)XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Objectives",2,0,2000,20)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.SetText("/InGame/ThroneRoom/KnightInfo/Text"," ")XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Text",200,300,1000,10)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Briefing[V].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Briefing[V].EnableSky then Display.SetRenderSky(1)end;if not self.Briefing[V].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.BriefingSystem.Local:DeactivateCinematicMode(V)if not self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",1)for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],0)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],0)XGUIEng.PopPage()end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)ResetRenderDistance()end;RegisterModule(Lib.BriefingSystem.Name)Lib.CutsceneSystem={Name="CutsceneSystem",Global={Cutscene={},CutsceneQueue={},CutsceneCounter=0},Local={Cutscene={}},Text={FastForwardActivate={de="Beschleunigen",en="Fast Forward",fr="Accélérer"},FastForwardDeactivate={de="Zurücksetzen",en="Normal Speed",fr="Réinitialiser"},FastFormardMessage={de="SCHNELLER VORLAUF",en="FAST FORWARD",fr="AVANCÉ RAPIDE"}}}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/CutsceneSystem_API")Lib.Register("module/information/CutsceneSystem")CinematicEventTypes.Cutscene=3;function Lib.CutsceneSystem.Global:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")for f=1,8 do self.CutsceneQueue[f]={}end;RequestHiResJob(function()Lib.CutsceneSystem.Global:UpdateQueue()end)Lib.CutsceneSystem.Local=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Global:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then elseif ah==Report.CutsceneStarted then elseif ah==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif ah==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif ah==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif ah==Report.CutsceneSkipButtonPressed then SendReportToLocal(Report.CutsceneSkipButtonPressed,arg[1])elseif ah==Report.CutscenePageShown then SendReportToLocal(Report.CutscenePageShown,arg[1],arg[2],arg[3])end end;function Lib.CutsceneSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartCutscene(f)then local dl=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if dl and dl[1]==CinematicEventTypes.Cutscene then self:NextCutscene(f)end end end end;function Lib.CutsceneSystem.Global:CreateCutsceneGetPage(f1)f1.GetPage=function(self,V,dq)local _=Lib.CutsceneSystem.Global:GetPageIDByName(V,dq)return Lib.CutsceneSystem.Global.Cutscene[V][_]end end;function Lib.CutsceneSystem.Global:CreateCutsceneAddPage(f1)f1.AddPage=function(self,dr)if type(dr)=="table"then dr.__Legit=true;dr.Title=Localize(dr.Title)if dr.Text then dr.Text=Localize(dr.Text)end;if dr.Lines then dr.Lines=Localize(dr.Lines)end;if not dr.Lines and not dr.Text then assert(false,"Missing Lines or Text attribute!")return end;if dr.BigBars==nil then dr.BigBars=false end end;table.insert(f1,dr)return dr end end;function Lib.CutsceneSystem.Global:StartCutscene(j,V,dx)self.CutsceneQueue[V]=self.CutsceneQueue[V]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(V,CinematicEventTypes.Cutscene,j,dx)end;function Lib.CutsceneSystem.Global:EndCutscene(V)Logic.SetGlobalInvulnerability(0)SendReportToLocal(Report.CutsceneEnded,V)if self.Cutscene[V].Finished then self.Cutscene[V]:Finished()end;FinishCinematicEvent(self.Cutscene[V].Name,V)self.Cutscene[V]=nil end;function Lib.CutsceneSystem.Global:NextCutscene(V)if self:CanStartCutscene(V)then local f2=Lib.UIEffects.Global:PopCinematicEventFromQueue(V)assert(f2[1]==CinematicEventTypes.Cutscene)StartCinematicEvent(f2[2],V)local f3=f2[3]f3.Name=f2[2]f3.PlayerID=V;f3.BarOpacity=f3.BarOpacity or 1;f3.CurrentPage=0;self.Cutscene[V]=f3;if f3.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Cutscene[V].Starting then self.Cutscene[V]:Starting()end;SendReportToLocal(Report.CutsceneStarted,V,f3.Name,f3)SendReport(Report.CutsceneStarted,V,f3.Name)end end;function Lib.CutsceneSystem.Global:StartCutsceneFlight(V,dC,f4)if self.Cutscene[V]==nil then return end;self.Cutscene[V][dC].Duration=f4;if self.Cutscene[V][dC].Action then self.Cutscene[V][dC]:Action()end;SendReportToLocal(Report.CutsceneFlightStarted,V,dC,f4)end;function Lib.CutsceneSystem.Global:EndCutsceneFlight(V,dC)if self.Cutscene[V]==nil then return end;SendReportToLocal(Report.CutsceneFlightEnded,V,dC)end;function Lib.CutsceneSystem.Global:DisplayPage(V,dC)if self.Cutscene[V]==nil then return end;SendReportToLocal(Report.CutscenePageShown,V,dC)end;function Lib.CutsceneSystem.Global:GetCurrentCutscene(V)return self.Cutscene[V]end;function Lib.CutsceneSystem.Global:GetCurrentCutscenePage(V)if self.Cutscene[V]then local dm=self.Cutscene[V].CurrentPage;return self.Cutscene[V][dm]end end;function Lib.CutsceneSystem.Global:GetPageIDByName(V,j)if type(j)=="string"then if self.Cutscene[V]~=nil then for f=1,#self.Cutscene[V],1 do if type(self.Cutscene[V][f])=="table"and self.Cutscene[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.CutsceneSystem.Global:CanStartCutscene(V)return self.Cutscene[V]==nil and not IsCinematicEventActive(V)and self.LoadscreenClosed end;function Lib.CutsceneSystem.Local:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")self:OverrideThroneRoomFunctions()Lib.CutsceneSystem.Global=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Local:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then elseif ah==Report.CutsceneStarted then self:StartCutscene(arg[1],arg[2],arg[3])elseif ah==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif ah==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif ah==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif ah==Report.CutsceneSkipButtonPressed then self:SkipButtonPressed(arg[1])elseif ah==Report.CutscenePageShown then end end;function Lib.CutsceneSystem.Local:StartCutscene(V,f5,f1)if GUI.GetPlayerID()~=V then return end;self.Cutscene[V]=f1;self.Cutscene[V].LastSkipButtonPressed=0;self.Cutscene[V].CurrentPage=0;DeactivateNormalInterface(V)DeactivateBorderScroll(V)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,1)end;self:ActivateCinematicMode(V)self:NextFlight(V)end;function Lib.CutsceneSystem.Local:EndCutscene(V)if GUI.GetPlayerID()~=V then return end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,1)end;self:DeactivateCinematicMode(V)ActivateNormalInterface(V)ActivateBorderScroll(V)Lib.UITools.Widget:UpdateHiddenWidgets()self.Cutscene[V]=nil end;function Lib.CutsceneSystem.Local:NextFlight(V)if self.Cutscene[V]then self.Cutscene[V].CurrentPage=self.Cutscene[V].CurrentPage+1;local dm=self.Cutscene[V].CurrentPage;if self.Cutscene[V][dm]then local f6=self.Cutscene[V][dm].Flight;if Camera.IsValidCutscene(f6)then if GUI.GetPlayerID()==V then Camera.StartCutscene(f6)end else error("Lib.CutsceneSystem.Local:NextFlight: %s is an invalid flight!",tostring(f6))self:PropagateCutsceneEnded(V)end else self:PropagateCutsceneEnded(V)end end end;function Lib.CutsceneSystem.Local:PropagateCutsceneEnded(V)if not self.Cutscene[V]then return end;SendReportToGlobal(Report.CutsceneEnded,V)end;function Lib.CutsceneSystem.Local:FlightStarted(f4)local m=GUI.GetPlayerID()if self.Cutscene[m]then local dm=self.Cutscene[m].CurrentPage;local dn=self.Cutscene[m][dm]if dn.FarClipPlane then SetRenderDistance(dn.FarClipPlane)end;SendReportToGlobal(Report.CutsceneFlightStarted,m,dm,f4)end end;CutsceneFlightStarted=function(f4)Lib.CutsceneSystem.Local:FlightStarted(f4)end;function Lib.CutsceneSystem.Local:StartCutsceneFlight(V,dC,f4)if self.Cutscene[V]==nil then return end;self:DisplayPage(V,dC,f4)end;function Lib.CutsceneSystem.Local:FlightFinished()local m=GUI.GetPlayerID()if self.Cutscene[m]then local dm=self.Cutscene[m].CurrentPage;SendReportToGlobal(Report.CutsceneFlightEnded,m,dm)end end;CutsceneFlightFinished=function()Lib.CutsceneSystem.Local:FlightFinished()end;function Lib.CutsceneSystem.Local:EndCutsceneFlight(V,dC)if self.Cutscene[V]==nil then return end;self:NextFlight(V)end;function Lib.CutsceneSystem.Local:DisplayPage(V,dC,f4)if GUI.GetPlayerID()~=V then return end;self.Cutscene[V].AnimationQueue=self.Cutscene[V].AnimationQueue or{}self.Cutscene[V].CurrentPage=dC;if type(self.Cutscene[V][dC])=="table"then self.Cutscene[V][dC].Started=Logic.GetTime()self.Cutscene[V][dC].Duration=f4;ResetRenderDistance()self:DisplayPageBars(V,dC)self:DisplayPageTitle(V,dC)self:DisplayPageText(V,dC)self:DisplayPageControls(V,dC)self:DisplayPageFader(V,dC)SendReportToGlobal(Report.CutscenePageShown,V,dC,f4)end end;function Lib.CutsceneSystem.Local:DisplayPageBars(V,dC)local dn=self.Cutscene[V][dC]local dL=dn.Opacity~=nil and dn.Opacity or 1;local dM=255*dL;local dN=255*dL;local dO=dn.BigBars and 1 or 0;local dP=dn.BigBars and 0 or 1;if dL==0 then dO=0;dP=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",dO)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",dP)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",dO)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",dP)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,dM)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,dM)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,dN)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,dN)end;function Lib.CutsceneSystem.Local:DisplayPageTitle(V,dC)local dn=self.Cutscene[V][dC]local dQ="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(dQ,"")if dn.Title then local bT=ConvertPlaceholders(Localize(dn.Title))if bT:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bT=XGUIEng.GetStringTableText(bT)end;if bT:sub(1,1)~="{"then bT="{@color:255,250,0,255}{center}"..bT end;XGUIEng.SetText(dQ,bT)end end;function Lib.CutsceneSystem.Local:DisplayPageText(V,dC)local dn=self.Cutscene[V][dC]local dR="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(dR,"Bockwurst")if dn.Text then local aK=ConvertPlaceholders(Localize(dn.Text))if aK:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then aK=XGUIEng.GetStringTableText(aK)end;if aK:sub(1,1)~="{"then aK="{center}"..aK end;if not dn.BigBars then aK="{cr}{cr}{cr}"..aK end;XGUIEng.SetText(dR,aK)end end;function Lib.CutsceneSystem.Local:DisplayPageControls(V,dC)local dn=self.Cutscene[V][dC]local dS=1;if dn.DisableSkipping==true then self.Cutscene[V].FastForward=false;Game.GameTimeSetFactor(V,1)dS=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",dS)end;function Lib.CutsceneSystem.Local:DisplayPageFader(V,dC)local dn=self.Cutscene[V][dC]g_Fade.To=dn.FaderAlpha or 0;local dU=dn.FadeIn;if dU then FadeIn(dU)end;local dV=dn.FadeOut;if dV then self.Cutscene[V].FaderJob=RequestHiResJob(function(dW,dX)if Logic.GetTimeMs()>dW-dX*1000 then FadeOut(dX)return true end end,dn.Started*1000+dn.Duration*100,dV)end end;function Lib.CutsceneSystem.Local:ThroneRoomCameraControl(V,dr)if dr then if dr.DisableSkipping then XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")return end;local en=Localize(Lib.CutsceneSystem.Text.FastForwardActivate)if self.Cutscene[V].FastForward then en=Localize(Lib.CutsceneSystem.Text.FastForwardDeactivate)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..en)if self.Cutscene[V].FastForward then local f7=GetSecondsRealTime()if not self.Cutscene[V].FastForwardRealTime then self.Cutscene[V].FastForwardRealTime=f7 end;if self.Cutscene[V].FastForwardRealTime<f7 then self.Cutscene[V].FastForwardIndent=(self.Cutscene[V].FastForwardIndent or 0)+1;if self.Cutscene[V].FastForwardIndent>4 then self.Cutscene[V].FastForwardIndent=1 end;self.Cutscene[V].FastForwardRealTime=f7 end;local aK="{cr}{cr}"..Localize(Lib.CutsceneSystem.Text.FastFormardMessage)local f8=string.rep("  ",self.Cutscene[V].FastForwardIndent or 0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",aK..f8 ..". . .")else XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")end end end;function Lib.CutsceneSystem.Local:SkipButtonPressed(V)if self.Cutscene[V]==nil then return end;if self.Cutscene[V].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Cutscene[V].LastSkipButtonPressed=Logic.GetTimeMs()if not Framework.IsNetworkGame()then if self.Cutscene[V].FastForward then self.Cutscene[V].FastForward=false;Game.GameTimeSetFactor(V,1)else self.Cutscene[V].FastForward=true;Game.GameTimeSetFactor(V,10)end end end end;function Lib.CutsceneSystem.Local:GetCurrentCutscene(V)return self.Cutscene[V]end;function Lib.CutsceneSystem.Local:GetCurrentCutscenePage(V)if self.Cutscene[V]then local dm=self.Cutscene[V].CurrentPage;return self.Cutscene[V][dm]end end;function Lib.CutsceneSystem.Local:GetPageIDByName(V,j)if type(j)=="string"then if self.Cutscene[V]~=nil then for f=1,#self.Cutscene[V],1 do if type(self.Cutscene[V][f])=="table"and self.Cutscene[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.CutsceneSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(V)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(V)if V==GUI.GetPlayerID()then SendReportToGlobal(Report.CutsceneSkipButtonPressed,V)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(V)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(V)if V==GUI.GetPlayerID()then local f3=Lib.CutsceneSystem.Local:GetCurrentCutscene(V)if f3~=nil then Lib.CutsceneSystem.Local:ThroneRoomCameraControl(V,Lib.CutsceneSystem.Local:GetCurrentCutscenePage(V))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.CutsceneSystem.Local.Cutscene[GUI.GetPlayerID()]then return end;Lib.CutsceneSystem.Local.Orig_GameCallback_Escape()end end;function Lib.CutsceneSystem.Local:ActivateCinematicMode(V)if self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local e_,f0=GUI.GetScreenSize()XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Cutscene",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/LeftFrame",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local P,Q=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",P,65*f0/1080)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Cutscene[V].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Cutscene[V].EnableSky then Display.SetRenderSky(1)end;if not self.Cutscene[V].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=1;SetFaderAlpha(1)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.CutsceneSystem.Local:DeactivateCinematicMode(V)if not self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")ResetRenderDistance()end;RegisterModule(Lib.CutsceneSystem.Name)Lib.DialogSystem={Name="DialogSystem",Global={Dialog={},DialogQueue={},DialogCounter=0},Local={Dialog={}},Text={Continue={de="{cr}{cr}{azure}Weiter mit ESC",en="{cr}{cr}{azure}Continue with ESC",fr="{cr}{cr}{azure}Continuer avec ESC"}}}CONST_DIALOG={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/DialogSystem_API")Lib.Register("module/information/DialogSystem")CinematicEventTypes.Dialog=5;function Lib.DialogSystem.Global:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")for f=1,8 do self.DialogQueue[f]={}end;RequestHiResJob(function()Lib.DialogSystem.Global:UpdateQueue()Lib.DialogSystem.Global:DialogExecutionController()end)Lib.DialogSystem.Local=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Global:OnSaveGameLoaded()end;function Lib.DialogSystem.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then self:SkipButtonPressed(arg[1])elseif ah==Report.DialogStarted then self:NextPage(arg[1])elseif ah==Report.DialogEnded then elseif ah==Report.DialogPageShown then elseif ah==Report.DialogOptionSelected then self:OnOptionSelected(arg[1],arg[2])end end;function Lib.DialogSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartDialog(f)then local dl=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if dl and dl[1]==CinematicEventTypes.Dialog then self:NextDialog(f)end end end end;function Lib.DialogSystem.Global:DialogExecutionController()for f=1,8 do if self.Dialog[f]then local dm=self.Dialog[f].CurrentPage;local dn=self.Dialog[f][dm]if dn and not dn.MC and dn.Duration>0 and dn.AutoSkip then if dn.Started+dn.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.DialogSystem.Global:CreateDialogGetPage(f9)f9.GetPage=function(self,dq)local _=Lib.DialogSystem.Global:GetPageIDByName(f9.PlayerID,dq)return Lib.DialogSystem.Global.Dialog[f9.PlayerID][_]end end;function Lib.DialogSystem.Global:CreateDialogAddPage(f9)f9.AddPage=function(self,dr)self.Length=(self.Length or 0)+1;local ds="Page"..#self+1;if dr.Name then ds=dr.Name else dr.Name=ds end;dr.__Legit=true;dr.Text=Localize(dr.Text or"")dr.AutoSkip=false;if dr.Duration then if dr.Duration==-1 then dr.Duration=string.len(dr.Text or"")*CONST_DIALOG.TIMER_PER_CHAR;dr.Duration=dr.Duration<6 and 6 or dr.Duration<6 end;dr.AutoSkip=dr.Duration>0 end;if not dr.Rotation then dr.Rotation=CONST_DIALOG.CAMERA_ROTATIONDEFAULT;if dr.DialogCamera then dr.Rotation=CONST_DIALOG.DLGCAMERA_ROTATIONDEFAULT end;if dr.Position and type(dr.Position)~="table"then local _=GetID(dr.Position)local A=Logic.GetEntityOrientation(_)+90;dr.Rotation=A elseif dr.Target then local _=GetID(dr.Target)local A=Logic.GetEntityOrientation(_)+90;dr.Rotation=A end end;if not dr.Distance then dr.Distance=CONST_DIALOG.CAMERA_ZOOMDEFAULT;if dr.DialogCamera then dr.Distance=CONST_DIALOG.DLGCAMERA_ZOOMDEFAULT end end;if not dr.Angle then dr.Angle=CONST_DIALOG.CAMERA_ANGLEDEFAULT;if dr.DialogCamera then dr.Angle=CONST_DIALOG.DLGCAMERA_ANGLEDEFAULT end end;dr.GetSelected=function(self)return 0 end;table.insert(self,dr)return dr end end;function Lib.DialogSystem.Global:CreateDialogAddMCPage(f9)f9.AddMCPage=function(self,dr)local dn=self:AddPage(dr)if dn.MC then for f=1,#dn.MC do dn.MC[f][1]=Localize(dn.MC[f][1])dn.MC[f].ID=dn.MC[f].ID or f end;dn.AutoSkip=false;dn.Duration=-1 end;dn.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;return dn end end;function Lib.DialogSystem.Global:CreateDialogAddRedirect(f9)f9.AddRedirect=function(self,w)self.Length=(self.Length or 0)+1;local dn=w==nil and-1 or w;table.insert(self,dn)return dn end end;function Lib.DialogSystem.Global:StartDialog(j,V,dx)self.DialogQueue[V]=self.DialogQueue[V]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(V,CinematicEventTypes.Dialog,j,dx)end;function Lib.DialogSystem.Global:EndDialog(V)Logic.SetGlobalInvulnerability(0)ExecuteLocal([[Lib.DialogSystem.Local:ResetTimerButtons(%d);
          Camera.RTS_FollowEntity(0);]],V)SendReport(Report.DialogEnded,V,self.Dialog[V].Name)SendReportToLocal(Report.DialogEnded,V,self.Dialog[V].Name,self.Dialog[V])if self.Dialog[V].Finished then self.Dialog[V]:Finished()end;FinishCinematicEvent(self.Dialog[V].Name,V)self.Dialog[V]=nil end;function Lib.DialogSystem.Global:NextDialog(V)if self:CanStartDialog(V)then local fa=Lib.UIEffects.Global:PopCinematicEventFromQueue(V)assert(fa[1]==CinematicEventTypes.Dialog)StartCinematicEvent(fa[2],V)local fb=fa[3]fb.Name=fa[2]fb.PlayerID=V;fb.LastSkipButtonPressed=0;fb.CurrentPage=0;self.Dialog[V]=fb;if fb.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Dialog[V].Starting then self.Dialog[V]:Starting()end;SendReportToLocal(Report.DialogStarted,V,self.Dialog[V].Name,self.Dialog[V])SendReport(Report.DialogStarted,V,self.Dialog[V].Name)end end;function Lib.DialogSystem.Global:NextPage(V)if self.Dialog[V]==nil then return end;self.Dialog[V].CurrentPage=self.Dialog[V].CurrentPage+1;local dm=self.Dialog[V].CurrentPage;if dm==-1 or dm==0 then self:EndDialog(V)return end;local dn=self.Dialog[V][dm]if type(dn)=="table"then if dm<=#self.Dialog[V]then self.Dialog[V][dm].Started=Logic.GetTime()self.Dialog[V][dm].Duration=dn.Duration or-1;if self.Dialog[V][dm].Action then self.Dialog[V][dm]:Action()end;self:DisplayPage(V,dm)else self:EndDialog(V)end elseif type(dn)=="number"or type(dn)=="string"then local ag=self:GetPageIDByName(V,self.Dialog[V][dm])self.Dialog[V].CurrentPage=ag-1;self:NextPage(V)else self:EndDialog(V)end end;function Lib.DialogSystem.Global:DisplayPage(V,dC)if self.Dialog[V]==nil then return end;local dn=self.Dialog[V][dC]if type(dn)=="table"then local dm=self.Dialog[V].CurrentPage;if dn.MC then for f=1,#dn.MC,1 do if type(dn.MC[f][3])=="function"then self.Dialog[V][dm].MC[f].Visible=dn.MC[f][3](V,dm,f)end end end end;SendReport(Report.DialogPageShown,V,dC)SendReportToLocal(Report.DialogPageShown,V,dC,dn)end;function Lib.DialogSystem.Global:SkipButtonPressed(V,dC)if not self.Dialog[V]then return end;if self.Dialog[V].LastSkipButtonPressed+500>Logic.GetTimeMs()then return end;local dm=self.Dialog[V].CurrentPage;if self.Dialog[V][dm].AutoSkip or self.Dialog[V][dm].MC then return end;if self.Dialog[V][dm].OnForward then self.Dialog[V][dm]:OnForward()end;self.Dialog[V].LastSkipButtonPressed=Logic.GetTimeMs()self:NextPage(V)end;function Lib.DialogSystem.Global:OnOptionSelected(V,dD)if self.Dialog[V]==nil then return end;local dm=self.Dialog[V].CurrentPage;if type(self.Dialog[V][dm])~="table"then return end;local dn=self.Dialog[V][dm]if dn.MC then local dE;for f=1,#dn.MC,1 do if dn.MC[f].ID==dD then dE=dn.MC[f]end end;if dE~=nil then local ag=dE[2]if type(dE[2])=="function"then ag=dE[2](V,dm,dD)end;self.Dialog[V][dm].MC.Selected=dE.ID;self.Dialog[V].CurrentPage=self:GetPageIDByName(V,ag)-1;self:NextPage(V)end end end;function Lib.DialogSystem.Global:GetCurrentDialog(V)return self.Dialog[V]end;function Lib.DialogSystem.Global:GetCurrentDialogPage(V)if self.Dialog[V]then local dm=self.Dialog[V].CurrentPage;return self.Dialog[V][dm]end end;function Lib.DialogSystem.Global:GetPageIDByName(V,j)if type(j)=="string"then if self.Dialog[V]~=nil then for f=1,#self.Dialog[V],1 do if type(self.Dialog[V][f])=="table"and self.Dialog[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.DialogSystem.Global:CanStartDialog(V)return self.Dialog[V]==nil and not IsCinematicEventActive(V)and self.LoadscreenClosed end;function Lib.DialogSystem.Local:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")self:OverrideThroneRoomFunctions()Lib.DialogSystem.Global=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Local:OnSaveGameLoaded()end;function Lib.DialogSystem.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.EscapePressed then elseif ah==Report.DialogStarted then self:StartDialog(arg[1],arg[2],arg[3])elseif ah==Report.DialogEnded then self:EndDialog(arg[1],arg[2],arg[3])elseif ah==Report.DialogPageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.DialogSystem.Local:StartDialog(V,fc,f9)if GUI.GetPlayerID()~=V then return end;self.Dialog[V]=f9;self.Dialog[V].CurrentPage=0;local dG,dH=Camera.RTS_GetLookAtPosition()local dI=Camera.RTS_GetRotationAngle()local dJ=Camera.RTS_GetZoomFactor()local dK=Game.GameTimeGetFactor(V)local fd,fe=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/AlignBottomLeft/SubTitles")self.Dialog[V].Backup={SubTitles={fd,fe},Camera={dG,dH,dI,dJ},Speed=dK}DeactivateNormalInterface(V)DeactivateBorderScroll(V)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,1)end;self:ActivateCinematicMode(V)end;function Lib.DialogSystem.Local:EndDialog(V,fc,f9)if GUI.GetPlayerID()~=V then return end;if self.Dialog[V].RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,self.Dialog[V].Backup.Speed)end;if self.Dialog[V].RestoreCamera then Camera.RTS_SetLookAtPosition(self.Dialog[V].Backup.Camera[1],self.Dialog[V].Backup.Camera[2])Camera.RTS_SetRotationAngle(self.Dialog[V].Backup.Camera[3])Camera.RTS_SetZoomFactor(self.Dialog[V].Backup.Camera[4])end;self:DeactivateCinematicMode(V)ActivateNormalInterface(V)ActivateBorderScroll(V)Lib.UITools.Widget:UpdateHiddenWidgets()self.Dialog[V]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.DialogSystem.Local:DisplayPage(V,dC,ff)if GUI.GetPlayerID()~=V then return end;self.Dialog[V][dC]=ff;self.Dialog[V].CurrentPage=dC;if type(self.Dialog[V][dC])=="table"then self.Dialog[V][dC].Started=Logic.GetTime()self:DisplayPageFader(V,dC)self:DisplayPagePosition(V,dC)self:DisplayPageActor(V,dC)self:DisplayPageTitle(V,dC)self:DisplayPageText(V,dC)if self.Dialog[V][dC].MC then self:DisplayPageOptionsDialog(V,dC)end end end;function Lib.DialogSystem.Local:DisplayPagePosition(V,dC)local dn=self.Dialog[V][dC]Camera.RTS_FollowEntity(0)if dn.Position then local z=dn.Position;if type(z)~="table"then z=GetPosition(dn.Position)end;Camera.RTS_SetLookAtPosition(z.X,z.Y)elseif dn.Target then Camera.RTS_FollowEntity(GetID(dn.Target))else assert(false)end;Camera.RTS_SetRotationAngle(dn.Rotation)Camera.RTS_SetZoomFactor(dn.Distance/18000)Camera.RTS_SetZoomAngle(dn.Angle)end;function Lib.DialogSystem.Local:DisplayPageFader(V,dC)local dn=self.Dialog[V][dC]g_Fade.To=dn.FaderAlpha or 0;local dU=dn.FadeIn;if dU then FadeIn(dU)end;local dV=dn.FadeOut;if dV then self.Dialog[V].FaderJob=RequestHiResJob(function(dW,dX)if Logic.GetTimeMs()>dW-dX*1000 then FadeOut(dX)return true end end,Logic.GetTimeMs()+(dn.Duration or 0)*1000,dV)end end;function Lib.DialogSystem.Local:DisplayPageActor(V,dC)local fg="/InGame/Root/Normal/AlignBottomLeft/Message"XGUIEng.ShowWidget(fg,1)XGUIEng.ShowAllSubWidgets(fg,1)XGUIEng.ShowWidget(fg.."/QuestLog",0)XGUIEng.ShowWidget(fg.."/Update",0)local dn=self.Dialog[V][dC]if not dn.Actor or dn.Actor==-1 then XGUIEng.ShowWidget(fg,0)return end;local fh=self:GetPageActor(V,dC)self:DisplayActorPortrait(V,fh)end;function Lib.DialogSystem.Local:GetPageActor(V,dC)local fh=g_PlayerPortrait[V]local dn=self.Dialog[V][dC]if type(dn.Actor)=="string"then fh=dn.Actor elseif type(dn.Actor)=="number"then fh=g_PlayerPortrait[dn.Actor]end;if not Models["Heads_"..tostring(fh)]then fh="H_NPC_Generic_Trader"end;return fh end;function Lib.DialogSystem.Local:DisplayPageTitle(V,dC)local fg="/InGame/Root/Normal/AlignBottomLeft/Message"local dn=self.Dialog[V][dC]if dn.Title then local bT=ConvertPlaceholders(Localize(dn.Title))if bT:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bT=XGUIEng.GetStringTableText(bT)end;if bT:sub(1,1)~="{"then bT="{center}"..bT end;XGUIEng.SetText(fg.."/MessagePortrait/PlayerName",bT)XGUIEng.ShowWidget(fg.."/MessagePortrait/PlayerName",1)else XGUIEng.ShowWidget(fg.."/MessagePortrait/PlayerName",0)end end;function Lib.DialogSystem.Local:DisplayPageText(V,dC)self:ResetSubtitlesPosition(V)local dn=self.Dialog[V][dC]local fi="/InGame/Root/Normal/AlignBottomLeft/SubTitles"if not dn or not dn.Text or dn.Text==""then XGUIEng.SetText(fi.."/VoiceText1"," ")XGUIEng.ShowWidget(fi,0)return end;XGUIEng.ShowWidget(fi,1)XGUIEng.ShowWidget(fi.."/Update",0)XGUIEng.ShowWidget(fi.."/VoiceText1",1)XGUIEng.ShowWidget(fi.."/BG",1)local aK=ConvertPlaceholders(Localize(dn.Text))local fj=""if not dn.AutoSkip and not dn.MC then fj=ConvertPlaceholders(Localize(Lib.DialogSystem.Text.Continue))end;XGUIEng.SetText(fi.."/VoiceText1",aK..fj)self:SetSubtitlesPosition(V,dC)end;function Lib.DialogSystem.Local:SetSubtitlesPosition(V,dC)local dn=self.Dialog[V][dC]local dc="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local fk=XGUIEng.GetTextHeight(dc.."/VoiceText1",true)local fl,fm=XGUIEng.GetWidgetSize(dc.."/VoiceText1")local fn,fo=XGUIEng.GetWidgetLocalPosition(dc)if dn.Actor then XGUIEng.SetWidgetSize(dc.."/BG",fl+10,fk+120)fo=675-fk;XGUIEng.SetWidgetLocalPosition(dc,fn,fo)else XGUIEng.SetWidgetSize(dc.."/BG",fl+10,fk+35)fo=1115-fk;XGUIEng.SetWidgetLocalPosition(dc,46,fo)end end;function Lib.DialogSystem.Local:ResetSubtitlesPosition(V)local z=self.Dialog[V].Backup.SubTitles;local fp="/InGame/Root/Normal/AlignBottomLeft/SubTitles"XGUIEng.SetWidgetLocalPosition(fp,z[1],z[2])end;function Lib.DialogSystem.Local:ResetTimerButtons(V)if GUI.GetPlayerID()~=V then return end;if not g_Interaction.TimerQuests then return end;local fq="/InGame/Root/Normal/AlignTopLeft/QuestTimers/"for f=1,6 do local fr=fq..f.."/TimerButton"local fs=g_Interaction.TimerQuests[f]if fs~=nil then local ft=Quests[fs]if g_Interaction.CurrentMessageQuestIndex==fs and not QuestLog.IsQuestLogShown()then g_Interaction.CurrentMessageQuestIndex=nil;g_VoiceMessageIsRunning=false;g_VoiceMessageEndTime=nil;XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget(QuestLog.Widget.Main,0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)XGUIEng.HighLightButton(fr,0)end;if ft then self:DisplayActorPortrait(ft.SendingPlayer)end end end end;function Lib.DialogSystem.Local:DisplayActorPortrait(V,fu)local fg="/InGame/Root/Normal/AlignBottomLeft/Message"local fh=g_PlayerPortrait[V]if fu then if not Models["Heads_"..tostring(fu)]then fu="H_NPC_Generic_Trader"end;fh=fu end;XGUIEng.ShowWidget(fg.."/MessagePortrait",1)XGUIEng.ShowWidget(fg.."/QuestObjectives",0)SetPortraitWithCameraSettings(fg.."/MessagePortrait/3DPortraitFaceFX",fh)GUI.PortraitWidgetSetRegister(fg.."/MessagePortrait/3DPortraitFaceFX","Mood_Friendly",1,2,0)GUI.PortraitWidgetSetRegister(fg.."/MessagePortrait/3DPortraitFaceFX","Mood_Angry",1,2,0)end;function Lib.DialogSystem.Local:DisplayPageOptionsDialog(V,dC)local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local e9={GUI.GetScreenSize()}local dn=self.Dialog[V][dC]local ea=XGUIEng.GetWidgetID(dY.."/ListBox")self.Dialog[V].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(dY)}XGUIEng.ListBoxPopAll(ea)self.Dialog[V].MCSelectionOptionsMap={}for f=1,#dn.MC,1 do if dn.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(ea,dn.MC[f][1])table.insert(self.Dialog[V].MCSelectionOptionsMap,dn.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(ea,0)local fv={XGUIEng.GetWidgetScreenSize(dY)}local fw=math.ceil(e9[1]*0.05+fv[1]/2)local fx=math.ceil(e9[2]-(fv[2]+60*e9[2]/540))if not dn.Actor then fw=15*e9[1]/960;fx=math.ceil(e9[2]-(fv[2]+0*e9[2]/540))end;XGUIEng.SetWidgetScreenPosition(dY,fw,fx)XGUIEng.PushPage(dY,false)XGUIEng.ShowWidget(dY,1)if not dn.Actor then local dR="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local fy,fz=XGUIEng.GetWidgetLocalPosition(dR)XGUIEng.SetWidgetLocalPosition(dR,fy,fz-220)end;self.Dialog[V].MCSelectionIsShown=true end;function Lib.DialogSystem.Local:OnOptionSelected(V)local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local z=self.Dialog[V].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(dY,z[1],z[2])XGUIEng.ShowWidget(dY,0)XGUIEng.PopPage()local c_=XGUIEng.ListBoxGetSelectedIndex(dY.."/ListBox")+1;local ee=self.Dialog[V].MCSelectionOptionsMap[c_]SendReport(Report.DialogOptionSelected,V,ee)SendReportToGlobal(Report.DialogOptionSelected,V,ee)end;function Lib.DialogSystem.Local:ThroneRoomCameraControl(V,dr)if dr then if self.Dialog[V].MCSelectionIsShown then local dY="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(dY)==0 then self.Dialog[V].MCSelectionIsShown=false;self:OnOptionSelected(V)end end end end;function Lib.DialogSystem.Local:ConvertPosition(i)local z=i;if type(z)~="table"then z=GetPosition(i)end;return z.X,z.Y,z.Z end;function Lib.DialogSystem.Local:GetCurrentDialog(V)return self.Dialog[V]end;function Lib.DialogSystem.Local:GetCurrentDialogPage(V)if self.Dialog[V]then local dm=self.Dialog[V].CurrentPage;return self.Dialog[V][dm]end end;function Lib.DialogSystem.Local:GetPageIDByName(V,j)if type(j)=="string"then if self.Dialog[V]~=nil then for f=1,#self.Dialog[V],1 do if type(self.Dialog[V][f])=="table"and self.Dialog[V][f].Name==j then return f end end end;return 0 end;return j end;function Lib.DialogSystem.Local:IsAnyCinematicEventActive(V)for g,h in pairs(Lib.UIEffects.Local.CinematicEventStatus[V])do if h==1 then return true end end;return false end;function Lib.DialogSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(V)Lib.DialogSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(V)if V==GUI.GetPlayerID()then local fb=Lib.DialogSystem.Local:GetCurrentDialog(V)if fb~=nil then Lib.DialogSystem.Local:ThroneRoomCameraControl(V,Lib.DialogSystem.Local:GetCurrentDialogPage(V))end end end end;function Lib.DialogSystem.Local:ActivateCinematicMode(V)if self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main",1)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/Main",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Objectives"," ")self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Dialog[V].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Dialog[V].EnableSky then Display.SetRenderSky(1)end;if not self.Dialog[V].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(0)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.DialogSystem.Local:DeactivateCinematicMode(V)if not self.CinematicActive or GUI.GetPlayerID()~=V then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/SubTitles/VoiceText1"," ")XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)ResetRenderDistance()self:ResetSubtitlesPosition(V)end;RegisterModule(Lib.DialogSystem.Name)Lib.Requester={Name="Requester",Global={},Local={Chat={Data={},History={},Visible={},Widgets={}},Requester={ActionFunction=nil,ActionRequester=nil,Next=nil,Queue={}}},Shared={Text={ChooseLanguage={Title={de="Wählt die Sprache",en="Chose your Tongue",fr="Sélectionnez la langue"},Text={de="Wählt aus der Liste die Sprache aus, in die Handlungstexte übersetzt werden sollen.",en="Choose from the list below which language story texts shall be presented to you.",fr="Sélectionne dans la liste la langue dans laquelle les textes narratifs doivent être traduits."}}}}}Lib.Require("core/core")Lib.Require("module/information/Requester_API")Lib.Register("module/information/Requester")function Lib.Requester.Global:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")Lib.Requester.Local=nil end;self.IsInstalled=true end;function Lib.Requester.Global:OnSaveGameLoaded()end;function Lib.Requester.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.LanguageSelectionClosed then Lib.Core.Text:ChangeSystemLanguage(arg[1],arg[2],arg[3])end end;function Lib.Requester.Local:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")for f=1,8 do self.Chat.Data[f]={}self.Chat.History[f]={}self.Chat.Visible[f]=false;self.Chat.Widgets[f]={}end;self:OverrideChatLog()self:DialogOverwriteOriginal()self:DialogAltF4Hotkey()Lib.Requester.Global=nil end;self.IsInstalled=true end;function Lib.Requester.Local:OnSaveGameLoaded()end;function Lib.Requester.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.SaveGameLoaded then self:DialogAltF4Hotkey()end end;function Lib.Requester.Local:DialogAltF4Hotkey()StartSimpleJobEx(function()if Lib.Requester.Local.LoadscreenClosed then Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"Lib.Requester.Local:DialogAltF4Action()",2,false)return true end end)end;function Lib.Requester.Local:DialogAltF4Action()Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"",30,false)self:OpenRequesterDialog(GUI.GetPlayerID(),XGUIEng.GetStringTableText("UI_Texts/MainMenuExitGame_center"),XGUIEng.GetStringTableText("UI_Texts/ConfirmQuitCurrentGame"),function(fA)if fA then Framework.ExitGame()end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;Lib.Requester.Local:DialogAltF4Hotkey()end)end;function Lib.Requester.Local:Callback(V)if self.Requester.ActionFunction then self.Requester.ActionFunction(CustomGame.Knight+1,V)end;self:OnDialogClosed()end;function Lib.Requester.Local:CallbackRequester(fB,V)if self.Requester.ActionRequester then self.Requester.ActionRequester(fB,V)end;self:OnDialogClosed()end;function Lib.Requester.Local:OnDialogClosed()if not self.SavingWasDisabled then DisableSaving(false)end;if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;self.SavingWasDisabled=false;self.DialogWindowShown=false;self:DialogQueueStartNext()end;function Lib.Requester.Local:DialogQueueStartNext()self.Requester.Next=table.remove(self.Requester.Queue,1)RequestHiResJob(function()local dA=Lib.Requester.Local.Requester.Next;if dA and dA[1]and dA[2]then local fC=dA[1]Lib.Requester.Local[fC](Lib.Requester.Local,unpack(dA[2]))Lib.Requester.Local.Requester.Next=nil end;return true end)end;function Lib.Requester.Local:DialogQueuePush(fD,fE)local dA={fD,fE}table.insert(self.Requester.Queue,dA)end;function Lib.Requester.Local:OpenDialog(V,fF,aJ,fG)if GUI.GetPlayerID()~=V then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(fF)=="string")assert(type(aJ)=="string")if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;fF="{center}"..Lib.Core.Text:ConvertPlaceholders(fF)aJ=Lib.Core.Text:ConvertPlaceholders(aJ)if string.len(aJ)<35 then aJ=aJ.."{cr}"end;g_MapAndHeroPreview.SelectKnight=function(fH)end;XGUIEng.ShowAllSubWidgets("/InGame/Dialog/BG",1)XGUIEng.ShowWidget("/InGame/Dialog/Backdrop",0)XGUIEng.ShowWidget(RequesterDialog,1)XGUIEng.ShowWidget(RequesterDialog_Yes,0)XGUIEng.ShowWidget(RequesterDialog_No,0)XGUIEng.ShowWidget(RequesterDialog_Ok,1)if type(fG)=="function"then self.Requester.ActionFunction=fG;local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,fI)else self.Requester.ActionFunction=nil;local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,fI)end;XGUIEng.SetText(RequesterDialog_Message,"{center}"..aJ)XGUIEng.SetText(RequesterDialog_Title,fF)XGUIEng.SetText(RequesterDialog_Title.."White",fF)XGUIEng.PushPage(RequesterDialog,false)if Lib.Core.Save.SavingDisabled then self.SavingWasDisabled=true end;DisableSaving(true)self.DialogWindowShown=true else self:DialogQueuePush("OpenDialog",{V,fF,aJ,fG})end end;function Lib.Requester.Local:OpenRequesterDialog(V,fF,aJ,fG,fJ)if GUI.GetPlayerID()~=V then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(fF)=="string")assert(type(aJ)=="string")fF="{center}"..fF;self:OpenDialog(V,fF,aJ,fG)XGUIEng.ShowWidget(RequesterDialog_Yes,1)XGUIEng.ShowWidget(RequesterDialog_No,1)XGUIEng.ShowWidget(RequesterDialog_Ok,0)if fJ then XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Ok_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/Cancel_center"))else XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Yes_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/No_center"))end;self.Requester.ActionRequester=nil;if fG then assert(type(fG)=="function")self.Requester.ActionRequester=fG end;local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, true, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Yes,fI)local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, false, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_No,fI)else self:DialogQueuePush("OpenRequesterDialog",{V,fF,aJ,fG,fJ})end end;function Lib.Requester.Local:OpenSelectionDialog(V,fF,aJ,fG,C)if GUI.GetPlayerID()~=V then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then self:OpenDialog(V,fF,aJ,fG)local fK=XGUIEng.GetWidgetID(CustomGame.Widget.KnightsList)XGUIEng.ListBoxPopAll(fK)for f=1,#C do XGUIEng.ListBoxPushItem(fK,C[f])end;XGUIEng.ListBoxSetSelectedIndex(fK,0)CustomGame.Knight=0;local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; XGUIEng.PopPage()"fI=fI.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,fI)local fL="/InGame/Singleplayer/CustomGame/ContainerSelection/"XGUIEng.SetText(fL.."HeroComboBoxMain/HeroComboBox","")if C[1]then XGUIEng.SetText(fL.."HeroComboBoxMain/HeroComboBox",C[1])end;XGUIEng.PushPage(fL.."HeroComboBoxContainer",false)XGUIEng.PushPage(fL.."HeroComboBoxMain",false)XGUIEng.ShowWidget(fL.."HeroComboBoxContainer",0)local fM={GUI.GetScreenSize()}local a7,a8=XGUIEng.GetWidgetScreenPosition(RequesterDialog_Ok)XGUIEng.SetWidgetScreenPosition(fL.."HeroComboBoxMain",a7-25,a8-90*fM[2]/1080)XGUIEng.SetWidgetScreenPosition(fL.."HeroComboBoxContainer",a7-25,a8-20*fM[2]/1080)else self:DialogQueuePush("OpenSelectionDialog",{V,fF,aJ,fG,C})end end;function Lib.Requester.Local:DialogOverwriteOriginal()OpenDialog_Orig_Windows=OpenDialog;OpenDialog=function(fN,fF,fO)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; XGUIEng.PopPage()"OpenDialog_Orig_Windows(fF,fN)end end;OpenRequesterDialog_Orig_Windows=OpenRequesterDialog;OpenRequesterDialog=function(fN,fF,fP,fJ,fQ)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_Yes,fI)local fI="XGUIEng.ShowWidget(RequesterDialog, 0)"fI=fI.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_No,fI)OpenRequesterDialog_Orig_Windows(fN,fF,fP,fJ,fQ)end end end;function Lib.Requester.Local:ShowTextWindow(dx)dx.PlayerID=dx.PlayerID or 1;dx.Button=dx.Button or{}local m=GUI.GetPlayerID()if dx.PlayerID~=m then return end;if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 then self:UpdateChatLogText(dx)return end;self.Chat.Data[m]=dx;self:CloseTextWindow(m)self:AlterChatLog()XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",dx.Content)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}"..dx.Caption)if dx.DisableClose then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/Exit",0)end;self:ShouldShowSlider(dx.Content)XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)end;function Lib.Requester.Local:CloseTextWindow(V)assert(V~=nil)local m=GUI.GetPlayerID()if V~=m then return end;GUI_Chat.CloseChatMenu()end;function Lib.Requester.Local:UpdateChatLogText(dx)XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",dx.Content)end;function Lib.Requester.Local:AlterChatLog()local m=GUI.GetPlayerID()if self.Chat.Visible[m]then return end;self.Chat.Visible[m]=true;self.Chat.History[m]=table.copy(g_Chat.ChatHistory)g_Chat.ChatHistory={}self:AlterChatLogDisplay()end;function Lib.Requester.Local:RestoreChatLog()local m=GUI.GetPlayerID()if not self.Chat.Visible[m]then return end;self.Chat.Visible[m]=false;g_Chat.ChatHistory={}for f=1,#self.Chat.History[m]do GUI_Chat.ChatlogAddMessage(self.Chat.History[m][f])end;self:RestoreChatLogDisplay()self.Chat.History[m]={}self.Chat.Widgets[m]={}self.Chat.Data[m]={}end;function Lib.Requester.Local:UpdateToggleWhisperTarget()local m=GUI.GetPlayerID()local dc="/InGame/Root/Normal/ChatOptions/"if not self.Chat.Data[m]or not self.Chat.Data[m].Button or not self.Chat.Data[m].Button.Action then XGUIEng.ShowWidget(dc.."ToggleWhisperTarget",0)return end;local fR=self.Chat.Data[m].Button.Text;XGUIEng.SetText(dc.."ToggleWhisperTarget","{center}"..fR)end;function Lib.Requester.Local:ShouldShowSlider(aJ)local fS=string.len(aJ)local fT=1;local fU=0;while true do local fV,fW=string.find(aJ,"{cr}",fT)if not fW then break end;if fW-fT<=58 then fS=fS+58-(fW-fT)end;fT=fW+1 end;if fS+fU*55>1000 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/ChatLogSlider",1)end end;function Lib.Requester.Local:OverrideChatLog()GUI_Chat.ChatlogAddMessage_Orig_Requester=GUI_Chat.ChatlogAddMessage;GUI_Chat.ChatlogAddMessage=function(fN)local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.ChatlogAddMessage_Orig_Requester(fN)return end;table.insert(Lib.Requester.Local.Chat.History[m],fN)end;GUI_Chat.DisplayChatLog_Orig_Requester=GUI_Chat.DisplayChatLog;GUI_Chat.DisplayChatLog=function()local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.DisplayChatLog_Orig_Requester()end end;GUI_Chat.CloseChatMenu_Orig_Requester=GUI_Chat.CloseChatMenu;GUI_Chat.CloseChatMenu=function()local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.CloseChatMenu_Orig_Requester()return end;Lib.Requester.Local:RestoreChatLog()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)end;GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester=GUI_Chat.ToggleWhisperTargetUpdate;GUI_Chat.ToggleWhisperTargetUpdate=function()local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester()return end;Lib.Requester.Local:UpdateToggleWhisperTarget()end;GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester=GUI_Chat.CheckboxMessageTypeWhisperUpdate;GUI_Chat.CheckboxMessageTypeWhisperUpdate=function()local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester()return end end;GUI_Chat.ToggleWhisperTarget_Orig_Requester=GUI_Chat.ToggleWhisperTarget;GUI_Chat.ToggleWhisperTarget=function()local m=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[m]then GUI_Chat.ToggleWhisperTarget_Orig_Requester()return end;if Lib.Requester.Local.Chat.Data[m].Button.Action then local dk=Lib.Requester.Local.Chat.Data[m]Lib.Requester.Local.Chat.Data[m].Button.Action(dk)end end end;function Lib.Requester.Local:AlterChatLogDisplay()local m=GUI.GetPlayerID()local fX,fY,P,Q;local dY;local dc="/InGame/Root/Normal/ChatOptions/"P,Q=XGUIEng.GetWidgetLocalPosition(dc.."ToggleWhisperTarget")fX,fY=XGUIEng.GetWidgetSize(dc.."ToggleWhisperTarget")self.Chat.Widgets[m]["ToggleWhisperTarget"]={X=P,Y=Q,W=fX,H=fY}dY=self.Chat.Widgets[m]["ToggleWhisperTarget"]P,Q=XGUIEng.GetWidgetLocalPosition(dc.."ChatLog")fX,fY=XGUIEng.GetWidgetSize(dc.."ChatLog")self.Chat.Widgets[m]["ChatLog"]={X=P,Y=Q,W=fX,H=fY}dY=self.Chat.Widgets[m]["ChatLog"]P,Q=XGUIEng.GetWidgetLocalPosition(dc.."ChatLogSlider")fX,fY=XGUIEng.GetWidgetSize(dc.."ChatLogSlider")self.Chat.Widgets[m]["ChatLogSlider"]={X=P,Y=Q,W=fX,H=fY}dY=self.Chat.Widgets[m]["ChatLogSlider"]XGUIEng.ShowWidget(dc.."ChatModeAllPlayers",0)XGUIEng.ShowWidget(dc.."ChatModeTeam",0)XGUIEng.ShowWidget(dc.."ChatModeWhisper",0)XGUIEng.ShowWidget(dc.."ChatChooseModeCaption",0)XGUIEng.ShowWidget(dc.."Background/TitleBig",1)XGUIEng.ShowWidget(dc.."Background/TitleBig/Info",0)XGUIEng.ShowWidget(dc.."ChatLogCaption",0)XGUIEng.ShowWidget(dc.."BGChoose",0)XGUIEng.ShowWidget(dc.."BGChatLog",0)XGUIEng.ShowWidget(dc.."ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/BG",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Close",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Slider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Text",0)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}Test")XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog",15,90)XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog/Name",0,0)XGUIEng.SetTextColor("/InGame/Root/Normal/MessageLog/Name",51,51,121,255)XGUIEng.SetWidgetSize(dc.."ChatLogSlider",46,600)XGUIEng.SetWidgetLocalPosition(dc.."ChatLogSlider",780,130)XGUIEng.SetWidgetSize(dc.."Background/DialogBG/1 (2)/2",150,400)XGUIEng.SetWidgetPositionAndSize(dc.."Background/DialogBG/1 (2)/3",400,500,350,400)XGUIEng.SetWidgetLocalPosition(dc.."ToggleWhisperTarget",280,760)XGUIEng.SetWidgetLocalPosition(dc.."ChatLog",140,150)XGUIEng.SetWidgetSize(dc.."ChatLog",640,560)end;function Lib.Requester.Local:RestoreChatLogDisplay()local m=GUI.GetPlayerID()local dY;local dc="/InGame/Root/Normal/ChatOptions/"dY=self.Chat.Widgets[m]["ToggleWhisperTarget"]XGUIEng.SetWidgetLocalPosition(dc.."ToggleWhisperTarget",dY.X,dY.Y)XGUIEng.SetWidgetSize(dc.."ToggleWhisperTarget",dY.W,dY.H)dY=self.Chat.Widgets[m]["ChatLog"]XGUIEng.SetWidgetLocalPosition(dc.."ChatLog",dY.X,dY.Y)XGUIEng.SetWidgetSize(dc.."ChatLog",dY.W,dY.H)dY=self.Chat.Widgets[m]["ChatLogSlider"]XGUIEng.SetWidgetLocalPosition(dc.."ChatLogSlider",dY.X,dY.Y)XGUIEng.SetWidgetSize(dc.."ChatLogSlider",dY.W,dY.H)XGUIEng.ShowWidget(dc.."ChatModeAllPlayers",1)XGUIEng.ShowWidget(dc.."ChatModeTeam",1)XGUIEng.ShowWidget(dc.."ChatModeWhisper",1)XGUIEng.ShowWidget(dc.."ChatChooseModeCaption",1)XGUIEng.ShowWidget(dc.."Background/TitleBig",1)XGUIEng.ShowWidget(dc.."Background/TitleBig/Info",1)XGUIEng.ShowWidget(dc.."ChatLogCaption",1)XGUIEng.ShowWidget(dc.."BGChoose",1)XGUIEng.ShowWidget(dc.."BGChatLog",1)XGUIEng.ShowWidget(dc.."ChatLogSlider",1)XGUIEng.ShowWidget(dc.."ToggleWhisperTarget",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)end;RegisterModule(Lib.Requester.Name)Lib.IO={Name="IO",Global={SlaveSequence=0},Local={Data={}},Shared={TechnologyConfig={{"R_CallGeologist",{de="Geologen rufen",en="Order geologist",fr="Ordre géologue"},{8,1,1},1},{"R_RefillIronMine",{de="Eisenmine auffüllen",en="Refill mine",fr="Recharger le mien"},{8,2,1},1},{"R_RefillStoneMine",{de="Steinbruch auffüllen",en="Refill quarry",fr="Carrière de recharge"},{8,3,1},1},{"R_RefillCistern",{de="Brunnen auffüllen",en="Refill well",fr="Bien remplir"},{8,4,1},1},{"R_Tradepost",{de="Handelsposten bauen",en="Build Tradepost",fr="Route commerciale"},{3,1,1},1}}}}CONST_IO={}CONST_IO_SLAVE_TO_MASTER={}CONST_IO_SLAVE_STATE={}CONST_IO_LAST_OBJECT=0;CONST_IO_LAST_HERO=0;Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/faker/Technology")Lib.Require("module/io/IO_API")Lib.Register("module/io/IO")function Lib.IO.Global:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideObjectInteraction()self:StartObjectDestructionController()self:StartObjectConditionController()Lib.IO.Local=nil end;self.IsInstalled=true end;function Lib.IO.Global:OnSaveGameLoaded()end;function Lib.IO.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ObjectInteraction then self:OnObjectInteraction(arg[1],arg[2],arg[3])elseif ah==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end end end;function Lib.IO.Global:OnObjectInteraction(fZ,f_,V)CONST_IO_LAST_OBJECT=GetID(fZ)CONST_IO_LAST_HERO=f_;if CONST_IO_SLAVE_TO_MASTER[fZ]then fZ=CONST_IO_SLAVE_TO_MASTER[fZ]end;if CONST_IO[fZ]then CONST_IO[fZ].IsUsed=true;ExecuteLocal([[
            local ScriptName = "%s"
            if CONST_IO[ScriptName] then
                CONST_IO[ScriptName].IsUsed = true
            end
        ]],fZ)if CONST_IO[fZ].Replacement then ReplaceEntity(fZ,CONST_IO[fZ].Replacement)end;if CONST_IO[fZ].Action then CONST_IO[fZ]:Action(V,f_)end end end;function Lib.IO.Global:CreateObject(g0)local _=GetID(g0.Name)if _==0 then return end;self:DestroyObject(g0.Name)local g1=Logic.GetEntityTypeName(Logic.GetEntityType(_))if g1 and not g1:find("^I_X_")then self:CreateSlaveObject(g0)end;g0.IsActive=true;g0.IsUsed=false;g0.Player=g0.Player or{1,2,3,4,5,6,7,8}g0.State=g0.State or 0;g0.Waittime=g0.Waittime or 5;g0.Distance=g0.Distance or 1000;CONST_IO[g0.Name]=g0;ExecuteLocal([[CONST_IO["%s"] = %s]],g0.Name,table.tostring(CONST_IO[g0.Name]))self:SetupObject(g0)return g0 end;function Lib.IO.Global:DestroyObject(fZ)if not CONST_IO[fZ]then return end;if CONST_IO[fZ].Slave then CONST_IO_SLAVE_TO_MASTER[CONST_IO[fZ].Slave]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],CONST_IO[fZ].Slave)CONST_IO_SLAVE_STATE[CONST_IO[fZ].Slave]=nil;DestroyEntity(CONST_IO[fZ].Slave)end;self:SetObjectState(fZ,2)SendReport(Report.ObjectDelete,fZ)SendReportToLocal(Report.ObjectDelete,fZ)ExecuteLocal([[CONST_IO["%s"] = nil]],fZ)CONST_IO[fZ]=nil end;function Lib.IO.Global:CreateSlaveObject(g2)local Name;for g,h in pairs(CONST_IO_SLAVE_TO_MASTER)do if h==g2.Name and IsExisting(g)then Name=g end end;if Name==nil then self.SlaveSequence=self.SlaveSequence+1;Name="LIB_IO_SlaveObject_"..self.SlaveSequence end;local g3=GetID(Name)if not IsExisting(Name)then local P,Q,R=Logic.EntityGetPos(GetID(g2.Name))g3=Logic.CreateEntity(Entities.I_X_DragonBoatWreckage,P,Q,0,0)Logic.SetModel(g3,Models.Effects_E_Mosquitos)Logic.SetEntityName(g3,Name)CONST_IO_SLAVE_TO_MASTER[Name]=g2.Name;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = "%s"]],Name,g2.Name)g2.Slave=Name end;CONST_IO_SLAVE_STATE[Name]=1;return g3 end;function Lib.IO.Global:SetupObject(g2)local _=GetID(g2.Slave and g2.Slave or g2.Name)Logic.InteractiveObjectClearCosts(_)Logic.InteractiveObjectClearRewards(_)Logic.InteractiveObjectSetInteractionDistance(_,g2.Distance)Logic.InteractiveObjectSetTimeToOpen(_,g2.Waittime)local g4=g2.RewardResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetRewardResourceCartType(_,g4)local g5=g2.RewardGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetRewardGoldCartType(_,g5)local g6=g2.CostResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetCostResourceCartType(_,g6)local g7=g2.CostGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetCostGoldCartType(_,g7)if g2.Reward then Logic.InteractiveObjectAddRewards(_,g2.Reward[1],g2.Reward[2])end;if g2.Costs and g2.Costs[1]then Logic.InteractiveObjectAddCosts(_,g2.Costs[1],g2.Costs[2])end;if g2.Costs and g2.Costs[3]then Logic.InteractiveObjectAddCosts(_,g2.Costs[3],g2.Costs[4])end;table.insert(HiddenTreasures,_)InteractiveObjectActivate(Logic.GetEntityName(_),g2.State or 0)end;function Lib.IO.Global:ResetObject(fZ)local _=GetID(CONST_IO[fZ].Slave and CONST_IO[fZ].Slave or fZ)RemoveInteractiveObjectFromOpenedList(_)table.insert(HiddenTreasures,_)Logic.InteractiveObjectSetAvailability(_,true)self:SetObjectState(_,CONST_IO[fZ].State or 0)CONST_IO[fZ].IsUsed=false;CONST_IO[fZ].IsActive=true;SendReport(Report.ObjectReset,fZ)SendReportToLocal(Report.ObjectReset,fZ)end;function Lib.IO.Global:SetObjectState(fZ,bd,...)arg=(not arg or#arg==0)and{1,2,3,4,5,6,7,8}or arg;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(fZ),f,2)end;for f=1,#arg,1 do Logic.InteractiveObjectSetPlayerState(GetID(fZ),arg[f],bd)end;Logic.InteractiveObjectSetAvailability(GetID(fZ),bd~=2)end;function Lib.IO.Global:OverrideObjectInteraction()GameCallback_OnObjectInteraction=function(a1,V)OnInteractiveObjectOpened(a1,V)OnTreasureFound(a1,V)local aq=Logic.GetEntityName(a1)if CONST_IO_SLAVE_TO_MASTER[aq]then aq=CONST_IO_SLAVE_TO_MASTER[aq]end;local g8={}Logic.GetKnights(V,g8)local d3=GetClosestToTarget(a1,g8)SendReport(Report.ObjectInteraction,aq,d3,V)SendReportToLocal(Report.ObjectInteraction,aq,d3,V)end;QuestTemplate.AreObjectsActivated=function(self,g9)for f=1,g9[0]do if not g9[-f]then g9[-f]=GetID(g9[f])end;local ga=Logic.GetEntityName(g9[-f])if CONST_IO_SLAVE_TO_MASTER[ga]then ga=CONST_IO_SLAVE_TO_MASTER[ga]end;if CONST_IO[ga]then if CONST_IO[ga].IsUsed~=true then return false end elseif Logic.IsInteractiveObject(g9[-f])then if not IsInteractiveObjectOpen(g9[-f])then return false end end end;return true end end;function Lib.IO.Global:ProcessChatInput(aJ)local gb=Lib.Core.Debug:CommandTokenizer(aJ)for f=1,#gb,1 do if gb[f][1]=="enableobject"then local State=gb[f][3]and tonumber(gb[f][3])or nil;local m=gb[f][4]and tonumber(gb[f][4])or nil;error(IsExisting(gb[f][2]),"object "..gb[f][2].." does not exist!")InteractiveObjectActivate(gb[f][2],State,m)log("activated object "..gb[f][2]..".")elseif gb[f][1]=="disableobject"then local m=gb[f][3]and tonumber(gb[f][3])or nil;error(IsExisting(gb[f][2]),"object "..gb[f][2].." does not exist!")InteractiveObjectDeactivate(gb[f][2],m)log("deactivated object "..gb[f][2]..".")elseif gb[f][1]=="initobject"then error(IsExisting(gb[f][2]),"object "..gb[f][2].." does not exist!")API.SetupObject({Name=gb[f][2],Waittime=0,State=0})log("quick initalization of object "..gb[f][2]..".")end end end;function Lib.IO.Global:StartObjectDestructionController()RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local gc=Event.GetEntityID()local gd=Logic.GetEntityName(gc)local ge=CONST_IO_SLAVE_TO_MASTER[gd]if gd and ge then local gf=CONST_IO[ge]if not gf then return end;log("slave "..gd.." of master "..ge.." has been deleted!")log("try to create new slave...")CONST_IO_SLAVE_TO_MASTER[gd]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],gd)local g3=Lib.IO.Global:CreateSlaveObject(gf)error(IsExisting(g3),"failed to create slave!")Lib.IO.Global:SetupObject(gf)if gf.IsUsed==true or CONST_IO_SLAVE_STATE[gd]and CONST_IO_SLAVE_STATE[gd]==0 then InteractiveObjectDeactivate(gf.Slave)end;log("new slave created for master "..ge..".")end end)end;function Lib.IO.Global:StartObjectConditionController()RequestHiResJob(function()for g,h in pairs(CONST_IO)do if h and not h.IsUsed and h.IsActive then CONST_IO[g].IsFullfilled=true;if CONST_IO[g].Condition then local gg=h:Condition()CONST_IO[g].IsFullfilled=gg end;ExecuteLocal([[
                    local ScriptName = "%s"
                    if CONST_IO[ScriptName] then
                        CONST_IO[ScriptName].IsFullfilled = %s
                    end
                ]],g,tostring(CONST_IO[g].IsFullfilled))end end end)end;function Lib.IO.Local:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideGameFunctions()Lib.IO.Global=nil end;self.IsInstalled=true end;function Lib.IO.Local:OnSaveGameLoaded()end;function Lib.IO.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ObjectReset then if CONST_IO[arg[1]]then CONST_IO[arg[1]].IsUsed=false end elseif ah==Report.ObjectInteraction then CONST_IO_LAST_OBJECT=GetID(arg[1])CONST_IO_LAST_HERO=arg[2]end end;function Lib.IO.Local:OverrideGameFunctions()g_CurrentDisplayedQuestID=0;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO=GUI_Interaction.InteractiveObjectClicked;GUI_Interaction.InteractiveObjectClicked=function()local f=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local B=g_Interaction.ActiveObjectsOnScreen[f]local m=GUI.GetPlayerID()if not B then return end;local aq=Logic.GetEntityName(B)if CONST_IO_SLAVE_TO_MASTER[aq]then aq=CONST_IO_SLAVE_TO_MASTER[aq]end;if CONST_IO[aq]then if not CONST_IO[aq].IsFullfilled then local aK=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")if CONST_IO[aq].ConditionInfo then aK=ConvertPlaceholders(Localize(CONST_IO[aq].ConditionInfo))end;Message(aK)return end;if type(CONST_IO[aq].Costs)=="table"and#CONST_IO[aq].Costs~=0 then local cu=Logic.GetStoreHouse(m)local a4=Logic.GetHeadquarters(m)if cu==nil or cu==0 or a4==nil or a4==0 then GUI.AddNote("DEBUG: Player needs special buildings when using activation costs!")return end end end;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO()if not Framework.IsNetworkGame()then local g8={}Logic.GetKnights(m,g8)local d3=GetClosestToTarget(B,g8)SendReportToGlobal(Report.ObjectClicked,aq,d3,m)SendReport(Report.ObjectClicked,aq,d3,m)end end;GUI_Interaction.InteractiveObjectUpdate=function()if g_Interaction.ActiveObjects==nil then return end;local m=GUI.GetPlayerID()for f=1,#g_Interaction.ActiveObjects do local gh=g_Interaction.ActiveObjects[f]local gi=gh;local aq=Logic.GetEntityName(gh)if CONST_IO_SLAVE_TO_MASTER[aq]then gi=GetID(CONST_IO_SLAVE_TO_MASTER[aq])end;local fn,fo=GUI.GetEntityInfoScreenPosition(gi)local gj,gk=GUI.GetScreenSize()if fn~=0 and fo~=0 and fn>-50 and fo>-50 and fn<gj+50 and fo<gk+50 then if not table.contains(g_Interaction.ActiveObjectsOnScreen,gh)then table.insert(g_Interaction.ActiveObjectsOnScreen,gh)end else for f=1,#g_Interaction.ActiveObjectsOnScreen do if g_Interaction.ActiveObjectsOnScreen[f]==gh then table.remove(g_Interaction.ActiveObjectsOnScreen,f)end end end end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local dY="/InGame/Root/Normal/InteractiveObjects/"..f;if XGUIEng.IsWidgetExisting(dY)==1 then local gh=g_Interaction.ActiveObjectsOnScreen[f]local gi=gh;local aq=Logic.GetEntityName(gh)if CONST_IO_SLAVE_TO_MASTER[aq]then gi=GetID(CONST_IO_SLAVE_TO_MASTER[aq])aq=Logic.GetEntityName(gi)end;local bh=Logic.GetEntityType(gh)local gl=Logic.GetEntityTypeName(bh)local fn,fo=GUI.GetEntityInfoScreenPosition(gi)local gm={XGUIEng.GetWidgetScreenSize(dY)}XGUIEng.SetWidgetScreenPosition(dY,fn-gm[1]/2,fo-gm[2]/2)local gn={Logic.InteractiveObjectGetCosts(gh)}local go={Logic.InteractiveObjectGetEffectiveCosts(gh,m)}local gp=Logic.InteractiveObjectGetAvailability(gh)local gq=Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(gh,m)local gr=false;if gn[1]~=nil and go[1]==nil and gp==true then gr=true end;if gq==false then gr=true end;if Logic.GetTime()>1 and g_GameExtraNo>0 then if gr==false and string.find(gl,"R_StoneMine")then if Logic.TechnologyGetState(m,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gr=true end end;if gr==false and string.find(gl,"R_IronMine")then if Logic.TechnologyGetState(m,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gr=true end end;if gr==false and(string.find(gl,"B_Cistern")or string.find(gl,"B_Well"))then if Logic.TechnologyGetState(m,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gr=true end end;if gr==false and string.find(gl,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(m,Technologies.R_Tradepost)~=TechnologyStates.Researched then gr=true end end end;if gr==false then if CONST_IO[aq]and type(CONST_IO[aq].Player)=="table"then gr=not self:IsAvailableForGuiPlayer(aq)elseif CONST_IO[aq]and type(CONST_IO[aq].Player)=="number"then gr=CONST_IO[aq].Player~=m end end;if gr==true then XGUIEng.DisableButton(dY,1)else XGUIEng.DisableButton(dY,0)end;if GUI_Interaction.InteractiveObjectUpdateEx1~=nil then GUI_Interaction.InteractiveObjectUpdateEx1(dY,bh)end;XGUIEng.ShowWidget(dY,1)end end;for f=#g_Interaction.ActiveObjectsOnScreen+1,2 do local dY="/InGame/Root/Normal/InteractiveObjects/"..f;XGUIEng.ShowWidget(dY,0)end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local dY="/InGame/Root/Normal/InteractiveObjects/"..f;local gh=g_Interaction.ActiveObjectsOnScreen[f]local aq=Logic.GetEntityName(gh)if CONST_IO_SLAVE_TO_MASTER[aq]then aq=CONST_IO_SLAVE_TO_MASTER[aq]end;if CONST_IO[aq]and CONST_IO[aq].Texture then local gs;local ax=CONST_IO[aq].Texture[1]or 14;local gt=CONST_IO[aq].Texture[2]or 10;local gu=CONST_IO[aq].Texture[3]or 0;if type(gu)=="string"then gs=gu;gu=0 end;ChangeIcon(dY,{ax,gt,gu},nil,gs)end end end;GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO=GUI_Interaction.InteractiveObjectMouseOver;GUI_Interaction.InteractiveObjectMouseOver=function()local m=GUI.GetPlayerID()local gv=XGUIEng.GetCurrentWidgetID()local gw=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local gh=g_Interaction.ActiveObjectsOnScreen[gw]local bh=Logic.GetEntityType(gh)local gl=Logic.GetEntityTypeName(bh)if tonumber(Logic.GetEntityName(gh))~=nil and string.find(gl,"^I_X_")then GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO()return end;local gx=false;local gy=false;if g_GameExtraNo>0 then gx=string.find(gl,"^R_Stone")~=nil or string.find(gl,"^R_Iron")~=nil or string.find(gl,"^B_Cistern")~=nil or string.find(gl,"^B_Well")~=nil;gy=string.find(gl,"^I_X_Trade")~=nil end;local gz;local bW="InteractiveObjectAvailable"if Logic.InteractiveObjectGetAvailability(gh)==false then bW="InteractiveObjectNotAvailable"elseif Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(gh,m)==false then gz="InteractiveObjectAvailableReward"elseif XGUIEng.IsButtonDisabled(gv)==1 then gz="UpgradeOutpost"if g_GameExtraNo>0 then if string.find(gl,"R_StoneMine")then if Logic.TechnologyGetState(m,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gz=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillStoneMine)or gz end end;if string.find(gl,"R_IronMine")then if Logic.TechnologyGetState(m,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gz=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillIronMine)or gz end end;if string.find(gl,"B_Cistern")or string.find(gl,"B_Well")then if Logic.TechnologyGetState(m,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(m,Technologies.R_CallGeologist)~=TechnologyStates.Researched then gz=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillCistern)or gz end end;if string.find(gl,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(m,Technologies.R_Tradepost)~=TechnologyStates.Researched then gz=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_Tradepost)or gz end end end end;local bT="UI_ObjectNames/"..bW;local aK="UI_ObjectDescription/"..bW;local bU=gz~=nil and"UI_ButtonDisabled/"..gz or nil;if gx then bT="UI_ObjectNames/InteractiveObjectGeologist"end;if gy then bT="UI_ObjectNames/InteractiveObjectTradepost"end;local gA=false;local bt={Logic.InteractiveObjectGetEffectiveCosts(gh,m)}if bt and bt[1]and bt[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(bt[1])~=GoodCategories.GC_Resource then gA=true end;local aq=Logic.GetEntityName(gh)if CONST_IO_SLAVE_TO_MASTER[aq]then aq=CONST_IO_SLAVE_TO_MASTER[aq]end;if CONST_IO[aq]and CONST_IO[aq].IsUsed~=true then bW="InteractiveObjectAvailable"if CONST_IO[aq]and type(CONST_IO[aq].Player)=="table"and not self:IsAvailableForGuiPlayer(aq)or CONST_IO[aq]and type(CONST_IO[aq].Player)=="number"and CONST_IO[aq].Player~=m or Logic.InteractiveObjectGetAvailability(gh)==false then bW="InteractiveObjectNotAvailable"end;bT=ConvertPlaceholders(Localize(CONST_IO[aq].Title or bT))if bT and bT:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bT=XGUIEng.GetStringTableText(bT)end;aK=ConvertPlaceholders(Localize(CONST_IO[aq].Text or aK))if aK and aK:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then aK=XGUIEng.GetStringTableText(aK)end;bU=CONST_IO[aq].DisabledText or bU;if bU then bU=ConvertPlaceholders(Localize(bU))if bU and bU:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bU=XGUIEng.GetStringTableText(bU)end end;bt=CONST_IO[aq].Costs;if bt and bt[1]and bt[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(bt[1])~=GoodCategories.GC_Resource then gA=true end end;SetTooltipCosts(bT,aK,bU,bt,gA)end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(gB,gC)local gD=tonumber(gB)if gD then gB=gD end;local ft,gE=GUI_Interaction.GetPotentialSubQuestAndType(gB)local gF="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gG;local gH;g_CurrentDisplayedQuestID=gB;if gE==Objective.Object then gG=gF.."/List"gH=Wrapped_GetStringTableText(gB,"UI_Texts/QuestInteraction")local gI={}for f=1,ft.Objectives[1].Data[0]do local gJ;if Logic.IsEntityDestroyed(ft.Objectives[1].Data[f])then gJ=g_Interaction.SavedQuestEntityTypes[gB][f]else gJ=Logic.GetEntityType(GetID(ft.Objectives[1].Data[f]))end;local gK=Logic.GetEntityName(ft.Objectives[1].Data[f])local gL=""if gJ~=nil and gJ~=0 then local gM=Logic.GetEntityTypeName(gJ)gL=Wrapped_GetStringTableText(gB,"Names/"..gM)or GetStringText("Names/"..gM)if gL==""then gL=Wrapped_GetStringTableText(gB,"UI_ObjectNames/"..gM)or GetStringText("UI_ObjectNames/"..gM)end;if gL==nil then gL="Debug: ObjectName missing for "..gM end end;table.insert(gI,Localize(ConvertPlaceholders(gL)))end;for f=1,4 do local aG=gI[f]if aG==nil then aG=""end;XGUIEng.SetText(gG.."/Entry"..f,"{center}"..aG)end;SetIcon(gG.."/QuestTypeIcon",{14,10})XGUIEng.SetText(gG.."/Caption","{center}"..gH)XGUIEng.ShowWidget(gG,1)else GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO(gB,gC)end end end;function Lib.IO.Local:IsAvailableForGuiPlayer(fZ)local m=GUI.GetPlayerID()if CONST_IO[fZ]and type(CONST_IO[fZ].Player)=="table"then for f=1,8 do if CONST_IO[fZ].Player[f]and CONST_IO[fZ].Player[f]==m then return true end end;return false end;return true end;function Lib.IO.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for c2=1,8 do Logic.TechnologySetState(c2,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.IO.Name)Lib.IOChest={Name="IOChest",Global={},Local={}}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOChest_API")Lib.Register("module/io/IOChest")function Lib.IOChest.Global:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Lib.IOChest.Local=nil end;self.IsInstalled=true end;function Lib.IOChest.Global:OnSaveGameLoaded()end;function Lib.IOChest.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif ah==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then self:ResetIOChest(arg[1])end elseif ah==Report.ObjectDelete then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then end end end;function Lib.IOChest.Global:ProcessChatInput(aJ)local gb=Lib.Core.Debug:CommandTokenizer(aJ)for f=1,#gb,1 do if gb[f][1]=="spawncow"then if not IsExisting(gb[f][2])then CreateRandomGoldChest(gb[f][2])end elseif gb[f][1]=="spawnsheep"then if not IsExisting(gb[f][2])then CreateRandomResourceChest(gb[f][2])end elseif gb[f][1]=="luxurychest"then if not IsExisting(gb[f][2])then CreateRandomLuxuryChest(gb[f][2])end end end end;function Lib.IOChest.Global:CreateRandomChest(j,gN,gO,gP,gQ,gR,aL,fG)gO=math.floor(gO~=nil and gO>0 and gO or 1)gP=math.floor(gP~=nil and gP>1 and gP or 2)assert(gN~=nil,"CreateRandomChest: Good does not exist!")assert(gO<=gP,"CreateRandomChest: min amount must be smaller or equal than max amount!")log("Creating chest (%s, %s, %d, %d, %s, %s)",j,Logic.GetGoodTypeName(gN),gO,gP,tostring(gQ==true),tostring(gR==true))if not gR then local cM=ReplaceEntity(j,Entities.XD_ScriptEntity,0)Logic.SetModel(cM,Models.Doodads_D_X_ChestClose)Logic.SetVisible(cM,true)end;local bQ=gO;if gO<gP then bQ=math.random(gO,gP)end;local gS;local gT;if not gQ then gT={gN,bQ}else gS={gN,bQ}end;SetupObject{Name=j,IsInteractiveChest=true,Reward=gT,DirectReward=gS,Texture={1,6},Distance=gR and 1200 or 650,Waittime=0,State=0,DoNotChangeModel=gR==true,ActivationCondition=aL,ActivationAction=fG,Condition=function(dx)if dx.ActivationCondition then return dx.ActivationCondition(dx)end;return true end,Action=function(dx,f_,V)if not dx.DoNotChangeModel then Logic.SetModel(GetID(dx.Name),Models.Doodads_D_X_ChestOpenEmpty)end;if dx.DirectReward then AddGood(dx.DirectReward[1],dx.DirectReward[2],V)end;if dx.ActivationAction then dx.ActivationAction(dx,f_,V)end;SendReport(Report.InteractiveTreasureActivated,dx.Name,f_,V)SendReportToLocal(Report.InteractiveTreasureActivated,dx.Name,f_,V)end}end;function Lib.IOChest.Global:ResetIOChest(fZ)if not CONST_IO[fZ].DoNotChangeModel then local B=ReplaceEntity(fZ,Entities.XD_ScriptEntity,0)Logic.SetModel(B,Models.Doodads_D_X_ChestClose)Logic.SetVisible(B,true)end end;function Lib.IOChest.Global:CreateRandomGoldChest(j)self:CreateRandomChest(j,Goods.G_Gold,300,600,false)end;function Lib.IOChest.Global:CreateRandomResourceChest(j)local gU={Goods.G_Iron,Goods.G_Stone,Goods.G_Wood,Goods.G_Wool,Goods.G_Carcass,Goods.G_Herb,Goods.G_Honeycomb,Goods.G_Milk,Goods.G_RawFish,Goods.G_Grain}local gV=gU[math.random(1,#gU)]self:CreateRandomChest(j,gV,30,60,false)end;function Lib.IOChest.Global:CreateRandomLuxuryChest(j)local gW={Goods.G_Salt,Goods.G_Dye}if g_GameExtraNo>=1 then table.insert(gW,Goods.G_Gems)table.insert(gW,Goods.G_MusicalInstrument)table.insert(gW,Goods.G_Olibanum)end;local gV=gW[math.random(1,#gW)]self:CreateRandomChest(j,gV,50,100,false)end;function Lib.IOChest.Local:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")self:CreateDefaultObjectNames()Lib.IOChest.Global=nil end;self.IsInstalled=true end;function Lib.IOChest.Local:OnSaveGameLoaded()end;function Lib.IOChest.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.IOChest.Local:CreateDefaultObjectNames()AddStringText("UI_ObjectNames/D_X_ChestClosed",{de="Verschlossene Schatztruhe",en="Closed Treasure Chest",fr="Coffre au trésor fermé"})AddStringText("UI_ObjectNames/D_X_ChestOpenEmpty",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen01",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen02",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen03",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen04",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})end;RegisterModule(Lib.IOChest.Name)Lib.IOMine={Name="IOMine",Global={Mines={}},Local={}}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOMine_API")Lib.Register("module/io/IOMine")function Lib.IOMine.Global:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Local=nil end;self.IsInstalled=true end;function Lib.IOMine.Global:OnSaveGameLoaded()end;function Lib.IOMine.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveMine then self:ResetIOMine(arg[1],CONST_IO[arg[1]].Type)end elseif ah==Report.ObjectDelete then if CONST_IO[arg[1]].IsInteractiveMine and CONST_IO[arg[1]].Type then ReplaceEntity(arg[1],CONST_IO[arg[1]].Type)end end end;function Lib.IOMine.Global:CreateIOMine(W,u,fF,aJ,gX,gY,gZ,aL,g_,fG)local h0=self:ResetIOMine(W,u)local bZ={14,10}local h1;if u==Entities.R_IronMine then h1="Names/R_IronMine"bZ={14,10}end;if u==Entities.R_StoneMine then h1="Names/R_StoneMine"bZ={14,10}end;SetupObject{Name=W,IsInteractiveMine=true,Title=fF or h1,Text=aJ,Texture=bZ,Type=u,ResourceAmount=gY or 250,RefillAmount=gZ or 75,Costs=gX,InvisibleBlocker=h0,Distance=1200,Waittime=0,ConditionInfo=g_,AdditionalCondition=aL,AdditionalAction=fG,Condition=function(dx)if dx.AdditionalCondition then return dx:AdditionalCondition(dx)end;return true end,Action=function(dx,f_,V)local _=ReplaceEntity(dx.Name,dx.Type)SetResourceAmount(_,dx.ResourceAmount,dx.RefillAmount)DestroyEntity(dx.InvisibleBlocker)SendReport(Report.InteractiveMineErected,dx.Name,f_,V)SendReportToLocal(Report.InteractiveMineErected,dx.Name,f_,V)if dx.AdditionalAction then dx.AdditionalAction(dx,f_,V)end end}end;function Lib.IOMine.Global:ResetIOMine(fZ,u)if CONST_IO[fZ]then DestroyEntity(CONST_IO[fZ].InvisibleBlocker)end;local B=ReplaceEntity(fZ,Entities.XD_ScriptEntity)local h2=Models.Doodads_D_SE_ResourceIron_Wrecked;if u==Entities.R_StoneMine then h2=Models.R_SE_ResorceStone_10 end;Logic.SetVisible(B,true)Logic.SetModel(B,h2)local P,Q,R=Logic.EntityGetPos(B)local h0=Logic.CreateEntity(Entities.D_ME_Rock_Set01_B_07,P,Q,0,0)Logic.SetVisible(h0,false)if CONST_IO[fZ]then CONST_IO[fZ].InvisibleBlocker=h0 end;return h0 end;function Lib.IOMine.Local:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Global=nil end;self.IsInstalled=true end;function Lib.IOMine.Local:OnSaveGameLoaded()end;function Lib.IOMine.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOMine.Name)Lib.NPC={Name="NPC",Global={Interactions={},NPC={},UseMarker=true},Local={},Text={StartConversation={de="Gespräch beginnen",en="Start conversation",fr="Commencer la conversation"}}}CONST_LAST_NPC_INTERACTED=0;CONST_LAST_HERO_INTERACTED=0;Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/global/LookAt")Lib.Require("core/Core")Lib.Require("module/npc/NPC_API")Lib.Register("module/npc/NPC")function Lib.NPC.Global:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()RequestHiResJob(function()if Logic.GetTime()>1 then Lib.NPC.Global:InteractionTriggerController()end end)RequestJob(function()Lib.NPC.Global:InteractableMarkerController()end)Lib.NPC.Local=nil end;self.IsInstalled=true end;function Lib.NPC.Global:OnSaveGameLoaded()end;function Lib.NPC.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]self.Interactions[arg[1]]=self.Interactions[arg[1]]or{}if self.Interactions[arg[1]][arg[2]]then if Logic.GetCurrentTurn()<=self.Interactions[arg[1]][arg[2]]+5 then return end end;self.Interactions[arg[1]][arg[2]]=Logic.GetCurrentTurn()self:PerformNpcInteraction(arg[3])end end;function Lib.NPC.Global:CreateNpc(dx)self.NPC[dx.Name]={Name=dx.Name,Active=true,Type=dx.Type or 1,Player=dx.Player or{1,2,3,4,5,6,7,8},WrongPlayerAction=dx.WrongPlayerAction,Hero=dx.Hero,WrongHeroAction=dx.WrongHeroAction,Distance=dx.Distance or 350,Condition=dx.Condition,Callback=dx.Callback,UseMarker=self.UseMarker==true,MarkerID=0}self:UpdateNpc(dx)return self.NPC[dx.Name]end;function Lib.NPC.Global:DestroyNpc(dx)dx.Active=false;self:UpdateNpc(dx)self:DestroyMarker(dx.Name)self.NPC[dx.Name]=nil end;function Lib.NPC.Global:GetNpc(fZ)return self.NPC[fZ]end;function Lib.NPC.Global:UpdateNpc(dx)if not IsExisting(dx.Name)then return end;if not self.NPC[dx.Name]then local B=GetID(dx.Name)Logic.SetOnScreenInformation(B,0)return end;for g,h in pairs(dx)do self.NPC[dx.Name][g]=h end;self:CreateMarker(dx.Name)if self.NPC[dx.Name].Active then local B=GetID(dx.Name)Logic.SetOnScreenInformation(B,self.NPC[dx.Name].Type)else local B=GetID(dx.Name)Logic.SetOnScreenInformation(B,0)end end;function Lib.NPC.Global:PerformNpcInteraction(V)local aq=Logic.GetEntityName(CONST_LAST_NPC_INTERACTED)if self.NPC[aq]then local dk=self.NPC[aq]self:RotateActorsToEachother(V)self:AdjustHeroTalkingDistance(dk.Distance)if not self:InteractionIsAppropriatePlayer(aq,V,CONST_LAST_HERO_INTERACTED)then return end;dk.TalkedTo=CONST_LAST_HERO_INTERACTED;if not self:InteractionIsAppropriateHero(aq)then return end;if dk.Condition==nil or dk:Condition(V,CONST_LAST_HERO_INTERACTED)then dk.Active=false;if dk.Callback then dk:Callback(V,CONST_LAST_HERO_INTERACTED)end else dk.TalkedTo=0 end;self:UpdateNpc(dk)end end;function Lib.NPC.Global:InteractionIsAppropriatePlayer(fZ,V,h3)local h4=true;if self.NPC[fZ]then local dk=self.NPC[fZ]if dk.Player~=nil then if type(dk.Player)=="table"then h4=table.contains(dk.Player,V)else h4=dk.Player==V end;if not h4 then local h5=(dk.WrongHeroTick or 0)+1;local c5=Logic.GetTime()if dk.WrongPlayerAction and h5<c5 then self.NPC[fZ].LastWongPlayerTick=c5;dk:WrongPlayerAction(V)end end end end;return h4 end;function Lib.NPC.Global:InteractionIsAppropriateHero(fZ)local h4=true;if self.NPC[fZ]then local dk=self.NPC[fZ]if dk.Hero~=nil then if type(dk.Hero)=="table"then h4=table.contains(dk.Hero,Logic.GetEntityName(CONST_LAST_HERO_INTERACTED))end;h4=dk.Hero==Logic.GetEntityName(CONST_LAST_HERO_INTERACTED)if not h4 then local h5=(dk.WrongHeroTick or 0)+1;local c5=Logic.GetTime()if dk.WrongHeroAction and h5<c5 then self.NPC[fZ].WrongHeroTick=c5;dk:WrongHeroAction(CONST_LAST_HERO_INTERACTED)end end end end;return h4 end;function Lib.NPC.Global:GetEntityMovementTarget(a1)local fn=GetFloat(a1,CONST_SCRIPTING_VALUES.Destination.X)local fo=GetFloat(a1,CONST_SCRIPTING_VALUES.Destination.Y)return{X=fn,Y=fo}end;function Lib.NPC.Global:RotateActorsToEachother(V)local h6={}Logic.GetKnights(V,h6)for g,h in pairs(h6)do local ag=self:GetEntityMovementTarget(h)local P,Q,R=Logic.EntityGetPos(CONST_LAST_NPC_INTERACTED)if math.floor(ag.X)==math.floor(P)and math.floor(ag.Y)==math.floor(Q)then P,Q,R=Logic.EntityGetPos(h)Logic.MoveEntity(h,P,Q)LookAt(h,CONST_LAST_NPC_INTERACTED)end end;LookAt(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)LookAt(CONST_LAST_NPC_INTERACTED,CONST_LAST_HERO_INTERACTED)end;function Lib.NPC.Global:AdjustHeroTalkingDistance(x)local h7=x*GetFloat(CONST_LAST_NPC_INTERACTED,CONST_SCRIPTING_VALUES.Size)if GetDistance(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)<=h7*0.7 then local A=Logic.GetEntityOrientation(CONST_LAST_NPC_INTERACTED)local a7,a8,a9=Logic.EntityGetPos(CONST_LAST_HERO_INTERACTED)local ab=a7+h7*0.5*math.cos(math.rad(A))local ac=a8+h7*0.5*math.sin(math.rad(A))local _=Logic.CreateEntityOnUnblockedLand(Entities.XD_ScriptEntity,ab,ac,0,0)local h8,h9,ha=Logic.EntityGetPos(_)Logic.MoveSettler(CONST_LAST_HERO_INTERACTED,h8,h9)RequestHiResJob(function(h3,hb,dW)if Logic.GetTime()>dW+0.5 and Logic.IsEntityMoving(h3)==false then LookAt(h3,hb)LookAt(hb,h3)return true end end,CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED,Logic.GetTime())end end;function Lib.NPC.Global:OverrideQuestFunctions()GameCallback_OnNPCInteraction_Orig_NPC=GameCallback_OnNPCInteraction;GameCallback_OnNPCInteraction=function(a1,V,f_)GameCallback_OnNPCInteraction_Orig_NPC(a1,V,f_)local hc=f_ or Lib.NPC.Global:GetClosestKnight(a1,V)SendReport(Report.NpcInteraction,a1,hc,V)SendReportToLocal(Report.NpcInteraction,a1,hc,V)end;QuestTemplate.RemoveQuestMarkers_Orig_NPC=QuestTemplate.RemoveQuestMarkers;QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)else if self.Objectives[f].Data[4]then NpcDispose(self.Objectives[f].Data[4].NpcInstance)self.Objectives[f].Data[4].NpcInstance=nil end end else QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)end end end;QuestTemplate.ShowQuestMarkers_Orig_NPC=QuestTemplate.ShowQuestMarkers;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.ShowQuestMarkers_Orig_NPC(self)else if not self.Objectives[f].Data[4].NpcInstance then self.Objectives[f].Data[4].NpcInstance=NpcCompose{Name=self.Objectives[f].Data[3],Hero=self.Objectives[f].Data[2],Player=self.ReceivingPlayer}end end end end end;QuestTemplate.IsObjectiveCompleted_Orig_NPC=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,hd)local he=hd.Type;local hf=hd.Data;if hd.Completed~=nil then return hd.Completed end;if he~=Objective.Distance then return self:IsObjectiveCompleted_Orig_NPC(hd)else if hf[1]==-65565 then error(IsExisting(hf[3]),hf[3].." is dead! :(")if NpcTalkedTo(hf[4].NpcInstance,hf[2],self.ReceivingPlayer)then hd.Completed=true end else return self:IsObjectiveCompleted_Orig_NPC(hd)end end end end;function Lib.NPC.Global:GetClosestKnight(a1,V)local g8={}Logic.GetKnights(V,g8)return GetClosestToTarget(a1,g8)end;function Lib.NPC.Global:ToggleMarkerUsage(hg)self.UseMarker=hg==true;for g,h in pairs(self.NPC)do self.NPC[g].UseMarker=hg==true;self:HideMarker(g)end end;function Lib.NPC.Global:CreateMarker(fZ)if self.NPC[fZ]then local P,Q,R=Logic.EntityGetPos(GetID(fZ))local hh=Logic.CreateEntity(Entities.XD_ScriptEntity,P,Q,0,0)DestroyEntity(self.NPC[fZ].MarkerID)self.NPC[fZ].MarkerID=hh;self:HideMarker(fZ)end end;function Lib.NPC.Global:DestroyMarker(fZ)if self.NPC[fZ]then DestroyEntity(self.NPC[fZ].MarkerID)self.NPC[fZ].MarkerID=0 end end;function Lib.NPC.Global:HideMarker(fZ)if self.NPC[fZ]then if IsExisting(self.NPC[fZ].MarkerID)then Logic.SetModel(self.NPC[fZ].MarkerID,Models.Effects_E_NullFX)Logic.SetVisible(self.NPC[fZ].MarkerID,false)end end end;function Lib.NPC.Global:ShowMarker(fZ)if self.NPC[fZ]then if self.NPC[fZ].UseMarker==true and IsExisting(self.NPC[fZ].MarkerID)then local dZ=GetFloat(fZ,CONST_SCRIPTING_VALUES.Size)SetFloat(self.NPC[fZ].MarkerID,CONST_SCRIPTING_VALUES.Size,dZ)Logic.SetModel(self.NPC[fZ].MarkerID,Models.Effects_E_Wealth)Logic.SetVisible(self.NPC[fZ].MarkerID,true)end end end;function Lib.NPC.Global:GetEntityMovingTarget(a1)local P=GetFloat(a1,CONST_SCRIPTING_VALUES.Destination.X)local Q=GetFloat(a1,CONST_SCRIPTING_VALUES.Destination.Y)return{X=P,Y=Q}end;function Lib.NPC.Global:InteractionTriggerController()for m=1,8,1 do local hi={}Logic.GetKnights(m,hi)for f=1,#hi,1 do if Logic.GetCurrentTaskList(hi[f])=="TL_NPC_INTERACTION"then for g,h in pairs(self.NPC)do if h.Distance>=350 then local ag=self:GetEntityMovementTarget(hi[f])local ab,ac=Logic.EntityGetPos(GetID(g))if math.floor(ag.X)==math.floor(ab)and math.floor(ag.Y)==math.floor(ac)then if IsExisting(g)and IsNear(hi[f],g,h.Distance)then GameCallback_OnNPCInteraction(GetID(g),m,hi[f])return end end end end end end end end;function Lib.NPC.Global:InteractableMarkerController()for g,h in pairs(self.NPC)do if h.Active then if h.UseMarker and IsExisting(h.MarkerID)and GetInteger(h.MarkerID,CONST_SCRIPTING_VALUES.Visible)==801280 then self:HideMarker(g)else self:ShowMarker(g)end;local a7,a8,a9=Logic.EntityGetPos(h.MarkerID)local ab,ac,ad=Logic.EntityGetPos(GetID(g))if math.abs(a7-ab)>20 or math.abs(a8-ac)>20 then Logic.DEBUG_SetPosition(h.MarkerID,ab,ac)end end end end;function Lib.NPC.Local:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()Lib.NPC.Global=nil end;self.IsInstalled=true end;function Lib.NPC.Local:OnSaveGameLoaded()end;function Lib.NPC.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]end end;function Lib.NPC.Local:OverrideQuestFunctions()GUI_Interaction.DisplayQuestObjective_Orig_NPC=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(gB,gC)local gD=tonumber(gB)if gD then gB=gD end;local ft,gE=GUI_Interaction.GetPotentialSubQuestAndType(gB)local gF="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gG;local gH;g_CurrentDisplayedQuestID=gB;if gE==Objective.Distance then gG=gF.."/List"gH=Wrapped_GetStringTableText(gB,"UI_Texts/QuestInteraction")local gI={}if ft.Objectives[1].Data[1]==-65565 then gG=gF.."/Distance"gH=Wrapped_GetStringTableText(gB,"UI_Texts/QuestMoveHere")SetIcon(gG.."/QuestTypeIcon",{7,10})local hj=GetID(ft.Objectives[1].Data[2])local hk=Logic.GetEntityType(hj)local hl=g_TexturePositions.Entities[hk]if not hl then hl={7,9}end;SetIcon(gG.."/IconMover",hl)local hm=GetID(ft.Objectives[1].Data[3])local hn=Logic.GetEntityType(hm)local ho=g_TexturePositions.Entities[hn]if not ho then ho={14,10}end;local hp=gG.."/IconTarget"local hq=gG.."/TargetPlayerColor"SetIcon(hp,ho)XGUIEng.SetMaterialColor(hq,0,255,255,255,0)SetIcon(gG.."/QuestTypeIcon",{16,12})local hr=Lib.NPC.Text.StartConversation;gH=Localize(hr)XGUIEng.SetText(gG.."/Caption","{center}"..gH)XGUIEng.ShowWidget(gG,1)else GUI_Interaction.DisplayQuestObjective_Orig_NPC(gB,gC)end else GUI_Interaction.DisplayQuestObjective_Orig_NPC(gB,gC)end end;GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC=GUI_Interaction.GetEntitiesOrTerritoryListForQuest;GUI_Interaction.GetEntitiesOrTerritoryListForQuest=function(hs,ht)local hu={}local hv=true;if ht==Objective.Distance then if hs.Objectives[1].Data[1]==-65565 then local hw=GetID(hs.Objectives[1].Data[3])table.insert(hu,hw)else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(hs,ht)end else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(hs,ht)end;return hu,hv end end;RegisterModule(Lib.NPC.Name)Lib.Promotion={Name="Promotion",Global={TechnologiesToResearch={}},Local={},Shared={TechnologyConfig={{"R_MilitarySword","UI_ObjectNames/BuySwordfighters",{9,7,0},0},{"R_MilitaryBow","UI_ObjectNames/BuyBowmen",{9,8,0},0}}}}CONST_REQUIREMENT_TOOLTIP_TYPE={}CONST_CONSUMED_GOODS_COUNTER={}Lib.Require("core/Core")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UITools")Lib.Require("module/promotion/Promotion_API")Lib.Require("module/promotion/Promotion_Config")Lib.Require("module/promotion/Promotion_Helper")Lib.Require("module/promotion/Promotion_Requirements")Lib.Register("module/promotion/Promotion")function Lib.Promotion.Global:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:OverrideKnightTitleChanged()self:OverwriteConsumedGoods()self:InitRelatedTechnologies()Lib.Promotion.Local=nil end;self.IsInstalled=true end;function Lib.Promotion.Global:OnSaveGameLoaded()end;function Lib.Promotion.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=Lib.Promotion.Requirements.InitKnightTitleTables;InitKnightTitleTables()for f=1,8 do ActivateNeedsAndRightsForPlayerByKnightTitle(f,0)end;self.LoadscreenClosed=true elseif ah==Report.KnightTitleChanged then self:UnlockRelatedTechnologies(arg[1],arg[2])local hx=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=hx or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif ah==Report.GoodsConsumed then local m=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(m,arg[2])end end;function Lib.Promotion.Global:RegisterConsumedGoods(V,gN)CONST_CONSUMED_GOODS_COUNTER[V]=CONST_CONSUMED_GOODS_COUNTER[V]or{}CONST_CONSUMED_GOODS_COUNTER[V][gN]=CONST_CONSUMED_GOODS_COUNTER[V][gN]or 0;CONST_CONSUMED_GOODS_COUNTER[V][gN]=CONST_CONSUMED_GOODS_COUNTER[V][gN]+1 end;function Lib.Promotion.Global:OverrideKnightTitleChanged()GameCallback_KnightTitleChanged_Orig_Promo=GameCallback_KnightTitleChanged;GameCallback_KnightTitleChanged=function(V,hy)GameCallback_KnightTitleChanged_Orig_Promo(V,hy)SendReport(Report.KnightTitleChanged,V,hy)SendReportToLocal(Report.KnightTitleChanged,V,hy)end end;function Lib.Promotion.Global:OverwriteConsumedGoods()GameCallback_ConsumeGood_Orig_Promo=GameCallback_ConsumeGood;GameCallback_ConsumeGood=function(hz,gN,hA)GameCallback_ConsumeGood_Orig_Promo(hz,gN,hA)SendReport(Report.GoodsConsumed,hz,gN,hA)SendReportToLocal(Report.GoodsConsumed,hz,gN,hA)end end;function Lib.Promotion.Global:InitRelatedTechnologies()self.TechnologiesToResearch[Technologies.R_MilitaryBow]={Technologies.R_BarracksArchers,Technologies.R_BowMaker}self.TechnologiesToResearch[Technologies.R_MilitarySword]={Technologies.R_Barracks,Technologies.R_SwordSmith}end;function Lib.Promotion.Global:UnlockRelatedTechnologies(V,hy)if NeedsAndRightsByKnightTitle[hy]then for g,h in pairs(NeedsAndRightsByKnightTitle[hy][4])do if self.TechnologiesToResearch[h]then for bA,di in pairs(self.TechnologiesToResearch[h])do if Logic.TechnologyGetState(V,di)==0 or Logic.TechnologyGetState(V,di)==2 then Logic.TechnologySetState(V,di,3)end end end end end end;function Lib.Promotion.Local:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:InitTexturePositions()self:OverwriteUpdateRequirements()self:OverwriteTooltips()Lib.Promotion.Global=nil end;self.IsInstalled=true end;function Lib.Promotion.Local:OnSaveGameLoaded()end;function Lib.Promotion.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=Lib.Promotion.Requirements.InitKnightTitleTables;InitKnightTitleTables()self.LoadscreenClosed=true elseif ah==Report.KnightTitleChanged then local hx=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=hx or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif ah==Report.GoodsConsumed then local m=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(m,arg[2])end end;function Lib.Promotion.Local:RegisterConsumedGoods(V,gN)CONST_CONSUMED_GOODS_COUNTER[V]=CONST_CONSUMED_GOODS_COUNTER[V]or{}CONST_CONSUMED_GOODS_COUNTER[V][gN]=CONST_CONSUMED_GOODS_COUNTER[V][gN]or 0;CONST_CONSUMED_GOODS_COUNTER[V][gN]=CONST_CONSUMED_GOODS_COUNTER[V][gN]+1 end;function Lib.Promotion.Local:InitTexturePositions()Lib.Promotion.Config:InitTexturePositions()Lib.Promotion.Config:InitTexturePositionsAddon()end;function Lib.Promotion.Local:OverwriteUpdateRequirements()GUI_Knight.UpdateRequirements=function()local hB=Lib.Promotion.Local.RequirementWidgets;local hC=1;local m=GUI.GetPlayerID()local hD=Logic.GetKnightTitle(m)local hE=hD+1;local d3=Logic.GetKnightID(m)local hF=Logic.GetEntityType(d3)XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitle","{center}"..GUI_Knight.GetTitleNameByTitleID(hF,hE))XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitleWhite","{center}"..GUI_Knight.GetTitleNameByTitleID(hF,hE))if KnightTitleRequirements[hE].Settlers~=nil then ChangeIcon(hB[hC].."/Icon",{5,16})local hG,hH,hI=DoesNeededNumberOfSettlersForKnightTitleExist(m,hE)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Settlers"hC=hC+1 end;if KnightTitleRequirements[hE].RichBuildings~=nil then ChangeIcon(hB[hC].."/Icon",{8,4})local hG,hH,hI=DoNeededNumberOfRichBuildingsForKnightTitleExist(m,hE)if hI==-1 then hI=Logic.GetNumberOfPlayerEntitiesInCategory(m,EntityCategories.CityBuilding)end;XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="RichBuildings"hC=hC+1 end;if KnightTitleRequirements[hE].Headquarters~=nil then ChangeIcon(hB[hC].."/Icon",{4,7})local hG,hH,hI=DoNeededSpecialBuildingUpgradeForKnightTitleExist(m,hE,EntityCategories.Headquarters)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH+1 .."/"..hI+1)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Headquarters"hC=hC+1 end;if KnightTitleRequirements[hE].Storehouse~=nil then ChangeIcon(hB[hC].."/Icon",{4,6})local hG,hH,hI=DoNeededSpecialBuildingUpgradeForKnightTitleExist(m,hE,EntityCategories.Storehouse)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH+1 .."/"..hI+1)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Storehouse"hC=hC+1 end;if KnightTitleRequirements[hE].Cathedrals~=nil then ChangeIcon(hB[hC].."/Icon",{4,5})local hG,hH,hI=DoNeededSpecialBuildingUpgradeForKnightTitleExist(m,hE,EntityCategories.Cathedrals)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH+1 .."/"..hI+1)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Cathedrals"hC=hC+1 end;if KnightTitleRequirements[hE].FullDecoratedBuildings~=nil then local hG,hH,hI=DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(m,hE)local hJ=KnightTitleRequirements[hE].FullDecoratedBuildings;ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Needs[Needs.Wealth])XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="FullDecoratedBuildings"hC=hC+1 end;if KnightTitleRequirements[hE].Reputation~=nil then ChangeIcon(hB[hC].."/Icon",{5,14})local hG,hH,hI=DoesNeededCityReputationForKnightTitleExist(m,hE)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Reputation"hC=hC+1 end;if KnightTitleRequirements[hE].Goods~=nil then for f=1,#KnightTitleRequirements[hE].Goods do local hK=KnightTitleRequirements[hE].Goods[f][1]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Goods[hK])local hG,hH,hI=DoesNeededNumberOfGoodTypesForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Goods"..f;hC=hC+1 end end;if KnightTitleRequirements[hE].Category~=nil then for f=1,#KnightTitleRequirements[hE].Category do local hL=KnightTitleRequirements[hE].Category[f][1]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.EntityCategories[hL])local hG,hH,hI=DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)local hM={Logic.GetEntityTypesInCategory(hL)}if Logic.IsEntityTypeInCategory(hM[1],EntityCategories.GC_Weapon_Supplier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Weapons"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.SiegeEngine)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="HeavyWeapons"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.Spouse)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Spouse"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.Worker)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Worker"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.Soldier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Soldiers"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.Leader)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Leader"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.Outpost)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Outposts"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.CattlePasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Cattle"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.SheepPasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Sheep"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.CityBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="CityBuilding"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.OuterRimBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="OuterRimBuilding"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.GrainField)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.BeeHive)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(hM[1],EntityCategories.AttackableBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Buildings"..f else CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="EntityCategoryDefault"..f end;hC=hC+1 end end;if KnightTitleRequirements[hE].Entities~=nil then for f=1,#KnightTitleRequirements[hE].Entities do local bh=KnightTitleRequirements[hE].Entities[f][1]local gl=Logic.GetEntityTypeName(bh)ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Entities[bh])local hG,hH,hI=DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)local hN="Entities"..f;if gl=="B_Beehive"or gl:find("GrainField")or gl:find("Pasture")then hN="FarmerBuilding"..f end;CONST_REQUIREMENT_TOOLTIP_TYPE[hC]=hN;hC=hC+1 end end;if KnightTitleRequirements[hE].Consume~=nil then for f=1,#KnightTitleRequirements[hE].Consume do local hK=KnightTitleRequirements[hE].Consume[f][1]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Goods[hK])local hG,hH,hI=DoNeededNumberOfConsumedGoodsForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Consume"..f;hC=hC+1 end end;if KnightTitleRequirements[hE].Products~=nil then for f=1,#KnightTitleRequirements[hE].Products do local hO=KnightTitleRequirements[hE].Products[f][1]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.GoodCategories[hO])local hG,hH,hI=DoNumberOfProductsInCategoryExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Products"..f;hC=hC+1 end end;if KnightTitleRequirements[hE].Buff~=nil then for f=1,#KnightTitleRequirements[hE].Buff do local hP=KnightTitleRequirements[hE].Buff[f]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Buffs[hP])local hG=DoNeededDiversityBuffForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","")if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Buff"..f;hC=hC+1 end end;if KnightTitleRequirements[hE].Custom~=nil then for f=1,#KnightTitleRequirements[hE].Custom do local gs;local bZ=table.copy(KnightTitleRequirements[hE].Custom[f][2])if type(bZ[3])=="string"then gs=bZ[3]bZ[3]=0 end;ChangeIcon(hB[hC].."/Icon",bZ,nil,gs)local hG,hH,hI=DoCustomFunctionForKnightTitleSucceed(m,hE,f)if hH and hI then XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)else XGUIEng.SetText(hB[hC].."/Amount","")end;if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="Custom"..f;hC=hC+1 end end;if KnightTitleRequirements[hE].DecoratedBuildings~=nil then for f=1,#KnightTitleRequirements[hE].DecoratedBuildings do local hK=KnightTitleRequirements[hE].DecoratedBuildings[f][1]ChangeIcon(hB[hC].."/Icon",g_TexturePositions.Goods[hK])local hG,hH,hI=DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(m,hE,f)XGUIEng.SetText(hB[hC].."/Amount","{center}"..hH.."/"..hI)if hG then XGUIEng.ShowWidget(hB[hC].."/Done",1)else XGUIEng.ShowWidget(hB[hC].."/Done",0)end;XGUIEng.ShowWidget(hB[hC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hC]="DecoratedBuildings"..f;hC=hC+1 end end;for f=hC,6 do XGUIEng.ShowWidget(hB[f],0)end end end;function Lib.Promotion.Local:OverwriteTooltips()GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(...)local cN=XGUIEng.GetCurrentWidgetID()for g,h in pairs(Lib.Promotion.Local.RequirementWidgets)do if h.."/Icon"==XGUIEng.GetWidgetPathByID(cN)then local aH=CONST_REQUIREMENT_TOOLTIP_TYPE[g]local hQ=tonumber(string.sub(aH,string.len(aH)))if hQ~=nil then aH=string.sub(aH,1,string.len(aH)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(aH,hQ)return end end;GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements(...)end;GUI_Knight.RewardTooltip=function(hR)Lib.Promotion.Local:RewardTooltipWrapped(hR)end;GUI_Knight.RequiredGoodTooltip=function()local aH=CONST_REQUIREMENT_TOOLTIP_TYPE[2]local hQ=tonumber(string.sub(aH,string.len(aH)))if hQ~=nil then aH=string.sub(aH,1,string.len(aH)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(aH,hQ)end;Lib.Promotion.Config:InitAddonText()end;function Lib.Promotion.Local:RewardTooltipWrapped(hS)local hT=GUI_Knight.NextRightsForTitle[hS]local hU=GetNameOfKeyInTable(Technologies,hT)local Name=string.gsub(hU,"R_","")local hV=""local bW="B_"..Name;if GetStringText("UI_ObjectNames/"..bW)==""then bW="U_"..Name end;if GetStringText("UI_ObjectNames/"..bW)==""then bW="Start"..Name end;if GetStringText("UI_ObjectNames/"..bW)==""then bW="R_"..Name end;hV=GetStringText("UI_ObjectNames/"..bW)SetTooltipNormal(Localize(hV),"")end;function Lib.Promotion.Local:RequirementTooltipWrapped(hW,hS)local m=GUI.GetPlayerID()local hX=Logic.GetKnightTitle(m)local bT=""local aK=""if hW=="Consume"or hW=="Goods"or hW=="DecoratedBuildings"then local hK=KnightTitleRequirements[hX+1][hW][hS][1]local hY=Logic.GetGoodTypeName(hK)local hZ=GetStringText("UI_ObjectNames/"..hY)if hZ==nil then hZ="Goods."..hY end;bT=hZ;aK=Lib.Promotion.Local.Description[hW].Text elseif hW=="Products"then local h_=Lib.Promotion.Local.GoodCategoryNames;local hL=KnightTitleRequirements[hX+1][hW][hS][1]local i0=Localize(h_[hL])if i0==nil then i0="ERROR: Name missng!"end;bT=i0;aK=Lib.Promotion.Local.Description[hW].Text elseif hW=="Entities"then local bh=KnightTitleRequirements[hX+1][hW][hS][1]local gl=Logic.GetEntityTypeName(bh)local ga=GetStringText("Names/"..gl)if ga==nil then ga="Entities."..gl end;bT=ga;aK=Lib.Promotion.Local.Description[hW].Text elseif hW=="Custom"then local i1=KnightTitleRequirements[hX+1].Custom[hS]bT=i1[3]aK=i1[4]elseif hW=="Buff"then local i2=Lib.Promotion.Local.BuffTypeNames;local i3=KnightTitleRequirements[hX+1][hW][hS]local i4=Localize(i2[i3])if i4==nil then i4="ERROR: Name missng!"end;bT=i4;aK=Lib.Promotion.Local.Description[hW].Text else bT=Lib.Promotion.Local.Description[hW].Title;aK=Lib.Promotion.Local.Description[hW].Text end;SetTooltipNormal(Localize(bT),Localize(aK),nil)end;function Lib.Promotion.Shared:UpdateInvisibleTechnologies()if not IsLocalScript()then return end;if TechnologiesNotShownForKnightTitle==nil then TechnologiesNotShownForKnightTitle={}TechnologiesNotShownForKnightTitle[Technologies.R_Nutrition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Clothes]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Hygiene]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Entertainment]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Wealth]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Prosperity]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Military]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Column]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Pavilion]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueDario]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueFamily]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueProduction]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueSettler]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Victory]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Barracks]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BarracksArchers]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BowMaker]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SwordSmith]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SiegeEngineWorkshop]=true end;if g_GameExtraNo>0 and Technologies.R_CallGeologist then TechnologiesNotShownForKnightTitle[Technologies.R_CallGeologist]=true end end;function Lib.Promotion.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])end end end end;RegisterModule(Lib.Promotion.Name)Lib.Quest={Name="Quest",Global={ExternalTriggerConditions={},ExternalTimerConditions={},ExternalDecisionConditions={},SegmentsOfQuest={}},Local={}}SegmentResult={Success=1,Failure=2,Ignore=3}Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/IsValidQuestName")Lib.Require("core/core")Lib.Require("module/quest/Quest_API")Lib.Register("module/quest/Quest")function Lib.Quest.Global:Initialize()if not self.IsInstalled then Quest_Loop=self.QuestLoop;self:OverrideKernelQuestApi()Lib.Quest.Local=nil end;self.IsInstalled=true end;function Lib.Quest.Global:OnSaveGameLoaded()end;function Lib.Quest.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ChatClosed then end end;function Lib.Quest.Global:CreateNestedQuest(dx)if not dx.Segments then return end;table.insert(dx,Goal_MapScriptFunction(self:GetCheckQuestSegmentsInlineGoal(),dx.Name))local Name=self:CreateSimpleQuest(dx)if Name~=nil then Quests[GetQuestID(Name)].Visible=false;self.SegmentsOfQuest[Name]={}for f=1,#dx.Segments,1 do self:CreateSegmentForSegmentedQuest(dx.Segments[f],Name,f)end end;return Name end;function Lib.Quest.Global:CreateSegmentForSegmentedQuest(dx,i5,bD)local Name=dx.Name or i5 .."@Segment"..bD;local i6=Quests[GetQuestID(i5)]local i7={Name=Name,Segments=dx.Segments,Result=dx.Result or SegmentResult.Success,Sender=dx.Sender or i6.SendingPlayer,Receiver=dx.Receiver or i6.ReceivingPlayer,Time=dx.Time,Suggestion=dx.Suggestion,Success=dx.Success,Failure=dx.Failure,Description=dx.Description,Loop=dx.Loop,Callback=dx.Callback}for f=1,#dx do table.insert(i7,dx[f])end;table.insert(i7,Trigger_OnQuestActive(i5,0))if i7.Segments then self:CreateNestedQuest(i7)else self:CreateSimpleQuest(i7)end;table.insert(self.SegmentsOfQuest[i5],i7)end;function Lib.Quest.Global:GetCheckQuestSegmentsInlineGoal()return function(i8)local i9=true;local ia=Lib.Quest.Global.SegmentsOfQuest[i8]for f=1,#ia,1 do local ib=Quests[GetQuestID(ia[f].Name)]if not ib then return false end;if ib.State==QuestState.Over and ib.Result~=QuestResult.Interrupted then if ia[f].Result==SegmentResult.Success and ib.Result~=QuestResult.Success then Lib.Quest.Global:AbortAllQuestSegments(i8)return false end;if ia[f].Result==SegmentResult.Failure and ib.Result~=QuestResult.Failure then Lib.Quest.Global:AbortAllQuestSegments(i8)return false end end;if ib.State~=QuestState.Over then i9=false end end;if i9 then return true end end end;function Lib.Quest.Global:AbortAllQuestSegments(i8)for f=1,#self.SegmentsOfQuest[i8],1 do local ic=self.SegmentsOfQuest[i8][f].Name;if IsValidQuest(i8)and Quests[GetQuestID(ic)].State~=QuestState.Over then StopQuest(ic,true)end end end;function Lib.Quest.Global:CreateSimpleQuest(dx)if not dx.Name then AutomaticQuestNameCounter=(AutomaticQuestNameCounter or 0)+1;dx.Name=string.format("AutoNamed_Quest_%d",AutomaticQuestNameCounter)end;error(IsValidQuestName(dx.Name),"Quest '%s': invalid questname! Contains forbidden characters!",tostring(dx.Name))local id={dx.Name,dx.Sender~=nil and dx.Sender or 1,dx.Receiver~=nil and dx.Receiver or 1,{},{},dx.Time~=nil and dx.Time or 0,{},{},dx.Callback,dx.Loop,dx.Visible==true or dx.Suggestion~=nil,dx.EndMessage==true or(dx.Failure~=nil or dx.Success~=nil),ConvertPlaceholders(type(dx.Description)=="table"and Localize(dx.Description)or dx.Description),ConvertPlaceholders(type(dx.Suggestion)=="table"and Localize(dx.Suggestion)or dx.Suggestion),ConvertPlaceholders(type(dx.Success)=="table"and Localize(dx.Success)or dx.Success),ConvertPlaceholders(type(dx.Failure)=="table"and Localize(dx.Failure)or dx.Failure)}if not self:QuestValidateQuestData(id)then DumpTable(id,"Quest")error(false,"ModuleQuest: Failed to vaidate quest data. Table has been copied to log.")end;for g,h in pairs(dx)do if tonumber(g)~=nil then if type(h)=="table"then if h.GetGoalTable then table.insert(id[4],h:GetGoalTable())local ie=#id[4]id[4][ie].Context=h;id[4][ie].FuncOverrideIcon=id[4][ie].Context.GetIcon;id[4][ie].FuncOverrideMsgKey=id[4][ie].Context.GetMsgKey elseif h.GetReprisalTable then table.insert(id[8],h:GetReprisalTable())elseif h.GetRewardTable then table.insert(id[7],h:GetRewardTable())else table.insert(id[5],h:GetTriggerTable())end end end end;if#id[4]==0 then table.insert(id[4],{Objective.Dummy})end;if#id[5]==0 then table.insert(id[5],{Triggers.Time,0})end;if id[11]then table.insert(id[5],self:GetFreeSpaceInlineTrigger())end;local ig,ft=QuestTemplate:New(unpack(id,1,16))ft.MsgTableOverride=dx.MSGKeyOverwrite;ft.IconOverride=dx.IconOverwrite;ft.QuestInfo=dx.InfoText;ft.Arguments=dx.Arguments~=nil and table.copy(dx.Arguments)or{}return dx.Name,Quests[0]end;function Lib.Quest.Global:QuestValidateQuestData(dx)return type(dx[1])=="string"and IsValidQuestName(dx[1])and Quests[GetQuestID(dx[1])]==nil and(type(dx[2])=="number"and dx[2]>=1 and dx[2]<=8)and(type(dx[3])=="number"and dx[3]>=1 and dx[3]<=8)and(type(dx[6])=="number"and dx[6]>=0)and(dx[9]~=nil and type(dx[9])=="function"or dx[9]==nil)and(dx[10]~=nil and type(dx[10])=="function"or dx[10]==nil)and type(dx[11])=="boolean"and type(dx[12])=="boolean"and(dx[13]~=nil and type(dx[13])=="string"or dx[13]==nil)and(dx[14]~=nil and type(dx[14])=="string"or dx[14]==nil)and(dx[15]~=nil and type(dx[15])=="string"or dx[15]==nil)and(dx[16]~=nil and type(dx[16])=="string"or dx[16]==nil)end;function Lib.Quest.Global:GetFreeSpaceInlineTrigger()return{Triggers.Custom2,{{},function(dx,hs)local ih=0;if Quests[0]>0 then for f=1,Quests[0],1 do if Quests[f].State==QuestState.Active and Quests[f].Visible==true then ih=ih+1 end end end;return ih<6 end}}end;function Lib.Quest.Global:OverrideKernelQuestApi()FailQuest_Orig_ModuleQuest=FailQuest;FailQuest=function(i8,ii)if Lib.Quest.Global.SegmentsOfQuest[i8]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[i8])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then FailQuest_Orig_ModuleQuest(h.Name,true)end end end;FailQuest_Orig_ModuleQuest(i8,ii)end;RestartQuest_Orig_ModuleQuest=RestartQuest;RestartQuest=function(i8,ii)if Lib.Quest.Global.SegmentsOfQuest[i8]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[i8])do if IsValidQuest(h.Name)then StopQuest_Orig_ModuleQuest(h.Name,true)RestartQuest_Orig_ModuleQuest(h.Name,true)end end end;RestartQuest_Orig_ModuleQuest(i8,ii)end;StartQuest_Orig_ModuleQuest=StartQuest;StartQuest=function(i8,ii)if Lib.Quest.Global.SegmentsOfQuest[i8]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[i8])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StartQuest_Orig_ModuleQuest(h.Name,true)end end end;StartQuest_Orig_ModuleQuest(i8,ii)end;StopQuest_Orig_ModuleQuest=StopQuest;StopQuest=function(i8,ii)if Lib.Quest.Global.SegmentsOfQuest[i8]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[i8])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;StopQuest_Orig_ModuleQuest(i8,ii)end;WinQuest_Orig_ModuleQuest=WinQuest;WinQuest=function(i8,ii)if Lib.Quest.Global.SegmentsOfQuest[i8]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[i8])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;WinQuest_Orig_ModuleQuest(i8,ii)end end;function Lib.Quest.Global.QuestLoop(ij)local self=JobQueue_GetParameter(ij)if self.LoopCallback~=nil then self:LoopCallback()end;if self.State==QuestState.NotTriggered then local ik=true;for f=1,#Lib.Quest.Global.ExternalTriggerConditions,1 do if not Lib.Quest.Global.ExternalTriggerConditions[f](self.ReceivingPlayer,self)then ik=false;break end end;if ik then for f=1,self.Triggers[0]do local aK=Lib.Quest.Global:SerializeBehavior(self.Triggers[f],Triggers.Custom2,4)if aK then log("Quest '"..self.Identifier.."' "..aK,true)end;ik=ik and self:IsTriggerActive(self.Triggers[f])end end;if ik then self:SetMsgKeyOverride()self:SetIconOverride()self:Trigger()end elseif self.State==QuestState.Active then for f=1,#Lib.Quest.Global.ExternalTimerConditions,1 do if not Lib.Quest.Global.ExternalTimerConditions[f](self.ReceivingPlayer,self)then self.StartTime=self.StartTime+1;break end end;local il=true;for f=1,#Lib.Quest.Global.ExternalDecisionConditions,1 do if not Lib.Quest.Global.ExternalDecisionConditions[f](self.ReceivingPlayer,self)then il=false;break end end;if il then local im=true;local io=false;for f=1,self.Objectives[0]do local aK=Lib.Quest.Global:SerializeBehavior(self.Objectives[f],Objective.Custom2,1)if aK then log("Quest '"..self.Identifier.."' "..aK,true)end;local ip=self:IsObjectiveCompleted(self.Objectives[f])if self.Objectives[f].Type==Objective.Deliver and ip==nil then if self.Objectives[f].Data[4]==nil then self.Objectives[f].Data[4]=0 end;if self.Objectives[f].Data[3]~=nil then self.Objectives[f].Data[4]=self.Objectives[f].Data[4]+1 end;local iq=self.StartTime;local ir=self.Duration;local is=self.Objectives[f].Data[4]local it=self.StartTime+self.Duration-self.Objectives[f].Data[4]if self.Duration>0 and self.StartTime+self.Duration+self.Objectives[f].Data[4]<Logic.GetTime()then ip=false end else if self.Duration>0 and self.StartTime+self.Duration<Logic.GetTime()then if ip==nil and(self.Objectives[f].Type==Objective.Protect or self.Objectives[f].Type==Objective.Dummy or self.Objectives[f].Type==Objective.NoChange)then ip=true elseif ip==nil or self.Objectives[f].Type==Objective.DummyFail then ip=false end end end;im=ip==true and im;io=ip==false or io end;if im then self:Success()elseif io then self:Fail()end end else if self.IsEventQuest==true then Logic.ExecuteInLuaLocalState("StopEventMusic(nil, "..self.ReceivingPlayer..")")end;if self.Result==QuestResult.Success then for f=1,self.Rewards[0]do local aK=Lib.Quest.Global:SerializeBehavior(self.Rewards[f],Reward.Custom,3)if aK then log("Quest '"..self.Identifier.."' "..aK,true)end;self:AddReward(self.Rewards[f])end elseif self.Result==QuestResult.Failure then for f=1,self.Reprisals[0]do local aK=Lib.Quest.Global:SerializeBehavior(self.Reprisals[f],Reprisal.Custom,3)if aK then log("Quest '"..self.Identifier.."' "..aK,true)end;self:AddReprisal(self.Reprisals[f])end end;if self.EndCallback~=nil then self:EndCallback()end;return true end end;function Lib.Quest.Global:SerializeBehavior(dx,iu,iv)local iw="Objective"local ix=Objective;if iv==2 then iw="Reprisal"ix=Reprisal elseif iv==3 then iw="Reward"ix=Reward elseif iv==4 then iw="Trigger"ix=Triggers end;local iy="Running {"local iz=GetNameOfKeyInTable(ix,dx.Type)if dx.Type==iu then local iA=dx.Data[1].FuncName;iy=iy..iw.."."..iz..""if iA==nil then return else iy=iy..", "..tostring(iA)end;if dx.Data and dx.Data[1].i47ya_6aghw_frxil and#dx.Data[1].i47ya_6aghw_frxil>0 then for c2=1,#dx.Data[1].i47ya_6aghw_frxil,1 do iy=iy..", ("..type(dx.Data[1].i47ya_6aghw_frxil[c2])..") "..tostring(dx.Data[1].i47ya_6aghw_frxil[c2])end end else iy=iy..iw.."."..iz..""if dx.Data then if type(dx.Data)=="table"then for c2=1,#dx.Data do iy=iy..", ("..type(dx.Data[c2])..") "..tostring(dx.Data[c2])end else iy=iy..", ("..type(dx.Data)..") "..tostring(dx.Data)end end end;iy=iy.."}"return iy end;function Lib.Quest.Global:FindQuestNames(iB,iC)local iD=FindQuestsByName(iB,iC)if#iD==0 then return{}end;local iE={}for f=1,#iD,1 do table.insert(iE,iD[f].Identifier)end;return iE end;function Lib.Quest.Global:ProcessChatInput(aJ,V,iF)if iF then local gb=Lib.Core.Debug:CommandTokenizer(aJ)for f=1,#gb,1 do if gb[f][1]=="fail"or gb[f][1]=="start"or gb[f][1]=="restart"or gb[f][1]=="stop"or gb[f][1]=="win"then local iD=self:FindQuestNames(gb[f][2],true)error(#iD==1,"Unable to find quest containing '"..gb[f][2].."'")if gb[f][1]=="fail"then FailQuest(iD[1])log("fail quest '"..iD[1].."'")elseif gb[f][1]=="restart"then RestartQuest(iD[1])log("restart quest '"..iD[1].."'")elseif gb[f][1]=="start"then StartQuest(iD[1])log("trigger quest '"..iD[1].."'")elseif gb[f][1]=="stop"then StopQuest(iD[1])log("interrupt quest '"..iD[1].."'")elseif gb[f][1]=="win"then WinQuest(iD[1])log("win quest '"..iD[1].."'")end end end end end;function Lib.Quest.Local:Initialize()if not self.IsInstalled then Lib.Quest.Global=nil end;self.IsInstalled=true end;function Lib.Quest.Local:OnSaveGameLoaded()end;function Lib.Quest.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2],arg[3])end end;function Lib.Quest.Local:ProcessChatInput(aJ,V,iF)if not iF or GUI.GetPlayerID()~=V then return end;ExecuteGlobal([[Lib.Quest.Global:ProcessChatInput("%s", %d, %s)]],aJ,V,tostring(iF==true))end;RegisterModule(Lib.Quest.Name)Lib.QuestJornal={Name="QuestJornal",Global={Journal={ID=0},CustomInputAllowed={},InputShown={},TextColor="{tooltip}"},Local={NextButton="/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/TutorialNextButton",NextButtonIcon={16,10}},Text={Next={de="Tagebuch anzeigen",en="Show Journal",fr="Afficher le journal"},Title={de="Tagebuch",en="Journal",fr="Journal"},Note={de="Notiz",en="Note",fr="Note"}}}Lib.Require("core/core")Lib.Require("module/information/Requester")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestJornal_API")Lib.Register("module/quest/QuestJornal")function Lib.QuestJornal.Global:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")Lib.QuestJornal.Local=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Global:OnSaveGameLoaded()end;function Lib.QuestJornal.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.TutorialNextClicked then self:DisplayJournal(arg[1],arg[2])elseif ah==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2])elseif ah==Report.QuestJournalPlayerNote then self.InputShown[arg[1]]=arg[2]SendReportToLocal(Report.QuestJournalPlayerNote,arg[1],arg[2],arg[3]==true)elseif ah==Report.QuestJournalDisplayed then SendReportToLocal(Report.QuestJournalDisplayed,arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestJornal.Global:DisplayJournal(i8,V)local iG=self.CustomInputAllowed[i8]==true;local iH=self:FormatJournalEntry(i8,V)SendReport(Report.QuestJournalDisplayed,V,i8,iH,iG)end;function Lib.QuestJornal.Global:CreateJournalEntry(aJ,iI,iJ)self.Journal.ID=self.Journal.ID+1;table.insert(self.Journal,{ID=self.Journal.ID,AlwaysVisible=iJ==true,Quests={},Rank=iI,aJ})return self.Journal.ID end;function Lib.QuestJornal.Global:GetJournalEntry(ah)for f=1,#self.Journal do if self.Journal[f].ID==ah then return self.Journal[f]end end end;function Lib.QuestJornal.Global:UpdateJournalEntry(ah,aJ,iI,iJ,iK)for f=1,#self.Journal do if self.Journal[f].ID==ah then self.Journal[f].AlwaysVisible=iJ==true;self.Journal[f].Deleted=iK==true;self.Journal[f].Rank=iI;self.Journal[f][1]=self.Journal[f][1]or aJ end end end;function Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(ah,hs,hg)for f=1,#self.Journal do if self.Journal[f].ID==ah then self.Journal[f].Quests[hs]=hg==true end end end;function Lib.QuestJornal.Global:FormatJournalEntry(i8,V)local ft=Quests[GetQuestID(i8)]if ft and ft.QuestNotes and ft.ReceivingPlayer==V then local iL=self:GetJournalEntriesSorted()local iM=false;local iN=false;local iy=""local aM=""for f=1,#iL,1 do if iL[f].AlwaysVisible or iL[f].Quests[i8]then if not iL[f].Deleted then local aK=ConvertPlaceholders(Localize(iL[f][1]))if iL[f].Rank==1 then aK="{scarlet}"..aK..self.TextColor;iM=true end;if iL[f].Rank==0 then if iM then iM=false;aK="{cr}----------{cr}{cr}"..aK end;iN=true end;if iL[f].Rank==-1 then if iN then iN=false;aM="{violet}"aK="{cr}----------{cr}{cr}"..aK end;aK=aM..aK..self.TextColor end;iy=iy..(iy~=""and"{cr}"or"")..aK end end end;return iy end end;function Lib.QuestJornal.Global:GetJournalEntriesSorted()local iL={}for f=1,#self.Journal,1 do table.insert(iL,self.Journal[f])end;table.sort(iL,function(ax,gt)return ax.Rank>gt.Rank end)return iL end;function Lib.QuestJornal.Global:ProcessChatInput(aJ,V)if self.InputShown[V]then if aJ and aJ~=""then local iO=self.InputShown[V]local iG=self.CustomInputAllowed[iO]==true;local _=self:CreateJournalEntry(aJ,-1,false)self:AssociateJournalEntryWithQuest(_,iO,true)local iH=self:FormatJournalEntry(iO,V)SendReport(Report.QuestJournalDisplayed,V,iO,iH,iG)end;self.InputShown[V]=nil end end;function Lib.QuestJornal.Local:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")self:OverrideUpdateVoiceMessage()self:OverrideTutorialNext()self:OverrideStringKeys()self:OverrideTimerButtons()Lib.QuestJornal.Global=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Local:OnSaveGameLoaded()end;function Lib.QuestJornal.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.QuestJournalPlayerNote then if arg[1]==GUI.GetPlayerID()and arg[3]then ShowTextInput(arg[1],false)end elseif ah==Report.QuestJournalDisplayed then if arg[1]==GUI.GetPlayerID()then self:DisplayQuestJournal(arg[2],arg[1],arg[3],arg[4])end end end;function Lib.QuestJornal.Local:DisplayQuestJournal(i8,V,iP,aI)if iP and GUI.GetPlayerID()==V then local bT=Localize(Lib.QuestJornal.Text.Title)local dk={PlayerID=V,Caption=bT,Content=ConvertPlaceholders(iP),QuestName=i8}if aI then dk.Button={Text=Localize{de="Notiz",en="Note",fr="Note"},Action=function(dx)SendReportToGlobal(Report.QuestJournalPlayerNote,dx.PlayerID,dx.QuestName,aI)end}end;Lib.Requester.Local:ShowTextWindow(dk)end end;function Lib.QuestJornal.Local:OverrideUpdateVoiceMessage()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal=GUI_Interaction.UpdateVoiceMessage;GUI_Interaction.UpdateVoiceMessage=function()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal()if not QuestLog.IsQuestLogShown()then if Lib.QuestJornal.Local:IsShowingJournalButton(g_Interaction.CurrentMessageQuestIndex)then XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,1)SetIcon(Lib.QuestJornal.Local.NextButton,Lib.QuestJornal.Local.NextButtonIcon)else XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,0)end end end end;function Lib.QuestJornal.Local:IsShowingJournalButton(ah)if not g_Interaction.CurrentMessageQuestIndex then return false end;local ft=Quests[ah]if type(ft)=="table"and ft.QuestNotes then return true end;return false end;function Lib.QuestJornal.Local:OverrideTimerButtons()GUI_Interaction.TimerButtonClicked_Orig_QuestJornal=GUI_Interaction.TimerButtonClicked;GUI_Interaction.TimerButtonClicked=function()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 and XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions/ToggleWhisperTarget")==1 then return end;GUI_Interaction.TimerButtonClicked_Orig_QuestJornal()end end;function Lib.QuestJornal.Local:OverrideTutorialNext()GUI_Interaction.TutorialNext_Orig_QuestJornal=GUI_Interaction.TutorialNext;GUI_Interaction.TutorialNext=function()if g_Interaction.CurrentMessageQuestIndex then local ig=g_Interaction.CurrentMessageQuestIndex;local ft=Quests[ig]SendReportToGlobal(Report.TutorialNextClicked,ft.Identifier,GUI.GetPlayerID())SendReport(Report.TutorialNextClicked,ft.Identifier,GUI.GetPlayerID())end end end;function Lib.QuestJornal.Local:OverrideStringKeys()AddStringText("UI_ObjectNames/TutorialNextButton",Lib.QuestJornal.Text.Next)end;RegisterModule(Lib.QuestJornal.Name)Lib.Sound={Name="Sound",Global={},Local={SoundBackup={}}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/sound/Sound_API")Lib.Register("module/sound/Sound")function Lib.Sound.Global:Initialize()if not self.IsInstalled then Lib.Sound.Local=nil end;self.IsInstalled=true end;function Lib.Sound.Global:OnSaveGameLoaded()end;function Lib.Sound.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:Initialize()if not self.IsInstalled then Lib.Sound.Global=nil end;self.IsInstalled=true end;function Lib.Sound.Local:OnSaveGameLoaded()end;function Lib.Sound.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:AdjustSound(iQ,iR,iS,iT,iU)self:SaveSound()if iQ then Sound.SetGlobalVolume(iQ)end;if iR then Sound.SetMusicVolume(iR)end;if iS then Sound.SetSpeechVolume(iS)end;if iT then Sound.SetFXSoundpointVolume(iT)Sound.SetFXAtmoVolume(iT)end;if iU then Sound.Set2DFXVolume(iU)Sound.SetFXVolume(iU)end end;function Lib.Sound.Local:SaveSound()if not self.SoundBackup.Saved then self.SoundBackup.Saved=true;self.SoundBackup.FXSP=Sound.GetFXSoundpointVolume()self.SoundBackup.FXAtmo=Sound.GetFXAtmoVolume()self.SoundBackup.FXVol=Sound.GetFXVolume()self.SoundBackup.Sound=Sound.GetGlobalVolume()self.SoundBackup.Music=Sound.GetMusicVolume()self.SoundBackup.Voice=Sound.GetSpeechVolume()self.SoundBackup.UI=Sound.Get2DFXVolume()end end;function Lib.Sound.Local:RestoreSound()if self.SoundBackup.Saved then Sound.SetFXSoundpointVolume(self.SoundBackup.FXSP)Sound.SetFXAtmoVolume(self.SoundBackup.FXAtmo)Sound.SetFXVolume(self.SoundBackup.FXVol)Sound.SetGlobalVolume(self.SoundBackup.Sound)Sound.SetMusicVolume(self.SoundBackup.Music)Sound.SetSpeechVolume(self.SoundBackup.Voice)Sound.Set2DFXVolume(self.SoundBackup.UI)self.SoundBackup={}end end;RegisterModule(Lib.Sound.Name)Lib.Warehouse={Name="Warehouse",CinematicEvents={},Global={OfferSequence=0,Warehouses={Job=0},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}},Local={Warehouses={},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}},Text={OfferTitle={{de="Keine Angebote",en="No Offers"},{de="%d %s kaufen%s",en="Purchase %d %s%s"},{de="%s anheuern",en="Hire %s"},{de="%s anheuern%s",en="Hire %s%s"},{de="%s kaufen%s",en="Purchase %s%s"}}}}Lib.Require("comfort/GetSiegeengineTypeByCartType")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/KeyOf")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("comfort/global/SendCart")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/io/IO")Lib.Require("module/ui/UIBuilding")Lib.Require("module/trade/Warehouse_API")Lib.Register("module/trade/Warehouse")function Lib.Warehouse.Global:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")self:OverwriteGameCallbacks()for f=1,8 do self.Inflation.Players[f]={}end;self.Warehouses.Job=RequestJob(function()Lib.Warehouse.Global:ControlWarehouse()end)Lib.Warehouse.Local=nil end;self.IsInstalled=true end;function Lib.Warehouse.Global:OnSaveGameLoaded()end;function Lib.Warehouse.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.WarehouseOfferClicked then self:PerformTrade(unpack(arg))SendReportToLocal(ah,unpack(arg))end end;function Lib.Warehouse.Global:CreateWarehouse(dx)local iV={ScriptName=dx.ScriptName,BuildingName=dx.ScriptName.."_Post",Costs=dx.Costs,Offers={}}table.insert(self.Warehouses,iV)local _=GetID(dx.ScriptName)local P,Q,R=Logic.EntityGetPos(_)local A=Logic.GetEntityOrientation(_)local m=Logic.EntityGetPlayer(_)local t=Logic.GetEntityType(_)DestroyEntity(iV.ScriptName)local bp=Logic.CreateEntity(Entities.I_X_TradePostConstructionSite,P,Q,A,m)Logic.SetEntityName(bp,iV.ScriptName)if t==Entities.B_TradePost then bp=ReplaceEntity(bp,Entities.XD_ScriptEntity)local cs=Logic.CreateEntity(Entities.B_TradePost,P,Q,A,m)Logic.SetEntityName(cs,iV.BuildingName)end;if dx.Costs then Logic.InteractiveObjectClearCosts(GetID(iV.ScriptName))if dx.Costs[1]then Logic.InteractiveObjectAddCosts(GetID(iV.ScriptName),dx.Costs[1],dx.Costs[2])end;if dx.Costs[3]then Logic.InteractiveObjectAddCosts(GetID(iV.ScriptName),dx.Costs[3],dx.Costs[4])end end;for f=1,#dx.Offers do if dx.Offers[f]then self:CreateOffer(iV.ScriptName,dx.Offers[f].Amount,dx.Offers[f].GoodType,dx.Offers[f].GoodAmount,dx.Offers[f].PaymentType,dx.Offers[f].BasePrice,dx.Offers[f].Refresh)end end;ExecuteLocal([[Lib.Warehouse.Local:InitTradeButtons("%s")]],iV.BuildingName)end;function Lib.Warehouse.Global:GetIndex(j)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==j then return f end end;return 0 end;function Lib.Warehouse.Global:CreateOffer(j,am,X,iW,iX,iY,iZ)local b5=self:GetIndex(j)if b5~=0 then local i_=am or 1;if KeyOf(X,Goods)==nil and KeyOf(X,Entities)~=nil and Logic.IsEntityTypeInCategory(X,EntityCategories.Military)==0 then i_=1 end;self.OfferSequence=self.OfferSequence+1;local _=self.OfferSequence;table.insert(self.Warehouses[b5].Offers,{ID=_,BuyLock=false,Active=true,Current=i_,Amount=i_,Timer=iZ or 3*60,Refresh=iZ or 3*60,GoodType=X,GoodAmount=iW or 9,PaymentType=iX or Goods.G_Gold,BasePrice=iY or 3})return _ end;return 0 end;function Lib.Warehouse.Global:RemoveOffer(j,ah)local b5=self:GetIndex(j)if b5~=0 then for f=#self.Warehouses[b5].Offers,1,-1 do if self.Warehouses[b5].Offers[f].ID==ah then table.remove(self.Warehouses[b5].Offers,f)break end end end end;function Lib.Warehouse.Global:ActivateOffer(j,ah,j0)local b5=self:GetIndex(j)if b5~=0 then for f=#self.Warehouses[b5].Offers,1,-1 do if self.Warehouses[b5].Offers[f].ID==ah then self.Warehouses[b5].Offers[f].Active=j0==true;break end end end end;function Lib.Warehouse.Global:GetOfferByID(j,ah)local j1,j2;local b5=self:GetIndex(j)if b5~=0 then for f=#self.Warehouses[b5].Offers,1,-1 do if self.Warehouses[b5].Offers[f].ID==ah then j1=self.Warehouses[b5].Offers[f]j2=f end end end;return j1,j2 end;function Lib.Warehouse.Global:GetActivOffers(j,j3)local j4={}local b5=self:GetIndex(j)if b5~=0 then for f=1,#self.Warehouses[b5].Offers do if(not j3 or#j4<6)and self.Warehouses[b5].Offers[f].Active then table.insert(j4,self.Warehouses[b5].Offers[f].ID)end end end;return j4 end;function Lib.Warehouse.Global:ChangeOfferAmount(j,ah,am)local b5=self:GetIndex(j)if b5~=0 then for f=#self.Warehouses[b5].Offers,1,-1 do if self.Warehouses[b5].Offers[f].ID==ah then local j5=self.Warehouses[b5].Offers[ah].Amount;self.Warehouses[b5].Offers[ah].Current=math.min(am,j5)break end end end end;function Lib.Warehouse.Global:GetInflation(V,X)return self.Inflation.Players[V][X]or 1.0 end;function Lib.Warehouse.Global:SetInflation(V,X,j6)self.Inflation.Players[V][X]=j6 or 1.0;ExecuteLocal([[Lib.Warehouse.Local.Inflation.Players[%d][%d] = %f]],V,X,j6 or 1.0)end;function Lib.Warehouse.Global:CalculateInflation(V,X)local d_=(self.Inflation.Players[V][X]or 1.0)+self.Inflation.Inc;d_=math.max(self.Inflation.Min,d_)d_=math.min(d_,self.Inflation.Max)return d_ end;function Lib.Warehouse.Global:PerformTrade(V,fZ,j6,j7,j8,iW,j9,iY)if KeyOf(j8,Goods)~=nil then SendCart(fZ.."_Post",V,j8,iW)elseif KeyOf(j8,Entities)~=nil then if Logic.IsEntityTypeInCategory(j8,EntityCategories.Military)==1 then local P,Q=Logic.GetBuildingApproachPosition(GetID(fZ.."_Post"))local A=Logic.GetEntityOrientation(GetID(fZ.."_Post"))-90;local _=Logic.CreateBattalionOnUnblockedLand(j8,P,Q,A,V)Logic.MoveSettler(_,P,Q,-1)else local P,Q=Logic.GetBuildingApproachPosition(GetID(fZ.."_Post"))Logic.HireEntertainer(j8,V,P,Q)end end;local ja=math.floor(iY*j6+0.5)AddGood(j9,-1*ja,V)ExecuteLocal([[GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 1, 1}, g_TexturePositions.Goods[%d])]],-1*ja,j9)self:UpdateOnPurchase(V,fZ,j7)SendReport(Report.WarehouseOfferBought,j8,iW,j9,ja)SendReportToLocal(Report.WarehouseOfferBought,j8,iW,j9,ja)end;function Lib.Warehouse.Global:UpdateOnPurchase(V,fZ,j7)local b5=self:GetIndex(fZ)if b5~=0 then local j1=self.Warehouses[b5].Offers[j7]self.Warehouses[b5].Offers[j7].Current=j1.Current-1;local jb=self:CalculateInflation(V,j1.GoodType)self:SetInflation(V,j1.GoodType,jb)end end;function Lib.Warehouse.Global:OverwriteGameCallbacks()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(V,a1)Lib.Warehouse.Global.Orig_GameCallback_OnBuildingConstructionComplete(V,a1)if Logic.GetEntityType(a1)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostConstructed(a1)end end;self.Orig_GameCallback_BuildingDestroyed=GameCallback_BuildingDestroyed;GameCallback_BuildingDestroyed=function(a1,V,jc)Lib.Warehouse.Global.Orig_GameCallback_BuildingDestroyed(a1,V,jc)if Logic.GetEntityType(a1)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostDestroyed(V,a1)end end end;function Lib.Warehouse.Global:OnTradepostConstructed(a1)local P,Q,R=Logic.EntityGetPos(a1)local bv,bp=Logic.GetEntitiesInArea(Entities.I_X_TradePostConstructionSite,P,Q,100,1)if bp~=0 then local aq=Logic.GetEntityName(bp)local b5=self:GetIndex(aq)if b5~=0 then Logic.SetEntityName(a1,self.Warehouses[b5].BuildingName)end end end;function Lib.Warehouse.Global:OnTradepostDestroyed(V,a1)local P,Q,R=Logic.EntityGetPos(a1)local A=Logic.GetEntityOrientation(a1)local aq=Logic.GetEntityName(a1)local b5=aq and self:GetIndex(aq:sub(1,aq:len()-5))or 0;if b5~=0 then local dk=self.Warehouses[b5]local _=ReplaceEntity(dk.ScriptName,Entities.I_X_TradePostConstructionSite)for f=1,8 do Logic.InteractiveObjectSetPlayerState(_,f,1)end end end;function Lib.Warehouse.Global:ControlWarehouse()for f=1,#self.Warehouses do if self.Warehouses[f]then for c2=1,#self.Warehouses[f].Offers do local j1=self.Warehouses[f].Offers[c2]if j1.Active and j1.Refresh>0 then if self.Warehouses[f].Offers[c2].Current<j1.Amount then self.Warehouses[f].Offers[c2].Timer=j1.Timer-1;if j1.Timer==0 then self.Warehouses[f].Offers[c2].Current=j1.Current+1;self.Warehouses[f].Offers[c2].Timer=j1.Refresh end end end end end end;local b6=table.tostring(self.Warehouses)ExecuteLocal([[Lib.Warehouse.Local.Warehouses = %s]],b6)end;function Lib.Warehouse.Local:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")for f=1,8 do self.Inflation.Players[f]={}end;Lib.Warehouse.Global=nil end;self.IsInstalled=true end;function Lib.Warehouse.Local:OnSaveGameLoaded()end;function Lib.Warehouse.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.WarehouseOfferClicked then if GUI.GetPlayerID()==arg[2]then local b5=self:GetIndex(arg[2])if self.Warehouses[b5]then self.Warehouses[b5].Offers[arg[4]].BuyLock=false end end end end;function Lib.Warehouse.Local:GetIndex(j)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==j then return f end end;return 0 end;function Lib.Warehouse.Local:GetPrice(V,X,iY)return math.floor((self.Inflation.Players[V][X]or 1.0)*iY+0.5)end;function Lib.Warehouse.Local:GetInflation(V,X)return self.Inflation.Players[V][X]or 1.0 end;function Lib.Warehouse.Local:GetOfferByID(j,ah)local j1,j2;local b5=self:GetIndex(j)if b5~=0 then for f=#self.Warehouses[b5].Offers,1,-1 do if self.Warehouses[b5].Offers[f].ID==ah then j1=self.Warehouses[b5].Offers[f]j2=f end end end;return j1,j2 end;function Lib.Warehouse.Local:GetActivOffers(j,j3)local j4={}local b5=self:GetIndex(j)if b5~=0 then for f=1,#self.Warehouses[b5].Offers do if(not j3 or#j4<6)and self.Warehouses[b5].Offers[f].Active then table.insert(j4,self.Warehouses[b5].Offers[f].ID)end end end;return j4 end;function Lib.Warehouse.Local:InitTradeButtons(fZ)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(1,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(1,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(1,bS,a1)end)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(2,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(2,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(2,bS,a1)end)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(3,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(3,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(3,bS,a1)end)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(4,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(4,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(4,bS,a1)end)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(5,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(5,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(5,bS,a1)end)AddBuildingButtonByEntity(fZ,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonAction(6,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonTooltip(6,bS,a1)end,function(bS,a1)Lib.Warehouse.Local:WarehouseButtonUpdate(6,bS,a1)end)end;function Lib.Warehouse.Local:WarehouseButtonAction(hR,bS,a1)local m=GUI.GetPlayerID()local aq=Logic.GetEntityName(a1)local fV,fW=string.find(aq,"_Post")aq=string.sub(aq,1,fV-1)local b5=self:GetIndex(aq)if b5==0 then return end;local j4=self:GetActivOffers(aq)local dk,j2=self:GetOfferByID(aq,j4[hR])if not dk then return end;if dk.BuyLock then return end;local jd=self:GetPrice(m,dk.GoodType,dk.BasePrice)local jb=self:GetInflation(m,dk.GoodType)if GetPlayerGoodsInSettlement(dk.PaymentType,m)<jd then return end;self.Warehouses[b5].Offers[j2].BuyLock=true;SendReportToGlobal(Report.WarehouseOfferClicked,m,aq,jb,j2,dk.GoodType,dk.GoodAmount,dk.PaymentType,dk.BasePrice)end;function Lib.Warehouse.Local:WarehouseButtonTooltip(hR,bS,a1)local m=GUI.GetPlayerID()local aq=Logic.GetEntityName(a1)local fV,fW=string.find(aq,"_Post")aq=string.sub(aq,1,fV-1)if XGUIEng.IsButtonDisabled(bS)==1 then SetTooltipCosts(ConvertPlaceholders(Localize(Lib.Warehouse.Text.OfferTitle[1])),"")return end;local b5=self:GetIndex(aq)if b5==0 then return end;local j4=self:GetActivOffers(aq)local dk,j2=self:GetOfferByID(aq,j4[hR])if not dk then return end;local jd=self:GetPrice(m,dk.GoodType,dk.BasePrice)local je=true;local jf=""local jg=""local hY=Logic.GetGoodTypeName(dk.GoodType)local gl=Logic.GetEntityTypeName(dk.GoodType)local jh=GetSiegeengineTypeByCartType(dk.GoodType)if hY~=nil and hY~=""then jf=GetStringText("UI_ObjectNames/"..hY)jg=GetStringText("UI_ObjectDescription/"..hY)else jf=GetStringText("UI_ObjectNames/HireEntertainer")jg=GetStringText("UI_ObjectDescription/HireEntertainer")if Logic.IsEntityTypeInCategory(dk.GoodType,EntityCategories.Soldier)==1 then jf=GetStringText("UI_ObjectNames/HireMercenaries")jg=GetStringText("UI_ObjectDescription/HireMercenaries")elseif jh or Logic.IsEntityTypeInCategory(dk.GoodType,EntityCategories.SiegeEngine)==1 then jf=GetStringText("Names/"..gl)local ji=Logic.GetEntityTypeName(jh)jg=GetStringText("UI_ObjectDescription/Abilities_"..ji)end end;local jj=""if dk.Amount>1 then jj=string.format(" (%d/%d)",dk.Current,dk.Amount)end;local jk=""if KeyOf(dk.GoodType,Goods)~=nil then jk=string.format(Localize(Lib.Warehouse.Text.OfferTitle[2]),dk.GoodAmount,jf,jj)elseif KeyOf(dk.GoodType,Entities)~=nil then if Logic.IsEntityTypeInCategory(dk.GoodType,EntityCategories.Military)==1 then jk=string.format(Localize(Lib.Warehouse.Text.OfferTitle[4]),jf,jj)elseif jh or Logic.IsEntityTypeInCategory(dk.GoodType,EntityCategories.SiegeEngine)==1 then jk=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),jf,jj)else jk=string.format(Localize(Lib.Warehouse.Text.OfferTitle[3]),jf)end end;SetTooltipCosts(jk,jg,nil,{dk.PaymentType,jd},je)end;function Lib.Warehouse.Local:WarehouseButtonUpdate(hR,bS,a1)local aq=Logic.GetEntityName(a1)local fV,fW=string.find(aq,"_Post")aq=string.sub(aq,1,fV-1)local b5=self:GetIndex(aq)if b5==0 then XGUIEng.ShowWidget(bS,0)return end;local j4=self:GetActivOffers(aq)local dk,j2=self:GetOfferByID(aq,j4[hR])if not dk or not dk.Active then XGUIEng.ShowWidget(bS,0)return end;if not dk.BuyLock and dk.Current>0 then XGUIEng.DisableButton(bS,0)else XGUIEng.DisableButton(bS,1)end;local gV=dk.GoodType;local bZ=g_TexturePositions.Goods[gV]or g_TexturePositions.Entities[gV]ChangeIcon(bS,bZ)end;RegisterModule(Lib.Warehouse.Name)Lib.UIBuilding={Name="UIBuilding",CinematicEvents={},Global={},Local={BuildingButtons={BindingCounter=0,Bindings={},Configuration={["BuyAmmunitionCart"]={TypeExclusion="^B_.*StoreHouse",OriginalPosition=nil,Bind=nil},["BuyBattallion"]={TypeExclusion="^B_[CB]a[sr][tr][la][ec]",OriginalPosition=nil,Bind=nil},["PlaceField"]={TypeExclusion="^B_.*[BFH][aei][erv][kme]",OriginalPosition=nil,Bind=nil},["StartFestival"]={TypeExclusion="^B_Marketplace",OriginalPosition=nil,Bind=nil},["StartTheatrePlay"]={TypeExclusion="^B_Theatre",OriginalPosition=nil,Bind=nil},["UpgradeTurret"]={TypeExclusion="^B_WallTurret",OriginalPosition=nil,Bind=nil},["BuyBatteringRamCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuyCatapultCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuySiegeTowerCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil}}}}}Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding_API")Lib.Register("module/ui/UIBuilding")function Lib.UIBuilding.Global:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")end;self.IsInstalled=true end;function Lib.UIBuilding.Global:OnSaveGameLoaded()end;function Lib.UIBuilding.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.StartUpgradeClicked then SendReportToLocal(ah,unpack(arg))elseif ah==Report.CancelUpgradeClicked then SendReportToLocal(ah,unpack(arg))elseif ah==Report.FestivalClicked then SendReportToLocal(ah,unpack(arg))elseif ah==Report.SermonClicked then SendReportToLocal(ah,unpack(arg))elseif ah==Report.TheatrePlayClicked then SendReportToLocal(ah,unpack(arg))end end;function Lib.UIBuilding.Local:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self:InitBackupPositions()self:OverrideOnSelectionChanged()self:OverrideBuyAmmunitionCart()self:OverrideBuyBattalion()self:OverrideBuySiegeEngineCart()self:OverridePlaceField()self:OverrideStartFestival()self:OverrideStartTheatrePlay()self:OverrideUpgradeTurret()self:OverrideUpgradeBuilding()self:OverrideStartSermon()end;self.IsInstalled=true end;function Lib.UIBuilding.Local:OnSaveGameLoaded()end;function Lib.UIBuilding.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UIBuilding.Local:OverrideOnSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.UIBuilding.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.UIBuilding.Local:UnbindButtons()Lib.UIBuilding.Local:BindButtons(GUI.GetSelectedEntity())end end;function Lib.UIBuilding.Local:OverrideBuyAmmunitionCart()self.Orig_BuyAmmunitionCartClicked=GUI_BuildingButtons.BuyAmmunitionCartClicked;GUI_BuildingButtons.BuyAmmunitionCartClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartClicked()end;jm.Action(gv,B)end;Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate=GUI_BuildingButtons.BuyAmmunitionCartUpdate;GUI_BuildingButtons.BuyAmmunitionCartUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then SetIcon(gv,{10,4})XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideBuyBattalion()self.Orig_BuyBattalionClicked=GUI_BuildingButtons.BuyBattalionClicked;GUI_BuildingButtons.BuyBattalionClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_BuyBattalionClicked()end;jm.Action(gv,B)end;self.Orig_BuyBattalionMouseOver=GUI_BuildingButtons.BuyBattalionMouseOver;GUI_BuildingButtons.BuyBattalionMouseOver=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm;if Lib.UIBuilding.Local.BuildingButtons.Configuration[jl]then jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind end;if not jm then return Lib.UIBuilding.Local.Orig_BuyBattalionMouseOver()end;jm.Tooltip(gv,B)end;self.Orig_BuyBattalionUpdate=GUI_BuildingButtons.BuyBattalionUpdate;GUI_BuildingButtons.BuyBattalionUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_BuyBattalionUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverridePlaceField()self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_PlaceFieldClicked()end;jm.Action(gv,B)end;self.Orig_PlaceFieldMouseOver=GUI_BuildingButtons.PlaceFieldMouseOver;GUI_BuildingButtons.PlaceFieldMouseOver=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_PlaceFieldMouseOver()end;jm.Tooltip(gv,B)end;self.Orig_PlaceFieldUpdate=GUI_BuildingButtons.PlaceFieldUpdate;GUI_BuildingButtons.PlaceFieldUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_PlaceFieldUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideStartFestival()self.Orig_StartKnightsPromotionCelebration=StartKnightsPromotionCelebration;StartKnightsPromotionCelebration=function(V,jn,jo)Lib.UIBuilding.Local.Orig_StartKnightsPromotionCelebration(V,jn,jo)SendReportToGlobal(Report.FestivalClicked,V,1)end;GUI_BuildingButtons.StartFestivalClicked=function(jp)local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then local m=GUI.GetPlayerID()local bt={Logic.GetFestivalCost(m,jp)}local jq,jr=AreCostsAffordable(bt)if B~=Logic.GetMarketplace(m)then return end;if jq==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartFestival(m,jp)StartEventMusic(MusicSystem.EventFestivalMusic,m)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightSong)GUI.AddBuff(Buffs.Buff_Festival)SendReportToGlobal(Report.FestivalClicked,m,0)else Message(jr)end;return end;jm.Action(gv,B)end;self.Orig_StartFestivalMouseOver=GUI_BuildingButtons.StartFestivalMouseOver;GUI_BuildingButtons.StartFestivalMouseOver=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_StartFestivalMouseOver()end;jm.Tooltip(gv,B)end;self.Orig_StartFestivalUpdate=GUI_BuildingButtons.StartFestivalUpdate;GUI_BuildingButtons.StartFestivalUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then SetIcon(gv,{4,15})XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_StartFestivalUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideStartTheatrePlay()GUI_BuildingButtons.StartTheatrePlayClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then local m=GUI.GetPlayerID()local hK=Logic.GetGoodTypeOnOutStockByIndex(B,0)local i_=Logic.GetMaxAmountOnStock(B)local bt={hK,i_}local jq,jr=AreCostsAffordable(bt)if Logic.CanStartTheatrePlay(B)==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartTheatrePlay(B)SendReportToGlobal(Report.TheatrePlayClicked,m)elseif jq==false then Message(jr)end;return end;jm.Action(gv,B)end;self.Orig_StartTheatrePlayMouseOver=GUI_BuildingButtons.StartTheatrePlayMouseOver;GUI_BuildingButtons.StartTheatrePlayMouseOver=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_StartTheatrePlayMouseOver()end;jm.Tooltip(gv,B)end;self.Orig_StartTheatrePlayUpdate=GUI_BuildingButtons.StartTheatrePlayUpdate;GUI_BuildingButtons.StartTheatrePlayUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then SetIcon(gv,{16,2})XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_StartTheatrePlayUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeTurret()self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_UpgradeTurretClicked()end;jm.Action(gv,B)end;self.Orig_UpgradeTurretMouseOver=GUI_BuildingButtons.UpgradeTurretMouseOver;GUI_BuildingButtons.UpgradeTurretMouseOver=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then return Lib.UIBuilding.Local.Orig_UpgradeTurretMouseOver()end;jm.Tooltip(gv,B)end;self.Orig_UpgradeTurretUpdate=GUI_BuildingButtons.UpgradeTurretUpdate;GUI_BuildingButtons.UpgradeTurretUpdate=function()local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind;if not jm then XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_UpgradeTurretUpdate()end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideBuySiegeEngineCart()self.Orig_BuySiegeEngineCartClicked=GUI_BuildingButtons.BuySiegeEngineCartClicked;GUI_BuildingButtons.BuySiegeEngineCartClicked=function(js)local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm;if jl=="BuyCatapultCart"or jl=="BuySiegeTowerCart"or jl=="BuyBatteringRamCart"then jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind end;if not jm then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartClicked(js)end;jm.Action(gv,B)end;self.Orig_BuySiegeEngineCartMouseOver=GUI_BuildingButtons.BuySiegeEngineCartMouseOver;GUI_BuildingButtons.BuySiegeEngineCartMouseOver=function(js,jt)local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm;if jl=="BuyCatapultCart"or jl=="BuySiegeTowerCart"or jl=="BuyBatteringRamCart"then jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind end;if not jm then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartMouseOver(js,jt)end;jm.Tooltip(gv,B)end;self.Orig_BuySiegeEngineCartUpdate=GUI_BuildingButtons.BuySiegeEngineCartUpdate;GUI_BuildingButtons.BuySiegeEngineCartUpdate=function(js)local gv=XGUIEng.GetCurrentWidgetID()local jl=XGUIEng.GetWidgetNameByID(gv)local B=GUI.GetSelectedEntity()local jm;if jl=="BuyCatapultCart"or jl=="BuySiegeTowerCart"or jl=="BuyBatteringRamCart"then jm=Lib.UIBuilding.Local.BuildingButtons.Configuration[jl].Bind end;if not jm then if jl=="BuyBatteringRamCart"then SetIcon(gv,{9,2})elseif jl=="BuySiegeTowerCart"then SetIcon(gv,{9,3})elseif jl=="BuyCatapultCart"then SetIcon(gv,{9,1})end;XGUIEng.ShowWidget(gv,1)XGUIEng.DisableButton(gv,0)return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartUpdate(js)end;jm.Update(gv,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeBuilding()GUI_BuildingButtons.UpgradeClicked=function()local gv=XGUIEng.GetCurrentWidgetID()local B=GUI.GetSelectedEntity()if Logic.CanCancelUpgradeBuilding(B)then Sound.FXPlay2DSound("ui\\menu_click")GUI.CancelBuildingUpgrade(B)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/BuildingButtons",1)SendReportToGlobal(Report.CancelUpgradeClickede,B,GUI.GetPlayerID())return end;local bt=GUI_BuildingButtons.GetUpgradeCosts()local jq,jr=AreCostsAffordable(bt)if jq==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.UpgradeBuilding(B,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightWisdom)if gv~=0 then SaveButtonPressed(gv)end;SendReportToGlobal(Report.StartUpgradeClicked,B,GUI.GetPlayerID())else Message(jr)end end end;function Lib.UIBuilding.Local:OverrideStartSermon()function GUI_BuildingButtons.StartSermonClicked()local m=GUI.GetPlayerID()if Logic.CanSermonBeActivated(m)then GUI.ActivateSermon(m)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightHealing)GUI.AddBuff(Buffs.Buff_Sermon)local ju=Logic.GetCathedral(m)local P,Q=Logic.GetEntityPosition(ju)local R=0;Sound.FXPlay3DSound("buildings\\building_start_sermon",P,Q,R)SendReportToGlobal(Report.SermonClicked,GUI.GetPlayerID())end end end;function Lib.UIBuilding.Local:InitBackupPositions()for g,h in pairs(self.BuildingButtons.Configuration)do local P,Q=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g)self.BuildingButtons.Configuration[g].OriginalPosition={P,Q}end end;function Lib.UIBuilding.Local:GetButtonsForOverwrite(ah,am)local jv={}local t=Logic.GetEntityType(ah)local g1=Logic.GetEntityTypeName(t)for g,h in pairs(self.BuildingButtons.Configuration)do if#jv==am then break end;if not g1:find(h.TypeExclusion)then table.insert(jv,g)end end;assert(#jv==am)table.sort(jv)return jv end;function Lib.UIBuilding.Local:AddButtonBinding(u,aX,aY,jw,jx,jy)if not self.BuildingButtons.Bindings[u]then self.BuildingButtons.Bindings[u]={}end;if#self.BuildingButtons.Bindings[u]<6 then self.BuildingButtons.BindingCounter=self.BuildingButtons.BindingCounter+1;table.insert(self.BuildingButtons.Bindings[u],{ID=self.BuildingButtons.BindingCounter,Position={aX,aY},Action=jw,Tooltip=jx,Update=jy})return self.BuildingButtons.BindingCounter end;return 0 end;function Lib.UIBuilding.Local:RemoveButtonBinding(u,ah)if not self.BuildingButtons.Bindings[u]then self.BuildingButtons.Bindings[u]={}end;for f=#self.BuildingButtons.Bindings[u],1,-1 do if self.BuildingButtons.Bindings[u][f].ID==ah then table.remove(self.BuildingButtons.Bindings[u],f)end end end;function Lib.UIBuilding.Local:BindButtons(ah)if ah==nil or ah==0 or Logic.IsBuilding(ah)==0 and not Logic.IsWall(ah)then return self:UnbindButtons()end;local Name=Logic.GetEntityName(ah)local t=Logic.GetEntityType(ah)local jz=self:GetButtonsForOverwrite(ah,6)local jA={}if self.BuildingButtons.Bindings[Name]and#self.BuildingButtons.Bindings[Name]>0 then for f=1,#self.BuildingButtons.Bindings[Name]do table.insert(jA,self.BuildingButtons.Bindings[Name][f])end end;if self.BuildingButtons.Bindings[t]and#self.BuildingButtons.Bindings[t]>0 then for f=1,#self.BuildingButtons.Bindings[t]do table.insert(jA,self.BuildingButtons.Bindings[t][f])end end;if self.BuildingButtons.Bindings[0]and#self.BuildingButtons.Bindings[0]>0 then for f=1,#self.BuildingButtons.Bindings[0]do table.insert(jA,self.BuildingButtons.Bindings[0][f])end end;for f=1,#jA do if f>6 then break end;local jB=jz[f]self.BuildingButtons.Configuration[jB].Bind=jA[f]XGUIEng.ShowWidget("/InGame/Root/Normal/BuildingButtons/"..jB,1)XGUIEng.DisableButton("/InGame/Root/Normal/BuildingButtons/"..jB,0)local fn=jA[f].Position[1]local fo=jA[f].Position[2]if not fn or not fo then local jC={15,296}fn=jC[1]+64*(f-1)fo=jC[2]end;XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..jB,fn,fo)end end;function Lib.UIBuilding.Local:UnbindButtons()for g,h in pairs(self.BuildingButtons.Configuration)do local z=self.BuildingButtons.Configuration[g].OriginalPosition;if z then XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g,z[1],z[2])end;self.BuildingButtons.Configuration[g].Bind=nil end end;RegisterModule(Lib.UIBuilding.Name)Lib.UIEffects={Name="UIEffects",CinematicEvents={},Global={CinematicEventID=0,CinematicEventStatus={},CinematicEventQueue={},TypewriterEventData={},TypewriterEventCounter=0},Local={CinematicEventStatus={},ChatOptionsWasShown=false,MessageLogWasShown=false,PauseScreenShown=false,NormalModeHidden=false}}CinematicEventTypes={}CinematicEventState={NotTriggered=0,Active=1,Concluded=2}Lib.Require("core/Core")Lib.Require("module/camera/Camera")Lib.Require("module/ui/UIEffects_API")Lib.Register("module/ui/UIEffects")function Lib.UIEffects.Global:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}self.CinematicEventQueue[f]={}end;RequestHiResJob(function()Lib.UIEffects.Global:ControlTypewriter()end)Lib.UIEffects.Local=nil end;self.IsInstalled=true end;function Lib.UIEffects.Global:OnSaveGameLoaded()end;function Lib.UIEffects.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1;DeactivateImageScreen(arg[2])ActivateNormalInterface(arg[2])elseif ah==Report.CinematicConcluded then if self.CinematicEventStatus[arg[2]][arg[1]]then self.CinematicEventStatus[arg[2]][arg[1]]=2 end;if#self.CinematicEventQueue[arg[2]]>0 then ActivateImageScreen(arg[2],"",0,0,0,255)DeactivateNormalInterface(arg[2])end end end;function Lib.UIEffects.Global:PushCinematicEventToQueue(V,u,j,dx)table.insert(self.CinematicEventQueue[V],{u,j,dx})end;function Lib.UIEffects.Global:LookUpCinematicInQueue(V)if#self.CinematicEventQueue[V]>0 then return self.CinematicEventQueue[V][1]end end;function Lib.UIEffects.Global:PopCinematicEventFromQueue(V)if#self.CinematicEventQueue[V]>0 then return table.remove(self.CinematicEventQueue[V],1)end end;function Lib.UIEffects.Global:GetNewCinematicEventID()self.CinematicEventID=self.CinematicEventID+1;return self.CinematicEventID end;function Lib.UIEffects.Global:GetCinematicEventStatus(jD)for f=1,8 do if self.CinematicEventStatus[f][jD]then return self.CinematicEventStatus[f][jD]end end;return 0 end;function Lib.UIEffects.Global:ActivateCinematicEvent(V)local _=self:GetNewCinematicEventID()SendReport(Report.CinematicActivated,_,V)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicActivated, %d, %d);
          if GUI.GetPlayerID() == %d then
            Lib.UIEffects.Local.SavingWasDisabled = Lib.Core.Save.SavingDisabled == true;
            DisableSaving(true);
          end]],_,V,V))return _ end;function Lib.UIEffects.Global:ConcludeCinematicEvent(ah,V)SendReport(Report.CinematicConcluded,ah,V)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicConcluded, %d, %d);
          if GUI.GetPlayerID() == %d then
            if not Lib.UIEffects.Local.SavingWasDisabled then
                DisableSaving(false);
            end
            Lib.UIEffects.Local.SavingWasDisabled = false;
          end]],ah,V,V))end;function Lib.UIEffects.Global:StartTypewriter(dx)self.TypewriterEventCounter=self.TypewriterEventCounter+1;local jE="CinematicEvent_Typewriter"..self.TypewriterEventCounter;dx.Name=jE;if not self.LoadscreenClosed or IsCinematicEventActive(dx.PlayerID)then Lib.UIEffects.Global:PushCinematicEventToQueue(dx.PlayerID,CinematicEventTypes.Typewriter,jE,dx)return dx.Name end;return self:PlayTypewriter(dx)end;function Lib.UIEffects.Global:PlayTypewriter(dx)local _=StartCinematicEvent(dx.Name,dx.PlayerID)dx.ID=_;dx.TextTokens=self:TokenizeText(dx)self.TypewriterEventData[dx.PlayerID]=dx;ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            ActivateImageScreen(GUI.GetPlayerID(), "%s", %d, %d, %d, %d)
            DeactivateNormalInterface(GUI.GetPlayerID())
            DeactivateBorderScroll(GUI.GetPlayerID(), %d)
            Input.CutsceneMode()
            GUI.ClearNotes()
        end
        ]],dx.PlayerID,dx.Image,dx.Color.R or 0,dx.Color.G or 0,dx.Color.B or 0,dx.Color.A or 255,dx.TargetEntity)SendReport(Report.TypewriterStarted,dx.PlayerID,dx.Name)SendReportToLocal(Report.TypewriterStarted,dx.PlayerID,dx.Name)return dx.Name end;function Lib.UIEffects.Global:FinishTypewriter(V)if self.TypewriterEventData[V]then local jF=table.copy(self.TypewriterEventData[V])local jG=self.TypewriterEventData[V].PlayerID;ExecuteLocal([[
            if GUI.GetPlayerID() == %d then
                ResetRenderDistance()
                DeactivateImageScreen(GUI.GetPlayerID())
                ActivateNormalInterface(GUI.GetPlayerID())
                ActivateBorderScroll(GUI.GetPlayerID())
                if ModuleGuiControl then
                    Lib.UITools.Widget:UpdateHiddenWidgets()
                end
                Input.GameMode()
                GUI.ClearNotes()
            end
        ]],V)SendReport(Report.TypewriterEnded,jG,jF.Name)SendReportToLocal(Report.TypewriterEnded,jG,jF.Name)self.TypewriterEventData[V]:Callback()FinishCinematicEvent(jF.Name,jG)self.TypewriterEventData[V]=nil end end;function Lib.UIEffects.Global:TokenizeText(dx)local jH={}local jI={}local aK=ConvertPlaceholders(Localize(dx.Text))aK=aK:gsub("%s+"," ")while true do local jJ,jK=aK:find("{")local jL,jM=aK:find("}")if not jJ or not jL then table.insert(jI,aK)break end;if jJ>1 then table.insert(jI,aK:sub(1,jJ-1))end;table.insert(jI,aK:sub(jJ,jM))aK=aK:sub(jM+1)end;local jN=false;for f=1,#jI,1 do if jI[f]:find("{")then local b5=#jH;if jN then jH[b5]=jH[b5]..jI[f]else table.insert(jH,b5+1,jI[f])end;jN=true else local b5=1;while b5<=#jI[f]do if string.byte(jI[f]:sub(b5,b5))==195 then table.insert(jH,jI[f]:sub(b5,b5+1))b5=b5+1 else table.insert(jH,jI[f]:sub(b5,b5))end;b5=b5+1 end;jN=false end end;return jH end;function Lib.UIEffects.Global:ControlTypewriter()for f=1,8 do if self.LoadscreenClosed and not IsCinematicEventActive(f)then local dl=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if dl and dl[1]==CinematicEventTypes.Typewriter then local dk=Lib.UIEffects.Global:PopCinematicEventFromQueue(f)self:PlayTypewriter(dk[3])end end end;for g,h in pairs(self.TypewriterEventData)do if self.TypewriterEventData[g].Delay>0 then self.TypewriterEventData[g].Delay=self.TypewriterEventData[g].Delay-1;ExecuteLocal([[if GUI.GetPlayerID() == %d then GUI.ClearNotes() end]],self.TypewriterEventData[g].PlayerID)end;if self.TypewriterEventData[g].Delay==0 then self.TypewriterEventData[g].Index=h.Index+h.CharSpeed;if h.Index>#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Index=#self.TypewriterEventData[g].TextTokens end;local b5=math.floor(h.Index+0.5)local aK=""for f=1,b5,1 do aK=aK..self.TypewriterEventData[g].TextTokens[f]end;ExecuteLocal([[
                if GUI.GetPlayerID() == %d then
                    GUI.ClearNotes()
                    GUI.AddNote("%s")
                end
                ]],self.TypewriterEventData[g].PlayerID,aK)if b5==#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Waittime=h.Waittime-1;if h.Waittime<=0 then self:FinishTypewriter(g)end end end end end;function Lib.UIEffects.Local:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}end;self:OverrideInterfaceUpdateForCinematicMode()self:OverrideInterfaceThroneroomForCinematicMode()Lib.UIEffects.Global=nil end;self.IsInstalled=true end;function Lib.UIEffects.Local:OnSaveGameLoaded()end;function Lib.UIEffects.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1 elseif ah==Report.CinematicConcluded then for f=1,8 do if self.CinematicEventStatus[f][arg[1]]then self.CinematicEventStatus[f][arg[1]]=2 end end end end;function Lib.UIEffects.Local:GetCinematicEventStatus(jD)for f=1,8 do if self.CinematicEventStatus[f][jD]then return self.CinematicEventStatus[f][jD]end end;return 0 end;function Lib.UIEffects.Local:OverrideInterfaceUpdateForCinematicMode()GameCallback_GameSpeedChanged_Orig_UIEffects=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(jO)if not Lib.UIEffects.Local.PauseScreenShown then GameCallback_GameSpeedChanged_Orig_UIEffects(jO)end end;MissionTimerUpdate_Orig_UIEffects=MissionTimerUpdate;MissionTimerUpdate=function()MissionTimerUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)end end;MissionGoodOrEntityCounterUpdate_Orig_UIEffects=MissionGoodOrEntityCounterUpdate;MissionGoodOrEntityCounterUpdate=function()MissionGoodOrEntityCounterUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)end end;MerchantButtonsUpdater_Orig_UIEffects=GUI_Merchant.ButtonsUpdater;GUI_Merchant.ButtonsUpdater=function()MerchantButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)end end;if GUI_Tradepost then TradepostButtonsUpdater_Orig_UIEffects=GUI_Tradepost.ButtonsUpdater;GUI_Tradepost.ButtonsUpdater=function()TradepostButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end end end end;function Lib.UIEffects.Local:OverrideInterfaceThroneroomForCinematicMode()GameCallback_Camera_StartButtonPressed=function(V)end;OnStartButtonPressed=function()GameCallback_Camera_StartButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_BackButtonPressed=function(V)end;OnBackButtonPressed=function()GameCallback_Camera_BackButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_SkipButtonPressed=function(V)end;OnSkipButtonPressed=function()GameCallback_Camera_SkipButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_ThroneRoomLeftClick=function(V)end;ThroneRoomLeftClick=function()GameCallback_Camera_ThroneRoomLeftClick(GUI.GetPlayerID())end;GameCallback_Camera_ThroneroomCameraControl=function(V)end;ThroneRoomCameraControl=function()GameCallback_Camera_ThroneroomCameraControl(GUI.GetPlayerID())end end;function Lib.UIEffects.Local:InterfaceActivateImageBackground(V,jP,jQ,_G,jR,jS)if V~=GUI.GetPlayerID()or self.PauseScreenShown then return end;self.PauseScreenShown=true;XGUIEng.PushPage("/InGame/Root/Normal/PauseScreen",false)XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",1)if jP and jP~=""then local dZ={GUI.GetScreenSize()}local e2,e3,e4,e5=0,0,1,1;if dZ[1]/dZ[2]<1.6 then e2=e2+e2/0.125;e4=e4-e4*0.125 end;XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,jP)XGUIEng.SetMaterialUV("/InGame/Root/Normal/PauseScreen",0,e2,e3,e4,e5)end;XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,jQ,_G,jR,jS)SendReportToGlobal(Report.ImageScreenShown,V)SendReport(Report.ImageScreenShown,V)end;function Lib.UIEffects.Local:InterfaceDeactivateImageBackground(V)if V~=GUI.GetPlayerID()or not self.PauseScreenShown then return end;self.PauseScreenShown=false;XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",0)XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,"")XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,40,40,40,180)XGUIEng.PopPage()SendReportToGlobal(Report.ImageScreenHidden,V)SendReport(Report.ImageScreenHidden,V)end;function Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(V)if GUI.GetPlayerID()~=V or self.NormalModeHidden then return end;self.NormalModeHidden=true;XGUIEng.PushPage("/InGame/Root/Normal/NotesWindow",false)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",0)XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)HideOtherMenus()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/AlignTopLeft/GameClock")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClockWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/ChatOptions/Background")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)self.ChatOptionsWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/MessageLog/Name")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)self.MessageLogWasShown=true end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end;SendReportToGlobal(Report.GameInterfaceHidden,GUI.GetPlayerID())SendReport(Report.GameInterfaceHidden,GUI.GetPlayerID())end;function Lib.UIEffects.Local:InterfaceActivateNormalInterface(V)if GUI.GetPlayerID()~=V or not self.NormalModeHidden then return end;self.NormalModeHidden=false;XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",1)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",1)XGUIEng.PopPage()if g_MissionTimerEndTime then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",1)end;if g_MissionGoodOrEntityCounterAmountToReach then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",1)end;if self.GameClockWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClockWasShown=false end;if self.ChatOptionsWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.ChatOptionsWasShown=false end;if self.MessageLogWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)self.MessageLogWasShown=false end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",1)end;SendReportToGlobal(Report.GameInterfaceShown,GUI.GetPlayerID())SendReport(Report.GameInterfaceShown,GUI.GetPlayerID())end;RegisterModule(Lib.UIEffects.Name)Lib.UITools={Name="UITools",Global={},Local={}}CONST_PLAYER_NAMES={}Lib.Require("core/Core")Lib.Require("module/ui/UITools_Player")Lib.Require("module/ui/UITools_Shortcut")Lib.Require("module/ui/UITools_Widget")Lib.Require("module/ui/UITools_Speed")Lib.Require("module/ui/UITools_API")Lib.Register("module/ui/UITools")function Lib.UITools.Global:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Local=nil;Lib.UITools.Player=nil;Lib.UITools.Shortcut=nil;Lib.UITools.Speed=nil;Lib.UITools.Widget=nil end;self.IsInstalled=true end;function Lib.UITools.Global:OnSaveGameLoaded()end;function Lib.UITools.Global:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true elseif ah==Report.UpdateTexturePosition then g_TexturePositions=g_TexturePositions or{}g_TexturePositions[arg[1]]=g_TexturePositions[arg[1]]or{}g_TexturePositions[arg[1]][arg[2]]={arg[3],arg[4],arg[5]}end end;function Lib.UITools.Local:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Shortcut:OverrideRegisterHotkey()Lib.UITools.Widget:OverrideMissionGoodCounter()Lib.UITools.Widget:OverrideUpdateClaimTerritory()Lib.UITools.Speed:InitForbidSpeedUp()self:PostTexturePositionsToGlobal()self:OverrideAfterBuildingPlacement()Lib.UITools.Global=nil end;self.IsInstalled=true end;function Lib.UITools.Local:OnSaveGameLoaded()Lib.UITools.Widget:UpdateHiddenWidgets()end;function Lib.UITools.Local:OnReportReceived(ah,...)if ah==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UITools.Local:OverrideAfterBuildingPlacement()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools=GameCallback_GUI_AfterBuildingPlacement;GameCallback_GUI_AfterBuildingPlacement=function()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools()local P,Q=GUI.Debug_GetMapPositionUnderMouse()RequestHiResJob(function()local jT={Logic.GetPlayerEntitiesInArea(GUI.GetPlayerID(),0,P,Q,50,16)}for f=2,jT[1]+1 do if jT[f]and jT[f]~=0 and Logic.IsBuilding(jT[f])==1 and Logic.IsConstructionComplete(jT[f])==0 then SendReportToGlobal(Report.BuildingPlaced,jT[f],Logic.EntityGetPlayer(jT[f]))SendReport(Report.BuildingPlaced,jT[f],Logic.EntityGetPlayer(jT[f]))end end end,P,Q)end end;function Lib.UITools.Local:PostTexturePositionsToGlobal()RequestJob(function()if Logic.GetTime()>1 then for g,h in pairs(g_TexturePositions)do for jU,jV in pairs(h)do local P,Q,R=jV[1]or 1,jV[2]or 1,jV[3]or 0;SendReportToGlobal(Report.UpdateTexturePosition,g,jU,P,Q,R)end end;return true end end)end;RegisterModule(Lib.UITools.Name)Lib.Core.Bugfix={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/GetDistance")Lib.Require("core/feature/Core_Text")Lib.Register("core/feature/Core_Bugfix")function Lib.Core.Bugfix:Initialize()if not IsLocalScript()then self:FixResourceSlotsInStorehouses()self:FixMiddleEuropeNpcBarracks()self:FixMerchantArrivedCheckpoints()self:FixDestroyAllPlayerUnits()self:FixBanditCampFireplace()end;if IsLocalScript()then self:FixInteractiveObjectClicked()self:FixBigCathedralName()self:FixClimateZoneForHouseMenu()self:FixAbilityInfoWhenHomeless()end end;function Lib.Core.Bugfix:OnSaveGameLoaded()end;function Lib.Core.Bugfix:OnReportReceived(ah,...)end;function Lib.Core.Bugfix:FixResourceSlotsInStorehouses()for f=1,8 do local cu=Logic.GetStoreHouse(f)if cu~=0 then Logic.AddGoodToStock(cu,Goods.G_Salt,0,true,true)Logic.AddGoodToStock(cu,Goods.G_Dye,0,true,true)end end end;function Lib.Core.Bugfix:FixMiddleEuropeNpcBarracks()GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(V,a1)GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix(V,a1)local bh=Logic.GetEntityType(a1)if bh==Entities.B_NPC_Barracks_ME then Logic.RespawnResourceSetMaxSpawn(a1,0.01)Logic.RespawnResourceSetMinSpawn(a1,0.01)end end;for g,h in pairs(Logic.GetEntitiesOfType(Entities.B_NPC_Barracks_ME))do Logic.RespawnResourceSetMaxSpawn(h,0.01)Logic.RespawnResourceSetMinSpawn(h,0.01)end end;function Lib.Core.Bugfix:FixMerchantArrivedCheckpoints()function QuestTemplate:IsMerchantArrived(hd)if hd.Data[3]~=nil then if hd.Data[3]==1 then if hd.Data[5].ID~=nil then hd.Data[3]=hd.Data[5].ID;DeleteQuestMerchantWithID(hd.Data[3])if MapCallback_DeliverCartSpawned then MapCallback_DeliverCartSpawned(self,hd.Data[3],hd.Data[1])end end elseif Logic.IsEntityDestroyed(hd.Data[3])then DeleteQuestMerchantWithID(hd.Data[3])hd.Data[3]=nil;hd.Data[5].ID=nil else local ag=hd.Data[6]and hd.Data[6]or self.SendingPlayer;local jW=Logic.GetStoreHouse(ag)local jX=Logic.GetStoreHouse(ag)local jY=Logic.GetStoreHouse(ag)local jZ=nil;if jW>0 then local P,Q=Logic.GetBuildingApproachPosition(jW)jZ=GetDistance(hd.Data[3],{X=P,Y=Q})<1000 end;if jX>0 then local P,Q=Logic.GetBuildingApproachPosition(jX)jZ=jZ or GetDistance(hd.Data[3],{X=P,Y=Q})<1000 end;if jY>0 then local P,Q=Logic.GetBuildingApproachPosition(jY)jZ=jZ or GetDistance(hd.Data[3],{X=P,Y=Q})<1000 end;return jZ end end;return false end end;function Lib.Core.Bugfix:FixInteractiveObjectClicked()GUI_Interaction.InteractiveObjectClicked=function()local gw=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local gh=g_Interaction.ActiveObjectsOnScreen[gw]if gh==nil or not Logic.InteractiveObjectGetAvailability(gh)then return end;local m=GUI.GetPlayerID()local bt={Logic.InteractiveObjectGetEffectiveCosts(gh,m)}local jr=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")local j_=true;if j_ and bt~=nil and bt[1]~=nil then if bt[1]==Goods.G_Gold then jr=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if bt[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(bt[1])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")j_=false end;j_=j_ and GetPlayerGoodsInSettlement(bt[1],m,false)>=bt[2]end;if j_ and bt~=nil and bt[3]~=nil then if bt[3]==Goods.G_Gold then jr=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if bt[3]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(bt[3])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")j_=false end;j_=j_ and GetPlayerGoodsInSettlement(bt[3],m,false)>=bt[4]end;if not j_ then Message(jr)return end;if not GUI_Interaction.InteractionClickOverride or not GUI_Interaction.InteractionClickOverride(gh)then Sound.FXPlay2DSound("ui\\menu_click")end;if not GUI_Interaction.InteractionSpeechFeedbackOverride or not GUI_Interaction.InteractionSpeechFeedbackOverride(gh)then GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)end;if not Mission_Callback_OverrideObjectInteraction or not Mission_Callback_OverrideObjectInteraction(gh,m,bt)then GUI.ExecuteObjectInteraction(gh,m)end end end;function Lib.Core.Bugfix:FixDestroyAllPlayerUnits()QuestTemplate.IsObjectiveCompleted_Orig_Core_Bugfix=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,hd)local he=hd.Type;if hd.Completed~=nil then return hd.Completed end;local hf=hd.Data;if he==Objective.DestroyAllPlayerUnits then local k0=GetPlayerEntities(hf,0)local k1={}for f=#k0,1,-1 do local t=Logic.GetEntityType(k0[f])if Logic.IsEntityInCategory(k0[f],EntityCategories.AttackableBuilding)==0 or Logic.IsEntityInCategory(k0[f],EntityCategories.Wall)==0 then if Logic.IsConstructionComplete(k0[f])==0 then table.insert(k1,k0[f])end end;local k2={Entities.XD_ScriptEntity,Entities.S_AIHomePosition,Entities.S_AIAreaDefinition}if table.contains(k2,t)then table.insert(k1,k0[f])end end;if#k0==0 or#k0-#k1==0 then hd.Completed=true end elseif he==Objective.Distance then hd.Completed=Lib.Core.Quest:IsQuestPositionReached(self,hd)else return self:IsObjectiveCompleted_Orig_Core_Bugfix(hd)end end end;function Lib.Core.Bugfix:FixBigCathedralName()AddStringText("Names/B_Cathedral_Big",{de="Dom",en="Cathedral",fr="Cathédrale"})end;Lib.Core.Bugfix.HouseMenuWidgetToCategory={["B_Castle_ME"]=EntityCategories.Headquarters,["B_Cathedral"]=EntityCategories.Cathedrals,["B_Cathedral_Big"]=EntityCategories.Cathedrals,["B_Outpost_ME"]=EntityCategories.Outpost}function Lib.Core.Bugfix:FixClimateZoneForHouseMenu()HouseMenuGetNextBuildingID=function(jl)local k3;local k4=0;local k5=false;local m=GUI.GetPlayerID()local hL=Lib.Core.Bugfix.HouseMenuWidgetToCategory[jl]jl=GetClimateEntityName(jl)if HouseMenu.Widget.CurrentBuilding~=jl then HouseMenu.Widget.CurrentBuilding=jl;HouseMenu.Widget.CurrentBuildingNumber=0 end;if hL~=nil then k3={Logic.GetPlayerEntitiesInCategory(m,hL)}else k3={Logic.GetBuildingsByPlayer(m)}end;for f=1,#k3 do local bh=Logic.GetEntityType(k3[f])local ga=Logic.GetEntityTypeName(bh)if hL~=nil or ga==jl then k4=f;if k4>HouseMenu.Widget.CurrentBuildingNumber then HouseMenu.Widget.CurrentBuildingNumber=k4;k5=true;break end end end;if k4~=0 then if not k5 then for f=1,#k3 do local bh=Logic.GetEntityType(k3[f])local ga=Logic.GetEntityTypeName(bh)if hL~=nil or ga==jl then HouseMenu.Widget.CurrentBuildingNumber=f;break end end end;return k3[HouseMenu.Widget.CurrentBuildingNumber]end;return nil end;HouseMenuSetIconsPart=function(k6,k7)local m=GUI.GetPlayerID()local k8={XGUIEng.ListSubWidgets(k6)}local k9={Logic.GetBuildingsByPlayer(m)}local jl,hL;for f=1,#k8 do jl=XGUIEng.GetWidgetNameByID(k8[f])hL=Lib.Core.Bugfix.HouseMenuWidgetToCategory[jl]local ka=Entities[jl]local jm=k6 .."/"..jl.."/Button"SetIcon(jm,g_TexturePositions.Entities[ka])local kb=0;local kc;if hL~=nil then kc={Logic.GetPlayerEntitiesInCategory(m,hL)}kb=#kc else for c2=1,#k9 do local bh=Logic.GetEntityType(k9[c2])local ga=Logic.GetEntityTypeName(bh)local kd=GetClimateEntityName(jl)if ga==kd then kb=kb+1 end end end;XGUIEng.DisableButton(jm,kb==0 and 1 or 0)local i_=k6 .."/"..jl.."/Amount"XGUIEng.SetText(i_,"{center}"..kb)local ke=k6 .."/"..jl.."/Stop"UpdateStopOverlay(ke,jl,kb)if jl==HouseMenu.Widget.CurrentBuilding then UpdateStopOverlay(HouseMenu.Widget.CurrentStop,HouseMenu.Widget.CurrentBuilding,kb)end end;HouseMenu.Counter=HouseMenu.Counter+1;if k7 or HouseMenu.Counter%20==0 then for c2=1,#k8 do local kf=XGUIEng.GetWidgetNameByID(k8[c2])local kg=k6 .."/"..kf.."/Button"kf=GetClimateEntityName(kf)XGUIEng.HighLightButton(kg,kf==HouseMenu.Widget.CurrentBuilding and 1 or 0)end end end end;function Lib.Core.Bugfix:FixAbilityInfoWhenHomeless()StartKnightVoiceForActionSpecialAbility=function(kh,ki)local m=GUI.GetPlayerID()local jW=Logic.GetStoreHouse(m)local hF=Logic.GetEntityType(Logic.GetKnightID(m))if kh==hF and jW~=0 and ActionAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(m,"Hint_SpecialAbilityAction",false,m,ki)ActionAbilityIsExplained=true end end;StartKnightVoiceForPermanentSpecialAbility=function(kh)local m=GUI.GetPlayerID()local jW=Logic.GetStoreHouse(m)local hF=Logic.GetEntityType(Logic.GetKnightID(m))if kh==hF and jW~=0 and PermanentAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(m,"Hint_SpecialAbilityPermanetly",false,m)PermanentAbilityIsExplained=true end end end;function Lib.Core.Bugfix:FixBanditCampFireplace()g_Outlaws.ReplaceCampType={}g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace01]=Entities.D_X_Fireplace01_Expired;g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace02]=Entities.D_X_Fireplace02_Expired;ActivateFireplaceforBanditPack=function(kj)local kk=Logic.EntityGetPlayer(kj)if g_Outlaws.Players[kk][kj].CampFire==nil then local kl,km=Logic.GetBuildingApproachPosition(kj)local dG,dH=Logic.GetEntityPosition(kj)local P=(kl-dG)*1.3+kl;local Q=(km-dH)*1.3+km;local kn=Entities.D_X_Fireplace01;if Logic.IsEntityInCategory(kj,EntityCategories.Storehouse)==1 then kn=Entities.D_X_Fireplace02 end;g_Outlaws.Players[kk][kj].CampFireType=kn;local ko=g_Outlaws.Players[kk][kj].ExtinguishedFire;Logic.DestroyEntity(ko)local kp=Logic.CreateEntityOnUnblockedLand(kn,P,Q,0,0)g_Outlaws.Players[kk][kj].CampFire=kp;g_Outlaws.Players[kk][kj].CampFirePos={X=P,Y=Q}return true end;return false end;DisableFireplaceforBanditPack=function(kj)local kk=Logic.EntityGetPlayer(kj)if g_Outlaws.Players[kk][kj].CampFire~=nil then local P=g_Outlaws.Players[kk][kj].CampFirePos.X;local Q=g_Outlaws.Players[kk][kj].CampFirePos.Y;local ko=g_Outlaws.Players[kk][kj].CampFire;Logic.DestroyEntity(ko)local kq=g_Outlaws.Players[kk][kj].CampFireType;local kn=g_Outlaws.ReplaceCampType[kq]local kp=Logic.CreateEntityOnUnblockedLand(kn,P,Q,0,0)g_Outlaws.Players[kk][kj].ExtinguishedFire=kp;g_Outlaws.Players[kk][kj].CampFire=nil end end end;Lib.Core.Chat={DebugInput={}}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Chat")function Lib.Core.Chat:Initialize()Report.ChatOpened=CreateReport("Event_ChatOpened")Report.ChatClosed=CreateReport("Event_ChatClosed")for f=1,8 do self.DebugInput[f]={}end end;function Lib.Core.Chat:OnSaveGameLoaded()end;function Lib.Core.Chat:OnReportReceived(ah,...)end;function Lib.Core.Chat:ShowTextInput(V,kr)if Lib.IsHistoryEdition and Framework.IsNetworkGame()then return end;if not GUI then ExecuteLocal([[Lib.Core.Chat:ShowTextInput(%d, %s)]],V,tostring(kr==true))return end;V=V or GUI.GetPlayerID()self:PrepareInputVariable(V)self:ShowInputBox(V,kr==true)end;function Lib.Core.Chat:ShowInputBox(V,ks)if GUI.GetPlayerID()~=V then return end;self.DebugInput[V]=ks==true;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()Input.ChatMode()XGUIEng.SetText("/InGame/Root/Normal/ChatInput/ChatInput","")XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",1)XGUIEng.SetFocus("/InGame/Root/Normal/ChatInput/ChatInput")SendReportToGlobal(Report.ChatOpened,V)SendReport(Report.ChatOpened,V)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;return true end)end;function Lib.Core.Chat:PrepareInputVariable(V)if not IsLocalScript()then return end;GUI_Chat.Abort_Orig_Core=GUI_Chat.Abort_Orig_Core or GUI_Chat.Abort;GUI_Chat.Confirm_Orig_Core=GUI_Chat.Confirm_Orig_Core or GUI_Chat.Confirm;GUI_Chat.Confirm=function()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",0)local kt=XGUIEng.GetText("/InGame/Root/Normal/ChatInput/ChatInput")local ku=Lib.Core.Chat.DebugInput[V]Lib.Core.Chat.ChatBoxInput=kt;Lib.Core.Chat:SendInputAsEvent(kt,ku)g_Chat.JustClosed=1;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(V,1)end;Input.GameMode()if kt:len()>0 and Framework.IsNetworkGame()and not ku then GUI.SendChatMessage(kt,V,g_Chat.CurrentMessageType,g_Chat.CurrentWhisperTarget)end end;if not Framework.IsNetworkGame()then GUI_Chat.Abort=function()end end end;function Lib.Core.Chat:SendInputAsEvent(aJ,ks)aJ=aJ==nil and""or aJ;local m=GUI.GetPlayerID()SendReportToGlobal(Report.ChatClosed,aJ or"<<<ES>>>",GUI.GetPlayerID(),ks==true)SendReport(Report.ChatClosed,aJ or"<<<ES>>>",GUI.GetPlayerID(),ks==true)self.DebugInput[m]=false end;function ShowTextInput(V,kr)Lib.Core.Chat:ShowTextInput(V,kr)end;API.ShowTextInput=ShowTextInput;Lib.Core.Debug={DisplayScriptErrors=false,CheckAtRun=false,TraceQuests=false,DevelopingCheats=false,DevelopingShell=false}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Chat")Lib.Register("core/feature/Core_Debug")function Lib.Core.Debug:Initialize()Report.DebugChatConfirmed=CreateReport("Event_DebugChatConfirmed")Report.DebugConfigChanged=CreateReport("Event_DebugConfigChanged")if IsLocalScript()then self:InitializeQsbDebugHotkeys()CreateReportReceiver(Report.ChatClosed,function(...)Lib.Core.Debug:ProcessDebugInput(...)end)end end;function Lib.Core.Debug:OnSaveGameLoaded()if IsLocalScript()then self:InitializeDebugWidgets()self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnReportReceived(ah,...)end;function Lib.Core.Debug:ActivateDebugMode(kv,kw,kx,ky,kz)if IsLocalScript()then return end;self.DisplayScriptErrors=kv==true;self.CheckAtRun=kw==true;self.DevelopingCheats=kx==true;self.DevelopingShell=ky==true;self.TraceQuests=kz==true;SendReport(Report.DebugConfigChanged,self.DisplayScriptErrors,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)ExecuteLocal([[
            Lib.Core.Debug.DisplayScriptErrors = %s;
            Lib.Core.Debug.CheckAtRun          = %s;
            Lib.Core.Debug.DevelopingCheats    = %s;
            Lib.Core.Debug.DevelopingShell     = %s;
            Lib.Core.Debug.TraceQuests         = %s;

            SendReport(
                Report.DebugConfigChanged,
                Lib.Core.Debug.DisplayScriptErrors,
                Lib.Core.Debug.CheckAtRun,
                Lib.Core.Debug.DevelopingCheats,
                Lib.Core.Debug.DevelopingShell,
                Lib.Core.Debug.TraceQuests
            );
            Lib.Core.Debug:InitializeDebugWidgets();
        ]],tostring(self.DisplayScriptErrors),tostring(self.CheckAtRun),tostring(self.DevelopingCheats),tostring(self.DevelopingShell),tostring(self.TraceQuests))end;function Lib.Core.Debug:InitializeDebugWidgets()if Network.IsNATReady~=nil and Framework.IsNetworkGame()then return end;if self.DevelopingCheats then KeyBindings_EnableDebugMode(1)KeyBindings_EnableDebugMode(2)KeyBindings_EnableDebugMode(3)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClock=true else KeyBindings_EnableDebugMode(0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClock=false end end;function Lib.Core.Debug:InitializeQsbDebugHotkeys()if Framework.IsNetworkGame()then return end;Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.ModifierAlt+Keys.R,"Lib.Core.Debug:ProcessDebugShortcut('RestartMap')",30,false)Input.KeyBindDown(Keys.ModifierShift+Keys.OemPipe,"Lib.Core.Debug:ProcessDebugShortcut('Terminal')",30,false)end;function Lib.Core.Debug:ProcessDebugShortcut(u,kA)if self.DevelopingCheats then if u=="RestartMap"then Framework.RestartMap()elseif u=="Terminal"then ShowTextInput(GUI.GetPlayerID(),true)end end end;function Lib.Core.Debug:ProcessDebugInput(aI,V,kB)if kB then if aI:lower():find("^restartmap")then self:ProcessDebugShortcut("RestartMap")elseif aI:lower():find("^clear")then GUI.ClearNotes()elseif aI:lower():find("^version")then GUI.AddStaticNote("Version: "..Lib.Loader.Version)elseif aI:find("^> ")then GUI.SendScriptCommand(aI:sub(3),true)elseif aI:find("^>> ")then GUI.SendScriptCommand(string.format("Logic.ExecuteInLuaLocalState(\"%s\")",aI:sub(4)),true)elseif aI:find("^< ")then GUI.SendScriptCommand(string.format([[Script.Load("%s")]],aI:sub(3)))elseif aI:find("^<< ")then Script.Load(aI:sub(4))end end end;function Lib.Core.Debug:CommandTokenizer(aI)local gb={}if aI==nil then return gb end;local kC={aI}local kD={}local fV,fW=string.find(aI,"%s+&&%s+")if fV then kC={}while fV do local kE=string.sub(aI,1,fV-1)table.insert(kC,kE)aI=string.sub(aI,fW+1)fV,fW=string.find(aI,"%s+&&%s+")end;if string.len(aI)>0 then table.insert(kC,aI)end end;for f=1,#kC,1 do fV,fW=string.find(kC[f],"%s+&%s+")if fV then local kF=""while fV do local kE=string.sub(kC[f],1,fV-1)table.insert(kD,kF..kE)if string.find(kE," ")then kF=string.sub(kE,1,string.find(kE," ")-1).." "end;kC[f]=string.sub(kC[f],fW+1)fV,fW=string.find(kC[f],"%s+&%s+")end;if string.len(kC[f])>0 then table.insert(kD,kF..kC[f])end else table.insert(kD,kC[f])end end;for f=1,#kD,1 do local kG={}fV,fW=string.find(kD[f],"%s+")if fV then while fV do local kE=string.sub(kD[f],1,fV-1)table.insert(kG,kE)kD[f]=string.sub(kD[f],fW+1)fV,fW=string.find(kD[f],"%s+")end;table.insert(kG,kD[f])else table.insert(kG,kD[f])end;table.insert(gb,kG)end;return gb end;function ActivateDebugMode(kv,kw,kx,ky,kz)Lib.Core.Debug:ActivateDebugMode(kv,kw,kx,ky,kz)end;API.ActivateDebugMode=ActivateDebugMode;Lib.Core.Job={EventJobMappingID=0,EventJobMapping={},EventJobs={},SecondsSinceGameStart=0,LastTimeStamp=0}Lib.Register("core/feature/Core_Job")function Lib.Core.Job:Initialize()self:StartJobs()end;function Lib.Core.Job:OnSaveGameLoaded()end;function Lib.Core.Job:OnReportReceived(ah,...)end;function Lib.Core.Job:StartJobs()self:CreateEventJob(Events.LOGIC_EVENT_EVERY_TURN,function()Lib.Core.Job:RealtimeController()end)end;function Lib.Core.Job:CreateEventJob(u,kH,...)self.EventJobMappingID=self.EventJobMappingID+1;local _=Trigger.RequestTrigger(u,"","LiberticaCore_Job_EventJobExecutor",1,{},{self.EventJobMappingID})self.EventJobs[_]={_,true,kH,arg}self.EventJobMapping[self.EventJobMappingID]=_;return _ end;function Lib.Core.Job:EventJobExecutor(kI)local _=self.EventJobMapping[kI]if _ and self.EventJobs[_]and self.EventJobs[_][2]then local kJ=self.EventJobs[_][4]if self.EventJobs[_][3](unpack(kJ))then self.EventJobs[_][2]=false end end end;function Lib.Core.Job:RealtimeController()if not self.LastTimeStamp then self.LastTimeStamp=math.floor(Framework.TimeGetTime())end;local kK=math.floor(Framework.TimeGetTime())if self.LastTimeStamp~=kK then self.LastTimeStamp=kK;self.SecondsSinceGameStart=self.SecondsSinceGameStart+1 end end;function LiberticaCore_Job_EventJobExecutor(kI)Lib.Core.Job:EventJobExecutor(kI)end;function RequestJobByEventType(kL,kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return Lib.Core.Job:CreateEventJob(kL,kH,...)end;API.StartJobByEventType=RequestJobByEventType;function RequestJob(kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,kM,...)end;API.StartJob=RequestJob;StartSimpleJob=RequestJob;StartSimpleJobEx=RequestJob;function RequestHiResJob(kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,kM,...)end;API.StartHiResJob=RequestHiResJob;StartSimpleHiResJob=RequestHiResJob;StartSimpleHiResJobEx=RequestHiResJob;function RequestDelay(kN,kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return RequestJob(function(kO,kP,kQ,kR)if kO+kP<=Logic.GetTime()then kQ(unpack(kR or{}))return true end end,Logic.GetTime(),kN,kH,{...})end;API.StartDelay=RequestDelay;function RequestHiResDelay(kN,kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return RequestHiResJob(function(kO,kP,kQ,kR)if kO+kP<=Logic.GetCurrentTurn()then kQ(unpack(kR or{}))return true end end,Logic.GetTime(),kN,kH,{...})end;API.StartHiResDelay=RequestHiResDelay;function RequestRealTimeDelay(kN,kH,...)local kM=_G[kH]or kH;assert(type(kM)=="function","Function does not exist!")return RequestHiResJob(function(kO,kP,kQ,kR)if Lib.Core.Job.SecondsSinceGameStart>=kO+kP then kQ(unpack(kR or{}))return true end end,Lib.Core.Job.SecondsSinceGameStart,kN,kH,{...})end;API.StartRealTimeDelay=RequestRealTimeDelay;function StopJob(kS)if Lib.Core.Job.EventJobs[kS]then Trigger.UnrequestTrigger(Lib.Core.Job.EventJobs[kS][1])Lib.Core.Job.EventJobs[kS]=nil;return end;EndJob(kS)end;API.EndJob=StopJob;function IsJobRunning(kS)if Lib.Core.Job.EventJobs[kS]then return Lib.Core.Job.EventJobs[kS][2]==true end;return JobIsRunning(kS)end;API.JobIsRunning=IsJobRunning;function ResumeJob(kS)if Lib.Core.Job.EventJobs[kS]then if Lib.Core.Job.EventJobs[kS][2]~=true then Lib.Core.Job.EventJobs[kS][2]=true end;return end;assert(false,"Failed to resume job.")end;API.ResumeJob=ResumeJob;function YieldJob(kS)if Lib.Core.Job.EventJobs[kS]then if Lib.Core.Job.EventJobs[kS][2]==true then Lib.Core.Job.EventJobs[kS][2]=false end;return end;assert(false,"Failed to yield job.")end;API.YieldJob=YieldJob;function GetSecondsRealTime()return Lib.Core.Job.SecondsSinceGameStart end;API.GetSecondsRealTime=GetSecondsRealTime;Lib.Core.LuaExtension={}Lib.Require("comfort/CopyTable")Lib.Require("comfort/SerializeTable")Lib.Register("core/feature/Core_LuaExtension")function Lib.Core.LuaExtension:Initialize()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnSaveGameLoaded()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnReportReceived(ah,...)end;function Lib.Core.LuaExtension:OverrideTable()table.compare=function(kT,kU,kV)assert(type(kT)=="table")assert(type(kU)=="table")kV=kV or function(kT,kU)return tostring(kT)<tostring(kU)end;assert(type(kV)=="function")return kV(kT,kU)end;table.equals=function(kT,kU)assert(type(kT)=="table")assert(type(kU)=="table")local kV=function(kT,kU)return table.tostring(kT)<table.tostring(kU)end;assert(type(kV)=="function")return kV(kT,kU)end;table.contains=function(kW,fW)assert(type(kW)=="table")for g,h in pairs(kW)do if h==fW then return true end end;return false end;table.length=function(kW)return#kW end;table.size=function(kW)local gu=0;for g,h in pairs(kW)do if g~="n"or g=="n"and type(h)~="number"then gu=gu+1 end end;return gu end;table.isEmpty=function(kW)return table.size(kW)==0 end;table.copy=function(kT,kU)kU=kU or{}assert(type(kT)=="table")assert(type(kU)=="table")return CopyTable(kT,kU)end;table.invert=function(kT)assert(type(kT)=="table")local kU={}for f=table.length(kT),1,-1 do table.insert(kU,kT[f])end;return kU end;table.push=function(kW,fW)assert(type(kW)=="table")table.insert(kW,1,fW)end;table.pop=function(kW)assert(type(kW)=="table")return table.remove(kW,1)end;table.tostring=function(kW)return SerializeTable(kW)end end;function Lib.Core.LuaExtension:OverrideString()string.contains=function(self,fV)return self:find(fV)~=nil end;string.indexOf=function(self,fV)return self:find(fV)end;string.slice=function(self,kX)kX=kX or"%s"local kW={}if self then for kY in self:gmatch("([^"..kX.."]+)")do table.insert(kW,kY)end end;return kW end;string.join=function(self,...)local fV=""local kZ={self,...}for f=1,#kZ do if type(kZ[f])=="table"then fV=fV..string.join(unpack(kZ[f]))else fV=fV..tostring(kZ[f])end end;return fV end;string.replace=function(self,k_,l0)local fV,gu=self:gsub(k_,l0,1)return fV end;string.replaceAll=function(self,k_,l0)local fV,gu=self:gsub(k_,l0)return fV end end;function Lib.Core.LuaExtension:OverrideMath()math.lerp=function(fV,gu,fW)local l1=(gu-fV)/fW;return l1>1 and 1 or l1 end;math.qmod=function(ax,gt)return ax-math.floor(ax/gt)*gt end end;Lib.Core.Quest={QuestCounter=0,Text={ActivateBuff={Pattern={de="BONUS AKTIVIEREN{cr}{cr}%s",en="ACTIVATE BUFF{cr}{cr}%s",fr="ACTIVER BONUS{cr}{cr}%s"},BuffsVanilla={["Buff_Spice"]={de="Salz",en="Salt",fr="Sel"},["Buff_Colour"]={de="Farben",en="Color",fr="Couleurs"},["Buff_Entertainers"]={de="Entertainer",en="Entertainer",fr="Artistes"},["Buff_FoodDiversity"]={de="Vielfältige Nahrung",en="Food diversity",fr="Diversité alimentaire"},["Buff_ClothesDiversity"]={de="Vielfältige Kleidung",en="Clothes diversity",fr="Diversité vestimentaire"},["Buff_HygieneDiversity"]={de="Vielfältige Reinigung",en="Hygiene diversity",fr="Diversité hygiénique"},["Buff_EntertainmentDiversity"]={de="Vielfältige Unterhaltung",en="Entertainment diversity",fr="Diversité des dievertissements"},["Buff_Sermon"]={de="Predigt",en="Sermon",fr="Sermon"},["Buff_Festival"]={de="Fest",en="Festival",fr="Festival"},["Buff_ExtraPayment"]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},["Buff_HighTaxes"]={de="Hohe Steuern",en="High taxes",fr="Hautes taxes"},["Buff_NoPayment"]={de="Kein Sold",en="No payment",fr="Aucun paiement"},["Buff_NoTaxes"]={de="Keine Steuern",en="No taxes",fr="Aucune taxes"}},BuffsEx1={["Buff_Gems"]={de="Edelsteine",en="Gems",fr="Gemmes"},["Buff_MusicalInstrument"]={de="Musikinstrumente",en="Musical instruments",fr="Instruments musicaux"},["Buff_Olibanum"]={de="Weihrauch",en="Olibanum",fr="Encens"}}},SoldierCount={Pattern={de="SOLDATENANZAHL {cr}Partei: %s{cr}{cr}%s %d",en="SOLDIER COUNT {cr}Faction: %s{cr}{cr}%s %d",fr="NOMBRE DE SOLDATS {cr}Faction: %s{cr}{cr}%s %d"},Relation={["true"]={de="Weniger als ",en="Less than ",fr="Moins de"},["false"]={de="Mindestens ",en="At least ",fr="Au moins"}}},Festivals={Pattern={de="FESTE FEIERN {cr}{cr}Partei: %s{cr}{cr}Anzahl: %d",en="HOLD PARTIES {cr}{cr}Faction: %s{cr}{cr}Amount: %d",fr="FESTIVITÉS {cr}{cr}Faction: %s{cr}{cr}Nombre : %d"}}}}CONST_EFFECT_NAME_TO_ID={}CONST_INITIALIZED_OBJECTS={}CONST_REFILL_AMOUNT={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/ToBoolean")Lib.Require("comfort/GetHealth")Lib.Require("comfort/CopyTable")Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/SendCart")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Quest")function SaveCustomVariable(j,aE)Lib.Core.Quest:SetCustomVariable(j,aE)end;function ObtainCustomVariable(j,l2)local l3=Lib.CustomVariable[j]if not l3 and l2 then l3=l2 end;return l3 end;function Lib.Core.Quest:Initialize()Report.CustomValueChanged=CreateReport("Event_CustomValueChanged")Report.QuestFailure=CreateReport("Event_QuestFailure")Report.QuestInterrupt=CreateReport("Event_QuestInterrupt")Report.QuestReset=CreateReport("Event_QuestReset")Report.QuestSuccess=CreateReport("Event_QuestSuccess")Report.QuestTrigger=CreateReport("Event_QuestTrigger")if not IsLocalScript()then self:OverrideQuestSystemGlobal()self:OverrideQuestMarkers()self:OverwriteGeologistRefill()end;if IsLocalScript()then self:OverrideDisplayQuestObjective()end end;function Lib.Core.Quest:OnSaveGameLoaded()end;function Lib.Core.Quest:OnReportReceived(ah,...)end;function Lib.Core.Quest:OverrideQuestMarkers()QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then DestroyQuestMarker(self.Objectives[f].Data[2])end end end end;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then ShowQuestMarker(self.Objectives[f].Data[2])end end end end;function ShowQuestMarker(s)local cM=GetID(s)local P,Q=Logic.GetEntityPosition(cM)local l4=EGL_Effects.E_Questmarker_low;if Logic.IsBuilding(cM)==1 then l4=EGL_Effects.E_Questmarker end;DestroyQuestMarker(s)Questmarkers[cM]=Logic.CreateEffect(l4,P,Q,0)end;function DestroyQuestMarker(s)local cM=GetID(s)if Questmarkers[cM]~=nil then Logic.DestroyEffect(Questmarkers[cM])Questmarkers[cM]=nil end end end;function Lib.Core.Quest:OverrideDisplayQuestObjective()GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(gB,gC)local ft,gE=GUI_Interaction.GetPotentialSubQuestAndType(gB)if gE==Objective.Distance then if ft.Objectives[1].Data[1]==-65566 then ft.Objectives[1].Data[1]=Logic.GetKnightID(ft.ReceivingPlayer)end end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core(gB,gC)end end;function Lib.Core.Quest:IsQuestPositionReached(hs,l5)local l6=GetID(l5.Data[1])if l6==-65566 then l5.Data[1]=Logic.GetKnightID(hs.ReceivingPlayer)l6=l5.Data[1]end;local l7=GetID(l5.Data[2])l5.Data[3]=l5.Data[3]or 2500;if not(Logic.IsEntityDestroyed(l6)or Logic.IsEntityDestroyed(l7))then if Logic.GetDistanceBetweenEntities(l6,l7)<=l5.Data[3]then DestroyQuestMarker(l7)return true end else DestroyQuestMarker(l7)return false end end;function Lib.Core.Quest:OverwriteGeologistRefill()if Framework.GetGameExtraNo()>=1 then GameCallback_OnGeologistRefill_Orig_Lib_Core=GameCallback_OnGeologistRefill;GameCallback_OnGeologistRefill=function(V,l8,l9)GameCallback_OnGeologistRefill_Orig_Lib_Core(V,l8,l9)if CONST_REFILL_AMOUNT[l8]then local la=CONST_REFILL_AMOUNT[l8]local lb=la+math.random(1,math.floor(la*0.2+0.5))Logic.SetResourceDoodadGoodAmount(l8,lb)if lb>0 then if Logic.GetResourceDoodadGoodType(l8)==Goods.G_Iron then Logic.SetModel(l8,Models.Doodads_D_SE_ResourceIron)else Logic.SetModel(l8,Models.R_ResorceStone_Scaffold)end end end end end end;function Lib.Core.Quest:TriggerEntityKilledCallbacks(s,lc)local ld=GetID(s)local le=GetID(lc or 0)if le==0 or ld==0 or Logic.GetEntityHealth(ld)>0 then return end;local P,Q,R=Logic.EntityGetPos(ld)local lf=Logic.EntityGetPlayer(ld)local lg=Logic.GetEntityType(ld)local lh=Logic.EntityGetPlayer(le)local li=Logic.GetEntityType(le)GameCallback_EntityKilled(ld,lf,le,lh,lg,li)Logic.ExecuteInLuaLocalState(string.format("GameCallback_Feedback_EntityKilled(%d, %d, %d, %d,%d, %d, %f, %f)",ld,lf,le,lh,lg,li,P,Q))end;function Lib.Core.Quest:GetCustomVariable(j)return Lib.CustomVariable[j]end;function Lib.Core.Quest:SetCustomVariable(j,aE)self:UpdateCustomVariable(j,aE)local l3=tostring(aE)if type(aE)~="number"then l3=[["]]..l3 ..[["]]end;if not GUI then ExecuteLocal([[Lib.Core.Quest:UpdateCustomVariable("%s", %s)]],j,l3)end end;function Lib.Core.Quest:UpdateCustomVariable(j,aE)if Lib.CustomVariable[j]then local lj=Lib.CustomVariable[j]Lib.CustomVariable[j]=aE;SendReport(Report.CustomValueChanged,j,lj,aE)else Lib.CustomVariable[j]=aE;SendReport(Report.CustomValueChanged,j,nil,aE)end end;function InteractiveObjectActivate(fZ,bd)bd=bd or 0;if GUI or not IsExisting(fZ)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(fZ),f,bd)end end;API.InteractiveObjectActivate=InteractiveObjectActivate;function InteractiveObjectDeactivate(fZ)if GUI or not IsExisting(fZ)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(fZ),f,2)end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Lib.Core.Quest:OverrideQuestSystemGlobal()QuestTemplate.Trigger_Orig_QSB_Core=QuestTemplate.Trigger;QuestTemplate.Trigger=function(hs)QuestTemplate.Trigger_Orig_QSB_Core(hs)local ig=GetQuestID(hs.Identifier)for f=1,hs.Objectives[0]do if hs.Objectives[f].Type==Objective.Custom2 and hs.Objectives[f].Data[1].SetDescriptionOverwrite then local lk=hs.Objectives[f].Data[1]:SetDescriptionOverwrite(hs)Lib.Core.Quest:ChangeCustomQuestCaptionText(lk,hs)break end end;SendReport(Report.QuestTrigger,ig)SendReportToLocal(Report.QuestTrigger,ig)end;QuestTemplate.Interrupt_Orig_QSB_Core=QuestTemplate.Interrupt;QuestTemplate.Interrupt=function(hs)hs:Interrupt_Orig_QSB_Core()local ig=GetQuestID(hs.Identifier)for f=1,hs.Objectives[0]do if hs.Objectives[f].Type==Objective.Custom2 and hs.Objectives[f].Data[1].Interrupt then hs.Objectives[f].Data[1]:Interrupt(hs,f)end end;for f=1,hs.Triggers[0]do if hs.Triggers[f].Type==Triggers.Custom2 and hs.Triggers[f].Data[1].Interrupt then hs.Triggers[f].Data[1]:Interrupt(hs,f)end end;SendReport(Report.QuestInterrupt,ig)SendReportToLocal(Report.QuestInterrupt,ig)end;QuestTemplate.Fail_Orig_QSB_Core=QuestTemplate.Fail;QuestTemplate.Fail=function(hs)hs:Fail_Orig_QSB_Core()local ig=GetQuestID(hs.Identifier)SendReport(Report.QuestFailure,ig)SendReportToLocal(Report.QuestFailure,ig)end;QuestTemplate.Success_Orig_QSB_Core=QuestTemplate.Success;QuestTemplate.Success=function(hs)hs:Success_Orig_QSB_Core()local ig=GetQuestID(hs.Identifier)SendReport(Report.QuestSuccess,ig)SendReportToLocal(Report.QuestSuccess,ig)end end;function Lib.Core.Quest:ChangeCustomQuestCaptionText(aJ,hs)if hs and hs.Visible then hs.QuestDescription=aJ;ExecuteLocal([[
            XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/BGDeco",0)
            local identifier = "%s"
            for i=1, Quests[0] do
                if Quests[i].Identifier == identifier then
                    local text = Quests[i].QuestDescription
                    XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/Text", "%s")
                    break
                end
            end
        ]],hs.Identifier,aJ)end end;function SetResourceAmount(s,ll,gZ)if GUI or not IsExisting(s)then return end;assert(type(ll)=="number")assert(type(gZ)=="number")local B=GetID(s)if IsExisting(B)and Logic.GetResourceDoodadGoodType(B)~=0 then if Logic.GetResourceDoodadGoodAmount(B)==0 then B=ReplaceEntity(B,Logic.GetEntityType(B))end;Logic.SetResourceDoodadGoodAmount(B,ll)CONST_REFILL_AMOUNT[B]=gZ end end;function SetCustomBehaviorText(i8,aJ)local ig=GetQuestID(i8)local ft=Quests[ig]assert(ft~=nil,"Quest '"..i8 .."' not found!")Lib.Core.Quest:ChangeCustomQuestCaptionText(aJ,ft)end;API.SetCustomBehaviorText=SetCustomBehaviorText;function RestartQuest(i8,ii)local ig=GetQuestID(i8)local ft=Quests[ig]if ft then if not ii then Logic.DEBUG_AddNote("restart quest "..i8)end;if ft.Objectives then local lm=ft.Objectives;for f=1,lm[0]do local hd=lm[f]hd.Completed=nil;local he=hd.Type;if he==Objective.Deliver then local hf=hd.Data;hf[3]=nil;hf[4]=nil;hf[5]=nil;hf[9]=nil elseif g_GameExtraNo and g_GameExtraNo>=1 and he==Objective.Refill then hd.Data[2]=nil elseif he==Objective.Protect or he==Objective.Object then local hf=hd.Data;for c2=1,hf[0],1 do hf[-c2]=nil end elseif he==Objective.DestroyEntities and hd.Data[1]==2 and hd.DestroyTypeAmount then hd.Data[3]=hd.DestroyTypeAmount elseif he==Objective.DestroyEntities and hd.Data[1]==3 then hd.Data[4]=nil;hd.Data[5]=nil elseif he==Objective.Distance then if hd.Data[1]==-65565 then hd.Data[4].NpcInstance=nil end elseif he==Objective.Custom2 and hd.Data[1].Reset then hd.Data[1]:Reset(ft,f)end end end;local function ln(lo,lp)local ft=ft;local lq=ft[lo]if lq then for f=1,lq[0]do local lr=lq[f]if lr.Type==lp then local ls=lr.Data[1]if ls and ls.Reset then ls:Reset(ft,f)end end end end end;ln("Triggers",Triggers.Custom2)ln("Rewards",Reward.Custom)ln("Reprisals",Reprisal.Custom)ft.Result=nil;local lt=ft.State;ft.State=QuestState.NotTriggered;ExecuteLocal("LocalScriptCallback_OnQuestStatusChanged(%d)",ft.Index)if lt==QuestState.Over then ft.Job=Trigger.RequestTrigger(Events.LOGIC_EVENT_EVERY_SECOND,"","Quest_Loop",1,0,{ft.QueueID})end;SendReport(Report.QuestReset,ig)SendReportToLocal(Report.QuestReset,ig)end;return ig,ft end;API.RestartQuest=RestartQuest;function FailQuest(i8,ii)local ig=GetQuestID(i8)local ft=Quests[ig]if ft then if not ii then Logic.DEBUG_AddNote("fail quest "..i8)end;ft:RemoveQuestMarkers()ft:Fail()end end;API.FailQuest=FailQuest;function StartQuest(i8,ii)local ig=GetQuestID(i8)local ft=Quests[ig]if ft then if not ii then Logic.DEBUG_AddNote("start quest "..i8)end;ft:SetMsgKeyOverride()ft:SetIconOverride()ft:Trigger()end end;API.StartQuest=StartQuest;function StopQuest(i8,ii)local ig=GetQuestID(i8)local ft=Quests[ig]if ft then if not ii then Logic.DEBUG_AddNote("interrupt quest "..i8)end;ft:RemoveQuestMarkers()ft:Interrupt(-1)end end;API.StopQuest=StopQuest;function WinQuest(i8,ii)local ig=GetQuestID(i8)local ft=Quests[ig]if ft then if not ii then Logic.DEBUG_AddNote("win quest "..i8)end;ft:RemoveQuestMarkers()ft:Success()end end;API.WinQuest=WinQuest;Lib.Core.Report={ScriptEventRegister={},ScriptEventListener={},ScriptCommandRegister={},ScriptCommandSequence=0}Report={}Command={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_Report")function Lib.Core.Report:Initialize()if not IsLocalScript()then self:OverrideSoldierPayment()Lib.Core.Report:CreateScriptCommand("Cmd_SendReportToGlobal",function(ah,...)SendReport(ah,...)end)end end;function Lib.Core.Report:OnSaveGameLoaded()end;function Lib.Core.Report:OnReportReceived(ah,...)end;function Lib.Core.Report:OverrideSoldierPayment()GameCallback_SetSoldierPaymentLevel_Orig_Libertica=GameCallback_SetSoldierPaymentLevel;GameCallback_SetSoldierPaymentLevel=function(V,lu)if lu<=2 then return GameCallback_SetSoldierPaymentLevel_Orig_Libertica(V,lu)end;Lib.Core.Event:ProcessScriptCommand(V,lu)end end;function Lib.Core.Report:ProcessScriptCommand(V,ah)assert(ah and self.ScriptCommandRegister[ah],"Commands is invalid.")local lv=Logic.GetPlayerName(V+4)local lw=self:DecodeScriptCommandParameters(lv)self.ScriptCommandRegister[ah][2](unpack(lw))end;function Lib.Core.Report:CreateScriptCommand(j,kH)assert(not IsLocalScript(),"Commands must be created in global script.")self.ScriptCommandSequence=self.ScriptCommandSequence+1;local _=self.ScriptCommandSequence;local Name=j;if string.find(j,"^Cmd_")then Name=string.sub(j,5)end;self.ScriptCommandRegister[_]={Name,kH}ExecuteLocal([[
        local ID, Name = %d, "%s"
        Lib.Core.Report.ScriptCommandRegister[ID] = Name
        Command[Name] = ID
    ]],_,Name)end;function Lib.Core.Report:DecodeScriptCommandParameters(lx)local lw={}for g,h in pairs(string.slice(lx,"#"))do local l3=h;l3=l3:replaceAll("<<<HT>>>",'#')l3=l3:replaceAll("<<<QT>>>",'"')l3=l3:replaceAll("<<<ES>>>",'')if l3==nil then l3=nil elseif l3=="true"or l3=="false"then l3=l3=="true"elseif string.indexOf(l3,"{")==1 then local ly=string.slice(string.sub(l3,2,string.len(l3)-1),",")l3={}for f=1,#ly do l3[f]=tonumber(ly[f])~=nil and tonumber(ly[f])or ly end elseif tonumber(l3)~=nil then l3=tonumber(l3)end;table.insert(lw,l3)end;return lw end;function Lib.Core.Report:SendScriptCommand(ah,...)assert(IsLocalScript(),"Commands must be send in local script.")assert(ah and self.ScriptCommandRegister[ah],"Command is invalid.")local m=GUI.GetPlayerID()local lz=m+4;local lv=Logic.GetPlayerName(lz)local lw=self:EncodeScriptCommandParameters(...)GUI.SetPlayerName(lz,lw)if IsHistoryEdition()and IsMultiplayer()then GUI.SetSoldierPaymentLevel(ah)else ExecuteGlobal([[Lib.Core.Report:ProcessScriptCommand(%d, %d)]],m,ah)end;GUI.SetPlayerName(lz,lv)GUI.SetSoldierPaymentLevel(PlayerSoldierPaymentLevel[m])end;function Lib.Core.Report:EncodeScriptCommandParameters(...)local lA=""for f=1,#arg do local kJ=arg[f]if type(kJ)=="string"then kJ=kJ:gsub('#',"<<<HT>>>")kJ=kJ:gsub('"',"<<<QT>>>")if kJ:len()==0 then kJ="<<<ES>>>"end elseif type(kJ)=="table"then kJ="{"..table.concat(kJ,",").."}"end;if string.len(lA)>0 then lA=lA.."#"end;lA=lA..tostring(kJ)end;return lA end;function Lib.Core.Report:CreateReport(j)assert(type(j)=="string","Report name must be a string.")for f=1,#self.ScriptEventRegister,1 do if self.ScriptEventRegister[f]==j then assert(false,"Report already exists")return 0 end end;local _=#self.ScriptEventRegister+1;self.ScriptEventRegister[_]=j;self.ScriptEventListener[_]={SequenceID=0}return _ end;function Lib.Core.Report:SendReport(ah,...)assert(self.ScriptEventRegister[ah]~=nil,"Report type does not exist.")if GameCallback_Lib_OnEventReceived then GameCallback_Lib_OnEventReceived(ah,...)end;if self.ScriptEventListener[ah]then for g,h in pairs(self.ScriptEventListener[ah])do if tonumber(g)then h(...)end end end end;function Lib.Core.Report:CreateReportReceiver(lB,kH)assert(type(kH)=="function","Listener must be a function.")assert(self.ScriptEventRegister[lB]~=nil,"Event does not exist.")local dk=self.ScriptEventListener[lB]self.ScriptEventListener[lB].SequenceID=dk.SequenceID+1;self.ScriptEventListener[lB][dk.SequenceID]=kH;return dk.IDSequence end;function Lib.Core.Report:RemoveReportReceiver(lB,ah)assert(self.ScriptEventRegister[lB]~=nil,"Event does not exist.")self.ScriptEventListener[lB][ah]=nil end;function CreateReport(j)return Lib.Core.Report:CreateReport(j)end;API.CreateScriptEvent=CreateReport;function SendReport(ah,...)local arg={...}Lib.Core.Report:SendReport(ah,unpack(arg))end;API.SendScriptEvent=SendReport;function SendReportToGlobal(ah,...)assert(IsLocalScript(),"Was called from global script.")local arg={...}Lib.Core.Report:SendScriptCommand(Command.SendReportToGlobal,ah,unpack(arg))end;API.SendScriptEventToGlobal=SendReportToGlobal;function SendReportToLocal(ah,...)assert(not IsLocalScript(),"Was called from local script.")local arg={...}if#arg>0 then local kJ=""for f=1,#arg do if f>1 then kJ=kJ..","end;if type(arg[f])=="string"then kJ=kJ.."\""..arg[f].."\""elseif type(arg[f])=="table"then kJ=kJ..table.tostring(arg[f])else kJ=kJ..tostring(arg[f])end end;ExecuteLocal([[SendReport(%d, %s)]],ah,kJ)else ExecuteLocal([[SendReport(%d)]],ah)end end;API.SendScriptEventToLocal=SendReportToLocal;function CreateReportReceiver(lB,kH)return Lib.Core.Report:CreateReportReceiver(lB,kH)end;API.CreateScriptEventReceiver=CreateReportReceiver;function RemoveReportReceiver(lB,ah)Lib.Core.Report:RemoveReportReceiver(lB,ah)end;API.RemoveScriptEventReceiver=RemoveReportReceiver;Lib.Core.Save={HistoryEditionQuickSave=false,SavingDisabled=false,LoadingDisabled=false}Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Save")function DisableAutoSave(hg)if not IsLocalScript()then Lib.Core.Save.HistoryEditionQuickSave=hg==true;ExecuteLocal([[Lib.Core.Save.HistoryEditionQuickSave = %s]],tostring(hg==true))end end;API.DisableAutoSave=DisableAutoSave;function DisableSaving(hg)Lib.Core.Save:DisableSaving(hg)end;API.DisableSaving=DisableSaving;function DisableLoading(hg)Lib.Core.Save:DisableLoading(hg)end;API.DisableLoading=DisableLoading;function Lib.Core.Save:Initialize()Report.SaveGameLoaded=CreateReport("Event_SaveGameLoaded")self:SetupQuicksaveKeyCallback()self:SetupQuicksaveKeyTrigger()end;function Lib.Core.Save:OnSaveGameLoaded()self:SetupQuicksaveKeyTrigger()self:UpdateLoadButtons()self:UpdateSaveButtons()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Save:OnReportReceived(ah,...)end;function Lib.Core.Save:SetupQuicksaveKeyTrigger()if IsLocalScript()then RequestHiResJob(function()Input.KeyBindDown(Keys.ModifierControl+Keys.S,"KeyBindings_SaveGame(true)",2,false)return true end)end end;function Lib.Core.Save:SetupQuicksaveKeyCallback()if IsLocalScript()then KeyBindings_SaveGame_Orig_Core=KeyBindings_SaveGame;KeyBindings_SaveGame=function(...)if Lib.Core.Save.SavingDisabled then return end;if not Lib.Core.Save.HistoryEditionQuickSave and not arg[1]then return end;KeyBindings_SaveGame_Orig_Core()end end end;function Lib.Core.Save:DisableSaving(hg)self.SavingDisabled=hg==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableSaving(%s)]],tostring(hg))else self:UpdateSaveButtons()end end;function Lib.Core.Save:UpdateSaveButtons()if IsLocalScript()then local lC=self.SavingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickSave",lC)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/SaveGame",lC)end end;function Lib.Core.Save:DisableLoading(hg)self.LoadingDisabled=hg==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableLoading(%s)]],tostring(hg))else self:UpdateLoadButtons()end end;function Lib.Core.Save:UpdateLoadButtons()if IsLocalScript()then local lC=self.LoadingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/LoadGame",lC)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickLoad",lC)end end;Lib.Core.ScriptingValue={SV={Game="Vanilla",Vanilla={Destination={X=19,Y=20},Health=-41,Player=-71,Size=-45,Visible=-50,NPC=6},HistoryEdition={Destination={X=17,Y=18},Health=-38,Player=-68,Size=-42,Visible=-47,NPC=6}}}CONST_SCRIPTING_VALUES=Lib.Core.ScriptingValue.SV.Vanilla;Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_ScriptingValue")function Lib.Core.ScriptingValue:Initialize()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnSaveGameLoaded()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnReportReceived(ah,...)end;function Lib.Core.ScriptingValue:BitsInteger(hQ)local kW={}while hQ>0 do local lD=math.qmod(hQ,2)table.insert(kW,1,lD)hQ=(hQ-lD)/2 end;table.remove(kW,1)return kW end;function Lib.Core.ScriptingValue:BitsFraction(hQ,kW)for f=1,48 do hQ=hQ*2;if hQ>=1 then table.insert(kW,1)hQ=hQ-1 else table.insert(kW,0)end;if hQ==0 then return kW end end;return kW end;function Lib.Core.ScriptingValue:IntegerToFloat(hQ)if hQ==0 then return 0 end;local lE=1;if hQ<0 then hQ=2147483648+hQ;lE=-1 end;local lF=math.qmod(hQ,8388608)local lG=(hQ-lF)/8388608;local lH=math.qmod(lG,256)local lI=lH-127;local lJ=1;local lK=0.5;local lL=4194304;for f=23,0,-1 do if lF-lL>0 then lJ=lJ+lK;lF=lF-lL end;lL=lL/2;lK=lK/2 end;return lJ*math.pow(2,lI)*lE end;function Lib.Core.ScriptingValue:FloatToInteger(lM)if lM==0 then return 0 end;local lN=false;if lM<0 then lN=true;lM=lM*-1 end;local lO=0;local lP;local lI=0;if lM>=1 then local lQ=math.floor(lM)local lR=lM-lQ;lP=self:BitsInteger(lQ)lI=#lP;self:BitsFraction(lR,lP)else lP={}self:BitsFraction(lM,lP)while lP[1]==0 do lI=lI-1;table.remove(lP,1)end;lI=lI-1;table.remove(lP,1)end;local lS=4194304;local lT=1;for lU=lT,23 do local lV=lP[lU]if not lV then break end;if lV==1 then lO=lO+lS end;lS=lS/2 end;lO=lO+(lI+127)*8388608;if lN then lO=lO-2147483648 end;return lO end;function GetInteger(s,lW)local _=GetID(s)assert(IsExisting(_),"Entity does not exist.")return Logic.GetEntityScriptingValue(_,lW)end;API.GetInteger=GetInteger;function GetFloat(s,lW)local _=GetID(s)assert(IsExisting(_),"Entity does not exist.")local l3=Logic.GetEntityScriptingValue(_,lW)return ConvertIntegerToFloat(l3)end;API.GetFloat=GetFloat;function SetInteger(s,lW,aE)local _=GetID(s)assert(IsExisting(_),"Entity does not exist.")Logic.SetEntityScriptingValue(_,lW,aE)end;API.SetInteger=SetInteger;function SetFloat(s,lW,aE)local _=GetID(s)assert(IsExisting(_),"Entity does not exist.")Logic.SetEntityScriptingValue(_,lW,ConvertFloatToInteger(aE))end;API.SetFloat=SetFloat;function ConvertIntegerToFloat(aE)return Lib.Core.ScriptingValue:IntegerToFloat(aE)end;API.ConvertIntegerToFloat=ConvertIntegerToFloat;function ConvertFloatToInteger(aE)return Lib.Core.ScriptingValue:FloatToInteger(aE)end;API.ConvertFloatToInteger=ConvertFloatToInteger;Lib.Core.Text={Languages={{"de","Deutsch","en"},{"en","English","en"},{"fr","Français","en"}},Colors={red="{@color:255,80,80,255}",blue="{@color:104,104,232,255}",yellow="{@color:255,255,80,255}",green="{@color:80,180,0,255}",white="{@color:255,255,255,255}",black="{@color:0,0,0,255}",grey="{@color:140,140,140,255}",azure="{@color:0,160,190,255}",orange="{@color:255,176,30,255}",amber="{@color:224,197,117,255}",violet="{@color:180,100,190,255}",pink="{@color:255,170,200,255}",scarlet="{@color:190,0,0,255}",magenta="{@color:190,0,89,255}",olive="{@color:74,120,0,255}",celeste="{@color:145,170,210,255}",tooltip="{@color:51,51,120,255}",none="{@color:none}"},StringTables={},Placeholders={Names={},EntityTypes={}}}CONST_LANGUAGE="de"Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Text")function Lib.Core.Text:Initialize()Report.LanguageChanged=CreateReport("Event_LanguageChanged")self:DetectLanguage()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnSaveGameLoaded()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnReportReceived(ah,...)end;function Lib.Core.Text:OverwriteGetStringTableText()XGUIEng.GetStringTableText_Orig_Core=XGUIEng.GetStringTableText;XGUIEng.GetStringTableText=function(hW)return Lib.Core.Text:GetStringTableOverwrite(hW)end end;function Lib.Core.Text:AddStringTableOverwrite(dg,aJ)local f=string.find(dg,"/[^/]*$")local lX=dg:sub(1,f-1):lower()local bW=dg:sub(f+1):lower()self.StringTables[lX]=self.StringTables[lX]or{}self.StringTables[lX][bW]=aJ end;function Lib.Core.Text:DeleteStringTableOverwrite(dg)local f=string.find(dg,"/[^/]*$")local lX=dg:sub(1,f-1):lower()local bW=dg:sub(f+1):lower()self.StringTables[lX]=self.StringTables[lX]or{}self.StringTables[lX][bW]=nil end;function Lib.Core.Text:GetStringTableOverwrite(dg)local f=string.find(dg,"/[^/]*$")local lX=dg:sub(1,f-1):lower()local bW=dg:sub(f+1):lower()self.StringTables[lX]=self.StringTables[lX]or{}if self.StringTables[lX][bW]then local aK=self.StringTables[lX][bW]if type(aK)=="string"and aK:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then aK=XGUIEng.GetStringTableText_Orig_Core(aK)end;return ConvertPlaceholders(Localize(aK))end;return XGUIEng.GetStringTableText_Orig_Core(dg)end;function Lib.Core.Text:DetectLanguage()local lY=Network.GetDesiredLanguage()if lY~="de"and lY~="fr"then lY="en"end;CONST_LANGUAGE=lY end;function Lib.Core.Text:ChangeSystemLanguage(V,lZ,l_)local m0=CONST_LANGUAGE;local m1=l_;if lZ==nil or lZ==true then CONST_LANGUAGE=l_;ExecuteLocal([[CONST_LANGUAGE = "%s"]],l_)SendReport(Report.LanguageChanged,m0,m1)SendReportToLocal(Report.LanguageChanged,m0,m1)end end;function Lib.Core.Text:Localize(aJ)local m2="ERROR_NO_TEXT"if type(aJ)=="table"then if aJ[CONST_LANGUAGE]then m2=aJ[CONST_LANGUAGE]else for g,h in pairs(self.Languages)do if h[1]==CONST_LANGUAGE and h[3]and aJ[h[3]]then m2=aJ[h[3]]break end end end else m2=tostring(aJ)end;return m2 end;function Lib.Core.Text:ConvertPlaceholders(aJ)if type(aJ)=="string"then while true do local m3,m4,m5,m6,jJ,jK,jL,jM;if aJ:find("{n:")then m3,m4,m5,jJ,jK,jL,jM=self:SplicePlaceholderText(aJ,"{n:")m6=self.Placeholders.Names[m4]aJ=m3 ..self:Localize(m6 or"n:"..tostring(m4)..": not found")..m5 elseif aJ:find("{t:")then m3,m4,m5,jJ,jK,jL,jM=self:SplicePlaceholderText(aJ,"{t:")m6=self.Placeholders.EntityTypes[m4]aJ=m3 ..self:Localize(m6 or"n:"..tostring(m4)..": not found")..m5 elseif aJ:find("{v:")then m3,m4,m5,jJ,jK,jL,jM=self:SplicePlaceholderText(aJ,"{v:")m6=self:ReplaceValuePlaceholder(m4)aJ=m3 ..self:Localize(m6 or"v:"..tostring(m4)..": not found")..m5 end;if jJ==nil or jK==nil or jL==nil or jM==nil then break end end;aJ=self:ReplaceColorPlaceholders(aJ)end;return aJ end;function Lib.Core.Text:SplicePlaceholderText(aJ,m7)local jJ,jK=aJ:find(m7)local jL,jM=aJ:find("}",jK)local m3=aJ:sub(1,jJ-1)local m4=aJ:sub(jK+1,jL-1)local m5=aJ:sub(jM+1)return m3,m4,m5,jJ,jK,jL,jM end;function Lib.Core.Text:ReplaceColorPlaceholders(aJ)for g,h in pairs(self.Colors)do aJ=aJ:gsub("{"..g.."}",h)end;return aJ end;function Lib.Core.Text:ReplaceValuePlaceholder(aJ)local m8=_G;local m9=string.slice(aJ,"%.")for f=1,#m9 do local ma=m9[f]local b5=tonumber(ma)if b5~=nil then ma=b5 end;if not m8[ma]then return nil end;m8=m8[ma]end;return m8 end;function Localize(aJ)return Lib.Core.Text:Localize(aJ)end;API.Localize=Localize;function ConvertPlaceholders(aJ)return Lib.Core.Text:ConvertPlaceholders(aJ)end;API.ConvertPlaceholders=ConvertPlaceholders;function AddNote(aJ)aJ=ConvertPlaceholders(Localize(aJ))if not IsLocalScript()then Logic.DEBUG_AddNote(aJ)return end;GUI.AddNote(aJ)end;API.Note=AddNote;function AddStaticNote(aJ)aJ=ConvertPlaceholders(Localize(aJ))if not IsLocalScript()then ExecuteLocal([[GUI.AddStaticNote("%s")]],aJ)return end;GUI.AddStaticNote(aJ)end;API.StaticNote=AddStaticNote;function AddMessage(aJ,mb)aJ=ConvertPlaceholders(Localize(aJ))if not IsLocalScript()then ExecuteLocal([[AddMessage("%s", "%s")]],aJ,mb or"")return end;aJ=ConvertPlaceholders(Localize(aJ))Message(aJ,mb and mb~=""and mb:gsub("/","\\")or nil)end;function ClearNotes()if not IsLocalScript()then ExecuteLocal([[ClearNotes()]])return end;GUI.ClearNotes()end;API.ClearNotes=ClearNotes;function AddStringText(dg,aJ)assert(IsLocalScript(),"Text can only be set in local script!")Lib.Core.Text:AddStringTableOverwrite(dg,aJ)end;API.AddStringText=AddStringText;function DeleteStringText(dg)assert(IsLocalScript(),"Text can only be removed in local script!")Lib.Core.Text:DeleteStringTableOverwrite(dg)end;API.DeleteStringText=DeleteStringText;function GetStringText(dg)assert(IsLocalScript(),"Text can only be retrieved in local script!")return Lib.Core.Text:GetStringTableOverwrite(dg)end;API.GetStringText=GetStringText;function DefineLanguage(mc,j,md,bD)assert(type(mc)=="string")assert(type(j)=="string")assert(type(md)=="string")for g,h in pairs(Lib.Core.Text.Languages)do if h[1]==mc then return end end;bD=bD or#Lib.Core.Text.Languages+1;table.insert(Lib.Core.Text.Languages,bD,{mc,j,md})ExecuteLocal([[
        table.insert(Lib.Core.Text.Languages, %d, {"%s", "%s", "%s"})
    ]],bD,mc,j,md)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/camera/Camera_API")function SetRenderDistance(aR)if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:SetRenderDistance(%f)]],aR)return end;Lib.Camera.Local:SetRenderDistance(aR)end;function ResetRenderDistance()if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:ResetRenderDistance()]])return end;Lib.Camera.Local:ResetRenderDistance()end;function ActivateBorderScroll(V)V=V or-1;assert(V==-1 or V>=1 and V<=8)if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:ActivateBorderScroll(%d)",V)return end;Lib.Camera.Local:ActivateBorderScroll(V)end;API.ActivateBorderScroll=ActivateBorderScroll;function DeactivateBorderScroll(W,V)V=V or-1;assert(V==-1 or V>=1 and V<=8)local me;if W then me=GetID(W)end;if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:DeactivateBorderScroll(%d, %d)",V,me or 0)return end;Lib.Camera.Local:DeactivateBorderScroll(V,me)end;API.DeactivateBorderScroll=DeactivateBorderScroll;function AllowExtendedZoom(hg,V)V=V or-1;if not GUI then ExecuteLocal([[API.AllowExtendedZoom(%s, %d)]],tostring(hg==true),V)return end;if V~=-1 and GUI.GetPlayerID()~=V then return end;Lib.Camera.Local.ExtendedZoomAllowed=hg==true;if hg==true then Lib.Camera.Local:DescribeExtendedZoomShortcut()else Lib.Camera.Local:RemoveExtendedZoomShortcut()Lib.Camera.Local:DeactivateExtendedZoom(V)end end;API.AllowExtendedZoom=AllowExtendedZoom;function FocusCameraOnKnight(V,aT,aU)FocusCameraOnEntity(Logic.GetKnightID(V),aT,aU)end;API.FocusCameraOnKnight=FocusCameraOnKnight;function FocusCameraOnEntity(s,aT,aU)if not GUI then local mf=type(s)~="string"and s or"'"..s.."'"ExecuteLocal([[API.FocusCameraOnEntity(%s, %f, %f)]],mf,aT,aU)return end;assert(type(aT)=="number","Rotation is wrong!")assert(type(aU)=="number","Zoom factor is wrong!")assert(IsExisting(s),"Entity does not exist!")Lib.Camera.Local:SetCameraToEntity(s,aT,aU)end;API.FocusCameraOnEntity=FocusCameraOnEntity;Lib.Register("module/camera/Camera_Text")Lib.Camera.Text={Shortcut={Hotkey={de="STRG + UMSCHALT + K",en="CTRL + SHIFT + K",fr="CTRL + SHIFT + K"},Description={de="Alternativen Zoom ein/aus",en="Alternative zoom on/off",fr="Zoom alternatif On/Off"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/Construction_API")function CustomRuleConstructBuilding(V,b3,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructBuilding(V,b3,unpack(arg))end;API.CustomRuleConstructBuilding=CustomRuleConstructBuilding;function CustomRuleConstructRoad(V,b3,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructRoad(V,b3,unpack(arg))end;API.CustomRuleConstructRoad=CustomRuleConstructRoad;function CustomRuleConstructWall(V,b3,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructWall(V,b3,unpack(arg))end;API.CustomRuleConstructWall=CustomRuleConstructWall;function CustomRuleKnockdownBuilding(V,b3,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleKnockdownBuilding(V,b3,unpack(arg))end;API.CustomRuleKnockdownBuilding=CustomRuleKnockdownBuilding;function WhitelistConstructTypeInArea(V,u,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInArea(V,u,aX,aY,aZ)end;API.WhitelistConstructTypeInArea=WhitelistConstructTypeInArea;function WhitelistConstructCategoryInArea(V,a_,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInArea(V,a_,aX,aY,aZ)end;API.WhitelistConstructCategoryInArea=WhitelistConstructCategoryInArea;function WhitelistConstructTypeInTerritory(V,u,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInTerritory(V,u,b0)end;API.WhitelistConstructTypeInTerritory=WhitelistConstructTypeInTerritory;function WhitelistConstructCategoryInTerritory(V,a_,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInTerritory(V,a_,b0)end;API.WhitelistConstructCategoryInTerritory=WhitelistConstructCategoryInTerritory;function BlacklistConstructTypeInArea(V,u,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInArea(V,u,aX,aY,aZ)end;API.BlacklistConstructTypeInArea=BlacklistConstructTypeInArea;function BlacklistConstructCategoryInArea(V,a_,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInArea(V,a_,aX,aY,aZ)end;API.BlacklistConstructCategoryInArea=BlacklistConstructCategoryInArea;function BlacklistConstructTypeInTerritory(V,u,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInTerritory(V,u,b0)end;API.BlacklistConstructTypeInTerritory=BlacklistConstructTypeInTerritory;function BlacklistConstructCategoryInTerritory(V,a_,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInTerritory(V,a_,b0)end;API.BlacklistConstructCategoryInTerritory=BlacklistConstructCategoryInTerritory;function WhitelistConstructRoadInArea(V,b1,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInArea(V,b1,aX,aY,aZ)end;API.WhitelistConstructRoadInArea=WhitelistConstructRoadInArea;function WhitelistConstructWallInArea(V,b2,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInArea(V,b2,aX,aY,aZ)end;API.WhitelistConstructWallInArea=WhitelistConstructWallInArea;function WhitelistConstructRoadInTerritory(V,b1,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInTerritory(V,b1,b0)end;API.WhitelistConstructRoadInTerritory=WhitelistConstructRoadInTerritory;function WhitelistConstructWallInTerritory(V,b2,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInTerritory(V,b2,b0)end;API.WhitelistConstructWallInTerritory=WhitelistConstructWallInTerritory;function BlacklistConstructRoadInArea(V,b1,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInArea(V,b1,aX,aY,aZ)end;API.BlacklistConstructRoadInArea=BlacklistConstructRoadInArea;function BlacklistConstructWallInArea(V,b2,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInArea(V,b2,aX,aY,aZ)end;API.BlacklistConstructWallInArea=BlacklistConstructWallInArea;function BlacklistConstructRoadInTerritory(V,b1,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInTerritory(V,b1,b0)end;API.BlacklistConstructRoadInTerritory=BlacklistConstructRoadInTerritory;function BlacklistConstructWallInTerritory(V,b2,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInTerritory(V,b2,b0)end;API.BlacklistConstructWallInTerritory=BlacklistConstructWallInTerritory;function WhitelistKnockdownTypeInArea(V,u,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInArea(V,u,aX,aY,aZ)end;API.WhitelistKnockdownTypeInArea=WhitelistKnockdownTypeInArea;function WhitelistKnockdownCategoryInArea(V,a_,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInArea(V,a_,aX,aY,aZ)end;API.WhitelistKnockdownCategoryInArea=WhitelistKnockdownCategoryInArea;function WhitelistKnockdownTypeInTerritory(V,u,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(V,u,b0)end;API.WhitelistKnockdownTypeInTerritory=WhitelistKnockdownTypeInTerritory;function WhitelistKnockdownCategoryInTerritory(V,a_,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(V,a_,b0)end;API.WhitelistKnockdownCategoryInTerritory=WhitelistKnockdownCategoryInTerritory;function BlacklistKnockdownTypeInArea(V,u,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInArea(V,u,aX,aY,aZ)end;API.BlacklistKnockdownTypeInArea=BlacklistKnockdownTypeInArea;function BlacklistKnockdownCategoryInArea(V,a_,aX,aY,aZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInArea(V,a_,aX,aY,aZ)end;API.BlacklistKnockdownCategoryInArea=BlacklistKnockdownCategoryInArea;function BlacklistKnockdownTypeInTerritory(V,u,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(V,u,b0)end;API.BlacklistKnockdownTypeInTerritory=BlacklistKnockdownTypeInTerritory;function BlacklistKnockdownCategoryInTerritory(V,a_,b0)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(V,a_,b0)end;API.BlacklistKnockdownCategoryInTerritory=BlacklistKnockdownCategoryInTerritory;Lib.Register("module/city/Construction_Text")Lib.Construction.Text={NoKnockdown={de="Das kann nicht abgerissen werden!",en="This cannot be demolished!",fr="Cela ne peut pas être démoli!"},NoRoad={de="Straßen sind hier nicht möglich!",en="Roads are not possible here!",fr="Les routes ne sont pas possibles ici!"},NoWall={de="Befästigungen sind hier nicht möglich!",en="Ramparts are not possible here!",fr="Les confirmations ne sont pas possibles ici!"},NoWallGate={de="Ein anderes Torhaus ist zu nah!",en="Another gatehouse is too close!",fr="Une autre guérite est trop proche!"},NoBallista={de="Zu nahe an anderem Mauerkatapult!",en="To close to another ballista!",fr="A rapprocher d'une autre baliste!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/LifestockSystem_API")function SetCattleBreedingParameters(dx)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(dx)=="table","Malformed data passed!")local mg=dx.BasePrice or 300;local mh=dx.GrainCost or 10;local mi=dx.GrainUpkeep or 1;local mj=dx.FeedingTimer or 0;local mk=dx.StarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.CattleBasePrice = %d]],mg)Lib.LifestockSystem.Global.CattleBasePrice=mg;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Cow] = %d]],mh)MerchantSystem.BasePrices[Goods.G_Cow]=mg;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainCost = %d]],mh)Lib.LifestockSystem.Global.CattleGrainCost=mh;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainUpkeep = %d]],mi)Lib.LifestockSystem.Global.CattleGrainUpkeep=mi;ExecuteLocal([[Lib.LifestockSystem.Global.CattleFeedingTimer = %d]],mj)Lib.LifestockSystem.Global.CattleFeedingTimer=mj;ExecuteLocal([[Lib.LifestockSystem.Global.CattleStarveChance = %d]],mk)Lib.LifestockSystem.Global.CattleStarveChance=mk end;API.SetCattleBreedingParameters=SetCattleBreedingParameters;function SetSheepBreedingParameters(dx)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(dx)=="table","Malformed data passed!")local ml=dx.SheepBasePrice or 300;local mm=dx.SheepGrainCost or 10;local mn=dx.SheepGrainUpkeep or 1;local mo=dx.SheepFeedingTimer or 0;local mp=dx.SheepStarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.SheepBasePrice = %d]],ml)Lib.LifestockSystem.Global.SheepBasePrice=ml;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Sheep] = %d]],ml)MerchantSystem.BasePrices[Goods.G_Sheep]=ml;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainCost = %d]],mm)Lib.LifestockSystem.Global.SheepGrainCost=mm;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainUpkeep = %d]],mn)Lib.LifestockSystem.Global.SheepGrainUpkeep=mn;ExecuteLocal([[Lib.LifestockSystem.Global.SheepFeedingTimer = %d]],mo)Lib.LifestockSystem.Global.SheepFeedingTimer=mo;ExecuteLocal([[Lib.LifestockSystem.Global.SheepStarveChance = %d]],mp)Lib.LifestockSystem.Global.SheepStarveChance=mp end;API.SetSheepBreedingParameters=SetSheepBreedingParameters;function RequireTitleToBreedCattle(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_Cattle)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Cattle,0)end end;API.RequireTitleToBreedCattle=RequireTitleToBreedCattle;function RequireTitleToBreedSheep(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_Sheep)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Sheep,0)end end;API.RequireTitleToBreedSheep=RequireTitleToBreedSheep;Lib.Register("module/city/LifestockSystem_Text")Lib.LifestockSystem.Text={CattleStarved={de="Eure Kühe sind verhungert!",en="Your cows have starved to death!",fr="Tes vaches sont mortes de faim !"},SheepStarved={de="Eure Schafe sind verhungert!",en="Your sheep have starved to death!",fr="Vos moutons sont morts de faim!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/SettlementSurvival_API")function AnimalPlagueActivate(hg)Lib.SettlementSurvival.Global.AnimalPlague.IsActive=hg==true end;API.AnimalPlagueActivate=AnimalPlagueActivate;function AnimalPlagueActivateForAI(hg)Lib.SettlementSurvival.Global.AnimalPlague.AffectAI=hg==true end;API.AnimalPlagueActivateForAI=AnimalPlagueActivateForAI;function AnimalInfectionActivateAutomatic(hg)Lib.SettlementSurvival.Global.AnimalPlague.AnimalsBecomeSick=hg==true end;API.AnimalInfectionActivateAutomatic=AnimalInfectionActivateAutomatic;function AnimalPlagueSetDeathInterval(mq)Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer = %d]],mq)end;API.AnimalPlagueSetDeathInterval=AnimalPlagueSetDeathInterval;function AnimalPlagueSetDeathChance(mr)Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance = %d]],mr)end;API.AnimalPlagueSetDeathChance=AnimalPlagueSetDeathChance;function AnimalPlagueSetInfectionInterval(mq)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer = %d]],mq)end;API.AnimalPlagueSetInfectionInterval=AnimalPlagueSetInfectionInterval;function AnimalPlagueSetInfectionChance(mr)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance = %d]],mr)end;API.AnimalPlagueSetInfectionChance=AnimalPlagueSetInfectionChance;function HotWeatherActivate(hg)Lib.SettlementSurvival.Global.HotWeather.IsActive=hg==true end;API.HotWeatherActivate=HotWeatherActivate;function HotWeatherActivateForAI(hg)Lib.SettlementSurvival.Global.HotWeather.AffectAI=hg==true end;API.HotWeatherActivateForAI=HotWeatherActivateForAI;function HotWeatherSetTemperature(ms)Lib.SettlementSurvival.Shared.HotWeather.Temperature=ms;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.Temperature = %d]],ms)end;API.HotWeatherSetTemperature=HotWeatherSetTemperature;function HotWeatherSetIgnitionChance(mr)Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance = %d]],mr)end;API.HotWeatherSetIgnitionChance=HotWeatherSetIgnitionChance;function ColdWeatherActivate(hg)Lib.SettlementSurvival.Global.ColdWeather.IsActive=hg==true end;API.ColdWeatherActivate=ColdWeatherActivate;function ColdWeatherActivateForAI(hg)Lib.SettlementSurvival.Global.ColdWeather.AffectAI=hg==true end;API.ColdWeatherActivateForAI=ColdWeatherActivateForAI;function ColdWeatherSetTemperature(ms)Lib.SettlementSurvival.Shared.ColdWeather.Temperature=ms;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.Temperature = %d]],ms)end;API.ColdWeatherSetTemperature=ColdWeatherSetTemperature;function ColdWeatherSetConsumptionInterval(mq)Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer = %d]],mq)end;API.ColdWeatherSetConsumptionInterval=ColdWeatherSetConsumptionInterval;function ColdWeatherSetInfectionChance(mr)Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance = %d]],mr)end;API.ColdWeatherSetInfectionChance=ColdWeatherSetInfectionChance;function FamineActivate(hg)Lib.SettlementSurvival.Global.Famine.IsActive=hg==true end;API.FamineActivate=FamineActivate;function FamineActivateForAI(hg)Lib.SettlementSurvival.Global.Famine.AffectAI=hg==true end;API.FamineActivateForAI=FamineActivateForAI;function FamineSetDeathInterval(mq)Lib.SettlementSurvival.Shared.Famine.DeathTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathTimer = %d]],mq)end;API.FamineSetDeathInterval=FamineSetDeathInterval;function FamineSetDeathChance(mr)Lib.SettlementSurvival.Shared.Famine.DeathChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathChance = %d]],mr)end;API.FamineSetDeathChance=FamineSetDeathChance;function NegligenceActivate(hg)Lib.SettlementSurvival.Global.Negligence.IsActive=hg==true end;API.NegligenceActivate=NegligenceActivate;function NegligenceActivateForAI(hg)Lib.SettlementSurvival.Global.Negligence.AffectAI=hg==true end;API.NegligenceActivateForAI=NegligenceActivateForAI;function NegligenceSetInfectionInterval(mq)Lib.SettlementSurvival.Shared.Negligence.InfectionTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionTimer = %d]],mq)end;API.NegligenceSetInfectionInterval=NegligenceSetInfectionInterval;function NegligenceSetInfectionChance(mr)Lib.SettlementSurvival.Shared.Negligence.InfectionChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionChance = %d]],mr)end;API.NegligenceSetInfectionChance=NegligenceSetInfectionChance;function PlagueActivate(hg)Lib.SettlementSurvival.Global.Plague.IsActive=hg==true end;API.PlagueActivate=PlagueActivate;function PlagueActivateForAI(hg)Lib.SettlementSurvival.Global.Plague.AffectAI=hg==true end;API.PlagueActivateForAI=PlagueActivateForAI;function PlagueSetDeathInterval(mq)Lib.SettlementSurvival.Shared.Plague.DeathTimer=mq;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathTimer = %d]],mq)end;API.PlagueSetDeathInterval=PlagueSetDeathInterval;function PlagueSetDeathChance(mr)Lib.SettlementSurvival.Shared.Plague.DeathChance=mr;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathChance = %d]],mr)end;API.PlagueSetDeathChance=PlagueSetDeathChance;Lib.Register("module/city/SettlementSurvival_Text")Lib.SettlementSurvival.Text={Alarms={AnimalDiedFromIllness={de="{scarlet}Eure Nutztiere sterben an Krankheiten!",en="{scarlet}Your farm animals succumb to the plague!",fr="{scarlet}Vos animaux de ferme succombent à la peste!"},BuildingBurning={de="{scarlet}Brände wüten in Eurer Stadt!",en="{scarlet}Fires are raging in your city!",fr="{scarlet}Les incendies font rage dans votre ville !"},SettlerTemperature={de="{scarlet}Eure Siedler haben kein Feuerholz und frieren!",en="{scarlet}Your settlers lack of firewood to warm themselves!",fr="{scarlet}Vos colons manquent de bois de chauffage pour se réchauffer!"},SettlerNegligence={de="{scarlet}Eure Siedler verwahrlosen und werden krank!",en="{scarlet}Your settlers are neglected and getting sick!",fr="{scarlet}Vos colons sont négligés et tombent malades!"},SettlerDiedFromHunger={de="{scarlet}Eure Siedler haben nichts zu essen und verhungern!",en="{scarlet}Your settlers are starving to death!",fr="{scarlet}Vos colons meurent de faim!"},SettlerDiedFromIllness={de="{scarlet}Eure Siedler sterben an Krankheiten!",en="{scarlet}Your settlers succumb to the plague!",fr="{scarlet}Vos colons succombent à la peste!"}},Messages={BuildingMourning={de="Keine Baumaßnahmen möglich, solange Siedler trauern.",en="No construction work possible as long as settlers mourn.",fr="Aucun travail de construction possible tant que les colons pleurent."}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/Selection_API")function DisableReleaseThieves(hg)if not GUI then ExecuteLocal([[DisableReleaseThieves(%s)]],tostring(hg))return end;Lib.Selection.Local.ThiefRelease=not hg end;API.DisableReleaseThieves=DisableReleaseThieves;function DisableReleaseSiegeEngines(hg)if not GUI then ExecuteLocal([[DisableReleaseSiegeEngines(%s)]],tostring(hg))return end;Lib.Selection.Local.SiegeEngineRelease=not hg end;API.DisableReleaseSiegeEngines=DisableReleaseSiegeEngines;function DisableReleaseSoldiers(hg)if not GUI then ExecuteLocal([[DisableReleaseSoldiers(%s)]],tostring(hg))return end;Lib.Selection.Local.MilitaryRelease=not hg end;API.DisableReleaseSoldiers=DisableReleaseSoldiers;function IsEntitySelected(s,V)if IsExisting(s)then local B=GetID(s)local m=V or Logic.EntityGetPlayer(B)local cI;if not GUI then cI=Lib.Selection.Global.SelectedEntities[m]else cI={GUI.GetSelectedEntities()}end;for f=1,#cI,1 do if cI[f]==B then return true end end end;return false end;API.IsEntityInSelection=IsEntitySelected;function GetSelectedEntity(V)local dd;if not GUI then dd=Lib.Selection.Global.SelectedEntities[V][1]else dd=Lib.Selection.Local.SelectedEntities[V][1]end;return dd or 0 end;API.GetSelectedEntity=GetSelectedEntity;function GetSelectedEntities(V)local cI;if not GUI then cI=Lib.Selection.Global.SelectedEntities[V]else cI=Lib.Selection.Local.SelectedEntities[V]end;return cI end;API.GetSelectedEntities=GetSelectedEntities;Lib.Register("module/entity/Selection_Text")Lib.Selection.Text={Tooltips={KnightButton={Title={de="Ritter selektieren",en="Select Knight",fr="Sélectionner le chevalier"},Text={de="- Klick selektiert den Ritter {cr}- Doppelklick springt zum Ritter{cr}- STRG halten selektiert alle Ritter",en="- Click selects the knight {cr}- Double click jumps to knight{cr}- Press CTRL to select all knights",fr="- Clic sélectionne le chevalier {cr}- Double-clic saute au chevalier{cr}- Maintenir CTRL sélectionne tous les chevaliers"}},BattalionButton={Title={de="Militär selektieren",en="Select Units",fr="Sélectionner les unitées"},Text={de="- Selektiert alle Militäreinheiten {cr}- SHIFT halten um auch Diebe, Munitionswagen und Trebuchets auszuwählen",en="- Selects all military units {cr}- Press SHIFT to additionally select ammunition carts, thieves and trebuchets",fr="- Sélectionne toutes les unités militaires {cr}- Maintenir SHIFT pour sélectionner aussi les voleurs, les chariots de munitions et les trébuchets"}},ReleaseSoldiers={Title={de="Militär entlassen",en="Release military unit",fr="licencier l'unitées"},Text={de="- Eine Militäreinheit entlassen {cr}- Soldaten werden nacheinander entlassen",en="- Dismiss a military unit {cr}- Soldiers will be dismissed each after another",fr="- Licencier une unité militaire {cr}- Les soldats sont licenciés les uns après les autres"},Disabled={de="Kann nicht entlassen werden!",en="Releasing is impossible!",fr="Ne peut pas être licencié!"}},TrebuchetCart={Title={de="Trebuchetwagen",en="Trebuchet cart",fr="Chariot à trébuchet"},Text={de="- Kann einmalig zum Trebuchet ausgebaut werden",en="- Can uniquely be transmuted into a trebuchet",fr="- Peut être transformé une seule fois en trébuchet"}},Trebuchet={Title={de="Trebuchet",en="Trebuchet",fr="Trébuchet"},Text={de="- Kann über weite Strecken Gebäude angreifen {cr}- Kann Gebäude in Brand stecken {cr}- Trebuchet kann manuell zurückgeschickt werden",en="- Can perform long range attacks on buildings {cr}- Can set buildings on fire {cr}- The trebuchet can be manually send back to the city",fr="- Peut attaquer des bâtiments sur de longues distances {cr}- Peut mettre le feu à des bâtiments {cr}- Le trébuchet peut être renvoyé manuellement"}}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/faker/Technology_API")function AddCustomTechnology(dg,j,dh)Lib.Technology.Shared:AddCustomTechnology(dg,j,dh)end;API.AddCustomTechnology=AddCustomTechnology;Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/BriefingSystem_API")function StartBriefing(dp,j,V)if GUI then return end;local m=V;if not m and not Framework.IsNetworkGame()then m=1 end;assert(j~=nil)assert(V~=nil)assert(type(dp)=="table","Briefing must be a table!")assert(#dp>0,"Briefing does not contain pages!")for f=1,#dp do assert(type(dp[f])~="table"or dp[f].__Legit,"A page is not initalized!")end;if dp.EnableSky==nil then dp.EnableSky=true end;if dp.EnableFoW==nil then dp.EnableFoW=false end;if dp.EnableGlobalImmortality==nil then dp.EnableGlobalImmortality=true end;if dp.EnableBorderPins==nil then dp.EnableBorderPins=false end;if dp.RestoreGameSpeed==nil then dp.RestoreGameSpeed=true end;if dp.RestoreCamera==nil then dp.RestoreCamera=true end;Lib.BriefingSystem.Global:StartBriefing(j,m,dp)end;API.StartBriefing=StartBriefing;function IsBriefingActive(V)if not IsLocalScript()then return Lib.BriefingSystem.Global:GetCurrentBriefing(V)~=nil end;return Lib.BriefingSystem.Local:GetCurrentBriefing(V)~=nil end;API.IsBriefingActive=IsBriefingActive;function GetFramePosition(s,mt)local P,Q,R=Logic.EntityGetPos(GetID(s))return P,Q,R+(mt or 0)end;function GetFrameVector(mu,mv,mw,mx)local a7,a8,a9=Logic.EntityGetPos(GetID(mu))local ab,ac,ad=Logic.EntityGetPos(GetID(mw))return a7,a8,a9+(mv or 0),ab,ac,ad+(mx or 0)end;function AddBriefingPages(dp)Lib.BriefingSystem.Global:CreateBriefingGetPage(dp)Lib.BriefingSystem.Global:CreateBriefingAddPage(dp)Lib.BriefingSystem.Global:CreateBriefingAddMCPage(dp)Lib.BriefingSystem.Global:CreateBriefingAddRedirect(dp)local AP=function(dr)local dn;if type(dr)=="table"then if dr.MC then dn=dp:AddMCPage(dr)else dn=dp:AddPage(dr)end else dn=dp:AddRedirect(dr)end;return dn end;local ASP=function(...)dp.PageAnimation=dp.PageAnimation or{}local Name,bT,aK,z;local my=false;local fI=function()end;local mz=false;if#arg==3 and type(arg[1])=="string"or#arg>=4 and type(arg[4])=="boolean"then Name=table.remove(arg,1)end;bT=table.remove(arg,1)aK=table.remove(arg,1)if#arg>0 then my=table.remove(arg,1)==true end;if#arg>0 then z=table.remove(arg,1)end;if#arg>0 then fI=table.remove(arg,1)end;if#arg>0 then mz=not table.remove(arg,1)end;local dI;if z then dI=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if z and Logic.IsSettler(GetID(z))==1 then dI=Logic.GetEntityOrientation(GetID(z))+90 end end;return dp:AddPage{Name=Name,Title=bT,Text=aK,Action=fI,Position=z,DisableSkipping=mz,DialogCamera=my,Rotation=dI}end;return AP,ASP end;API.AddBriefingPages=AddBriefingPages;function AP(dx)assert(false)end;function ASP(...)assert(false)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/CutsceneSystem_API")function StartCutscene(f1,j,V)if GUI then return end;local m=V;if not m and not Framework.IsNetworkGame()then m=1 end;assert(j~=nil)assert(V~=nil)assert(type(f1)=="table","Cutscene must be a table!")assert(#f1>0,"Cutscene does not contain pages!")for f=1,#f1 do assert(type(f1[f])~="table"or f1[f].__Legit,"A page is not initialized!")end;if f1.EnableSky==nil then f1.EnableSky=true end;if f1.EnableFoW==nil then f1.EnableFoW=false end;if f1.EnableGlobalImmortality==nil then f1.EnableGlobalImmortality=true end;if f1.EnableBorderPins==nil then f1.EnableBorderPins=false end;Lib.CutsceneSystem.Global:StartCutscene(j,m,f1)end;API.StartCutscene=StartCutscene;function IsCutsceneActive(V)if not IsLocalScript()then return Lib.CutsceneSystem.Global:GetCurrentCutscene(V)~=nil end;return Lib.CutsceneSystem.Local:GetCurrentCutscene(V)~=nil end;API.IsCutsceneActive=IsCutsceneActive;function AddCutscenePages(f1)Lib.CutsceneSystem.Global:CreateCutsceneGetPage(f1)Lib.CutsceneSystem.Global:CreateCutsceneAddPage(f1)local AP=function(dr)return f1:AddPage(dr)end;return AP end;API.AddCutscenePages=AddCutscenePages;function AP(dx)assert(false)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/DialogSystem_API")function StartDialog(f9,j,V)if GUI then return end;local m=V;if not m and not Framework.IsNetworkGame()then m=1 end;assert(j~=nil)assert(V~=nil)assert(type(f9)=="table","Dialog must be a table!")assert(#f9>0,"Dialog does not contain pages!")for f=1,#f9 do assert(type(f9[f])~="table"or f9[f].__Legit,"Page is not initialized!")end;if f9.EnableSky==nil then f9.EnableSky=true end;if f9.EnableFoW==nil then f9.EnableFoW=false end;if f9.EnableGlobalImmortality==nil then f9.EnableGlobalImmortality=true end;if f9.EnableBorderPins==nil then f9.EnableBorderPins=false end;if f9.RestoreGameSpeed==nil then f9.RestoreGameSpeed=true end;if f9.RestoreCamera==nil then f9.RestoreCamera=true end;Lib.DialogSystem.Global:StartDialog(j,m,f9)end;API.StartDialog=StartDialog;function IsDialogActive(V)if not IsLocalScript()then return Lib.DialogSystem.Global:GetCurrentDialog(V)~=nil end;return Lib.DialogSystem.Local:GetCurrentDialog(V)~=nil end;API.IsDialogActive=IsDialogActive;function AddDialogPages(f9)Lib.DialogSystem.Global:CreateDialogGetPage(f9)Lib.DialogSystem.Global:CreateDialogAddPage(f9)Lib.DialogSystem.Global:CreateDialogAddMCPage(f9)Lib.DialogSystem.Global:CreateDialogAddRedirect(f9)local AP=function(dr)local dn;if type(dr)=="table"then if dr.MC then dn=f9:AddMCPage(dr)else dn=f9:AddPage(dr)end else dn=f9:AddRedirect(dr)end;return dn end;local ASP=function(...)if type(arg[1])~="number"then Name=table.remove(arg,1)end;local mA=table.remove(arg,1)local z=table.remove(arg,1)local bT=table.remove(arg,1)local aK=table.remove(arg,1)local fb=table.remove(arg,1)local fI;if type(arg[1])=="function"then fI=table.remove(arg,1)end;return f9:AddPage{Name=Name,Title=bT,Text=aK,Actor=mA,Target=z,DialogCamera=fb==true,Action=fI}end;return AP,ASP end;API.AddDialogPages=AddDialogPages;function AP(dx)assert(false)end;function ASP(...)assert(false)end;Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/Requester_API")function TextWindow(mB,mC,V)V=V or 1;mB=Localize(mB)mC=Localize(mC)if not GUI then ExecuteLocal([[API.TextWindow("%s", "%s", %d)]],mB,mC,V)return end;Lib.Requester.Local:ShowTextWindow{PlayerID=V,Caption=mB,Content=mC}end;API.TextWindow=TextWindow;function DialogInfoBox(V,fF,aJ,fG)assert(IsLocalScript(),"Can not be used in global script.")if type(V)~="number"then fG=aJ;aJ=fF;fF=V;V=GUI.GetPlayerID()end;if type(fF)=="table"then fF=Localize(fF)end;if type(aJ)=="table"then aJ=Localize(aJ)end;Lib.Requester.Local:OpenDialog(V,fF,aJ,fG)end;API.DialogInfoBox=DialogInfoBox;function DialogRequestBox(V,fF,aJ,fG,fJ)assert(IsLocalScript(),"Can not be used in global script.")if type(V)~="number"then fJ=fG;fG=aJ;aJ=fF;fF=V;V=GUI.GetPlayerID()end;if type(fF)=="table"then fF=Localize(fF)end;if type(aJ)=="table"then aJ=Localize(aJ)end;Lib.Requester.Local:OpenRequesterDialog(V,fF,aJ,fG,fJ)end;API.DialogRequestBox=DialogRequestBox;function DialogSelectBox(V,fF,aJ,fG,C)assert(IsLocalScript(),"Can not be used in global script.")if type(V)~="number"then C=fG;fG=aJ;aJ=fF;fF=V;V=GUI.GetPlayerID()end;if type(fF)=="table"then fF=Localize(fF)end;if type(aJ)=="table"then aJ=Localize(aJ)end;aJ=aJ.."{cr}"Lib.Requester.Local:OpenSelectionDialog(V,fF,aJ,fG,C)end;API.DialogSelectBox=DialogSelectBox;function DialogLanguageSelection(V)V=V or 0;if not GUI then ExecuteLocal([[DialogLanguageSelection(%d)]],V)return end;local mD=V;local m=GUI.GetPlayerID()local mE=mD==0 or mD==m;if mD~=0 and GUI.GetPlayerID()~=mD then return end;local mF={}for f=1,#Lib.Core.Text.Languages do table.insert(mF,Lib.Core.Text.Languages[f][2])end;local fI=function(mG)SendReportToGlobal(Report.LanguageSelectionClosed,m,mE,Lib.Core.Text.Languages[mG][1])SendReport(Report.LanguageSelectionClosed,m,mE,Lib.Core.Text.Languages[mG][1])end;DialogSelectBox(m,Localize(Lib.Requester.Shared.Text.ChooseLanguage.Title),Localize(Lib.Requester.Shared.Text.ChooseLanguage.Text),fI,mF)end;API.DialogLanguageSelection=DialogLanguageSelection;Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IO_API")function SetupObject(g0)if GUI then return end;return Lib.IO.Global:CreateObject(g0)end;API.CreateObject=SetupObject;function DisposeObject(fZ)if GUI or not CONST_IO[fZ]then return end;Lib.IO.Global:DestroyObject(fZ)end;API.DisposeObject=DisposeObject;function ResetObject(fZ)if GUI or not CONST_IO[fZ]then return end;Lib.IO.Global:ResetObject(fZ)InteractiveObjectDeactivate(fZ)end;API.ResetObject=ResetObject;function InteractiveObjectAddCustomName(dg,aJ)local mH=Entities[dg]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectSetQuestName("%s", %s)]],dg,type(aJ)=="table"and table.tostring(aJ)or"\""..aJ.."\"")return end;AddStringText(mH..dg,aJ)end;API.InteractiveObjectSetQuestName=InteractiveObjectAddCustomName;function InteractiveObjectDeleteCustomName(dg)local mH=Entities[dg]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectDeleteCustomName("%s")]],dg)return end;DeleteStringText(mH..dg)end;API.InteractiveObjectUnsetQuestName=InteractiveObjectDeleteCustomName;function AllowActivateIronMines(V,mI)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(V,Technologies.R_RefillIronMine,mI and 3 or 1)end;API.AllowActivateIronMines=AllowActivateIronMines;function RequireTitleToRefilIronMines(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillIronMine)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_RefillIronMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillIronMine,0)end end;API.RequireTitleToRefilIronMines=RequireTitleToRefilIronMines;function AllowActivateStoneMines(V,mI)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(V,Technologies.R_RefillStoneMine,mI and 3 or 1)end;API.AllowActivateStoneMines=AllowActivateStoneMines;function RequireTitleToRefilStoneMines(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillStoneMine)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_RefillStoneMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillStoneMine,0)end end;API.RequireTitleToRefilStoneMines=RequireTitleToRefilStoneMines;function AllowActivateCisterns(V,mI)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(V,Technologies.R_RefillCistern,mI and 3 or 1)end;API.AllowActivateCisterns=AllowActivateCisterns;function RequireTitleToRefilCisterns(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillCistern)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_RefillCistern)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillCisternMine,0)end end;API.RequireTitleToRefilCisterns=RequireTitleToRefilCisterns;function AllowActivateTradepost(V,mI)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(V,Technologies.R_Tradepost,mI and 3 or 1)end;API.AllowActivateTradepost=AllowActivateTradepost;function RequireTitleToBuildTradeposts(fF)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Tradepost)
        CreateTechnologyKnightTitleTable()
    ]],fF)table.insert(NeedsAndRightsByKnightTitle[fF][4],1,Technologies.R_Tradepost)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Tradepost,0)end end;API.RequireTitleToBuildTradeposts=RequireTitleToBuildTradeposts;InteractiveObjectActivate=function(fZ,bd,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[fZ]then local gd=CONST_IO[fZ].Slave or fZ;if CONST_IO[fZ].Slave then CONST_IO_SLAVE_STATE[gd]=1;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 1]],gd))end;Lib.IO.Global:SetObjectState(gd,bd,unpack(arg))CONST_IO[fZ].IsActive=true;ExecuteLocal([[CONST_IO["%s"].IsActive = true]],fZ)else Lib.IO.Global:SetObjectState(fZ,bd,unpack(arg))end end end;API.InteractiveObjectActivate=InteractiveObjectActivate;InteractiveObjectDeactivate=function(fZ,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[fZ]then local gd=CONST_IO[fZ].Slave or fZ;if CONST_IO[fZ].Slave then CONST_IO_SLAVE_STATE[gd]=0;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 0]],gd))end;Lib.IO.Global:SetObjectState(gd,2,unpack(arg))CONST_IO[fZ].IsActive=false;ExecuteLocal([[CONST_IO["%s"].IsActive = false]],fZ)else Lib.IO.Global:SetObjectState(fZ,2,unpack(arg))end end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOChest_API")function CreateRandomChest(j,gN,gO,gP,aL,fG)if IsLocalScript()then return end;if not fG then fG=aL;aL=nil end;assert(IsExisting(j),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,gN)~=nil,"Good type is invalid!")assert(type(gO)=="number"and gO>=1,"Minimum is to low!")gP=gP or gO;assert(type(gP)=="number"or gP>=1,"Maximum is to low!")assert(gP>=gO,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(j,gN,gO,gP,false,false,aL,fG)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomChest(j,gN,gO,gP,aL,fG)if IsLocalScript()then return end;if not fG then fG=aL;aL=nil end;assert(IsExisting(j),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,gN)~=nil,"Good type is invalid!")assert(type(gO)=="number"and gO>=1,"Minimum is to low!")gP=gP or gO;assert(type(gP)=="number"or gP>=1,"Maximum is to low!")assert(gP>=gO,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(j,gN,gO,gP,false,true,aL,fG)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomGoldChest(j)if IsLocalScript()then return end;assert(IsExisting(j),"Entity does not exist!")Lib.IOChest.Global:CreateRandomGoldChest(j)end;API.CreateRandomGoldChest=CreateRandomGoldChest;function CreateRandomResourceChest(j)if IsLocalScript()then return end;assert(IsExisting(j),"Entity does not exist!")Lib.IOChest.Global:CreateRandomResourceChest(j)end;API.CreateRandomResourceChest=CreateRandomResourceChest;function CreateRandomLuxuryChest(j)if IsLocalScript()then return end;assert(IsExisting(j),"Entity does not exist!")Lib.IOChest.Global:CreateRandomLuxuryChest(j)end;API.CreateRandomLuxuryChest=CreateRandomLuxuryChest;Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOMine_API")function CreateIOIronMine(dx)local bt={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(dx)Lib.IOMine.Global:CreateIOMine(dx.Scriptname,Entities.R_IronMine,dx.Title,dx.Text,dx.Costs or bt,dx.ResourceAmount,dx.RefillAmount,dx.ConstructionCondition,dx.ConditionInfo,dx.ConstructionAction)end;API.CreateIOIronMine=CreateIOIronMine;function CreateIOStoneMine(dx)local bt={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(dx)Lib.IOMine.Global:CreateIOMine(dx.Scriptname,Entities.R_StoneMine,dx.Title,dx.Text,dx.Costs or bt,dx.ResourceAmount,dx.RefillAmount,dx.ConstructionCondition,dx.ConditionInfo,dx.ConstructionAction)end;API.CreateIOStoneMine=CreateIOStoneMine;function CheckIOMineParameter(dx)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(dx.Scriptname),"API.CreateIOIronMine: Scriptname '%s' does not exist!",tostring(dx.Scriptname))local bt={Goods.G_Gold,500,Goods.G_Wood,20}if dx.Costs then if dx.Costs[1]then error(GetNameOfKeyInTable(Goods,dx.Costs[1]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(dx.Costs[1]))error(dx.Costs[2]and(type(dx.Costs[2])=="number"or dx.Costs[2]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end;if dx.Costs[3]then error(GetNameOfKeyInTable(Goods,dx.Costs[3]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(dx.Costs[3]))error(dx.Costs[4]and(type(dx.Costs[4])=="number"or dx.Costs[4]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end end end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/npc/NPC_API")function NpcCompose(dx)error(not IsLocalScript(),"NPC manipulated in local script.")error(type(dx)=="table","NPC must be a table.")error(dx.Name~=nil,"NPC needs a script name.")error(IsExisting(dx.Name),"Entity does not exist.")local mJ=Lib.NPC.Global:GetNpc(dx.Name)error(mJ==nil or not mJ.Active,"NPC already active.")error(not dx.Type or(dx.Type>=1 or dx.Type<=4),"NPC type is invalid.")return Lib.NPC.Global:CreateNpc(dx)end;API.NpcCompose=NpcCompose;function NpcDispose(dx)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(dx.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(dx.Name)==nil,"NPC must first be composed.")Lib.NPC.Global:DestroyNpc(dx)end;API.NpcDispose=NpcDispose;function NpcUpdate(dx)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(dx.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(dx.Name)~=nil,"NPC must first be composed.")Lib.NPC.Global:UpdateNpc(dx)end;API.NpcUpdate=NpcUpdate;function NpcIsActive(dx)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(dx.Name),"Entity does not exist.")local mK=Lib.NPC.Global:GetNpc(dx.Name)error(mK~=nil,"NPC was not found.")if mK.Active==true then return GetInteger(dx.Name,CONST_SCRIPTING_VALUES.NPC)==6 end;return false end;API.NpcIsActive=NpcIsActive;function NpcTalkedTo(dx,mL,V)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(dx.Name),"Entity does not exist.")local mK=Lib.NPC.Global:GetNpc(dx.Name)error(mK~=nil,"NPC was not found.")local mM=mK.TalkedTo~=nil and mK.TalkedTo~=0;if mL and mM then mM=mK.TalkedTo==GetID(mL)end;if V and mM then mM=Logic.EntityGetPlayer(mK.TalkedTo)==V end;return mM end;API.NpcTalkedTo=NpcTalkedTo;Lib.Register("module/promotion/Promotion_API")Lib.Register("module/promotion/Promotion_Config")Lib.Promotion.Config={}function Lib.Promotion.Config:InitAddonText()if Framework.GetGameExtraNo()~=0 then Lib.Promotion.Local.BuffTypeNames[Buffs.Buff_Gems]={de="Edelsteine beschaffen",en="Obtain gems",fr="Se procurer des Gemmes"}Lib.Promotion.Local.BuffTypeNames[Buffs.Buff_Olibanum]={de="Weihrauch beschaffen",en="Obtain olibanum",fr="Se procurer de l'encens"}Lib.Promotion.Local.BuffTypeNames[Buffs.Buff_MusicalInstrument]={de="Muskinstrumente beschaffen",en="Obtain instruments",fr="Se procurer des instruments de musique"}end end;function Lib.Promotion.Config:InitTexturePositions()g_TexturePositions.EntityCategories[EntityCategories.GC_Food_Supplier]={1,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Clothes_Supplier]={1,2}g_TexturePositions.EntityCategories[EntityCategories.GC_Hygiene_Supplier]={16,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Entertainment_Supplier]={1,4}g_TexturePositions.EntityCategories[EntityCategories.GC_Luxury_Supplier]={16,3}g_TexturePositions.EntityCategories[EntityCategories.GC_Weapon_Supplier]={1,7}g_TexturePositions.EntityCategories[EntityCategories.GC_Medicine_Supplier]={2,10}g_TexturePositions.EntityCategories[EntityCategories.Outpost]={12,3}g_TexturePositions.EntityCategories[EntityCategories.Spouse]={5,15}g_TexturePositions.EntityCategories[EntityCategories.CattlePasture]={3,16}g_TexturePositions.EntityCategories[EntityCategories.SheepPasture]={4,1}g_TexturePositions.EntityCategories[EntityCategories.Soldier]={7,12}g_TexturePositions.EntityCategories[EntityCategories.GrainField]={14,2}g_TexturePositions.EntityCategories[EntityCategories.BeeHive]={2,1}g_TexturePositions.EntityCategories[EntityCategories.OuterRimBuilding]={3,4}g_TexturePositions.EntityCategories[EntityCategories.CityBuilding]={8,1}g_TexturePositions.EntityCategories[EntityCategories.Leader]={7,11}g_TexturePositions.EntityCategories[EntityCategories.Range]={9,8}g_TexturePositions.EntityCategories[EntityCategories.Melee]={9,7}g_TexturePositions.EntityCategories[EntityCategories.SiegeEngine]={2,15}g_TexturePositions.Entities[Entities.B_Beehive]={2,1}g_TexturePositions.Entities[Entities.B_Cathedral_Big]={3,12}g_TexturePositions.Entities[Entities.B_CattlePasture]={3,16}g_TexturePositions.Entities[Entities.B_GrainField_ME]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NA]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NE]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_SE]={1,13}g_TexturePositions.Entities[Entities.U_MilitaryBallista]={10,5}g_TexturePositions.Entities[Entities.B_Outpost]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_ME]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NA]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NE]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_SE]={12,3}g_TexturePositions.Entities[Entities.B_SheepPasture]={4,1}g_TexturePositions.Entities[Entities.U_SiegeEngineCart]={9,4}g_TexturePositions.Entities[Entities.U_Trebuchet]={9,1}g_TexturePositions.Needs[Needs.Medicine]={2,10}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_1]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_2]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_3]={4,7}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_1]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_2]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_3]={4,5}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_1]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_2]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_3]={4,6}g_TexturePositions.Buffs=g_TexturePositions.Buffs or{}g_TexturePositions.Buffs[Buffs.Buff_ClothesDiversity]={1,2}g_TexturePositions.Buffs[Buffs.Buff_EntertainmentDiversity]={1,4}g_TexturePositions.Buffs[Buffs.Buff_FoodDiversity]={1,1}g_TexturePositions.Buffs[Buffs.Buff_HygieneDiversity]={1,3}g_TexturePositions.Buffs[Buffs.Buff_Colour]={5,11}g_TexturePositions.Buffs[Buffs.Buff_Entertainers]={5,12}g_TexturePositions.Buffs[Buffs.Buff_ExtraPayment]={1,8}g_TexturePositions.Buffs[Buffs.Buff_Sermon]={4,14}g_TexturePositions.Buffs[Buffs.Buff_Spice]={5,10}g_TexturePositions.Buffs[Buffs.Buff_NoTaxes]={1,6}g_TexturePositions.GoodCategories=g_TexturePositions.GoodCategories or{}g_TexturePositions.GoodCategories[GoodCategories.GC_Ammunition]={10,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Animal]={4,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Clothes]={1,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Document]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Entertainment]={1,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Food]={1,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Gold]={1,8}g_TexturePositions.GoodCategories[GoodCategories.GC_Hygiene]={16,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Luxury]={16,3}g_TexturePositions.GoodCategories[GoodCategories.GC_Medicine]={2,10}g_TexturePositions.GoodCategories[GoodCategories.GC_None]={15,16}g_TexturePositions.GoodCategories[GoodCategories.GC_RawFood]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_RawMedicine]={2,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Research]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Resource]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Tools]={4,12}g_TexturePositions.GoodCategories[GoodCategories.GC_Water]={1,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Weapon]={8,5}end;function Lib.Promotion.Config:InitTexturePositionsAddon()if Framework.GetGameExtraNo()~=0 then g_TexturePositions.Entities[Entities.B_GrainField_AS]={1,13}g_TexturePositions.Entities[Entities.B_Outpost_AS]={12,3}g_TexturePositions.Buffs[Buffs.Buff_Gems]={1,1,1}g_TexturePositions.Buffs[Buffs.Buff_MusicalInstrument]={1,3,1}g_TexturePositions.Buffs[Buffs.Buff_Olibanum]={1,2,1}end end;Lib.Promotion.Local.RequirementWidgets={[1]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Settlers",[2]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Goods",[3]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/RichBuildings",[4]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Castle",[5]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Storehouse",[6]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Cathedral"}Lib.Promotion.Local.GoodCategoryNames={[GoodCategories.GC_Ammunition]={de="Munition",en="Ammunition",fr="Munition"},[GoodCategories.GC_Animal]={de="Nutztiere",en="Livestock",fr="Animaux d'élevage"},[GoodCategories.GC_Clothes]={de="Kleidung",en="Clothes",fr="Vêtements"},[GoodCategories.GC_Document]={de="Dokumente",en="Documents",fr="Documents"},[GoodCategories.GC_Entertainment]={de="Unterhaltung",en="Entertainment",fr="Divertissement"},[GoodCategories.GC_Food]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_Gold]={de="Gold",en="Gold",fr="Or"},[GoodCategories.GC_Hygiene]={de="Hygieneartikel",en="Hygiene",fr="Hygiène"},[GoodCategories.GC_Luxury]={de="Dekoration",en="Decoration",fr="Décoration"},[GoodCategories.GC_Medicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_None]={de="Nichts",en="None",fr="Rien"},[GoodCategories.GC_RawFood]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_RawMedicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_Research]={de="Forschung",en="Research",fr="Recherche"},[GoodCategories.GC_Resource]={de="Rohstoffe",en="Resource",fr="Ressources"},[GoodCategories.GC_Tools]={de="Werkzeug",en="Tools",fr="Outils"},[GoodCategories.GC_Water]={de="Wasser",en="Water",fr="Eau"},[GoodCategories.GC_Weapon]={de="Waffen",en="Weapon",fr="Armes"}}Lib.Promotion.Local.BuffTypeNames={[Buffs.Buff_ClothesDiversity]={de="Vielfältige Kleidung",en="Clothes variety",fr="Diversité vestimentaire"},[Buffs.Buff_Colour]={de="Farben beschaffen",en="Obtain color",fr="Se procurer des couleurs"},[Buffs.Buff_Entertainers]={de="Gaukler anheuern",en="Hire entertainer",fr="Engager des saltimbanques"},[Buffs.Buff_EntertainmentDiversity]={de="Vielfältige Unterhaltung",en="Entertainment variety",fr="Diversité des divertissements"},[Buffs.Buff_ExtraPayment]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},[Buffs.Buff_Festival]={de="Fest veranstalten",en="Hold Festival",fr="Organiser une fête"},[Buffs.Buff_FoodDiversity]={de="Vielfältige Nahrung",en="Food variety",fr="Diversité alimentaire"},[Buffs.Buff_HygieneDiversity]={de="Vielfältige Hygiene",en="Hygiene variety",fr="Diversité hygiénique"},[Buffs.Buff_NoTaxes]={de="Steuerbefreiung",en="No taxes",fr="Exonération fiscale"},[Buffs.Buff_Sermon]={de="Pregigt abhalten",en="Hold sermon",fr="Tenir des prêches"},[Buffs.Buff_Spice]={de="Salz beschaffen",en="Obtain salt",fr="Se procurer du sel"}}Lib.Promotion.Local.Description={Settlers={Title={de="Benötigte Siedler",en="Needed settlers",fr="Settlers nécessaires"},Text={de="- Benötigte Menge an Siedlern",en="- Needed number of settlers",fr="- Quantité de settlers nécessaire"}},RichBuildings={Title={de="Reiche Häuser",en="Rich city buildings",fr="Bâtiments riches"},Text={de="- Menge an reichen Stadtgebäuden",en="- Needed amount of rich city buildings",fr="- Quantité de bâtiments de la ville riches"}},Goods={Title={de="Waren lagern",en="Store Goods",fr="Entreposer des marchandises"},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},FullDecoratedBuildings={Title={de="Dekorierte Häuser",en="Decorated City buildings",fr="Bâtiments décorés"},Text={de="- Menge an voll dekorierten Gebäuden",en="- Amount of full decoraded city buildings",fr="- Quantité de bâtiments entièrement décorés"}},DecoratedBuildings={Title={de="Dekoration",en="Decoration",fr="Décoration"},Text={de="- Menge an Dekorationsgütern in der Siedlung",en="- Amount of decoration goods in settlement",fr="- Quantité de biens de décoration dans la ville"}},Headquarters={Title={de="Burgstufe",en="Castle level",fr="Niveau du château"},Text={de="- Benötigte Ausbauten der Burg",en="- Needed castle upgrades",fr="- Améliorations nécessaires du château"}},Storehouse={Title={de="Lagerhausstufe",en="Storehouse level",fr="Niveau de l'entrepôt"},Text={de="- Benötigte Ausbauten des Lagerhauses",en="- Needed storehouse upgrades",fr="- Améliorations nécessaires de l'entrepôt"}},Cathedrals={Title={de="Kirchenstufe",en="Cathedral level",fr="Niveau de la cathédrale"},Text={de="- Benötigte Ausbauten der Kirche",en="- Needed cathedral upgrades",fr="- Améliorations nécessaires de la cathédrale"}},Reputation={Title={de="Ruf der Stadt",en="City reputation",fr="Réputation de la ville"},Text={de="- Benötigter Ruf der Stadt",en="- Needed city reputation",fr="- Réputation de la ville nécessaire"}},EntityCategoryDefault={Title={de="",en="",fr=""},Text={de="- Benötigte Anzahl",en="- Needed amount",fr="- Nombre requis"}},Cattle={Title={de="Kühe",en="Cattle",fr="Vaches"},Text={de="- Benötigte Menge an Kühen",en="- Needed amount of cattle",fr="- Quantité de vaches nécessaire"}},Sheep={Title={de="Schafe",en="Sheeps",fr="Moutons"},Text={de="- Benötigte Menge an Schafen",en="- Needed amount of sheeps",fr="- Quantité de moutons nécessaire"}},Outposts={Title={de="Territorien",en="Territories",fr="Territoires"},Text={de="- Zu erobernde Territorien",en="- Territories to claim",fr="- Territoires à conquérir"}},CityBuilding={Title={de="Stadtgebäude",en="City buildings",fr="Bâtiment de la ville"},Text={de="- Menge benötigter Stadtgebäude",en="- Needed amount of city buildings",fr="- Quantité de bâtiments urbains nécessaires"}},OuterRimBuilding={Title={de="Rohstoffgebäude",en="Gatherer",fr="Cueilleur"},Text={de="- Menge benötigter Rohstoffgebäude",en="- Needed amount of gatherer",fr="- Quantité de bâtiments de matières premières nécessaires"}},FarmerBuilding={Title={de="Farmeinrichtungen",en="Farming structure",fr="Installations de la ferme"},Text={de="- Menge benötigter Nutzfläche",en="- Needed amount of farming structure",fr="- Quantité de surface utile nécessaire"}},Consume={Title={de="",en="",fr=""},Text={de="- Durch Siedler zu konsumierende Menge",en="- Amount to be consumed by the settlers",fr="- Quantité à consommer par les settlers"}},Products={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},Buff={Title={de="Bonus aktivieren",en="Activate Buff",fr="Activer bonus"},Text={de="- Aktiviere diesen Bonus auf den Ruf der Stadt",en="- Raise the city reputatition with this buff",fr="- Active ce bonus sur la réputation de la ville"}},Leader={Title={de="Batalione",en="Battalions",fr="Battalions"},Text={de="- Menge an Batalionen unterhalten",en="- Battalions you need under your command",fr="- Maintenir une quantité de bataillons"}},Soldiers={Title={de="Soldaten",en="Soldiers",fr="Soldats"},Text={de="- Menge an Streitkräften unterhalten",en="- Soldiers you need under your command",fr="- Maintenir une quantité de forces armées"}},Worker={Title={de="Arbeiter",en="Workers",fr="Travailleurs"},Text={de="- Menge an arbeitender Bevölkerung",en="- Workers you need under your reign",fr="- Quantité de population au travail"}},Entities={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed Amount",fr="- Quantité nécessaire"}},Buildings={Title={de="Gebäude",en="Buildings",fr="Bâtiments"},Text={de="- Gesamtmenge an Gebäuden",en="- Amount of buildings",fr="- Total des bâtiments"}},Weapons={Title={de="Waffen",en="Weapons",fr="Armes"},Text={de="- Benötigte Menge an Waffen",en="- Needed amount of weapons",fr="- Quantité d'armes nécessaire"}},HeavyWeapons={Title={de="Belagerungsgeräte",en="Siege Engines",fr="Matériel de siège"},Text={de="- Benötigte Menge an Belagerungsgeräten",en="- Needed amount of siege engine",fr="- Quantité de matériel de siège nécessaire"}},Spouse={Title={de="Ehefrauen",en="Spouses",fr="Épouses"},Text={de="- Benötigte Anzahl Ehefrauen in der Stadt",en="- Needed amount of spouses in your city",fr="- Nombre d'épouses nécessaires dans la ville"}}}Lib.Register("module/promotion/Promotion_Helper")Lib.Promotion.Helper={}Lib.Promotion.Helper.OverwritePromotionHelper=function()DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist;DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist;DoesNeededNumberOfGoodTypesForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist;DoNeededNumberOfConsumedGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist;DoNumberOfProductsInCategoryExist=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist;DoNeededDiversityBuffForKnightTitleExist=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist;DoCustomFunctionForKnightTitleSucceed=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed;DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist;DoNeededSpecialBuildingUpgradeForKnightTitleExist=Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist;DoesNeededCityReputationForKnightTitleExist=Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist;DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist;DoNeededNumberOfRichBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist;DoNeededNumberOfGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist;DoesNeededNumberOfSettlersForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist;CanKnightBePromoted=Lib.Promotion.Helper.CanKnightBePromoted;VictroryBecauseOfTitle=Lib.Promotion.Helper.VictroryBecauseOfTitle end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].Category==nil then return end;if hS then local hJ=KnightTitleRequirements[mN].Category[hS][1]local hI=KnightTitleRequirements[mN].Category[hS][2]local mO=0;if hJ==EntityCategories.Spouse then mO=Logic.GetNumberOfSpouses(V)else local k9={Logic.GetPlayerEntitiesInCategory(V,hJ)}for f=1,#k9 do if Logic.IsBuilding(k9[f])==1 then if Logic.IsConstructionComplete(k9[f])==1 then mO=mO+1 end else mO=mO+1 end end end;if mO>=hI then return true,mO,hI end;return false,mO,hI else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Category do mP,mQ,mR=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].Entities==nil then return end;if hS then local bh=KnightTitleRequirements[mN].Entities[hS][1]local hI=KnightTitleRequirements[mN].Entities[hS][2]local k9=GetPlayerEntities(V,bh)local mO=0;for f=1,#k9 do if Logic.IsBuilding(k9[f])==1 then if Logic.IsConstructionComplete(k9[f])==1 then mO=mO+1 end else mO=mO+1 end end;if mO>=hI then return true,mO,hI end;return false,mO,hI else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Entities do mP,mQ,mR=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].Goods==nil then return end;if hS then local hK=KnightTitleRequirements[mN].Goods[hS][1]local hI=KnightTitleRequirements[mN].Goods[hS][2]local mO=GetPlayerGoodsInSettlement(hK,V,true)if mO>=hI then return true,mO,hI end;return false,mO,hI else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Goods do mP,mQ,mR=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].Consume==nil then return end;if hS then CONST_CONSUMED_GOODS_COUNTER[V]=CONST_CONSUMED_GOODS_COUNTER[V]or{}local hK=KnightTitleRequirements[mN].Consume[hS][1]local bQ=CONST_CONSUMED_GOODS_COUNTER[V][hK]or 0;local mS=KnightTitleRequirements[mN].Consume[hS][2]if bQ>=mS then return true,bQ,mS else return false,bQ,mS end else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Consume do mP,mQ,mR=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist(V,mN,f)if mP==false then return false,mQ,mR end end;return true,mQ,mR end end;Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist=function(V,mN,hS)if KnightTitleRequirements[mN].Products==nil then return end;if hS then local bQ=0;local mT=KnightTitleRequirements[mN].Products[hS][2]local mU=KnightTitleRequirements[mN].Products[hS][1]local mV={Logic.GetGoodTypesInGoodCategory(mU)}for f=1,#mV do bQ=bQ+GetPlayerGoodsInSettlement(mV[f],V,true)end;return bQ>=mT,bQ,mT else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Products do mP,mQ,mR=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].Buff==nil then return end;if hS then local mW=KnightTitleRequirements[mN].Buff[hS]if Logic.GetBuff(V,mW)and Logic.GetBuff(V,mW)~=0 then return true end;return false else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Buff do mP,mQ,mR=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed=function(V,mN,hS)if KnightTitleRequirements[mN].Custom==nil then return end;if hS then return KnightTitleRequirements[mN].Custom[hS][1](V,mN,hS)else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].Custom do mP,mQ,mR=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=function(V,mN,hS)if KnightTitleRequirements[mN].DecoratedBuildings==nil then return end;if hS then local mX={Logic.GetPlayerEntitiesInCategory(V,EntityCategories.CityBuilding)}local mY=KnightTitleRequirements[mN].DecoratedBuildings[hS][1]local mZ=KnightTitleRequirements[mN].DecoratedBuildings[hS][2]local m_=0;for f=1,#mX do local cs=mX[f]local n0=Logic.GetBuildingWealthGoodState(cs,mY)if n0>0 then m_=m_+1 end end;if m_>=mZ then return true,m_,mZ else return false,m_,mZ end else local mP,mQ,mR;for f=1,#KnightTitleRequirements[mN].DecoratedBuildings do mP,mQ,mR=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(V,mN,f)if mP==false then return mP,mQ,mR end end;return mP end end;Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist=function(V,mN,n1)local n2;local n3;if n1==EntityCategories.Headquarters then n2=Logic.GetHeadquarters(V)n3="Headquarters"elseif n1==EntityCategories.Storehouse then n2=Logic.GetStoreHouse(V)n3="Storehouse"elseif n1==EntityCategories.Cathedrals then n2=Logic.GetCathedral(V)n3="Cathedrals"else return end;if KnightTitleRequirements[mN][n3]==nil then return end;local n4=KnightTitleRequirements[mN][n3]if n2~=nil then local n5=Logic.GetUpgradeLevel(n2)if n5>=n4 then return true,n5,n4 else return false,n5,n4 end else return false,0,n4 end end;Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist=function(V,mN)if KnightTitleRequirements[mN].Reputation==nil then return end;local hI=KnightTitleRequirements[mN].Reputation;if not hI then return end;local mO=math.floor(Logic.GetCityReputation(V)*100+0.5)if mO>=hI then return true,mO,hI end;return false,mO,hI end;Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=function(V,mN)if KnightTitleRequirements[mN].FullDecoratedBuildings==nil then return end;local mX={Logic.GetPlayerEntitiesInCategory(V,EntityCategories.CityBuilding)}local mZ=KnightTitleRequirements[mN].FullDecoratedBuildings;local m_=0;for f=1,#mX do local cs=mX[f]local n6=0;if Logic.GetBuildingWealthGoodState(cs,Goods.G_Banner)>0 then n6=n6+1 end;if Logic.GetBuildingWealthGoodState(cs,Goods.G_Sign)>0 then n6=n6+1 end;if Logic.GetBuildingWealthGoodState(cs,Goods.G_Candle)>0 then n6=n6+1 end;if Logic.GetBuildingWealthGoodState(cs,Goods.G_Ornament)>0 then n6=n6+1 end;if n6>=4 then m_=m_+1 end end;if m_>=mZ then return true,m_,mZ else return false,m_,mZ end end;Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist=function(V,mN)if KnightTitleRequirements[mN].RichBuildings==nil then return end;local n7=Logic.GetNumberOfProsperBuildings(V,1)local n8=KnightTitleRequirements[mN].RichBuildings;if n8==-1 then n8=Logic.GetNumberOfPlayerEntitiesInCategory(V,EntityCategories.CityBuilding)n8=n8-Logic.GetNumberOfEntitiesOfTypeOfPlayer(V,Entities.B_Barracks)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(V,Entities.B_BarracksArchers)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(V,Entities.B_SiegeEngineWorkshop)end;if n7>=n8 then return true,n7,n8 else return false,n7,n8 end end;Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist=function(V,mN)if KnightTitleRequirements[mN].Good==nil then return end;local hJ=KnightTitleRequirements[mN].Good[1]local hM={Logic.GetPlayerEntitiesInCategory(V,hJ)}local bQ=0;for f=1,#hM do local B=hM[f]local bh=Logic.GetEntityType(B)if bh~=Entities.B_TableBeer and bh~=Entities.B_Marketslot and Logic.IsEntityTypeInCategory(bh,EntityCategories.Marketplace)==0 and Logic.IsKnight(B)==false then local n9=Logic.GetAmountOnOutStockByIndex(B,0)bQ=bQ+n9 end end;local mS=KnightTitleRequirements[mN].Good[2]if bQ>=mS then return true,bQ,mS else return false,bQ,mS end end;Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist=function(V,mN)if KnightTitleRequirements[mN].Settlers==nil then return end;local na=KnightTitleRequirements[mN].Settlers;if na~=nil then local nb=Logic.GetNumberOfEmployedWorkers(V)if nb>=na then return true,nb,na else return false,nb,na end end end;Lib.Promotion.Helper.CanKnightBePromoted=function(V,mN)if mN==nil then mN=Logic.GetKnightTitle(V)+1 end;if Logic.CanStartFestival(V,1)==true then if KnightTitleRequirements[mN]~=nil and DoesNeededNumberOfSettlersForKnightTitleExist(V,mN)~=false and DoNeededNumberOfGoodsForKnightTitleExist(V,mN)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(V,mN,EntityCategories.Headquarters)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(V,mN,EntityCategories.Storehouse)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(V,mN,EntityCategories.Cathedrals)~=false and DoNeededNumberOfRichBuildingsForKnightTitleExist(V,mN)~=false and DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(V,mN)~=false and DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(V,mN)~=false and DoesNeededCityReputationForKnightTitleExist(V,mN)~=false and DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(V,mN)~=false and DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(V,mN)~=false and DoesNeededNumberOfGoodTypesForKnightTitleExist(V,mN)~=false and DoNeededDiversityBuffForKnightTitleExist(V,mN)~=false and DoCustomFunctionForKnightTitleSucceed(V,mN)~=false and DoNeededNumberOfConsumedGoodsForKnightTitleExist(V,mN)~=false and DoNumberOfProductsInCategoryExist(V,mN)~=false then return true end end;return false end;Lib.Promotion.Helper.VictroryBecauseOfTitle=function()QuestTemplate:TerminateEventsAndStuff()Victory(g_VictoryAndDefeatType.VictoryMissionComplete)end;Lib.Register("module/promotion/Promotion_Requirements")Lib.Promotion.Requirements={}InitKnightTitleTables=function()NeedsAndRightsByKnightTitle={}KnightTitleRequirements={}end;Lib.Promotion.Requirements.InitKnightTitleTables=function()KnightTitles={}KnightTitles.Knight=0;KnightTitles.Mayor=1;KnightTitles.Baron=2;KnightTitles.Earl=3;KnightTitles.Marquees=4;KnightTitles.Duke=5;KnightTitles.Archduke=6;NeedsAndRightsByKnightTitle={}NeedsAndRightsByKnightTitle[KnightTitles.Knight]={ActivateNeedForPlayer,{Needs.Nutrition,Needs.Medicine},ActivateRightForPlayer,{Technologies.R_Gathering,Technologies.R_Woodcutter,Technologies.R_StoneQuarry,Technologies.R_HuntersHut,Technologies.R_FishingHut,Technologies.R_CattleFarm,Technologies.R_GrainFarm,Technologies.R_SheepFarm,Technologies.R_IronMine,Technologies.R_Beekeeper,Technologies.R_HerbGatherer,Technologies.R_Nutrition,Technologies.R_Bakery,Technologies.R_Dairy,Technologies.R_Butcher,Technologies.R_SmokeHouse,Technologies.R_Clothes,Technologies.R_Tanner,Technologies.R_Weaver,Technologies.R_Construction,Technologies.R_Trail,Technologies.R_KnockDown,Technologies.R_Sermon}}NeedsAndRightsByKnightTitle[KnightTitles.Mayor]={ActivateNeedForPlayer,{Needs.Clothes},ActivateRightForPlayer,{Technologies.R_Military,Technologies.R_MilitarySword,Technologies.R_Thieves,Technologies.R_Hygiene,Technologies.R_Soapmaker,Technologies.R_BroomMaker,Technologies.R_SpecialEdition,Technologies.R_SpecialEdition_Pavilion,Technologies.R_SpecialEdition_StatueFamily},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Baron]={ActivateNeedForPlayer,{Needs.Hygiene},ActivateRightForPlayer,{Technologies.R_SiegeEngineWorkshop,Technologies.R_BatteringRam,Technologies.R_Pallisade,Technologies.R_Medicine,Technologies.R_Entertainment,Technologies.R_Tavern,Technologies.R_Street,Technologies.R_Festival,Technologies.R_SpecialEdition_Column},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Earl]={ActivateNeedForPlayer,{Needs.Entertainment,Needs.Prosperity},ActivateRightForPlayer,{Technologies.R_MilitaryBow,Technologies.R_Baths,Technologies.R_Prosperity,Technologies.R_Taxes,Technologies.R_SpecialEdition_StatueSettler,Technologies.R_BowMaker,Technologies.R_BarracksArchers},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Marquees]={ActivateNeedForPlayer,{Needs.Wealth},ActivateRightForPlayer,{Technologies.R_Theater,Technologies.R_Wealth,Technologies.R_BannerMaker,Technologies.R_SiegeTower,Technologies.R_Wall,Technologies.R_Ballista,Technologies.R_AmmunitionCart,Technologies.R_SpecialEdition_StatueProduction},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Duke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Catapult,Technologies.R_Carpenter,Technologies.R_CandleMaker,Technologies.R_Blacksmith,Technologies.R_SpecialEdition_StatueDario},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Archduke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Victory},StartKnightsPromotionCelebration}if Framework.GetGameExtraNo()>=1 then local nc=4;table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][nc],Technologies.R_Cistern)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][nc],Technologies.R_Beautification_Brazier)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][nc],Technologies.R_Beautification_Shrine)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][nc],Technologies.R_Beautification_Pillar)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][nc],Technologies.R_Beautification_StoneBench)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][nc],Technologies.R_Beautification_Sundial)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Marquees][nc],Technologies.R_Beautification_Vase)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Duke][nc],Technologies.R_Beautification_VictoryColumn)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Archduke][nc],Technologies.R_Beautification_TriumphalArch)end;KnightTitleRequirements={}KnightTitleRequirements[KnightTitles.Mayor]={}KnightTitleRequirements[KnightTitles.Mayor].Headquarters=1;KnightTitleRequirements[KnightTitles.Mayor].Settlers=10;KnightTitleRequirements[KnightTitles.Mayor].Products={{GoodCategories.GC_Clothes,6}}KnightTitleRequirements[KnightTitles.Baron]={}KnightTitleRequirements[KnightTitles.Baron].Settlers=30;KnightTitleRequirements[KnightTitles.Baron].Headquarters=1;KnightTitleRequirements[KnightTitles.Baron].Storehouse=1;KnightTitleRequirements[KnightTitles.Baron].Cathedrals=1;KnightTitleRequirements[KnightTitles.Baron].Products={{GoodCategories.GC_Hygiene,12}}KnightTitleRequirements[KnightTitles.Earl]={}KnightTitleRequirements[KnightTitles.Earl].Settlers=50;KnightTitleRequirements[KnightTitles.Earl].Headquarters=2;KnightTitleRequirements[KnightTitles.Earl].Goods={{Goods.G_Beer,18}}KnightTitleRequirements[KnightTitles.Marquees]={}KnightTitleRequirements[KnightTitles.Marquees].Settlers=70;KnightTitleRequirements[KnightTitles.Marquees].Headquarters=2;KnightTitleRequirements[KnightTitles.Marquees].Storehouse=2;KnightTitleRequirements[KnightTitles.Marquees].Cathedrals=2;KnightTitleRequirements[KnightTitles.Marquees].RichBuildings=20;KnightTitleRequirements[KnightTitles.Duke]={}KnightTitleRequirements[KnightTitles.Duke].Settlers=90;KnightTitleRequirements[KnightTitles.Duke].Storehouse=2;KnightTitleRequirements[KnightTitles.Duke].Cathedrals=2;KnightTitleRequirements[KnightTitles.Duke].Headquarters=3;KnightTitleRequirements[KnightTitles.Duke].DecoratedBuildings={{Goods.G_Banner,9}}KnightTitleRequirements[KnightTitles.Archduke]={}KnightTitleRequirements[KnightTitles.Archduke].Settlers=150;KnightTitleRequirements[KnightTitles.Archduke].Storehouse=3;KnightTitleRequirements[KnightTitles.Archduke].Cathedrals=3;KnightTitleRequirements[KnightTitles.Archduke].Headquarters=3;KnightTitleRequirements[KnightTitles.Archduke].RichBuildings=30;KnightTitleRequirements[KnightTitles.Archduke].FullDecoratedBuildings=30;CreateTechnologyKnightTitleTable()end;Lib.Register("module/quest/Quest_API")function SetupQuest(dx)if GUI then return end;error(not dx.Name or not Quests[GetQuestID(dx.Name)],"SetupQuest: A quest named '%s' already exists!",tostring(dx.Name))return Lib.Quest.Global:CreateSimpleQuest(dx)end;API.CreateQuest=SetupQuest;function SetupNestedQuest(dx)if GUI or type(dx)~="table"then return end;error(dx.Segments~=nil and#dx.Segments~=0,"SetupNestedQuest: Segmented quest '%s' is missing it's segments!",tostring(dx.Name))return Lib.Quest.Global:CreateNestedQuest(dx)end;API.CreateNestedQuest=SetupNestedQuest;function AddDisableTriggerCondition(kH)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTriggerConditions,kH)end;API.AddDisableTriggerCondition=AddDisableTriggerCondition;function AddDisableTimerCondition(kH)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTimerConditions,kH)end;API.AddDisableTimerCondition=AddDisableTimerCondition;function AddDisableDecisionCondition(kH)if GUI then return end;table.insert(Lib.Quest.Global.ExternalDecisionConditions,kH)end;API.AddDisableDecisionCondition=AddDisableDecisionCondition;Lib.Require("comfort/IsLocalScript")Lib.Register("module/quest/QuestJornal_API")function ShowJournalForQuest(hs,hg)assert(not IsLocalScript(),"Can not be used in local script!")local ft=Quests[GetQuestID(hs)]if ft then ft.QuestNotes=hg==true end end;function AllowNotesForQuest(hs,hg)assert(not IsLocalScript(),"Can not be used in local script!")local ft=Quests[GetQuestID(hs)]if ft then Lib.QuestJornal.Global.CustomInputAllowed[hs]=hg==true end end;function CreateJournalEntry(aJ)assert(not IsLocalScript(),"Can not be used in local script!")aJ=aJ:gsub("{@[A-Za-z0-9:,]+}","")aJ=aJ:gsub("{[A-Za-z0-9_]+}","")return Lib.QuestJornal.Global:CreateJournalEntry(aJ,0,false)end;function AlterJournalEntry(ah,aJ)assert(not IsLocalScript(),"Can not be used in local script!")aJ=aJ:gsub("{@[A-Za-z0-9:,]+}","")aJ=aJ:gsub("{[A-Za-z0-9_]+}","")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:UpdateJournalEntry(ah,aJ,dA.Rank,dA.AlwaysVisible,dA.Deleted)end end;function HighlightJournalEntry(ah,nd)assert(not IsLocalScript(),"Can not be used in local script!")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:UpdateJournalEntry(ah,dA[1],nd==true and 1 or 0,dA.AlwaysVisible,dA.Deleted)end end;function DeleteJournalEntry(ah)assert(not IsLocalScript(),"Can not be used in local script!")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:UpdateJournalEntry(ah,dA[1],dA.Rank,dA.AlwaysVisible,true)end end;function RestoreJournalEntry(ah)assert(not IsLocalScript(),"Can not be used in local script!")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:UpdateJournalEntry(ah,dA[1],dA.Rank,dA.AlwaysVisible,false)end end;function AddJournalEntryToQuest(ah,hs)assert(not IsLocalScript(),"Can not be used in local script!")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(ah,hs,true)end end;function RemoveJournalEntryFromQuest(ah,hs)assert(not IsLocalScript(),"Can not be used in local script!")local dA=Lib.QuestJornal.Global:GetJournalEntry(ah)if dA then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(ah,hs,false)end end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/Sound/Sound_API")function StartEventPlaylist(ne,V)V=V or 1;if not GUI then ExecuteLocal("StartEventPlaylist('%s', %d)",ne,V)return end;if V==GUI.GetPlayerID()then Sound.MusicStartEventPlaylist(ne)end end;API.StartEventPlaylist=StartEventPlaylist;function StopEventPlaylist(ne,V)V=V or 1;if not GUI then ExecuteLocal("StopEventPlaylist('%s', %d)",ne,V)return end;if V==GUI.GetPlayerID()then Sound.MusicStopEventPlaylist(ne)end end;API.StopEventPlaylist=StopEventPlaylist;function Play2DSound(mb,V)V=V or 1;if not GUI then ExecuteLocal([[Play2DSound("%s", %d)]],mb,V)return end;if V==GUI.GetPlayerID()then Sound.FXPlay2DSound(mb:gsub("/","\\"))end end;API.Play2DSound=Play2DSound;function Play3DSound(mb,aX,aY,nf,V)V=V or 1;aX=aX or 1;aY=aY or 1;nf=nf or 0;if not GUI then ExecuteLocal([[Play3DSound("%s", %f, %f, %d)]],mb,aX,aY,V)return end;if V==GUI.GetPlayerID()then Sound.FXPlay3DSound(mb:gsub("/","\\"),aX,aY,nf)end end;API.Play3DSound=Play3DSound;function SoundSetVolume(ng)ng=ng<0 and 0 or math.floor(ng)if not GUI then ExecuteLocal("SoundSetVolume(%d)",ng)return end;Lib.Sound.Local:AdjustSound(ng,nil,nil,nil,nil)end;API.SoundSetVolume=SoundSetVolume;function SoundSetMusicVolume(ng)ng=ng<0 and 0 or math.floor(ng)if not GUI then ExecuteLocal("SoundSetMusicVolume(%d)",ng)return end;Lib.Sound.Local:AdjustSound(nil,ng,nil,nil,nil)end;API.SoundSetMusicVolume=SoundSetMusicVolume;function SoundSetVoiceVolume(ng)ng=ng<0 and 0 or math.floor(ng)if not GUI then ExecuteLocal("SoundSetVoiceVolume(%d)",ng)return end;Lib.Sound.Local:AdjustSound(nil,nil,ng,nil,nil)end;API.SoundSetVoiceVolume=SoundSetVoiceVolume;function SoundSetAtmoVolume(ng)ng=ng<0 and 0 or math.floor(ng)if not GUI then ExecuteLocal("SoundSetAtmoVolume(%d)",ng)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,ng,nil)end;API.SoundSetAtmoVolume=SoundSetAtmoVolume;function SoundSetUIVolume(ng)ng=ng<0 and 0 or math.floor(ng)if not GUI then ExecuteLocal("SoundSetUIVolume(%d)",ng)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,nil,ng)end;API.SoundSetUIVolume=SoundSetUIVolume;function SoundSave()if not GUI then Logic.ExecuteInLuaLocalState("SoundSave()")return end;Lib.Sound.Local:SaveSound()end;API.SoundSave=SoundSave;function SoundRestore()if not GUI then ExecuteLocal("SoundRestore()")return end;Lib.Sound.Local:RestoreSound()end;API.SoundRestore=SoundRestore;function PlayVoice(nh)if not GUI then ExecuteLocal([[PlayVoice("%s")]],nh)return end;StopVoice()Sound.PlayVoice("ImportantStuff",nh)end;API.PlayVoice=PlayVoice;function StopVoice()if not GUI then ExecuteLocal("StopVoice()")return end;Sound.StopVoice("ImportantStuff")end;API.StopVoice=StopVoice;Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Warehouse_API")function CreateWarehouse(dx)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:CreateWarehouse(dx)end;API.CreateWarehouse=CreateWarehouse;function CreateWarehouseOffer(j,am,ni,nj,iX,iY,iZ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Warehouse.Global:CreateOffer(j,am,ni,nj,iX,iY,iZ)end;API.CreateWarehouseOffer=CreateWarehouseOffer;function RemoveWarehouseOffer(j,ah)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:RemoveOffer(j,ah)end;API.RemoveWarehouseOffer=RemoveWarehouseOffer;function DeactivateWarehouseOffer(j,ah,nk)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:ActivateOffer(j,ah,not nk)end;API.DeactivateWarehouseOffer=DeactivateWarehouseOffer;function GetWarehouseInflation(V,ni)if IsLocalScript()then return Lib.Warehouse.Local:GetInflation(V,ni)end;return Lib.Warehouse.Global:GetInflation(V,ni)end;API.GetWarehouseInflation=GetWarehouseInflation;function SetWarehouseInflation(V,ni,j6)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:SetInflation(V,ni,j6)end;API.SetWarehouseInflation=SetWarehouseInflation;function GetWarehouseOfferByID(j,ah)if IsLocalScript()then return Lib.Warehouse.Local:GetOfferByID(j,ah)end;return Lib.Warehouse.Global:GetOfferByID(j,ah)end;API.GetWarehouseOfferByID=GetWarehouseOfferByID;function GetActivWarehouseOffers(j,j3)if IsLocalScript()then return Lib.Warehouse.Local:GetActivOffers(j,j3)end;return Lib.Warehouse.Global:GetActivOffers(j,j3)end;API.GetActivWarehouseOffers=GetActivWarehouseOffers;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_API")function AddBuildingButtonAtPosition(aX,aY,fG,nl,nm)return Lib.UIBuilding.Local:AddButtonBinding(0,aX,aY,fG,nl,nm)end;API.AddBuildingButtonAtPosition=AddBuildingButtonAtPosition;function AddBuildingButton(fG,nl,nm)return AddBuildingButtonAtPosition(nil,nil,fG,nl,nm)end;API.AddBuildingButton=AddBuildingButton;function AddBuildingButtonByTypeAtPosition(u,aX,aY,fG,nl,nm)return Lib.UIBuilding.Local:AddButtonBinding(u,aX,aY,fG,nl,nm)end;API.AddBuildingButtonByTypeAtPosition=AddBuildingButtonByTypeAtPosition;function AddBuildingButtonByType(u,fG,nl,nm)return AddBuildingButtonByTypeAtPosition(u,nil,nil,fG,nl,nm)end;API.AddBuildingButtonByType=AddBuildingButtonByType;function AddBuildingButtonByEntityAtPosition(fZ,aX,aY,fG,nl,nm)return Lib.UIBuilding.Local:AddButtonBinding(fZ,aX,aY,fG,nl,nm)end;API.AddBuildingButtonByEntityAtPosition=AddBuildingButtonByEntityAtPosition;function AddBuildingButtonByEntity(fZ,fG,nl,nm)return AddBuildingButtonByEntityAtPosition(fZ,nil,nil,fG,nl,nm)end;API.AddBuildingButtonByEntity=AddBuildingButtonByEntity;function DropBuildingButton(ah)Lib.UIBuilding.Local:RemoveButtonBinding(0,ah)end;API.DropBuildingButton=DropBuildingButton;function DropBuildingButtonFromType(u,ah)Lib.UIBuilding.Local:RemoveButtonBinding(u,ah)end;API.DropBuildingButtonFromType=DropBuildingButtonFromType;function DropBuildingButtonFromEntity(fZ,ah)Lib.UIBuilding.Local:RemoveButtonBinding(fZ,ah)end;API.DropBuildingButtonFromEntity=DropBuildingButtonFromEntity;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIEffects_API")function ActivateColoredScreen(V,nn,no,np,nq)ActivateImageScreen(V,"",nn or 0,no or 0,np or 0,nq or 255)end;API.ActivateColoredScreen=ActivateColoredScreen;function DeactivateColoredScreen(V)DeactivateImageScreen(V)end;API.DeactivateColoredScreen=DeactivateColoredScreen;function ActivateImageScreen(V,nr,nn,no,np,nq)assert(V and V>=1 and V<=8)if not IsLocalScript()then ExecuteLocal([[Lib.UIEffects.Local:InterfaceActivateImageBackground(%d, "%s", %d, %d, %d, %d)]],V,nr,nn~=nil and nn or 255,no~=nil and no or 255,np~=nil and np or 255,nq~=nil and nq or 255)return end;Lib.UIEffects.Local:InterfaceActivateImageBackground(V,nr,nn,no,np,nq)end;API.ActivateImageScreen=ActivateImageScreen;function DeactivateImageScreen(V)assert(V and V>=1 and V<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateImageBackground(%d)",V)return end;Lib.UIEffects.Local:InterfaceDeactivateImageBackground(V)end;API.DeactivateImageScreen=DeactivateImageScreen;function ActivateNormalInterface(V)assert(V and V>=1 and V<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceActivateNormalInterface(%d)",V)return end;Lib.UIEffects.Local:InterfaceActivateNormalInterface(V)end;API.ActivateNormalInterface=ActivateNormalInterface;function DeactivateNormalInterface(V)assert(V and V>=1 and V<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(%d)",V)return end;Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(V)end;API.DeactivateNormalInterface=DeactivateNormalInterface;function StartCinematicEvent(j,V)assert(IsLocalScript()==false)assert(V and V>=1 and V<=8)Lib.UIEffects.CinematicEvents[V]=Lib.UIEffects.CinematicEvents[V]or{}local _=Lib.UIEffects.Global:ActivateCinematicEvent(V)Lib.UIEffects.CinematicEvents[V][j]=_ end;API.StartCinematicEvent=StartCinematicEvent;function FinishCinematicEvent(j,V)assert(IsLocalScript()==false)assert(V and V>=1 and V<=8)Lib.UIEffects.CinematicEvents[V]=Lib.UIEffects.CinematicEvents[V]or{}if Lib.UIEffects.CinematicEvents[V][j]then Lib.UIEffects.Global:ConcludeCinematicEvent(Lib.UIEffects.CinematicEvents[V][j],V)end end;API.FinishCinematicEvent=FinishCinematicEvent;function GetCinematicEvent(ns,V)assert(V and V>=1 and V<=8)Lib.UIEffects.CinematicEvents[V]=Lib.UIEffects.CinematicEvents[V]or{}if type(ns)=="number"then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(ns)end;return Lib.UIEffects.Global:GetCinematicEventStatus(ns)end;if Lib.UIEffects.CinematicEvents[V][ns]then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[V][ns])end;return Lib.UIEffects.Global:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[V][ns])end;return CinematicEventState.NotTriggered end;API.GetCinematicEvent=GetCinematicEvent;function IsCinematicEventActive(V)assert(V and V>=1 and V<=8)Lib.UIEffects.CinematicEvents[V]=Lib.UIEffects.CinematicEvents[V]or{}for g,h in pairs(Lib.UIEffects.CinematicEvents[V])do if GetCinematicEvent(g,V)==CinematicEventState.Active then return true end end;return false end;API.IsCinematicEventActive=IsCinematicEventActive;function StartTypewriter(dx)if Framework.IsNetworkGame()~=true then dx.PlayerID=dx.PlayerID or 1 end;if dx.PlayerID==nil or(dx.PlayerID<1 or dx.PlayerID>8)then return end;dx.Text=Localize(dx.Text or"")dx.Callback=dx.Callback or function()end;dx.CharSpeed=dx.CharSpeed or 1;dx.Waittime=(dx.Waittime or 8)*10;dx.TargetEntity=GetID(dx.TargetEntity or 0)dx.Image=dx.Image or""dx.Color=dx.Color or{R=dx.Image and dx.Image~=""and 255 or 0,G=dx.Image and dx.Image~=""and 255 or 0,B=dx.Image and dx.Image~=""and 255 or 0,A=255}if dx.Opacity and dx.Opacity>=0 and dx.Opacity then dx.Color.A=math.floor(255*dx.Opacity+0.5)end;dx.Delay=15;dx.Index=0;return Lib.UIEffects.Global:StartTypewriter(dx)end;API.StartTypewriter=StartTypewriter;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UITools_API")function ChangeIcon(bS,nt,nu,j)error(IsLocalScript(),"Can only be done in local script!")nt=nt or{10,14}Lib.UITools.Widget:SetIcon(bS,nt,nu,j)end;API.SetIcon=ChangeIcon;function SetTooltipNormal(fF,aJ,nv)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipNormal(fF,aJ,nv)end;API.SetTooltipNormal=SetTooltipNormal;function SetTooltipCosts(fF,aJ,nv,gX,nw)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipCosts(fF,aJ,nv,gX,nw)end;API.SetTooltipCosts=SetTooltipCosts;function HideMinimap(hg)if not IsLocalScript()then ExecuteLocal("HideMinimap(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapOverlay",hg)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapTerrain",hg)end;API.HideMinimap=HideMinimap;function HideToggleMinimap(hg)if not IsLocalScript()then ExecuteLocal("HideToggleMinimap(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/MinimapButton",hg)end;API.HideToggleMinimap=HideToggleMinimap;function HideDiplomacyMenu(hg)if not IsLocalScript()then ExecuteLocal("HideDiplomacyMenu(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/DiplomacyMenuButton",hg)end;API.HideDiplomacyMenu=HideDiplomacyMenu;function HideProductionMenu(hg)if not IsLocalScript()then ExecuteLocal("HideProductionMenu(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/ProductionMenuButton",hg)end;API.HideProductionMenu=HideProductionMenu;function HideWeatherMenu(hg)if not IsLocalScript()then ExecuteLocal("HideWeatherMenu(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/WeatherMenuButton",hg)end;API.HideWeatherMenu=HideWeatherMenu;function HideBuyTerritory(hg)if not IsLocalScript()then ExecuteLocal("HideBuyTerritory(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory",hg)end;API.HideBuyTerritory=HideBuyTerritory;function HideKnightAbility(hg)if not IsLocalScript()then ExecuteLocal("HideKnightAbility(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbilityProgress",hg)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbility",hg)end;API.HideKnightAbility=HideKnightAbility;function HideKnightButton(hg)if not IsLocalScript()then ExecuteLocal("HideKnightButton(%s)",tostring(hg))Logic.SetEntitySelectableFlag("..KnightID..",hg and 0 or 1)return end;local d3=Logic.GetKnightID(GUI.GetPlayerID())if hg then GUI.DeselectEntity(d3)end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButtonProgress",hg)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButton",hg)end;API.HideKnightButton=HideKnightButton;function HideSelectionButton(hg)if not IsLocalScript()then ExecuteLocal("HideSelectionButton(%s)",tostring(hg))return end;HideKnightButton(hg)GUI.ClearSelection()Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/BattalionButton",hg)end;API.HideSelectionButton=HideSelectionButton;function HideBuildMenu(hg)if not IsLocalScript()then ExecuteLocal("HideBuildMenu(%s)",tostring(hg))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/BuildMenu",hg)end;API.HideBuildMenu=HideBuildMenu;function AddShortcutDescription(dg,g0)if not IsLocalScript()then return-1 end;g_KeyBindingsOptions.Descriptions=nil;for f=1,#Lib.UITools.Shortcut.HotkeyDescriptions do if Lib.UITools.Shortcut.HotkeyDescriptions[f][1]==dg then return-1 end end;local _=#Lib.UITools.Shortcut.HotkeyDescriptions+1;table.insert(Lib.UITools.Shortcut.HotkeyDescriptions,{ID=_,dg,g0})return#Lib.UITools.Shortcut.HotkeyDescriptions end;API.AddShortcutDescription=AddShortcutDescription;function RemoveShortcutDescription(ah)if not IsLocalScript()then return end;g_KeyBindingsOptions.Descriptions=nil;for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h.ID==ah then Lib.UITools.Shortcut.HotkeyDescriptions[g]=nil end end end;API.RemoveShortcutDescription=RemoveShortcutDescription;function SpeedLimitActivate(hg)if IsLocalScript()or Framework.IsNetworkGame()then return end;return ExecuteLocal("Lib.UITools.Speed:ActivateSpeedLimit(%s)",tostring(hg))end;API.SpeedLimitActivate=SpeedLimitActivate;function GetTerritoryName(nx)local Name=Logic.GetTerritoryName(nx)local ny=Framework.GetCurrentMapTypeAndCampaignName()if ny==1 or ny==3 then return Name end;local nz=Framework.GetCurrentMapName()local nA="Map_"..nz;local nB=string.gsub(Name," ","")nB=XGUIEng.GetStringTableText(nA.."/Territory_"..nB)if nB==""then nB=Name.."(key?)"end;return nB end;API.GetTerritoryName=GetTerritoryName;function GetPlayerName(V)local lv=Logic.GetPlayerName(V)local a2=CONST_PLAYER_NAMES[V]if a2~=nil and a2~=""then lv=a2 end;local ny=Framework.GetCurrentMapTypeAndCampaignName()local nC=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),ny)if nC>0 then return lv end;if ny==1 or ny==3 then local nD,nE,nF=Framework.GetPlayerInfo(V)if lv~=""then return lv end;return nD end;return lv end;API.GetPlayerName=GetPlayerName;function SetPlayerName(V,j)assert(type(V)=="number")assert(type(j)=="string")if not IsLocalScript()then ExecuteLocal([[SetPlayerName(%d, "%s")]],V,j)return end;GUI_MissionStatistic.PlayerNames[V]=j;CONST_PLAYER_NAMES[V]=j end;API.SetPlayerName=SetPlayerName;function SetPlayerColor(V,nG,nH,iB)error(not IsLocalScript(),"Player color must be set from logic!")g_ColorIndex["ExtraColor1"]=g_ColorIndex["ExtraColor1"]or 16;g_ColorIndex["ExtraColor2"]=g_ColorIndex["ExtraColor2"]or 17;local nI=type(nG)=="string"and g_ColorIndex[nG]or nG;local nJ=nH or-1;local nK=iB or-1;Logic.PlayerSetPlayerColor(V,nI,nJ,nK)ExecuteLocal([[
        Display.UpdatePlayerColors()
        GUI.RebuildMinimapTerrain()
        GUI.RebuildMinimapTerritory()
    ]])end;API.SetPlayerColor=SetPlayerColor;function SetPlayerPortrait(V,nL)error(V>=1 and V<=8,"Invalid player ID!")if not IsLocalScript()then local nM=nL~=nil and"'"..nL.."'"or"nil"ExecuteLocal("SetPlayerPortrait(%d, %s)",V,nM)return end;if nL==nil then Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(V)elseif nL~=nil and IsExisting(nL)then Lib.UITools.Player:SetPlayerPortraitBySettler(V,nL)else Lib.UITools.Player:SetPlayerPortraitByModelName(V,nL)end end;API.SetPlayerPortrait=SetPlayerPortrait;Lib.Register("module/ui/UITools_Player")Lib.UITools.Player={}function Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(V)local d3=Logic.GetKnightID(V)local nN="H_NPC_Generic_Trader"if d3~=0 then local hF=Logic.GetEntityType(d3)local nO=Logic.GetEntityTypeName(hF)nN="H"..string.sub(nO,2,8).."_"..string.sub(nO,9)if not Models["Heads_"..nN]then nN="H_NPC_Generic_Trader"end end;g_PlayerPortrait[V]=nN end;function Lib.UITools.Player:SetPlayerPortraitBySettler(V,nL)local nP={["U_KnightChivalry"]="H_Knight_Chivalry",["U_KnightHealing"]="H_Knight_Healing",["U_KnightPlunder"]="H_Knight_Plunder",["U_KnightRedPrince"]="H_Knight_RedPrince",["U_KnightSabatta"]="H_Knight_Sabatt",["U_KnightSong"]="H_Knight_Song",["U_KnightTrading"]="H_Knight_Trading",["U_KnightWisdom"]="H_Knight_Wisdom",["U_NPC_Amma_NE"]="H_NPC_Amma",["U_NPC_Castellan_ME"]="H_NPC_Castellan_ME",["U_NPC_Castellan_NA"]="H_NPC_Castellan_NA",["U_NPC_Castellan_NE"]="H_NPC_Castellan_NE",["U_NPC_Castellan_SE"]="H_NPC_Castellan_SE",["U_MilitaryBandit_Ranged_ME"]="H_NPC_Mercenary_ME",["U_MilitaryBandit_Melee_NA"]="H_NPC_Mercenary_NA",["U_MilitaryBandit_Melee_NE"]="H_NPC_Mercenary_NE",["U_MilitaryBandit_Melee_SE"]="H_NPC_Mercenary_SE",["U_NPC_Monk_ME"]="H_NPC_Monk_ME",["U_NPC_Monk_NA"]="H_NPC_Monk_NA",["U_NPC_Monk_NE"]="H_NPC_Monk_NE",["U_NPC_Monk_SE"]="H_NPC_Monk_SE",["U_NPC_Villager01_ME"]="H_NPC_Villager01_ME",["U_NPC_Villager01_NA"]="H_NPC_Villager01_NA",["U_NPC_Villager01_NE"]="H_NPC_Villager01_NE",["U_NPC_Villager01_SE"]="H_NPC_Villager01_SE"}if g_GameExtraNo>0 then nP["U_KnightPraphat"]="H_Knight_Praphat"nP["U_KnightSaraya"]="H_Knight_Saraya"nP["U_KnightKhana"]="H_Knight_Khana"nP["U_MilitaryBandit_Melee_AS"]="H_NPC_Mercenary_AS"nP["U_NPC_Castellan_AS"]="H_NPC_Castellan_AS"nP["U_NPC_Villager_AS"]="H_NPC_Villager_AS"nP["U_NPC_Monk_AS"]="H_NPC_Monk_AS"nP["U_NPC_Monk_Khana"]="H_NPC_Monk_Khana"end;local nN="H_NPC_Generic_Trader"local B=GetID(nL)if B~=0 then local bh=Logic.GetEntityType(B)local gl=Logic.GetEntityTypeName(bh)nN=nP[gl]or"H_NPC_Generic_Trader"if not nN then nN="H_NPC_Generic_Trader"end end;g_PlayerPortrait[V]=nN end;function Lib.UITools.Player:SetPlayerPortraitByModelName(V,nL)if not Models["Heads_"..tostring(nL)]then nL="H_NPC_Generic_Trader"end;g_PlayerPortrait[V]=nL end;Lib.Register("module/ui/UITools_Shortcut")Lib.UITools.Shortcut={HotkeyDescriptions={}}function Lib.UITools.Shortcut:OverrideRegisterHotkey()function g_KeyBindingsOptions:OnShow()if Game~=nil then XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",1)else XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",0)end;if g_KeyBindingsOptions.Descriptions==nil then g_KeyBindingsOptions.Descriptions={}DescRegister("MenuInGame")DescRegister("MenuDiplomacy")DescRegister("MenuProduction")DescRegister("MenuPromotion")DescRegister("MenuWeather")DescRegister("ToggleOutstockInformations")DescRegister("JumpMarketplace")DescRegister("JumpMinimapEvent")DescRegister("BuildingUpgrade")DescRegister("BuildLastPlaced")DescRegister("BuildStreet")DescRegister("BuildTrail")DescRegister("KnockDown")DescRegister("MilitaryAttack")DescRegister("MilitaryStandGround")DescRegister("MilitaryGroupAdd")DescRegister("MilitaryGroupSelect")DescRegister("MilitaryGroupStore")DescRegister("MilitaryToggleUnits")DescRegister("UnitSelect")DescRegister("UnitSelectToggle")DescRegister("UnitSelectSameType")DescRegister("StartChat")DescRegister("StopChat")DescRegister("QuickSave")DescRegister("QuickLoad")DescRegister("TogglePause")DescRegister("RotateBuilding")DescRegister("ExitGame")DescRegister("Screenshot")DescRegister("ResetCamera")DescRegister("CameraMove")DescRegister("CameraMoveMouse")DescRegister("CameraZoom")DescRegister("CameraZoomMouse")DescRegister("CameraRotate")for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h then h[1]=type(h[1])=="table"and Localize(h[1])or h[1]h[2]=type(h[2])=="table"and Localize(h[2])or h[2]table.insert(g_KeyBindingsOptions.Descriptions,1,h)end end end;XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ShortcutList)XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ActionList)for b5,lk in ipairs(g_KeyBindingsOptions.Descriptions)do XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ShortcutList,lk[1])XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ActionList,lk[2])end end end;Lib.Register("module/ui/UITools_Speed")Lib.UITools.Speed={SpeedLimit=1,Text={Message={NoSpeedUp={de="Die Spielgeschwindigkeit kann nicht erhöht werden!",en="The game speed can not be increased!",fr="La vitesse du jeu ne peut pas être augmentée!"}}}}function Lib.UITools.Speed:SetSpeedLimit(nQ)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;nQ=nQ<1 and 1 or math.floor(nQ)log("ModuleGuiControl: Setting speed limit to "..nQ)self.SpeedLimit=nQ end;function Lib.UITools.Speed:ActivateSpeedLimit(hg)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;self.UseSpeedLimit=hg==true;if hg and Game.GameTimeGetFactor(GUI.GetPlayerID())>self.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..self.SpeedLimit)Game.GameTimeSetFactor(GUI.GetPlayerID(),self.SpeedLimit)g_GameSpeed=1 end end;function Lib.UITools.Speed:InitForbidSpeedUp()GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(jO)GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp(jO)if Lib.UITools.Speed.UseSpeedLimit==true then log("ModuleGuiControl: Checking speed limit.")if jO>Lib.UITools.Speed.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..tostring(jO)..".")Game.GameTimeSetFactor(GUI.GetPlayerID(),Lib.UITools.Speed.SpeedLimit)g_GameSpeed=1;Message(Lib.UITools.Speed.Text.Message.NoSpeedUp)end end end end;Lib.Register("module/ui/UITools_Widget")Lib.UITools.Widget={HiddenWidgets={}}function Lib.UITools.Widget:DisplayInterfaceButton(nR,nS)self.HiddenWidgets[nR]=nS==true;XGUIEng.ShowWidget(nR,nS==true and 0 or 1)end;function Lib.UITools.Widget:UpdateHiddenWidgets()for g,h in pairs(self.HiddenWidgets)do XGUIEng.ShowWidget(g,0)end end;function Lib.UITools.Widget:OverrideMissionGoodCounter()StartMissionGoodOrEntityCounter=function(dh,nT)local hp="/InGame/Root/Normal/MissionGoodOrEntityCounter/Icon"local nU="/InGame/Root/Normal/MissionGoodOrEntityCounter"if type(dh[3])=="string"or dh[3]>2 then Lib.UITools.Widget:SetIcon(hp,dh,64,dh[3])else SetIcon(hp,dh)end;g_MissionGoodOrEntityCounterAmountToReach=nT;g_MissionGoodOrEntityCounterIcon=dh;XGUIEng.ShowWidget(nU,1)end end;function Lib.UITools.Widget:OverrideUpdateClaimTerritory()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface=GUI_Knight.ClaimTerritoryUpdate;GUI_Knight.ClaimTerritoryUpdate=function()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface()local bW="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory"if Lib.UITools.Widget.HiddenWidgets[bW]==true then XGUIEng.ShowWidget(bW,0)return true end end end;function Lib.UITools.Widget:SetIcon(bS,nt,nu,j)nu=nu or 64;nt[3]=nt[3]or 0;if j==nil then return SetIcon(bS,nt,nu)end;assert(nu==44 or nu==64 or nu==128)if nu==44 then j=j..".png"end;if nu==64 then j=j.."big.png"end;if nu==128 then j=j.."verybig.png"end;local e2,e4,e3,e5;e2=(nt[1]-1)*nu;e3=(nt[2]-1)*nu;e4=nt[1]*nu;e5=nt[2]*nu;State=1;if XGUIEng.IsButton(bS)==1 then State=7 end;XGUIEng.SetMaterialAlpha(bS,State,255)XGUIEng.SetMaterialTexture(bS,State,j)XGUIEng.SetMaterialUV(bS,State,e2,e3,e4,e5)end;function Lib.UITools.Widget:TooltipNormal(nV,nW,nX)if nV and nV:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nV=XGUIEng.GetStringTableText(nV)end;if nW and nW:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nW=XGUIEng.GetStringTableText(nW)end;nX=nX or""if nX and nX:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nX=XGUIEng.GetStringTableText(nX)end;local nY="/InGame/Root/Normal/TooltipNormal"local nZ=XGUIEng.GetWidgetID(nY)local n_=XGUIEng.GetWidgetID(nY.."/FadeIn/Name")local o0=XGUIEng.GetWidgetID(nY.."/FadeIn/Text")local o1=XGUIEng.GetWidgetID(nY.."/FadeIn/BG")local o2=XGUIEng.GetWidgetID(nY.."/FadeIn")local o3=XGUIEng.GetCurrentWidgetID()local o4=nV and nV or""local o5=nW and nW or""local o6=""if XGUIEng.IsButtonDisabled(o3)==1 and nX then o6=o6 .."{cr}{@color:255,32,32,255}"..nX end;XGUIEng.SetText(n_,"{center}"..o4)XGUIEng.SetText(o0,o5 ..o6)local fk=XGUIEng.GetTextHeight(o0,true)local fl,fm=XGUIEng.GetWidgetSize(o0)XGUIEng.SetWidgetSize(o0,fl,fk)GUI_Tooltip.ResizeBG(o1,o0)local o7={o1}GUI_Tooltip.SetPosition(nZ,o7,o3)GUI_Tooltip.FadeInTooltip(o2)end;function Lib.UITools.Widget:TooltipCosts(nV,nW,nX,o8,o9)o8=o8 or{}local bt={}for f=1,4,1 do bt[f]=o8[f]end;if nV and nV:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nV=XGUIEng.GetStringTableText(nV)end;if nW and nW:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nW=XGUIEng.GetStringTableText(nW)end;if nX and nX:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then nX=XGUIEng.GetStringTableText(nX)end;local nY="/InGame/Root/Normal/TooltipBuy"local nZ=XGUIEng.GetWidgetID(nY)local n_=XGUIEng.GetWidgetID(nY.."/FadeIn/Name")local o0=XGUIEng.GetWidgetID(nY.."/FadeIn/Text")local o1=XGUIEng.GetWidgetID(nY.."/FadeIn/BG")local o2=XGUIEng.GetWidgetID(nY.."/FadeIn")local oa=XGUIEng.GetWidgetID(nY.."/Costs")local o3=XGUIEng.GetCurrentWidgetID()local o4=nV and nV or""local o5=nW and nW or""local o6=""if XGUIEng.IsButtonDisabled(o3)==1 and nX then o6=o6 .."{cr}{@color:255,32,32,255}"..nX end;XGUIEng.SetText(n_,"{center}"..o4)XGUIEng.SetText(o0,o5 ..o6)local fk=XGUIEng.GetTextHeight(o0,true)local fl,fm=XGUIEng.GetWidgetSize(o0)XGUIEng.SetWidgetSize(o0,fl,fk)GUI_Tooltip.ResizeBG(o1,o0)GUI_Tooltip.SetCosts(oa,bt,o9)local o7={nZ,oa,o1}GUI_Tooltip.SetPosition(nZ,o7,o3,nil,true)GUI_Tooltip.OrderTooltip(o7,o2,oa,o3,o1)GUI_Tooltip.FadeInTooltip(o2)end;ParameterType=ParameterType or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local ob=g_QuestBehaviorTypes[f]if not _G["B_"..ob.Name].new then _G["B_"..ob.Name].new=function(self,...)local oc={...}local lr=table.copy(self)lr.i47ya_6aghw_frxil={}lr.v12ya_gg56h_al125={}for c2=1,#oc,1 do table.insert(lr.v12ya_gg56h_al125,oc[c2])if self.Parameter and self.Parameter[c2]~=nil then lr:AddParameter(c2-1,oc[c2])else table.insert(lr.i47ya_6aghw_frxil,oc[c2])end end;return lr end end end end;function RegisterBehavior(od)if GUI~=nil then return end;if type(od)~="table"or od.Name==nil then assert(false,"Behavior is invalid!")return end;if od.RequiresExtraNo and od.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..od.Name]then error(string.format("Behavior %s does not exist!",od.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==od.Name then return end end;table.insert(g_QuestBehaviorTypes,od)end;if GUI then return end;function Reward_DEBUG(kv,kw,kx,ky,kz)return B_Reward_DEBUG:new(kv,kw,kx,ky,kz)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(hs)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(bD,oe)if bD==0 then self.DisplayScriptErrors=ToBoolean(oe)elseif bD==1 then self.CheckWhileRuntime=ToBoolean(oe)elseif bD==2 then self.DevelopingCheats=ToBoolean(oe)elseif bD==3 then self.DevelopingShell=ToBoolean(oe)elseif bD==4 then self.UseQuestTrace=ToBoolean(oe)end end;function B_Reward_DEBUG:CustomFunction(hs)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(bD)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local hK=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,hK,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(bD,oe)if bD==0 then self.GoodTypeName=oe elseif bD==1 then self.GoodAmount=oe*1 elseif bD==2 then self.OverrideTarget=tonumber(oe)elseif bD==3 then self.IgnoreCapture=ToBoolean(oe)end end;function B_Goal_Deliver:GetCustomData(bD)local dk={}if bD==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(dk,g)end end;table.sort(dk)elseif bD==2 then table.insert(dk,"-")for f=1,8 do table.insert(dk,f)end elseif bD==3 then table.insert(dk,"true")table.insert(dk,"false")else assert(false)end;return dk end;function B_Goal_Deliver:GetMsgKey()local hK=Logic.GetGoodTypeID(self.GoodTypeName)local of=Logic.GetGoodCategoryForGoodType(hK)local og={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if of then local bW=og[of]if bW then return bW end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},DiploNameMap={[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:ChangeCaption(hs)local lv=GetPlayerName(self.PlayerID)or""local aK=string.format(Localize(self.TextPattern),Localize(self.DiploNameMap[self.DiplState]),lv)Lib.Core.Quest:ChangeCustomQuestCaptionText(aK,hs)end;function B_Goal_Diplomacy:CustomFunction(hs)self:ChangeCaption(hs)if self.Relation=="<="then if GetDiplomacyState(hs.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(hs.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(hs.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.Relation=oe elseif bD==2 then self.DiplState=DiplomacyStates[oe]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(bD)if bD==1 then return{">=","<=","=="}elseif bD==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local og={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local oh=GetPlayerCategoryType(self.PlayerID)if oh then local bW=og[oh]if bW then return bW end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(bD,oe)if bD==0 then self.TerritoryID=tonumber(oe)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(oe)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local og={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local oh=GetPlayerCategoryType(self.PlayerID)if oh then local bW=og[oh]if bW then return bW end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local ag=Logic.GetHeadquarters(self.PlayerID)if not ag or ag==0 then ag=Logic.GetStoreHouse(self.PlayerID)end;assert(ag and ag~=0)return{Objective.Steal,1,{ag}}end;function B_Goal_StealInformation:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local og={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local oh=GetPlayerCategoryType(self.PlayerID)if oh then local bW=og[oh]if bW then return bW end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local _=GetID(self.ScriptName)if _ and _~=0 then _=Logic.GetEntityType(_)if _ and _~=0 then if Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(bD,oe)if bD==0 then self.EntityName=oe elseif bD==1 then self.Amount=oe*1;self.DestroyTypeAmount=self.Amount elseif bD==2 then self.PlayerID=oe*1 end end;function B_Goal_DestroyType:GetCustomData(bD)local dk={}if bD==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(dk,g)end end;table.sort(dk)elseif bD==2 then for f=0,8 do table.insert(dk,f)end else assert(false)end;return dk end;function B_Goal_DestroyType:GetMsgKey()local _=self.EntityName;if Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(bD,oe)if bD==0 then self.Entity1=oe elseif bD==1 then self.Entity2=oe elseif bD==2 then self.bRelSmallerThan=oe=="<"elseif bD==3 then self.Distance=oe*1 end end;function B_Goal_EntityDistance:CustomFunction(hs)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local a6=GetID(self.Entity1)local aa=GetID(self.Entity2)local oi=Logic.CheckEntitiesDistance(a6,aa,self.Distance)if self.bRelSmallerThan and oi or not self.bRelSmallerThan and not oi then return true end end;function B_Goal_EntityDistance:GetCustomData(bD)local dk={}if bD==2 then table.insert(dk,">")table.insert(dk,"<")else assert(false)end;return dk end;function B_Goal_EntityDistance:Debug(hs)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then error(hs.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(bD,oe)if bD==0 then self.Target=oe elseif bD==1 then if oe==nil or oe==""then oe=0 end;self.Distance=oe*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(bD,oe)if bD==0 then self.TerritoryID=tonumber(oe)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(oe)end elseif bD==1 then self.PlayerID=tonumber(oe)*1 elseif bD==2 then self.Category=oe elseif bD==3 then self.bRelSmallerThan=tostring(oe)=="true"or tostring(oe)=="<"elseif bD==4 then self.NumberOfUnits=oe*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(hs)local k0=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#k0>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#k0<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(nx,V,a_)local k0={}local oj={}if V==-1 then for f=0,8 do local ok=0;repeat oj={Logic.GetEntitiesOfCategoryInTerritory(nx,f,V,ok)}k0=Array_Append(k0,oj)ok=ok+#oj until#oj==0 end else local ok=0;repeat oj={Logic.GetEntitiesOfCategoryInTerritory(nx,V,a_,ok)}k0=Array_Append(k0,oj)ok=ok+#oj until#oj==0 end;return k0 end;function B_Goal_UnitsOnTerritory:GetCustomData(bD)local dk={}if bD==1 then table.insert(dk,-1)for f=1,8 do table.insert(dk,f)end elseif bD==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(dk,g)end end;table.sort(dk)elseif bD==3 then table.insert(dk,">=")table.insert(dk,"<")else assert(false)end;return dk end;function B_Goal_UnitsOnTerritory:Debug(hs)local ol={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(ol,self.TerritoryID)then error(hs.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then error(hs.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then error(hs.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.BuffName=oe;self.Buff=Buffs[oe]end end;function B_Goal_ActivateBuff:CustomFunction(hs)if not hs.QuestDescription or hs.QuestDescription==""then local og=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then og=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,og)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(og[self.BuffName])),hs)end;local hP=Logic.GetBuff(self.PlayerID,self.Buff)if hP and hP~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(bD)local dk={}if bD==1 then dk={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(dk,"Buff_Gems")table.insert(dk,"Buff_MusicalInstrument")table.insert(dk,"Buff_Olibanum")end;table.sort(dk)else assert(false)end;return dk end;function B_Goal_ActivateBuff:GetIcon()local og={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then og[Buffs.Buff_Gems]="Goods.G_Gems"og[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"og[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return og[self.Buff]end;function B_Goal_ActivateBuff:Debug(hs)if not self.Buff then error(hs.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(bD,oe)if bD==0 then self.Entity1=oe elseif bD==1 then self.Entity2=oe elseif bD==2 then self.bRoadsOnly=ToBoolean(oe)end end;function B_Goal_BuildRoad:GetCustomData(bD)local dk;if bD==2 then dk={"true","false"}end;return dk end;function B_Goal_BuildRoad:Debug(hs)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then error(hs.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.EntityName1=oe elseif bD==2 then self.EntityName2=oe end end;function B_Goal_BuildWall:CustomFunction(hs)local om=GetID(self.EntityName1)local on=GetID(self.EntityName2)if not IsExisting(om)then return false end;if not IsExisting(on)then return false end;local P,Q,R=Logic.EntityGetPos(om)if Logic.IsBuilding(om)==1 then P,Q=Logic.GetBuildingApproachPosition(om)end;local oo=Logic.GetPlayerSectorAtPosition(self.PlayerID,P,Q)local P,Q,R=Logic.EntityGetPos(on)if Logic.IsBuilding(on)==1 then P,Q=Logic.GetBuildingApproachPosition(on)end;local op=Logic.GetPlayerSectorAtPosition(self.PlayerID,P,Q)if oo~=op then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(hs)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then error(hs.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(hs.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(hs.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(bD,oe)if bD==0 then self.TerritoryID=tonumber(oe)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(oe)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(bD,oe)if bD==0 then self.TerritoriesToClaim=oe*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(bD,oe)if bD==0 then self.EntityName=oe elseif bD==1 then self.Amount=oe*1 elseif bD==2 then self.TerritoryID=tonumber(oe)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(oe)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local hK=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,hK,self.GoodAmount}end;function B_Goal_Produce:AddParameter(bD,oe)if bD==0 then self.GoodTypeName=oe elseif bD==1 then self.GoodAmount=oe*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local hK=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,hK,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(bD,oe)if bD==0 then self.GoodTypeName=oe elseif bD==1 then self.GoodAmount=oe*1 elseif bD==2 then self.bRelSmallerThan=oe=="<"or tostring(oe)=="true"end end;function B_Goal_GoodAmount:GetCustomData(bD)local dk={}if bD==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(dk,g)end end;table.sort(dk)elseif bD==2 then table.insert(dk,">=")table.insert(dk,"<")else assert(false)end;return dk end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.Need=oe end end;function B_Goal_SatisfyNeed:GetMsgKey()local og={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local bW=og[Needs[self.Need]]if bW then return bW end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(bD,oe)if bD==0 then self.SettlersAmount=oe*1 elseif bD==1 then self.PlayerID=oe*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(bD,oe)if bD==0 then self.SpousesAmount=oe*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.bRelSmallerThan=tostring(oe)=="true"or tostring(oe)=="<"elseif bD==2 then self.NumberOfUnits=oe*1 end end;function B_Goal_SoldierCount:CustomFunction(hs)if not hs.QuestDescription or hs.QuestDescription==""then local oq=tostring(self.bRelSmallerThan)local lv=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),lv,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[oq]),self.NumberOfUnits),hs)end;local os=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and os<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and os>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(bD)local dk={}if bD==1 then table.insert(dk,">=")table.insert(dk,"<")else assert(false)end;return dk end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(hs)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then error(hs.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(bD,oe)if bD==0 then self.KnightTitle=oe end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(bD)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(bD,oe)if bD==0 then self.PlayerID=tonumber(oe)else assert(bD==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(oe)end end;function B_Goal_Festivals:CustomFunction(hs)if not hs.QuestDescription or hs.QuestDescription==""then local lv=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),lv,self.NeededFestivals),hs)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local ot={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local ou=0;for g=2,#ot do local ov=ot[g]if Logic.GetIndexOnOutStockByGoodType(ov,Goods.G_Beer)~=-1 then local ow=Logic.GetAmountOnOutStockByGoodType(ov,Goods.G_Beer)ou=ou+ow end end;if not self.FestivalStarted and ou>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif ou==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(hs)if Logic.GetStoreHouse(self.PlayerID)==0 then error(hs.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then error(hs.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then error(hs.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Goal_Capture:GetMsgKey()local _=GetID(self.ScriptName)if Logic.IsEntityAlive(_)then _=Logic.GetEntityType(_)if _ and _~=0 then if Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(bD,oe)if bD==0 then self.EntityName=oe elseif bD==1 then self.Amount=oe*1 elseif bD==2 then self.PlayerID=oe*1 end end;function B_Goal_CaptureType:GetCustomData(bD)local dk={}if bD==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(dk,g)end end;table.sort(dk)elseif bD==2 then for f=0,8 do table.insert(dk,f)end else assert(false)end;return dk end;function B_Goal_CaptureType:GetMsgKey()local _=self.EntityName;if Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(_,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local _=GetID(self.ScriptName)if _ and _~=0 then _=Logic.GetEntityType(_)if _ and _~=0 then if Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.SpecialBuilding)==1 then local og={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local oh=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if oh then local bW=og[oh]if bW then return bW end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(_,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe elseif bD==1 then self.bRelSmallerThan=oe=="<"elseif bD==2 then self.Amount=oe*1 end end;function B_Goal_ResourceAmount:CustomFunction(hs)local _=GetID(self.ScriptName)if _ and _~=0 and Logic.GetResourceDoodadGoodType(_)~=0 then local ox=Logic.GetResourceDoodadGoodAmount(_)if self.bRelSmallerThan and ox<self.Amount or not self.bRelSmallerThan and ox>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(bD)local dk={}if bD==1 then table.insert(dk,">=")table.insert(dk,"<")else assert(false)end;return dk end;function B_Goal_ResourceAmount:Debug(hs)if not IsExisting(self.ScriptName)then error(hs.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(hs.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(bD,oe)if bD==0 then self.FuncName=oe end end;function B_Goal_MapScriptFunction:CustomFunction(hs)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,hs)end;function B_Goal_MapScriptFunction:Debug(hs)if not self.FuncName then error(hs.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(hs.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(bD,oe)if bD==0 then self.VariableName=oe elseif bD==1 then self.Relation=oe elseif bD==2 then local oy=tonumber(oe)self.Value=oy==nil and tostring(oe)or oy end end;function B_Goal_CustomVariables:CustomFunction()local oz=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oA=self.Value;if type(self.Value)=="string"then oA=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if oz==oA then return true end elseif self.Relation=="~="then if oz==oA then return true end elseif self.Relation=="<"then if oz<oA then return true end elseif self.Relation=="<="then if oz<=oA then return true end elseif self.Relation==">="then if oz>=oA then return true end else if oz>oA then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(bD)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(hs)local oB={"==","~=","<=","<",">",">="}local oC={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(hs.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(oB,self.Relation)then error(hs.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Goal_TributeDiplomacy(...)return B_Goal_TributeDiplomacy:new(...)end;B_Goal_TributeDiplomacy={Name="Goal_TributeDiplomacy",Description={en="Goal: AI requests periodical tribute for better Diplomacy",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer bessere Diplomatie. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour une meilleure diplomatie. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Time till next peyment in seconds",de="Zeit bis zur Forderung in Sekunden",fr="Temps jusqu'à la demande en secondes"},{ParameterType.Number,en="Time to pay tribute in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Custom,en="Restart if failed to pay",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeDiplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeDiplomacy:AddParameter(bD,oe)if bD==0 then self.Amount=oe*1 elseif bD==1 then self.PeriodLength=oe*1 elseif bD==2 then self.TributTime=oe*1 elseif bD==3 then self.StartMsg=oe elseif bD==4 then self.SuccessMsg=oe elseif bD==5 then self.FailureMsg=oe elseif bD==6 then self.RestartAtFailure=ToBoolean(oe)end end;function B_Goal_TributeDiplomacy:GetTributeQuest(hs)if not self.InternTributeQuest then local oD=CONST_LANGUAGE;local oE=self.StartMsg;if type(oE)=="table"then oE=oE[oD]end;local oF=self.SuccessMsg;if type(oF)=="table"then oF=oF[oD]end;local oG=self.FailureMsg;if type(oG)=="table"then oG=oG[oD]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local ig,ft=QuestTemplate:New(hs.Identifier.."_TributeDiplomacyQuest_"..Lib.Core.Quest.QuestCounter,hs.SendingPlayer,hs.ReceivingPlayer,{{Objective.Deliver,{Goods.G_Gold,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,nil,nil,true,true,nil,oE,oF,oG)self.InternTributeQuest=ft end end;function B_Goal_TributeDiplomacy:CheckTributeQuest(hs)if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Over and not self.RestartQuest then if self.InternTributeQuest.Result~=QuestResult.Success then SetDiplomacyState(hs.ReceivingPlayer,hs.SendingPlayer,DiplomacyStates.Enemy)if not self.RestartAtFailure then return false end else SetDiplomacyState(hs.ReceivingPlayer,hs.SendingPlayer,DiplomacyStates.TradeContact)end;self.RestartQuest=true;self.Time=Logic.GetTime()end end;function B_Goal_TributeDiplomacy:CheckTributePlayer(hs)local oH=Logic.GetStoreHouse(hs.SendingPlayer)if oH==0 or Logic.IsEntityDestroyed(oH)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeDiplomacy:TributQuestRestarter(hs)if self.InternTributeQuest and self.Time and self.RestartQuest and Logic.GetTime()-self.Time>=self.PeriodLength then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)self.RestartQuest=nil end end;function B_Goal_TributeDiplomacy:CustomFunction(hs)self:GetTributeQuest(hs)if self:CheckTributeQuest(hs)==false then return false end;if self:CheckTributePlayer(hs)==true then return true end;self:TributQuestRestarter(hs)end;function B_Goal_TributeDiplomacy:Debug(hs)if self.Amount<0 then error(hs.Identifier..": "..self.Name..": Amount is negative!")return true end;if self.PeriodLength<self.TributTime then error(hs.Identifier..": "..self.Name..": TributTime too long!")return true end end;function B_Goal_TributeDiplomacy:Reset(hs)self.Time=nil;self.InternTributeQuest=nil;self.RestartQuest=nil end;function B_Goal_TributeDiplomacy:Interrupt(hs)if self.InternTributeQuest~=nil then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeDiplomacy:GetCustomData(bD)if bD==6 then return{"true","false"}end end;RegisterBehavior(B_Goal_TributeDiplomacy)function Goal_TributeClaim(...)return B_Goal_TributeClaim:new(...)end;B_Goal_TributeClaim={Name="Goal_TributeClaim",Description={en="Goal: AI requests periodical tribute for a specified territory. The quest sender is the demanding player.",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer ein Territorium. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour un territoire. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Good Type",de="Warentyp",fr="Type de biens"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Length of Period in seconds",de="Sekunden bis zur nächsten Forderung",fr="secondes jusqu'à la prochaine demande"},{ParameterType.Number,en="Time to pay Tribut in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Number,en="How often to pay (0 = forerver)",de="Anzahl der Tributquests (0 = unendlich)",fr="Nombre de quêtes de tribut (0 = infini)"},{ParameterType.Custom,en="Other Owner cancels the Quest",de="Anderer Spieler kann Quest beenden",fr="Un autre joueur peut terminer une quête"},{ParameterType.Custom,en="About if a rate is not payed",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeClaim:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeClaim:AddParameter(bD,oe)if bD==0 then if type(oe)=="string"then oe=GetTerritoryIDByName(oe)end;self.TerritoryID=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then self.GoodType=Goods[oe or"G_Gold"]elseif bD==3 then self.Amount=oe*1 elseif bD==4 then self.PeriodLength=oe*1 elseif bD==5 then self.TributTime=oe*1 elseif bD==6 then self.StartMsg=oe elseif bD==7 then self.SuccessMsg=oe elseif bD==8 then self.FailureMsg=oe elseif bD==9 then self.HowOften=oe*1 elseif bD==10 then self.OtherOwnerCancels=ToBoolean(oe)elseif bD==11 then self.DontPayCancels=ToBoolean(oe)end end;function B_Goal_TributeClaim:CureOutpost(hs)local oI=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(oI)and GetHealth(oI)<25 and Logic.IsBuildingBeingKnockedDown(oI)==false then while Logic.GetEntityHealth(oI)<Logic.GetEntityMaxHealth(oI)*0.6 do Logic.HealEntity(oI,1)end end end;function B_Goal_TributeClaim:RestartTributeQuest(hs)if self.InternTributeQuest then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)end end;function B_Goal_TributeClaim:CreateTributeQuest(hs)if not self.InternTributeQuest then local oD=CONST_LANGUAGE;local oE=self.StartMsg;if type(oE)=="table"then oE=oE[oD]end;local oF=self.SuccessMsg;if type(oF)=="table"then oF=oF[oD]end;local oG=self.FailureMsg;if type(oG)=="table"then oG=oG[oD]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local oJ=function()self.Time=Logic.GetTime()end;local ig,ft=QuestTemplate:New(hs.Identifier.."_TributeClaimQuest"..Lib.Core.Quest.QuestCounter,self.PlayerID,hs.ReceivingPlayer,{{Objective.Deliver,{self.GoodType,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,oJ,nil,true,true,nil,oE,oF,oG)self.InternTributeQuest=ft end end;function B_Goal_TributeClaim:OnTributeFailed(hs)local oI=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(oI)then Logic.ChangeEntityPlayerID(oI,self.PlayerID)end;Logic.SetTerritoryPlayerID(self.TerritoryID,self.PlayerID)self.InternTributeQuest.State=false;self.Time=nil;if self.DontPayCancels then hs:Interrupt()end end;function B_Goal_TributeClaim:OnTributePaid(hs)local oI=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if self.InternTributeQuest.Result==QuestResult.Success then if Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if IsExisting(oI)then Logic.ChangeEntityPlayerID(oI,hs.ReceivingPlayer)end;Logic.SetTerritoryPlayerID(self.TerritoryID,hs.ReceivingPlayer)end end;if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then if self.HowOften and self.HowOften~=0 then self.TributeCounter=(self.TributeCounter or 0)+1;if self.TributeCounter>=self.HowOften then return false end end;self:RestartTributeQuest()self.Time=nil end end;function B_Goal_TributeClaim:CustomFunction(hs)self:CreateTributeQuest(hs)self:CureOutpost(hs)if Logic.GetTerritoryPlayerID(self.TerritoryID)==hs.ReceivingPlayer or Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if self.OtherOwner then self:RestartTributeQuest()self.OtherOwner=nil end;if self.InternTributeQuest.State==QuestState.Over then if self.InternTributeQuest.Result==QuestResult.Failure then self:OnTributeFailed(hs)else self:OnTributePaid(hs)end elseif self.InternTributeQuest.State==false then if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then self:RestartTributeQuest(hs)end end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)==0 and self.InternTributeQuest then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)~=self.PlayerID then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;if self.OtherOwnerCancels then hs:Interrupt()end;self.OtherOwner=true end;local oH=Logic.GetStoreHouse(self.PlayerID)if oH==0 or Logic.IsEntityDestroyed(oH)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeClaim:Debug(hs)if self.TerritoryID==0 then error(hs.Identifier..": "..self.Name..": Unknown Territory")return true end;if not self.Quest and Logic.GetStoreHouse(self.PlayerID)==0 then error(hs.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end;if self.Amount<0 then error(hs.Identifier..": "..self.Name..": Amount is negative")return true end;if self.PeriodLength<self.TributTime or self.PeriodLength<1 then error(hs.Identifier..": "..self.Name..": Period Length is wrong")return true end;if self.HowOften<0 then error(hs.Identifier..": "..self.Name..": HowOften is negative")return true end end;function B_Goal_TributeClaim:Reset(hs)self.InternTributeQuest=nil;self.Time=nil;self.OtherOwner=nil end;function B_Goal_TributeClaim:Interrupt(hs)if type(self.InternTributeQuest)=="table"then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeClaim:GetCustomData(bD)if bD==2 then local dk={}for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(dk,g)end end;table.sort(dk)return dk elseif bD==10 or bD==11 then return{"false","true"}end end;RegisterBehavior(B_Goal_TributeClaim)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(hs)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(hs)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(hs.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local cM=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[cM]and CONST_INITIALIZED_OBJECTS[cM]==hs.Identifier then error(hs.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe elseif bD==1 then local oc=0;if oe=="Always"or 1 then oc=1 end;self.UsingState=oc*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(hs)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(bD)if bD==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(hs)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(hs.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local cM=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[cM]and CONST_INITIALIZED_OBJECTS[cM]==hs.Identifier then error(hs.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(hs)local mA=hs.SendingPlayer;local oK=hs.ReceivingPlayer;local State=GetDiplomacyState(oK,mA)if State>-2 then SetDiplomacyState(oK,mA,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(bD,oe)if bD==0 then self.PlayerID1=oe*1 elseif bD==1 then self.PlayerID2=oe*1 elseif bD==2 then self.Relation=DiplomacyStates[oe]end end;function B_Reprisal_Diplomacy:CustomFunction(hs)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(hs)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then error(hs.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then error(hs.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then error(hs.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Reprisal_DestroyEntity:CustomFunction(hs)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(hs)if not IsExisting(self.ScriptName)then warn(hs.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(bD,oe)if bD==0 then self.EffectName=oe end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(hs)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(hs)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then error(hs.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe elseif bD==1 then self.NewType=oe elseif bD==2 then self.PlayerID=tonumber(oe)end end;function B_Reprisal_ReplaceEntity:CustomFunction(hs)local cM=GetID(self.ScriptName)local oL=self.PlayerID;if oL==Logic.EntityGetPlayer(cM)then oL=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],oL)end;function B_Reprisal_ReplaceEntity:GetCustomData(bD)local dk={}if bD==1 then for g,h in pairs(Entities)do local a2={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local oM=false;for f=1,#a2 do if g:find(a2[f])then oM=true;break end end;if not oM then table.insert(dk,g)end end;table.sort(dk)elseif bD==2 then dk={"-","0","1","2","3","4","5","6","7","8"}end;return dk end;function B_Reprisal_ReplaceEntity:Debug(hs)if not Entities[self.NewType]then error(hs.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)then self.WarningPrinted=true;warn(hs.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(bD,oe)if bD==0 then self.QuestName=oe end end;function B_Reprisal_QuestRestart:CustomFunction(hs)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(bD,oe)if bD==0 then self.QuestName=oe end end;function B_Reprisal_QuestFailure:CustomFunction(hs)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(bD,oe)if bD==0 then self.QuestName=oe end end;function B_Reprisal_QuestSuccess:CustomFunction(hs)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(bD,oe)if bD==0 then self.QuestName=oe else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(hs)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(hs)if not IsValidQuest(self.QuestName)then error(hs.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(bD,oe)if bD==0 then self.QuestName=oe end end;function B_Reprisal_QuestInterrupt:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)local ft=Quests[ig]if ft.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.InterruptEnded=ToBoolean(oe)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(bD)local dk={}if bD==1 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reprisal_QuestForceInterrupt:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)local ft=Quests[ig]if self.InterruptEnded or ft.State~=QuestState.Over then ft:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(bD,oe)if bD==0 then self.VariableName=oe elseif bD==1 then self.Operator=oe elseif bD==2 then local oy=tonumber(oe)self.Value=oy==nil and tostring(oe)or oy end end;function B_Reprisal_CustomVariables:CustomFunction()local oz=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oA=self.Value;if type(self.Value)=="string"then oA=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then oz=oA elseif self.Operator=="+"then oz=oz+oA elseif self.Operator=="-"then oz=oz-oA elseif self.Operator=="*"then oz=oz*oA elseif self.Operator=="/"then oz=oz/oA elseif self.Operator=="^"then oz=oz%oA end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,oz)end;function B_Reprisal_CustomVariables:GetCustomData(bD)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(hs)local oN={"=","+","-","*","/","^"}if not table.contains(oN,self.Operator)then error(hs.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then error(hs.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(bD,oe)if bD==0 then self.FuncName=oe end end;function B_Reprisal_MapScriptFunction:CustomFunction(hs)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,hs)end;function B_Reprisal_MapScriptFunction:Debug(hs)if not self.FuncName then error(hs.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(hs.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.LockType=oe=="Lock"elseif bD==2 then self.Technology=oe end end;function B_Reprisal_Technology:CustomFunction(hs)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(bD)local dk={}if bD==1 then dk[1]="Lock"dk[2]="UnLock"elseif bD==2 then for g,h in pairs(Technologies)do table.insert(dk,g)end end;return dk end;function B_Reprisal_Technology:Debug(hs)if not Technologies[self.Technology]then error(hs.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe elseif bD==1 then self.Distance=oe*1 elseif bD==2 then self.Waittime=oe*1 elseif bD==3 then self.RewardType=oe elseif bD==4 then self.RewardAmount=oe*1 elseif bD==5 then self.FirstCostType=oe elseif bD==6 then self.FirstCostAmount=oe*1 elseif bD==7 then self.SecondCostType=oe elseif bD==8 then self.SecondCostAmount=oe*1 elseif bD==9 then local oc=nil;if oe=="Always"or oe==1 then oc=1 elseif oe=="Never"or oe==2 then oc=2 elseif oe=="Knight only"or oe==0 then oc=0 end;self.UsingState=oc end end;function B_Reward_ObjectInit:CustomFunction(hs)local cM=GetID(self.ScriptName)if cM==0 then return end;CONST_INITIALIZED_OBJECTS[cM]=hs.Identifier;Logic.InteractiveObjectClearCosts(cM)Logic.InteractiveObjectClearRewards(cM)Logic.InteractiveObjectSetInteractionDistance(cM,self.Distance)Logic.InteractiveObjectSetTimeToOpen(cM,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(cM,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(cM,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(cM,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(cM,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(cM,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(cM,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(cM,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(cM,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(cM,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(cM)table.insert(HiddenTreasures,cM)end;function B_Reward_ObjectInit:GetCustomData(bD)if bD==3 or bD==5 or bD==7 then local dk={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then dk[#dk+1]="G_Gems"dk[#dk+1]="G_MusicalInstrument"dk[#dk+1]="G_Olibanum"end;return dk elseif bD==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(hs)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then error(hs.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(hs.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then error(hs.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then error(hs.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then error(hs.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then error(hs.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then error(hs.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then error(hs.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then error(hs.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(hs)local mA=hs.SendingPlayer;local oK=hs.ReceivingPlayer;local State=GetDiplomacyState(oK,mA)if State<2 then SetDiplomacyState(oK,mA,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then oe=oe or 0;self.AmountOffer1=oe*1 elseif bD==2 then self.Offer1=oe elseif bD==3 then oe=oe or 0;self.AmountOffer2=oe*1 elseif bD==4 then self.Offer2=oe elseif bD==5 then oe=oe or 0;self.AmountOffer3=oe*1 elseif bD==6 then self.Offer3=oe elseif bD==7 then oe=oe or 0;self.AmountOffer4=oe*1 elseif bD==8 then self.Offer4=oe end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local oO=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(oO)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(oO,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(oO,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(oO,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(hs)if Logic.GetStoreHouse(self.PlayerID)==0 then error(hs.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(bD)local oP={1,2,3,4,5,6,7,8}local i_={"1","2","3","4","5","6","7","8","9"}local j4={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(j4,"G_Gems")table.insert(j4,"G_Olibanum")table.insert(j4,"G_MusicalInstrument")table.insert(j4,"G_MilitaryBandit_Ranged_AS")table.insert(j4,"G_MilitaryBandit_Melee_AS")table.insert(j4,"U_MilitarySword_Khana")table.insert(j4,"U_MilitaryBow_Khana")end;if bD==0 then return oP elseif bD==1 or bD==3 or bD==5 or bD==7 then return i_ elseif bD==2 or bD==4 or bD==6 or bD==8 then return j4 end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(bD,oe)if bD==0 then self.ScriptNameEntity=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then self.UnitKey=oe elseif bD==3 then self.Orientation=oe*1 elseif bD==4 then self.SoldierCount=oe*1 elseif bD==5 then self.HideFromAI=ToBoolean(oe)end end;function B_Reward_CreateBattalion:CustomFunction(hs)if not IsExisting(self.ScriptNameEntity)then return false end;local aj=GetPosition(self.ScriptNameEntity)local kp=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aj.X,aj.Y,self.Orientation,self.PlayerID,self.SoldierCount)local oQ=GetID(self.ScriptNameEntity)if Logic.IsBuilding(oQ)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(kp,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,kp,true)end end;function B_Reward_CreateBattalion:GetCustomData(bD)local dk={}if bD==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(dk,g)end end;table.sort(dk)elseif bD==5 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_CreateBattalion:Debug(hs)if not Entities[self.UnitKey]then error(hs.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then error(hs.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then error(hs.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(bD,oe)if bD==0 then self.Amount=oe*1 elseif bD==1 then self.ScriptNameEntity=oe elseif bD==2 then self.PlayerID=oe*1 elseif bD==3 then self.UnitKey=oe elseif bD==4 then self.Orientation=oe*1 elseif bD==5 then self.SoldierCount=oe*1 elseif bD==6 then self.HideFromAI=ToBoolean(oe)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(hs)if not IsExisting(self.ScriptNameEntity)then return false end;local oR=GetID(self.ScriptNameEntity)local P,Q,R=Logic.EntityGetPos(oR)if Logic.IsBuilding(oR)==1 then P,Q=Logic.GetBuildingApproachPosition(oR)end;for f=1,self.Amount do local kp=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],P,Q,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(kp,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,kp,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(bD)local dk={}if bD==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(dk,g)end end;table.sort(dk)elseif bD==6 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_CreateSeveralBattalions:Debug(hs)if not Entities[self.UnitKey]then error(hs.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then error(hs.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then error(hs.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(hs.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(bD,oe)if bD==0 then self.EffectName=oe elseif bD==1 then self.Type=EGL_Effects[oe]elseif bD==2 then self.PlayerID=oe*1 elseif bD==3 then self.Location=oe elseif bD==4 then self.Orientation=oe*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(hs)if Logic.IsEntityDestroyed(self.Location)then return end;local oS=assert(GetID(self.Location),hs.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local oT,oU=Logic.GetEntityPosition(oS)local al=tonumber(self.Orientation)local oV=Logic.CreateEffectWithOrientation(self.Type,oT,oU,al,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=oV end end;function B_Reward_CreateEffect:Debug(hs)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then error(hs.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then error(hs.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then error(hs.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then error(hs.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(bD)assert(bD==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local oW={}for g,h in pairs(EGL_Effects)do table.insert(oW,g)end;table.sort(oW)return oW end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(bD,oe)if bD==0 then self.ScriptNameEntity=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then self.UnitKey=oe elseif bD==3 then self.Orientation=oe*1 elseif bD==4 then self.HideFromAI=ToBoolean(oe)end end;function B_Reward_CreateEntity:CustomFunction(hs)if not IsExisting(self.ScriptNameEntity)then return false end;local aj=GetPosition(self.ScriptNameEntity)local kp;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then kp=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aj.X,aj.Y,self.Orientation,self.PlayerID,1)local oX,fV=Logic.GetSoldiersAttachedToLeader(kp)Logic.SetOrientation(fV,math.floor(self.Orientation+0.5))else kp=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aj.X,aj.Y,self.Orientation,self.PlayerID)end;local oQ=GetID(self.ScriptNameEntity)if Logic.IsBuilding(oQ)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(kp,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,kp,true)end end;function B_Reward_CreateEntity:GetCustomData(bD)local dk={}if bD==2 then for g,h in pairs(Entities)do local a2={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local oM=false;for f=1,#a2 do if g:find(a2[f])then oM=true;break end end;if not oM then table.insert(dk,g)end end;table.sort(dk)elseif bD==4 or bD==5 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_CreateEntity:Debug(hs)if not Entities[self.UnitKey]then error(hs.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then error(hs.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(bD,oe)if bD==0 then self.Amount=oe*1 elseif bD==1 then self.ScriptNameEntity=oe elseif bD==2 then self.PlayerID=oe*1 elseif bD==3 then self.UnitKey=oe elseif bD==4 then self.Orientation=oe*1 elseif bD==5 then self.HideFromAI=ToBoolean(oe)end end;function B_Reward_CreateSeveralEntities:CustomFunction(hs)if not IsExisting(self.ScriptNameEntity)then return false end;local aj=GetPosition(self.ScriptNameEntity)local kp;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then kp=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aj.X,aj.Y,self.Orientation,self.PlayerID,1)local oX,fV=Logic.GetSoldiersAttachedToLeader(kp)Logic.SetOrientation(fV,math.floor(self.Orientation+0.5))else kp=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aj.X,aj.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(kp,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,kp,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(bD)local dk={}if bD==3 then for g,h in pairs(Entities)do local a2={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local oM=false;for f=1,#a2 do if g:find(a2[f])then oM=true;break end end;if not oM then table.insert(dk,g)end end;table.sort(dk)elseif bD==5 or bD==6 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_CreateSeveralEntities:Debug(hs)if not Entities[self.UnitKey]then error(hs.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then error(hs.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(hs.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(bD,oe)if bD==0 then self.ScriptNameUnit=oe elseif bD==1 then self.ScriptNameDest=oe end end;function B_Reward_MoveSettler:CustomFunction(hs)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local oY=GetID(self.ScriptNameDest)local oZ,o_=Logic.GetEntityPosition(oY)if Logic.IsBuilding(oY)==1 then oZ,o_=Logic.GetBuildingApproachPosition(oY)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),oZ,o_)end;function B_Reward_MoveSettler:Debug(hs)if not IsExisting(self.ScriptNameUnit)then error(hs.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then error(hs.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(hs)hs:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(hs.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(bD,oe)if bD==0 then self.AIPlayerID=oe*1 elseif bD==1 then self.Spawnpoint=oe elseif bD==2 then self.TerritoryID=tonumber(oe)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(oe)end elseif bD==3 then self.NumSword=oe*1 elseif bD==4 then self.NumBow=oe*1 elseif bD==5 then self.NumCatapults=oe*1 elseif bD==6 then self.NumSiegeTowers=oe*1 elseif bD==7 then self.NumRams=oe*1 elseif bD==8 then self.NumAmmoCarts=oe*1 elseif bD==9 then if oe=="Normal"or oe==false then self.TroopType=false elseif oe=="RedPrince"or oe==true then self.TroopType=true elseif oe=="Bandit"or oe==2 then self.TroopType=2 elseif oe=="Cultist"or oe==3 then self.TroopType=3 else assert(false)end elseif bD==10 then self.ReuseTroops=ToBoolean(oe)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(bD)local dk={}if bD==9 then table.insert(dk,"Normal")table.insert(dk,"RedPrince")table.insert(dk,"Bandit")if g_GameExtraNo>=1 then table.insert(dk,"Cultist")end elseif bD==10 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(hs)local p0=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if p0~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,p0,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(hs)if self.AIPlayerID<2 then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(hs.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then error(hs.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then error(hs.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(hs.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(hs.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then error(hs.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then error(hs.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then error(hs.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then error(hs.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(bD,oe)if bD==0 then self.AIPlayerID=oe*1 elseif bD==1 then self.Spawnpoint=oe elseif bD==2 then self.TargetName=oe elseif bD==3 then self.Radius=oe*1 elseif bD==4 then self.NumSword=oe*1 elseif bD==5 then self.NumBow=oe*1 elseif bD==6 then if oe=="Normal"or oe==false then self.TroopType=false elseif oe=="RedPrince"or oe==true then self.TroopType=true elseif oe=="Bandit"or oe==2 then self.TroopType=2 elseif oe=="Cultist"or oe==3 then self.TroopType=3 else assert(false)end elseif bD==7 then self.ReuseTroops=ToBoolean(oe)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(bD)local dk={}if bD==6 then table.insert(dk,"Normal")table.insert(dk,"RedPrince")table.insert(dk,"Bandit")if g_GameExtraNo>=1 then table.insert(dk,"Cultist")end elseif bD==7 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(hs)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local p0=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,p0,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(hs)if self.AIPlayerID<2 then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(hs.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then error(hs.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then error(hs.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then error(hs.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(hs.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(hs.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(bD,oe)if bD==0 then self.AIPlayerID=oe*1 elseif bD==1 then self.Spawnpoint=oe elseif bD==2 then self.TargetName=oe elseif bD==3 then self.Radius=oe*1 elseif bD==4 then self.Time=oe*1 elseif bD==5 then self.NumSword=oe*1 elseif bD==6 then self.NumBow=oe*1 elseif bD==7 then self.CaptureTradeCarts=ToBoolean(oe)elseif bD==8 then if oe=="Normal"or oe==true then self.TroopType=false elseif oe=="RedPrince"or oe==false then self.TroopType=true elseif oe=="Bandit"or oe==2 then self.TroopType=2 elseif oe=="Cultist"or oe==3 then self.TroopType=3 else assert(false)end elseif bD==9 then self.ReuseTroops=ToBoolean(oe)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(bD)local dk={}if bD==7 then table.insert(dk,"false")table.insert(dk,"true")elseif bD==8 then table.insert(dk,"Normal")table.insert(dk,"RedPrince")table.insert(dk,"Bandit")if g_GameExtraNo>=1 then table.insert(dk,"Cultist")end elseif bD==9 then table.insert(dk,"false")table.insert(dk,"true")else assert(false)end;return dk end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(hs)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local p0=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,p0,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(hs)if self.AIPlayerID<2 then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(hs.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then error(hs.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then error(hs.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then error(hs.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then error(hs.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(hs.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(hs.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(bD,oe)if bD==0 then self.AIPlayerID=oe*1 elseif bD==1 then local p1={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=p1[oe]elseif bD==2 then self.Value=oe*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(hs)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(bD)if bD==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(hs)if Logic.GetStoreHouse(self.AIPlayerID)==0 then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then error(hs.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then error(hs.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then error(hs.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then error(hs.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(bD,oe)if bD==0 then self.AIPlayer=oe*1 elseif bD==1 then self.Aggressiveness=tonumber(oe)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local ak=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)PlayerAIs[self.AIPlayer]=ak;if self.Aggressiveness>=2 then ak.ProfileLoop=AIProfile_Skirmish;ak.Skirmish=ak.Skirmish or{}ak.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;ak.Skirmish.Claim_MaxTime=ak.Skirmish.Claim_MinTime*2 else ak.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(hs)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(bD)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(bD,oe)if bD==0 then self.AIPlayer=oe*1 elseif bD==1 then self.Enemy=oe*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local ak=PlayerAIs[self.AIPlayer]if ak and ak.Skirmish then ak.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(hs)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then error(hs.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe elseif bD==1 then self.Amount=oe*1 end end;function B_Reward_SetResourceAmount:CustomFunction(hs)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local B=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(B)==0 then return false end;Logic.SetResourceDoodadGoodAmount(B,self.Amount)end;function B_Reward_SetResourceAmount:Debug(hs)if not IsExisting(self.ScriptName)then error(hs.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then error(hs.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(bD,oe)if bD==0 then self.GoodTypeName=oe elseif bD==1 then self.GoodAmount=oe*1 end end;function B_Reward_Resources:GetRewardTable()local hK=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,hK,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(bD,oe)if bD==0 then self.ScriptNameEntity=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then self.UnitKey=oe elseif bD==3 then self.GoodType=oe elseif bD==4 then self.GoodAmount=oe*1 elseif bD==5 then self.OverrideTargetPlayer=tonumber(oe)elseif bD==6 then self.IgnoreReservation=ToBoolean(oe)elseif bD==7 then self.ReplaceEntity=ToBoolean(oe)end end;function B_Reward_SendCart:CustomFunction(hs)if not IsExisting(self.ScriptNameEntity)then return false end;local _=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(_,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(_,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(bD)local dk={}if bD==2 then dk={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif bD==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(dk,g)end end;table.sort(dk)elseif bD==5 then table.insert(dk,"-")for f=1,8 do table.insert(dk,f)end elseif bD==6 then table.insert(dk,"false")table.insert(dk,"true")elseif bD==7 then table.insert(dk,"false")table.insert(dk,"true")end;return dk end;function B_Reward_SendCart:Debug(hs)if not IsExisting(self.ScriptNameEntity)then error(hs.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(hs.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then error(hs.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then error(hs.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then error(hs.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then error(hs.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(bD,oe)if bD==0 then self.EntityName=oe elseif bD==1 then self.Amount=oe*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(bD,oe)if bD==0 then self.Points=oe end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(bD,oe)if bD==0 then self.Scriptname=oe else self.SoldiersType=oe end end;function B_Reward_AI_MountOutpost:CustomFunction(hs)local p2=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),hs.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local p3=Logic.EntityGetPlayer(p2)local p4,p5=Logic.GetBuildingApproachPosition(p2)local p6=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],p4,p5,0,p3,0)AICore.HideEntityFromAI(p3,p6,true)Logic.CommandEntityToMountBuilding(p6,p2)end;function B_Reward_AI_MountOutpost:GetCustomData(bD)if bD==1 then local dk={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then dk[#dk+1]=g end end;return dk end end;function B_Reward_AI_MountOutpost:Debug(hs)if Logic.IsEntityDestroyed(self.Scriptname)then error(hs.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(bD,oe)self.QuestName=oe end;function B_Reward_QuestRestartForceActive:CustomFunction(hs)local ig,ft=self:ResetQuest(hs)if ig then ft:SetMsgKeyOverride()ft:SetIconOverride()ft:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(hs)if not Quests[GetQuestID(self.QuestName)]then error(hs.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(bD,oe)if bD==0 then self.Building=oe end end;function B_Reward_UpgradeBuilding:CustomFunction(hs)local p7=GetID(self.Building)if p7~=0 and Logic.IsBuilding(p7)==1 and Logic.IsBuildingUpgradable(p7,true)and Logic.IsBuildingUpgradable(p7,false)then Logic.UpgradeBuilding(p7)end end;function B_Reward_UpgradeBuilding:Debug(hs)local p7=GetID(self.Building)if not(p7~=0 and Logic.IsBuilding(p7)==1 and Logic.IsBuildingUpgradable(p7,true)and Logic.IsBuildingUpgradable(p7,false))then error(hs.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(bD,oe)if bD==0 then self.Building=oe elseif bD==1 then self.UpgradeLevel=tonumber(oe)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local p7=Logic.GetEntityIDByName(self.Building)local p8=Logic.GetUpgradeLevel(p7)local p9=Logic.GetMaxUpgradeLevel(p7)if p7~=0 and Logic.IsBuilding(p7)==1 and(Logic.IsBuildingUpgradable(p7,true)or p9~=0 and p9==p8)then Logic.SetUpgradableBuildingState(p7,math.min(self.UpgradeLevel,p9),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(hs)local p7=Logic.GetEntityIDByName(self.Building)if not p7 or Logic.IsBuilding(p7)==0 then error(hs.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then error(hs.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(bD)if bD==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.DiplState=oe end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.Need=oe elseif bD==2 then self.WorkersOnStrike=oe*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(hs)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(hs)if Logic.GetStoreHouse(self.PlayerID)==0 then error(hs.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then error(hs.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then error(hs.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(bD,oe)if bD==0 then self.ScriptName=oe end end;function B_Trigger_OnResourceDepleted:CustomFunction(hs)local _=GetID(self.ScriptName)return not _ or _==0 or Logic.GetResourceDoodadGoodType(_)==0 or Logic.GetResourceDoodadGoodAmount(_)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(bD,oe)if bD==0 then self.PlayerID=oe*1 elseif bD==1 then self.GoodTypeName=oe elseif bD==2 then self.GoodAmount=oe*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(hs)local cu=Logic.GetStoreHouse(self.PlayerID)if cu==0 then return false end;local hK=Logic.GetGoodTypeID(self.GoodTypeName)local bQ=Logic.GetAmountOnOutStockByGoodType(cu,hK)if bQ>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(hs)if Logic.GetStoreHouse(self.PlayerID)==0 then error(hs.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then error(hs.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then error(hs.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.WaitTime=oe~=nil and tonumber(oe)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(hs)local ig=GetQuestID(self.QuestName)if ig~=nil then assert(type(ig)=="number")if Quests[ig].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(hs.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(hs)end;function B_Trigger_OnQuestActiveWait:Reset(hs)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(bD,oe)if bD==0 then self.QuestName=oe;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.WaitTime=oe~=nil and tonumber(oe)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)if Quests[ig].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(hs.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(hs)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(hs)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(bD,oe)if bD==0 then self.QuestName=oe;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(bD,oe)if bD==0 then self.QuestName=oe end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)if Quests[ig].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.WaitTime=oe~=nil and tonumber(oe)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)if Quests[ig].State==QuestState.Over and Quests[ig].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(hs.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(hs)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(hs)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(bD,oe)if bD==0 then self.QuestName=oe;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.WaitTime=oe~=nil and tonumber(oe)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(hs)if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)if Quests[ig].State==QuestState.Over and Quests[ig].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(hs.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(hs)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(hs)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(bD,oe)if bD==0 then self.QuestName=oe;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(bD,oe)if bD==0 then self.QuestName=oe elseif bD==1 then self.WaitTime=oe~=nil and tonumber(oe)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local ig=GetQuestID(self.QuestName)if Quests[ig].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(hs)if type(self.QuestName)~="string"then error(hs.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(hs.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(hs)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(hs)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(bD,oe)if bD==0 then self.QuestName=oe;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(bD,oe)if bD==0 then self.VariableName=oe elseif bD==1 then self.Relation=oe elseif bD==2 then local oy=tonumber(oe)oy=oy~=nil and oy or oe;self.Value=oy end end;function B_Trigger_CustomVariables:CustomFunction()local oz=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oA=self.Value;if type(self.Value)=="string"then oA=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return oz==oA elseif self.Relation~="~="then return oz~=oA elseif self.Relation==">"then return oz>oA elseif self.Relation==">="then return oz>=oA elseif self.Relation=="<="then return oz<=oA else return oz<oA end;return false end;function B_Trigger_CustomVariables:GetCustomData(bD)if bD==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(hs)local oB={"==","~=","<=","<",">",">="}local oC={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(hs.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(oB,self.Relation)then error(hs.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(bD,oe)if bD==0 then self.Month=oe*1 end end;function B_Trigger_OnMonth:CustomFunction(hs)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(bD)local dk={}if bD==0 then for f=1,12 do table.insert(dk,f)end else assert(false)end;return dk end;function B_Trigger_OnMonth:Debug(hs)if self.Month<1 or self.Month>12 then error(hs.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(hs)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(bD,oe)if bD==0 then self.Time=oe*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(hs)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(bD,oe)self.QuestTable={}if bD==0 then self.Quest1=oe elseif bD==1 then self.Quest2=oe end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(hs)local pa=Quests[GetQuestID(self.Quest1)]local pb=Quests[GetQuestID(self.Quest2)]if pa.State==QuestState.Over and pa.Result==QuestResult.Failure or pb.State==QuestState.Over and pb.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(hs)if self.Quest1==self.Quest2 then error(hs.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(hs.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(hs.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(bD,oe)self.QuestTable={}if bD==0 then self.Quest1=oe elseif bD==1 then self.Quest2=oe end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(hs)local pa=Quests[GetQuestID(self.Quest1)]local pb=Quests[GetQuestID(self.Quest2)]if pa.State==QuestState.Over and pa.Result==QuestResult.Success or pb.State==QuestState.Over and pb.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(hs)if self.Quest1==self.Quest2 then error(hs.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(hs.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(hs.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(bD,oe)if bD==0 then self.LeastAmount=tonumber(oe)elseif bD==1 then self.QuestAmount=tonumber(oe)elseif bD==2 then self.QuestName1=oe elseif bD==3 then self.QuestName2=oe elseif bD==4 then self.QuestName3=oe elseif bD==5 then self.QuestName4=oe elseif bD==6 then self.QuestName5=oe end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local pc=0;for f=1,self.QuestAmount do local ig=GetQuestID(self["QuestName"..f])if IsValidQuest(ig)then if Quests[ig].Result==QuestResult.Success then pc=pc+1;if pc>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(hs)local pd=self.LeastAmount;local pe=self.QuestAmount;if pd<=0 or pd>5 then error(hs.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif pe<=0 or pe>5 then error(hs.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif pd>pe then error(hs.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,pe do if not IsValidQuest(self["QuestName"..f])then error(hs.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(bD)if bD==0 or bD==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(hs)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(bD,oe)if bD==0 then self.FuncName=oe end end;function B_Trigger_MapScriptFunction:CustomFunction(hs)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,hs)end;function B_Trigger_MapScriptFunction:Debug(hs)if not self.FuncName then error(hs.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(hs.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(bD,oe)if bD==0 then self.EffectName=oe end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(hs)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then error(hs.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)function Goal_NPC(pf,pg)return B_Goal_NPC:new(pf,pg)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(bD,oe)if bD==0 then self.NPC=oe elseif bD==1 then self.Hero=oe;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(bD,oe)if bD==0 then assert(oe~=nil and oe~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if oe~=nil and oe~=""then table.insert(self.ScriptNames,oe)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,hs)local B=GetID(self.ScriptName)if B==0 then return end;CONST_INITIALIZED_OBJECTS[B]=hs.Identifier;local ph;if self.RewardType and self.RewardType~="-"then ph={Goods[self.RewardType],self.RewardAmount}end;local pi;if self.FirstCostType and self.FirstCostType~="-"then pi=ph or{}table.insert(pi,Goods[self.FirstCostType])table.insert(pi,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then pi=ph or{}table.insert(pi,Goods[self.SecondCostType])table.insert(pi,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=ph,Costs=pi}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function Reprisal_Briefing(j,dp)return B_Reprisal_Briefing:new(j,dp)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(bD,oe)if bD==0 then self.BriefingName=oe elseif bD==1 then self.Function=oe end end;function B_Reprisal_Briefing:CustomFunction(hs)_G[self.Function](self.BriefingName,hs.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(hs)if self.BriefingName==nil or self.BriefingName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(hs.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reprisal_Briefing)end;function Reward_Briefing(j,dp)return B_Reward_Briefing:new(j,dp)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reward_Briefing)end;function Trigger_Briefing(j,V,kN)return B_Trigger_Briefing:new(j,V,kN)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(bD,oe)if bD==0 then self.BriefingName=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then oe=oe or 0;self.WaitTime=oe*1 end end;function B_Trigger_Briefing:CustomFunction(hs)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(hs)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",hs.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",hs.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Trigger_Briefing)end;function Reprisal_Cutscene(j,f1)return B_Reprisal_Cutscene:new(j,f1)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(bD,oe)if bD==0 then self.CutsceneName=oe elseif bD==1 then self.Function=oe end end;function B_Reprisal_Cutscene:CustomFunction(hs)_G[self.Function](self.CutsceneName,hs.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(hs)if self.CutsceneName==nil or self.CutsceneName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(hs.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reprisal_Cutscene)end;function Reward_Cutscene(j,f1)return B_Reward_Cutscene:new(j,f1)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reward_Cutscene)end;function Trigger_Cutscene(j,V,kN)return B_Trigger_Cutscene:new(j,V,kN)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(bD,oe)if bD==0 then self.CutsceneName=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then oe=oe or 0;self.WaitTime=oe*1 end end;function B_Trigger_Cutscene:CustomFunction(hs)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(hs)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",hs.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",hs.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Trigger_Cutscene)end;function Reprisal_Dialog(j,f9)return B_Reprisal_Dialog:new(j,f9)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(bD,oe)if bD==0 then self.DialogName=oe elseif bD==1 then self.Function=oe end end;function B_Reprisal_Dialog:CustomFunction(hs)_G[self.Function](self.DialogName,hs.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(hs)if self.DialogName==nil or self.DialogName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(hs.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reprisal_Dialog)end;function Reward_Dialog(j,f9)return B_Reward_Dialog:new(j,f9)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,hs)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reward_Dialog)end;function Trigger_Dialog(j,V,kN)return B_Trigger_Dialog:new(j,V,kN)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(bD,oe)if bD==0 then self.DialogName=oe elseif bD==1 then self.PlayerID=oe*1 elseif bD==2 then oe=oe or 0;self.WaitTime=oe*1 end end;function B_Trigger_Dialog:CustomFunction(hs)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(hs)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",hs.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",hs.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then error(string.format("%s: %s: Dialog name is invalid!",hs.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Trigger_Dialog)end
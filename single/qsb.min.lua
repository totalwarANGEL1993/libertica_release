Lib={Loader={Paths={"script/"},Version="LIB 1.0.0",Root="libertica",IsLocalEnv=GUI~=nil,IsHistoryEdition=false,Sources={},Loaded={}}}if Framework and Network then local Name=Framework.GetCurrentMapName()table.insert(Lib.Loader.Paths,1,"maps/externalmap/"..Name.."/")Lib.Loader.IsHistoryEdition=Network.IsNATReady~=nil end;API={}QSB={}function Lib.Loader.PushPath(a)end;function Lib.Loader.Require(a)end;Lib.Require=Lib.Loader.Require;function Lib.Loader.Register(a)end;Lib.Register=Lib.Loader.Register;function Lib.Loader.LoadSourceFile(b,a)end;Lib.Register("comfort/CopyTable")function CopyTable(b,c)local d=c or{}assert(type(b)=="table","CopyTable: Source is nil!")assert(type(d)=="table")local e=0;for f=1,#b do e=e+1;if type(b[f])=="table"then table.insert(d,CopyTable(b[f]))else table.insert(d,b[f])end end;for g,h in pairs(b)do if type(g)=="number"then if g<=0 or g>e then if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end else if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end end;return d end;API.CopyTable=CopyTable;Lib.Register("comfort/GetCategoriesOfType")function GetCategoriesOfType(i)local j={}for g,h in pairs(EntityCategories)do if Logic.IsEntityTypeInCategory(i,h)==1 then table.insert(j,h)end end;return j end;Lib.Require("comfort/GetCategoriesOfType")Lib.Register("comfort/GetCategoriesOfEntity")function GetCategoriesOfEntity(k)local l=Logic.GetEntityType(k)return GetCategoriesOfType(l)end;Lib.Register("comfort/GetActivePlayers")function GetActivePlayers()local m={}for f=1,8 do if Network.IsNetworkSlotIDUsed(f)then local n=Logic.GetSlotPlayerID(f)if Logic.PlayerGetIsHumanFlag(n)and Logic.PlayerGetGameState(n)~=0 then table.insert(m,n)end end end;return m end;API.GetActivePlayers=GetActivePlayers;Lib.Require("comfort/GetActivePlayers")Lib.Register("comfort/GetDelayedPlayers")function GetDelayedPlayers()local m={}for g,h in pairs(GetActivePlayers())do if Network.IsWaitingForNetworkSlotID(API.GetPlayerSlotID(h))then table.insert(m,h)end end;return m end;API.GetDelayedPlayers=GetDelayedPlayers;Lib.Register("comfort/GetPlayerAtSlot")function GetPlayerAtSlot(o)if Network.IsNetworkSlotIDUsed(o)then local p=Logic.GetSlotPlayerID(o)if Logic.PlayerGetIsHumanFlag(p)then return p end end;return 0 end;API.GetSlotPlayerID=GetPlayerAtSlot;Lib.Register("comfort/SetPlayerName")CONST_PLAYER_NAMES={}function SetPlayerName(q,r)assert(type(q)=="number")assert(type(r)=="string")if not GUI then ExecuteLocal([[SetPlayerName(%d, "%s")]],q,r)return end;GUI_MissionStatistic.PlayerNames[q]=r;CONST_PLAYER_NAMES[q]=r end;API.SetPlayerName=SetPlayerName;Lib.Require("comfort/SetPlayerName")Lib.Register("comfort/GetPlayerName")GetPlayerName_OrigName=GetPlayerName;function GetPlayerName(q)local s=Logic.GetPlayerName(q)local t=CONST_PLAYER_NAMES[q]if t~=nil and t~=""then s=t end;local u=Framework.GetCurrentMapTypeAndCampaignName()local v=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),u)if v>0 then return s end;if u==1 or u==3 then local w,x,y=Framework.GetPlayerInfo(q)if s~=""then return s end;return w end end;API.GetPlayerName=GetPlayerName;Lib.Register("comfort/GetSoldiersOfGroup")function GetSoldiersOfGroup(z)local A={}local B=GetID(z)assert(B~=0,"Entity does not exist.")if Logic.IsLeader(B)==1 then local C={Logic.GetSoldiersAttachedToLeader(B)}for f=2,C[1]+1 do table.insert(A,C[f])end end;return A end;API.GetSoldiersOfGroup=GetSoldiersOfGroup;Lib.Register("comfort/IsLocalScript")function IsLocalScript()return GUI~=nil end;API.IsLocalScript=IsLocalScript;Lib.Register("comfort/KeyOf")function KeyOf(D,E)if E==nil then return false end;for g,h in pairs(E)do if h==D then return g end end end;API.KeyOf=KeyOf;Lib.Register("comfort/ToBoolean")function ToBoolean(F)if type(F)=="boolean"then return F end;if type(F)=="number"then return F==1 end;if string.find(string.lower(tostring(F)),"^[1tjy\\+].*$")then return true end;return false end;API.ToBoolean=ToBoolean;Lib.Register("comfort/DumpTable")function DumpTable(G,r)local H="{"if r then H=r.." = \n"..H end;Framework.WriteToLog(H)for g,h in pairs(G)do if type(h)=="table"then Framework.WriteToLog("["..g.."] = ")DumpTable(h)elseif type(h)=="string"then Framework.WriteToLog("["..g.."] = \""..h.."\"")else Framework.WriteToLog("["..g.."] = "..tostring(h))end end;Framework.WriteToLog("}")end;API.DumpTable=DumpTable;Lib.Register("comfort/GetPosition")function GetPosition(k)if not k then return{X=0,Y=0,Z=0}end;if type(k)=="table"and k.X and k.Y then k.Z=k.Z or 0;return k end;assert(IsExisting(k),"Entity does not exist.")local I,J,K=Logic.EntityGetPos(GetID(k))return{X=I,Y=J,Z=K}end;API.GetPosition=GetPosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetDistance")function GetDistance(L,M,N)if type(L)=="string"or type(L)=="number"then L=GetPosition(L)end;if type(M)=="string"or type(M)=="number"then M=GetPosition(M)end;assert(type(L)=="table","Invalid frist position.")assert(type(M)=="table","Invalid second position.")local O=L.X-M.X;local P=L.Y-M.Y;if N then return O^2+P^2 end;return math.sqrt(O^2+P^2)end;API.GetDistance=GetDistance;Lib.Register("comfort/IsMultiplayer")function IsMultiplayer()return Framework.IsNetworkGame()end;API.IsMultiplayer=IsMultiplayer;Lib.Register("comfort/IsValidPosition")function IsValidPosition(Q)if type(Q)=="table"then if Q.X~=nil and type(Q.X)=="number"and(Q.Y~=nil and type(Q.Y)=="number")then local R={Logic.WorldGetSize()}if not Q.Z or Q.Z>=0 then if Q.X<R[1]and Q.X>0 and Q.Y<R[2]and Q.Y>0 then return true end end end end;return false end;API.IsValidPosition=IsValidPosition;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetCirclePosition")function GetCirclePosition(S,T,U)if not IsValidPosition(S)and not IsExisting(S)then error(false,"Target does not exist or is invalid position!")end;local V=S;local W=0+(U or 0)if type(S)~="table"then local B=GetID(S)W=Logic.GetEntityOrientation(B)+(U or 0)V=GetPosition(B)end;local d={X=V.X+T*math.cos(math.rad(W)),Y=V.Y+T*math.sin(math.rad(W)),Z=V.Z}return d end;API.GetRelatiePos=GetCirclePosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetGeometricFocus")function GetGeometricFocus(...)local arg={...}local X={X=0,Y=0,Z=0}local Y=0;for f=1,#arg do local V=GetPosition(arg[f])if V then X.X=X.X+V.X;X.Y=X.Y+V.Y;X.Z=X.Z+(V.Z or 0)Y=Y+1 end end;return{X=X.X*1/Y,Y=X.Y*1/Y,Z=X.Z*1/Y}end;API.GetGeometricFocus=GetGeometricFocus;Lib.Register("comfort/GetSiegecartTypeByEngineType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_MilitaryBatteringRam]=Entities.U_BatteringRamCart,[Entities.U_MilitaryCatapult]=Entities.U_CatapultCart,[Entities.U_MilitarySiegeTower]=Entities.U_SiegeTowerCart}end;function GetSiegecartTypeByEngineType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Register("comfort/GetTerritoryID")function GetTerritoryID(r)for Z,_ in ipairs{Logic.GetTerritories()}do if r==Logic.GetTerritoryName(_)then return _ end end;return 0 end;API.GetTerritoryID=GetTerritoryID;Lib.Register("comfort/IsHistoryEdition")function IsHistoryEdition()return Network.IsNATReady~=nil end;API.IsHistoryEdition=IsHistoryEdition;Lib.Register("comfort/IsMultiplayerReady")function IsMultiplayerReady()return Framework.IsNetworkGame()and Network.SessionHaveAllPlayersFinishedLoading()==true end;API.IsMultiplayerReady=IsMultiplayerReady;Lib.Register("comfort/Round")function Round(a0,a1)a1=math.ceil(a1 or 0)if a1<=0 then return math.floor(a0+0.5)end;return tonumber(string.format("%."..a1 .."f",a0))end;API.Round=Round;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetAngleBetween")function GetAngleBetween(L,M)local a2=0;local a3=0;local a4=0;if type(L)=="string"or type(L)=="number"then L=GetPosition(GetID(L))end;if type(M)=="string"or type(M)=="number"then M=GetPosition(GetID(M))end;assert(L~=nil)assert(M~=nil)a2=L.X-M.X;a3=L.Y-M.Y;if a2==0 and a3==0 then return 0 end;a4=math.deg(math.asin(math.abs(a2)/math.sqrt(a2%2+a3%2)))if a2>=0 and a3>0 then a4=270-a4 elseif a2<0 and a3>0 then a4=270+a4 elseif a2<0 and a3<=0 then a4=90-a4 elseif a2>=0 and a3<=0 then a4=90+a4 end;return a4 end;API.GetAngleBetween=GetAngleBetween;Lib.Require("comfort/GetDistance")Lib.Register("comfort/GetClosestToTarget")function GetClosestToTarget(S,a5)local a6=0;local a7=Logic.WorldGetSize()^2;for f=1,#a5,1 do assert(type(a5[f])~="table","Invalid entity.")local a8=GetDistance(a5[f],S,true)if a8<a7 then a7=a8;a6=a5[f]end end;return a6 end;API.GetClosestToTarget=GetClosestToTarget;Lib.Register("comfort/GetHealth")function GetHealth(k)local B=GetID(k)if IsExisting(B)then local a9=Logic.GetEntityMaxHealth(B)local aa=Logic.GetEntityHealth(B)return aa/a9*100 end;return 0 end;API.GetHealth=GetHealth;Lib.Register("comfort/GetSiegeengineTypeByCartType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_BatteringRamCart]=Entities.U_MilitaryBatteringRam,[Entities.U_CatapultCart]=Entities.U_MilitaryCatapult,[Entities.U_SiegeTowerCart]=Entities.U_MilitarySiegeTower}end;function GetSiegeengineTypeByCartType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Require("comfort/GetAngleBetween")Lib.Register("comfort/IsInCone")function IsInCone(ab,ac,ad,ae)local af=GetAngleBetween(ac,ab)local ag=ad-ae;local ah=ad+ae;if af>=ag and af<=ah then return true end;if(af+180)%360>=(ag+180)%360 and(af+180)%360<=(ah+180)%360 then return true end;return false end;API.IsInCone=IsInCone;Lib.Register("comfort/SerializeTable")function SerializeTable(G)local ai="{"for g,h in pairs(G)do local aj=type(g)=="string"and g or"["..g.."]"if type(h)=="table"then ai=ai..aj.." = "..SerializeTable(h)..", "elseif type(h)=="number"then ai=ai..aj.." = "..h..", "elseif type(h)=="string"then ai=ai..aj.." = \""..h.."\", "elseif type(h)=="boolean"or type(h)=="nil"then ai=ai..aj.." = "..tostring(h)..", "else ai=ai..aj.." = \""..tostring(h).."\", "end end;ai=ai.."}"return ai end;API.SerializeTable=SerializeTable;Lib.Register("comfort/global/CreateCartByGoodType")function CreateCartByGoodType(q,ab,ak,al,am)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")al=al or 0;local an=0;local V=GetID(ab)assert(V~=0,"Entity does not exist.")local I,J,K=Logic.EntityGetPos(V)if Logic.IsBuilding(V)==1 then I,J=Logic.GetBuildingApproachPosition(V)al=Logic.GetEntityOrientation(V)-90 end;local ao=Logic.GetGoodCategoryForGoodType(ak)if ao==GoodCategories.GC_Resource then an=Logic.CreateEntityOnUnblockedLand(Entities.U_ResourceMerchant,I,J,al,q)elseif ak==Goods.G_Medicine then an=Logic.CreateEntityOnUnblockedLand(Entities.U_Medicus,I,J,al,q)elseif ak==Goods.G_Gold or ak==Goods.G_None or ak==Goods.G_Information then if am then an=Logic.CreateEntityOnUnblockedLand(am,I,J,al,q)else an=Logic.CreateEntityOnUnblockedLand(Entities.U_GoldCart,I,J,al,q)end else an=Logic.CreateEntityOnUnblockedLand(Entities.U_Marketer,I,J,al,q)end;return an end;API.CreateCartByGoodType=CreateCartByGoodType;Lib.Register("comfort/global/CreateEntityName")CreateEntityName_Sequence_ID=0;function CreateEntityName(ap)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")if type(ap)=="string"then return ap else assert(type(ap)=="number","Invalid entity ID.")local t=Logic.GetEntityName(ap)if type(t)~="string"or t==""then CreateEntityName_Sequence_ID=CreateEntityName_Sequence_ID+1;t="AutomaticScriptName_"..CreateEntityName_Sequence_ID;Logic.SetEntityName(ap,t)end;return t end end;API.CreateEntityName=CreateEntityName;Lib.Register("comfort/global/CreateStock")function CreateStock(q,ak)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local ao=Logic.GetGoodCategoryForGoodType(ak)if ao==GoodCategories.GC_Resource or ak==Goods.G_None then local aq=Logic.GetStoreHouse(q)local ar=Logic.GetHeadquarters(q)if aq~=0 and Logic.GetIndexOnInStockByGoodType(aq,ak)==-1 then if ak~=Goods.G_Gold or ak==Goods.G_Gold and ar==0 then Logic.AddGoodToStock(aq,ak,0,true,true)end end end end;API.CreateStock=CreateStock;Lib.Register("comfort/global/GetQuestID")function GetQuestID(r)if type(r)=="number"then return r end;for g,h in pairs(Quests)do if h and g>0 then if h.Identifier==r then return g end end end;return-1 end;API.GetQuestID=GetQuestID;Lib.Register("comfort/global/GetRandomSettlerType")CONST_RANDOM_SETTLER_TYPES={Male={Entities.U_BannerMaker,Entities.U_Baker,Entities.U_Barkeeper,Entities.U_Blacksmith,Entities.U_Butcher,Entities.U_BowArmourer,Entities.U_BowMaker,Entities.U_CandleMaker,Entities.U_Carpenter,Entities.U_DairyWorker,Entities.U_Pharmacist,Entities.U_Tanner,Entities.U_SmokeHouseWorker,Entities.U_Soapmaker,Entities.U_SwordSmith,Entities.U_Weaver},Female={Entities.U_BathWorker,Entities.U_SpouseS01,Entities.U_SpouseS02,Entities.U_SpouseS03,Entities.U_SpouseF01,Entities.U_SpouseF02,Entities.U_SpouseF03}}function GetRandomSettlerType()local as=math.random(1,2)==1 and"Male"or"Female"local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES[as])return CONST_RANDOM_SETTLER_TYPES[as][l]end;API.GetRandomSettlerType=GetRandomSettlerType;function GetRandomMaleSettlerType()local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Male)return CONST_RANDOM_SETTLER_TYPES.Male[l]end;API.GetRandomMaleSettlerType=GetRandomMaleSettlerType;function GetRandomFemaleSettlerType()local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Female)return CONST_RANDOM_SETTLER_TYPES.Female[l]end;API.GetRandomFemaleSettlerType=GetRandomFemaleSettlerType;Lib.Require("comfort/global/GetQuestID")Lib.Register("comfort/global/IsValidQuest")function IsValidQuest(at)return Quests[at]~=nil or Quests[GetQuestID(at)]~=nil end;API.IsValidQuest=IsValidQuest;Lib.Register("comfort/global/IsValidQuestName")CONST_REGEX_QUEST_NAME="^[A-Za-z0-9_ @ÄÖÜäöüß]+$"function IsValidQuestName(r)return string.find(r,CONST_REGEX_QUEST_NAME)~=nil end;API.IsValidQuestName=IsValidQuestName;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/LookAt")function LookAt(k,S)local au=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(au~=0,"Looking entity does not exist!")local av,aw,ax=Logic.EntityGetPos(au)local ay;local az,aA,aB;if type(S)=="table"then az=S.X;aA=S.Y;aB=S.Z else ay=GetID(S)assert(ay~=0,"Target entity does not exist!")az,aA,aB=Logic.EntityGetPos(ay)end;assert(IsValidPosition({X=av,Y=aw,Z=ax}),"Invalid looking position!")assert(IsValidPosition({X=az,Y=aA,Z=aB}),"Invalid target position!")Angle=math.deg(math.atan2(aA-aw,az-av))Angle=Angle<0 and Angle+360 or Angle;if Logic.IsLeader(au)==1 then local aC={Logic.GetSoldiersAttachedToLeader(au)}for f=2,aC[1]+1 do Logic.SetOrientation(aC[f],Angle)end end;Logic.SetOrientation(au,Angle)end;API.LookAt=LookAt;Lib.Register("comfort/global/Move")function Move(k,S,aD)local an=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(an~=0,"Moving entity does not exist!")local aE;if type(S)~="table"then local ay=GetID(S)local I,J,K=Logic.EntityGetPos(ay)aE={X=I,Y=J}else aE=S end;if aD then Logic.MoveEntity(an,aE.X,aE.Y)if Logic.IsSettler(an)==1 then Logic.SetTaskList(an,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(an,aE.X,aE.Y)end;StartSimpleJobEx(function(aF,S)if not IsExisting(aF)then return true end;if Logic.IsEntityMoving(aF)==false then if Logic.IsSettler(aF)==1 then Logic.SetTaskList(aF,TaskLists.TL_NPC_IDLE)end;return true end end,an,aE)end;API.Move=Move;Lib.Register("comfort/global/ReplaceEntity")function ReplaceEntity(k,i,aG)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local au=GetID(k)if au==0 then return 0 end;local aH=GetPosition(au)local aI=aG or Logic.EntityGetPlayer(au)local aJ=Logic.GetEntityOrientation(au)local t=Logic.GetEntityName(au)DestroyEntity(au)local ay=Logic.CreateEntity(i,aH.X,aH.Y,aJ,aI)Logic.SetEntityName(ay,t)if Logic.IsSettler(ay)==1 then Logic.SetTaskList(ay,TaskLists.TL_NPC_IDLE)end;return ay end;API.ReplaceEntity=ReplaceEntity;Lib.Require("comfort/global/CreateStock")Lib.Require("comfort/global/CreateCartByGoodType")Lib.Register("comfort/global/SendCart")function SendCart(ab,q,ak,aK,am,aL,aM)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local aN=GetID(ab)if not IsExisting(aN)then return 0 end;local W=Logic.GetEntityOrientation(aN)local aO=Logic.GetEntityName(aN)local an=CreateCartByGoodType(q,aN,ak,W,am)assert(an~=0,"Cart was not created properly.")CreateStock(q,ak)Logic.HireMerchant(an,q,ak,aK,q,aL)if aM and Logic.IsBuilding(aN)==0 then Logic.SetEntityName(an,aO)DestroyEntity(aN)end;return an end;API.SendCart=SendCart;Lib.Register("comfort/global/SetHealth")function SetHealth(k,aP)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(type(aP)=="number"and aP>=0)local B=GetID(k)assert(B~=0,"Entity does not exist.")assert(Logic.IsLeader(B)==0,"Can not be used on groups.")local a9=Logic.GetEntityMaxHealth(B)local aa=math.max(math.min(aP,a9),0)local aQ=Logic.GetEntityHealth(B)local aR=math.ceil(a9*aa/100)if aR>aQ then Logic.HealEntity(B,aR-aQ)elseif aR<aQ then Logic.HurtEntity(B,aQ-aR)end end;API.SetHealth=SetHealth;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/SetPosition")function SetPosition(k,S)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local an=GetID(k)if not an then return end;local aE=GetPosition(S)assert(IsValidPosition(aE),"Invalid position.")for g,h in pairs(GetSoldiersOfGroup(an))do SetPosition(h,S)end;Logic.DEBUG_SetSettlerPosition(an,aE.X,aE.Y)end;API.SetPosition=SetPosition;Lib.Register("comfort/local/Test")Lib.Register("core/QSB")ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local aS=g_QuestBehaviorTypes[f]if not _G["B_"..aS.Name].new then _G["B_"..aS.Name].new=function(self,...)local aT={...}local aU=table.copy(self)aU.i47ya_6aghw_frxil={}aU.v12ya_gg56h_al125={}for aV=1,#aT,1 do table.insert(aU.v12ya_gg56h_al125,aT[aV])if self.Parameter and self.Parameter[aV]~=nil then aU:AddParameter(aV-1,aT[aV])else table.insert(aU.i47ya_6aghw_frxil,aT[aV])end end;return aU end end end end;function RegisterBehavior(aW)if GUI~=nil then return end;if type(aW)~="table"or aW.Name==nil then assert(false,"Behavior is invalid!")return end;if aW.RequiresExtraNo and aW.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..aW.Name]then error(string.format("Behavior %s does not exist!",aW.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==aW.Name then return end end;table.insert(g_QuestBehaviorTypes,aW)end;if not MapEditor and GUI then return end;Lib.Register("core/Core_Behavior")function Reward_DEBUG(aX,aY,aZ,a_,b0)return B_Reward_DEBUG:new(aX,aY,aZ,a_,b0)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(b1)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(b2,b3)if b2==0 then self.DisplayScriptErrors=ToBoolean(b3)elseif b2==1 then self.CheckWhileRuntime=ToBoolean(b3)elseif b2==2 then self.DevelopingCheats=ToBoolean(b3)elseif b2==3 then self.DevelopingShell=ToBoolean(b3)elseif b2==4 then self.UseQuestTrace=ToBoolean(b3)end end;function B_Reward_DEBUG:CustomFunction(b1)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(b2)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,b4,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 elseif b2==2 then self.OverrideTarget=tonumber(b3)elseif b2==3 then self.IgnoreCapture=ToBoolean(b3)end end;function B_Goal_Deliver:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then table.insert(b5,"-")for f=1,8 do table.insert(b5,f)end elseif b2==3 then table.insert(b5,"true")table.insert(b5,"false")else assert(false)end;return b5 end;function B_Goal_Deliver:GetMsgKey()local b4=Logic.GetGoodTypeID(self.GoodTypeName)local b6=Logic.GetGoodCategoryForGoodType(b4)local b7={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if b6 then local b8=b7[b6]if b8 then return b8 end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(b1)local b9=self:GetDiplomacyMapping()local s=GetPlayerName(self.PlayerID)or""local ba=string.format(Localize(self.TextPattern),Localize(b9[self.DiplState]),s)Lib.Core.Quest:ChangeCustomQuestCaptionText(ba,b1)end;function B_Goal_Diplomacy:CustomFunction(b1)self:ChangeCaption(b1)if self.Relation=="<="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Relation=b3 elseif b2==2 then self.DiplState=DiplomacyStates[b3]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(b2)if b2==1 then return{">=","<=","=="}elseif b2==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local aE=Logic.GetHeadquarters(self.PlayerID)if not aE or aE==0 then aE=Logic.GetStoreHouse(self.PlayerID)end;assert(aE and aE~=0)return{Objective.Steal,1,{aE}}end;function B_Goal_StealInformation:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local an=GetID(self.ScriptName)if an and an~=0 then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1;self.DestroyTypeAmount=self.Amount elseif b2==2 then self.PlayerID=b3*1 end end;function B_Goal_DestroyType:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then for f=0,8 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Goal_DestroyType:GetMsgKey()local an=self.EntityName;if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(b2,b3)if b2==0 then self.Entity1=b3 elseif b2==1 then self.Entity2=b3 elseif b2==2 then self.bRelSmallerThan=b3=="<"elseif b2==3 then self.Distance=b3*1 end end;function B_Goal_EntityDistance:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local au=GetID(self.Entity1)local ay=GetID(self.Entity2)local bc=Logic.CheckEntitiesDistance(au,ay,self.Distance)if self.bRelSmallerThan and bc or not self.bRelSmallerThan and not bc then return true end end;function B_Goal_EntityDistance:GetCustomData(b2)local b5={}if b2==2 then table.insert(b5,">")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_EntityDistance:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,b1.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(b2,b3)if b2==0 then self.Target=b3 elseif b2==1 then if b3==nil or b3==""then b3=0 end;self.Distance=b3*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(b3)end elseif b2==1 then self.PlayerID=tonumber(b3)*1 elseif b2==2 then self.Category=b3 elseif b2==3 then self.bRelSmallerThan=tostring(b3)=="true"or tostring(b3)=="<"elseif b2==4 then self.NumberOfUnits=b3*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(b1)local bd=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#bd>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#bd<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(be,q,bf)local bd={}local bg={}if q==-1 then for f=0,8 do local bh=0;repeat bg={Logic.GetEntitiesOfCategoryInTerritory(be,f,q,bh)}bd=Array_Append(bd,bg)bh=bh+#bg until#bg==0 end else local bh=0;repeat bg={Logic.GetEntitiesOfCategoryInTerritory(be,q,bf,bh)}bd=Array_Append(bd,bg)bh=bh+#bg until#bg==0 end;return bd end;function B_Goal_UnitsOnTerritory:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,-1)for f=1,8 do table.insert(b5,f)end elseif b2==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(b5,g)end end;table.sort(b5)elseif b2==3 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_UnitsOnTerritory:Debug(b1)local bi={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(bi,self.TerritoryID)then debug(false,b1.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,b1.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.BuffName=b3;self.Buff=Buffs[b3]end end;function B_Goal_ActivateBuff:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local b7=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then b7=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,b7)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(b7[self.BuffName])),b1)end;local bj=Logic.GetBuff(self.PlayerID,self.Buff)if bj and bj~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(b2)local b5={}if b2==1 then b5={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(b5,"Buff_Gems")table.insert(b5,"Buff_MusicalInstrument")table.insert(b5,"Buff_Olibanum")end;table.sort(b5)else assert(false)end;return b5 end;function B_Goal_ActivateBuff:GetIcon()local b7={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then b7[Buffs.Buff_Gems]="Goods.G_Gems"b7[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"b7[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return b7[self.Buff]end;function B_Goal_ActivateBuff:Debug(b1)if not self.Buff then debug(false,b1.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(b2,b3)if b2==0 then self.Entity1=b3 elseif b2==1 then self.Entity2=b3 elseif b2==2 then self.bRoadsOnly=ToBoolean(b3)end end;function B_Goal_BuildRoad:GetCustomData(b2)local b5;if b2==2 then b5={"true","false"}end;return b5 end;function B_Goal_BuildRoad:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.EntityName1=b3 elseif b2==2 then self.EntityName2=b3 end end;function B_Goal_BuildWall:CustomFunction(b1)local bk=GetID(self.EntityName1)local bl=GetID(self.EntityName2)if not IsExisting(bk)then return false end;if not IsExisting(bl)then return false end;local I,J,K=Logic.EntityGetPos(bk)if Logic.IsBuilding(bk)==1 then I,J=Logic.GetBuildingApproachPosition(bk)end;local bm=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)local I,J,K=Logic.EntityGetPos(bl)if Logic.IsBuilding(bl)==1 then I,J=Logic.GetBuildingApproachPosition(bl)end;local bn=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)if bm~=bn then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(b1)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then debug(false,b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(false,b1.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(b2,b3)if b2==0 then self.TerritoriesToClaim=b3*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 elseif b2==2 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,b4,self.GoodAmount}end;function B_Goal_Produce:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,b4,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 elseif b2==2 then self.bRelSmallerThan=b3=="<"or tostring(b3)=="true"end end;function B_Goal_GoodAmount:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Need=b3 end end;function B_Goal_SatisfyNeed:GetMsgKey()local b7={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local b8=b7[Needs[self.Need]]if b8 then return b8 end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(b2,b3)if b2==0 then self.SettlersAmount=b3*1 elseif b2==1 then self.PlayerID=b3*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(b2,b3)if b2==0 then self.SpousesAmount=b3*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.bRelSmallerThan=tostring(b3)=="true"or tostring(b3)=="<"elseif b2==2 then self.NumberOfUnits=b3*1 end end;function B_Goal_SoldierCount:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local bo=tostring(self.bRelSmallerThan)local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),s,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[bo]),self.NumberOfUnits),b1)end;local bp=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and bp<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and bp>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(b1)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(b2,b3)if b2==0 then self.KnightTitle=b3 end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(b2)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(b2,b3)if b2==0 then self.PlayerID=tonumber(b3)else assert(b2==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(b3)end end;function B_Goal_Festivals:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),s,self.NeededFestivals),b1)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local bq={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local br=0;for g=2,#bq do local bs=bq[g]if Logic.GetIndexOnOutStockByGoodType(bs,Goods.G_Beer)~=-1 then local bt=Logic.GetAmountOnOutStockByGoodType(bs,Goods.G_Beer)br=br+bt end end;if not self.FestivalStarted and br>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif br==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then debug(false,b1.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_Capture:GetMsgKey()local an=GetID(self.ScriptName)if Logic.IsEntityAlive(an)then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 elseif b2==2 then self.PlayerID=b3*1 end end;function B_Goal_CaptureType:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then for f=0,8 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Goal_CaptureType:GetMsgKey()local an=self.EntityName;if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local an=GetID(self.ScriptName)if an and an~=0 then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SpecialBuilding)==1 then local b7={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local bb=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.bRelSmallerThan=b3=="<"elseif b2==2 then self.Amount=b3*1 end end;function B_Goal_ResourceAmount:CustomFunction(b1)local an=GetID(self.ScriptName)if an and an~=0 and Logic.GetResourceDoodadGoodType(an)~=0 then local bu=Logic.GetResourceDoodadGoodAmount(an)if self.bRelSmallerThan and bu<self.Amount or not self.bRelSmallerThan and bu>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_ResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then debug(false,b1.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Goal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Goal_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Relation=b3 elseif b2==2 then local bv=tonumber(b3)self.Value=bv==nil and tostring(b3)or bv end end;function B_Goal_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if bw==bx then return true end elseif self.Relation=="~="then if bw==bx then return true end elseif self.Relation=="<"then if bw<bx then return true end elseif self.Relation=="<="then if bw<=bx then return true end elseif self.Relation==">="then if bw>=bx then return true end else if bw>bx then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(b2)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(b1)local by={"==","~=","<=","<",">",">="}local bz={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(by,self.Relation)then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Goal_TributeDiplomacy(...)return B_Goal_TributeDiplomacy:new(...)end;B_Goal_TributeDiplomacy={Name="Goal_TributeDiplomacy",Description={en="Goal: AI requests periodical tribute for better Diplomacy",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer bessere Diplomatie. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour une meilleure diplomatie. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Time till next peyment in seconds",de="Zeit bis zur Forderung in Sekunden",fr="Temps jusqu'à la demande en secondes"},{ParameterType.Number,en="Time to pay tribute in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Custom,en="Restart if failed to pay",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeDiplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeDiplomacy:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.PeriodLength=b3*1 elseif b2==2 then self.TributTime=b3*1 elseif b2==3 then self.StartMsg=b3 elseif b2==4 then self.SuccessMsg=b3 elseif b2==5 then self.FailureMsg=b3 elseif b2==6 then self.RestartAtFailure=ToBoolean(b3)end end;function B_Goal_TributeDiplomacy:GetTributeQuest(b1)if not self.InternTributeQuest then local bA=CONST_LANGUAGE;local bB=self.StartMsg;if type(bB)=="table"then bB=bB[bA]end;local bC=self.SuccessMsg;if type(bC)=="table"then bC=bC[bA]end;local bD=self.FailureMsg;if type(bD)=="table"then bD=bD[bA]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bE,bF=QuestTemplate:New(b1.Identifier.."_TributeDiplomacyQuest_"..Lib.Core.Quest.QuestCounter,b1.SendingPlayer,b1.ReceivingPlayer,{{Objective.Deliver,{Goods.G_Gold,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,nil,nil,true,true,nil,bB,bC,bD)self.InternTributeQuest=bF end end;function B_Goal_TributeDiplomacy:CheckTributeQuest(b1)if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Over and not self.RestartQuest then if self.InternTributeQuest.Result~=QuestResult.Success then SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.Enemy)if not self.RestartAtFailure then return false end else SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.TradeContact)end;self.RestartQuest=true;self.Time=Logic.GetTime()end end;function B_Goal_TributeDiplomacy:CheckTributePlayer(b1)local bG=Logic.GetStoreHouse(b1.SendingPlayer)if bG==0 or Logic.IsEntityDestroyed(bG)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeDiplomacy:TributQuestRestarter(b1)if self.InternTributeQuest and self.Time and self.RestartQuest and Logic.GetTime()-self.Time>=self.PeriodLength then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)self.RestartQuest=nil end end;function B_Goal_TributeDiplomacy:CustomFunction(b1)self:GetTributeQuest(b1)if self:CheckTributeQuest(b1)==false then return false end;if self:CheckTributePlayer(b1)==true then return true end;self:TributQuestRestarter(b1)end;function B_Goal_TributeDiplomacy:Debug(b1)if self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": Amount is negative!")return true end;if self.PeriodLength<self.TributTime then debug(false,b1.Identifier..": "..self.Name..": TributTime too long!")return true end end;function B_Goal_TributeDiplomacy:Reset(b1)self.Time=nil;self.InternTributeQuest=nil;self.RestartQuest=nil end;function B_Goal_TributeDiplomacy:Interrupt(b1)if self.InternTributeQuest~=nil then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeDiplomacy:GetCustomData(b2)if b2==6 then return{"true","false"}end end;RegisterBehavior(B_Goal_TributeDiplomacy)function Goal_TributeClaim(...)return B_Goal_TributeClaim:new(...)end;B_Goal_TributeClaim={Name="Goal_TributeClaim",Description={en="Goal: AI requests periodical tribute for a specified territory. The quest sender is the demanding player.",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer ein Territorium. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour un territoire. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Good Type",de="Warentyp",fr="Type de biens"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Length of Period in seconds",de="Sekunden bis zur nächsten Forderung",fr="secondes jusqu'à la prochaine demande"},{ParameterType.Number,en="Time to pay Tribut in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Number,en="How often to pay (0 = forerver)",de="Anzahl der Tributquests (0 = unendlich)",fr="Nombre de quêtes de tribut (0 = infini)"},{ParameterType.Custom,en="Other Owner cancels the Quest",de="Anderer Spieler kann Quest beenden",fr="Un autre joueur peut terminer une quête"},{ParameterType.Custom,en="About if a rate is not payed",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeClaim:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeClaim:AddParameter(b2,b3)if b2==0 then if type(b3)=="string"then b3=GetTerritoryIDByName(b3)end;self.TerritoryID=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.GoodType=Goods[b3 or"G_Gold"]elseif b2==3 then self.Amount=b3*1 elseif b2==4 then self.PeriodLength=b3*1 elseif b2==5 then self.TributTime=b3*1 elseif b2==6 then self.StartMsg=b3 elseif b2==7 then self.SuccessMsg=b3 elseif b2==8 then self.FailureMsg=b3 elseif b2==9 then self.HowOften=b3*1 elseif b2==10 then self.OtherOwnerCancels=ToBoolean(b3)elseif b2==11 then self.DontPayCancels=ToBoolean(b3)end end;function B_Goal_TributeClaim:CureOutpost(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(bH)and GetHealth(bH)<25 and Logic.IsBuildingBeingKnockedDown(bH)==false then while Logic.GetEntityHealth(bH)<Logic.GetEntityMaxHealth(bH)*0.6 do Logic.HealEntity(bH,1)end end end;function B_Goal_TributeClaim:RestartTributeQuest(b1)if self.InternTributeQuest then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)end end;function B_Goal_TributeClaim:CreateTributeQuest(b1)if not self.InternTributeQuest then local bA=CONST_LANGUAGE;local bB=self.StartMsg;if type(bB)=="table"then bB=bB[bA]end;local bC=self.SuccessMsg;if type(bC)=="table"then bC=bC[bA]end;local bD=self.FailureMsg;if type(bD)=="table"then bD=bD[bA]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bI=function()self.Time=Logic.GetTime()end;local bE,bF=QuestTemplate:New(b1.Identifier.."_TributeClaimQuest"..Lib.Core.Quest.QuestCounter,self.PlayerID,b1.ReceivingPlayer,{{Objective.Deliver,{self.GoodType,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,bI,nil,true,true,nil,bB,bC,bD)self.InternTributeQuest=bF end end;function B_Goal_TributeClaim:OnTributeFailed(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(bH)then Logic.ChangeEntityPlayerID(bH,self.PlayerID)end;Logic.SetTerritoryPlayerID(self.TerritoryID,self.PlayerID)self.InternTributeQuest.State=false;self.Time=nil;if self.DontPayCancels then b1:Interrupt()end end;function B_Goal_TributeClaim:OnTributePaid(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if self.InternTributeQuest.Result==QuestResult.Success then if Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if IsExisting(bH)then Logic.ChangeEntityPlayerID(bH,b1.ReceivingPlayer)end;Logic.SetTerritoryPlayerID(self.TerritoryID,b1.ReceivingPlayer)end end;if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then if self.HowOften and self.HowOften~=0 then self.TributeCounter=(self.TributeCounter or 0)+1;if self.TributeCounter>=self.HowOften then return false end end;self:RestartTributeQuest()self.Time=nil end end;function B_Goal_TributeClaim:CustomFunction(b1)self:CreateTributeQuest(b1)self:CureOutpost(b1)if Logic.GetTerritoryPlayerID(self.TerritoryID)==b1.ReceivingPlayer or Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if self.OtherOwner then self:RestartTributeQuest()self.OtherOwner=nil end;if self.InternTributeQuest.State==QuestState.Over then if self.InternTributeQuest.Result==QuestResult.Failure then self:OnTributeFailed(b1)else self:OnTributePaid(b1)end elseif self.InternTributeQuest.State==false then if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then self:RestartTributeQuest(b1)end end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)==0 and self.InternTributeQuest then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)~=self.PlayerID then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;if self.OtherOwnerCancels then b1:Interrupt()end;self.OtherOwner=true end;local bG=Logic.GetStoreHouse(self.PlayerID)if bG==0 or Logic.IsEntityDestroyed(bG)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeClaim:Debug(b1)if self.TerritoryID==0 then debug(false,b1.Identifier..": "..self.Name..": Unknown Territory")return true end;if not self.Quest and Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end;if self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": Amount is negative")return true end;if self.PeriodLength<self.TributTime or self.PeriodLength<1 then debug(false,b1.Identifier..": "..self.Name..": Period Length is wrong")return true end;if self.HowOften<0 then debug(false,b1.Identifier..": "..self.Name..": HowOften is negative")return true end end;function B_Goal_TributeClaim:Reset(b1)self.InternTributeQuest=nil;self.Time=nil;self.OtherOwner=nil end;function B_Goal_TributeClaim:Interrupt(b1)if type(self.InternTributeQuest)=="table"then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeClaim:GetCustomData(b2)if b2==2 then local b5={}for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)return b5 elseif b2==10 or b2==11 then return{"false","true"}end end;RegisterBehavior(B_Goal_TributeClaim)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(b1)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bJ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bJ]and CONST_INITIALIZED_OBJECTS[bJ]==b1.Identifier then debug(false,b1.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then local aT=0;if b3=="Always"or 1 then aT=1 end;self.UsingState=aT*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(b1)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(b2)if b2==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bJ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bJ]and CONST_INITIALIZED_OBJECTS[bJ]==b1.Identifier then debug(false,b1.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(b1)local bK=b1.SendingPlayer;local bL=b1.ReceivingPlayer;local State=GetDiplomacyState(bL,bK)if State>-2 then SetDiplomacyState(bL,bK,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID1=b3*1 elseif b2==1 then self.PlayerID2=b3*1 elseif b2==2 then self.Relation=DiplomacyStates[b3]end end;function B_Reprisal_Diplomacy:CustomFunction(b1)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(b1)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then debug(false,b1.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then debug(false,b1.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Reprisal_DestroyEntity:CustomFunction(b1)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(b1)if not IsExisting(self.ScriptName)then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,b1.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.NewType=b3 elseif b2==2 then self.PlayerID=tonumber(b3)end end;function B_Reprisal_ReplaceEntity:CustomFunction(b1)local bJ=GetID(self.ScriptName)local bM=self.PlayerID;if bM==Logic.EntityGetPlayer(bJ)then bM=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],bM)end;function B_Reprisal_ReplaceEntity:GetCustomData(b2)local b5={}if b2==1 then for g,h in pairs(Entities)do local t={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then b5={"-","0","1","2","3","4","5","6","7","8"}end;return b5 end;function B_Reprisal_ReplaceEntity:Debug(b1)if not Entities[self.NewType]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)then self.WarningPrinted=true;warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestRestart:CustomFunction(b1)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestFailure:CustomFunction(b1)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestSuccess:CustomFunction(b1)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(b1)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(b1)if not IsValidQuest(self.QuestName)then debug(false,b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)local bF=Quests[bE]if bF.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.InterruptEnded=ToBoolean(b3)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reprisal_QuestForceInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)local bF=Quests[bE]if self.InterruptEnded or bF.State~=QuestState.Over then bF:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Operator=b3 elseif b2==2 then local bv=tonumber(b3)self.Value=bv==nil and tostring(b3)or bv end end;function B_Reprisal_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then bw=bx elseif self.Operator=="+"then bw=bw+bx elseif self.Operator=="-"then bw=bw-bx elseif self.Operator=="*"then bw=bw*bx elseif self.Operator=="/"then bw=bw/bx elseif self.Operator=="^"then bw=bw%bx end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,bw)end;function B_Reprisal_CustomVariables:GetCustomData(b2)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(b1)local bO={"=","+","-","*","/","^"}if not table.contains(bO,self.Operator)then debug(false,b1.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then debug(false,b1.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Reprisal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,b1)end;function B_Reprisal_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.LockType=b3=="Lock"elseif b2==2 then self.Technology=b3 end end;function B_Reprisal_Technology:CustomFunction(b1)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(b2)local b5={}if b2==1 then b5[1]="Lock"b5[2]="UnLock"elseif b2==2 then for g,h in pairs(Technologies)do table.insert(b5,g)end end;return b5 end;function B_Reprisal_Technology:Debug(b1)if not Technologies[self.Technology]then debug(false,b1.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.Distance=b3*1 elseif b2==2 then self.Waittime=b3*1 elseif b2==3 then self.RewardType=b3 elseif b2==4 then self.RewardAmount=b3*1 elseif b2==5 then self.FirstCostType=b3 elseif b2==6 then self.FirstCostAmount=b3*1 elseif b2==7 then self.SecondCostType=b3 elseif b2==8 then self.SecondCostAmount=b3*1 elseif b2==9 then local aT=nil;if b3=="Always"or b3==1 then aT=1 elseif b3=="Never"or b3==2 then aT=2 elseif b3=="Knight only"or b3==0 then aT=0 end;self.UsingState=aT end end;function B_Reward_ObjectInit:CustomFunction(b1)local bJ=GetID(self.ScriptName)if bJ==0 then return end;CONST_INITIALIZED_OBJECTS[bJ]=b1.Identifier;Logic.InteractiveObjectClearCosts(bJ)Logic.InteractiveObjectClearRewards(bJ)Logic.InteractiveObjectSetInteractionDistance(bJ,self.Distance)Logic.InteractiveObjectSetTimeToOpen(bJ,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(bJ,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(bJ,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(bJ,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(bJ,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(bJ,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(bJ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(bJ,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(bJ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(bJ,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(bJ)table.insert(HiddenTreasures,bJ)end;function B_Reward_ObjectInit:GetCustomData(b2)if b2==3 or b2==5 or b2==7 then local b5={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then b5[#b5+1]="G_Gems"b5[#b5+1]="G_MusicalInstrument"b5[#b5+1]="G_Olibanum"end;return b5 elseif b2==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(b1)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then debug(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(false,b1.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then debug(false,b1.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(b1)local bK=b1.SendingPlayer;local bL=b1.ReceivingPlayer;local State=GetDiplomacyState(bL,bK)if State<2 then SetDiplomacyState(bL,bK,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradePost(...)return B_Reward_TradePost:new(...)end;B_Reward_TradePost={Name="B_Reward_TradePost",Description={en="Sets options for a Tradepost and deactivates it.",de="Stellt einen Handelsposten ein und deaktiviert ihn.",fr=""},Parameter={{ParameterType.ScriptName,en="ScriptName",de="ScriptName"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID"},{ParameterType.Custom,en="Type of good to pay 1",de="Resourcentyp Bezahlung 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 1",de="Resourcentyp Angebot 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource"},{ParameterType.Custom,en="Type of good to pay 2",de="Resourcentyp Bezahlung 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 2",de="Resourcentyp Angebot 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 3",de="Resourcentyp Bezahlung 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 3",de="Resourcentyp Angebot 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 4",de="Resourcentyp Bezahlung 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 4",de="Resourcentyp Angebot 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""}}}function B_Reward_TradePost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_TradePost:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==3 then self.PayType1=b3 elseif b2==4 then self.PayAmount1=b3*1 elseif b2==5 then self.OfferType1=b3 elseif b2==6 then self.OfferAmount1=b3*1 elseif b2==7 then self.PayType2=b3 elseif b2==8 then self.PayAmount2=b3*1 elseif b2==9 then self.OfferType2=b3 elseif b2==10 then self.OfferAmount2=b3*1 elseif b2==11 then self.PayType3=b3 elseif b2==12 then self.PayAmount3=b3*1 elseif b2==13 then self.OfferType3=b3 elseif b2==14 then self.OfferAmount3=b3*1 elseif b2==15 then self.PayType4=b3 elseif b2==16 then self.PayAmount4=b3*1 elseif b2==17 then self.OfferType4=b3 elseif b2==18 then self.OfferAmount4=b3*1 end end;function B_Reward_TradePost:CustomFunction(b1)local bP=0;for f=1,4 do if self["PayAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]and self["OfferAmount"..f]>0 then bP=f else break end end;debug(IsExisting(self.ScriptName),b1.Identifier..": Error in "..self.Name..": CustomFunction: Tradepost is missing")local bQ=GetID(self.ScriptName)if bP>0 then Logic.TradePost_SetTradePartnerGenerateGoodsFlag(bQ,true)Logic.TradePost_SetTradePartnerPlayerID(bQ,self.PlayerID)for f=1,bP do for aV=1,bP do Logic.TradePost_SetTradeDefinition(bQ,aV-1,Goods[self["PayType"..aV]],self["PayAmount"..aV],Goods[self["OfferType"..aV]],self["OfferAmount"..aV])end end;Logic.TradePost_SetActiveTradeSlot(bQ,0)Logic.InteractiveObjectSetAvailability(bQ,false)for n=1,8 do Logic.InteractiveObjectSetPlayerState(bQ,n,2)end end end;function B_Reward_TradePost:DEBUG(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..":  Error in "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif not IsExisting(self.ScriptName)then debug(false,b1.Identifier..":  Error in "..self.Name..": No TradePost found")return true end;for f=1,4 do if self["PayAmount"..f]and self["OfferAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]>0 and(not Goods[self["PayType"..f]]or not Goods[self["OfferType"..f]])then debug(false,b1.Identifier..":  Error in "..self.Name..": Offer type or pay type in Slot "..f.." is wrong")return true end end end;function B_Reward_TradePost:GetCustomData(bR)if bR>=2 and bR<=16 and bR%2==0 then return{"G_Carcass","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Milk","G_RawFish","G_Stone","G_Wood","G_Wool","G_Salt","G_Dye","G_Olibanum","G_Gems","G_MusicalInstrument"}end end;if g_GameExtraNo and g_GameExtraNo>=1 then RegisterBehavior(B_Reward_TradePost)end;function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then b3=b3 or 0;self.AmountOffer1=b3*1 elseif b2==2 then self.Offer1=b3 elseif b2==3 then b3=b3 or 0;self.AmountOffer2=b3*1 elseif b2==4 then self.Offer2=b3 elseif b2==5 then b3=b3 or 0;self.AmountOffer3=b3*1 elseif b2==6 then self.Offer3=b3 elseif b2==7 then b3=b3 or 0;self.AmountOffer4=b3*1 elseif b2==8 then self.Offer4=b3 end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local bS=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(bS)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(bS,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(bS,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(bS,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(b2)local bT={1,2,3,4,5,6,7,8}local bU={"1","2","3","4","5","6","7","8","9"}local bV={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(bV,"G_Gems")table.insert(bV,"G_Olibanum")table.insert(bV,"G_MusicalInstrument")table.insert(bV,"G_MilitaryBandit_Ranged_AS")table.insert(bV,"G_MilitaryBandit_Melee_AS")table.insert(bV,"U_MilitarySword_Khana")table.insert(bV,"U_MilitaryBow_Khana")end;if b2==0 then return bT elseif b2==1 or b2==3 or b2==5 or b2==7 then return bU elseif b2==2 or b2==4 or b2==6 or b2==8 then return bV end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.Orientation=b3*1 elseif b2==4 then self.SoldierCount=b3*1 elseif b2==5 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateBattalion:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,self.SoldierCount)local bX=GetID(self.ScriptNameEntity)if Logic.IsBuilding(bX)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(bW,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end;function B_Reward_CreateBattalion:GetCustomData(b2)local b5={}if b2==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateBattalion:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.ScriptNameEntity=b3 elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.UnitKey=b3 elseif b2==4 then self.Orientation=b3*1 elseif b2==5 then self.SoldierCount=b3*1 elseif b2==6 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local bY=GetID(self.ScriptNameEntity)local I,J,K=Logic.EntityGetPos(bY)if Logic.IsBuilding(bY)==1 then I,J=Logic.GetBuildingApproachPosition(bY)end;for f=1,self.Amount do local bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],I,J,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(bW,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(b2)local b5={}if b2==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==6 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateSeveralBattalions:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 elseif b2==1 then self.Type=EGL_Effects[b3]elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.Location=b3 elseif b2==4 then self.Orientation=b3*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Location)then return end;local bZ=assert(GetID(self.Location),b1.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local b_,c0=Logic.GetEntityPosition(bZ)local aJ=tonumber(self.Orientation)local c1=Logic.CreateEffectWithOrientation(self.Type,b_,c0,aJ,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=c1 end end;function B_Reward_CreateEffect:Debug(b1)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then debug(false,b1.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then debug(false,b1.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then debug(false,b1.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(b2)assert(b2==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local c2={}for g,h in pairs(EGL_Effects)do table.insert(c2,g)end;table.sort(c2)return c2 end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.Orientation=b3*1 elseif b2==4 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateEntity:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,1)local c3,c4=Logic.GetSoldiersAttachedToLeader(bW)Logic.SetOrientation(c4,math.floor(self.Orientation+0.5))else bW=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID)end;local bX=GetID(self.ScriptNameEntity)if Logic.IsBuilding(bX)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(bW,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end;function B_Reward_CreateEntity:GetCustomData(b2)local b5={}if b2==2 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==4 or b2==5 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateEntity:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.ScriptNameEntity=b3 elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.UnitKey=b3 elseif b2==4 then self.Orientation=b3*1 elseif b2==5 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateSeveralEntities:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,1)local c3,c4=Logic.GetSoldiersAttachedToLeader(bW)Logic.SetOrientation(c4,math.floor(self.Orientation+0.5))else bW=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(bW,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(b2)local b5={}if b2==3 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 or b2==6 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateSeveralEntities:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(b2,b3)if b2==0 then self.ScriptNameUnit=b3 elseif b2==1 then self.ScriptNameDest=b3 end end;function B_Reward_MoveSettler:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local c5=GetID(self.ScriptNameDest)local c6,c7=Logic.GetEntityPosition(c5)if Logic.IsBuilding(c5)==1 then c6,c7=Logic.GetBuildingApproachPosition(c5)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),c6,c7)end;function B_Reward_MoveSettler:Debug(b1)if not IsExisting(self.ScriptNameUnit)then debug(false,b1.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then debug(false,b1.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(b1)b1:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(b1.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end elseif b2==3 then self.NumSword=b3*1 elseif b2==4 then self.NumBow=b3*1 elseif b2==5 then self.NumCatapults=b3*1 elseif b2==6 then self.NumSiegeTowers=b3*1 elseif b2==7 then self.NumRams=b3*1 elseif b2==8 then self.NumAmmoCarts=b3*1 elseif b2==9 then if b3=="Normal"or b3==false then self.TroopType=false elseif b3=="RedPrince"or b3==true then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==10 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(b2)local b5={}if b2==9 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==10 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(b1)local c8=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if c8~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,c8,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then debug(false,b1.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then debug(false,b1.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then debug(false,b1.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then debug(false,b1.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then debug(false,b1.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TargetName=b3 elseif b2==3 then self.Radius=b3*1 elseif b2==4 then self.NumSword=b3*1 elseif b2==5 then self.NumBow=b3*1 elseif b2==6 then if b3=="Normal"or b3==false then self.TroopType=false elseif b3=="RedPrince"or b3==true then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==7 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(b2)local b5={}if b2==6 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==7 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local c8=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,c8,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TargetName=b3 elseif b2==3 then self.Radius=b3*1 elseif b2==4 then self.Time=b3*1 elseif b2==5 then self.NumSword=b3*1 elseif b2==6 then self.NumBow=b3*1 elseif b2==7 then self.CaptureTradeCarts=ToBoolean(b3)elseif b2==8 then if b3=="Normal"or b3==true then self.TroopType=false elseif b3=="RedPrince"or b3==false then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==9 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(b2)local b5={}if b2==7 then table.insert(b5,"false")table.insert(b5,"true")elseif b2==8 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==9 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local c8=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,c8,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then debug(false,b1.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then local c9={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=c9[b3]elseif b2==2 then self.Value=b3*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(b1)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(b2)if b2==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(b1)if Logic.GetStoreHouse(self.AIPlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then debug(false,b1.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then debug(false,b1.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then debug(false,b1.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then debug(false,b1.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(b2,b3)if b2==0 then self.AIPlayer=b3*1 elseif b2==1 then self.Aggressiveness=tonumber(b3)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local aI=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)assert(aI~=nil)PlayerAIs[self.AIPlayer]=aI;if self.Aggressiveness>=2 then aI.ProfileLoop=AIProfile_Skirmish;aI.Skirmish=aI.Skirmish or{}aI.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;aI.Skirmish.Claim_MaxTime=aI.Skirmish.Claim_MinTime*2 else aI.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(b1)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(b2)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(b2,b3)if b2==0 then self.AIPlayer=b3*1 elseif b2==1 then self.Enemy=b3*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local aI=PlayerAIs[self.AIPlayer]if aI and aI.Skirmish then aI.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(b1)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.Amount=b3*1 end end;function B_Reward_SetResourceAmount:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local B=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(B)==0 then return false end;Logic.SetResourceDoodadGoodAmount(B,self.Amount)end;function B_Reward_SetResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then debug(false,b1.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 end end;function B_Reward_Resources:GetRewardTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,b4,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.GoodType=b3 elseif b2==4 then self.GoodAmount=b3*1 elseif b2==5 then self.OverrideTargetPlayer=tonumber(b3)elseif b2==6 then self.IgnoreReservation=ToBoolean(b3)elseif b2==7 then self.ReplaceEntity=ToBoolean(b3)end end;function B_Reward_SendCart:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local an=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(an,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(an,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(b2)local b5={}if b2==2 then b5={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif b2==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 then table.insert(b5,"-")for f=1,8 do table.insert(b5,f)end elseif b2==6 then table.insert(b5,"false")table.insert(b5,"true")elseif b2==7 then table.insert(b5,"false")table.insert(b5,"true")end;return b5 end;function B_Reward_SendCart:Debug(b1)if not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then debug(false,b1.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then debug(false,b1.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then debug(false,b1.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(b2,b3)if b2==0 then self.Points=b3 end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 else self.SoldiersType=b3 end end;function B_Reward_AI_MountOutpost:CustomFunction(b1)local ca=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),b1.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local cb=Logic.EntityGetPlayer(ca)local cc,cd=Logic.GetBuildingApproachPosition(ca)local ce=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],cc,cd,0,cb,0)AICore.HideEntityFromAI(cb,ce,true)Logic.CommandEntityToMountBuilding(ce,ca)end;function B_Reward_AI_MountOutpost:GetCustomData(b2)if b2==1 then local b5={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then b5[#b5+1]=g end end;return b5 end end;function B_Reward_AI_MountOutpost:Debug(b1)if Logic.IsEntityDestroyed(self.Scriptname)then debug(false,b1.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(b2,b3)self.QuestName=b3 end;function B_Reward_QuestRestartForceActive:CustomFunction(b1)local bE,bF=self:ResetQuest(b1)if bE then bF:SetMsgKeyOverride()bF:SetIconOverride()bF:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 end end;function B_Reward_UpgradeBuilding:CustomFunction(b1)local cf=GetID(self.Building)if cf~=0 and Logic.IsBuilding(cf)==1 and Logic.IsBuildingUpgradable(cf,true)and Logic.IsBuildingUpgradable(cf,false)then Logic.UpgradeBuilding(cf)end end;function B_Reward_UpgradeBuilding:Debug(b1)local cf=GetID(self.Building)if not(cf~=0 and Logic.IsBuilding(cf)==1 and Logic.IsBuildingUpgradable(cf,true)and Logic.IsBuildingUpgradable(cf,false))then debug(false,b1.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then self.UpgradeLevel=tonumber(b3)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local cf=Logic.GetEntityIDByName(self.Building)local cg=Logic.GetUpgradeLevel(cf)local ch=Logic.GetMaxUpgradeLevel(cf)if cf~=0 and Logic.IsBuilding(cf)==1 and(Logic.IsBuildingUpgradable(cf,true)or ch~=0 and ch==cg)then Logic.SetUpgradableBuildingState(cf,math.min(self.UpgradeLevel,ch),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(b1)local cf=Logic.GetEntityIDByName(self.Building)if not cf or Logic.IsBuilding(cf)==0 then debug(false,b1.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then debug(false,b1.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(b2)if b2==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.DiplState=b3 end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Need=b3 elseif b2==2 then self.WorkersOnStrike=b3*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(b1)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then debug(false,b1.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then debug(false,b1.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Trigger_OnResourceDepleted:CustomFunction(b1)local an=GetID(self.ScriptName)return not an or an==0 or Logic.GetResourceDoodadGoodType(an)==0 or Logic.GetResourceDoodadGoodAmount(an)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.GoodTypeName=b3 elseif b2==2 then self.GoodAmount=b3*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(b1)local ci=Logic.GetStoreHouse(self.PlayerID)if ci==0 then return false end;local b4=Logic.GetGoodTypeID(self.GoodTypeName)local cj=Logic.GetAmountOnOutStockByGoodType(ci,b4)if cj>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then debug(false,b1.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then debug(false,b1.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(b1)local bE=GetQuestID(self.QuestName)if bE~=nil then assert(type(bE)=="number")if Quests[bE].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(b1)end;function B_Trigger_OnQuestActiveWait:Reset(b1)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.Over and Quests[bE].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.Over and Quests[bE].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Relation=b3 elseif b2==2 then local bv=tonumber(b3)bv=bv~=nil and bv or b3;self.Value=bv end end;function B_Trigger_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return bw==bx elseif self.Relation~="~="then return bw~=bx elseif self.Relation==">"then return bw>bx elseif self.Relation==">="then return bw>=bx elseif self.Relation=="<="then return bw<=bx else return bw<bx end;return false end;function B_Trigger_CustomVariables:GetCustomData(b2)if b2==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(b1)local by={"==","~=","<=","<",">",">="}local bz={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(by,self.Relation)then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(b2,b3)if b2==0 then self.Month=b3*1 end end;function B_Trigger_OnMonth:CustomFunction(b1)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(b2)local b5={}if b2==0 then for f=1,12 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Trigger_OnMonth:Debug(b1)if self.Month<1 or self.Month>12 then debug(false,b1.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(b1)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(b2,b3)if b2==0 then self.Time=b3*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(b1)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if ck.State==QuestState.Over and ck.Result==QuestResult.Failure or cl.State==QuestState.Over and cl.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(b1)if self.Quest1==self.Quest2 then debug(false,b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if ck.State==QuestState.Over and ck.Result==QuestResult.Success or cl.State==QuestState.Over and cl.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(b1)if self.Quest1==self.Quest2 then debug(false,b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(b2,b3)if b2==0 then self.LeastAmount=tonumber(b3)elseif b2==1 then self.QuestAmount=tonumber(b3)elseif b2==2 then self.QuestName1=b3 elseif b2==3 then self.QuestName2=b3 elseif b2==4 then self.QuestName3=b3 elseif b2==5 then self.QuestName4=b3 elseif b2==6 then self.QuestName5=b3 end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local cm=0;for f=1,self.QuestAmount do local bE=GetQuestID(self["QuestName"..f])if IsValidQuest(bE)then if Quests[bE].Result==QuestResult.Success then cm=cm+1;if cm>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(b1)local cn=self.LeastAmount;local co=self.QuestAmount;if cn<=0 or cn>5 then debug(false,b1.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif co<=0 or co>5 then debug(false,b1.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif cn>co then debug(false,b1.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,co do if not IsValidQuest(self["QuestName"..f])then debug(false,b1.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(b2)if b2==0 or b2==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(b1)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Trigger_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Trigger_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,b1.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)Lib.Core=Lib.Core or{}Lib.Core.LuaExtension={}CONST_TO_LOWERCASE_LOOKUP={["À"]="à",["Á"]="á",["Â"]="â",["Ã"]="ã",["Ä"]="ä",["Å"]="å",["Æ"]="æ",["Ç"]="ç",["È"]="è",["É"]="é",["Ê"]="ê",["Ë"]="ë",["Ì"]="ì",["Í"]="í",["Î"]="î",["Ï"]="ï",["Ð"]="ð",["Ñ"]="ñ",["Ò"]="ò",["Ó"]="ó",["Ô"]="ô",["Õ"]="õ",["Ö"]="ö",["Ø"]="ø",["Ù"]="ù",["Ú"]="ú",["Û"]="û",["Ü"]="ü",["Ý"]="ý",["Þ"]="þ",["Ā"]="ā",["Ă"]="ă",["Ą"]="ą",["Ć"]="ć",["Ĉ"]="ĉ",["Ċ"]="ċ",["Č"]="č",["Ď"]="ď",["Đ"]="đ",["Ē"]="ē",["Ĕ"]="ĕ",["Ė"]="ė",["Ę"]="ę",["Ě"]="ě",["Ĝ"]="ĝ",["Ğ"]="ğ",["Ġ"]="ġ",["Ģ"]="ģ",["Ĥ"]="ĥ",["Ħ"]="ħ",["Ĩ"]="ĩ",["Ī"]="ī",["Ĭ"]="ĭ",["Į"]="į",["İ"]="i",["Ĳ"]="ĳ",["Ĵ"]="ĵ",["Ķ"]="ķ",["Ĺ"]="ĺ",["Ļ"]="ļ",["Ľ"]="ľ",["Ŀ"]="ŀ",["Ł"]="ł",["Ń"]="ń",["Ņ"]="ņ",["Ň"]="ň",["Ŋ"]="ŋ",["Ō"]="ō",["Ŏ"]="ŏ",["Ő"]="ő",["Œ"]="œ",["Ŕ"]="ŕ",["Ŗ"]="ŗ",["Ř"]="ř",["Ś"]="ś",["Ŝ"]="ŝ",["Ş"]="ş",["Š"]="š",["Ţ"]="ţ",["Ť"]="ť",["Ŧ"]="ŧ",["Ũ"]="ũ",["Ū"]="ū",["Ŭ"]="ŭ",["Ů"]="ů",["Ű"]="ű",["Ų"]="ų",["Ŵ"]="ŵ",["Ŷ"]="ŷ",["Ÿ"]="ÿ",["Ź"]="ź",["Ż"]="ż",["Ž"]="ž",["ß"]="ß"}CONST_TO_UPPERCASE_LOOKUP={["à"]="À",["á"]="Á",["â"]="Â",["ã"]="Ã",["ä"]="Ä",["å"]="Å",["æ"]="Æ",["ç"]="Ç",["è"]="È",["é"]="É",["ê"]="Ê",["ë"]="Ë",["ì"]="Ì",["í"]="Í",["î"]="Î",["ï"]="Ï",["ð"]="Ð",["ñ"]="Ñ",["ò"]="Ò",["ó"]="Ó",["ô"]="Ô",["õ"]="Õ",["ö"]="Ö",["ø"]="Ø",["ù"]="Ù",["ú"]="Ú",["û"]="Û",["ü"]="Ü",["ý"]="Ý",["þ"]="Þ",["ā"]="Ā",["ă"]="Ă",["ą"]="Ą",["ć"]="Ć",["ĉ"]="Ĉ",["ċ"]="Ċ",["č"]="Č",["ď"]="Ď",["đ"]="Đ",["ē"]="Ē",["ĕ"]="Ĕ",["ė"]="Ė",["ę"]="Ę",["ě"]="Ě",["ĝ"]="Ĝ",["ğ"]="Ğ",["ġ"]="Ġ",["ģ"]="Ģ",["ĥ"]="Ĥ",["ħ"]="Ħ",["ĩ"]="Ĩ",["ī"]="Ī",["ĭ"]="Ĭ",["į"]="Į",["i"]="İ",["ĳ"]="Ĳ",["ĵ"]="Ĵ",["ķ"]="Ķ",["ĺ"]="Ĺ",["ļ"]="Ļ",["ľ"]="Ľ",["ŀ"]="Ŀ",["ł"]="Ł",["ń"]="Ń",["ņ"]="Ņ",["ň"]="Ň",["ŋ"]="Ŋ",["ō"]="Ō",["ŏ"]="Ŏ",["ő"]="Ő",["œ"]="Œ",["ŕ"]="Ŕ",["ŗ"]="Ŗ",["ř"]="Ř",["ś"]="Ś",["ŝ"]="Ŝ",["ş"]="Ş",["š"]="Š",["ţ"]="Ţ",["ť"]="Ť",["ŧ"]="Ŧ",["ũ"]="Ũ",["ū"]="Ū",["ŭ"]="Ŭ",["ů"]="Ů",["ű"]="Ű",["ų"]="Ų",["ŵ"]="Ŵ",["ŷ"]="Ŷ",["ÿ"]="Ÿ",["ź"]="Ź",["ż"]="Ż",["ž"]="Ž",["ß"]="ß"}Lib.Require("comfort/CopyTable")Lib.Require("comfort/SerializeTable")Lib.Register("core/feature/Core_LuaExtension")function Lib.Core.LuaExtension:Initialize()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnSaveGameLoaded()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnReportReceived(aF,...)end;function Lib.Core.LuaExtension:OverrideTable()table.compare=function(cp,cq,cr)assert(type(cp)=="table")assert(type(cq)=="table")cr=cr or function(cp,cq)return tostring(cp)<tostring(cq)end;assert(type(cr)=="function")return cr(cp,cq)end;table.equals=function(cp,cq)assert(type(cp)=="table")assert(type(cq)=="table")local cr=function(cp,cq)return table.tostring(cp)<table.tostring(cq)end;assert(type(cr)=="function")return cr(cp,cq)end;table.contains=function(cs,ct)assert(type(cs)=="table")for g,h in pairs(cs)do if h==ct then return true end end;return false end;table.length=function(cs)return#cs end;table.size=function(cs)local cu=0;for g,h in pairs(cs)do if g~="n"or g=="n"and type(h)~="number"then cu=cu+1 end end;return cu end;table.isEmpty=function(cs)return table.size(cs)==0 end;table.copy=function(cp,cq)cq=cq or{}assert(type(cp)=="table")assert(type(cq)=="table")return CopyTable(cp,cq)end;table.invert=function(cp)assert(type(cp)=="table")local cq={}for f=table.length(cp),1,-1 do table.insert(cq,cp[f])end;return cq end;table.push=function(cs,ct)assert(type(cs)=="table")table.insert(cs,1,ct)end;table.pop=function(cs)assert(type(cs)=="table")return table.remove(cs,1)end;table.tostring=function(cs)return SerializeTable(cs)end end;function Lib.Core.LuaExtension:OverrideString()string.contains=function(self,c4)return self:find(c4)~=nil end;string.indexOf=function(self,c4)return self:find(c4)end;string.slice=function(self,cv)cv=cv or"%s"local cs={}if self then for cw in self:gmatch("([^"..cv.."]+)")do table.insert(cs,cw)end end;return cs end;string.join=function(self,...)local c4=""local cx={self,...}for f=1,#cx do if type(cx[f])=="table"then c4=c4 ..string.join(unpack(cx[f]))else c4=c4 ..tostring(cx[f])end end;return c4 end;string.replace=function(self,cy,cz)local c4,cu=self:gsub(cy,cz,1)return c4 end;string.replaceAll=function(self,cy,cz)local c4,cu=self:gsub(cy,cz)return c4 end;string.toLowerCase=function(c4)local cA=string.gsub(c4,".",CONST_TO_LOWERCASE_LOOKUP)return cA end;function string.toUpperCase(c4)local cA=string.gsub(c4,".",CONST_TO_UPPERCASE_LOOKUP)return cA end end;function Lib.Core.LuaExtension:OverrideMath()math.lerp=function(c4,cu,ct)local cB=(cu-c4)/ct;return cB>1 and 1 or cB end;math.qmod=function(af,cC)return af-math.floor(af/cC)*cC end end;Lib.Core=Lib.Core or{}Lib.Core.Report={ScriptEventRegister={},ScriptEventListener={},ScriptCommandRegister={},ScriptCommandSequence=0}Report=Report or{}Command=Command or{}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_Report")function Lib.Core.Report:Initialize()if not IsLocalScript()then self:OverrideSoldierPayment()Lib.Core.Report:CreateScriptCommand("Cmd_SendReportToGlobal",function(aF,...)SendReport(aF,...)end)end end;function Lib.Core.Report:OnSaveGameLoaded()end;function Lib.Core.Report:OnReportReceived(aF,...)end;function Lib.Core.Report:OverrideSoldierPayment()GameCallback_SetSoldierPaymentLevel_Orig_Libertica=GameCallback_SetSoldierPaymentLevel;GameCallback_SetSoldierPaymentLevel=function(q,cD)if cD<=2 then return GameCallback_SetSoldierPaymentLevel_Orig_Libertica(q,cD)end;Lib.Core.Event:ProcessScriptCommand(q,cD)end end;function Lib.Core.Report:ProcessScriptCommand(q,aF)assert(aF and self.ScriptCommandRegister[aF],"Commands is invalid.")local s=Logic.GetPlayerName(q+4)local cE=self:DecodeScriptCommandParameters(s)self.ScriptCommandRegister[aF][2](unpack(cE))end;function Lib.Core.Report:CreateScriptCommand(r,cF)assert(not IsLocalScript(),"Commands must be created in global script.")self.ScriptCommandSequence=self.ScriptCommandSequence+1;local an=self.ScriptCommandSequence;local Name=r;if string.find(r,"^Cmd_")then Name=string.sub(r,5)end;self.ScriptCommandRegister[an]={Name,cF}ExecuteLocal([[
        local ID, Name = %d, "%s"
        Lib.Core.Report.ScriptCommandRegister[ID] = Name
        Command[Name] = ID
    ]],an,Name)end;function Lib.Core.Report:DecodeScriptCommandParameters(cG)local cE={}for g,h in pairs(string.slice(cG,"#"))do local cH=h;cH=cH:replaceAll("<<<HT>>>",'#')cH=cH:replaceAll("<<<QT>>>",'"')cH=cH:replaceAll("<<<ES>>>",'')if cH==nil then cH=nil elseif cH=="true"or cH=="false"then cH=cH=="true"elseif string.indexOf(cH,"{")==1 then local cI=string.slice(string.sub(cH,2,string.len(cH)-1),",")cH={}for f=1,#cI do cH[f]=tonumber(cI[f])~=nil and tonumber(cI[f])or cI end elseif tonumber(cH)~=nil then cH=tonumber(cH)end;table.insert(cE,cH)end;return cE end;function Lib.Core.Report:SendScriptCommand(aF,...)assert(IsLocalScript(),"Commands must be send in local script.")assert(aF and self.ScriptCommandRegister[aF],"Command is invalid.")local n=GUI.GetPlayerID()local cJ=n+4;local s=Logic.GetPlayerName(cJ)local cE=self:EncodeScriptCommandParameters(...)GUI.SetPlayerName(cJ,cE)if IsHistoryEdition()and IsMultiplayer()then GUI.SetSoldierPaymentLevel(aF)else ExecuteGlobal([[Lib.Core.Report:ProcessScriptCommand(%d, %d)]],n,aF)end;GUI.SetPlayerName(cJ,s)GUI.SetSoldierPaymentLevel(PlayerSoldierPaymentLevel[n])end;function Lib.Core.Report:EncodeScriptCommandParameters(...)local cK=""for f=1,#arg do local cL=arg[f]if type(cL)=="string"then cL=cL:gsub('#',"<<<HT>>>")cL=cL:gsub('"',"<<<QT>>>")if cL:len()==0 then cL="<<<ES>>>"end elseif type(cL)=="table"then cL="{"..table.concat(cL,",").."}"end;if string.len(cK)>0 then cK=cK.."#"end;cK=cK..tostring(cL)end;return cK end;function Lib.Core.Report:CreateReport(r)assert(type(r)=="string","Report name must be a string.")for f=1,#self.ScriptEventRegister,1 do if self.ScriptEventRegister[f]==r then assert(false,"Report already exists")return 0 end end;local an=#self.ScriptEventRegister+1;self.ScriptEventRegister[an]=r;self.ScriptEventListener[an]={SequenceID=0}return an end;function Lib.Core.Report:SendReport(aF,...)assert(self.ScriptEventRegister[aF]~=nil,"Report type does not exist.")if GameCallback_Lib_OnEventReceived then GameCallback_Lib_OnEventReceived(aF,...)end;if self.ScriptEventListener[aF]then for g,h in pairs(self.ScriptEventListener[aF])do if tonumber(g)then h(...)end end end end;function Lib.Core.Report:CreateReportReceiver(cM,cF)assert(type(cF)=="function","Listener must be a function.")assert(self.ScriptEventRegister[cM]~=nil,"Event does not exist.")local b5=self.ScriptEventListener[cM]self.ScriptEventListener[cM].SequenceID=b5.SequenceID+1;self.ScriptEventListener[cM][b5.SequenceID]=cF;return b5.IDSequence end;function Lib.Core.Report:RemoveReportReceiver(cM,aF)assert(self.ScriptEventRegister[cM]~=nil,"Event does not exist.")self.ScriptEventListener[cM][aF]=nil end;function CreateReport(r)return Lib.Core.Report:CreateReport(r)end;API.CreateScriptEvent=CreateReport;function SendReport(aF,...)Lib.Core.Report:SendReport(aF,...)end;API.SendScriptEvent=SendReport;function SendReportToGlobal(aF,...)assert(IsLocalScript(),"Was called from global script.")Lib.Core.Report:SendScriptCommand(Command.SendReportToGlobal,aF,...)end;API.SendScriptEventToGlobal=SendReportToGlobal;function SendReportToLocal(aF,...)assert(not IsLocalScript(),"Was called from local script.")local arg={...}if#arg>0 then local cL=""for f=1,#arg do if f>1 then cL=cL..","end;if type(arg[f])=="string"then cL=cL.."\""..arg[f].."\""elseif type(arg[f])=="table"then cL=cL..table.tostring(arg[f])else cL=cL..tostring(arg[f])end end;ExecuteLocal([[SendReport(%d, %s)]],aF,cL)else ExecuteLocal([[SendReport(%d)]],aF)end end;API.SendScriptEventToLocal=SendReportToLocal;function CreateReportReceiver(cM,cF)return Lib.Core.Report:CreateReportReceiver(cM,cF)end;API.CreateScriptEventReceiver=CreateReportReceiver;function RemoveReportReceiver(cM,aF)Lib.Core.Report:RemoveReportReceiver(cM,aF)end;API.RemoveScriptEventReceiver=RemoveReportReceiver;Lib.Core=Lib.Core or{}Lib.Core.Quest={QuestCounter=0,Text={ActivateBuff={Pattern={de="BONUS AKTIVIEREN{cr}{cr}%s",en="ACTIVATE BUFF{cr}{cr}%s",fr="ACTIVER BONUS{cr}{cr}%s"},BuffsVanilla={["Buff_Spice"]={de="Salz",en="Salt",fr="Sel"},["Buff_Colour"]={de="Farben",en="Color",fr="Couleurs"},["Buff_Entertainers"]={de="Entertainer",en="Entertainer",fr="Artistes"},["Buff_FoodDiversity"]={de="Vielfältige Nahrung",en="Food diversity",fr="Diversité alimentaire"},["Buff_ClothesDiversity"]={de="Vielfältige Kleidung",en="Clothes diversity",fr="Diversité vestimentaire"},["Buff_HygieneDiversity"]={de="Vielfältige Reinigung",en="Hygiene diversity",fr="Diversité hygiénique"},["Buff_EntertainmentDiversity"]={de="Vielfältige Unterhaltung",en="Entertainment diversity",fr="Diversité des dievertissements"},["Buff_Sermon"]={de="Predigt",en="Sermon",fr="Sermon"},["Buff_Festival"]={de="Fest",en="Festival",fr="Festival"},["Buff_ExtraPayment"]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},["Buff_HighTaxes"]={de="Hohe Steuern",en="High taxes",fr="Hautes taxes"},["Buff_NoPayment"]={de="Kein Sold",en="No payment",fr="Aucun paiement"},["Buff_NoTaxes"]={de="Keine Steuern",en="No taxes",fr="Aucune taxes"}},BuffsEx1={["Buff_Gems"]={de="Edelsteine",en="Gems",fr="Gemmes"},["Buff_MusicalInstrument"]={de="Musikinstrumente",en="Musical instruments",fr="Instruments musicaux"},["Buff_Olibanum"]={de="Weihrauch",en="Olibanum",fr="Encens"}}},SoldierCount={Pattern={de="SOLDATENANZAHL {cr}Partei: %s{cr}{cr}%s %d",en="SOLDIER COUNT {cr}Faction: %s{cr}{cr}%s %d",fr="NOMBRE DE SOLDATS {cr}Faction: %s{cr}{cr}%s %d"},Relation={["true"]={de="Weniger als ",en="Less than ",fr="Moins de"},["false"]={de="Mindestens ",en="At least ",fr="Au moins"}}},Festivals={Pattern={de="FESTE FEIERN {cr}{cr}Partei: %s{cr}{cr}Anzahl: %d",en="HOLD PARTIES {cr}{cr}Faction: %s{cr}{cr}Amount: %d",fr="FESTIVITÉS {cr}{cr}Faction: %s{cr}{cr}Nombre : %d"}}}}CONST_EFFECT_NAME_TO_ID={}CONST_INITIALIZED_OBJECTS={}CONST_REFILL_AMOUNT={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/ToBoolean")Lib.Require("comfort/GetHealth")Lib.Require("comfort/CopyTable")Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/SendCart")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Quest")function SaveCustomVariable(r,a0)Lib.Core.Quest:SetCustomVariable(r,a0)end;function ObtainCustomVariable(r,cN)local cH=Lib.CustomVariable[r]if not cH and cN then cH=cN end;return cH end;function Lib.Core.Quest:Initialize()Report.CustomValueChanged=CreateReport("Event_CustomValueChanged")Report.QuestFailure=CreateReport("Event_QuestFailure")Report.QuestInterrupt=CreateReport("Event_QuestInterrupt")Report.QuestReset=CreateReport("Event_QuestReset")Report.QuestSuccess=CreateReport("Event_QuestSuccess")Report.QuestTrigger=CreateReport("Event_QuestTrigger")if not IsLocalScript()then self:OverrideQuestSystemGlobal()self:OverrideQuestMarkers()self:OverwriteGeologistRefill()end;if IsLocalScript()then self:OverrideDisplayQuestObjective()end end;function Lib.Core.Quest:OnSaveGameLoaded()end;function Lib.Core.Quest:OnReportReceived(aF,...)end;function Lib.Core.Quest:OverrideQuestMarkers()QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then DestroyQuestMarker(self.Objectives[f].Data[2])end end end end;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then ShowQuestMarker(self.Objectives[f].Data[2])end end end end;function ShowQuestMarker(k)local bJ=GetID(k)local I,J=Logic.GetEntityPosition(bJ)local cO=EGL_Effects.E_Questmarker_low;if Logic.IsBuilding(bJ)==1 then cO=EGL_Effects.E_Questmarker end;DestroyQuestMarker(k)Questmarkers[bJ]=Logic.CreateEffect(cO,I,J,0)end;function DestroyQuestMarker(k)local bJ=GetID(k)if Questmarkers[bJ]~=nil then Logic.DestroyEffect(Questmarkers[bJ])Questmarkers[bJ]=nil end end end;function Lib.Core.Quest:OverrideDisplayQuestObjective()GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(cP,cQ)local bF,cR=GUI_Interaction.GetPotentialSubQuestAndType(cP)if cR==Objective.Distance then if bF.Objectives[1].Data[1]==-65566 then bF.Objectives[1].Data[1]=Logic.GetKnightID(bF.ReceivingPlayer)end end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core(cP,cQ)end end;function Lib.Core.Quest:IsQuestPositionReached(b1,cS)local cT=GetID(cS.Data[1])if cT==-65566 then cS.Data[1]=Logic.GetKnightID(b1.ReceivingPlayer)cT=cS.Data[1]end;local cU=GetID(cS.Data[2])cS.Data[3]=cS.Data[3]or 2500;if not(Logic.IsEntityDestroyed(cT)or Logic.IsEntityDestroyed(cU))then if Logic.GetDistanceBetweenEntities(cT,cU)<=cS.Data[3]then DestroyQuestMarker(cU)return true end else DestroyQuestMarker(cU)return false end end;function Lib.Core.Quest:OverwriteGeologistRefill()if Framework.GetGameExtraNo()>=1 then GameCallback_OnGeologistRefill_Orig_Lib_Core=GameCallback_OnGeologistRefill;GameCallback_OnGeologistRefill=function(q,cV,cW)GameCallback_OnGeologistRefill_Orig_Lib_Core(q,cV,cW)if CONST_REFILL_AMOUNT[cV]then local cX=CONST_REFILL_AMOUNT[cV]local cY=cX+math.random(1,math.floor(cX*0.2+0.5))Logic.SetResourceDoodadGoodAmount(cV,cY)if cY>0 then if Logic.GetResourceDoodadGoodType(cV)==Goods.G_Iron then Logic.SetModel(cV,Models.Doodads_D_SE_ResourceIron)else Logic.SetModel(cV,Models.R_ResorceStone_Scaffold)end end end end end end;function Lib.Core.Quest:TriggerEntityKilledCallbacks(k,cZ)local c_=GetID(k)local d0=GetID(cZ or 0)if d0==0 or c_==0 or Logic.GetEntityHealth(c_)>0 then return end;local I,J,K=Logic.EntityGetPos(c_)local d1=Logic.EntityGetPlayer(c_)local d2=Logic.GetEntityType(c_)local d3=Logic.EntityGetPlayer(d0)local d4=Logic.GetEntityType(d0)GameCallback_EntityKilled(c_,d1,d0,d3,d2,d4)Logic.ExecuteInLuaLocalState(string.format("GameCallback_Feedback_EntityKilled(%d, %d, %d, %d,%d, %d, %f, %f)",c_,d1,d0,d3,d2,d4,I,J))end;function Lib.Core.Quest:GetCustomVariable(r)return Lib.CustomVariable[r]end;function Lib.Core.Quest:SetCustomVariable(r,a0)self:UpdateCustomVariable(r,a0)local cH=tostring(a0)if type(a0)~="number"then cH=[["]]..cH..[["]]end;if not GUI then ExecuteLocal([[Lib.Core.Quest:UpdateCustomVariable("%s", %s)]],r,cH)end end;function Lib.Core.Quest:UpdateCustomVariable(r,a0)if Lib.CustomVariable[r]then local d5=Lib.CustomVariable[r]Lib.CustomVariable[r]=a0;SendReport(Report.CustomValueChanged,r,d5,a0)else Lib.CustomVariable[r]=a0;SendReport(Report.CustomValueChanged,r,nil,a0)end end;function InteractiveObjectActivate(d6,d7)d7=d7 or 0;if GUI or not IsExisting(d6)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(d6),f,d7)end end;API.InteractiveObjectActivate=InteractiveObjectActivate;function InteractiveObjectDeactivate(d6)if GUI or not IsExisting(d6)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(d6),f,2)end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Lib.Core.Quest:OverrideQuestSystemGlobal()QuestTemplate.Trigger_Orig_QSB_Core=QuestTemplate.Trigger;QuestTemplate.Trigger=function(b1)QuestTemplate.Trigger_Orig_QSB_Core(b1)local bE=GetQuestID(b1.Identifier)for f=1,b1.Objectives[0]do if b1.Objectives[f].Type==Objective.Custom2 and b1.Objectives[f].Data[1].SetDescriptionOverwrite then local d8=b1.Objectives[f].Data[1]:SetDescriptionOverwrite(b1)Lib.Core.Quest:ChangeCustomQuestCaptionText(d8,b1)break end end;SendReport(Report.QuestTrigger,bE)SendReportToLocal(Report.QuestTrigger,bE)end;QuestTemplate.Interrupt_Orig_QSB_Core=QuestTemplate.Interrupt;QuestTemplate.Interrupt=function(b1)b1:Interrupt_Orig_QSB_Core()local bE=GetQuestID(b1.Identifier)for f=1,b1.Objectives[0]do if b1.Objectives[f].Type==Objective.Custom2 and b1.Objectives[f].Data[1].Interrupt then b1.Objectives[f].Data[1]:Interrupt(b1,f)end end;for f=1,b1.Triggers[0]do if b1.Triggers[f].Type==Triggers.Custom2 and b1.Triggers[f].Data[1].Interrupt then b1.Triggers[f].Data[1]:Interrupt(b1,f)end end;SendReport(Report.QuestInterrupt,bE)SendReportToLocal(Report.QuestInterrupt,bE)end;QuestTemplate.Fail_Orig_QSB_Core=QuestTemplate.Fail;QuestTemplate.Fail=function(b1)b1:Fail_Orig_QSB_Core()local bE=GetQuestID(b1.Identifier)SendReport(Report.QuestFailure,bE)SendReportToLocal(Report.QuestFailure,bE)end;QuestTemplate.Success_Orig_QSB_Core=QuestTemplate.Success;QuestTemplate.Success=function(b1)b1:Success_Orig_QSB_Core()local bE=GetQuestID(b1.Identifier)SendReport(Report.QuestSuccess,bE)SendReportToLocal(Report.QuestSuccess,bE)end end;function Lib.Core.Quest:ChangeCustomQuestCaptionText(d9,b1)if b1 and b1.Visible then b1.QuestDescription=d9;ExecuteLocal([[
            XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/BGDeco",0)
            local identifier = "%s"
            for i=1, Quests[0] do
                if Quests[i].Identifier == identifier then
                    local text = Quests[i].QuestDescription
                    XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/Text", "%s")
                    break
                end
            end
        ]],b1.Identifier,d9)end end;function SetResourceAmount(k,da,db)if GUI or not IsExisting(k)then return end;assert(type(da)=="number")assert(type(db)=="number")local B=GetID(k)if IsExisting(B)and Logic.GetResourceDoodadGoodType(B)~=0 then if Logic.GetResourceDoodadGoodAmount(B)==0 then B=ReplaceEntity(B,Logic.GetEntityType(B))end;Logic.SetResourceDoodadGoodAmount(B,da)CONST_REFILL_AMOUNT[B]=db end end;function SetCustomBehaviorText(dc,d9)local bE=GetQuestID(dc)local bF=Quests[bE]assert(bF~=nil,"Quest '"..dc.."' not found!")Lib.Core.Quest:ChangeCustomQuestCaptionText(d9,bF)end;API.SetCustomBehaviorText=SetCustomBehaviorText;function RestartQuest(dc,dd)local bE=GetQuestID(dc)local bF=Quests[bE]if bF then if not dd then Logic.DEBUG_AddNote("restart quest "..dc)end;if bF.Objectives then local de=bF.Objectives;for f=1,de[0]do local df=de[f]df.Completed=nil;local dg=df.Type;if dg==Objective.Deliver then local dh=df.Data;dh[3]=nil;dh[4]=nil;dh[5]=nil;dh[9]=nil elseif g_GameExtraNo and g_GameExtraNo>=1 and dg==Objective.Refill then df.Data[2]=nil elseif dg==Objective.Protect or dg==Objective.Object then local dh=df.Data;for aV=1,dh[0],1 do dh[-aV]=nil end elseif dg==Objective.DestroyEntities and df.Data[1]==2 and df.DestroyTypeAmount then df.Data[3]=df.DestroyTypeAmount elseif dg==Objective.DestroyEntities and df.Data[1]==3 then df.Data[4]=nil;df.Data[5]=nil elseif dg==Objective.Distance then if df.Data[1]==-65565 then df.Data[4].NpcInstance=nil end elseif dg==Objective.Custom2 and df.Data[1].Reset then df.Data[1]:Reset(bF,f)end end end;local function di(dj,dk)local bF=bF;local dl=bF[dj]if dl then for f=1,dl[0]do local aU=dl[f]if aU.Type==dk then local dm=aU.Data[1]if dm and dm.Reset then dm:Reset(bF,f)end end end end end;di("Triggers",Triggers.Custom2)di("Rewards",Reward.Custom)di("Reprisals",Reprisal.Custom)bF.Result=nil;local dn=bF.State;bF.State=QuestState.NotTriggered;ExecuteLocal("LocalScriptCallback_OnQuestStatusChanged(%d)",bF.Index)if dn==QuestState.Over then bF.Job=Trigger.RequestTrigger(Events.LOGIC_EVENT_EVERY_SECOND,"","Quest_Loop",1,0,{bF.QueueID})end;SendReport(Report.QuestReset,bE)SendReportToLocal(Report.QuestReset,bE)end;return bE,bF end;API.RestartQuest=RestartQuest;function FailQuest(dc,dd)local bE=GetQuestID(dc)local bF=Quests[bE]if bF then if not dd then Logic.DEBUG_AddNote("fail quest "..dc)end;bF:RemoveQuestMarkers()bF:Fail()end end;API.FailQuest=FailQuest;function StartQuest(dc,dd)local bE=GetQuestID(dc)local bF=Quests[bE]if bF then if not dd then Logic.DEBUG_AddNote("start quest "..dc)end;bF:SetMsgKeyOverride()bF:SetIconOverride()bF:Trigger()end end;API.StartQuest=StartQuest;function StopQuest(dc,dd)local bE=GetQuestID(dc)local bF=Quests[bE]if bF then if not dd then Logic.DEBUG_AddNote("interrupt quest "..dc)end;bF:RemoveQuestMarkers()bF:Interrupt(-1)end end;API.StopQuest=StopQuest;function WinQuest(dc,dd)local bE=GetQuestID(dc)local bF=Quests[bE]if bF then if not dd then Logic.DEBUG_AddNote("win quest "..dc)end;bF:RemoveQuestMarkers()bF:Success()end end;API.WinQuest=WinQuest;Lib.Core=Lib.Core or{}Lib.Core.Job={EventJobMappingID=0,EventJobMapping={},EventJobs={},SecondsSinceGameStart=0,LastTimeStamp=0}Lib.Register("core/feature/Core_Job")function Lib.Core.Job:Initialize()self:StartJobs()end;function Lib.Core.Job:OnSaveGameLoaded()end;function Lib.Core.Job:OnReportReceived(aF,...)end;function Lib.Core.Job:StartJobs()self:CreateEventJob(Events.LOGIC_EVENT_EVERY_TURN,function()Lib.Core.Job:RealtimeController()end)end;function Lib.Core.Job:CreateEventJob(i,cF,...)self.EventJobMappingID=self.EventJobMappingID+1;local an=Trigger.RequestTrigger(i,"","LiberticaCore_Job_EventJobExecutor",1,{},{self.EventJobMappingID})self.EventJobs[an]={an,true,cF,arg}self.EventJobMapping[self.EventJobMappingID]=an;return an end;function Lib.Core.Job:EventJobExecutor(dp)local an=self.EventJobMapping[dp]if an and self.EventJobs[an]and self.EventJobs[an][2]then local cL=self.EventJobs[an][4]if self.EventJobs[an][3](unpack(cL))then self.EventJobs[an][2]=false end end end;function Lib.Core.Job:RealtimeController()if not self.LastTimeStamp then self.LastTimeStamp=math.floor(Framework.TimeGetTime())end;local dq=math.floor(Framework.TimeGetTime())if self.LastTimeStamp~=dq then self.LastTimeStamp=dq;self.SecondsSinceGameStart=self.SecondsSinceGameStart+1 end end;function LiberticaCore_Job_EventJobExecutor(dp)Lib.Core.Job:EventJobExecutor(dp)end;function RequestJobByEventType(dr,cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return Lib.Core.Job:CreateEventJob(dr,cF,...)end;API.StartJobByEventType=RequestJobByEventType;function RequestJob(cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,ds,...)end;API.StartJob=RequestJob;StartSimpleJob=RequestJob;StartSimpleJobEx=RequestJob;function RequestHiResJob(cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,ds,...)end;API.StartHiResJob=RequestHiResJob;StartSimpleHiResJob=RequestHiResJob;StartSimpleHiResJobEx=RequestHiResJob;function RequestDelay(dt,cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return RequestJob(function(du,dv,dw,dx)if du+dv<=Logic.GetTime()then dw(unpack(dx or{}))return true end end,Logic.GetTime(),dt,cF,{...})end;API.StartDelay=RequestDelay;function RequestHiResDelay(dt,cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return RequestHiResJob(function(du,dv,dw,dx)if du+dv<=Logic.GetCurrentTurn()then dw(unpack(dx or{}))return true end end,Logic.GetTime(),dt,cF,{...})end;API.StartHiResDelay=RequestHiResDelay;function RequestRealTimeDelay(dt,cF,...)local ds=_G[cF]or cF;assert(type(ds)=="function","Function does not exist!")return RequestHiResJob(function(du,dv,dw,dx)if Lib.Core.Job.SecondsSinceGameStart>=du+dv then dw(unpack(dx or{}))return true end end,Lib.Core.Job.SecondsSinceGameStart,dt,cF,{...})end;API.StartRealTimeDelay=RequestRealTimeDelay;function StopJob(dy)if Lib.Core.Job.EventJobs[dy]then Trigger.UnrequestTrigger(Lib.Core.Job.EventJobs[dy][1])Lib.Core.Job.EventJobs[dy]=nil;return end;EndJob(dy)end;API.EndJob=StopJob;function IsJobRunning(dy)if Lib.Core.Job.EventJobs[dy]then return Lib.Core.Job.EventJobs[dy][2]==true end;return JobIsRunning(dy)end;API.JobIsRunning=IsJobRunning;function ResumeJob(dy)if Lib.Core.Job.EventJobs[dy]then if Lib.Core.Job.EventJobs[dy][2]~=true then Lib.Core.Job.EventJobs[dy][2]=true end;return end;assert(false,"Failed to resume job.")end;API.ResumeJob=ResumeJob;function YieldJob(dy)if Lib.Core.Job.EventJobs[dy]then if Lib.Core.Job.EventJobs[dy][2]==true then Lib.Core.Job.EventJobs[dy][2]=false end;return end;assert(false,"Failed to yield job.")end;API.YieldJob=YieldJob;function GetSecondsRealTime()return Lib.Core.Job.SecondsSinceGameStart end;API.GetSecondsRealTime=GetSecondsRealTime;Lib.Core=Lib.Core or{}Lib.Core.Save={HistoryEditionQuickSave=false,SavingDisabled=false,LoadingDisabled=false}Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Save")function DisableAutoSave(dz)if not IsLocalScript()then Lib.Core.Save.HistoryEditionQuickSave=dz==true;ExecuteLocal([[Lib.Core.Save.HistoryEditionQuickSave = %s]],tostring(dz==true))end end;API.DisableAutoSave=DisableAutoSave;function DisableSaving(dz)Lib.Core.Save:DisableSaving(dz)end;API.DisableSaving=DisableSaving;function DisableLoading(dz)Lib.Core.Save:DisableLoading(dz)end;API.DisableLoading=DisableLoading;function Lib.Core.Save:Initialize()Report.SaveGameLoaded=CreateReport("Event_SaveGameLoaded")self:SetupQuicksaveKeyCallback()self:SetupQuicksaveKeyTrigger()end;function Lib.Core.Save:OnSaveGameLoaded()self:SetupQuicksaveKeyTrigger()self:UpdateLoadButtons()self:UpdateSaveButtons()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Save:OnReportReceived(aF,...)end;function Lib.Core.Save:SetupQuicksaveKeyTrigger()if IsLocalScript()then RequestHiResJob(function()Input.KeyBindDown(Keys.ModifierControl+Keys.S,"KeyBindings_SaveGame(true)",2,false)return true end)end end;function Lib.Core.Save:SetupQuicksaveKeyCallback()if IsLocalScript()then KeyBindings_SaveGame_Orig_Core=KeyBindings_SaveGame;KeyBindings_SaveGame=function(...)if Lib.Core.Save.SavingDisabled then return end;if not Lib.Core.Save.HistoryEditionQuickSave and not arg[1]then return end;KeyBindings_SaveGame_Orig_Core()end end end;function Lib.Core.Save:DisableSaving(dz)self.SavingDisabled=dz==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableSaving(%s)]],tostring(dz))else self:UpdateSaveButtons()end end;function Lib.Core.Save:UpdateSaveButtons()if IsLocalScript()then local dA=self.SavingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickSave",dA)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/SaveGame",dA)end end;function Lib.Core.Save:DisableLoading(dz)self.LoadingDisabled=dz==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableLoading(%s)]],tostring(dz))else self:UpdateLoadButtons()end end;function Lib.Core.Save:UpdateLoadButtons()if IsLocalScript()then local dA=self.LoadingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/LoadGame",dA)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickLoad",dA)end end;Lib.Core=Lib.Core or{}Lib.Core.Text={Languages={{"de","Deutsch","en"},{"en","English","en"},{"fr","Français","en"}},Colors={red="{@color:255,80,80,255}",blue="{@color:104,104,232,255}",yellow="{@color:255,255,80,255}",green="{@color:80,180,0,255}",white="{@color:255,255,255,255}",black="{@color:0,0,0,255}",grey="{@color:140,140,140,255}",azure="{@color:0,160,190,255}",orange="{@color:255,176,30,255}",amber="{@color:224,197,117,255}",violet="{@color:180,100,190,255}",pink="{@color:255,170,200,255}",scarlet="{@color:190,0,0,255}",magenta="{@color:190,0,89,255}",olive="{@color:74,120,0,255}",celeste="{@color:145,170,210,255}",tooltip="{@color:51,51,120,255}",none="{@color:none}"},StringTables={},Placeholders={Names={},EntityTypes={}}}CONST_LANGUAGE="de"Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Text")function Lib.Core.Text:Initialize()Report.LanguageChanged=CreateReport("Event_LanguageChanged")self:DetectLanguage()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnSaveGameLoaded()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnReportReceived(aF,...)end;function Lib.Core.Text:OverwriteGetStringTableText()XGUIEng.GetStringTableText_Orig_Core=XGUIEng.GetStringTableText;XGUIEng.GetStringTableText=function(dB)return Lib.Core.Text:GetStringTableOverwrite(dB)end end;function Lib.Core.Text:AddStringTableOverwrite(dC,d9)local f=string.find(dC,"/[^/]*$")local dD=dC:sub(1,f-1):lower()local b8=dC:sub(f+1):lower()self.StringTables[dD]=self.StringTables[dD]or{}self.StringTables[dD][b8]=d9 end;function Lib.Core.Text:DeleteStringTableOverwrite(dC)local f=string.find(dC,"/[^/]*$")local dD=dC:sub(1,f-1):lower()local b8=dC:sub(f+1):lower()self.StringTables[dD]=self.StringTables[dD]or{}self.StringTables[dD][b8]=nil end;function Lib.Core.Text:GetStringTableOverwrite(dC)local f=string.find(dC,"/[^/]*$")local dD=dC:sub(1,f-1):lower()local b8=dC:sub(f+1):lower()self.StringTables[dD]=self.StringTables[dD]or{}if self.StringTables[dD][b8]then local ba=self.StringTables[dD][b8]if type(ba)=="string"and ba:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba=XGUIEng.GetStringTableText_Orig_Core(ba)end;return ConvertPlaceholders(Localize(ba))end;return XGUIEng.GetStringTableText_Orig_Core(dC)end;function Lib.Core.Text:DetectLanguage()local dE=Network.GetDesiredLanguage()if dE~="de"and dE~="fr"then dE="en"end;CONST_LANGUAGE=dE end;function Lib.Core.Text:ChangeSystemLanguage(q,dF,dG)local dH=CONST_LANGUAGE;local dI=dG;if dF==nil or dF==true then CONST_LANGUAGE=dG;ExecuteLocal([[CONST_LANGUAGE = "%s"]],dG)SendReport(Report.LanguageChanged,dH,dI)SendReportToLocal(Report.LanguageChanged,dH,dI)end end;function Lib.Core.Text:Localize(d9)local dJ="ERROR_NO_TEXT"if type(d9)=="table"then if d9[CONST_LANGUAGE]then dJ=d9[CONST_LANGUAGE]else for g,h in pairs(self.Languages)do if h[1]==CONST_LANGUAGE and h[3]and d9[h[3]]then dJ=d9[h[3]]break end end end else dJ=tostring(d9)end;return dJ end;function Lib.Core.Text:ConvertPlaceholders(d9)if type(d9)=="string"then while true do local dK,dL,dM,dN,dO,dP,dQ,dR;if d9:find("{n:")then dK,dL,dM,dO,dP,dQ,dR=self:SplicePlaceholderText(d9,"{n:")dN=self.Placeholders.Names[dL]d9=dK..self:Localize(dN or"n:"..tostring(dL)..": not found")..dM elseif d9:find("{t:")then dK,dL,dM,dO,dP,dQ,dR=self:SplicePlaceholderText(d9,"{t:")dN=self.Placeholders.EntityTypes[dL]d9=dK..self:Localize(dN or"n:"..tostring(dL)..": not found")..dM elseif d9:find("{v:")then dK,dL,dM,dO,dP,dQ,dR=self:SplicePlaceholderText(d9,"{v:")dN=self:ReplaceValuePlaceholder(dL)d9=dK..self:Localize(dN or"v:"..tostring(dL)..": not found")..dM end;if dO==nil or dP==nil or dQ==nil or dR==nil then break end end;d9=self:ReplaceColorPlaceholders(d9)end;return d9 end;function Lib.Core.Text:SplicePlaceholderText(d9,dS)local dO,dP=d9:find(dS)local dQ,dR=d9:find("}",dP)local dK=d9:sub(1,dO-1)local dL=d9:sub(dP+1,dQ-1)local dM=d9:sub(dR+1)return dK,dL,dM,dO,dP,dQ,dR end;function Lib.Core.Text:ReplaceColorPlaceholders(d9)for g,h in pairs(self.Colors)do d9=d9:gsub("{"..g.."}",h)end;return d9 end;function Lib.Core.Text:ReplaceValuePlaceholder(d9)local dT=_G;local dU=string.slice(d9,"%.")for f=1,#dU do local dV=dU[f]local dW=tonumber(dV)if dW~=nil then dV=dW end;if not dT[dV]then return nil end;dT=dT[dV]end;return dT end;function Localize(d9)return Lib.Core.Text:Localize(d9)end;API.Localize=Localize;function ConvertPlaceholders(d9)return Lib.Core.Text:ConvertPlaceholders(d9)end;API.ConvertPlaceholders=ConvertPlaceholders;function AddNote(d9)d9=ConvertPlaceholders(Localize(d9))if not IsLocalScript()then Logic.DEBUG_AddNote(d9)return end;GUI.AddNote(d9)end;API.Note=AddNote;function AddStaticNote(d9)d9=ConvertPlaceholders(Localize(d9))if not IsLocalScript()then ExecuteLocal([[GUI.AddStaticNote("%s")]],d9)return end;GUI.AddStaticNote(d9)end;API.StaticNote=AddStaticNote;function AddMessage(d9,dX)d9=ConvertPlaceholders(Localize(d9))if not IsLocalScript()then ExecuteLocal([[AddMessage("%s", "%s")]],d9,dX or"")return end;d9=ConvertPlaceholders(Localize(d9))Message(d9,dX and dX~=""and dX:gsub("/","\\")or nil)end;function ClearNotes()if not IsLocalScript()then ExecuteLocal([[ClearNotes()]])return end;GUI.ClearNotes()end;API.ClearNotes=ClearNotes;function AddStringText(dC,d9)assert(IsLocalScript(),"Text can only be set in local script!")Lib.Core.Text:AddStringTableOverwrite(dC,d9)end;API.AddStringText=AddStringText;function DeleteStringText(dC)assert(IsLocalScript(),"Text can only be removed in local script!")Lib.Core.Text:DeleteStringTableOverwrite(dC)end;API.DeleteStringText=DeleteStringText;function GetStringText(dC)assert(IsLocalScript(),"Text can only be retrieved in local script!")return Lib.Core.Text:GetStringTableOverwrite(dC)end;API.GetStringText=GetStringText;function DefineLanguage(dY,r,dZ,b2)assert(type(dY)=="string")assert(type(r)=="string")assert(type(dZ)=="string")for g,h in pairs(Lib.Core.Text.Languages)do if h[1]==dY then return end end;b2=b2 or#Lib.Core.Text.Languages+1;table.insert(Lib.Core.Text.Languages,b2,{dY,r,dZ})ExecuteLocal([[
        table.insert(Lib.Core.Text.Languages, %d, {"%s", "%s", "%s"})
    ]],b2,dY,r,dZ)end;Lib.Core=Lib.Core or{}Lib.Core.ScriptingValue={SV={Game="Vanilla",Vanilla={Destination={X=19,Y=20},Health=-41,Player=-71,Size=-45,Visible=-50,Selectable=-50,NPC=6},HistoryEdition={Destination={X=17,Y=18},Health=-38,Player=-68,Size=-42,Visible=-47,Selectable=-47,NPC=6}}}CONST_SCRIPTING_VALUES=Lib.Core.ScriptingValue.SV.Vanilla;Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_ScriptingValue")function Lib.Core.ScriptingValue:Initialize()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnSaveGameLoaded()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnReportReceived(aF,...)end;function Lib.Core.ScriptingValue:BitsInteger(d_)local cs={}while d_>0 do local e0=math.qmod(d_,2)table.insert(cs,1,e0)d_=(d_-e0)/2 end;table.remove(cs,1)return cs end;function Lib.Core.ScriptingValue:BitsFraction(d_,cs)for f=1,48 do d_=d_*2;if d_>=1 then table.insert(cs,1)d_=d_-1 else table.insert(cs,0)end;if d_==0 then return cs end end;return cs end;function Lib.Core.ScriptingValue:IntegerToFloat(d_)if d_==0 then return 0 end;local e1=1;if d_<0 then d_=2147483648+d_;e1=-1 end;local e2=math.qmod(d_,8388608)local e3=(d_-e2)/8388608;local e4=math.qmod(e3,256)local e5=e4-127;local e6=1;local e7=0.5;local e8=4194304;for f=23,0,-1 do if e2-e8>0 then e6=e6+e7;e2=e2-e8 end;e8=e8/2;e7=e7/2 end;return e6*math.pow(2,e5)*e1 end;function Lib.Core.ScriptingValue:FloatToInteger(e9)if e9==0 then return 0 end;local ea=false;if e9<0 then ea=true;e9=e9*-1 end;local eb=0;local ec;local e5=0;if e9>=1 then local ed=math.floor(e9)local ee=e9-ed;ec=self:BitsInteger(ed)e5=#ec;self:BitsFraction(ee,ec)else ec={}self:BitsFraction(e9,ec)while ec[1]==0 do e5=e5-1;table.remove(ec,1)end;e5=e5-1;table.remove(ec,1)end;local ef=4194304;local eg=1;for eh=eg,23 do local ei=ec[eh]if not ei then break end;if ei==1 then eb=eb+ef end;ef=ef/2 end;eb=eb+(e5+127)*8388608;if ea then eb=eb-2147483648 end;return eb end;function GetEntityDestination(k)assert(IsExisting(k),"Entity does not exist.")local ej=GetFloat(k,CONST_SCRIPTING_VALUES.Destination.X)local ek=GetFloat(k,CONST_SCRIPTING_VALUES.Destination.Y)return{X=ej,Y=ek,Z=0}end;function GetEntityHealth(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Health)end;function SetEntityHealth(k,aP)assert(IsExisting(k),"Entity does not exist.")SetInteger(k,CONST_SCRIPTING_VALUES.Health,aP)end;function GetEntityNpc(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.NPC)>0 end;function GetEntityPlayer(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Player)end;function SetEntityPlayer(k,el)assert(IsExisting(k),"Entity does not exist.")SetInteger(k,CONST_SCRIPTING_VALUES.Player,el)end;function GetEntityScaling(k)assert(IsExisting(k),"Entity does not exist.")return GetFloat(k,CONST_SCRIPTING_VALUES.Size)end;function GetEntityScaling(k,em)assert(IsExisting(k),"Entity does not exist.")SetFloat(k,CONST_SCRIPTING_VALUES.Size,em)end;function IsEntityInvisible(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Visible)==793088 end;function IsEntityInaccessible(k)assert(IsExisting(k),"Entity does not exist.")return IsEntityInvisible(k)or GetInteger(k,CONST_SCRIPTING_VALUES.Visible)==799232 end;function GetInteger(k,en)assert(IsExisting(k),"Entity does not exist.")local an=GetID(k)return Logic.GetEntityScriptingValue(an,en)end;API.GetInteger=GetInteger;function GetFloat(k,en)assert(IsExisting(k),"Entity does not exist.")local an=GetID(k)local cH=Logic.GetEntityScriptingValue(an,en)return ConvertIntegerToFloat(cH)end;API.GetFloat=GetFloat;function SetInteger(k,en,a0)assert(IsExisting(k),"Entity does not exist.")local an=GetID(k)Logic.SetEntityScriptingValue(an,en,a0)end;API.SetInteger=SetInteger;function SetFloat(k,en,a0)assert(IsExisting(k),"Entity does not exist.")local an=GetID(k)Logic.SetEntityScriptingValue(an,en,ConvertFloatToInteger(a0))end;API.SetFloat=SetFloat;function ConvertIntegerToFloat(a0)return Lib.Core.ScriptingValue:IntegerToFloat(a0)end;API.ConvertIntegerToFloat=ConvertIntegerToFloat;function ConvertFloatToInteger(a0)return Lib.Core.ScriptingValue:FloatToInteger(a0)end;API.ConvertFloatToInteger=ConvertFloatToInteger;Lib.Core=Lib.Core or{}Lib.Core.Bugfix={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/GetDistance")Lib.Require("core/feature/Core_Text")Lib.Register("core/feature/Core_Bugfix")function Lib.Core.Bugfix:Initialize()if not IsLocalScript()then self:FixResourceSlotsInStorehouses()self:FixMiddleEuropeNpcBarracks()self:FixMerchantArrivedCheckpoints()self:FixDestroyAllPlayerUnits()self:FixBanditCampFireplace()end;if IsLocalScript()then self:FixInteractiveObjectClicked()self:FixBigCathedralName()self:FixClimateZoneForHouseMenu()self:FixAbilityInfoWhenHomeless()end end;function Lib.Core.Bugfix:OnSaveGameLoaded()end;function Lib.Core.Bugfix:OnReportReceived(aF,...)end;function Lib.Core.Bugfix:FixResourceSlotsInStorehouses()for f=1,8 do local eo=Logic.GetStoreHouse(f)if eo~=0 then Logic.AddGoodToStock(eo,Goods.G_Salt,0,true,true)Logic.AddGoodToStock(eo,Goods.G_Dye,0,true,true)end end end;function Lib.Core.Bugfix:FixMiddleEuropeNpcBarracks()GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,ap)GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix(q,ap)local ep=Logic.GetEntityType(ap)if ep==Entities.B_NPC_Barracks_ME then Logic.RespawnResourceSetMaxSpawn(ap,0.01)Logic.RespawnResourceSetMinSpawn(ap,0.01)end end;for g,h in pairs(Logic.GetEntitiesOfType(Entities.B_NPC_Barracks_ME))do Logic.RespawnResourceSetMaxSpawn(h,0.01)Logic.RespawnResourceSetMinSpawn(h,0.01)end end;function Lib.Core.Bugfix:FixMerchantArrivedCheckpoints()QuestTemplate.IsMerchantArrived=function(self,df)local dh=df.Data;local eq=dh[3]if eq~=nil then if eq==1 then local er=dh[5].ID;if er~=nil then dh[3]=er;DeleteQuestMerchantWithID(er)if MapCallback_DeliverCartSpawned then MapCallback_DeliverCartSpawned(self,er,dh[1])end end elseif Logic.IsEntityDestroyed(eq)then DeleteQuestMerchantWithID(eq)df.Data[3]=nil;df.Data[5].ID=nil else local es=function(aF)if aF==0 then return false end;local I,J=Logic.GetBuildingApproachPosition(aF)return GetDistance(eq,{X=I,Y=J})<1000 end;local et=dh[6]or self.SendingPlaye;return es(Logic.GetStoreHouse(et))or es(Logic.GetStoreHouse(et))or es(Logic.GetStoreHouse(et))end end;return false end end;function Lib.Core.Bugfix:FixInteractiveObjectClicked()GUI_Interaction.InteractiveObjectClicked=function()local eu=XGUIEng.GetCurrentWidgetID()local ev=XGUIEng.GetWidgetNameByID(eu)local ew=tonumber(ev)local ex=g_Interaction.ActiveObjectsOnScreen[ew]if ex==nil then return end;if not Logic.InteractiveObjectGetAvailability(ex)then return end;local et=GUI.GetPlayerID()local ey={Logic.InteractiveObjectGetEffectiveCosts(ex,et)}local ez=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")local eA=function(eB,br)if Logic.GetGoodCategoryForGoodType(eB)~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")return false end;if eB==Goods.G_Gold then ez=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;return GetPlayerGoodsInSettlement(eB,et,false)>=br end;local eC=true;if ey[1]and ey[2]then eC=eA(ey[1],ey[2])end;if eC and ey[3]and ey[4]then eC=eA(ey[3],ey[4])end;if not eC then Message(ez)return end;if not GUI_Interaction.InteractionClickOverride or not GUI_Interaction.InteractionClickOverride(ex)then Sound.FXPlay2DSound("ui\\menu_click")end;if not GUI_Interaction.InteractionSpeechFeedbackOverride or not GUI_Interaction.InteractionSpeechFeedbackOverride(ex)then GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)end;if not Mission_Callback_OverrideObjectInteraction or not Mission_Callback_OverrideObjectInteraction(ex,et,ey)then GUI.ExecuteObjectInteraction(ex,et)end end end;function Lib.Core.Bugfix:FixDestroyAllPlayerUnits()QuestTemplate.IsObjectiveCompleted_Orig_Core_Bugfix=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,df)if df.Completed~=nil then return df.Completed end;local dg=df.Type;local dh=df.Data;if dg==Objective.DestroyAllPlayerUnits then local eD=GetPlayerEntities(dh,0)local eE={}local eF={Entities.XD_ScriptEntity,Entities.S_AIHomePosition,Entities.S_AIAreaDefinition}for f=#eD,1,-1 do local eG=eD[f]local eH=Logic.GetEntityType(eG)local eI=Logic.IsConstructionComplete(eG)==0;local eJ=Logic.IsEntityInCategory(eG,EntityCategories.AttackableBuilding)==0;local eK=Logic.IsEntityInCategory(eG,EntityCategories.Wall)==0;if(eJ or eK)and eI then table.insert(eE,eG)end;if table.contains(eF,eH)then table.insert(eE,eG)end end;if#eD==0 or#eD==#eE then df.Completed=true end elseif dg==Objective.Distance then df.Completed=Lib.Core.Quest:IsQuestPositionReached(self,df)else return self:IsObjectiveCompleted_Orig_Core_Bugfix(df)end;return df.Completed end end;function Lib.Core.Bugfix:FixBigCathedralName()AddStringText("Names/B_Cathedral_Big",{de="Dom",en="Cathedral",fr="Cathédrale"})end;if EntityCategories then Lib.Core.Bugfix.HouseMenuWidgetToCategory={["B_Castle_ME"]=EntityCategories.Headquarters,["B_Cathedral"]=EntityCategories.Cathedrals,["B_Cathedral_Big"]=EntityCategories.Cathedrals,["B_Outpost_ME"]=EntityCategories.Outpost}end;function Lib.Core.Bugfix:FixClimateZoneForHouseMenu()HouseMenuGetNextBuildingID=function(eL)local et=GUI.GetPlayerID()local eM=Lib.Core.Bugfix.HouseMenuWidgetToCategory[eL]local eN;eL=GetClimateEntityName(eL)if HouseMenu.Widget.CurrentBuilding~=eL then HouseMenu.Widget.CurrentBuilding=eL;HouseMenu.Widget.CurrentBuildingNumber=0 end;if eM then eN={Logic.GetPlayerEntitiesInCategory(et,eM)}else eN={Logic.GetBuildingsByPlayer(et)}end;local eO=0;local eP=false;for f=1,#eN do local eH=Logic.GetEntityType(eN[f])local eQ=Logic.GetEntityTypeName(eH)if eM or eQ==eL then eO=f;if eO>HouseMenu.Widget.CurrentBuildingNumber then HouseMenu.Widget.CurrentBuildingNumber=eO;eP=true;break end end end;if eO~=0 and not eP then for f=1,#eN do local eH=Logic.GetEntityType(eN[f])local eQ=Logic.GetEntityTypeName(eH)if eM or eQ==eL then HouseMenu.Widget.CurrentBuildingNumber=f;break end end;return eN[HouseMenu.Widget.CurrentBuildingNumber]end;return nil end;HouseMenuSetIconsPart=function(eR,eS)local et=GUI.GetPlayerID()local eT={XGUIEng.ListSubWidgets(eR)}local eU={Logic.GetBuildingsByPlayer(et)}for f=1,#eT do local ev=XGUIEng.GetWidgetNameByID(eT[f])local eM=Lib.Core.Bugfix.HouseMenuWidgetToCategory[ev]local eV=eR.."/"..ev.."/Button"local eW=GetClimateEntityName(ev)SetIcon(eV,g_TexturePositions.Entities[Entities[ev]])local eX=0;if eM then eU={Logic.GetPlayerEntitiesInCategory(et,eM)}eX=#eU else for aV=1,#eU do local eH=Logic.GetEntityType(eU[aV])local eQ=Logic.GetEntityTypeName(eH)if eQ==eW then eX=eX+1 end end end;XGUIEng.DisableButton(eV,eX==0 and 1 or 0)XGUIEng.SetText(eR.."/"..ev.."/Amount","{center}"..eX)UpdateStopOverlay(eR.."/"..ev.."/Stop",ev,eX)if ev==HouseMenu.Widget.CurrentBuilding then UpdateStopOverlay(HouseMenu.Widget.CurrentStop,HouseMenu.Widget.CurrentBuilding,eX)end end;HouseMenu.Counter=HouseMenu.Counter+1;if eS or HouseMenu.Counter%20==0 then for aV=1,#eT do local cf=HouseMenu.Widget.CurrentBuilding;local eY=XGUIEng.GetWidgetNameByID(eT[aV])local eV=eR.."/"..eY.."/Button"eY=GetClimateEntityName(eY)local eZ=eY==cf and 1 or 0;XGUIEng.HighLightButton(eV,eZ)end end end end;function Lib.Core.Bugfix:FixAbilityInfoWhenHomeless()StartKnightVoiceForActionSpecialAbility=function(e_,f0)local et=GUI.GetPlayerID()local f1=Logic.GetStoreHouse(et)local f2=Logic.GetEntityType(Logic.GetKnightID(et))if e_==f2 and f1~=0 and ActionAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(et,"Hint_SpecialAbilityAction",false,et,f0)ActionAbilityIsExplained=true end end;StartKnightVoiceForPermanentSpecialAbility=function(e_)local et=GUI.GetPlayerID()local f1=Logic.GetStoreHouse(et)local f2=Logic.GetEntityType(Logic.GetKnightID(et))if e_==f2 and f1~=0 and PermanentAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(et,"Hint_SpecialAbilityPermanetly",false,et)PermanentAbilityIsExplained=true end end end;function Lib.Core.Bugfix:FixBanditCampFireplace()g_Outlaws.ReplaceCampType={}g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace01]=Entities.D_X_Fireplace01_Expired;g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace02]=Entities.D_X_Fireplace02_Expired;ActivateFireplaceforBanditPack=function(f3)local et=Logic.EntityGetPlayer(f3)if g_Outlaws.Players[et][f3].CampFire==nil then local f4,f5=Logic.GetBuildingApproachPosition(f3)local f6,f7=Logic.GetEntityPosition(f3)local I=(f4-f6)*1.3+f4;local J=(f5-f7)*1.3+f5;local f8=Entities.D_X_Fireplace01;if Logic.IsEntityInCategory(f3,EntityCategories.Storehouse)==1 then f8=Entities.D_X_Fireplace02 end;g_Outlaws.Players[et][f3].CampFireType=f8;local f9=g_Outlaws.Players[et][f3].ExtinguishedFire;Logic.DestroyEntity(f9)local bW=Logic.CreateEntityOnUnblockedLand(f8,I,J,0,0)g_Outlaws.Players[et][f3].CampFire=bW;g_Outlaws.Players[et][f3].CampFirePos={X=I,Y=J}return true end;return false end;DisableFireplaceforBanditPack=function(f3)local et=Logic.EntityGetPlayer(f3)if g_Outlaws.Players[et][f3].CampFire~=nil then local I=g_Outlaws.Players[et][f3].CampFirePos.X;local J=g_Outlaws.Players[et][f3].CampFirePos.Y;local f9=g_Outlaws.Players[et][f3].CampFire;Logic.DestroyEntity(f9)local fa=g_Outlaws.Players[et][f3].CampFireType;local f8=g_Outlaws.ReplaceCampType[fa]local bW=Logic.CreateEntityOnUnblockedLand(f8,I,J,0,0)g_Outlaws.Players[et][f3].ExtinguishedFire=bW;g_Outlaws.Players[et][f3].CampFire=nil end end end;Lib.Core=Lib.Core or{}Lib.Core.Chat={DebugInput={}}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Chat")function Lib.Core.Chat:Initialize()Report.ChatOpened=CreateReport("Event_ChatOpened")Report.ChatClosed=CreateReport("Event_ChatClosed")for f=1,8 do self.DebugInput[f]={}end end;function Lib.Core.Chat:OnSaveGameLoaded()end;function Lib.Core.Chat:OnReportReceived(aF,...)end;function Lib.Core.Chat:ShowTextInput(q,fb)if Lib.IsHistoryEdition and Framework.IsNetworkGame()then return end;if not GUI then ExecuteLocal([[Lib.Core.Chat:ShowTextInput(%d, %s)]],q,tostring(fb==true))return end;q=q or GUI.GetPlayerID()self:PrepareInputVariable(q)self:ShowInputBox(q,fb==true)end;function Lib.Core.Chat:ShowInputBox(q,fc)if GUI.GetPlayerID()~=q then return end;self.DebugInput[q]=fc==true;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()Input.ChatMode()XGUIEng.SetText("/InGame/Root/Normal/ChatInput/ChatInput","")XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",1)XGUIEng.SetFocus("/InGame/Root/Normal/ChatInput/ChatInput")SendReportToGlobal(Report.ChatOpened,q)SendReport(Report.ChatOpened,q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;return true end)end;function Lib.Core.Chat:PrepareInputVariable(q)if not IsLocalScript()then return end;GUI_Chat.Abort_Orig_Core=GUI_Chat.Abort_Orig_Core or GUI_Chat.Abort;GUI_Chat.Confirm_Orig_Core=GUI_Chat.Confirm_Orig_Core or GUI_Chat.Confirm;GUI_Chat.Confirm=function()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",0)local fd=XGUIEng.GetText("/InGame/Root/Normal/ChatInput/ChatInput")local fe=Lib.Core.Chat.DebugInput[q]Lib.Core.Chat.ChatBoxInput=fd;Lib.Core.Chat:SendInputAsEvent(fd,fe)g_Chat.JustClosed=1;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;Input.GameMode()if fd:len()>0 and Framework.IsNetworkGame()and not fe then GUI.SendChatMessage(fd,q,g_Chat.CurrentMessageType,g_Chat.CurrentWhisperTarget)end end;if not Framework.IsNetworkGame()then GUI_Chat.Abort=function()end end end;function Lib.Core.Chat:SendInputAsEvent(d9,fc)d9=d9==nil and""or d9;local n=GUI.GetPlayerID()SendReportToGlobal(Report.ChatClosed,d9 or"<<<ES>>>",GUI.GetPlayerID(),fc==true)SendReport(Report.ChatClosed,d9 or"<<<ES>>>",GUI.GetPlayerID(),fc==true)self.DebugInput[n]=false end;function ShowTextInput(q,fb)Lib.Core.Chat:ShowTextInput(q,fb)end;API.ShowTextInput=ShowTextInput;Lib.Core=Lib.Core or{}Lib.Core.Debug={DisplayScriptErrors=false,CheckAtRun=false,TraceQuests=false,DevelopingCheats=false,DevelopingShell=false}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Chat")Lib.Register("core/feature/Core_Debug")function Lib.Core.Debug:Initialize()Report.DebugChatConfirmed=CreateReport("Event_DebugChatConfirmed")Report.DebugConfigChanged=CreateReport("Event_DebugConfigChanged")if IsLocalScript()then self:InitializeQsbDebugHotkeys()CreateReportReceiver(Report.ChatClosed,function(...)Lib.Core.Debug:ProcessDebugInput(...)end)end end;function Lib.Core.Debug:OnSaveGameLoaded()if IsLocalScript()then self:InitializeDebugWidgets()self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnReportReceived(aF,...)end;function Lib.Core.Debug:ActivateDebugMode(ff,aY,aZ,a_,b0)if IsLocalScript()then return end;self.DisplayScriptErrors=ff==true;self.CheckAtRun=aY==true;self.DevelopingCheats=aZ==true;self.DevelopingShell=a_==true;self.TraceQuests=b0==true;SendReport(Report.DebugConfigChanged,self.DisplayScriptErrors,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)ExecuteLocal([[
            Lib.Core.Debug.DisplayScriptErrors = %s;
            Lib.Core.Debug.CheckAtRun          = %s;
            Lib.Core.Debug.DevelopingCheats    = %s;
            Lib.Core.Debug.DevelopingShell     = %s;
            Lib.Core.Debug.TraceQuests         = %s;

            SendReport(
                Report.DebugConfigChanged,
                Lib.Core.Debug.DisplayScriptErrors,
                Lib.Core.Debug.CheckAtRun,
                Lib.Core.Debug.DevelopingCheats,
                Lib.Core.Debug.DevelopingShell,
                Lib.Core.Debug.TraceQuests
            );
            Lib.Core.Debug:InitializeDebugWidgets();
        ]],tostring(self.DisplayScriptErrors),tostring(self.CheckAtRun),tostring(self.DevelopingCheats),tostring(self.DevelopingShell),tostring(self.TraceQuests))end;function Lib.Core.Debug:InitializeDebugWidgets()if Network.IsNATReady~=nil and Framework.IsNetworkGame()then return end;if self.DevelopingCheats then KeyBindings_EnableDebugMode(1)KeyBindings_EnableDebugMode(2)KeyBindings_EnableDebugMode(3)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClock=true else KeyBindings_EnableDebugMode(0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClock=false end end;function Lib.Core.Debug:InitializeQsbDebugHotkeys()if Framework.IsNetworkGame()then return end;Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.ModifierAlt+Keys.R,"Lib.Core.Debug:ProcessDebugShortcut('RestartMap')",30,false)Input.KeyBindDown(Keys.ModifierShift+Keys.OemPipe,"Lib.Core.Debug:ProcessDebugShortcut('Terminal')",30,false)end;function Lib.Core.Debug:ProcessDebugShortcut(i,fg)if self.DevelopingCheats then if i=="RestartMap"then Framework.RestartMap()elseif i=="Terminal"then ShowTextInput(GUI.GetPlayerID(),true)end end end;function Lib.Core.Debug:ProcessDebugInput(F,q,fh)if fh then if F:lower():find("^restartmap")then self:ProcessDebugShortcut("RestartMap")elseif F:lower():find("^clear")then GUI.ClearNotes()elseif F:lower():find("^version")then GUI.AddStaticNote("Version: "..Lib.Loader.Version)elseif F:find("^> ")then GUI.SendScriptCommand(F:sub(3),true)elseif F:find("^>> ")then GUI.SendScriptCommand(string.format("Logic.ExecuteInLuaLocalState(\"%s\")",F:sub(4)),true)elseif F:find("^< ")then GUI.SendScriptCommand(string.format([[Script.Load("%s")]],F:sub(3)))elseif F:find("^<< ")then Script.Load(F:sub(4))end end end;function Lib.Core.Debug:CommandTokenizer(F)local fi={}if F==nil then return fi end;local fj={F}local fk={}local c4,ct=string.find(F,"%s+&&%s+")if c4 then fj={}while c4 do local fl=string.sub(F,1,c4-1)table.insert(fj,fl)F=string.sub(F,ct+1)c4,ct=string.find(F,"%s+&&%s+")end;if string.len(F)>0 then table.insert(fj,F)end end;for f=1,#fj,1 do c4,ct=string.find(fj[f],"%s+&%s+")if c4 then local fm=""while c4 do local fl=string.sub(fj[f],1,c4-1)table.insert(fk,fm..fl)if string.find(fl," ")then fm=string.sub(fl,1,string.find(fl," ")-1).." "end;fj[f]=string.sub(fj[f],ct+1)c4,ct=string.find(fj[f],"%s+&%s+")end;if string.len(fj[f])>0 then table.insert(fk,fm..fj[f])end else table.insert(fk,fj[f])end end;for f=1,#fk,1 do local fn={}c4,ct=string.find(fk[f],"%s+")if c4 then while c4 do local fl=string.sub(fk[f],1,c4-1)table.insert(fn,fl)fk[f]=string.sub(fk[f],ct+1)c4,ct=string.find(fk[f],"%s+")end;table.insert(fn,fk[f])else table.insert(fn,fk[f])end;table.insert(fi,fn)end;return fi end;function ActivateDebugMode(ff,aY,aZ,a_,b0)Lib.Core.Debug:ActivateDebugMode(ff,aY,aZ,a_,b0)end;API.ActivateDebugMode=ActivateDebugMode;Lib.Core=Lib.Core or{}Lib.Core.ModuleList={}Lib.Core.Global={IsInstalled=false}Lib.Core.Local={IsInstalled=false}CONST_CURRENT_MODULE_CONTEXT={}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Require("core/QSB")Lib.Require("core/feature/Core_Chat")Lib.Require("core/feature/Core_Debug")Lib.Require("core/feature/Core_LuaExtension")Lib.Require("core/feature/Core_Bugfix")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_ScriptingValue")Lib.Require("core/feature/Core_Text")Lib.Require("core/feature/Core_Job")Lib.Require("core/feature/Core_Save")Lib.Require("core/feature/Core_Quest")Lib.Require("core/Core_Behavior")Lib.Register("core/Core")function log(d9,...)local ba=d9;if#arg>0 then ba=string.format(ba,unpack(arg))end;ba=string.gsub(ba,"{cr}","\n")Framework.WriteToLog(ba)return ba end;function warn(fo,d9,...)if not fo then local fp="{@color:255,0,0,255}"local ba=fp..log(d9,unpack(arg))if GUI then GUI.AddNote(ba)else Logic.DEBUG_Addnote(ba)end;return ba end end;function error(fo,d9,...)if not fo then local ba=log(d9,unpack(arg))return assert(fo,ba)end end;function debug(fo,d9,...)if not fo then local ba=log(d9,unpack(arg))if GUI then GUI.AddNote(ba)else Logic.DEBUG_Addnote(ba)end end end;function Lib.Core.Global:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local fq=GameCallback_Lib_GetExternFilesToLoad()for f=1,#fq do Script.Load(fq[f])end end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].Global.Name=Name;Lib[Name].AquireContext=function()return Lib.Core.Global:AquireContext(Lib[Name].Global)end;Lib[Name].ReleaseContext=function()return Lib.Core.Global:ReleaseContext(Lib[Name].Global)end;if Lib[Name].Global and Lib[Name].Global.Initialize then Lib[Name].Global:Initialize()end end;self:OverrideOnSaveGameLoaded()self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()LoadBehaviors()Lib.Core.Local=nil end;self.IsInstalled=true end;function Lib.Core.Global:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].AquireContext=function()return Lib.Core.Global:AquireContext(Lib[Name].Global)end;Lib[Name].ReleaseContext=function()return Lib.Core.Global:ReleaseContext(Lib[Name].Global)end;if Lib[Name].Global and Lib[Name].Global.OnSaveGameLoaded then Lib[Name].Global:OnSaveGameLoaded()end end end;function Lib.Core.Global:OverrideOnSaveGameLoaded()Mission_OnSaveGameLoaded_Orig_Libertica=Mission_OnSaveGameLoaded;Mission_OnSaveGameLoaded=function()Lib.Core.Global:ExecuteLocal("Lib.Core.Local:OnSaveGameLoaded()")Lib.Core.Global:OnSaveGameLoaded()end end;function Lib.Core.Global:InitReportListener()GameCallback_Lib_OnEventReceived=function(aF,...)Lib.Core.LuaExtension:OnReportReceived(aF,...)Lib.Core.Report:OnReportReceived(aF,...)Lib.Core.Text:OnReportReceived(aF,...)Lib.Core.Job:OnReportReceived(aF,...)Lib.Core.ScriptingValue:OnReportReceived(aF,...)Lib.Core.Save:OnReportReceived(aF,...)Lib.Core.Quest:OnReportReceived(aF,...)Lib.Core.Chat:OnReportReceived(aF,...)Lib.Core.Debug:OnReportReceived(aF,...)Lib.Core.Bugfix:OnReportReceived(aF,...)if aF==Report.LoadingFinished then SendReportToLocal(Report.LoadingFinished,...)end;if aF==Report.EscapePressed then SendReportToLocal(Report.EscapePressed,...)end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]if Lib[Name].Global and Lib[Name].Global.OnReportReceived then Lib[Name].Global:OnReportReceived(aF,...)end end;if aF==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Global:ExecuteLocal(fr,...)local fs=fr;if arg and#arg>0 then fs=fs:format(unpack(arg))end;Logic.ExecuteInLuaLocalState(fs)end;function Lib.Core.Global:AquireContext(ft)local Name=type(ft)=="table"and ft.Name or ft;assert(Lib[Name]~=nil)table.insert(CONST_CURRENT_MODULE_CONTEXT,Lib[Name].Global)local fu=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[fu]end;function Lib.Core.Global:ReleaseContext(ft)local Name=type(ft)=="table"and ft.Name or ft;assert(Lib[Name]~=nil)local fu=#CONST_CURRENT_MODULE_CONTEXT;Lib[Name].Global=CONST_CURRENT_MODULE_CONTEXT[fu]table.remove(CONST_CURRENT_MODULE_CONTEXT)fu=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[fu]end;function Lib.Core.Global:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")end;function Lib.Core.Global:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")end;function Lib.Core.Local:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local fq=GameCallback_Lib_GetExternFilesToLoad()for f=1,#fq do Script.Load(fq[f])end end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].Local.Name=Name;Lib[Name].AquireContext=function()return Lib.Core.Local:AquireContext(Lib[Name].Local)end;Lib[Name].ReleaseContext=function()return Lib.Core.Local:ReleaseContext(Lib[Name].Local)end;if Lib[Name].Local and Lib[Name].Local.Initialize then Lib[Name].Local:Initialize()end end;self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()Lib.Core.Global=nil end;self.IsInstalled=true end;function Lib.Core.Local:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].AquireContext=function()return Lib.Core.Local:AquireContext(Lib[Name].Local)end;Lib[Name].ReleaseContext=function()return Lib.Core.Local:ReleaseContext(Lib[Name].Local)end;if Lib[Name].Local and Lib[Name].Local.OnSaveGameLoaded then Lib[Name].Local:OnSaveGameLoaded()end end;self:SetEscapeKeyTrigger()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Local:InitReportListener()GameCallback_Lib_OnEventReceived=function(aF,...)Lib.Core.LuaExtension:OnReportReceived(aF,...)Lib.Core.Report:OnReportReceived(aF,...)Lib.Core.Text:OnReportReceived(aF,...)Lib.Core.Job:OnReportReceived(aF,...)Lib.Core.ScriptingValue:OnReportReceived(aF,...)Lib.Core.Save:OnReportReceived(aF,...)Lib.Core.Quest:OnReportReceived(aF,...)Lib.Core.Chat:OnReportReceived(aF,...)Lib.Core.Debug:OnReportReceived(aF,...)Lib.Core.Bugfix:OnReportReceived(aF,...)if aF==Report.LoadingFinished then XGUIEng.PopPage()end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]if Lib[Name].Local and Lib[Name].Local.OnReportReceived then Lib[Name].Local:OnReportReceived(aF,...)end end;if aF==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Local:ExecuteGlobal(fr,...)local fs=fr;assert(not(IsHistoryEdition()and IsMultiplayer()),"Script command is not allowed in history edition multiplayer.")if arg and#arg>0 then fs=fs:format(unpack(arg))end;GUI.SendScriptCommand(fs)end;function Lib.Core.Local:AquireContext(ft)local Name=type(ft)=="table"and ft.Name or ft;assert(Lib[Name]~=nil)table.insert(CONST_CURRENT_MODULE_CONTEXT,Lib[Name].Local)local fu=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[fu]end;function Lib.Core.Local:ReleaseContext(ft)local Name=type(ft)=="table"and ft.Name or ft;assert(Lib[Name]~=nil)local fu=#CONST_CURRENT_MODULE_CONTEXT;Lib[Name].Local=CONST_CURRENT_MODULE_CONTEXT[fu]table.remove(CONST_CURRENT_MODULE_CONTEXT)fu=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[fu]end;function Lib.Core.Local:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")self:SetEscapeKeyTrigger()end;function Lib.Core.Local:SetEscapeKeyTrigger()Input.KeyBindDown(Keys.Escape,"SendReportToGlobal(Report.EscapePressed, GUI.GetPlayerID())",30,false)end;function Lib.Core.Local:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")self.LoadscreenWatchJobID=RequestHiResJob(function()if XGUIEng.IsWidgetShownEx("/LoadScreen/LoadScreen")==0 then SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())return true end end)HideLoadScreen_Orig_Core=HideLoadScreen;HideLoadScreen=function()HideLoadScreen_Orig_Core()XGUIEng.PushPage("/LoadScreen/LoadScreen",true)XGUIEng.ShowWidget("/LoadScreen/LoadScreen/ButtonStart",0)EndJob(Lib.Core.Local.LoadscreenWatchJobID)SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())end end;function PrepareLibrary()assert(not IsLocalScript(),"Must be called from global script!")Lib.Core.Global:Initialize()ExecuteLocal("Lib.Core.Local:Initialize()")end;function RegisterModule(r)assert(Lib[r],"Module '"..r.."' does not exist!")table.insert(Lib.Core.ModuleList,r)end;function ExecuteLocal(fr,...)if not IsLocalScript()then Lib.Core.Global:ExecuteLocal(fr,...)end end;function ExecuteGlobal(fr,...)if IsLocalScript()then Lib.Core.Local:ExecuteGlobal(fr,...)end end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UITools_API")function ChangeIcon(fv,fw,fx,r)error(IsLocalScript(),"Can only be done in local script!")fw=fw or{10,14}Lib.UITools.Widget:SetIcon(fv,fw,fx,r)end;API.SetIcon=ChangeIcon;function SetTooltipNormal(fy,d9,fz)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipNormal(fy,d9,fz)end;API.SetTooltipNormal=SetTooltipNormal;function SetTooltipCosts(fy,d9,fz,fA,fB)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipCosts(fy,d9,fz,fA,fB)end;API.SetTooltipCosts=SetTooltipCosts;function HideMinimap(dz)if not IsLocalScript()then ExecuteLocal("HideMinimap(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapOverlay",dz)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapTerrain",dz)end;API.HideMinimap=HideMinimap;function HideToggleMinimap(dz)if not IsLocalScript()then ExecuteLocal("HideToggleMinimap(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/MinimapButton",dz)end;API.HideToggleMinimap=HideToggleMinimap;function HideDiplomacyMenu(dz)if not IsLocalScript()then ExecuteLocal("HideDiplomacyMenu(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/DiplomacyMenuButton",dz)end;API.HideDiplomacyMenu=HideDiplomacyMenu;function HideProductionMenu(dz)if not IsLocalScript()then ExecuteLocal("HideProductionMenu(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/ProductionMenuButton",dz)end;API.HideProductionMenu=HideProductionMenu;function HideWeatherMenu(dz)if not IsLocalScript()then ExecuteLocal("HideWeatherMenu(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/WeatherMenuButton",dz)end;API.HideWeatherMenu=HideWeatherMenu;function HideBuyTerritory(dz)if not IsLocalScript()then ExecuteLocal("HideBuyTerritory(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory",dz)end;API.HideBuyTerritory=HideBuyTerritory;function HideKnightAbility(dz)if not IsLocalScript()then ExecuteLocal("HideKnightAbility(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbilityProgress",dz)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbility",dz)end;API.HideKnightAbility=HideKnightAbility;function HideKnightButton(dz)if not IsLocalScript()then ExecuteLocal("HideKnightButton(%s)",tostring(dz))Logic.SetEntitySelectableFlag("..KnightID..",dz and 0 or 1)return end;local fC=Logic.GetKnightID(GUI.GetPlayerID())if dz then GUI.DeselectEntity(fC)end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButtonProgress",dz)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButton",dz)end;API.HideKnightButton=HideKnightButton;function HideSelectionButton(dz)if not IsLocalScript()then ExecuteLocal("HideSelectionButton(%s)",tostring(dz))return end;HideKnightButton(dz)GUI.ClearSelection()Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/BattalionButton",dz)end;API.HideSelectionButton=HideSelectionButton;function HideBuildMenu(dz)if not IsLocalScript()then ExecuteLocal("HideBuildMenu(%s)",tostring(dz))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/BuildMenu",dz)end;API.HideBuildMenu=HideBuildMenu;function AddShortcutDescription(dC,fD)if not IsLocalScript()then return-1 end;g_KeyBindingsOptions.Descriptions=nil;for f=1,#Lib.UITools.Shortcut.HotkeyDescriptions do if Lib.UITools.Shortcut.HotkeyDescriptions[f][1]==dC then return-1 end end;local an=#Lib.UITools.Shortcut.HotkeyDescriptions+1;table.insert(Lib.UITools.Shortcut.HotkeyDescriptions,{ID=an,dC,fD})return#Lib.UITools.Shortcut.HotkeyDescriptions end;API.AddShortcutDescription=AddShortcutDescription;function RemoveShortcutDescription(aF)if not IsLocalScript()then return end;g_KeyBindingsOptions.Descriptions=nil;for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h.ID==aF then Lib.UITools.Shortcut.HotkeyDescriptions[g]=nil end end end;API.RemoveShortcutDescription=RemoveShortcutDescription;function SpeedLimitActivate(dz)if IsLocalScript()or Framework.IsNetworkGame()then return end;return ExecuteLocal("Lib.UITools.Speed:ActivateSpeedLimit(%s)",tostring(dz))end;API.SpeedLimitActivate=SpeedLimitActivate;function GetTerritoryName(be)local Name=Logic.GetTerritoryName(be)local u=Framework.GetCurrentMapTypeAndCampaignName()if u==1 or u==3 then return Name end;local fE=Framework.GetCurrentMapName()local fF="Map_"..fE;local TerritoryName=string.gsub(Name," ","")TerritoryName=XGUIEng.GetStringTableText(fF.."/Territory_"..TerritoryName)if TerritoryName==""then TerritoryName=Name.."(key?)"end;return TerritoryName end;API.GetTerritoryName=GetTerritoryName;function GetPlayerName(q)local s=Logic.GetPlayerName(q)local t=CONST_PLAYER_NAMES[q]if t~=nil and t~=""then s=t end;local u=Framework.GetCurrentMapTypeAndCampaignName()local v=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),u)if v>0 then return s end;if u==1 or u==3 then local w,x,y=Framework.GetPlayerInfo(q)if s~=""then return s end;return w end;return s end;API.GetPlayerName=GetPlayerName;function SetPlayerName(q,r)assert(type(q)=="number")assert(type(r)=="string")if not IsLocalScript()then ExecuteLocal([[SetPlayerName(%d, "%s")]],q,r)return end;GUI_MissionStatistic.PlayerNames[q]=r;CONST_PLAYER_NAMES[q]=r end;API.SetPlayerName=SetPlayerName;function SetPlayerColor(q,fG,fH,fI)error(not IsLocalScript(),"Player color must be set from logic!")g_ColorIndex["ExtraColor1"]=g_ColorIndex["ExtraColor1"]or 16;g_ColorIndex["ExtraColor2"]=g_ColorIndex["ExtraColor2"]or 17;local fJ=type(fG)=="string"and g_ColorIndex[fG]or fG;local fK=fH or-1;local fL=fI or-1;Logic.PlayerSetPlayerColor(q,fJ,fK,fL)ExecuteLocal([[
        Display.UpdatePlayerColors()
        GUI.RebuildMinimapTerrain()
        GUI.RebuildMinimapTerritory()
    ]])end;API.SetPlayerColor=SetPlayerColor;function SetPlayerPortrait(q,fM)error(q>=1 and q<=8,"Invalid player ID!")if not IsLocalScript()then local fN=fM~=nil and"'"..fM.."'"or"nil"ExecuteLocal("SetPlayerPortrait(%d, %s)",q,fN)return end;if fM==nil then Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(q)elseif fM~=nil and IsExisting(fM)then Lib.UITools.Player:SetPlayerPortraitBySettler(q,fM)else Lib.UITools.Player:SetPlayerPortraitByModelName(q,fM)end end;API.SetPlayerPortrait=SetPlayerPortrait;Lib.Register("module/ui/UITools_Speed")Lib.UITools=Lib.UITools or{}Lib.UITools.Speed={SpeedLimit=1,Text={Message={NoSpeedUp={de="Die Spielgeschwindigkeit kann nicht erhöht werden!",en="The game speed can not be increased!",fr="La vitesse du jeu ne peut pas être augmentée!"}}}}function Lib.UITools.Speed:SetSpeedLimit(fO)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;fO=fO<1 and 1 or math.floor(fO)log("ModuleGuiControl: Setting speed limit to "..fO)self.SpeedLimit=fO end;function Lib.UITools.Speed:ActivateSpeedLimit(dz)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;self.UseSpeedLimit=dz==true;if dz and Game.GameTimeGetFactor(GUI.GetPlayerID())>self.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..self.SpeedLimit)Game.GameTimeSetFactor(GUI.GetPlayerID(),self.SpeedLimit)g_GameSpeed=1 end end;function Lib.UITools.Speed:InitForbidSpeedUp()GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(fP)GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp(fP)if Lib.UITools.Speed.UseSpeedLimit==true then log("ModuleGuiControl: Checking speed limit.")if fP>Lib.UITools.Speed.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..tostring(fP)..".")Game.GameTimeSetFactor(GUI.GetPlayerID(),Lib.UITools.Speed.SpeedLimit)g_GameSpeed=1;Message(Lib.UITools.Speed.Text.Message.NoSpeedUp)end end end end;Lib.Register("module/ui/UITools_Widget")Lib.UITools=Lib.UITools or{}Lib.UITools.Widget={HiddenWidgets={}}function Lib.UITools.Widget:DisplayInterfaceButton(fQ,fR)self.HiddenWidgets[fQ]=fR==true;XGUIEng.ShowWidget(fQ,fR==true and 0 or 1)end;function Lib.UITools.Widget:UpdateHiddenWidgets()for g,h in pairs(self.HiddenWidgets)do XGUIEng.ShowWidget(g,0)end end;function Lib.UITools.Widget:OverrideMissionGoodCounter()StartMissionGoodOrEntityCounter=function(fS,fT)local fU="/InGame/Root/Normal/MissionGoodOrEntityCounter/Icon"local fV="/InGame/Root/Normal/MissionGoodOrEntityCounter"if type(fS[3])=="string"or fS[3]>2 then Lib.UITools.Widget:SetIcon(fU,fS,64,fS[3])else SetIcon(fU,fS)end;g_MissionGoodOrEntityCounterAmountToReach=fT;g_MissionGoodOrEntityCounterIcon=fS;XGUIEng.ShowWidget(fV,1)end end;function Lib.UITools.Widget:OverrideUpdateClaimTerritory()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface=GUI_Knight.ClaimTerritoryUpdate;GUI_Knight.ClaimTerritoryUpdate=function()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface()local b8="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory"if Lib.UITools.Widget.HiddenWidgets[b8]==true then XGUIEng.ShowWidget(b8,0)return true end end end;function Lib.UITools.Widget:SetIcon(fv,fw,fx,r)fx=fx or 64;fw[3]=fw[3]or 0;if r==nil then return SetIcon(fv,fw,fx)end;assert(fx==44 or fx==64 or fx==128)if fx==44 then r=r..".png"end;if fx==64 then r=r.."big.png"end;if fx==128 then r=r.."verybig.png"end;local fW,fX,fY,fZ;fW=(fw[1]-1)*fx;fY=(fw[2]-1)*fx;fX=fw[1]*fx;fZ=fw[2]*fx;State=1;if XGUIEng.IsButton(fv)==1 then State=7 end;XGUIEng.SetMaterialAlpha(fv,State,255)XGUIEng.SetMaterialTexture(fv,State,r)XGUIEng.SetMaterialUV(fv,State,fW,fY,fX,fZ)end;function Lib.UITools.Widget:TooltipNormal(f_,g0,g1)if f_ and f_:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then f_=XGUIEng.GetStringTableText(f_)end;if g0 and g0:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then g0=XGUIEng.GetStringTableText(g0)end;g1=g1 or""if g1 and g1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then g1=XGUIEng.GetStringTableText(g1)end;local g2="/InGame/Root/Normal/TooltipNormal"local g3=XGUIEng.GetWidgetID(g2)local g4=XGUIEng.GetWidgetID(g2 .."/FadeIn/Name")local g5=XGUIEng.GetWidgetID(g2 .."/FadeIn/Text")local g6=XGUIEng.GetWidgetID(g2 .."/FadeIn/BG")local g7=XGUIEng.GetWidgetID(g2 .."/FadeIn")local g8=XGUIEng.GetCurrentWidgetID()local g9=f_ and f_ or""local ga=g0 and g0 or""local gb=""if XGUIEng.IsButtonDisabled(g8)==1 and g1 then gb=gb.."{cr}{@color:255,32,32,255}"..g1 end;XGUIEng.SetText(g4,"{center}"..g9)XGUIEng.SetText(g5,ga..gb)local gc=XGUIEng.GetTextHeight(g5,true)local gd,ge=XGUIEng.GetWidgetSize(g5)XGUIEng.SetWidgetSize(g5,gd,gc)GUI_Tooltip.ResizeBG(g6,g5)local gf={g6}GUI_Tooltip.SetPosition(g3,gf,g8)GUI_Tooltip.FadeInTooltip(g7)end;function Lib.UITools.Widget:TooltipCosts(f_,g0,g1,gg,gh)gg=gg or{}local gi={}for f=1,4,1 do gi[f]=gg[f]end;if f_ and f_:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then f_=XGUIEng.GetStringTableText(f_)end;if g0 and g0:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then g0=XGUIEng.GetStringTableText(g0)end;if g1 and g1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then g1=XGUIEng.GetStringTableText(g1)end;local g2="/InGame/Root/Normal/TooltipBuy"local g3=XGUIEng.GetWidgetID(g2)local g4=XGUIEng.GetWidgetID(g2 .."/FadeIn/Name")local g5=XGUIEng.GetWidgetID(g2 .."/FadeIn/Text")local g6=XGUIEng.GetWidgetID(g2 .."/FadeIn/BG")local g7=XGUIEng.GetWidgetID(g2 .."/FadeIn")local gj=XGUIEng.GetWidgetID(g2 .."/Costs")local g8=XGUIEng.GetCurrentWidgetID()local g9=f_ and f_ or""local ga=g0 and g0 or""local gb=""if XGUIEng.IsButtonDisabled(g8)==1 and g1 then gb=gb.."{cr}{@color:255,32,32,255}"..g1 end;XGUIEng.SetText(g4,"{center}"..g9)XGUIEng.SetText(g5,ga..gb)local gc=XGUIEng.GetTextHeight(g5,true)local gd,ge=XGUIEng.GetWidgetSize(g5)XGUIEng.SetWidgetSize(g5,gd,gc)GUI_Tooltip.ResizeBG(g6,g5)GUI_Tooltip.SetCosts(gj,gi,gh)local gf={g3,gj,g6}GUI_Tooltip.SetPosition(g3,gf,g8,nil,true)GUI_Tooltip.OrderTooltip(gf,g7,gj,g8,g6)GUI_Tooltip.FadeInTooltip(g7)end;Lib.Register("module/ui/UITools_Shortcut")Lib.UITools=Lib.UITools or{}Lib.UITools.Shortcut={HotkeyDescriptions={}}function Lib.UITools.Shortcut:OverrideRegisterHotkey()function g_KeyBindingsOptions:OnShow()if Game~=nil then XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",1)else XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",0)end;if g_KeyBindingsOptions.Descriptions==nil then g_KeyBindingsOptions.Descriptions={}DescRegister("MenuInGame")DescRegister("MenuDiplomacy")DescRegister("MenuProduction")DescRegister("MenuPromotion")DescRegister("MenuWeather")DescRegister("ToggleOutstockInformations")DescRegister("JumpMarketplace")DescRegister("JumpMinimapEvent")DescRegister("BuildingUpgrade")DescRegister("BuildLastPlaced")DescRegister("BuildStreet")DescRegister("BuildTrail")DescRegister("KnockDown")DescRegister("MilitaryAttack")DescRegister("MilitaryStandGround")DescRegister("MilitaryGroupAdd")DescRegister("MilitaryGroupSelect")DescRegister("MilitaryGroupStore")DescRegister("MilitaryToggleUnits")DescRegister("UnitSelect")DescRegister("UnitSelectToggle")DescRegister("UnitSelectSameType")DescRegister("StartChat")DescRegister("StopChat")DescRegister("QuickSave")DescRegister("QuickLoad")DescRegister("TogglePause")DescRegister("RotateBuilding")DescRegister("ExitGame")DescRegister("Screenshot")DescRegister("ResetCamera")DescRegister("CameraMove")DescRegister("CameraMoveMouse")DescRegister("CameraZoom")DescRegister("CameraZoomMouse")DescRegister("CameraRotate")for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h then h[1]=type(h[1])=="table"and Localize(h[1])or h[1]h[2]=type(h[2])=="table"and Localize(h[2])or h[2]table.insert(g_KeyBindingsOptions.Descriptions,1,h)end end end;XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ShortcutList)XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ActionList)for dW,d8 in ipairs(g_KeyBindingsOptions.Descriptions)do XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ShortcutList,d8[1])XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ActionList,d8[2])end end end;Lib.Register("module/ui/UITools_Player")Lib.UITools=Lib.UITools or{}Lib.UITools.Player={}function Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(q)local fC=Logic.GetKnightID(q)local gk="H_NPC_Generic_Trader"if fC~=0 then local gl=Logic.GetEntityType(fC)local gm=Logic.GetEntityTypeName(gl)gk="H"..string.sub(gm,2,8).."_"..string.sub(gm,9)if not Models["Heads_"..gk]then gk="H_NPC_Generic_Trader"end end;g_PlayerPortrait[q]=gk end;function Lib.UITools.Player:SetPlayerPortraitBySettler(q,fM)local gn={["U_KnightChivalry"]="H_Knight_Chivalry",["U_KnightHealing"]="H_Knight_Healing",["U_KnightPlunder"]="H_Knight_Plunder",["U_KnightRedPrince"]="H_Knight_RedPrince",["U_KnightSabatta"]="H_Knight_Sabatt",["U_KnightSong"]="H_Knight_Song",["U_KnightTrading"]="H_Knight_Trading",["U_KnightWisdom"]="H_Knight_Wisdom",["U_NPC_Amma_NE"]="H_NPC_Amma",["U_NPC_Castellan_ME"]="H_NPC_Castellan_ME",["U_NPC_Castellan_NA"]="H_NPC_Castellan_NA",["U_NPC_Castellan_NE"]="H_NPC_Castellan_NE",["U_NPC_Castellan_SE"]="H_NPC_Castellan_SE",["U_MilitaryBandit_Ranged_ME"]="H_NPC_Mercenary_ME",["U_MilitaryBandit_Melee_NA"]="H_NPC_Mercenary_NA",["U_MilitaryBandit_Melee_NE"]="H_NPC_Mercenary_NE",["U_MilitaryBandit_Melee_SE"]="H_NPC_Mercenary_SE",["U_NPC_Monk_ME"]="H_NPC_Monk_ME",["U_NPC_Monk_NA"]="H_NPC_Monk_NA",["U_NPC_Monk_NE"]="H_NPC_Monk_NE",["U_NPC_Monk_SE"]="H_NPC_Monk_SE",["U_NPC_Villager01_ME"]="H_NPC_Villager01_ME",["U_NPC_Villager01_NA"]="H_NPC_Villager01_NA",["U_NPC_Villager01_NE"]="H_NPC_Villager01_NE",["U_NPC_Villager01_SE"]="H_NPC_Villager01_SE"}if g_GameExtraNo>0 then gn["U_KnightPraphat"]="H_Knight_Praphat"gn["U_KnightSaraya"]="H_Knight_Saraya"gn["U_KnightKhana"]="H_Knight_Khana"gn["U_MilitaryBandit_Melee_AS"]="H_NPC_Mercenary_AS"gn["U_NPC_Castellan_AS"]="H_NPC_Castellan_AS"gn["U_NPC_Villager_AS"]="H_NPC_Villager_AS"gn["U_NPC_Monk_AS"]="H_NPC_Monk_AS"gn["U_NPC_Monk_Khana"]="H_NPC_Monk_Khana"end;local gk="H_NPC_Generic_Trader"local B=GetID(fM)if B~=0 then local ep=Logic.GetEntityType(B)local go=Logic.GetEntityTypeName(ep)gk=gn[go]or"H_NPC_Generic_Trader"if not gk then gk="H_NPC_Generic_Trader"end end;g_PlayerPortrait[q]=gk end;function Lib.UITools.Player:SetPlayerPortraitByModelName(q,fM)if not Models["Heads_"..tostring(fM)]then fM="H_NPC_Generic_Trader"end;g_PlayerPortrait[q]=fM end;Lib.UITools=Lib.UITools or{}Lib.UITools.Name="UITools"Lib.UITools.Global={}Lib.UITools.Local={}CONST_PLAYER_NAMES={}Lib.Require("core/Core")Lib.Require("module/ui/UITools_Player")Lib.Require("module/ui/UITools_Shortcut")Lib.Require("module/ui/UITools_Widget")Lib.Require("module/ui/UITools_Speed")Lib.Require("module/ui/UITools_API")Lib.Register("module/ui/UITools")function Lib.UITools.Global:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Local=nil;Lib.UITools.Player=nil;Lib.UITools.Shortcut=nil;Lib.UITools.Speed=nil;Lib.UITools.Widget=nil end;self.IsInstalled=true end;function Lib.UITools.Global:OnSaveGameLoaded()end;function Lib.UITools.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.UpdateTexturePosition then g_TexturePositions=g_TexturePositions or{}g_TexturePositions[arg[1]]=g_TexturePositions[arg[1]]or{}g_TexturePositions[arg[1]][arg[2]]={arg[3],arg[4],arg[5]}end end;function Lib.UITools.Local:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Shortcut:OverrideRegisterHotkey()Lib.UITools.Widget:OverrideMissionGoodCounter()Lib.UITools.Widget:OverrideUpdateClaimTerritory()Lib.UITools.Speed:InitForbidSpeedUp()self:PostTexturePositionsToGlobal()self:OverrideAfterBuildingPlacement()Lib.UITools.Global=nil end;self.IsInstalled=true end;function Lib.UITools.Local:OnSaveGameLoaded()Lib.UITools.Widget:UpdateHiddenWidgets()end;function Lib.UITools.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UITools.Local:OverrideAfterBuildingPlacement()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools=GameCallback_GUI_AfterBuildingPlacement;GameCallback_GUI_AfterBuildingPlacement=function()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools()local I,J=GUI.Debug_GetMapPositionUnderMouse()RequestHiResJob(function()local gp={Logic.GetPlayerEntitiesInArea(GUI.GetPlayerID(),0,I,J,50,16)}for f=2,gp[1]+1 do if gp[f]and gp[f]~=0 and Logic.IsBuilding(gp[f])==1 and Logic.IsConstructionComplete(gp[f])==0 then SendReportToGlobal(Report.BuildingPlaced,gp[f],Logic.EntityGetPlayer(gp[f]))SendReport(Report.BuildingPlaced,gp[f],Logic.EntityGetPlayer(gp[f]))end end end,I,J)end end;function Lib.UITools.Local:PostTexturePositionsToGlobal()RequestJob(function()if Logic.GetTime()>1 then for g,h in pairs(g_TexturePositions)do for gq,gr in pairs(h)do local I,J,K=gr[1]or 1,gr[2]or 1,gr[3]or 0;SendReportToGlobal(Report.UpdateTexturePosition,g,gq,I,J,K)end end;return true end end)end;RegisterModule(Lib.UITools.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIEffects_API")function ActivateColoredScreen(q,gs,gt,gu,gv)ActivateImageScreen(q,"",gs or 0,gt or 0,gu or 0,gv or 255)end;API.ActivateColoredScreen=ActivateColoredScreen;function DeactivateColoredScreen(q)DeactivateImageScreen(q)end;API.DeactivateColoredScreen=DeactivateColoredScreen;function ActivateImageScreen(q,gw,gs,gt,gu,gv)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal([[Lib.UIEffects.Local:InterfaceActivateImageBackground(%d, "%s", %d, %d, %d, %d)]],q,gw,gs~=nil and gs or 255,gt~=nil and gt or 255,gu~=nil and gu or 255,gv~=nil and gv or 255)return end;Lib.UIEffects.Local:InterfaceActivateImageBackground(q,gw,gs,gt,gu,gv)end;API.ActivateImageScreen=ActivateImageScreen;function DeactivateImageScreen(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateImageBackground(%d)",q)return end;Lib.UIEffects.Local:InterfaceDeactivateImageBackground(q)end;API.DeactivateImageScreen=DeactivateImageScreen;function ActivateNormalInterface(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceActivateNormalInterface(%d)",q)return end;Lib.UIEffects.Local:InterfaceActivateNormalInterface(q)end;API.ActivateNormalInterface=ActivateNormalInterface;function DeactivateNormalInterface(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(%d)",q)return end;Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(q)end;API.DeactivateNormalInterface=DeactivateNormalInterface;function StartCinematicEvent(r,q)assert(IsLocalScript()==false)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}local an=Lib.UIEffects.Global:ActivateCinematicEvent(q)Lib.UIEffects.CinematicEvents[q][r]=an end;API.StartCinematicEvent=StartCinematicEvent;function FinishCinematicEvent(r,q)assert(IsLocalScript()==false)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}if Lib.UIEffects.CinematicEvents[q][r]then Lib.UIEffects.Global:ConcludeCinematicEvent(Lib.UIEffects.CinematicEvents[q][r],q)end end;API.FinishCinematicEvent=FinishCinematicEvent;function GetCinematicEvent(gx,q)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}if type(gx)=="number"then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(gx)end;return Lib.UIEffects.Global:GetCinematicEventStatus(gx)end;if Lib.UIEffects.CinematicEvents[q][gx]then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[q][gx])end;return Lib.UIEffects.Global:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[q][gx])end;return CinematicEventState.NotTriggered end;API.GetCinematicEvent=GetCinematicEvent;function IsCinematicEventActive(q)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}for g,h in pairs(Lib.UIEffects.CinematicEvents[q])do if GetCinematicEvent(g,q)==CinematicEventState.Active then return true end end;return false end;API.IsCinematicEventActive=IsCinematicEventActive;function StartTypewriter(gy)if Framework.IsNetworkGame()~=true then gy.PlayerID=gy.PlayerID or 1 end;if gy.PlayerID==nil or(gy.PlayerID<1 or gy.PlayerID>8)then return end;gy.Text=Localize(gy.Text or"")gy.Callback=gy.Callback or function()end;gy.CharSpeed=gy.CharSpeed or 1;gy.Waittime=(gy.Waittime or 8)*10;gy.TargetEntity=GetID(gy.TargetEntity or 0)gy.Image=gy.Image or""gy.Color=gy.Color or{R=gy.Image and gy.Image~=""and 255 or 0,G=gy.Image and gy.Image~=""and 255 or 0,B=gy.Image and gy.Image~=""and 255 or 0,A=255}if gy.Opacity and gy.Opacity>=0 and gy.Opacity then gy.Color.A=math.floor(255*gy.Opacity+0.5)end;gy.Delay=15;gy.Index=0;return Lib.UIEffects.Global:StartTypewriter(gy)end;API.StartTypewriter=StartTypewriter;Lib.Register("module/settings/Camera_Text")Lib.Camera=Lib.Camera or{}Lib.Camera.Text={Shortcut={Hotkey={de="STRG + UMSCHALT + K",en="CTRL + SHIFT + K",fr="CTRL + SHIFT + K"},Description={de="Alternativen Zoom ein/aus",en="Alternative zoom on/off",fr="Zoom alternatif On/Off"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Camera_API")function SetRenderDistance(gz)if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:SetRenderDistance(%f)]],gz)return end;Lib.Camera.Local:SetRenderDistance(gz)end;function ResetRenderDistance()if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:ResetRenderDistance()]])return end;Lib.Camera.Local:ResetRenderDistance()end;function ActivateBorderScroll(q)q=q or-1;assert(q==-1 or q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:ActivateBorderScroll(%d)",q)return end;Lib.Camera.Local:ActivateBorderScroll(q)end;API.ActivateBorderScroll=ActivateBorderScroll;function DeactivateBorderScroll(ab,q)q=q or-1;assert(q==-1 or q>=1 and q<=8)local gA;if ab then gA=GetID(ab)end;if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:DeactivateBorderScroll(%d, %d)",q,gA or 0)return end;Lib.Camera.Local:DeactivateBorderScroll(q,gA)end;API.DeactivateBorderScroll=DeactivateBorderScroll;function AllowExtendedZoom(dz,q)q=q or-1;if not GUI then ExecuteLocal([[API.AllowExtendedZoom(%s, %d)]],tostring(dz==true),q)return end;if q~=-1 and GUI.GetPlayerID()~=q then return end;Lib.Camera.Local.ExtendedZoomAllowed=dz==true;if dz==true then Lib.Camera.Local:DescribeExtendedZoomShortcut()else Lib.Camera.Local:RemoveExtendedZoomShortcut()Lib.Camera.Local:DeactivateExtendedZoom(q)end end;API.AllowExtendedZoom=AllowExtendedZoom;function FocusCameraOnKnight(q,gB,gC)FocusCameraOnEntity(Logic.GetKnightID(q),gB,gC)end;API.FocusCameraOnKnight=FocusCameraOnKnight;function FocusCameraOnEntity(k,gB,gC)if not GUI then local gD=type(k)~="string"and k or"'"..k.."'"ExecuteLocal([[API.FocusCameraOnEntity(%s, %f, %f)]],gD,gB,gC)return end;assert(type(gB)=="number","Rotation is wrong!")assert(type(gC)=="number","Zoom factor is wrong!")assert(IsExisting(k),"Entity does not exist!")Lib.Camera.Local:SetCameraToEntity(k,gB,gC)end;API.FocusCameraOnEntity=FocusCameraOnEntity;Lib.Camera=Lib.Camera or{}Lib.Camera.Name="Camera"Lib.Camera.Global={}Lib.Camera.Local={BorderScrollDeactivated=false,ExtendedZoomHotKeyID=0,ExtendedZoomAllowed=true}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/settings/Camera_API")Lib.Require("module/settings/Camera_Text")Lib.Register("module/settings/Camera")function Lib.Camera.Global:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")Lib.Camera.Local=nil end;self.IsInstalled=true end;function Lib.Camera.Global:OnSaveGameLoaded()end;function Lib.Camera.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Camera.Local:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")self:ResetRenderDistance()self:DescribeExtendedZoomShortcut()self:InitExtendedZoomHotkey()Lib.Camera.Global=nil end;self.IsInstalled=true end;function Lib.Camera.Local:OnSaveGameLoaded()end;function Lib.Camera.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.SaveGameLoaded then if self.ExtendedZoomActive then self:ActivateExtendedZoom(GUI.GetPlayerID())end;self:InitExtendedZoomHotkey()self:ResetRenderDistance()end end;function Lib.Camera.Local:SetRenderDistance(gz)Camera.Cutscene_SetFarClipPlane(gz,gz)Display.SetFarClipPlaneMinAndMax(gz,gz)end;function Lib.Camera.Local:ResetRenderDistance()Camera.Cutscene_SetFarClipPlane(CONST_FARCLIPPLANE)Display.SetFarClipPlaneMinAndMax(CONST_FARCLIPPLANE_DEFAULT,CONST_FARCLIPPLANE_DEFAULT)end;function Lib.Camera.Local:DeactivateBorderScroll(q,gE)if q~=-1 and q~=GUI.GetPlayerID()or self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=true;if gE then Camera.RTS_FollowEntity(gE)end;Camera.RTS_SetBorderScrollSize(0)Camera.RTS_SetZoomWheelSpeed(0)SendReportToGlobal(Report.BorderScrollLocked,q,gE or 0)SendReport(Report.BorderScrollLocked,q,gE or 0)end;function Lib.Camera.Local:ActivateBorderScroll(q)if q~=-1 and q~=GUI.GetPlayerID()or not self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=false;Camera.RTS_FollowEntity(0)Camera.RTS_SetBorderScrollSize(3.0)Camera.RTS_SetZoomWheelSpeed(4.2)SendReportToGlobal(Report.BorderScrollReset,q)SendReport(Report.BorderScrollReset,q)end;function Lib.Camera.Local:SetCameraToEntity(k,gB,gC)local aH=GetPosition(k)local gF=gB or-45;local gG=gC or 0.5;Camera.RTS_SetLookAtPosition(aH.X,aH.Y)Camera.RTS_SetRotationAngle(gF)Camera.RTS_SetZoomFactor(gG)end;function Lib.Camera.Local:DescribeExtendedZoomShortcut()self:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID==0 then self.ExtendedZoomHotKeyID=AddShortcutDescription(Localize(Lib.Camera.Text.Shortcut.Hotkey),Localize(Lib.Camera.Text.Shortcut.Description))end end;function Lib.Camera.Local:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID~=0 then RemoveShortcutDescription(self.ExtendedZoomHotKeyID)self.ExtendedZoomHotKeyID=0 end end;function Lib.Camera.Local:InitExtendedZoomHotkey()Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.K,"Lib.Camera.Local:ToggleExtendedZoom(GUI.GetPlayerID())",2)end;function Lib.Camera.Local:ToggleExtendedZoom(q)if self.ExtendedZoomAllowed then if self.ExtendedZoomActive then self:DeactivateExtendedZoom(q)else self:ActivateExtendedZoom(q)end end end;function Lib.Camera.Local:ActivateExtendedZoom(q)if q~=-1 and q~=GUI.GetPlayerID()then return end;if not self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomDeactivated,q)end;self.ExtendedZoomActive=true;Camera.RTS_SetZoomFactorMax(0.870001)Camera.RTS_SetZoomFactor(0.870000)Camera.RTS_SetZoomFactorMin(0.099999)SendReportToGlobal(Report.ExtendedZoomDeactivated,q)end;function Lib.Camera.Local:DeactivateExtendedZoom(q)if q~=-1 and q~=GUI.GetPlayerID()then return end;if self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomActivated,q)end;self.ExtendedZoomActive=false;Camera.RTS_SetZoomFactor(0.500000)Camera.RTS_SetZoomFactorMax(0.500001)Camera.RTS_SetZoomFactorMin(0.099999)end;RegisterModule(Lib.Camera.Name)Lib.UIEffects=Lib.UIEffects or{}Lib.UIEffects.Name="UIEffects"Lib.UIEffects.CinematicEvents={}Lib.UIEffects.Global={CinematicEventID=0,CinematicEventStatus={},CinematicEventQueue={},TypewriterEventData={},TypewriterEventCounter=0}Lib.UIEffects.Local={CinematicEventStatus={},ChatOptionsWasShown=false,MessageLogWasShown=false,PauseScreenShown=false,NormalModeHidden=false}CinematicEventTypes={}CinematicEventState={NotTriggered=0,Active=1,Concluded=2}Lib.Require("core/Core")Lib.Require("module/settings/Camera")Lib.Require("module/ui/UIEffects_API")Lib.Register("module/ui/UIEffects")function Lib.UIEffects.Global:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}self.CinematicEventQueue[f]={}end;RequestHiResJob(function()Lib.UIEffects.Global:ControlTypewriter()end)Lib.UIEffects.Local=nil end;self.IsInstalled=true end;function Lib.UIEffects.Global:OnSaveGameLoaded()end;function Lib.UIEffects.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1;DeactivateImageScreen(arg[2])ActivateNormalInterface(arg[2])elseif aF==Report.CinematicConcluded then if self.CinematicEventStatus[arg[2]][arg[1]]then self.CinematicEventStatus[arg[2]][arg[1]]=2 end;if#self.CinematicEventQueue[arg[2]]>0 then ActivateImageScreen(arg[2],"",0,0,0,255)DeactivateNormalInterface(arg[2])end end end;function Lib.UIEffects.Global:PushCinematicEventToQueue(q,i,r,gy)table.insert(self.CinematicEventQueue[q],{i,r,gy})end;function Lib.UIEffects.Global:LookUpCinematicInQueue(q)if#self.CinematicEventQueue[q]>0 then return self.CinematicEventQueue[q][1]end end;function Lib.UIEffects.Global:PopCinematicEventFromQueue(q)if#self.CinematicEventQueue[q]>0 then return table.remove(self.CinematicEventQueue[q],1)end end;function Lib.UIEffects.Global:GetNewCinematicEventID()self.CinematicEventID=self.CinematicEventID+1;return self.CinematicEventID end;function Lib.UIEffects.Global:GetCinematicEventStatus(gH)for f=1,8 do if self.CinematicEventStatus[f][gH]then return self.CinematicEventStatus[f][gH]end end;return 0 end;function Lib.UIEffects.Global:ActivateCinematicEvent(q)local an=self:GetNewCinematicEventID()SendReport(Report.CinematicActivated,an,q)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicActivated, %d, %d);
          if GUI.GetPlayerID() == %d then
            Lib.UIEffects.Local.SavingWasDisabled = Lib.Core.Save.SavingDisabled == true;
            DisableSaving(true);
          end]],an,q,q))return an end;function Lib.UIEffects.Global:ConcludeCinematicEvent(aF,q)SendReport(Report.CinematicConcluded,aF,q)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicConcluded, %d, %d);
          if GUI.GetPlayerID() == %d then
            if not Lib.UIEffects.Local.SavingWasDisabled then
                DisableSaving(false);
            end
            Lib.UIEffects.Local.SavingWasDisabled = false;
          end]],aF,q,q))end;function Lib.UIEffects.Global:StartTypewriter(gy)self.TypewriterEventCounter=self.TypewriterEventCounter+1;local gI="CinematicEvent_Typewriter"..self.TypewriterEventCounter;gy.Name=gI;if not self.LoadscreenClosed or IsCinematicEventActive(gy.PlayerID)then Lib.UIEffects.Global:PushCinematicEventToQueue(gy.PlayerID,CinematicEventTypes.Typewriter,gI,gy)return gy.Name end;return self:PlayTypewriter(gy)end;function Lib.UIEffects.Global:PlayTypewriter(gy)local an=StartCinematicEvent(gy.Name,gy.PlayerID)gy.ID=an;gy.TextTokens=self:TokenizeText(gy)self.TypewriterEventData[gy.PlayerID]=gy;ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            ActivateImageScreen(GUI.GetPlayerID(), "%s", %d, %d, %d, %d)
            DeactivateNormalInterface(GUI.GetPlayerID())
            DeactivateBorderScroll(GUI.GetPlayerID(), %d)
            Input.CutsceneMode()
            GUI.ClearNotes()
        end
        ]],gy.PlayerID,gy.Image,gy.Color.R or 0,gy.Color.G or 0,gy.Color.B or 0,gy.Color.A or 255,gy.TargetEntity)SendReport(Report.TypewriterStarted,gy.PlayerID,gy.Name)SendReportToLocal(Report.TypewriterStarted,gy.PlayerID,gy.Name)return gy.Name end;function Lib.UIEffects.Global:FinishTypewriter(q)if self.TypewriterEventData[q]then local gJ=table.copy(self.TypewriterEventData[q])local gK=self.TypewriterEventData[q].PlayerID;ExecuteLocal([[
            if GUI.GetPlayerID() == %d then
                ResetRenderDistance()
                DeactivateImageScreen(GUI.GetPlayerID())
                ActivateNormalInterface(GUI.GetPlayerID())
                ActivateBorderScroll(GUI.GetPlayerID())
                if ModuleGuiControl then
                    Lib.UITools.Widget:UpdateHiddenWidgets()
                end
                Input.GameMode()
                GUI.ClearNotes()
            end
        ]],q)SendReport(Report.TypewriterEnded,gK,gJ.Name)SendReportToLocal(Report.TypewriterEnded,gK,gJ.Name)self.TypewriterEventData[q]:Callback()FinishCinematicEvent(gJ.Name,gK)self.TypewriterEventData[q]=nil end end;function Lib.UIEffects.Global:TokenizeText(gy)local gL={}local gM={}local ba=ConvertPlaceholders(Localize(gy.Text))ba=ba:gsub("%s+"," ")while true do local dO,dP=ba:find("{")local dQ,dR=ba:find("}")if not dO or not dQ then table.insert(gM,ba)break end;if dO>1 then table.insert(gM,ba:sub(1,dO-1))end;table.insert(gM,ba:sub(dO,dR))ba=ba:sub(dR+1)end;local gN=false;for f=1,#gM,1 do if gM[f]:find("{")then local dW=#gL;if gN then gL[dW]=gL[dW]..gM[f]else table.insert(gL,dW+1,gM[f])end;gN=true else local dW=1;while dW<=#gM[f]do if string.byte(gM[f]:sub(dW,dW))==195 then table.insert(gL,gM[f]:sub(dW,dW+1))dW=dW+1 else table.insert(gL,gM[f]:sub(dW,dW))end;dW=dW+1 end;gN=false end end;return gL end;function Lib.UIEffects.Global:ControlTypewriter()for f=1,8 do if self.LoadscreenClosed and not IsCinematicEventActive(f)then local gO=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if gO and gO[1]==CinematicEventTypes.Typewriter then local b5=Lib.UIEffects.Global:PopCinematicEventFromQueue(f)self:PlayTypewriter(b5[3])end end end;for g,h in pairs(self.TypewriterEventData)do if self.TypewriterEventData[g].Delay>0 then self.TypewriterEventData[g].Delay=self.TypewriterEventData[g].Delay-1;ExecuteLocal([[if GUI.GetPlayerID() == %d then GUI.ClearNotes() end]],self.TypewriterEventData[g].PlayerID)end;if self.TypewriterEventData[g].Delay==0 then self.TypewriterEventData[g].Index=h.Index+h.CharSpeed;if h.Index>#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Index=#self.TypewriterEventData[g].TextTokens end;local dW=math.floor(h.Index+0.5)local ba=""for f=1,dW,1 do ba=ba..self.TypewriterEventData[g].TextTokens[f]end;ExecuteLocal([[
                if GUI.GetPlayerID() == %d then
                    GUI.ClearNotes()
                    GUI.AddNote("%s")
                end
                ]],self.TypewriterEventData[g].PlayerID,ba)if dW==#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Waittime=h.Waittime-1;if h.Waittime<=0 then self:FinishTypewriter(g)end end end end end;function Lib.UIEffects.Local:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}end;self:OverrideInterfaceUpdateForCinematicMode()self:OverrideInterfaceThroneroomForCinematicMode()Lib.UIEffects.Global=nil end;self.IsInstalled=true end;function Lib.UIEffects.Local:OnSaveGameLoaded()end;function Lib.UIEffects.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1 elseif aF==Report.CinematicConcluded then for f=1,8 do if self.CinematicEventStatus[f][arg[1]]then self.CinematicEventStatus[f][arg[1]]=2 end end end end;function Lib.UIEffects.Local:GetCinematicEventStatus(gH)for f=1,8 do if self.CinematicEventStatus[f][gH]then return self.CinematicEventStatus[f][gH]end end;return 0 end;function Lib.UIEffects.Local:OverrideInterfaceUpdateForCinematicMode()GameCallback_GameSpeedChanged_Orig_UIEffects=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(fP)if not Lib.UIEffects.Local.PauseScreenShown then GameCallback_GameSpeedChanged_Orig_UIEffects(fP)end end;MissionTimerUpdate_Orig_UIEffects=MissionTimerUpdate;MissionTimerUpdate=function()MissionTimerUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)end end;MissionGoodOrEntityCounterUpdate_Orig_UIEffects=MissionGoodOrEntityCounterUpdate;MissionGoodOrEntityCounterUpdate=function()MissionGoodOrEntityCounterUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)end end;MerchantButtonsUpdater_Orig_UIEffects=GUI_Merchant.ButtonsUpdater;GUI_Merchant.ButtonsUpdater=function()MerchantButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)end end;if GUI_Tradepost then TradepostButtonsUpdater_Orig_UIEffects=GUI_Tradepost.ButtonsUpdater;GUI_Tradepost.ButtonsUpdater=function()TradepostButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end end end end;function Lib.UIEffects.Local:OverrideInterfaceThroneroomForCinematicMode()GameCallback_Camera_StartButtonPressed=function(q)end;OnStartButtonPressed=function()GameCallback_Camera_StartButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_BackButtonPressed=function(q)end;OnBackButtonPressed=function()GameCallback_Camera_BackButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_SkipButtonPressed=function(q)end;OnSkipButtonPressed=function()GameCallback_Camera_SkipButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_ThroneRoomLeftClick=function(q)end;ThroneRoomLeftClick=function()GameCallback_Camera_ThroneRoomLeftClick(GUI.GetPlayerID())end;GameCallback_Camera_ThroneroomCameraControl=function(q)end;ThroneRoomCameraControl=function()GameCallback_Camera_ThroneroomCameraControl(GUI.GetPlayerID())end end;function Lib.UIEffects.Local:InterfaceActivateImageBackground(q,gP,gQ,_G,gR,gS)if q~=GUI.GetPlayerID()or self.PauseScreenShown then return end;self.PauseScreenShown=true;XGUIEng.PushPage("/InGame/Root/Normal/PauseScreen",false)XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",1)if gP and gP~=""then local gT={GUI.GetScreenSize()}local fW,fY,fX,fZ=0,0,1,1;if gT[1]/gT[2]<1.6 then fW=fW+fW/0.125;fX=fX-fX*0.125 end;XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,gP)XGUIEng.SetMaterialUV("/InGame/Root/Normal/PauseScreen",0,fW,fY,fX,fZ)end;XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,gQ,_G,gR,gS)SendReportToGlobal(Report.ImageScreenShown,q)SendReport(Report.ImageScreenShown,q)end;function Lib.UIEffects.Local:InterfaceDeactivateImageBackground(q)if q~=GUI.GetPlayerID()or not self.PauseScreenShown then return end;self.PauseScreenShown=false;XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",0)XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,"")XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,40,40,40,180)XGUIEng.PopPage()SendReportToGlobal(Report.ImageScreenHidden,q)SendReport(Report.ImageScreenHidden,q)end;function Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(q)if GUI.GetPlayerID()~=q or self.NormalModeHidden then return end;self.NormalModeHidden=true;XGUIEng.PushPage("/InGame/Root/Normal/NotesWindow",false)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",0)XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)HideOtherMenus()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/AlignTopLeft/GameClock")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClockWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/ChatOptions/Background")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)self.ChatOptionsWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/MessageLog/Name")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)self.MessageLogWasShown=true end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end;SendReportToGlobal(Report.GameInterfaceHidden,GUI.GetPlayerID())SendReport(Report.GameInterfaceHidden,GUI.GetPlayerID())end;function Lib.UIEffects.Local:InterfaceActivateNormalInterface(q)if GUI.GetPlayerID()~=q or not self.NormalModeHidden then return end;self.NormalModeHidden=false;XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",1)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",1)XGUIEng.PopPage()if g_MissionTimerEndTime then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",1)end;if g_MissionGoodOrEntityCounterAmountToReach then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",1)end;if self.GameClockWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClockWasShown=false end;if self.ChatOptionsWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.ChatOptionsWasShown=false end;if self.MessageLogWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)self.MessageLogWasShown=false end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",1)end;SendReportToGlobal(Report.GameInterfaceShown,GUI.GetPlayerID())SendReport(Report.GameInterfaceShown,GUI.GetPlayerID())end;RegisterModule(Lib.UIEffects.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_API")function AddBuildingButtonAtPosition(gU,gV,gW,gX,gY)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local gZ=this:AddButtonBinding(0,gU,gV,gW,gX,gY)Lib.UIBuilding.ReleaseContext()return gZ end;API.AddBuildingButtonAtPosition=AddBuildingButtonAtPosition;function AddBuildingButton(gW,gX,gY)return AddBuildingButtonAtPosition(nil,nil,gW,gX,gY)end;API.AddBuildingButton=AddBuildingButton;function AddBuildingButtonByTypeAtPosition(i,gU,gV,gW,gX,gY)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local gZ=this:AddButtonBinding(i,gU,gV,gW,gX,gY)Lib.UIBuilding.ReleaseContext()return gZ end;API.AddBuildingButtonByTypeAtPosition=AddBuildingButtonByTypeAtPosition;function AddBuildingButtonByType(i,gW,gX,gY)return AddBuildingButtonByTypeAtPosition(i,nil,nil,gW,gX,gY)end;API.AddBuildingButtonByType=AddBuildingButtonByType;function AddBuildingButtonByEntityAtPosition(d6,gU,gV,gW,gX,gY)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local gZ=this:AddButtonBinding(d6,gU,gV,gW,gX,gY)Lib.UIBuilding.ReleaseContext()return gZ end;API.AddBuildingButtonByEntityAtPosition=AddBuildingButtonByEntityAtPosition;function AddBuildingButtonByEntity(d6,gW,gX,gY)return AddBuildingButtonByEntityAtPosition(d6,nil,nil,gW,gX,gY)end;API.AddBuildingButtonByEntity=AddBuildingButtonByEntity;function DropBuildingButton(aF)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(0,aF)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButton=DropBuildingButton;function DropBuildingButtonFromType(i,aF)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(i,aF)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButtonFromType=DropBuildingButtonFromType;function DropBuildingButtonFromEntity(d6,aF)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(d6,aF)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButtonFromEntity=DropBuildingButtonFromEntity;Lib.UIBuilding=Lib.UIBuilding or{}Lib.UIBuilding.Name="UIBuilding"Lib.UIBuilding.CinematicEvents={}Lib.UIBuilding.Global={}Lib.UIBuilding.Local={BuildingButtons={BindingCounter=0,Bindings={},Configuration={["BuyAmmunitionCart"]={TypeExclusion="^B_.*StoreHouse",OriginalPosition=nil,Bind=nil},["BuyBattallion"]={TypeExclusion="^B_[CB]a[sr][tr][la][ec]",OriginalPosition=nil,Bind=nil},["PlaceField"]={TypeExclusion="^B_.*[BFH][aei][erv][kme]",OriginalPosition=nil,Bind=nil},["StartFestival"]={TypeExclusion="^B_Marketplace",OriginalPosition=nil,Bind=nil},["StartTheatrePlay"]={TypeExclusion="^B_Theatre",OriginalPosition=nil,Bind=nil},["UpgradeTurret"]={TypeExclusion="^B_WallTurret",OriginalPosition=nil,Bind=nil},["BuyBatteringRamCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuyCatapultCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuySiegeTowerCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil}}}}Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding_API")Lib.Register("module/ui/UIBuilding")function Lib.UIBuilding.Global:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")end;self.IsInstalled=true end;function Lib.UIBuilding.Global:OnSaveGameLoaded()end;function Lib.UIBuilding.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.StartUpgradeClicked then SendReportToLocal(aF,unpack(arg))elseif aF==Report.CancelUpgradeClicked then SendReportToLocal(aF,unpack(arg))elseif aF==Report.FestivalClicked then SendReportToLocal(aF,unpack(arg))elseif aF==Report.SermonClicked then SendReportToLocal(aF,unpack(arg))elseif aF==Report.TheatrePlayClicked then SendReportToLocal(aF,unpack(arg))end end;function Lib.UIBuilding.Local:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self:InitBackupPositions()self:OverrideOnSelectionChanged()self:OverrideBuyAmmunitionCart()self:OverrideBuyBattalion()self:OverrideBuySiegeEngineCart()self:OverridePlaceField()self:OverrideStartFestival()self:OverrideStartTheatrePlay()self:OverrideUpgradeTurret()self:OverrideUpgradeBuilding()self:OverrideStartSermon()end;self.IsInstalled=true end;function Lib.UIBuilding.Local:OnSaveGameLoaded()end;function Lib.UIBuilding.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UIBuilding.Local:OverrideOnSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.UIBuilding.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.UIBuilding.Local:UnbindButtons()Lib.UIBuilding.Local:BindButtons(GUI.GetSelectedEntity())end end;function Lib.UIBuilding.Local:OverrideBuyAmmunitionCart()self.Orig_BuyAmmunitionCartClicked=GUI_BuildingButtons.BuyAmmunitionCartClicked;GUI_BuildingButtons.BuyAmmunitionCartClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartClicked()end;gZ.Action(g_,B)end;Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate=GUI_BuildingButtons.BuyAmmunitionCartUpdate;GUI_BuildingButtons.BuyAmmunitionCartUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then SetIcon(g_,{10,4})XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideBuyBattalion()self.Orig_BuyBattalionClicked=GUI_BuildingButtons.BuyBattalionClicked;GUI_BuildingButtons.BuyBattalionClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_BuyBattalionClicked()end;gZ.Action(g_,B)end;self.Orig_BuyBattalionMouseOver=GUI_BuildingButtons.BuyBattalionMouseOver;GUI_BuildingButtons.BuyBattalionMouseOver=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ;if Lib.UIBuilding.Local.BuildingButtons.Configuration[eL]then gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind end;if not gZ then return Lib.UIBuilding.Local.Orig_BuyBattalionMouseOver()end;gZ.Tooltip(g_,B)end;self.Orig_BuyBattalionUpdate=GUI_BuildingButtons.BuyBattalionUpdate;GUI_BuildingButtons.BuyBattalionUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_BuyBattalionUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverridePlaceField()self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_PlaceFieldClicked()end;gZ.Action(g_,B)end;self.Orig_PlaceFieldMouseOver=GUI_BuildingButtons.PlaceFieldMouseOver;GUI_BuildingButtons.PlaceFieldMouseOver=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_PlaceFieldMouseOver()end;gZ.Tooltip(g_,B)end;self.Orig_PlaceFieldUpdate=GUI_BuildingButtons.PlaceFieldUpdate;GUI_BuildingButtons.PlaceFieldUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_PlaceFieldUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideStartFestival()self.Orig_StartKnightsPromotionCelebration=StartKnightsPromotionCelebration;StartKnightsPromotionCelebration=function(q,h0,h1)Lib.UIBuilding.Local.Orig_StartKnightsPromotionCelebration(q,h0,h1)SendReportToGlobal(Report.FestivalClicked,q,1)end;GUI_BuildingButtons.StartFestivalClicked=function(h2)local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then local n=GUI.GetPlayerID()local gi={Logic.GetFestivalCost(n,h2)}local h3,h4=AreCostsAffordable(gi)if B~=Logic.GetMarketplace(n)then return end;if h3==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartFestival(n,h2)StartEventMusic(MusicSystem.EventFestivalMusic,n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightSong)GUI.AddBuff(Buffs.Buff_Festival)SendReportToGlobal(Report.FestivalClicked,n,0)else Message(h4)end;return end;gZ.Action(g_,B)end;self.Orig_StartFestivalMouseOver=GUI_BuildingButtons.StartFestivalMouseOver;GUI_BuildingButtons.StartFestivalMouseOver=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_StartFestivalMouseOver()end;gZ.Tooltip(g_,B)end;self.Orig_StartFestivalUpdate=GUI_BuildingButtons.StartFestivalUpdate;GUI_BuildingButtons.StartFestivalUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then SetIcon(g_,{4,15})XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_StartFestivalUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideStartTheatrePlay()GUI_BuildingButtons.StartTheatrePlayClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then local n=GUI.GetPlayerID()local b4=Logic.GetGoodTypeOnOutStockByIndex(B,0)local bU=Logic.GetMaxAmountOnStock(B)local gi={b4,bU}local h3,h4=AreCostsAffordable(gi)if Logic.CanStartTheatrePlay(B)==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartTheatrePlay(B)SendReportToGlobal(Report.TheatrePlayClicked,n)elseif h3==false then Message(h4)end;return end;gZ.Action(g_,B)end;self.Orig_StartTheatrePlayMouseOver=GUI_BuildingButtons.StartTheatrePlayMouseOver;GUI_BuildingButtons.StartTheatrePlayMouseOver=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_StartTheatrePlayMouseOver()end;gZ.Tooltip(g_,B)end;self.Orig_StartTheatrePlayUpdate=GUI_BuildingButtons.StartTheatrePlayUpdate;GUI_BuildingButtons.StartTheatrePlayUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then SetIcon(g_,{16,2})XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_StartTheatrePlayUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeTurret()self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_UpgradeTurretClicked()end;gZ.Action(g_,B)end;self.Orig_UpgradeTurretMouseOver=GUI_BuildingButtons.UpgradeTurretMouseOver;GUI_BuildingButtons.UpgradeTurretMouseOver=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then return Lib.UIBuilding.Local.Orig_UpgradeTurretMouseOver()end;gZ.Tooltip(g_,B)end;self.Orig_UpgradeTurretUpdate=GUI_BuildingButtons.UpgradeTurretUpdate;GUI_BuildingButtons.UpgradeTurretUpdate=function()local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind;if not gZ then XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_UpgradeTurretUpdate()end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideBuySiegeEngineCart()self.Orig_BuySiegeEngineCartClicked=GUI_BuildingButtons.BuySiegeEngineCartClicked;GUI_BuildingButtons.BuySiegeEngineCartClicked=function(h5)local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ;if eL=="BuyCatapultCart"or eL=="BuySiegeTowerCart"or eL=="BuyBatteringRamCart"then gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind end;if not gZ then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartClicked(h5)end;gZ.Action(g_,B)end;self.Orig_BuySiegeEngineCartMouseOver=GUI_BuildingButtons.BuySiegeEngineCartMouseOver;GUI_BuildingButtons.BuySiegeEngineCartMouseOver=function(h5,h6)local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ;if eL=="BuyCatapultCart"or eL=="BuySiegeTowerCart"or eL=="BuyBatteringRamCart"then gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind end;if not gZ then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartMouseOver(h5,h6)end;gZ.Tooltip(g_,B)end;self.Orig_BuySiegeEngineCartUpdate=GUI_BuildingButtons.BuySiegeEngineCartUpdate;GUI_BuildingButtons.BuySiegeEngineCartUpdate=function(h5)local g_=XGUIEng.GetCurrentWidgetID()local eL=XGUIEng.GetWidgetNameByID(g_)local B=GUI.GetSelectedEntity()local gZ;if eL=="BuyCatapultCart"or eL=="BuySiegeTowerCart"or eL=="BuyBatteringRamCart"then gZ=Lib.UIBuilding.Local.BuildingButtons.Configuration[eL].Bind end;if not gZ then if eL=="BuyBatteringRamCart"then SetIcon(g_,{9,2})elseif eL=="BuySiegeTowerCart"then SetIcon(g_,{9,3})elseif eL=="BuyCatapultCart"then SetIcon(g_,{9,1})end;XGUIEng.ShowWidget(g_,1)XGUIEng.DisableButton(g_,0)return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartUpdate(h5)end;gZ.Update(g_,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeBuilding()GUI_BuildingButtons.UpgradeClicked=function()local g_=XGUIEng.GetCurrentWidgetID()local B=GUI.GetSelectedEntity()if Logic.CanCancelUpgradeBuilding(B)then Sound.FXPlay2DSound("ui\\menu_click")GUI.CancelBuildingUpgrade(B)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/BuildingButtons",1)SendReportToGlobal(Report.CancelUpgradeClickede,B,GUI.GetPlayerID())return end;local gi=GUI_BuildingButtons.GetUpgradeCosts()local h3,h4=AreCostsAffordable(gi)if h3==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.UpgradeBuilding(B,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightWisdom)if g_~=0 then SaveButtonPressed(g_)end;SendReportToGlobal(Report.StartUpgradeClicked,B,GUI.GetPlayerID())else Message(h4)end end end;function Lib.UIBuilding.Local:OverrideStartSermon()function GUI_BuildingButtons.StartSermonClicked()local n=GUI.GetPlayerID()if Logic.CanSermonBeActivated(n)then GUI.ActivateSermon(n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightHealing)GUI.AddBuff(Buffs.Buff_Sermon)local h7=Logic.GetCathedral(n)local I,J=Logic.GetEntityPosition(h7)local K=0;Sound.FXPlay3DSound("buildings\\building_start_sermon",I,J,K)SendReportToGlobal(Report.SermonClicked,GUI.GetPlayerID())end end end;function Lib.UIBuilding.Local:InitBackupPositions()for g,h in pairs(self.BuildingButtons.Configuration)do local I,J=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g)self.BuildingButtons.Configuration[g].OriginalPosition={I,J}end end;function Lib.UIBuilding.Local:GetButtonsForOverwrite(aF,aK)local h8={}local l=Logic.GetEntityType(aF)local h9=Logic.GetEntityTypeName(l)for g,h in pairs(self.BuildingButtons.Configuration)do if#h8==aK then break end;if not h9:find(h.TypeExclusion)then table.insert(h8,g)end end;assert(#h8==aK)table.sort(h8)return h8 end;function Lib.UIBuilding.Local:AddButtonBinding(i,gU,gV,ha,hb,hc)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;if#self.BuildingButtons.Bindings[i]<6 then self.BuildingButtons.BindingCounter=self.BuildingButtons.BindingCounter+1;table.insert(self.BuildingButtons.Bindings[i],{ID=self.BuildingButtons.BindingCounter,Position={gU,gV},Action=ha,Tooltip=hb,Update=hc})return self.BuildingButtons.BindingCounter end;return 0 end;function Lib.UIBuilding.Local:RemoveButtonBinding(i,aF)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;for f=#self.BuildingButtons.Bindings[i],1,-1 do if self.BuildingButtons.Bindings[i][f].ID==aF then table.remove(self.BuildingButtons.Bindings[i],f)end end end;function Lib.UIBuilding.Local:BindButtons(aF)if aF==nil or aF==0 or Logic.IsBuilding(aF)==0 and not Logic.IsWall(aF)then return self:UnbindButtons()end;local Name=Logic.GetEntityName(aF)local l=Logic.GetEntityType(aF)local hd=self:GetButtonsForOverwrite(aF,6)local he={}if self.BuildingButtons.Bindings[Name]and#self.BuildingButtons.Bindings[Name]>0 then for f=1,#self.BuildingButtons.Bindings[Name]do table.insert(he,self.BuildingButtons.Bindings[Name][f])end end;if self.BuildingButtons.Bindings[l]and#self.BuildingButtons.Bindings[l]>0 then for f=1,#self.BuildingButtons.Bindings[l]do table.insert(he,self.BuildingButtons.Bindings[l][f])end end;if self.BuildingButtons.Bindings[0]and#self.BuildingButtons.Bindings[0]>0 then for f=1,#self.BuildingButtons.Bindings[0]do table.insert(he,self.BuildingButtons.Bindings[0][f])end end;for f=1,#he do if f>6 then break end;local hf=hd[f]self.BuildingButtons.Configuration[hf].Bind=he[f]XGUIEng.ShowWidget("/InGame/Root/Normal/BuildingButtons/"..hf,1)XGUIEng.DisableButton("/InGame/Root/Normal/BuildingButtons/"..hf,0)local ej=he[f].Position[1]local ek=he[f].Position[2]if not ej or not ek then local hg={15,296}ej=hg[1]+64*(f-1)ek=hg[2]end;XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..hf,ej,ek)end end;function Lib.UIBuilding.Local:UnbindButtons()for g,h in pairs(self.BuildingButtons.Configuration)do local V=self.BuildingButtons.Configuration[g].OriginalPosition;if V then XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g,V[1],V[2])end;self.BuildingButtons.Configuration[g].Bind=nil end end;RegisterModule(Lib.UIBuilding.Name)Lib.Register("module/city/Construction_Text")Lib.Construction=Lib.Construction or{}Lib.Construction.Text={NoKnockdown={de="Das kann nicht abgerissen werden!",en="This cannot be demolished!",fr="Cela ne peut pas être démoli!"},NoRoad={de="Straßen sind hier nicht möglich!",en="Roads are not possible here!",fr="Les routes ne sont pas possibles ici!"},NoWall={de="Befästigungen sind hier nicht möglich!",en="Ramparts are not possible here!",fr="Les confirmations ne sont pas possibles ici!"},NoWallGate={de="Ein anderes Torhaus ist zu nah!",en="Another gatehouse is too close!",fr="Une autre guérite est trop proche!"},NoBallista={de="Zu nahe an anderem Mauerkatapult!",en="To close to another ballista!",fr="A rapprocher d'une autre baliste!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/Construction_API")function CustomRuleConstructBuilding(q,hh,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructBuilding(q,hh,unpack(arg))end;API.CustomRuleConstructBuilding=CustomRuleConstructBuilding;function CustomRuleConstructRoad(q,hh,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructRoad(q,hh,unpack(arg))end;API.CustomRuleConstructRoad=CustomRuleConstructRoad;function CustomRuleConstructWall(q,hh,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructWall(q,hh,unpack(arg))end;API.CustomRuleConstructWall=CustomRuleConstructWall;function CustomRuleKnockdownBuilding(q,hh,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleKnockdownBuilding(q,hh,unpack(arg))end;API.CustomRuleKnockdownBuilding=CustomRuleKnockdownBuilding;function WhitelistConstructTypeInArea(q,i,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInArea(q,i,gU,gV,hi)end;API.WhitelistConstructTypeInArea=WhitelistConstructTypeInArea;function WhitelistConstructCategoryInArea(q,bf,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInArea(q,bf,gU,gV,hi)end;API.WhitelistConstructCategoryInArea=WhitelistConstructCategoryInArea;function WhitelistConstructTypeInTerritory(q,i,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInTerritory(q,i,hj)end;API.WhitelistConstructTypeInTerritory=WhitelistConstructTypeInTerritory;function WhitelistConstructCategoryInTerritory(q,bf,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInTerritory(q,bf,hj)end;API.WhitelistConstructCategoryInTerritory=WhitelistConstructCategoryInTerritory;function BlacklistConstructTypeInArea(q,i,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInArea(q,i,gU,gV,hi)end;API.BlacklistConstructTypeInArea=BlacklistConstructTypeInArea;function BlacklistConstructCategoryInArea(q,bf,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInArea(q,bf,gU,gV,hi)end;API.BlacklistConstructCategoryInArea=BlacklistConstructCategoryInArea;function BlacklistConstructTypeInTerritory(q,i,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInTerritory(q,i,hj)end;API.BlacklistConstructTypeInTerritory=BlacklistConstructTypeInTerritory;function BlacklistConstructCategoryInTerritory(q,bf,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInTerritory(q,bf,hj)end;API.BlacklistConstructCategoryInTerritory=BlacklistConstructCategoryInTerritory;function WhitelistConstructRoadInArea(q,hk,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInArea(q,hk,gU,gV,hi)end;API.WhitelistConstructRoadInArea=WhitelistConstructRoadInArea;function WhitelistConstructWallInArea(q,hl,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInArea(q,hl,gU,gV,hi)end;API.WhitelistConstructWallInArea=WhitelistConstructWallInArea;function WhitelistConstructRoadInTerritory(q,hk,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInTerritory(q,hk,hj)end;API.WhitelistConstructRoadInTerritory=WhitelistConstructRoadInTerritory;function WhitelistConstructWallInTerritory(q,hl,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInTerritory(q,hl,hj)end;API.WhitelistConstructWallInTerritory=WhitelistConstructWallInTerritory;function BlacklistConstructRoadInArea(q,hk,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInArea(q,hk,gU,gV,hi)end;API.BlacklistConstructRoadInArea=BlacklistConstructRoadInArea;function BlacklistConstructWallInArea(q,hl,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInArea(q,hl,gU,gV,hi)end;API.BlacklistConstructWallInArea=BlacklistConstructWallInArea;function BlacklistConstructRoadInTerritory(q,hk,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInTerritory(q,hk,hj)end;API.BlacklistConstructRoadInTerritory=BlacklistConstructRoadInTerritory;function BlacklistConstructWallInTerritory(q,hl,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInTerritory(q,hl,hj)end;API.BlacklistConstructWallInTerritory=BlacklistConstructWallInTerritory;function WhitelistKnockdownTypeInArea(q,i,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInArea(q,i,gU,gV,hi)end;API.WhitelistKnockdownTypeInArea=WhitelistKnockdownTypeInArea;function WhitelistKnockdownCategoryInArea(q,bf,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInArea(q,bf,gU,gV,hi)end;API.WhitelistKnockdownCategoryInArea=WhitelistKnockdownCategoryInArea;function WhitelistKnockdownTypeInTerritory(q,i,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(q,i,hj)end;API.WhitelistKnockdownTypeInTerritory=WhitelistKnockdownTypeInTerritory;function WhitelistKnockdownCategoryInTerritory(q,bf,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(q,bf,hj)end;API.WhitelistKnockdownCategoryInTerritory=WhitelistKnockdownCategoryInTerritory;function BlacklistKnockdownTypeInArea(q,i,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInArea(q,i,gU,gV,hi)end;API.BlacklistKnockdownTypeInArea=BlacklistKnockdownTypeInArea;function BlacklistKnockdownCategoryInArea(q,bf,gU,gV,hi)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInArea(q,bf,gU,gV,hi)end;API.BlacklistKnockdownCategoryInArea=BlacklistKnockdownCategoryInArea;function BlacklistKnockdownTypeInTerritory(q,i,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(q,i,hj)end;API.BlacklistKnockdownTypeInTerritory=BlacklistKnockdownTypeInTerritory;function BlacklistKnockdownCategoryInTerritory(q,bf,hj)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(q,bf,hj)end;API.BlacklistKnockdownCategoryInTerritory=BlacklistKnockdownCategoryInTerritory;Lib.Construction=Lib.Construction or{}Lib.Construction.Name="Construction"Lib.Construction.Global={Construction={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Construction.Local={Construction={Restriction={BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={LastSelectedBuildingType=0,LastSelectedRoadType=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Require("comfort/GetCategoriesOfType")Lib.Require("comfort/GetDistance")Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/city/Construction_API")Lib.Require("module/city/Construction_Text")Lib.Register("module/city/Construction")function Lib.Construction.Global:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;Lib.Construction.Local=nil end;self.IsInstalled=true end;function Lib.Construction.Global:OnSaveGameLoaded()end;function Lib.Construction.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Global:WhitelistConstructTypeInArea(q,i,gU,gV,hi)return self:ListConstructArea("BuildingAreaWhitelist",q,i,nil,gU,gV,hi)end;function Lib.Construction.Global:WhitelistConstructCategoryInArea(q,bf,gU,gV,hi)return self:ListConstructArea("BuildingCateWhitelist",q,nil,bf,gU,gV,hi)end;function Lib.Construction.Global:WhitelistConstructTypeInTerritory(q,i,hj)return self:ListConstructTerritory("BuildingTerritoryWhitelist",q,i,nil,hj)end;function Lib.Construction.Global:WhitelistConstructCategoryInTerritory(q,bf,hj)return self:ListConstructTerritory("BuildingTerritoryWhitelist",q,nil,bf,hj)end;function Lib.Construction.Global:BlacklistConstructTypeInArea(q,i,gU,gV,hi)return self:ListConstructArea("BuildingAreaBlacklist",q,i,nil,gU,gV,hi)end;function Lib.Construction.Global:BlacklistConstructCategoryInArea(q,bf,gU,gV,hi)return self:ListConstructArea("BuildingAreaBlacklist",q,nil,bf,gU,gV,hi)end;function Lib.Construction.Global:BlacklistConstructTypeInTerritory(q,i,hj)return self:ListConstructTerritory("BuildingTerritoryBlacklist",q,i,nil,hj)end;function Lib.Construction.Global:BlacklistConstructCategoryInTerritory(q,bf,hj)return self:ListConstructTerritory("BuildingTerritoryBlacklist",q,nil,bf,hj)end;function Lib.Construction.Global:WhitelistConstructRoadInArea(q,hk,gU,gV,hi)return self:ListConstructArea("RoadAreaWhitelist",q,hk,nil,gU,gV,hi)end;function Lib.Construction.Global:WhitelistConstructWallInArea(q,hl,gU,gV,hi)return self:ListConstructArea("WallAreaWhitelist",q,hl,nil,gU,gV,hi)end;function Lib.Construction.Global:WhitelistConstructRoadInTerritory(q,hk,hj)return self:ListConstructTerritory("RoadTerritoryWhitelist",q,hk,nil,hj)end;function Lib.Construction.Global:WhitelistConstructWallInTerritory(q,hl,hj)return self:ListConstructTerritory("WallTerritoryWhitelist",q,hl,nil,hj)end;function Lib.Construction.Global:BlacklistConstructRoadInArea(q,hk,gU,gV,hi)return self:ListConstructArea("RoadAreaBlacklist",q,hk,nil,gU,gV,hi)end;function Lib.Construction.Global:BlacklistConstructWallInArea(q,hl,gU,gV,hi)return self:ListConstructArea("WallAreaBlacklist",q,hl,nil,gU,gV,hi)end;function Lib.Construction.Global:BlacklistConstructRoadInTerritory(q,hk,hj)return self:ListConstructTerritory("RoadTerritoryBlacklist",q,hk,nil,hj)end;function Lib.Construction.Global:BlacklistConstructWallInTerritory(q,hl,hj)return self:ListConstructTerritory("WallTerritoryBlacklist",q,hl,nil,hj)end;function Lib.Construction.Global:CustomRuleConstructBuilding(q,hh,...)return self:ListConstructCustom("BuildingCustomRule",q,hh,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructRoad(q,hh,...)return self:ListConstructCustom("RoadCustomRule",q,hh,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructWall(q,hh,...)return self:ListConstructCustom("WallCustomRule",q,hh,unpack(arg))end;function Lib.Construction.Global:ListConstructArea(a5,q,i,bf,gU,gV,hi)local an=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a5][q],{ID=an,Category=bf,Type=i,Center={X=gU,Y=gV},Area=hi})self:MirrorConstructionRestrictionsToLocalScript()return an end;function Lib.Construction.Global:ListConstructTerritory(a5,q,i,bf,hj)local an=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a5][q],{ID=an,Category=bf,Type=i,Territory=hj})self:MirrorConstructionRestrictionsToLocalScript()return an end;function Lib.Construction.Global:ListConstructCustom(a5,q,hm,...)local an=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a5][q],{ID=an,Function=hm,Arguments=arg})self:MirrorConstructionRestrictionsToLocalScript()return an end;function Lib.Construction.Global:GetNewRestrictionID()self.Construction.Restriction.Index=self.Construction.Restriction.Index+1;local dW=self.Construction.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Construction.Restriction.Index = %d]],dW)return dW end;function Lib.Construction.Global:MirrorConstructionRestrictionsToLocalScript()local hn=table.tostring(self.Construction.Restriction)ExecuteLocal([[Lib.Construction.Local.Construction.Restriction = %s]],hn)end;function Lib.Construction.Global:WhitelistKnockdownTypeInArea(q,i,gU,gV,hi)return self:ListKnockdownArea("BuildingAreaWhitelist",q,i,nil,gU,gV,hi)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInArea(q,bf,gU,gV,hi)return self:ListKnockdownArea("BuildingAreaWhitelist",q,nil,bf,gU,gV,hi)end;function Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(q,i,hj)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",q,i,nil,hj)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(q,bf,hj)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",q,nil,bf,hj)end;function Lib.Construction.Global:BlacklistKnockdownTypeInArea(q,i,gU,gV,hi)return self:ListKnockdownArea("BuildingAreaBlacklist",q,i,nil,gU,gV,hi)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInArea(q,bf,gU,gV,hi)return self:ListKnockdownArea("BuildingAreaBlacklist",q,nil,bf,gU,gV,hi)end;function Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(q,i,hj)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",q,i,nil,hj)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(q,bf,hj)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",q,nil,bf,hj)end;function Lib.Construction.Global:CustomRuleKnockdownBuilding(q,hh,...)return self:ListKnockdownCustom("BuildingCustomRule",q,hh,unpack(arg))end;function Lib.Construction.Global:ListKnockdownArea(a5,q,i,bf,gU,gV,hi)local an=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a5][q],{ID=an,Category=bf,Type=i,Center={X=gU,Y=gV},Area=hi})self:MirrorKnockdownRestrictionsToLocalScript()return an end;function Lib.Construction.Global:ListKnockdownTerritory(a5,q,i,bf,hj)local an=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a5][q],{ID=an,Category=bf,Type=i,Territory=hj})self:MirrorKnockdownRestrictionsToLocalScript()return an end;function Lib.Construction.Global:ListKnockdownCustom(a5,q,hm,...)local an=self:GetNewRestrictionID()table.insert(self.Knockdown.Restriction[a5][q],{ID=an,Function=hm,Arguments=arg})self:MirrorKnockdownRestrictionsToLocalScript()return an end;function Lib.Construction.Global:GetNewProtectionID()self.Knockdown.Restriction.Index=self.Knockdown.Restriction.Index+1;local dW=self.Knockdown.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction.Index = %d]],dW)return dW end;function Lib.Construction.Global:MirrorKnockdownRestrictionsToLocalScript()local hn=table.tostring(self.Knockdown.Restriction)ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction = %s]],hn)end;function Lib.Construction.Global:IsConstructionAllowed(q,i,gU,gV)local ho=Logic.GetTerritoryAtPosition(gU,gV)local j=GetCategoriesOfType(i)local hp=self.Construction.Restriction.BuildingTerritoryWhitelist[q]if#hp>0 then for g,h in pairs(hp)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==ho then return true end end;return false end;local hq=self.Construction.Restriction.BuildingAreaWhitelist[q]if#hq>0 then for g,h in pairs(hq)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=gU,Y=gV},h.Center)<=h.Area then return true end end;return false end;local hr=self.Construction.Restriction.BuildingTerritoryBlacklist[q]for g,h in pairs(hr)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==ho then return false end end;local hs=self.Construction.Restriction.BuildingAreaBlacklist[q]for g,h in pairs(hs)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=gU,Y=gV},h.Center)<=h.Area then return false end end;local ht=self.Construction.Restriction.BuildingCustomRule[q]for g,h in pairs(ht)do if _G[h.Function]and not _G[h.Function](q,i,gU,gV,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Global:OverwriteGameCallbacks()self.Orig_GameCallback_CanPlayerPlaceBuilding=GameCallback_CanPlayerPlaceBuilding;GameCallback_CanPlayerPlaceBuilding=function(q,i,gU,gV)if Lib.Construction.Global:IsConstructionAllowed(q,i,gU,gV)then return Lib.Construction.Global.Orig_GameCallback_CanPlayerPlaceBuilding(q,i,gU,gV)end;return false end end;function Lib.Construction.Local:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;self:OverrideBuildButtonClicked()self:OverridePlacementUpdate()Lib.Construction.Global=nil end;self.IsInstalled=true end;function Lib.Construction.Local:OnSaveGameLoaded()end;function Lib.Construction.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Local:IsKnockdownAllowed(q,ap,d7)local l=Logic.GetEntityType(ap)local I,J,K=Logic.EntityGetPos(ap)local ho=GetTerritoryUnderEntity(ap)local j=GetCategoriesOfType(l)local hp=self.Knockdown.Restriction.BuildingTerritoryWhitelist[q]if#hp>0 then for g,h in pairs(hp)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==ho then return true end end;return false end;local hq=self.Knockdown.Restriction.BuildingAreaWhitelist[q]if#hq>0 then for g,h in pairs(hq)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return true end end;return false end;local hr=self.Knockdown.Restriction.BuildingTerritoryBlacklist[q]for g,h in pairs(hr)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==ho then return false end end;local hs=self.Knockdown.Restriction.BuildingAreaBlacklist[q]for g,h in pairs(hs)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return false end end;local ht=self.Knockdown.Restriction.BuildingCustomRule[q]for g,h in pairs(ht)do if _G[h.Function]and not _G[h.Function](q,ap,I,J,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Local:OverwriteGameCallbacks()self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(hu,d7)local n=Logic.EntityGetPlayer(hu)if not Lib.Construction.Local:IsKnockdownAllowed(n,hu,d7)then Message(Localize(Lib.Construction.Text.NoKnockdown))GUI.CancelBuildingKnockDown(hu)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(hu,d7)end end;function Lib.Construction.Local:OverrideBuildButtonClicked()self.Orig_BuildClicked=GUI_Construction.BuildClicked;GUI_Construction.BuildClicked=function(hv)Lib.Construction.Local.LastSelectedBuildingType=hv;Lib.Construction.Local.Orig_BuildClicked(hv)end;self.Orig_BuildStreetClicked=GUI_Construction.BuildStreetClicked;GUI_Construction.BuildStreetClicked=function(hw)hw=hw~=nil and hw or false;Lib.Construction.Local.LastSelectedRoadType=hw;Lib.Construction.Local.Orig_BuildStreetClicked(hw)end;self.Orig_BuildWallClicked=GUI_Construction.BuildWallClicked;GUI_Construction.BuildWallClicked=function(hv)if hv==nil then hv=GetUpgradeCategoryForClimatezone("WallSegment")end;Lib.Construction.Local.LastSelectedBuildingType=hv;Lib.Construction.Local.Orig_BuildWallClicked(hv)end;self.Orig_BuildWallGateClicked=GUI_Construction.BuildWallGateClicked;GUI_Construction.BuildWallGateClicked=function(hv)if hv==nil then hv=GetUpgradeCategoryForClimatezone("WallGate")end;Lib.Construction.Local.LastSelectedBuildingType=hv;Lib.Construction.Local.Orig_BuildWallGateClicked(hv)end;self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local ep=Logic.GetEntityType(GUI.GetSelectedEntity())Lib.Construction.Local.LastSelectedBuildingType=ep;Lib.Construction.Local.Orig_PlaceFieldClicked()end end;function Lib.Construction.Local:OverridePlacementUpdate()self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged=GameCallBack_GUI_ConstructWallSegmentCountChanged;GameCallBack_GUI_ConstructWallSegmentCountChanged=function(hx,hy)self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged(hx,hy)Lib.Construction.Local:CancleConstructWallState(GUI.GetPlayerID(),hx,hy)end;self.Orig_GameCallBack_GUI_BuildRoadCostChanged=GameCallBack_GUI_BuildRoadCostChanged;GameCallBack_GUI_BuildRoadCostChanged=function(hz)self.Orig_GameCallBack_GUI_BuildRoadCostChanged(hz)Lib.Construction.Local:CancleConstructRoad(GUI.GetPlayerID(),hz)end;self.Orig_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()Lib.Construction.Local:CancleWallGatesToCloseToEachother(GUI.GetPlayerID())Lib.Construction.Local.Orig_PlacementUpdate()end;self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local B=GUI.GetSelectedEntity()local n=Logic.EntityGetPlayer(B)local I,J,K=Logic.EntityGetPos(B)if Lib.Construction.Local:AreOtherBallistasToCloseToPosition(n,I,J,2500)then Message(Localize(Lib.Construction.Text.NoBallista))return end;Lib.Construction.Local.Orig_UpgradeTurretClicked()end end;function Lib.Construction.Local:AreOtherBallistasToCloseToPosition(q,hA,hB,hC)local hD,hE=Logic.GetPlayerEntitiesInArea(q,Entities.U_MilitaryBallista_BuildingSite,hA,hB,hC,1)local hF,hG=Logic.GetPlayerEntitiesInArea(q,Entities.U_MilitaryBallista,hA,hB,hC,1)return hD>0 or hF>0 end;function Lib.Construction.Local:CancleConstructWallState(q,hx,hy)local hH=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType~=1 then local gi={Logic.GetCostForWall(hx,hy,StartTurretX,StartTurretY,EndTurretX,EndTurretY)}if hH==2 and gi[1]and gi[2]>0 then local I,J=GUI.Debug_GetMapPositionUnderMouse()local ho=Logic.GetTerritoryAtPosition(I or 1,J or 1)local hI=self.LastSelectedBuildingType;local hJ,l=Logic.GetBuildingTypesInUpgradeCategory(hI)local hK=Logic.IsEntityTypeInCategory(l,EntityCategories.Wall)==1;local hp=self.Construction.Restriction.WallTerritoryWhitelist[q]if hK and#hp>0 then for g,h in pairs(hp)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==ho then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==ho then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local hq=self.Construction.Restriction.WallAreaWhitelist[q]if hK and#hq>0 then for g,h in pairs(hp)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local hr=self.Construction.Restriction.WallTerritoryBlacklist[q]if hK then for g,h in pairs(hr)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==ho then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==ho then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local hs=self.Construction.Restriction.WallAreaBlacklist[q]if hK then for g,h in pairs(hs)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local ht=self.Construction.Restriction.WallCustomRule[q]for g,h in pairs(ht)do local hL=string.find(Logic.GetEntityTypeName(l),"B_Wall")~=nil;if _G[h.Function]and not _G[h.Function](q,hL,I,J,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleConstructRoad(q,hz)local hH=GUI.GetCurrentStateID()local I,J=GUI.Debug_GetMapPositionUnderMouse()local ho=Logic.GetTerritoryAtPosition(I or 1,J or 1)if g_Construction.CurrentPlacementType==1 then if hH==5 and hz>0 then local hM=not self.LastSelectedRoadType;local hp=self.Construction.Restriction.RoadTerritoryWhitelist[q]if#hp>0 then for g,h in pairs(hp)do if h.Type==hM and h.Territory==ho then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local hq=self.Construction.Restriction.RoadAreaWhitelist[q]if#hq>0 then for g,h in pairs(hq)do if h.Type==hM and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local hr=self.Construction.Restriction.RoadTerritoryBlacklist[q]for g,h in pairs(hr)do if h.Type==hM and h.Territory==ho then self:CancelState(g_Construction.CurrentPlacementType)return end end;local hs=self.Construction.Restriction.RoadAreaBlacklist[q]for g,h in pairs(hs)do if h.Type==hM and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end;local ht=self.Construction.Restriction.RoadCustomRule[q]for g,h in pairs(ht)do if _G[h.Function]and not _G[h.Function](q,hM,I,J,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleWallGatesToCloseToEachother(q)local hH=GUI.GetCurrentStateID()if hH==3 then local hN=Lib.Construction.Local.LastSelectedBuildingType;local Z,l=Logic.GetBuildingTypesInUpgradeCategory(hN)local hO=l==Entities.B_PalisadeGate and 1200 or 2350;local I,J=GUI.Debug_GetMapPositionUnderMouse()local hJ,an=Logic.GetPlayerEntitiesInArea(q,l,I,J,hO,1)if hJ>0 then self:CancelState(-1)end end end;function Lib.Construction.Local:CancelState(hP)local ba=Lib.Construction.Text.NoWall;if hP==1 then ba=Lib.Construction.Text.NoRoad elseif hP==-1 then ba=Lib.Construction.Text.NoWallGate end;Message(Localize(ba))GUI.CancelState()end;RegisterModule(Lib.Construction.Name)Lib.Register("module/entity/NPC_Behavior")function Goal_NPC(hQ,hR)return B_Goal_NPC:new(hQ,hR)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(b2,b3)if b2==0 then self.NPC=b3 elseif b2==1 then self.Hero=b3;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/NPC_API")function NpcCompose(gy)error(not IsLocalScript(),"NPC manipulated in local script.")error(type(gy)=="table","NPC must be a table.")error(gy.Name~=nil,"NPC needs a script name.")error(IsExisting(gy.Name),"Entity does not exist.")local hS=Lib.NPC.Global:GetNpc(gy.Name)error(hS==nil or not hS.Active,"NPC already active.")error(not gy.Type or(gy.Type>=1 or gy.Type<=4),"NPC type is invalid.")return Lib.NPC.Global:CreateNpc(gy)end;API.NpcCompose=NpcCompose;function NpcDispose(gy)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(gy.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(gy.Name)==nil,"NPC must first be composed.")Lib.NPC.Global:DestroyNpc(gy)end;API.NpcDispose=NpcDispose;function NpcUpdate(gy)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(gy.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(gy.Name)~=nil,"NPC must first be composed.")Lib.NPC.Global:UpdateNpc(gy)end;API.NpcUpdate=NpcUpdate;function NpcIsActive(gy)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(gy.Name),"Entity does not exist.")local hT=Lib.NPC.Global:GetNpc(gy.Name)error(hT~=nil,"NPC was not found.")if hT.Active==true then return GetInteger(gy.Name,CONST_SCRIPTING_VALUES.NPC)==6 end;return false end;API.NpcIsActive=NpcIsActive;function NpcTalkedTo(gy,hU,q)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(gy.Name),"Entity does not exist.")local hT=Lib.NPC.Global:GetNpc(gy.Name)error(hT~=nil,"NPC was not found.")local hV=hT.TalkedTo~=nil and hT.TalkedTo~=0;if hU and hV then hV=hT.TalkedTo==GetID(hU)end;if q and hV then hV=Logic.EntityGetPlayer(hT.TalkedTo)==q end;return hV end;API.NpcTalkedTo=NpcTalkedTo;Lib.NPC=Lib.NPC or{}Lib.NPC.Name="NPC"Lib.NPC.Global={Interactions={},NPC={},UseMarker=true}Lib.NPC.Local={}Lib.NPC.Text={StartConversation={de="Gespräch beginnen",en="Start conversation",fr="Commencer la conversation"}}CONST_LAST_NPC_INTERACTED=0;CONST_LAST_HERO_INTERACTED=0;Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/global/LookAt")Lib.Require("core/Core")Lib.Require("module/entity/NPC_API")Lib.Require("module/entity/NPC_Behavior")Lib.Register("module/entity/NPC")function Lib.NPC.Global:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()RequestHiResJob(function()if Logic.GetTime()>1 then Lib.NPC.Global:InteractionTriggerController()end end)RequestJob(function()Lib.NPC.Global:InteractableMarkerController()end)Lib.NPC.Local=nil end;self.IsInstalled=true end;function Lib.NPC.Global:OnSaveGameLoaded()end;function Lib.NPC.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]self.Interactions[arg[1]]=self.Interactions[arg[1]]or{}if self.Interactions[arg[1]][arg[2]]then if Logic.GetCurrentTurn()<=self.Interactions[arg[1]][arg[2]]+5 then return end end;self.Interactions[arg[1]][arg[2]]=Logic.GetCurrentTurn()self:PerformNpcInteraction(arg[3])end end;function Lib.NPC.Global:CreateNpc(gy)self.NPC[gy.Name]={Name=gy.Name,Active=true,Type=gy.Type or 1,Player=gy.Player or{1,2,3,4,5,6,7,8},WrongPlayerAction=gy.WrongPlayerAction,Hero=gy.Hero,WrongHeroAction=gy.WrongHeroAction,Distance=gy.Distance or 350,Condition=gy.Condition,Callback=gy.Callback,UseMarker=self.UseMarker==true,MarkerID=0}self:UpdateNpc(gy)return self.NPC[gy.Name]end;function Lib.NPC.Global:DestroyNpc(gy)gy.Active=false;self:UpdateNpc(gy)self:DestroyMarker(gy.Name)self.NPC[gy.Name]=nil end;function Lib.NPC.Global:GetNpc(d6)return self.NPC[d6]end;function Lib.NPC.Global:UpdateNpc(gy)if not IsExisting(gy.Name)then return end;if not self.NPC[gy.Name]then local B=GetID(gy.Name)Logic.SetOnScreenInformation(B,0)return end;for g,h in pairs(gy)do self.NPC[gy.Name][g]=h end;self:CreateMarker(gy.Name)if self.NPC[gy.Name].Active then local B=GetID(gy.Name)Logic.SetOnScreenInformation(B,self.NPC[gy.Name].Type)else local B=GetID(gy.Name)Logic.SetOnScreenInformation(B,0)end end;function Lib.NPC.Global:PerformNpcInteraction(q)local aO=Logic.GetEntityName(CONST_LAST_NPC_INTERACTED)if self.NPC[aO]then local b5=self.NPC[aO]self:RotateActorsToEachother(q)self:AdjustHeroTalkingDistance(b5.Distance)if not self:InteractionIsAppropriatePlayer(aO,q,CONST_LAST_HERO_INTERACTED)then return end;b5.TalkedTo=CONST_LAST_HERO_INTERACTED;if not self:InteractionIsAppropriateHero(aO)then return end;if b5.Condition==nil or b5:Condition(q,CONST_LAST_HERO_INTERACTED)then b5.Active=false;if b5.Callback then b5:Callback(q,CONST_LAST_HERO_INTERACTED)end else b5.TalkedTo=0 end;self:UpdateNpc(b5)end end;function Lib.NPC.Global:InteractionIsAppropriatePlayer(d6,q,hW)local hX=true;if self.NPC[d6]then local b5=self.NPC[d6]if b5.Player~=nil then if type(b5.Player)=="table"then hX=table.contains(b5.Player,q)else hX=b5.Player==q end;if not hX then local hY=(b5.WrongHeroTick or 0)+1;local hZ=Logic.GetTime()if b5.WrongPlayerAction and hY<hZ then self.NPC[d6].LastWongPlayerTick=hZ;b5:WrongPlayerAction(q)end end end end;return hX end;function Lib.NPC.Global:InteractionIsAppropriateHero(d6)local hX=true;if self.NPC[d6]then local b5=self.NPC[d6]if b5.Hero~=nil then if type(b5.Hero)=="table"then hX=table.contains(b5.Hero,Logic.GetEntityName(CONST_LAST_HERO_INTERACTED))end;hX=b5.Hero==Logic.GetEntityName(CONST_LAST_HERO_INTERACTED)if not hX then local hY=(b5.WrongHeroTick or 0)+1;local hZ=Logic.GetTime()if b5.WrongHeroAction and hY<hZ then self.NPC[d6].WrongHeroTick=hZ;b5:WrongHeroAction(CONST_LAST_HERO_INTERACTED)end end end end;return hX end;function Lib.NPC.Global:GetEntityMovementTarget(ap)local ej=GetFloat(ap,CONST_SCRIPTING_VALUES.Destination.X)local ek=GetFloat(ap,CONST_SCRIPTING_VALUES.Destination.Y)return{X=ej,Y=ek}end;function Lib.NPC.Global:RotateActorsToEachother(q)local h_={}Logic.GetKnights(q,h_)for g,h in pairs(h_)do local aE=self:GetEntityMovementTarget(h)local I,J,K=Logic.EntityGetPos(CONST_LAST_NPC_INTERACTED)if math.floor(aE.X)==math.floor(I)and math.floor(aE.Y)==math.floor(J)then I,J,K=Logic.EntityGetPos(h)Logic.MoveEntity(h,I,J)LookAt(h,CONST_LAST_NPC_INTERACTED)end end;LookAt(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)LookAt(CONST_LAST_NPC_INTERACTED,CONST_LAST_HERO_INTERACTED)end;function Lib.NPC.Global:AdjustHeroTalkingDistance(T)local i0=T*GetFloat(CONST_LAST_NPC_INTERACTED,CONST_SCRIPTING_VALUES.Size)if GetDistance(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)<=i0*0.7 then local W=Logic.GetEntityOrientation(CONST_LAST_NPC_INTERACTED)local av,aw,ax=Logic.EntityGetPos(CONST_LAST_HERO_INTERACTED)local az=av+i0*0.5*math.cos(math.rad(W))local aA=aw+i0*0.5*math.sin(math.rad(W))local an=Logic.CreateEntityOnUnblockedLand(Entities.XD_ScriptEntity,az,aA,0,0)local i1,i2,i3=Logic.EntityGetPos(an)Logic.MoveSettler(CONST_LAST_HERO_INTERACTED,i1,i2)RequestHiResJob(function(hW,i4,i5)if Logic.GetTime()>i5+0.5 and Logic.IsEntityMoving(hW)==false then LookAt(hW,i4)LookAt(i4,hW)return true end end,CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED,Logic.GetTime())end end;function Lib.NPC.Global:OverrideQuestFunctions()GameCallback_OnNPCInteraction_Orig_NPC=GameCallback_OnNPCInteraction;GameCallback_OnNPCInteraction=function(ap,q,i6)GameCallback_OnNPCInteraction_Orig_NPC(ap,q,i6)local i7=i6 or Lib.NPC.Global:GetClosestKnight(ap,q)SendReport(Report.NpcInteraction,ap,i7,q)SendReportToLocal(Report.NpcInteraction,ap,i7,q)end;QuestTemplate.RemoveQuestMarkers_Orig_NPC=QuestTemplate.RemoveQuestMarkers;QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)else if self.Objectives[f].Data[4]then NpcDispose(self.Objectives[f].Data[4].NpcInstance)self.Objectives[f].Data[4].NpcInstance=nil end end else QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)end end end;QuestTemplate.ShowQuestMarkers_Orig_NPC=QuestTemplate.ShowQuestMarkers;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.ShowQuestMarkers_Orig_NPC(self)else if not self.Objectives[f].Data[4].NpcInstance then self.Objectives[f].Data[4].NpcInstance=NpcCompose{Name=self.Objectives[f].Data[3],Hero=self.Objectives[f].Data[2],Player=self.ReceivingPlayer}end end end end end;QuestTemplate.IsObjectiveCompleted_Orig_NPC=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,df)local dg=df.Type;local dh=df.Data;if df.Completed~=nil then return df.Completed end;if dg~=Objective.Distance then return self:IsObjectiveCompleted_Orig_NPC(df)else if dh[1]==-65565 then error(IsExisting(dh[3]),dh[3].." is dead! :(")if NpcTalkedTo(dh[4].NpcInstance,dh[2],self.ReceivingPlayer)then df.Completed=true end else return self:IsObjectiveCompleted_Orig_NPC(df)end end end end;function Lib.NPC.Global:GetClosestKnight(ap,q)local i8={}Logic.GetKnights(q,i8)return GetClosestToTarget(ap,i8)end;function Lib.NPC.Global:ToggleMarkerUsage(dz)self.UseMarker=dz==true;for g,h in pairs(self.NPC)do self.NPC[g].UseMarker=dz==true;self:HideMarker(g)end end;function Lib.NPC.Global:CreateMarker(d6)if self.NPC[d6]then local I,J,K=Logic.EntityGetPos(GetID(d6))local i9=Logic.CreateEntity(Entities.XD_ScriptEntity,I,J,0,0)DestroyEntity(self.NPC[d6].MarkerID)self.NPC[d6].MarkerID=i9;self:HideMarker(d6)end end;function Lib.NPC.Global:DestroyMarker(d6)if self.NPC[d6]then DestroyEntity(self.NPC[d6].MarkerID)self.NPC[d6].MarkerID=0 end end;function Lib.NPC.Global:HideMarker(d6)if self.NPC[d6]then if IsExisting(self.NPC[d6].MarkerID)then Logic.SetModel(self.NPC[d6].MarkerID,Models.Effects_E_NullFX)Logic.SetVisible(self.NPC[d6].MarkerID,false)end end end;function Lib.NPC.Global:ShowMarker(d6)if self.NPC[d6]then if self.NPC[d6].UseMarker==true and IsExisting(self.NPC[d6].MarkerID)then local gT=GetFloat(d6,CONST_SCRIPTING_VALUES.Size)SetFloat(self.NPC[d6].MarkerID,CONST_SCRIPTING_VALUES.Size,gT)Logic.SetModel(self.NPC[d6].MarkerID,Models.Effects_E_Wealth)Logic.SetVisible(self.NPC[d6].MarkerID,true)end end end;function Lib.NPC.Global:GetEntityMovingTarget(ap)local I=GetFloat(ap,CONST_SCRIPTING_VALUES.Destination.X)local J=GetFloat(ap,CONST_SCRIPTING_VALUES.Destination.Y)return{X=I,Y=J}end;function Lib.NPC.Global:InteractionTriggerController()for n=1,8,1 do local ia={}Logic.GetKnights(n,ia)for f=1,#ia,1 do if Logic.GetCurrentTaskList(ia[f])=="TL_NPC_INTERACTION"then for g,h in pairs(self.NPC)do if h.Distance>=350 then local aE=self:GetEntityMovementTarget(ia[f])local az,aA=Logic.EntityGetPos(GetID(g))if math.floor(aE.X)==math.floor(az)and math.floor(aE.Y)==math.floor(aA)then if IsExisting(g)and IsNear(ia[f],g,h.Distance)then GameCallback_OnNPCInteraction(GetID(g),n,ia[f])return end end end end end end end end;function Lib.NPC.Global:InteractableMarkerController()for g,h in pairs(self.NPC)do if h.Active then if h.UseMarker and IsExisting(h.MarkerID)and GetInteger(h.MarkerID,CONST_SCRIPTING_VALUES.Visible)==801280 then self:HideMarker(g)else self:ShowMarker(g)end;local av,aw,ax=Logic.EntityGetPos(h.MarkerID)local az,aA,aB=Logic.EntityGetPos(GetID(g))if math.abs(av-az)>20 or math.abs(aw-aA)>20 then Logic.DEBUG_SetPosition(h.MarkerID,az,aA)end end end end;function Lib.NPC.Local:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()Lib.NPC.Global=nil end;self.IsInstalled=true end;function Lib.NPC.Local:OnSaveGameLoaded()end;function Lib.NPC.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]end end;function Lib.NPC.Local:OverrideQuestFunctions()GUI_Interaction.DisplayQuestObjective_Orig_NPC=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(cP,cQ)local ib=tonumber(cP)if ib then cP=ib end;local bF,cR=GUI_Interaction.GetPotentialSubQuestAndType(cP)local ic="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local id;local ie;g_CurrentDisplayedQuestID=cP;if cR==Objective.Distance then id=ic.."/List"ie=Wrapped_GetStringTableText(cP,"UI_Texts/QuestInteraction")local ig={}assert(bF~=nil)if bF.Objectives[1].Data[1]==-65565 then id=ic.."/Distance"ie=Wrapped_GetStringTableText(cP,"UI_Texts/QuestMoveHere")SetIcon(id.."/QuestTypeIcon",{7,10})local ih=GetID(bF.Objectives[1].Data[2])local ii=Logic.GetEntityType(ih)local ij=g_TexturePositions.Entities[ii]if not ij then ij={7,9}end;SetIcon(id.."/IconMover",ij)local ik=GetID(bF.Objectives[1].Data[3])local il=Logic.GetEntityType(ik)local im=g_TexturePositions.Entities[il]if not im then im={14,10}end;local fU=id.."/IconTarget"local io=id.."/TargetPlayerColor"SetIcon(fU,im)XGUIEng.SetMaterialColor(io,0,255,255,255,0)SetIcon(id.."/QuestTypeIcon",{16,12})local ip=Lib.NPC.Text.StartConversation;ie=Localize(ip)XGUIEng.SetText(id.."/Caption","{center}"..ie)XGUIEng.ShowWidget(id,1)else GUI_Interaction.DisplayQuestObjective_Orig_NPC(cP,cQ)end else GUI_Interaction.DisplayQuestObjective_Orig_NPC(cP,cQ)end end;GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC=GUI_Interaction.GetEntitiesOrTerritoryListForQuest;GUI_Interaction.GetEntitiesOrTerritoryListForQuest=function(b1,iq)local ir={}local is=true;if iq==Objective.Distance then if b1.Objectives[1].Data[1]==-65565 then local it=GetID(b1.Objectives[1].Data[3])table.insert(ir,it)else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(b1,iq)end else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(b1,iq)end;return ir,is end end;RegisterModule(Lib.NPC.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Sound_API")function StartEventPlaylist(iu,q)q=q or 1;if GUI and q==GUI.GetPlayerID()then Sound.MusicStartEventPlaylist(iu)end;ExecuteLocal("StartEventPlaylist('%s', %d)",iu,q)end;API.StartEventPlaylist=StartEventPlaylist;function StopEventPlaylist(iu,q)q=q or 1;if GUI and q==GUI.GetPlayerID()then Sound.MusicStopEventPlaylist(iu)end;ExecuteLocal("StopEventPlaylist('%s', %d)",iu,q)end;API.StopEventPlaylist=StopEventPlaylist;function Play2DSound(dX,q)q=q or 1;if GUI or q==GUI.GetPlayerID()then Sound.FXPlay2DSound(dX:gsub("/","\\"))end;ExecuteLocal([[Play2DSound("%s", %d)]],dX,q)end;API.Play2DSound=Play2DSound;function Play3DSound(dX,gU,gV,iv,q)q=q or 1;gU=gU or 1;gV=gV or 1;iv=iv or 0;if GUI or q==GUI.GetPlayerID()then Sound.FXPlay3DSound(dX:gsub("/","\\"),gU,gV,iv)end;ExecuteLocal([[Play3DSound("%s", %f, %f, %d)]],dX,gU,gV,q)end;API.Play3DSound=Play3DSound;function SoundSetVolume(iw)iw=iw<0 and 0 or math.floor(iw)if GUI then Lib.Sound.Local:AdjustSound(iw,nil,nil,nil,nil)end;ExecuteLocal("SoundSetVolume(%d)",iw)end;API.SoundSetVolume=SoundSetVolume;function SoundSetMusicVolume(iw)iw=iw<0 and 0 or math.floor(iw)if GUI then Lib.Sound.Local:AdjustSound(nil,iw,nil,nil,nil)end;ExecuteLocal("SoundSetMusicVolume(%d)",iw)end;API.SoundSetMusicVolume=SoundSetMusicVolume;function SoundSetVoiceVolume(iw)iw=iw<0 and 0 or math.floor(iw)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,iw,nil,nil)end;ExecuteLocal("SoundSetVoiceVolume(%d)",iw)end;API.SoundSetVoiceVolume=SoundSetVoiceVolume;function SoundSetAtmoVolume(iw)iw=iw<0 and 0 or math.floor(iw)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,nil,iw,nil)end;ExecuteLocal("SoundSetAtmoVolume(%d)",iw)end;API.SoundSetAtmoVolume=SoundSetAtmoVolume;function SoundSetUIVolume(iw)iw=iw<0 and 0 or math.floor(iw)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,nil,nil,iw)end;ExecuteLocal("SoundSetUIVolume(%d)",iw)end;API.SoundSetUIVolume=SoundSetUIVolume;function SoundSave()if GUI then Lib.Sound.Local:SaveSound()end;Logic.ExecuteInLuaLocalState("SoundSave()")end;API.SoundSave=SoundSave;function SoundRestore()if GUI then Lib.Sound.Local:RestoreSound()end;ExecuteLocal("SoundRestore()")end;API.SoundRestore=SoundRestore;function PlayVoice(ix)if GUI then StopVoice()Sound.PlayVoice("ImportantStuff",ix)end;ExecuteLocal([[PlayVoice("%s")]],ix)end;API.PlayVoice=PlayVoice;function StopVoice()if GUI then Sound.StopVoice("ImportantStuff")end;ExecuteLocal("StopVoice()")end;API.StopVoice=StopVoice;function RequestAlternateSound()if GUI then Lib.Sound.Local:RequestAlternateSound()end;ExecuteLocal("RequestAlternateSound()")end;API.RequestAlternateSound=RequestAlternateSound;Lib.Register("module/settings/Sound_Text")Lib.Sound=Lib.Sound or{}Lib.Sound.Text={Request={Title={de="Lautstärke ändern",en="Alternate Volume",fr="Modifier le volume"},Text={de="Während des Spiels kann die Lautstärke durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the sound volume might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, le volume sonore peut être modifié temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.Register("module/information/Requester_Behavior")function Goal_Decide(...)return B_Goal_Decide:new(...)end;g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;B_Goal_Decide={Name="Goal_Decide",Description={en="Goal: Opens a Yes/No Dialog. The decision dictates the quest result (yes=true, no=false).",de="Ziel: Öffnet einen Ja/Nein-Dialog. Die Entscheidung bestimmt das Quest-Ergebnis (ja=true, nein=false).",fr="Objectif: ouvre une fenêtre de dialogue oui/non. La décision détermine le résultat de la quête (oui=true, non=false)."},Parameter={{ParameterType.Default,en="Text",de="Text",fr="Text"},{ParameterType.Default,en="Title",de="Titel",fr="Titre"},{ParameterType.Custom,en="Button labels",de="Button Beschriftung",fr="Inscription sur le bouton"}}}function B_Goal_Decide:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Decide:AddParameter(b2,b3)if b2==0 then self.Text=b3 elseif b2==1 then self.Title=b3 elseif b2==2 then self.Buttons=b3=="Ok/Cancel"or b3==true end end;function B_Goal_Decide:CustomFunction(b1)if Framework.IsNetworkGame()then return false end;if IsCinematicEventActive and IsCinematicEventActive(b1.ReceivingPlayer)then return end;if g_GoalDecideDialogDisplayed==nil then g_GoalDecideDialogDisplayed=true;ExecuteLocal([[DialogRequestBox("%s", "%s", function(_Yes) end, %s)]],self.Title,self.Text,self.Buttons and"true"or"nil")end;local iy=g_DecisionWindowResult;if iy~=nil then g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;return iy end end;function B_Goal_Decide:GetCustomData(b2)if b2==2 then return{"Yes/No","Ok/Cancel"}end end;function B_Goal_Decide:Debug(b1)if Framework.IsNetworkGame()then debug(false,b1.Identifier..": "..self.Name..": Can not be used in multiplayer!")return true end;if b1.Visible==true then debug(false,b1.Identifier..": "..self.Name..": Is supposed to be used in invisible quests!")return true end;return false end;function B_Goal_Decide:Reset()g_GoalDecideDialogDisplayed=nil end;RegisterBehavior(B_Goal_Decide)Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/Requester_API")function TextWindow(iz,iA,q)q=q or 1;iz=Localize(iz)iA=Localize(iA)if not GUI then ExecuteLocal([[TextWindow("%s", "%s", %d)]],iz,iA,q)return end;Lib.Requester.Local:ShowTextWindow{PlayerID=q,Caption=iz,Content=iA}end;API.TextWindow=TextWindow;function DialogInfoBox(q,fy,d9,gW)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then gW=d9;d9=fy;fy=q;q=GUI.GetPlayerID()end;if type(fy)=="table"then fy=Localize(fy)end;if type(d9)=="table"then d9=Localize(d9)end;Lib.Requester.Local:OpenDialog(q,fy,d9,gW)end;API.DialogInfoBox=DialogInfoBox;function DialogRequestBox(q,fy,d9,gW,iB)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then iB=gW;gW=d9;d9=fy;fy=q;q=GUI.GetPlayerID()end;if type(fy)=="table"then fy=Localize(fy)end;if type(d9)=="table"then d9=Localize(d9)end;Lib.Requester.Local:OpenRequesterDialog(q,fy,d9,gW,iB)end;API.DialogRequestBox=DialogRequestBox;function DialogSelectBox(q,fy,d9,gW,a5)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then a5=gW;gW=d9;d9=fy;fy=q;q=GUI.GetPlayerID()end;if type(fy)=="table"then fy=Localize(fy)end;if type(d9)=="table"then d9=Localize(d9)end;d9=d9 .."{cr}"Lib.Requester.Local:OpenSelectionDialog(q,fy,d9,gW,a5)end;API.DialogSelectBox=DialogSelectBox;function DialogLanguageSelection(q)q=q or 0;if not GUI then ExecuteLocal([[DialogLanguageSelection(%d)]],q)return end;local iC=q;local n=GUI.GetPlayerID()local iD=iC==0 or iC==n;if iC~=0 and GUI.GetPlayerID()~=iC then return end;local iE={}for f=1,#Lib.Core.Text.Languages do table.insert(iE,Lib.Core.Text.Languages[f][2])end;local iF=function(iG)SendReportToGlobal(Report.LanguageSelectionClosed,n,iD,Lib.Core.Text.Languages[iG][1])SendReport(Report.LanguageSelectionClosed,n,iD,Lib.Core.Text.Languages[iG][1])end;DialogSelectBox(n,Localize(Lib.Requester.Shared.Text.ChooseLanguage.Title),Localize(Lib.Requester.Shared.Text.ChooseLanguage.Text),iF,iE)end;API.DialogLanguageSelection=DialogLanguageSelection;Lib.Requester=Lib.Requester or{}Lib.Requester.Name="Requester"Lib.Requester.Global={}Lib.Requester.Local={Chat={Data={},History={},Visible={},Widgets={}},Requester={ActionFunction=nil,ActionRequester=nil,Next=nil,Queue={}}}Lib.Requester.Shared={Text={ChooseLanguage={Title={de="Wählt die Sprache",en="Chose your Tongue",fr="Sélectionnez la langue"},Text={de="Wählt aus der Liste die Sprache aus, in die Handlungstexte übersetzt werden sollen.",en="Choose from the list below which language story texts shall be presented to you.",fr="Sélectionne dans la liste la langue dans laquelle les textes narratifs doivent être traduits."}}}}Lib.Require("core/core")Lib.Require("module/information/Requester_API")Lib.Require("module/information/Requester_Behavior")Lib.Register("module/information/Requester")function Lib.Requester.Global:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")Lib.Requester.Local=nil end;self.IsInstalled=true end;function Lib.Requester.Global:OnSaveGameLoaded()end;function Lib.Requester.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.RequesterClosed then g_GoalDecideDialogDisplayed=false;g_DecisionWindowResult=arg[3]==true elseif aF==Report.LanguageSelectionClosed then Lib.Core.Text:ChangeSystemLanguage(arg[1],arg[2],arg[3])end end;function Lib.Requester.Local:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")for f=1,8 do self.Chat.Data[f]={}self.Chat.History[f]={}self.Chat.Visible[f]=false;self.Chat.Widgets[f]={}end;self:OverrideChatLog()self:DialogOverwriteOriginal()self:DialogAltF4Hotkey()Lib.Requester.Global=nil end;self.IsInstalled=true end;function Lib.Requester.Local:OnSaveGameLoaded()end;function Lib.Requester.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.SaveGameLoaded then self:DialogAltF4Hotkey()end end;function Lib.Requester.Local:DialogAltF4Hotkey()StartSimpleJobEx(function()if Lib.Requester.Local.LoadscreenClosed then Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"Lib.Requester.Local:DialogAltF4Action()",2,false)return true end end)end;function Lib.Requester.Local:DialogAltF4Action()Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"",30,false)self:OpenRequesterDialog(GUI.GetPlayerID(),XGUIEng.GetStringTableText("UI_Texts/MainMenuExitGame_center"),XGUIEng.GetStringTableText("UI_Texts/ConfirmQuitCurrentGame"),function(iH)if iH then Framework.ExitGame()end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;Lib.Requester.Local:DialogAltF4Hotkey()end)end;function Lib.Requester.Local:Callback(q)if self.Requester.ActionFunction then self.Requester.ActionFunction(CustomGame.Knight+1,q)end;self:OnDialogClosed(CustomGame.Knight+1)end;function Lib.Requester.Local:CallbackRequester(iI,q)if self.Requester.ActionRequester then self.Requester.ActionRequester(iI,q)end;self:OnDialogClosed(iI)end;function Lib.Requester.Local:OnDialogClosed(iG)if not self.SavingWasDisabled then DisableSaving(false)end;if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;SendReportToGlobal(Report.RequesterClosed,GUI.GetPlayerID(),self.DialogWindowShown,iG)SendReport(Report.RequesterClosed,GUI.GetPlayerID(),self.DialogWindowShown,iG)self.SavingWasDisabled=false;self.DialogWindowShown=nil;self:DialogQueueStartNext()end;function Lib.Requester.Local:DialogQueueStartNext()self.Requester.Next=table.remove(self.Requester.Queue,1)RequestHiResJob(function()local iJ=Lib.Requester.Local.Requester.Next;if iJ and iJ[1]and iJ[2]then local iK=iJ[1]Lib.Requester.Local[iK](Lib.Requester.Local,unpack(iJ[2]))Lib.Requester.Local.Requester.Next=nil end;return true end)end;function Lib.Requester.Local:DialogQueuePush(iL,iM)local iJ={iL,iM}table.insert(self.Requester.Queue,iJ)end;function Lib.Requester.Local:OpenDialog(q,fy,d9,gW)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(fy)=="string")assert(type(d9)=="string")if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;fy="{center}"..Lib.Core.Text:ConvertPlaceholders(fy)d9=Lib.Core.Text:ConvertPlaceholders(d9)if string.len(d9)<35 then d9=d9 .."{cr}"end;g_MapAndHeroPreview.SelectKnight=function(iN)end;XGUIEng.ShowAllSubWidgets("/InGame/Dialog/BG",1)XGUIEng.ShowWidget("/InGame/Dialog/Backdrop",0)XGUIEng.ShowWidget(RequesterDialog,1)XGUIEng.ShowWidget(RequesterDialog_Yes,0)XGUIEng.ShowWidget(RequesterDialog_No,0)XGUIEng.ShowWidget(RequesterDialog_Ok,1)if type(gW)=="function"then self.Requester.ActionFunction=gW;local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,iF)else self.Requester.ActionFunction=nil;local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,iF)end;XGUIEng.SetText(RequesterDialog_Message,"{center}"..d9)XGUIEng.SetText(RequesterDialog_Title,fy)XGUIEng.SetText(RequesterDialog_Title.."White",fy)XGUIEng.PushPage(RequesterDialog,false)if Lib.Core.Save.SavingDisabled then self.SavingWasDisabled=true end;DisableSaving(true)self.DialogWindowShown=1;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenDialog",{q,fy,d9,gW})end end;function Lib.Requester.Local:OpenRequesterDialog(q,fy,d9,gW,iB)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(fy)=="string")assert(type(d9)=="string")fy="{center}"..fy;self:OpenDialog(q,fy,d9,gW)XGUIEng.ShowWidget(RequesterDialog_Yes,1)XGUIEng.ShowWidget(RequesterDialog_No,1)XGUIEng.ShowWidget(RequesterDialog_Ok,0)if iB then XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Ok_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/Cancel_center"))else XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Yes_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/No_center"))end;self.Requester.ActionRequester=nil;if gW then assert(type(gW)=="function")self.Requester.ActionRequester=gW end;local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, true, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Yes,iF)local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, false, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_No,iF)self.DialogWindowShown=2;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenRequesterDialog",{q,fy,d9,gW,iB})end end;function Lib.Requester.Local:OpenSelectionDialog(q,fy,d9,gW,a5)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then self:OpenDialog(q,fy,d9,gW)local iO=XGUIEng.GetWidgetID(CustomGame.Widget.KnightsList)XGUIEng.ListBoxPopAll(iO)for f=1,#a5 do XGUIEng.ListBoxPushItem(iO,a5[f])end;XGUIEng.ListBoxSetSelectedIndex(iO,0)CustomGame.Knight=0;local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; XGUIEng.PopPage()"iF=iF.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,iF)local iP="/InGame/Singleplayer/CustomGame/ContainerSelection/"XGUIEng.SetText(iP.."HeroComboBoxMain/HeroComboBox","")if a5[1]then XGUIEng.SetText(iP.."HeroComboBoxMain/HeroComboBox",a5[1])end;XGUIEng.PushPage(iP.."HeroComboBoxContainer",false)XGUIEng.PushPage(iP.."HeroComboBoxMain",false)XGUIEng.ShowWidget(iP.."HeroComboBoxContainer",0)local iQ={GUI.GetScreenSize()}local av,aw=XGUIEng.GetWidgetScreenPosition(RequesterDialog_Ok)XGUIEng.SetWidgetScreenPosition(iP.."HeroComboBoxMain",av-25,aw-90*iQ[2]/1080)XGUIEng.SetWidgetScreenPosition(iP.."HeroComboBoxContainer",av-25,aw-20*iQ[2]/1080)self.DialogWindowShown=3;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenSelectionDialog",{q,fy,d9,gW,a5})end end;function Lib.Requester.Local:DialogOverwriteOriginal()OpenDialog_Orig_Windows=OpenDialog;OpenDialog=function(iR,fy,iS)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; XGUIEng.PopPage()"OpenDialog_Orig_Windows(fy,iR)end end;OpenRequesterDialog_Orig_Windows=OpenRequesterDialog;OpenRequesterDialog=function(iR,fy,iT,iB,iU)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_Yes,iF)local iF="XGUIEng.ShowWidget(RequesterDialog, 0)"iF=iF.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_No,iF)OpenRequesterDialog_Orig_Windows(iR,fy,iT,iB,iU)end end end;function Lib.Requester.Local:ShowTextWindow(gy)gy.PlayerID=gy.PlayerID or 1;gy.Button=gy.Button or{}local n=GUI.GetPlayerID()if gy.PlayerID~=n then return end;if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 then self:UpdateChatLogText(gy)return end;self.Chat.Data[n]=gy;self:CloseTextWindow(n)self:AlterChatLog()XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",gy.Content)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}"..gy.Caption)if gy.DisableClose then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/Exit",0)end;self:ShouldShowSlider(gy.Content)XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)end;function Lib.Requester.Local:CloseTextWindow(q)assert(q~=nil)local n=GUI.GetPlayerID()if q~=n then return end;GUI_Chat.CloseChatMenu()end;function Lib.Requester.Local:UpdateChatLogText(gy)XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",gy.Content)end;function Lib.Requester.Local:AlterChatLog()local n=GUI.GetPlayerID()if self.Chat.Visible[n]then return end;self.Chat.Visible[n]=true;self.Chat.History[n]=table.copy(g_Chat.ChatHistory)g_Chat.ChatHistory={}self:AlterChatLogDisplay()end;function Lib.Requester.Local:RestoreChatLog()local n=GUI.GetPlayerID()if not self.Chat.Visible[n]then return end;self.Chat.Visible[n]=false;g_Chat.ChatHistory={}for f=1,#self.Chat.History[n]do GUI_Chat.ChatlogAddMessage(self.Chat.History[n][f])end;self:RestoreChatLogDisplay()self.Chat.History[n]={}self.Chat.Widgets[n]={}self.Chat.Data[n]={}end;function Lib.Requester.Local:UpdateToggleWhisperTarget()local n=GUI.GetPlayerID()local iV="/InGame/Root/Normal/ChatOptions/"if not self.Chat.Data[n]or not self.Chat.Data[n].Button or not self.Chat.Data[n].Button.Action then XGUIEng.ShowWidget(iV.."ToggleWhisperTarget",0)return end;local iW=self.Chat.Data[n].Button.Text;XGUIEng.SetText(iV.."ToggleWhisperTarget","{center}"..iW)end;function Lib.Requester.Local:ShouldShowSlider(d9)local iX=string.len(d9)local iY=1;local iZ=0;while true do local c4,ct=string.find(d9,"{cr}",iY)if not ct then break end;if ct-iY<=58 then iX=iX+58-(ct-iY)end;iY=ct+1 end;if iX+iZ*55>1000 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/ChatLogSlider",1)end end;function Lib.Requester.Local:OverrideChatLog()GUI_Chat.ChatlogAddMessage_Orig_Requester=GUI_Chat.ChatlogAddMessage;GUI_Chat.ChatlogAddMessage=function(iR)local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ChatlogAddMessage_Orig_Requester(iR)return end;table.insert(Lib.Requester.Local.Chat.History[n],iR)end;GUI_Chat.DisplayChatLog_Orig_Requester=GUI_Chat.DisplayChatLog;GUI_Chat.DisplayChatLog=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.DisplayChatLog_Orig_Requester()end end;GUI_Chat.CloseChatMenu_Orig_Requester=GUI_Chat.CloseChatMenu;GUI_Chat.CloseChatMenu=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CloseChatMenu_Orig_Requester()return end;Lib.Requester.Local:RestoreChatLog()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)end;GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester=GUI_Chat.ToggleWhisperTargetUpdate;GUI_Chat.ToggleWhisperTargetUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester()return end;Lib.Requester.Local:UpdateToggleWhisperTarget()end;GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester=GUI_Chat.CheckboxMessageTypeWhisperUpdate;GUI_Chat.CheckboxMessageTypeWhisperUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester()return end end;GUI_Chat.ToggleWhisperTarget_Orig_Requester=GUI_Chat.ToggleWhisperTarget;GUI_Chat.ToggleWhisperTarget=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTarget_Orig_Requester()return end;if Lib.Requester.Local.Chat.Data[n].Button.Action then local b5=Lib.Requester.Local.Chat.Data[n]Lib.Requester.Local.Chat.Data[n].Button.Action(b5)end end end;function Lib.Requester.Local:AlterChatLogDisplay()local n=GUI.GetPlayerID()local i_,j0,I,J;local j1;local iV="/InGame/Root/Normal/ChatOptions/"I,J=XGUIEng.GetWidgetLocalPosition(iV.."ToggleWhisperTarget")i_,j0=XGUIEng.GetWidgetSize(iV.."ToggleWhisperTarget")self.Chat.Widgets[n]["ToggleWhisperTarget"]={X=I,Y=J,W=i_,H=j0}j1=self.Chat.Widgets[n]["ToggleWhisperTarget"]I,J=XGUIEng.GetWidgetLocalPosition(iV.."ChatLog")i_,j0=XGUIEng.GetWidgetSize(iV.."ChatLog")self.Chat.Widgets[n]["ChatLog"]={X=I,Y=J,W=i_,H=j0}j1=self.Chat.Widgets[n]["ChatLog"]I,J=XGUIEng.GetWidgetLocalPosition(iV.."ChatLogSlider")i_,j0=XGUIEng.GetWidgetSize(iV.."ChatLogSlider")self.Chat.Widgets[n]["ChatLogSlider"]={X=I,Y=J,W=i_,H=j0}j1=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.ShowWidget(iV.."ChatModeAllPlayers",0)XGUIEng.ShowWidget(iV.."ChatModeTeam",0)XGUIEng.ShowWidget(iV.."ChatModeWhisper",0)XGUIEng.ShowWidget(iV.."ChatChooseModeCaption",0)XGUIEng.ShowWidget(iV.."Background/TitleBig",1)XGUIEng.ShowWidget(iV.."Background/TitleBig/Info",0)XGUIEng.ShowWidget(iV.."ChatLogCaption",0)XGUIEng.ShowWidget(iV.."BGChoose",0)XGUIEng.ShowWidget(iV.."BGChatLog",0)XGUIEng.ShowWidget(iV.."ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/BG",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Close",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Slider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Text",0)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}Test")XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog",15,90)XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog/Name",0,0)XGUIEng.SetTextColor("/InGame/Root/Normal/MessageLog/Name",51,51,121,255)XGUIEng.SetWidgetSize(iV.."ChatLogSlider",46,600)XGUIEng.SetWidgetLocalPosition(iV.."ChatLogSlider",780,130)XGUIEng.SetWidgetSize(iV.."Background/DialogBG/1 (2)/2",150,400)XGUIEng.SetWidgetPositionAndSize(iV.."Background/DialogBG/1 (2)/3",400,500,350,400)XGUIEng.SetWidgetLocalPosition(iV.."ToggleWhisperTarget",280,760)XGUIEng.SetWidgetLocalPosition(iV.."ChatLog",140,150)XGUIEng.SetWidgetSize(iV.."ChatLog",640,560)end;function Lib.Requester.Local:RestoreChatLogDisplay()local n=GUI.GetPlayerID()local j1;local iV="/InGame/Root/Normal/ChatOptions/"j1=self.Chat.Widgets[n]["ToggleWhisperTarget"]XGUIEng.SetWidgetLocalPosition(iV.."ToggleWhisperTarget",j1.X,j1.Y)XGUIEng.SetWidgetSize(iV.."ToggleWhisperTarget",j1.W,j1.H)j1=self.Chat.Widgets[n]["ChatLog"]XGUIEng.SetWidgetLocalPosition(iV.."ChatLog",j1.X,j1.Y)XGUIEng.SetWidgetSize(iV.."ChatLog",j1.W,j1.H)j1=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.SetWidgetLocalPosition(iV.."ChatLogSlider",j1.X,j1.Y)XGUIEng.SetWidgetSize(iV.."ChatLogSlider",j1.W,j1.H)XGUIEng.ShowWidget(iV.."ChatModeAllPlayers",1)XGUIEng.ShowWidget(iV.."ChatModeTeam",1)XGUIEng.ShowWidget(iV.."ChatModeWhisper",1)XGUIEng.ShowWidget(iV.."ChatChooseModeCaption",1)XGUIEng.ShowWidget(iV.."Background/TitleBig",1)XGUIEng.ShowWidget(iV.."Background/TitleBig/Info",1)XGUIEng.ShowWidget(iV.."ChatLogCaption",1)XGUIEng.ShowWidget(iV.."BGChoose",1)XGUIEng.ShowWidget(iV.."BGChatLog",1)XGUIEng.ShowWidget(iV.."ChatLogSlider",1)XGUIEng.ShowWidget(iV.."ToggleWhisperTarget",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)end;RegisterModule(Lib.Requester.Name)Lib.Sound=Lib.Sound or{}Lib.Sound.Name="Sound"Lib.Sound.Global={}Lib.Sound.Local={Config={DoAlternateSound=true},SoundBackup={}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/information/Requester")Lib.Require("module/settings/Sound_Text")Lib.Require("module/settings/Sound_API")Lib.Register("module/settings/Sound")function Lib.Sound.Global:Initialize()if not self.IsInstalled then Lib.Sound.Local=nil end;self.IsInstalled=true end;function Lib.Sound.Global:OnSaveGameLoaded()end;function Lib.Sound.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:Initialize()if not self.IsInstalled then Lib.Sound.Global=nil end;self.IsInstalled=true end;function Lib.Sound.Local:OnSaveGameLoaded()end;function Lib.Sound.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:RequestAlternateSound()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.Sound.Text.Request.Title,Lib.Sound.Text.Request.Text,function(iH)Lib.Sound.Local.Config.DoAlternateSound=iH==true end,false)end;function Lib.Sound.Local:AdjustSound(j2,j3,j4,j5,j6)if not self.Config.DoAlternateSound then return end;self:SaveSound()if j2 then Sound.SetGlobalVolume(j2)end;if j3 then Sound.SetMusicVolume(j3)end;if j4 then Sound.SetSpeechVolume(j4)end;if j5 then Sound.SetFXSoundpointVolume(j5)Sound.SetFXAtmoVolume(j5)end;if j6 then Sound.Set2DFXVolume(j6)Sound.SetFXVolume(j6)end end;function Lib.Sound.Local:SaveSound()if not self.SoundBackup.Saved then self.SoundBackup.Saved=true;self.SoundBackup.FXSP=Sound.GetFXSoundpointVolume()self.SoundBackup.FXAtmo=Sound.GetFXAtmoVolume()self.SoundBackup.FXVol=Sound.GetFXVolume()self.SoundBackup.Sound=Sound.GetGlobalVolume()self.SoundBackup.Music=Sound.GetMusicVolume()self.SoundBackup.Voice=Sound.GetSpeechVolume()self.SoundBackup.UI=Sound.Get2DFXVolume()end end;function Lib.Sound.Local:RestoreSound()if self.SoundBackup.Saved then Sound.SetFXSoundpointVolume(self.SoundBackup.FXSP)Sound.SetFXAtmoVolume(self.SoundBackup.FXAtmo)Sound.SetFXVolume(self.SoundBackup.FXVol)Sound.SetGlobalVolume(self.SoundBackup.Sound)Sound.SetMusicVolume(self.SoundBackup.Music)Sound.SetSpeechVolume(self.SoundBackup.Voice)Sound.Set2DFXVolume(self.SoundBackup.UI)self.SoundBackup={}end end;RegisterModule(Lib.Sound.Name)Lib.Register("module/city/Promotion_Requirements")InitKnightTitleTablesOverwrite=function()KnightTitles={}KnightTitles.Knight=0;KnightTitles.Mayor=1;KnightTitles.Baron=2;KnightTitles.Earl=3;KnightTitles.Marquees=4;KnightTitles.Duke=5;KnightTitles.Archduke=6;NeedsAndRightsByKnightTitle={}NeedsAndRightsByKnightTitle[KnightTitles.Knight]={ActivateNeedForPlayer,{Needs.Nutrition,Needs.Medicine},ActivateRightForPlayer,{Technologies.R_Gathering,Technologies.R_Woodcutter,Technologies.R_StoneQuarry,Technologies.R_HuntersHut,Technologies.R_FishingHut,Technologies.R_CattleFarm,Technologies.R_GrainFarm,Technologies.R_SheepFarm,Technologies.R_IronMine,Technologies.R_Beekeeper,Technologies.R_HerbGatherer,Technologies.R_Nutrition,Technologies.R_Bakery,Technologies.R_Dairy,Technologies.R_Butcher,Technologies.R_SmokeHouse,Technologies.R_Clothes,Technologies.R_Tanner,Technologies.R_Weaver,Technologies.R_Construction,Technologies.R_Trail,Technologies.R_KnockDown,Technologies.R_Sermon}}NeedsAndRightsByKnightTitle[KnightTitles.Mayor]={ActivateNeedForPlayer,{Needs.Clothes},ActivateRightForPlayer,{Technologies.R_Military,Technologies.R_MilitarySword,Technologies.R_Thieves,Technologies.R_Hygiene,Technologies.R_Soapmaker,Technologies.R_BroomMaker,Technologies.R_SpecialEdition,Technologies.R_SpecialEdition_Pavilion,Technologies.R_SpecialEdition_StatueFamily},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Baron]={ActivateNeedForPlayer,{Needs.Hygiene},ActivateRightForPlayer,{Technologies.R_SiegeEngineWorkshop,Technologies.R_BatteringRam,Technologies.R_Pallisade,Technologies.R_Medicine,Technologies.R_Entertainment,Technologies.R_Tavern,Technologies.R_Street,Technologies.R_Festival,Technologies.R_SpecialEdition_Column},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Earl]={ActivateNeedForPlayer,{Needs.Entertainment,Needs.Prosperity},ActivateRightForPlayer,{Technologies.R_MilitaryBow,Technologies.R_Baths,Technologies.R_Prosperity,Technologies.R_Taxes,Technologies.R_SpecialEdition_StatueSettler},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Marquees]={ActivateNeedForPlayer,{Needs.Wealth},ActivateRightForPlayer,{Technologies.R_Theater,Technologies.R_Wealth,Technologies.R_BannerMaker,Technologies.R_SiegeTower,Technologies.R_Wall,Technologies.R_Ballista,Technologies.R_AmmunitionCart,Technologies.R_SpecialEdition_StatueProduction},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Duke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Catapult,Technologies.R_Carpenter,Technologies.R_CandleMaker,Technologies.R_Blacksmith,Technologies.R_SpecialEdition_StatueDario},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Archduke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Victory},StartKnightsPromotionCelebration}if Framework.GetGameExtraNo()>=1 then local j7=4;table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][j7],Technologies.R_Cistern)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][j7],Technologies.R_Beautification_Brazier)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][j7],Technologies.R_Beautification_Shrine)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][j7],Technologies.R_Beautification_Pillar)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][j7],Technologies.R_Beautification_StoneBench)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][j7],Technologies.R_Beautification_Sundial)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Marquees][j7],Technologies.R_Beautification_Vase)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Duke][j7],Technologies.R_Beautification_VictoryColumn)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Archduke][j7],Technologies.R_Beautification_TriumphalArch)end;KnightTitleRequirements={}KnightTitleRequirements[KnightTitles.Mayor]={}KnightTitleRequirements[KnightTitles.Mayor].Headquarters=1;KnightTitleRequirements[KnightTitles.Mayor].Settlers=10;KnightTitleRequirements[KnightTitles.Mayor].Products={{GoodCategories.GC_Clothes,6}}KnightTitleRequirements[KnightTitles.Baron]={}KnightTitleRequirements[KnightTitles.Baron].Settlers=30;KnightTitleRequirements[KnightTitles.Baron].Headquarters=1;KnightTitleRequirements[KnightTitles.Baron].Storehouse=1;KnightTitleRequirements[KnightTitles.Baron].Cathedrals=1;KnightTitleRequirements[KnightTitles.Baron].Products={{GoodCategories.GC_Hygiene,12}}KnightTitleRequirements[KnightTitles.Earl]={}KnightTitleRequirements[KnightTitles.Earl].Settlers=50;KnightTitleRequirements[KnightTitles.Earl].Headquarters=2;KnightTitleRequirements[KnightTitles.Earl].Goods={{Goods.G_Beer,18}}KnightTitleRequirements[KnightTitles.Marquees]={}KnightTitleRequirements[KnightTitles.Marquees].Settlers=70;KnightTitleRequirements[KnightTitles.Marquees].Headquarters=2;KnightTitleRequirements[KnightTitles.Marquees].Storehouse=2;KnightTitleRequirements[KnightTitles.Marquees].Cathedrals=2;KnightTitleRequirements[KnightTitles.Marquees].RichBuildings=20;KnightTitleRequirements[KnightTitles.Duke]={}KnightTitleRequirements[KnightTitles.Duke].Settlers=90;KnightTitleRequirements[KnightTitles.Duke].Storehouse=2;KnightTitleRequirements[KnightTitles.Duke].Cathedrals=2;KnightTitleRequirements[KnightTitles.Duke].Headquarters=3;KnightTitleRequirements[KnightTitles.Duke].DecoratedBuildings={{Goods.G_Banner,9}}KnightTitleRequirements[KnightTitles.Archduke]={}KnightTitleRequirements[KnightTitles.Archduke].Settlers=150;KnightTitleRequirements[KnightTitles.Archduke].Storehouse=3;KnightTitleRequirements[KnightTitles.Archduke].Cathedrals=3;KnightTitleRequirements[KnightTitles.Archduke].Headquarters=3;KnightTitleRequirements[KnightTitles.Archduke].RichBuildings=30;KnightTitleRequirements[KnightTitles.Archduke].FullDecoratedBuildings=30;CreateTechnologyKnightTitleTable()end;Lib.Register("module/city/Promotion_Helper")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Helper={}Lib.Promotion.Helper.OverwritePromotionHelper=function()DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist;DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist;DoesNeededNumberOfGoodTypesForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist;DoNeededNumberOfConsumedGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist;DoNumberOfProductsInCategoryExist=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist;DoNeededDiversityBuffForKnightTitleExist=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist;DoCustomFunctionForKnightTitleSucceed=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed;DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist;DoNeededSpecialBuildingUpgradeForKnightTitleExist=Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist;DoesNeededCityReputationForKnightTitleExist=Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist;DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist;DoNeededNumberOfRichBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist;DoNeededNumberOfGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist;DoesNeededNumberOfSettlersForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist;CanKnightBePromoted=Lib.Promotion.Helper.CanKnightBePromoted;VictroryBecauseOfTitle=Lib.Promotion.Helper.VictroryBecauseOfTitle end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].Category==nil then return end;if j9 then local ja=KnightTitleRequirements[j8].Category[j9][1]local jb=KnightTitleRequirements[j8].Category[j9][2]local jc=0;if ja==EntityCategories.Spouse then jc=Logic.GetNumberOfSpouses(q)else local jd={Logic.GetPlayerEntitiesInCategory(q,ja)}for f=1,#jd do if Logic.IsBuilding(jd[f])==1 then if Logic.IsConstructionComplete(jd[f])==1 then jc=jc+1 end else jc=jc+1 end end end;if jc>=jb then return true,jc,jb end;return false,jc,jb else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Category do je,jf,jg=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].Entities==nil then return end;if j9 then local ep=KnightTitleRequirements[j8].Entities[j9][1]local jb=KnightTitleRequirements[j8].Entities[j9][2]local jd=GetPlayerEntities(q,ep)local jc=0;for f=1,#jd do if Logic.IsBuilding(jd[f])==1 then if Logic.IsConstructionComplete(jd[f])==1 then jc=jc+1 end else jc=jc+1 end end;if jc>=jb then return true,jc,jb end;return false,jc,jb else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Entities do je,jf,jg=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].Goods==nil then return end;if j9 then local b4=KnightTitleRequirements[j8].Goods[j9][1]local jb=KnightTitleRequirements[j8].Goods[j9][2]local jc=GetPlayerGoodsInSettlement(b4,q,true)if jc>=jb then return true,jc,jb end;return false,jc,jb else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Goods do je,jf,jg=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].Consume==nil then return end;if j9 then CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}local b4=KnightTitleRequirements[j8].Consume[j9][1]local cj=CONST_CONSUMED_GOODS_COUNTER[q][b4]or 0;local jh=KnightTitleRequirements[j8].Consume[j9][2]if cj>=jh then return true,cj,jh else return false,cj,jh end else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Consume do je,jf,jg=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist(q,j8,f)if je==false then return false,jf,jg end end;return true,jf,jg end end;Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist=function(q,j8,j9)if KnightTitleRequirements[j8].Products==nil then return end;if j9 then local cj=0;local ji=KnightTitleRequirements[j8].Products[j9][2]local jj=KnightTitleRequirements[j8].Products[j9][1]local jk={Logic.GetGoodTypesInGoodCategory(jj)}for f=1,#jk do cj=cj+GetPlayerGoodsInSettlement(jk[f],q,true)end;return cj>=ji,cj,ji else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Products do je,jf,jg=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].Buff==nil then return end;if j9 then local jl=KnightTitleRequirements[j8].Buff[j9]if Logic.GetBuff(q,jl)and Logic.GetBuff(q,jl)~=0 then return true end;return false else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Buff do je,jf,jg=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed=function(q,j8,j9)if KnightTitleRequirements[j8].Custom==nil then return end;if j9 then return KnightTitleRequirements[j8].Custom[j9][1](q,j8,j9)else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].Custom do je,jf,jg=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=function(q,j8,j9)if KnightTitleRequirements[j8].DecoratedBuildings==nil then return end;if j9 then local jm={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local jn=KnightTitleRequirements[j8].DecoratedBuildings[j9][1]local jo=KnightTitleRequirements[j8].DecoratedBuildings[j9][2]local jp=0;for f=1,#jm do local jq=jm[f]local jr=Logic.GetBuildingWealthGoodState(jq,jn)if jr>0 then jp=jp+1 end end;if jp>=jo then return true,jp,jo else return false,jp,jo end else local je,jf,jg;for f=1,#KnightTitleRequirements[j8].DecoratedBuildings do je,jf,jg=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(q,j8,f)if je==false then return je,jf,jg end end;return je end end;Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist=function(q,j8,js)local jt;local ju;if js==EntityCategories.Headquarters then jt=Logic.GetHeadquarters(q)ju="Headquarters"elseif js==EntityCategories.Storehouse then jt=Logic.GetStoreHouse(q)ju="Storehouse"elseif js==EntityCategories.Cathedrals then jt=Logic.GetCathedral(q)ju="Cathedrals"else return end;if KnightTitleRequirements[j8][ju]==nil then return end;local jv=KnightTitleRequirements[j8][ju]if jt~=nil then local jw=Logic.GetUpgradeLevel(jt)if jw>=jv then return true,jw,jv else return false,jw,jv end else return false,0,jv end end;Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist=function(q,j8)if KnightTitleRequirements[j8].Reputation==nil then return end;local jb=KnightTitleRequirements[j8].Reputation;if not jb then return end;local jc=math.floor(Logic.GetCityReputation(q)*100+0.5)if jc>=jb then return true,jc,jb end;return false,jc,jb end;Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=function(q,j8)if KnightTitleRequirements[j8].FullDecoratedBuildings==nil then return end;local jm={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local jo=KnightTitleRequirements[j8].FullDecoratedBuildings;local jp=0;for f=1,#jm do local jq=jm[f]local jx=0;if Logic.GetBuildingWealthGoodState(jq,Goods.G_Banner)>0 then jx=jx+1 end;if Logic.GetBuildingWealthGoodState(jq,Goods.G_Sign)>0 then jx=jx+1 end;if Logic.GetBuildingWealthGoodState(jq,Goods.G_Candle)>0 then jx=jx+1 end;if Logic.GetBuildingWealthGoodState(jq,Goods.G_Ornament)>0 then jx=jx+1 end;if jx>=4 then jp=jp+1 end end;if jp>=jo then return true,jp,jo else return false,jp,jo end end;Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist=function(q,j8)if KnightTitleRequirements[j8].RichBuildings==nil then return end;local jy=Logic.GetNumberOfProsperBuildings(q,1)local jz=KnightTitleRequirements[j8].RichBuildings;if jz==-1 then jz=Logic.GetNumberOfPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)jz=jz-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_Barracks)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_BarracksArchers)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_SiegeEngineWorkshop)end;if jy>=jz then return true,jy,jz else return false,jy,jz end end;Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist=function(q,j8)if KnightTitleRequirements[j8].Good==nil then return end;local ja=KnightTitleRequirements[j8].Good[1]local jA={Logic.GetPlayerEntitiesInCategory(q,ja)}local cj=0;for f=1,#jA do local B=jA[f]local ep=Logic.GetEntityType(B)if ep~=Entities.B_TableBeer and ep~=Entities.B_Marketslot and Logic.IsEntityTypeInCategory(ep,EntityCategories.Marketplace)==0 and Logic.IsKnight(B)==false then local jB=Logic.GetAmountOnOutStockByIndex(B,0)cj=cj+jB end end;local jh=KnightTitleRequirements[j8].Good[2]if cj>=jh then return true,cj,jh else return false,cj,jh end end;Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist=function(q,j8)if KnightTitleRequirements[j8].Settlers==nil then return end;local jC=KnightTitleRequirements[j8].Settlers;if jC~=nil then local jD=Logic.GetNumberOfEmployedWorkers(q)if jD>=jC then return true,jD,jC else return false,jD,jC end end end;Lib.Promotion.Helper.CanKnightBePromoted=function(q,j8)if j8==nil then j8=Logic.GetKnightTitle(q)+1 end;if Logic.CanStartFestival(q,1)==true then if KnightTitleRequirements[j8]~=nil and DoesNeededNumberOfSettlersForKnightTitleExist(q,j8)~=false and DoNeededNumberOfGoodsForKnightTitleExist(q,j8)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,j8,EntityCategories.Headquarters)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,j8,EntityCategories.Storehouse)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,j8,EntityCategories.Cathedrals)~=false and DoNeededNumberOfRichBuildingsForKnightTitleExist(q,j8)~=false and DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(q,j8)~=false and DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(q,j8)~=false and DoesNeededCityReputationForKnightTitleExist(q,j8)~=false and DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(q,j8)~=false and DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(q,j8)~=false and DoesNeededNumberOfGoodTypesForKnightTitleExist(q,j8)~=false and DoNeededDiversityBuffForKnightTitleExist(q,j8)~=false and DoCustomFunctionForKnightTitleSucceed(q,j8)~=false and DoNeededNumberOfConsumedGoodsForKnightTitleExist(q,j8)~=false and DoNumberOfProductsInCategoryExist(q,j8)~=false then return true end end;return false end;Lib.Promotion.Helper.VictroryBecauseOfTitle=function()QuestTemplate:TerminateEventsAndStuff()Victory(g_VictoryAndDefeatType.VictoryMissionComplete)end;Lib.Register("module/city/Promotion_Config")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Config={}function Lib.Promotion.Config:InitAddonText()if Framework.GetGameExtraNo()~=0 then Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Gems]={de="Edelsteine beschaffen",en="Obtain gems",fr="Se procurer des Gemmes"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Olibanum]={de="Weihrauch beschaffen",en="Obtain olibanum",fr="Se procurer de l'encens"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_MusicalInstrument]={de="Muskinstrumente beschaffen",en="Obtain instruments",fr="Se procurer des instruments de musique"}end end;function Lib.Promotion.Config:InitTexturePositions()g_TexturePositions.EntityCategories[EntityCategories.GC_Food_Supplier]={1,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Clothes_Supplier]={1,2}g_TexturePositions.EntityCategories[EntityCategories.GC_Hygiene_Supplier]={16,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Entertainment_Supplier]={1,4}g_TexturePositions.EntityCategories[EntityCategories.GC_Luxury_Supplier]={16,3}g_TexturePositions.EntityCategories[EntityCategories.GC_Weapon_Supplier]={1,7}g_TexturePositions.EntityCategories[EntityCategories.GC_Medicine_Supplier]={2,10}g_TexturePositions.EntityCategories[EntityCategories.Outpost]={12,3}g_TexturePositions.EntityCategories[EntityCategories.Spouse]={5,15}g_TexturePositions.EntityCategories[EntityCategories.CattlePasture]={3,16}g_TexturePositions.EntityCategories[EntityCategories.SheepPasture]={4,1}g_TexturePositions.EntityCategories[EntityCategories.Soldier]={7,12}g_TexturePositions.EntityCategories[EntityCategories.GrainField]={14,2}g_TexturePositions.EntityCategories[EntityCategories.BeeHive]={2,1}g_TexturePositions.EntityCategories[EntityCategories.OuterRimBuilding]={3,4}g_TexturePositions.EntityCategories[EntityCategories.CityBuilding]={8,1}g_TexturePositions.EntityCategories[EntityCategories.Leader]={7,11}g_TexturePositions.EntityCategories[EntityCategories.Range]={9,8}g_TexturePositions.EntityCategories[EntityCategories.Melee]={9,7}g_TexturePositions.EntityCategories[EntityCategories.SiegeEngine]={2,15}g_TexturePositions.Entities[Entities.B_Beehive]={2,1}g_TexturePositions.Entities[Entities.B_Cathedral_Big]={3,12}g_TexturePositions.Entities[Entities.B_CattlePasture]={3,16}g_TexturePositions.Entities[Entities.B_GrainField_ME]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NA]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NE]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_SE]={1,13}g_TexturePositions.Entities[Entities.U_MilitaryBallista]={10,5}g_TexturePositions.Entities[Entities.B_Outpost]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_ME]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NA]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NE]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_SE]={12,3}g_TexturePositions.Entities[Entities.B_SheepPasture]={4,1}g_TexturePositions.Entities[Entities.U_SiegeEngineCart]={9,4}g_TexturePositions.Entities[Entities.U_Trebuchet]={9,1}g_TexturePositions.Needs[Needs.Medicine]={2,10}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_1]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_2]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_3]={4,7}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_1]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_2]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_3]={4,5}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_1]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_2]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_3]={4,6}g_TexturePositions.Buffs=g_TexturePositions.Buffs or{}g_TexturePositions.Buffs[Buffs.Buff_ClothesDiversity]={1,2}g_TexturePositions.Buffs[Buffs.Buff_EntertainmentDiversity]={1,4}g_TexturePositions.Buffs[Buffs.Buff_FoodDiversity]={1,1}g_TexturePositions.Buffs[Buffs.Buff_HygieneDiversity]={1,3}g_TexturePositions.Buffs[Buffs.Buff_Colour]={5,11}g_TexturePositions.Buffs[Buffs.Buff_Entertainers]={5,12}g_TexturePositions.Buffs[Buffs.Buff_ExtraPayment]={1,8}g_TexturePositions.Buffs[Buffs.Buff_Sermon]={4,14}g_TexturePositions.Buffs[Buffs.Buff_Spice]={5,10}g_TexturePositions.Buffs[Buffs.Buff_NoTaxes]={1,6}g_TexturePositions.GoodCategories=g_TexturePositions.GoodCategories or{}g_TexturePositions.GoodCategories[GoodCategories.GC_Ammunition]={10,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Animal]={4,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Clothes]={1,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Document]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Entertainment]={1,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Food]={1,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Gold]={1,8}g_TexturePositions.GoodCategories[GoodCategories.GC_Hygiene]={16,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Luxury]={16,3}g_TexturePositions.GoodCategories[GoodCategories.GC_Medicine]={2,10}g_TexturePositions.GoodCategories[GoodCategories.GC_None]={15,16}g_TexturePositions.GoodCategories[GoodCategories.GC_RawFood]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_RawMedicine]={2,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Research]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Resource]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Tools]={4,12}g_TexturePositions.GoodCategories[GoodCategories.GC_Water]={1,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Weapon]={8,5}end;function Lib.Promotion.Config:InitTexturePositionsAddon()if Framework.GetGameExtraNo()~=0 then g_TexturePositions.Entities[Entities.B_GrainField_AS]={1,13}g_TexturePositions.Entities[Entities.B_Outpost_AS]={12,3}g_TexturePositions.Buffs[Buffs.Buff_Gems]={1,1,1}g_TexturePositions.Buffs[Buffs.Buff_MusicalInstrument]={1,3,1}g_TexturePositions.Buffs[Buffs.Buff_Olibanum]={1,2,1}end end;Lib.Promotion.Config.RequirementWidgets={[1]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Settlers",[2]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Goods",[3]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/RichBuildings",[4]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Castle",[5]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Storehouse",[6]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Cathedral"}if GoodCategories then Lib.Promotion.Config.GoodCategoryNames={[GoodCategories.GC_Ammunition]={de="Munition",en="Ammunition",fr="Munition"},[GoodCategories.GC_Animal]={de="Nutztiere",en="Livestock",fr="Animaux d'élevage"},[GoodCategories.GC_Clothes]={de="Kleidung",en="Clothes",fr="Vêtements"},[GoodCategories.GC_Document]={de="Dokumente",en="Documents",fr="Documents"},[GoodCategories.GC_Entertainment]={de="Unterhaltung",en="Entertainment",fr="Divertissement"},[GoodCategories.GC_Food]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_Gold]={de="Gold",en="Gold",fr="Or"},[GoodCategories.GC_Hygiene]={de="Hygieneartikel",en="Hygiene",fr="Hygiène"},[GoodCategories.GC_Luxury]={de="Dekoration",en="Decoration",fr="Décoration"},[GoodCategories.GC_Medicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_None]={de="Nichts",en="None",fr="Rien"},[GoodCategories.GC_RawFood]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_RawMedicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_Research]={de="Forschung",en="Research",fr="Recherche"},[GoodCategories.GC_Resource]={de="Rohstoffe",en="Resource",fr="Ressources"},[GoodCategories.GC_Tools]={de="Werkzeug",en="Tools",fr="Outils"},[GoodCategories.GC_Water]={de="Wasser",en="Water",fr="Eau"},[GoodCategories.GC_Weapon]={de="Waffen",en="Weapon",fr="Armes"}}end;if Buffs then Lib.Promotion.Config.BuffTypeNames={[Buffs.Buff_ClothesDiversity]={de="Vielfältige Kleidung",en="Clothes variety",fr="Diversité vestimentaire"},[Buffs.Buff_Colour]={de="Farben beschaffen",en="Obtain color",fr="Se procurer des couleurs"},[Buffs.Buff_Entertainers]={de="Gaukler anheuern",en="Hire entertainer",fr="Engager des saltimbanques"},[Buffs.Buff_EntertainmentDiversity]={de="Vielfältige Unterhaltung",en="Entertainment variety",fr="Diversité des divertissements"},[Buffs.Buff_ExtraPayment]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},[Buffs.Buff_Festival]={de="Fest veranstalten",en="Hold Festival",fr="Organiser une fête"},[Buffs.Buff_FoodDiversity]={de="Vielfältige Nahrung",en="Food variety",fr="Diversité alimentaire"},[Buffs.Buff_HygieneDiversity]={de="Vielfältige Hygiene",en="Hygiene variety",fr="Diversité hygiénique"},[Buffs.Buff_NoTaxes]={de="Steuerbefreiung",en="No taxes",fr="Exonération fiscale"},[Buffs.Buff_Sermon]={de="Pregigt abhalten",en="Hold sermon",fr="Tenir des prêches"},[Buffs.Buff_Spice]={de="Salz beschaffen",en="Obtain salt",fr="Se procurer du sel"}}end;Lib.Promotion.Config.Description={Settlers={Title={de="Benötigte Siedler",en="Needed settlers",fr="Settlers nécessaires"},Text={de="- Benötigte Menge an Siedlern",en="- Needed number of settlers",fr="- Quantité de settlers nécessaire"}},RichBuildings={Title={de="Reiche Häuser",en="Rich city buildings",fr="Bâtiments riches"},Text={de="- Menge an reichen Stadtgebäuden",en="- Needed amount of rich city buildings",fr="- Quantité de bâtiments de la ville riches"}},Goods={Title={de="Waren lagern",en="Store Goods",fr="Entreposer des marchandises"},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},FullDecoratedBuildings={Title={de="Dekorierte Häuser",en="Decorated City buildings",fr="Bâtiments décorés"},Text={de="- Menge an voll dekorierten Gebäuden",en="- Amount of full decoraded city buildings",fr="- Quantité de bâtiments entièrement décorés"}},DecoratedBuildings={Title={de="Dekoration",en="Decoration",fr="Décoration"},Text={de="- Menge an Dekorationsgütern in der Siedlung",en="- Amount of decoration goods in settlement",fr="- Quantité de biens de décoration dans la ville"}},Headquarters={Title={de="Burgstufe",en="Castle level",fr="Niveau du château"},Text={de="- Benötigte Ausbauten der Burg",en="- Needed castle upgrades",fr="- Améliorations nécessaires du château"}},Storehouse={Title={de="Lagerhausstufe",en="Storehouse level",fr="Niveau de l'entrepôt"},Text={de="- Benötigte Ausbauten des Lagerhauses",en="- Needed storehouse upgrades",fr="- Améliorations nécessaires de l'entrepôt"}},Cathedrals={Title={de="Kirchenstufe",en="Cathedral level",fr="Niveau de la cathédrale"},Text={de="- Benötigte Ausbauten der Kirche",en="- Needed cathedral upgrades",fr="- Améliorations nécessaires de la cathédrale"}},Reputation={Title={de="Ruf der Stadt",en="City reputation",fr="Réputation de la ville"},Text={de="- Benötigter Ruf der Stadt",en="- Needed city reputation",fr="- Réputation de la ville nécessaire"}},EntityCategoryDefault={Title={de="",en="",fr=""},Text={de="- Benötigte Anzahl",en="- Needed amount",fr="- Nombre requis"}},Cattle={Title={de="Kühe",en="Cattle",fr="Vaches"},Text={de="- Benötigte Menge an Kühen",en="- Needed amount of cattle",fr="- Quantité de vaches nécessaire"}},Sheep={Title={de="Schafe",en="Sheeps",fr="Moutons"},Text={de="- Benötigte Menge an Schafen",en="- Needed amount of sheeps",fr="- Quantité de moutons nécessaire"}},Outposts={Title={de="Territorien",en="Territories",fr="Territoires"},Text={de="- Zu erobernde Territorien",en="- Territories to claim",fr="- Territoires à conquérir"}},CityBuilding={Title={de="Stadtgebäude",en="City buildings",fr="Bâtiment de la ville"},Text={de="- Menge benötigter Stadtgebäude",en="- Needed amount of city buildings",fr="- Quantité de bâtiments urbains nécessaires"}},OuterRimBuilding={Title={de="Rohstoffgebäude",en="Gatherer",fr="Cueilleur"},Text={de="- Menge benötigter Rohstoffgebäude",en="- Needed amount of gatherer",fr="- Quantité de bâtiments de matières premières nécessaires"}},FarmerBuilding={Title={de="Farmeinrichtungen",en="Farming structure",fr="Installations de la ferme"},Text={de="- Menge benötigter Nutzfläche",en="- Needed amount of farming structure",fr="- Quantité de surface utile nécessaire"}},Consume={Title={de="",en="",fr=""},Text={de="- Durch Siedler zu konsumierende Menge",en="- Amount to be consumed by the settlers",fr="- Quantité à consommer par les settlers"}},Products={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},Buff={Title={de="Bonus aktivieren",en="Activate Buff",fr="Activer bonus"},Text={de="- Aktiviere diesen Bonus auf den Ruf der Stadt",en="- Raise the city reputatition with this buff",fr="- Active ce bonus sur la réputation de la ville"}},Leader={Title={de="Batalione",en="Battalions",fr="Battalions"},Text={de="- Menge an Batalionen unterhalten",en="- Battalions you need under your command",fr="- Maintenir une quantité de bataillons"}},Soldiers={Title={de="Soldaten",en="Soldiers",fr="Soldats"},Text={de="- Menge an Streitkräften unterhalten",en="- Soldiers you need under your command",fr="- Maintenir une quantité de forces armées"}},Worker={Title={de="Arbeiter",en="Workers",fr="Travailleurs"},Text={de="- Menge an arbeitender Bevölkerung",en="- Workers you need under your reign",fr="- Quantité de population au travail"}},Entities={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed Amount",fr="- Quantité nécessaire"}},Buildings={Title={de="Gebäude",en="Buildings",fr="Bâtiments"},Text={de="- Gesamtmenge an Gebäuden",en="- Amount of buildings",fr="- Total des bâtiments"}},Weapons={Title={de="Waffen",en="Weapons",fr="Armes"},Text={de="- Benötigte Menge an Waffen",en="- Needed amount of weapons",fr="- Quantité d'armes nécessaire"}},HeavyWeapons={Title={de="Belagerungsgeräte",en="Siege Engines",fr="Matériel de siège"},Text={de="- Benötigte Menge an Belagerungsgeräten",en="- Needed amount of siege engine",fr="- Quantité de matériel de siège nécessaire"}},Spouse={Title={de="Ehefrauen",en="Spouses",fr="Épouses"},Text={de="- Benötigte Anzahl Ehefrauen in der Stadt",en="- Needed amount of spouses in your city",fr="- Nombre d'épouses nécessaires dans la ville"}}}Lib.Register("module/city/Promotion_API")Lib.Require("comfort/IsLocalScript")Lib.Register("module/faker/Technology_API")function AddCustomTechnology(dC,r,fS)Lib.Technology.Shared:AddCustomTechnology(dC,r,fS)end;API.AddCustomTechnology=AddCustomTechnology;Lib.Technology=Lib.Technology or{}Lib.Technology.Name="Technology"Lib.Technology.Global={}Lib.Technology.Local={}Lib.Technology.Shared={CustomTechnologySequence=0,CustomTechnologies={}}CONST_TECHNOLOGY_TO_INDEX={}Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/faker/Technology_API")Lib.Register("module/faker/Technology")function Lib.Technology.Global:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Local=nil end;self.IsInstalled=true end;function Lib.Technology.Global:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Local:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Global=nil end;self.IsInstalled=true end;function Lib.Technology.Local:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Shared:AddCustomTechnology(dC,r,fS)if Technologies[dC]then return end;self.CustomTechnologySequence=self.CustomTechnologySequence+1;local jE={dC,self.CustomTechnologySequence,fS,{},r}table.insert(self.CustomTechnologies,jE)Technologies[dC]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[dC]]=#self.CustomTechnologies;CONST_TECHNOLOGY_TO_INDEX[dC]=#self.CustomTechnologies;if IsLocalScript()then AddStringText("UI_ObjectNames/"..dC,r)g_TexturePositions.Technologies[Technologies[dC]]=fS else for f=1,8 do Logic.TechnologySetState(f,Technologies[dC],0)end end end;function Lib.Technology.Shared:IsCustomTechnology(jF)return jF>=1000 and CONST_TECHNOLOGY_TO_INDEX[jF]~=nil end;function Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared.Orig_Logic_TechnologyGetState=Logic.TechnologyGetState;Logic.TechnologyGetState=function(q,jF)return Lib.Technology.Shared:GetTechnologyState(q,jF)end;if not IsLocalScript()then Lib.Technology.Shared.Orig_Logic_TechnologySetState=Logic.TechnologySetState;Logic.TechnologySetState=function(q,jF,d7)Lib.Technology.Shared:SetTechnologyState(q,jF,d7)end end end;function Lib.Technology.Shared:InitNewTechnologies()self.CustomTechnologySequence=0;for g,h in pairs(Technologies)do if self.CustomTechnologySequence<h then self.CustomTechnologySequence=h end end;self.CustomTechnologySequence=self.CustomTechnologySequence+1000-self.CustomTechnologySequence;for f=1,#self.CustomTechnologies do self.CustomTechnologySequence=self.CustomTechnologySequence+1;self.CustomTechnologies[f][2]=self.CustomTechnologySequence;local b5=self.CustomTechnologies[f]Technologies[b5[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[b5[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[b5[1]]=f;if IsLocalScript()then AddStringText("UI_ObjectNames/"..b5[1],b5[4])g_TexturePositions.Technologies[Technologies[b5[1]]]=b5[3]end end end;function Lib.Technology.Shared:RestoreNewTechnologies()for f=1,#self.CustomTechnologies do local b5=self.CustomTechnologies[f]Technologies[b5[1]]=b5[2]CONST_TECHNOLOGY_TO_INDEX[Technologies[b5[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[b5[1]]=f end end;function Lib.Technology.Shared:GetTechnologyState(q,jF)if jF and self:IsCustomTechnology(jF)then local dW=CONST_TECHNOLOGY_TO_INDEX[jF]if self.CustomTechnologies[dW]then return self.CustomTechnologies[dW][4][q]or TechnologyStates.Locked end end;return self.Orig_Logic_TechnologyGetState(q,jF)end;function Lib.Technology.Shared:SetTechnologyState(q,jF,d7)if jF and self:IsCustomTechnology(jF)then local dW=CONST_TECHNOLOGY_TO_INDEX[jF]if self.CustomTechnologies[dW]then self.CustomTechnologies[dW][4][q]=d7;RequestHiResDelay(1,ExecuteLocal,[[Lib.Technology.Shared.CustomTechnologies[%d][4][%d] = %d]],dW,q,d7)return end end;self.Orig_Logic_TechnologySetState(q,jF,d7)end;RegisterModule(Lib.Technology.Name)Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Name="Promotion"Lib.Promotion.Global={TechnologiesToResearch={}}Lib.Promotion.Local={}Lib.Promotion.Shared={TechnologyConfig={{"R_MilitarySword","UI_ObjectNames/BuySwordfighters",{9,7,0},0},{"R_MilitaryBow","UI_ObjectNames/BuyBowmen",{9,8,0},0}}}CONST_REQUIREMENT_TOOLTIP_TYPE={}CONST_CONSUMED_GOODS_COUNTER={}Lib.Require("core/Core")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UITools")Lib.Require("module/city/Promotion_API")Lib.Require("module/city/Promotion_Config")Lib.Require("module/city/Promotion_Helper")Lib.Require("module/city/Promotion_Requirements")Lib.Register("module/city/Promotion")function Lib.Promotion.Global:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:OverrideKnightTitleChanged()self:OverwriteConsumedGoods()self:InitRelatedTechnologies()Lib.Promotion.Local=nil end;self.IsInstalled=true end;function Lib.Promotion.Global:OnSaveGameLoaded()end;function Lib.Promotion.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()for f=1,8 do ActivateNeedsAndRightsForPlayerByKnightTitle(f,0)end;self.LoadscreenClosed=true elseif aF==Report.KnightTitleChanged then self:UnlockRelatedTechnologies(arg[1],arg[2])local jG=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=jG or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aF==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Global:RegisterConsumedGoods(q,jH)CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}CONST_CONSUMED_GOODS_COUNTER[q][jH]=CONST_CONSUMED_GOODS_COUNTER[q][jH]or 0;CONST_CONSUMED_GOODS_COUNTER[q][jH]=CONST_CONSUMED_GOODS_COUNTER[q][jH]+1 end;function Lib.Promotion.Global:OverrideKnightTitleChanged()GameCallback_KnightTitleChanged_Orig_Promo=GameCallback_KnightTitleChanged;GameCallback_KnightTitleChanged=function(q,jI)GameCallback_KnightTitleChanged_Orig_Promo(q,jI)SendReport(Report.KnightTitleChanged,q,jI)SendReportToLocal(Report.KnightTitleChanged,q,jI)end end;function Lib.Promotion.Global:OverwriteConsumedGoods()GameCallback_ConsumeGood_Orig_Promo=GameCallback_ConsumeGood;GameCallback_ConsumeGood=function(jJ,jH,jK)GameCallback_ConsumeGood_Orig_Promo(jJ,jH,jK)SendReport(Report.GoodsConsumed,jJ,jH,jK)SendReportToLocal(Report.GoodsConsumed,jJ,jH,jK)end end;function Lib.Promotion.Global:InitRelatedTechnologies()self.TechnologiesToResearch[Technologies.R_MilitaryBow]={Technologies.R_BarracksArchers,Technologies.R_BowMaker}self.TechnologiesToResearch[Technologies.R_MilitarySword]={Technologies.R_Barracks,Technologies.R_SwordSmith}end;function Lib.Promotion.Global:UnlockRelatedTechnologies(q,jI)if NeedsAndRightsByKnightTitle[jI]then for g,h in pairs(NeedsAndRightsByKnightTitle[jI][4])do if self.TechnologiesToResearch[h]then for Z,jE in pairs(self.TechnologiesToResearch[h])do if Logic.TechnologyGetState(q,jE)==0 or Logic.TechnologyGetState(q,jE)==2 then Logic.TechnologySetState(q,jE,3)end end end end end end;function Lib.Promotion.Local:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:InitTexturePositions()self:OverwriteUpdateRequirements()self:OverwriteTooltips()Lib.Promotion.Global=nil end;self.IsInstalled=true end;function Lib.Promotion.Local:OnSaveGameLoaded()end;function Lib.Promotion.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()self.LoadscreenClosed=true elseif aF==Report.KnightTitleChanged then local jG=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=jG or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aF==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Local:RegisterConsumedGoods(q,jH)CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}CONST_CONSUMED_GOODS_COUNTER[q][jH]=CONST_CONSUMED_GOODS_COUNTER[q][jH]or 0;CONST_CONSUMED_GOODS_COUNTER[q][jH]=CONST_CONSUMED_GOODS_COUNTER[q][jH]+1 end;function Lib.Promotion.Local:InitTexturePositions()Lib.Promotion.Config:InitTexturePositions()Lib.Promotion.Config:InitTexturePositionsAddon()end;function Lib.Promotion.Local:OverwriteUpdateRequirements()GUI_Knight.UpdateRequirements=function()local jL=Lib.Promotion.Config.RequirementWidgets;local jM=1;local n=GUI.GetPlayerID()local jN=Logic.GetKnightTitle(n)local jO=jN+1;local fC=Logic.GetKnightID(n)local gl=Logic.GetEntityType(fC)XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitle","{center}"..GUI_Knight.GetTitleNameByTitleID(gl,jO))XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitleWhite","{center}"..GUI_Knight.GetTitleNameByTitleID(gl,jO))if KnightTitleRequirements[jO].Settlers~=nil then ChangeIcon(jL[jM].."/Icon",{5,16})local jP,jQ,jb=DoesNeededNumberOfSettlersForKnightTitleExist(n,jO)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Settlers"jM=jM+1 end;if KnightTitleRequirements[jO].RichBuildings~=nil then ChangeIcon(jL[jM].."/Icon",{8,4})local jP,jQ,jb=DoNeededNumberOfRichBuildingsForKnightTitleExist(n,jO)if jb==-1 then jb=Logic.GetNumberOfPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)end;XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="RichBuildings"jM=jM+1 end;if KnightTitleRequirements[jO].Headquarters~=nil then ChangeIcon(jL[jM].."/Icon",{4,7})local jP,jQ,jb=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,jO,EntityCategories.Headquarters)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ+1 .."/"..jb+1)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Headquarters"jM=jM+1 end;if KnightTitleRequirements[jO].Storehouse~=nil then ChangeIcon(jL[jM].."/Icon",{4,6})local jP,jQ,jb=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,jO,EntityCategories.Storehouse)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ+1 .."/"..jb+1)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Storehouse"jM=jM+1 end;if KnightTitleRequirements[jO].Cathedrals~=nil then ChangeIcon(jL[jM].."/Icon",{4,5})local jP,jQ,jb=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,jO,EntityCategories.Cathedrals)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ+1 .."/"..jb+1)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Cathedrals"jM=jM+1 end;if KnightTitleRequirements[jO].FullDecoratedBuildings~=nil then local jP,jQ,jb=DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(n,jO)local ja=KnightTitleRequirements[jO].FullDecoratedBuildings;ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Needs[Needs.Wealth])XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="FullDecoratedBuildings"jM=jM+1 end;if KnightTitleRequirements[jO].Reputation~=nil then ChangeIcon(jL[jM].."/Icon",{5,14})local jP,jQ,jb=DoesNeededCityReputationForKnightTitleExist(n,jO)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Reputation"jM=jM+1 end;if KnightTitleRequirements[jO].Goods~=nil then for f=1,#KnightTitleRequirements[jO].Goods do local b4=KnightTitleRequirements[jO].Goods[f][1]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Goods[b4])local jP,jQ,jb=DoesNeededNumberOfGoodTypesForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Goods"..f;jM=jM+1 end end;if KnightTitleRequirements[jO].Category~=nil then for f=1,#KnightTitleRequirements[jO].Category do local jR=KnightTitleRequirements[jO].Category[f][1]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.EntityCategories[jR])local jP,jQ,jb=DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)local jA={Logic.GetEntityTypesInCategory(jR)}if Logic.IsEntityTypeInCategory(jA[1],EntityCategories.GC_Weapon_Supplier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Weapons"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.SiegeEngine)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="HeavyWeapons"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.Spouse)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Spouse"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.Worker)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Worker"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.Soldier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Soldiers"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.Leader)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Leader"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.Outpost)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Outposts"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.CattlePasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Cattle"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.SheepPasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Sheep"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.CityBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="CityBuilding"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.OuterRimBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="OuterRimBuilding"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.GrainField)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.BeeHive)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(jA[1],EntityCategories.AttackableBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Buildings"..f else CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="EntityCategoryDefault"..f end;jM=jM+1 end end;if KnightTitleRequirements[jO].Entities~=nil then for f=1,#KnightTitleRequirements[jO].Entities do local ep=KnightTitleRequirements[jO].Entities[f][1]local go=Logic.GetEntityTypeName(ep)ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Entities[ep])local jP,jQ,jb=DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)local jS="Entities"..f;if go=="B_Beehive"or go:find("GrainField")or go:find("Pasture")then jS="FarmerBuilding"..f end;CONST_REQUIREMENT_TOOLTIP_TYPE[jM]=jS;jM=jM+1 end end;if KnightTitleRequirements[jO].Consume~=nil then for f=1,#KnightTitleRequirements[jO].Consume do local b4=KnightTitleRequirements[jO].Consume[f][1]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Goods[b4])local jP,jQ,jb=DoNeededNumberOfConsumedGoodsForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Consume"..f;jM=jM+1 end end;if KnightTitleRequirements[jO].Products~=nil then for f=1,#KnightTitleRequirements[jO].Products do local jT=KnightTitleRequirements[jO].Products[f][1]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.GoodCategories[jT])local jP,jQ,jb=DoNumberOfProductsInCategoryExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Products"..f;jM=jM+1 end end;if KnightTitleRequirements[jO].Buff~=nil then for f=1,#KnightTitleRequirements[jO].Buff do local bj=KnightTitleRequirements[jO].Buff[f]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Buffs[bj])local jP=DoNeededDiversityBuffForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","")if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Buff"..f;jM=jM+1 end end;if KnightTitleRequirements[jO].Custom~=nil then for f=1,#KnightTitleRequirements[jO].Custom do local jU;local jV=table.copy(KnightTitleRequirements[jO].Custom[f][2])if type(jV[3])=="string"then jU=jV[3]jV[3]=0 end;ChangeIcon(jL[jM].."/Icon",jV,nil,jU)local jP,jQ,jb=DoCustomFunctionForKnightTitleSucceed(n,jO,f)if jQ and jb then XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)else XGUIEng.SetText(jL[jM].."/Amount","")end;if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="Custom"..f;jM=jM+1 end end;if KnightTitleRequirements[jO].DecoratedBuildings~=nil then for f=1,#KnightTitleRequirements[jO].DecoratedBuildings do local b4=KnightTitleRequirements[jO].DecoratedBuildings[f][1]ChangeIcon(jL[jM].."/Icon",g_TexturePositions.Goods[b4])local jP,jQ,jb=DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(n,jO,f)XGUIEng.SetText(jL[jM].."/Amount","{center}"..jQ.."/"..jb)if jP then XGUIEng.ShowWidget(jL[jM].."/Done",1)else XGUIEng.ShowWidget(jL[jM].."/Done",0)end;XGUIEng.ShowWidget(jL[jM],1)CONST_REQUIREMENT_TOOLTIP_TYPE[jM]="DecoratedBuildings"..f;jM=jM+1 end end;for f=jM,6 do XGUIEng.ShowWidget(jL[f],0)end end end;function Lib.Promotion.Local:OverwriteTooltips()GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(...)local jW=XGUIEng.GetCurrentWidgetID()for g,h in pairs(Lib.Promotion.Config.RequirementWidgets)do if h.."/Icon"==XGUIEng.GetWidgetPathByID(jW)then local aj=CONST_REQUIREMENT_TOOLTIP_TYPE[g]local d_=tonumber(string.sub(aj,string.len(aj)))if d_~=nil then aj=string.sub(aj,1,string.len(aj)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(aj,d_)return end end;GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements(...)end;GUI_Knight.RewardTooltip=function(jX)Lib.Promotion.Local:RewardTooltipWrapped(jX)end;GUI_Knight.RequiredGoodTooltip=function()local aj=CONST_REQUIREMENT_TOOLTIP_TYPE[2]local d_=tonumber(string.sub(aj,string.len(aj)))if d_~=nil then aj=string.sub(aj,1,string.len(aj)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(aj,d_)end;Lib.Promotion.Config:InitAddonText()end;function Lib.Promotion.Local:RewardTooltipWrapped(j9)local jY=GUI_Knight.NextRightsForTitle[j9]local jZ=GetNameOfKeyInTable(Technologies,jY)local Name=string.gsub(jZ,"R_","")local j_=""local b8="B_"..Name;if GetStringText("UI_ObjectNames/"..b8)==""then b8="U_"..Name end;if GetStringText("UI_ObjectNames/"..b8)==""then b8="Start"..Name end;if GetStringText("UI_ObjectNames/"..b8)==""then b8="R_"..Name end;j_=GetStringText("UI_ObjectNames/"..b8)SetTooltipNormal(Localize(j_),"")end;function Lib.Promotion.Local:RequirementTooltipWrapped(dB,j9)local n=GUI.GetPlayerID()local k0=Logic.GetKnightTitle(n)local k1=""local ba=""if dB=="Consume"or dB=="Goods"or dB=="DecoratedBuildings"then local b4=KnightTitleRequirements[k0+1][dB][j9][1]local k2=Logic.GetGoodTypeName(b4)local k3=GetStringText("UI_ObjectNames/"..k2)if k3==nil then k3="Goods."..k2 end;k1=k3;ba=Lib.Promotion.Config.Description[dB].Text elseif dB=="Products"then local k4=Lib.Promotion.Config.GoodCategoryNames;local jR=KnightTitleRequirements[k0+1][dB][j9][1]local k5=Localize(k4[jR])if k5==nil then k5="ERROR: Name missng!"end;k1=k5;ba=Lib.Promotion.Config.Description[dB].Text elseif dB=="Entities"then local ep=KnightTitleRequirements[k0+1][dB][j9][1]local go=Logic.GetEntityTypeName(ep)local k6=GetStringText("Names/"..go)if k6==nil then k6="Entities."..go end;k1=k6;ba=Lib.Promotion.Config.Description[dB].Text elseif dB=="Custom"then local k7=KnightTitleRequirements[k0+1].Custom[j9]k1=k7[3]ba=k7[4]elseif dB=="Buff"then local k8=Lib.Promotion.Config.BuffTypeNames;local k9=KnightTitleRequirements[k0+1][dB][j9]local ka=Localize(k8[k9])if ka==nil then ka="ERROR: Name missng!"end;k1=ka;ba=Lib.Promotion.Config.Description[dB].Text else k1=Lib.Promotion.Config.Description[dB].Title;ba=Lib.Promotion.Config.Description[dB].Text end;SetTooltipNormal(Localize(k1),Localize(ba),nil)end;InitKnightTitleTables=function()NeedsAndRightsByKnightTitle={}KnightTitleRequirements={}end;function Lib.Promotion.Shared:UpdateInvisibleTechnologies()if not IsLocalScript()then return end;if TechnologiesNotShownForKnightTitle==nil then TechnologiesNotShownForKnightTitle={}TechnologiesNotShownForKnightTitle[Technologies.R_Nutrition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Clothes]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Hygiene]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Entertainment]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Wealth]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Prosperity]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Military]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Column]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Pavilion]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueDario]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueFamily]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueProduction]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueSettler]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Victory]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Barracks]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BarracksArchers]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BowMaker]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SwordSmith]=true end;if g_GameExtraNo>0 and Technologies.R_CallGeologist then TechnologiesNotShownForKnightTitle[Technologies.R_CallGeologist]=true end end;function Lib.Promotion.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])end end end end;RegisterModule(Lib.Promotion.Name)Lib.Register("module/io/IO_Behavior")function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(b2,b3)if b2==0 then assert(b3~=nil and b3~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if b3~=nil and b3~=""then table.insert(self.ScriptNames,b3)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,b1)local B=GetID(self.ScriptName)if B==0 then return end;CONST_INITIALIZED_OBJECTS[B]=b1.Identifier;local kb;if self.RewardType and self.RewardType~="-"then kb={Goods[self.RewardType],self.RewardAmount}end;local kc;if self.FirstCostType and self.FirstCostType~="-"then kc=kb or{}table.insert(kc,Goods[self.FirstCostType])table.insert(kc,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then kc=kb or{}table.insert(kc,Goods[self.SecondCostType])table.insert(kc,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=kb,Costs=kc}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IO_API")function SetupObject(fD)if GUI then return end;return Lib.IO.Global:CreateObject(fD)end;API.CreateObject=SetupObject;function DisposeObject(d6)if GUI or not CONST_IO[d6]then return end;Lib.IO.Global:DestroyObject(d6)end;API.DisposeObject=DisposeObject;function ResetObject(d6)if GUI or not CONST_IO[d6]then return end;Lib.IO.Global:ResetObject(d6)InteractiveObjectDeactivate(d6)end;API.ResetObject=ResetObject;function InteractiveObjectAddCustomName(dC,d9)local kd=Entities[dC]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectSetQuestName("%s", %s)]],dC,type(d9)=="table"and table.tostring(d9)or"\""..d9 .."\"")return end;AddStringText(kd..dC,d9)end;API.InteractiveObjectSetQuestName=InteractiveObjectAddCustomName;function InteractiveObjectDeleteCustomName(dC)local kd=Entities[dC]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectDeleteCustomName("%s")]],dC)return end;DeleteStringText(kd..dC)end;API.InteractiveObjectUnsetQuestName=InteractiveObjectDeleteCustomName;function AllowActivateIronMines(q,ke)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillIronMine,ke and 3 or 1)end;API.AllowActivateIronMines=AllowActivateIronMines;function RequireTitleToRefilIronMines(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillIronMine)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_RefillIronMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillIronMine,0)end end;API.RequireTitleToRefilIronMines=RequireTitleToRefilIronMines;function AllowActivateStoneMines(q,ke)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillStoneMine,ke and 3 or 1)end;API.AllowActivateStoneMines=AllowActivateStoneMines;function RequireTitleToRefilStoneMines(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillStoneMine)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_RefillStoneMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillStoneMine,0)end end;API.RequireTitleToRefilStoneMines=RequireTitleToRefilStoneMines;function AllowActivateCisterns(q,ke)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillCistern,ke and 3 or 1)end;API.AllowActivateCisterns=AllowActivateCisterns;function RequireTitleToRefilCisterns(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillCistern)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_RefillCistern)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillCisternMine,0)end end;API.RequireTitleToRefilCisterns=RequireTitleToRefilCisterns;function AllowActivateTradepost(q,ke)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_Tradepost,ke and 3 or 1)end;API.AllowActivateTradepost=AllowActivateTradepost;function RequireTitleToBuildTradeposts(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Tradepost)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_Tradepost)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Tradepost,0)end end;API.RequireTitleToBuildTradeposts=RequireTitleToBuildTradeposts;InteractiveObjectActivate=function(d6,d7,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[d6]then local kf=CONST_IO[d6].Slave or d6;if CONST_IO[d6].Slave then CONST_IO_SLAVE_STATE[kf]=1;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 1]],kf))end;Lib.IO.Global:SetObjectState(kf,d7,unpack(arg))CONST_IO[d6].IsActive=true;ExecuteLocal([[CONST_IO["%s"].IsActive = true]],d6)else Lib.IO.Global:SetObjectState(d6,d7,unpack(arg))end end end;API.InteractiveObjectActivate=InteractiveObjectActivate;InteractiveObjectDeactivate=function(d6,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[d6]then local kf=CONST_IO[d6].Slave or d6;if CONST_IO[d6].Slave then CONST_IO_SLAVE_STATE[kf]=0;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 0]],kf))end;Lib.IO.Global:SetObjectState(kf,2,unpack(arg))CONST_IO[d6].IsActive=false;ExecuteLocal([[CONST_IO["%s"].IsActive = false]],d6)else Lib.IO.Global:SetObjectState(d6,2,unpack(arg))end end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;Lib.IO=Lib.IO or{}Lib.IO.Name="IO"Lib.IO.Global={SlaveSequence=0}Lib.IO.Local={Data={}}Lib.IO.Shared={TechnologyConfig={{"R_CallGeologist",{de="Geologen rufen",en="Order geologist",fr="Ordre géologue"},{8,1,1},1},{"R_RefillIronMine",{de="Eisenmine auffüllen",en="Refill mine",fr="Recharger le mien"},{8,2,1},1},{"R_RefillStoneMine",{de="Steinbruch auffüllen",en="Refill quarry",fr="Carrière de recharge"},{8,3,1},1},{"R_RefillCistern",{de="Brunnen auffüllen",en="Refill well",fr="Bien remplir"},{8,4,1},1},{"R_Tradepost",{de="Handelsposten bauen",en="Build Tradepost",fr="Route commerciale"},{3,1,1},1}}}CONST_IO={}CONST_IO_SLAVE_TO_MASTER={}CONST_IO_SLAVE_STATE={}CONST_IO_LAST_OBJECT=0;CONST_IO_LAST_HERO=0;Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/faker/Technology")Lib.Require("module/io/IO_API")Lib.Require("module/io/IO_Behavior")Lib.Register("module/io/IO")function Lib.IO.Global:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideObjectInteraction()self:StartObjectDestructionController()self:StartObjectConditionController()Lib.IO.Local=nil end;self.IsInstalled=true end;function Lib.IO.Global:OnSaveGameLoaded()end;function Lib.IO.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ObjectInteraction then self:OnObjectInteraction(arg[1],arg[2],arg[3])elseif aF==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end end end;function Lib.IO.Global:OnObjectInteraction(d6,i6,q)CONST_IO_LAST_OBJECT=GetID(d6)CONST_IO_LAST_HERO=i6;if CONST_IO_SLAVE_TO_MASTER[d6]then d6=CONST_IO_SLAVE_TO_MASTER[d6]end;if CONST_IO[d6]then CONST_IO[d6].IsUsed=true;ExecuteLocal([[
            local ScriptName = "%s"
            if CONST_IO[ScriptName] then
                CONST_IO[ScriptName].IsUsed = true
            end
        ]],d6)if CONST_IO[d6].Replacement then ReplaceEntity(d6,CONST_IO[d6].Replacement)end;if CONST_IO[d6].Action then CONST_IO[d6]:Action(q,i6)end end end;function Lib.IO.Global:CreateObject(fD)local an=GetID(fD.Name)if an==0 then return end;self:DestroyObject(fD.Name)local h9=Logic.GetEntityTypeName(Logic.GetEntityType(an))if h9 and not h9:find("^I_X_")then self:CreateSlaveObject(fD)end;fD.IsActive=true;fD.IsUsed=false;fD.Player=fD.Player or{1,2,3,4,5,6,7,8}fD.State=fD.State or 0;fD.Waittime=fD.Waittime or 5;fD.Distance=fD.Distance or 1000;CONST_IO[fD.Name]=fD;ExecuteLocal([[CONST_IO["%s"] = %s]],fD.Name,table.tostring(CONST_IO[fD.Name]))self:SetupObject(fD)return fD end;function Lib.IO.Global:DestroyObject(d6)if not CONST_IO[d6]then return end;if CONST_IO[d6].Slave then CONST_IO_SLAVE_TO_MASTER[CONST_IO[d6].Slave]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],CONST_IO[d6].Slave)CONST_IO_SLAVE_STATE[CONST_IO[d6].Slave]=nil;DestroyEntity(CONST_IO[d6].Slave)end;self:SetObjectState(d6,2)SendReport(Report.ObjectDelete,d6)SendReportToLocal(Report.ObjectDelete,d6)ExecuteLocal([[CONST_IO["%s"] = nil]],d6)CONST_IO[d6]=nil end;function Lib.IO.Global:CreateSlaveObject(kg)local Name;for g,h in pairs(CONST_IO_SLAVE_TO_MASTER)do if h==kg.Name and IsExisting(g)then Name=g end end;if Name==nil then self.SlaveSequence=self.SlaveSequence+1;Name="LIB_IO_SlaveObject_"..self.SlaveSequence end;local kh=GetID(Name)if not IsExisting(Name)then local I,J,K=Logic.EntityGetPos(GetID(kg.Name))kh=Logic.CreateEntity(Entities.I_X_DragonBoatWreckage,I,J,0,0)Logic.SetModel(kh,Models.Effects_E_Mosquitos)Logic.SetEntityName(kh,Name)CONST_IO_SLAVE_TO_MASTER[Name]=kg.Name;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = "%s"]],Name,kg.Name)kg.Slave=Name end;CONST_IO_SLAVE_STATE[Name]=1;return kh end;function Lib.IO.Global:SetupObject(kg)local an=GetID(kg.Slave and kg.Slave or kg.Name)Logic.InteractiveObjectClearCosts(an)Logic.InteractiveObjectClearRewards(an)Logic.InteractiveObjectSetInteractionDistance(an,kg.Distance)Logic.InteractiveObjectSetTimeToOpen(an,kg.Waittime)local ki=kg.RewardResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetRewardResourceCartType(an,ki)local kj=kg.RewardGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetRewardGoldCartType(an,kj)local kk=kg.CostResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetCostResourceCartType(an,kk)local kl=kg.CostGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetCostGoldCartType(an,kl)if kg.Reward then Logic.InteractiveObjectAddRewards(an,kg.Reward[1],kg.Reward[2])end;if kg.Costs and kg.Costs[1]then Logic.InteractiveObjectAddCosts(an,kg.Costs[1],kg.Costs[2])end;if kg.Costs and kg.Costs[3]then Logic.InteractiveObjectAddCosts(an,kg.Costs[3],kg.Costs[4])end;table.insert(HiddenTreasures,an)InteractiveObjectActivate(Logic.GetEntityName(an),kg.State or 0)end;function Lib.IO.Global:ResetObject(d6)local an=GetID(CONST_IO[d6].Slave and CONST_IO[d6].Slave or d6)RemoveInteractiveObjectFromOpenedList(an)table.insert(HiddenTreasures,an)Logic.InteractiveObjectSetAvailability(an,true)self:SetObjectState(an,CONST_IO[d6].State or 0)CONST_IO[d6].IsUsed=false;CONST_IO[d6].IsActive=true;SendReport(Report.ObjectReset,d6)SendReportToLocal(Report.ObjectReset,d6)end;function Lib.IO.Global:SetObjectState(d6,d7,...)arg=(not arg or#arg==0)and{1,2,3,4,5,6,7,8}or arg;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(d6),f,2)end;for f=1,#arg,1 do Logic.InteractiveObjectSetPlayerState(GetID(d6),arg[f],d7)end;Logic.InteractiveObjectSetAvailability(GetID(d6),d7~=2)end;function Lib.IO.Global:OverrideObjectInteraction()GameCallback_OnObjectInteraction=function(ap,q)OnInteractiveObjectOpened(ap,q)OnTreasureFound(ap,q)local aO=Logic.GetEntityName(ap)if CONST_IO_SLAVE_TO_MASTER[aO]then aO=CONST_IO_SLAVE_TO_MASTER[aO]end;local i8={}Logic.GetKnights(q,i8)local fC=GetClosestToTarget(ap,i8)SendReport(Report.ObjectInteraction,aO,fC,q)SendReportToLocal(Report.ObjectInteraction,aO,fC,q)end;QuestTemplate.AreObjectsActivated=function(self,km)for f=1,km[0]do if not km[-f]then km[-f]=GetID(km[f])end;local k6=Logic.GetEntityName(km[-f])if CONST_IO_SLAVE_TO_MASTER[k6]then k6=CONST_IO_SLAVE_TO_MASTER[k6]end;if CONST_IO[k6]then if CONST_IO[k6].IsUsed~=true then return false end elseif Logic.IsInteractiveObject(km[-f])then if not IsInteractiveObjectOpen(km[-f])then return false end end end;return true end end;function Lib.IO.Global:ProcessChatInput(d9)local fi=Lib.Core.Debug:CommandTokenizer(d9)for f=1,#fi,1 do if fi[f][1]=="enableobject"then local State=fi[f][3]and tonumber(fi[f][3])or nil;local n=fi[f][4]and tonumber(fi[f][4])or nil;error(IsExisting(fi[f][2]),"object "..fi[f][2].." does not exist!")InteractiveObjectActivate(fi[f][2],State,n)log("activated object "..fi[f][2]..".")elseif fi[f][1]=="disableobject"then local n=fi[f][3]and tonumber(fi[f][3])or nil;error(IsExisting(fi[f][2]),"object "..fi[f][2].." does not exist!")InteractiveObjectDeactivate(fi[f][2],n)log("deactivated object "..fi[f][2]..".")elseif fi[f][1]=="initobject"then error(IsExisting(fi[f][2]),"object "..fi[f][2].." does not exist!")API.SetupObject({Name=fi[f][2],Waittime=0,State=0})log("quick initalization of object "..fi[f][2]..".")end end end;function Lib.IO.Global:StartObjectDestructionController()RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local kn=Event.GetEntityID()local kf=Logic.GetEntityName(kn)local ko=CONST_IO_SLAVE_TO_MASTER[kf]if kf and ko then local kp=CONST_IO[ko]if not kp then return end;log("slave "..kf.." of master "..ko.." has been deleted!")log("try to create new slave...")CONST_IO_SLAVE_TO_MASTER[kf]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],kf)local kh=Lib.IO.Global:CreateSlaveObject(kp)error(IsExisting(kh),"failed to create slave!")Lib.IO.Global:SetupObject(kp)if kp.IsUsed==true or CONST_IO_SLAVE_STATE[kf]and CONST_IO_SLAVE_STATE[kf]==0 then InteractiveObjectDeactivate(kp.Slave)end;log("new slave created for master "..ko..".")end end)end;function Lib.IO.Global:StartObjectConditionController()RequestHiResJob(function()for g,h in pairs(CONST_IO)do if h and not h.IsUsed and h.IsActive then CONST_IO[g].IsFullfilled=true;if CONST_IO[g].Condition then local kq=h:Condition()CONST_IO[g].IsFullfilled=kq end;ExecuteLocal([[
                    local ScriptName = "%s"
                    if CONST_IO[ScriptName] then
                        CONST_IO[ScriptName].IsFullfilled = %s
                    end
                ]],g,tostring(CONST_IO[g].IsFullfilled))end end end)end;function Lib.IO.Local:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideGameFunctions()Lib.IO.Global=nil end;self.IsInstalled=true end;function Lib.IO.Local:OnSaveGameLoaded()end;function Lib.IO.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ObjectReset then if CONST_IO[arg[1]]then CONST_IO[arg[1]].IsUsed=false end elseif aF==Report.ObjectInteraction then CONST_IO_LAST_OBJECT=GetID(arg[1])CONST_IO_LAST_HERO=arg[2]end end;function Lib.IO.Local:OverrideGameFunctions()g_CurrentDisplayedQuestID=0;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO=GUI_Interaction.InteractiveObjectClicked;GUI_Interaction.InteractiveObjectClicked=function()local f=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local B=g_Interaction.ActiveObjectsOnScreen[f]local n=GUI.GetPlayerID()if not B then return end;local aO=Logic.GetEntityName(B)if CONST_IO_SLAVE_TO_MASTER[aO]then aO=CONST_IO_SLAVE_TO_MASTER[aO]end;if CONST_IO[aO]then if not CONST_IO[aO].IsFullfilled then local ba=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")if CONST_IO[aO].ConditionInfo then ba=ConvertPlaceholders(Localize(CONST_IO[aO].ConditionInfo))end;Message(ba)return end;if type(CONST_IO[aO].Costs)=="table"and#CONST_IO[aO].Costs~=0 then local ci=Logic.GetStoreHouse(n)local ar=Logic.GetHeadquarters(n)if ci==nil or ci==0 or ar==nil or ar==0 then GUI.AddNote("DEBUG: Player needs special buildings when using activation costs!")return end end end;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO()if not Framework.IsNetworkGame()then local i8={}Logic.GetKnights(n,i8)local fC=GetClosestToTarget(B,i8)SendReportToGlobal(Report.ObjectClicked,aO,fC,n)SendReport(Report.ObjectClicked,aO,fC,n)end end;GUI_Interaction.InteractiveObjectUpdate=function()if g_Interaction.ActiveObjects==nil then return end;local n=GUI.GetPlayerID()for f=1,#g_Interaction.ActiveObjects do local kr=g_Interaction.ActiveObjects[f]local ks=kr;local aO=Logic.GetEntityName(kr)if CONST_IO_SLAVE_TO_MASTER[aO]then ks=GetID(CONST_IO_SLAVE_TO_MASTER[aO])end;local ej,ek=GUI.GetEntityInfoScreenPosition(ks)local kt,ku=GUI.GetScreenSize()if ej~=0 and ek~=0 and ej>-50 and ek>-50 and ej<kt+50 and ek<ku+50 then if not table.contains(g_Interaction.ActiveObjectsOnScreen,kr)then table.insert(g_Interaction.ActiveObjectsOnScreen,kr)end else for f=1,#g_Interaction.ActiveObjectsOnScreen do if g_Interaction.ActiveObjectsOnScreen[f]==kr then table.remove(g_Interaction.ActiveObjectsOnScreen,f)end end end end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local j1="/InGame/Root/Normal/InteractiveObjects/"..f;if XGUIEng.IsWidgetExisting(j1)==1 then local kr=g_Interaction.ActiveObjectsOnScreen[f]local ks=kr;local aO=Logic.GetEntityName(kr)if CONST_IO_SLAVE_TO_MASTER[aO]then ks=GetID(CONST_IO_SLAVE_TO_MASTER[aO])aO=Logic.GetEntityName(ks)end;local ep=Logic.GetEntityType(kr)local go=Logic.GetEntityTypeName(ep)local ej,ek=GUI.GetEntityInfoScreenPosition(ks)local kv={XGUIEng.GetWidgetScreenSize(j1)}XGUIEng.SetWidgetScreenPosition(j1,ej-kv[1]/2,ek-kv[2]/2)local kw={Logic.InteractiveObjectGetCosts(kr)}local kx={Logic.InteractiveObjectGetEffectiveCosts(kr,n)}local ky=Logic.InteractiveObjectGetAvailability(kr)local kz=Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(kr,n)local kA=false;if kw[1]~=nil and kx[1]==nil and ky==true then kA=true end;if kz==false then kA=true end;if Logic.GetTime()>1 and g_GameExtraNo>0 then if kA==false and string.find(go,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kA=true end end;if kA==false and string.find(go,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kA=true end end;if kA==false and(string.find(go,"B_Cistern")or string.find(go,"B_Well"))then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kA=true end end;if kA==false and string.find(go,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then kA=true end end end;if kA==false then if CONST_IO[aO]and type(CONST_IO[aO].Player)=="table"then kA=not self:IsAvailableForGuiPlayer(aO)elseif CONST_IO[aO]and type(CONST_IO[aO].Player)=="number"then kA=CONST_IO[aO].Player~=n end end;if kA==true then XGUIEng.DisableButton(j1,1)else XGUIEng.DisableButton(j1,0)end;if GUI_Interaction.InteractiveObjectUpdateEx1~=nil then GUI_Interaction.InteractiveObjectUpdateEx1(j1,ep)end;XGUIEng.ShowWidget(j1,1)end end;for f=#g_Interaction.ActiveObjectsOnScreen+1,2 do local j1="/InGame/Root/Normal/InteractiveObjects/"..f;XGUIEng.ShowWidget(j1,0)end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local j1="/InGame/Root/Normal/InteractiveObjects/"..f;local kr=g_Interaction.ActiveObjectsOnScreen[f]local aO=Logic.GetEntityName(kr)if CONST_IO_SLAVE_TO_MASTER[aO]then aO=CONST_IO_SLAVE_TO_MASTER[aO]end;if CONST_IO[aO]and CONST_IO[aO].Texture then local jU;local af=CONST_IO[aO].Texture[1]or 14;local cC=CONST_IO[aO].Texture[2]or 10;local cu=CONST_IO[aO].Texture[3]or 0;if type(cu)=="string"then jU=cu;cu=0 end;ChangeIcon(j1,{af,cC,cu},nil,jU)end end end;GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO=GUI_Interaction.InteractiveObjectMouseOver;GUI_Interaction.InteractiveObjectMouseOver=function()local n=GUI.GetPlayerID()local g_=XGUIEng.GetCurrentWidgetID()local kB=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local kr=g_Interaction.ActiveObjectsOnScreen[kB]local ep=Logic.GetEntityType(kr)local go=Logic.GetEntityTypeName(ep)if tonumber(Logic.GetEntityName(kr))~=nil and string.find(go,"^I_X_")then GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO()return end;local kC=false;local kD=false;if g_GameExtraNo>0 then kC=string.find(go,"^R_Stone")~=nil or string.find(go,"^R_Iron")~=nil or string.find(go,"^B_Cistern")~=nil or string.find(go,"^B_Well")~=nil;kD=string.find(go,"^I_X_Trade")~=nil end;local kE;local b8="InteractiveObjectAvailable"if Logic.InteractiveObjectGetAvailability(kr)==false then b8="InteractiveObjectNotAvailable"elseif Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(kr,n)==false then kE="InteractiveObjectAvailableReward"elseif XGUIEng.IsButtonDisabled(g_)==1 then kE="UpgradeOutpost"if g_GameExtraNo>0 then if string.find(go,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kE=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillStoneMine)or kE end end;if string.find(go,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kE=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillIronMine)or kE end end;if string.find(go,"B_Cistern")or string.find(go,"B_Well")then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then kE=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillCistern)or kE end end;if string.find(go,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then kE=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_Tradepost)or kE end end end end;local k1="UI_ObjectNames/"..b8;local ba="UI_ObjectDescription/"..b8;local kF=kE~=nil and"UI_ButtonDisabled/"..kE or nil;if kC then k1="UI_ObjectNames/InteractiveObjectGeologist"end;if kD then k1="UI_ObjectNames/InteractiveObjectTradepost"end;local kG=false;local gi={Logic.InteractiveObjectGetEffectiveCosts(kr,n)}if gi and gi[1]and gi[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(gi[1])~=GoodCategories.GC_Resource then kG=true end;local aO=Logic.GetEntityName(kr)if CONST_IO_SLAVE_TO_MASTER[aO]then aO=CONST_IO_SLAVE_TO_MASTER[aO]end;if CONST_IO[aO]and CONST_IO[aO].IsUsed~=true then b8="InteractiveObjectAvailable"if CONST_IO[aO]and type(CONST_IO[aO].Player)=="table"and not self:IsAvailableForGuiPlayer(aO)or CONST_IO[aO]and type(CONST_IO[aO].Player)=="number"and CONST_IO[aO].Player~=n or Logic.InteractiveObjectGetAvailability(kr)==false then b8="InteractiveObjectNotAvailable"end;k1=ConvertPlaceholders(Localize(CONST_IO[aO].Title or k1))if k1 and k1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then k1=XGUIEng.GetStringTableText(k1)end;ba=ConvertPlaceholders(Localize(CONST_IO[aO].Text or ba))if ba and ba:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba=XGUIEng.GetStringTableText(ba)end;kF=CONST_IO[aO].DisabledText or kF;if kF then kF=ConvertPlaceholders(Localize(kF))if kF and kF:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then kF=XGUIEng.GetStringTableText(kF)end end;gi=CONST_IO[aO].Costs;if gi and gi[1]and gi[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(gi[1])~=GoodCategories.GC_Resource then kG=true end end;SetTooltipCosts(k1,ba,kF,gi,kG)end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(cP,cQ)local ib=tonumber(cP)if ib then cP=ib end;local bF,cR=GUI_Interaction.GetPotentialSubQuestAndType(cP)local ic="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local id;local ie;g_CurrentDisplayedQuestID=cP;if cR==Objective.Object then id=ic.."/List"ie=Wrapped_GetStringTableText(cP,"UI_Texts/QuestInteraction")local ig={}assert(bF~=nil)for f=1,bF.Objectives[1].Data[0]do local kH;if Logic.IsEntityDestroyed(bF.Objectives[1].Data[f])then kH=g_Interaction.SavedQuestEntityTypes[cP][f]else kH=Logic.GetEntityType(GetID(bF.Objectives[1].Data[f]))end;local kI=Logic.GetEntityName(bF.Objectives[1].Data[f])local kJ=""if kH~=nil and kH~=0 then local kK=Logic.GetEntityTypeName(kH)kJ=Wrapped_GetStringTableText(cP,"Names/"..kK)or GetStringText("Names/"..kK)if kJ==""then kJ=Wrapped_GetStringTableText(cP,"UI_ObjectNames/"..kK)or GetStringText("UI_ObjectNames/"..kK)end;if kJ==nil then kJ="Debug: ObjectName missing for "..kK end end;table.insert(ig,Localize(ConvertPlaceholders(kJ)))end;for f=1,4 do local ai=ig[f]if ai==nil then ai=""end;XGUIEng.SetText(id.."/Entry"..f,"{center}"..ai)end;SetIcon(id.."/QuestTypeIcon",{14,10})XGUIEng.SetText(id.."/Caption","{center}"..ie)XGUIEng.ShowWidget(id,1)else GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO(cP,cQ)end end end;function Lib.IO.Local:IsAvailableForGuiPlayer(d6)local n=GUI.GetPlayerID()if CONST_IO[d6]and type(CONST_IO[d6].Player)=="table"then for f=1,8 do if CONST_IO[d6].Player[f]and CONST_IO[d6].Player[f]==n then return true end end;return false end;return true end;function Lib.IO.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for aV=1,8 do Logic.TechnologySetState(aV,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.IO.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOChest_API")function CreateRandomChest(r,jH,kL,kM,fo,gW)if IsLocalScript()then return end;if not gW then gW=fo;fo=nil end;assert(IsExisting(r),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,jH)~=nil,"Good type is invalid!")assert(type(kL)=="number"and kL>=1,"Minimum is to low!")kM=kM or kL;assert(type(kM)=="number"or kM>=1,"Maximum is to low!")assert(kM>=kL,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(r,jH,kL,kM,false,false,fo,gW)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomChest(r,jH,kL,kM,fo,gW)if IsLocalScript()then return end;if not gW then gW=fo;fo=nil end;assert(IsExisting(r),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,jH)~=nil,"Good type is invalid!")assert(type(kL)=="number"and kL>=1,"Minimum is to low!")kM=kM or kL;assert(type(kM)=="number"or kM>=1,"Maximum is to low!")assert(kM>=kL,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(r,jH,kL,kM,false,true,fo,gW)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomGoldChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomGoldChest(r)end;API.CreateRandomGoldChest=CreateRandomGoldChest;function CreateRandomResourceChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomResourceChest(r)end;API.CreateRandomResourceChest=CreateRandomResourceChest;function CreateRandomLuxuryChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomLuxuryChest(r)end;API.CreateRandomLuxuryChest=CreateRandomLuxuryChest;Lib.IOChest=Lib.IOChest or{}Lib.IOChest.Name="IOChest"Lib.IOChest.Global={}Lib.IOChest.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOChest_API")Lib.Register("module/io/IOChest")function Lib.IOChest.Global:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Lib.IOChest.Local=nil end;self.IsInstalled=true end;function Lib.IOChest.Global:OnSaveGameLoaded()end;function Lib.IOChest.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif aF==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then self:ResetIOChest(arg[1])end elseif aF==Report.ObjectDelete then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then end end end;function Lib.IOChest.Global:ProcessChatInput(d9)local fi=Lib.Core.Debug:CommandTokenizer(d9)for f=1,#fi,1 do if fi[f][1]=="spawncow"then if not IsExisting(fi[f][2])then CreateRandomGoldChest(fi[f][2])end elseif fi[f][1]=="spawnsheep"then if not IsExisting(fi[f][2])then CreateRandomResourceChest(fi[f][2])end elseif fi[f][1]=="luxurychest"then if not IsExisting(fi[f][2])then CreateRandomLuxuryChest(fi[f][2])end end end end;function Lib.IOChest.Global:CreateRandomChest(r,jH,kL,kM,kN,kO,fo,gW)kL=math.floor(kL~=nil and kL>0 and kL or 1)kM=math.floor(kM~=nil and kM>1 and kM or 2)assert(jH~=nil,"CreateRandomChest: Good does not exist!")assert(kL<=kM,"CreateRandomChest: min amount must be smaller or equal than max amount!")log("Creating chest (%s, %s, %d, %d, %s, %s)",r,Logic.GetGoodTypeName(jH),kL,kM,tostring(kN==true),tostring(kO==true))if not kO then local bJ=ReplaceEntity(r,Entities.XD_ScriptEntity,0)Logic.SetModel(bJ,Models.Doodads_D_X_ChestClose)Logic.SetVisible(bJ,true)end;local cj=kL;if kL<kM then cj=math.random(kL,kM)end;local kP;local kQ;if not kN then kQ={jH,cj}else kP={jH,cj}end;SetupObject{Name=r,IsInteractiveChest=true,Reward=kQ,DirectReward=kP,Texture={1,6},Distance=kO and 1200 or 650,Waittime=0,State=0,DoNotChangeModel=kO==true,ActivationCondition=fo,ActivationAction=gW,Condition=function(gy)if gy.ActivationCondition then return gy.ActivationCondition(gy)end;return true end,Action=function(gy,i6,q)if not gy.DoNotChangeModel then Logic.SetModel(GetID(gy.Name),Models.Doodads_D_X_ChestOpenEmpty)end;if gy.DirectReward then AddGood(gy.DirectReward[1],gy.DirectReward[2],q)end;if gy.ActivationAction then gy.ActivationAction(gy,i6,q)end;SendReport(Report.InteractiveTreasureActivated,gy.Name,i6,q)SendReportToLocal(Report.InteractiveTreasureActivated,gy.Name,i6,q)end}end;function Lib.IOChest.Global:ResetIOChest(d6)if not CONST_IO[d6].DoNotChangeModel then local B=ReplaceEntity(d6,Entities.XD_ScriptEntity,0)Logic.SetModel(B,Models.Doodads_D_X_ChestClose)Logic.SetVisible(B,true)end end;function Lib.IOChest.Global:CreateRandomGoldChest(r)self:CreateRandomChest(r,Goods.G_Gold,300,600,false)end;function Lib.IOChest.Global:CreateRandomResourceChest(r)local kR={Goods.G_Iron,Goods.G_Stone,Goods.G_Wood,Goods.G_Wool,Goods.G_Carcass,Goods.G_Herb,Goods.G_Honeycomb,Goods.G_Milk,Goods.G_RawFish,Goods.G_Grain}local kS=kR[math.random(1,#kR)]self:CreateRandomChest(r,kS,30,60,false)end;function Lib.IOChest.Global:CreateRandomLuxuryChest(r)local kT={Goods.G_Salt,Goods.G_Dye}if g_GameExtraNo>=1 then table.insert(kT,Goods.G_Gems)table.insert(kT,Goods.G_MusicalInstrument)table.insert(kT,Goods.G_Olibanum)end;local kS=kT[math.random(1,#kT)]self:CreateRandomChest(r,kS,50,100,false)end;function Lib.IOChest.Local:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")self:CreateDefaultObjectNames()Lib.IOChest.Global=nil end;self.IsInstalled=true end;function Lib.IOChest.Local:OnSaveGameLoaded()end;function Lib.IOChest.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.IOChest.Local:CreateDefaultObjectNames()AddStringText("UI_ObjectNames/D_X_ChestClosed",{de="Verschlossene Schatztruhe",en="Closed Treasure Chest",fr="Coffre au trésor fermé"})AddStringText("UI_ObjectNames/D_X_ChestOpenEmpty",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen01",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen02",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen03",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen04",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})end;RegisterModule(Lib.IOChest.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOMine_API")function CreateIOIronMine(gy)local gi={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(gy)Lib.IOMine.Global:CreateIOMine(gy.Scriptname,Entities.R_IronMine,gy.Title,gy.Text,gy.Costs or gi,gy.ResourceAmount,gy.RefillAmount,gy.ConstructionCondition,gy.ConditionInfo,gy.ConstructionAction)end;API.CreateIOIronMine=CreateIOIronMine;function CreateIOStoneMine(gy)local gi={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(gy)Lib.IOMine.Global:CreateIOMine(gy.Scriptname,Entities.R_StoneMine,gy.Title,gy.Text,gy.Costs or gi,gy.ResourceAmount,gy.RefillAmount,gy.ConstructionCondition,gy.ConditionInfo,gy.ConstructionAction)end;API.CreateIOStoneMine=CreateIOStoneMine;function CheckIOMineParameter(gy)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(gy.Scriptname),"API.CreateIOIronMine: Scriptname '%s' does not exist!",tostring(gy.Scriptname))local gi={Goods.G_Gold,500,Goods.G_Wood,20}if gy.Costs then if gy.Costs[1]then error(GetNameOfKeyInTable(Goods,gy.Costs[1]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(gy.Costs[1]))error(gy.Costs[2]and(type(gy.Costs[2])=="number"or gy.Costs[2]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end;if gy.Costs[3]then error(GetNameOfKeyInTable(Goods,gy.Costs[3]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(gy.Costs[3]))error(gy.Costs[4]and(type(gy.Costs[4])=="number"or gy.Costs[4]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end end end;Lib.IOMine=Lib.IOMine or{}Lib.IOMine.Name="IOMine"Lib.IOMine.Global={Mines={}}Lib.IOMine.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOMine_API")Lib.Register("module/io/IOMine")function Lib.IOMine.Global:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Local=nil end;self.IsInstalled=true end;function Lib.IOMine.Global:OnSaveGameLoaded()end;function Lib.IOMine.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveMine then self:ResetIOMine(arg[1],CONST_IO[arg[1]].Type)end elseif aF==Report.ObjectDelete then if CONST_IO[arg[1]].IsInteractiveMine and CONST_IO[arg[1]].Type then ReplaceEntity(arg[1],CONST_IO[arg[1]].Type)end end end;function Lib.IOMine.Global:CreateIOMine(ab,i,fy,d9,fA,kU,db,fo,kV,gW)local kW=self:ResetIOMine(ab,i)local jV={14,10}local kX;if i==Entities.R_IronMine then kX="Names/R_IronMine"jV={14,10}end;if i==Entities.R_StoneMine then kX="Names/R_StoneMine"jV={14,10}end;SetupObject{Name=ab,IsInteractiveMine=true,Title=fy or kX,Text=d9,Texture=jV,Type=i,ResourceAmount=kU or 250,RefillAmount=db or 75,Costs=fA,InvisibleBlocker=kW,Distance=1200,Waittime=0,ConditionInfo=kV,AdditionalCondition=fo,AdditionalAction=gW,Condition=function(gy)if gy.AdditionalCondition then return gy:AdditionalCondition(gy)end;return true end,Action=function(gy,i6,q)local an=ReplaceEntity(gy.Name,gy.Type)SetResourceAmount(an,gy.ResourceAmount,gy.RefillAmount)DestroyEntity(gy.InvisibleBlocker)SendReport(Report.InteractiveMineErected,gy.Name,i6,q)SendReportToLocal(Report.InteractiveMineErected,gy.Name,i6,q)if gy.AdditionalAction then gy.AdditionalAction(gy,i6,q)end end}end;function Lib.IOMine.Global:ResetIOMine(d6,i)if CONST_IO[d6]then DestroyEntity(CONST_IO[d6].InvisibleBlocker)end;local B=ReplaceEntity(d6,Entities.XD_ScriptEntity)local kY=Models.Doodads_D_SE_ResourceIron_Wrecked;if i==Entities.R_StoneMine then kY=Models.R_SE_ResorceStone_10 end;Logic.SetVisible(B,true)Logic.SetModel(B,kY)local I,J,K=Logic.EntityGetPos(B)local kW=Logic.CreateEntity(Entities.D_ME_Rock_Set01_B_07,I,J,0,0)Logic.SetVisible(kW,false)if CONST_IO[d6]then CONST_IO[d6].InvisibleBlocker=kW end;return kW end;function Lib.IOMine.Local:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Global=nil end;self.IsInstalled=true end;function Lib.IOMine.Local:OnSaveGameLoaded()end;function Lib.IOMine.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOMine.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntityEvent_API")function SearchEntities(q,kZ)if kZ==nil then kZ=false end;local k_=function(aF)if q and Logic.EntityGetPlayer(aF)~=q then return false end;if kZ then if(Logic.IsBuilding(aF)or Logic.IsWall(aF))and Logic.IsConstructionComplete(aF)==0 then return false end;local l=Logic.GetEntityType(aF)local h9=Logic.GetEntityType(l)if h9 and(string.find(h9,"^S_")or string.find(h9,"^XD_"))then return false end end;return true end;return CommenceEntitySearch(k_)end;API.SearchEntities=SearchEntities;function SearchEntitiesOfTypeInArea(hi,ab,i,q)return SearchEntitiesInArea(hi,ab,q,i,nil)end;API.SearchEntitiesOfTypeInArea=SearchEntitiesOfTypeInArea;function SearchEntitiesOfCategoryInArea(hi,ab,bf,q)return SearchEntitiesInArea(hi,ab,q,nil,bf)end;API.SearchEntitiesOfCategoryInArea=SearchEntitiesOfCategoryInArea;function SearchEntitiesOfTypeInTerritory(hj,i,q)return SearchEntitiesInTerritory(hj,q,i,nil)end;API.SearchEntitiesOfTypeInTerritory=SearchEntitiesOfTypeInTerritory;function SearchEntitiesOfCategoryInTerritory(hj,bf,q)return SearchEntitiesInTerritory(hj,q,nil,bf)end;API.SearchEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;API.GetEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;function SearchEntitiesByScriptname(fI)local k_=function(aF)local aO=Logic.GetEntityName(aF)if not string.find(aO,fI)then return false end;return true end;return Lib.EntityEvent.Shared:IterateOverEntities(k_)end;API.SearchEntitiesByScriptname=SearchEntitiesByScriptname;function CommenceEntitySearch(l0)l0=l0 or function(aF)return true end;return Lib.EntityEvent.Shared:IterateOverEntities(l0)end;API.CommenceEntitySearch=CommenceEntitySearch;function ThiefDisableStorehouseEffect(dz)Lib.EntityEvent.Global.DisableThiefStorehouseHeist=dz==true end;API.ThiefDisableStorehouseEffect=ThiefDisableStorehouseEffect;function ThiefDisableCathedralEffect(dz)Lib.EntityEvent.Global.DisableThiefCathedralSabotage=dz==true end;API.ThiefDisableCathedralEffect=ThiefDisableCathedralEffect;function ThiefDisableCisternEffect(dz)Lib.EntityEvent.Global.DisableThiefCisternSabotage=dz==true end;API.ThiefDisableCisternEffect=ThiefDisableCisternEffect;function SearchEntitiesInArea(hi,ab,q,i,bf)local V=ab;if type(V)~="table"then V=GetPosition(V)end;local k_=function(aF)if q and Logic.EntityGetPlayer(aF)~=q then return false end;if i and Logic.GetEntityType(aF)~=i then return false end;if bf and Logic.IsEntityInCategory(aF,bf)==0 then return false end;if GetDistance(aF,V)>hi then return false end;return true end;return CommenceEntitySearch(k_)end;API.SearchEntitiesInArea=SearchEntitiesInArea;function SearchEntitiesInTerritory(hj,q,i,bf)local k_=function(aF)if q and Logic.EntityGetPlayer(aF)~=q then return false end;if i and Logic.GetEntityType(aF)~=i then return false end;if bf and Logic.IsEntityInCategory(aF,bf)==0 then return false end;if hj and GetTerritoryUnderEntity(aF)~=hj then return false end;return true end;return CommenceEntitySearch(k_)end;API.SearchEntitiesInTerritory=SearchEntitiesInTerritory;function GetEntitiesOfCategoriesInTerritories(q,bf,hj)local cy=type(q)=="table"and q or{q}local cu=type(bf)=="table"and bf or{bf}local cs=type(hj)=="table"and hj or{hj}local bd={}for f=1,#cy,1 do for aV=1,#cu,1 do for g=1,#cs,1 do local bg=SearchEntitiesOfCategoryInTerritory(cs[g],cu[aV],cy[f])bd=Array_Append(bd,bg)end end end;return bd end;API.GetEntitiesOfCategoriesInTerritories=GetEntitiesOfCategoriesInTerritories;Lib.EntityEvent=Lib.EntityEvent or{}Lib.EntityEvent.Name="EntityEvent"Lib.EntityEvent.Global={JobID={},RegisteredEntities={},MineAmounts={},AttackedEntities={},DisableThiefStorehouseHeist=false,DisableThiefCathedralSabotage=false,DisableThiefCisternSabotage=false,StaticSpawnerTypes={"B_NPC_BanditsHQ_ME","B_NPC_BanditsHQ_NA","B_NPC_BanditsHQ_NE","B_NPC_BanditsHQ_SE","B_NPC_BanditsHutBig_ME","B_NPC_BanditsHutBig_NA","B_NPC_BanditsHutBig_NE","B_NPC_BanditsHutBig_SE","B_NPC_BanditsHutSmall_ME","B_NPC_BanditsHutSmall_NA","B_NPC_BanditsHutSmall_NE","B_NPC_BanditsHutSmall_SE","B_NPC_Barracks_ME","B_NPC_Barracks_NA","B_NPC_Barracks_NE","B_NPC_Barracks_SE","B_NPC_BanditsHQ_AS","B_NPC_BanditsHutBig_AS","B_NPC_BanditsHutSmall_AS","B_NPC_Barracks_AS"},DynamicSpawnerTypes={"S_AxisDeer_AS","S_Deer_ME","S_FallowDeer_SE","S_Gazelle_NA","S_Herbs","S_Moose_NE","S_RawFish","S_Reindeer_NE","S_WildBoar","S_Zebra_NA"}}Lib.EntityEvent.Local={}Lib.EntityEvent.Shared={}Lib.Require("comfort/GetDistance")Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent_API")Lib.Register("module/entity/EntityEvent")function Lib.EntityEvent.Global:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")self:StartTriggers()self:OverrideCallback()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnSaveGameLoaded()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnReportReceived(aF,...)if aF==Report.LoadscreenClosed then self.LoadscreenClosed=true elseif aF==Report.EntityHurt then self.AttackedEntities[arg[1]]={arg[3],100}end end;function Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()for g,h in pairs(self.AttackedEntities)do self.AttackedEntities[g][2]=h[2]-1;if h[2]<=0 then self.AttackedEntities[g]=nil else if IsExisting(g)and IsExisting(h[1])and Logic.IsKnight(g)then if Logic.KnightGetResurrectionProgress(g)~=1 then local l1=Logic.EntityGetPlayer(g)local l2=Logic.EntityGetPlayer(h[1])self:TriggerEntityKilledEvent(g,l1,h[1],l2)self.AttackedEntities[g]=nil end end end end end;function Lib.EntityEvent.Global:OverrideCallback()GameCallback_SettlerSpawned_Orig_QSB_EntityCore=GameCallback_SettlerSpawned;GameCallback_SettlerSpawned=function(q,ap)GameCallback_SettlerSpawned_Orig_QSB_EntityCore(q,ap)Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(q,ap)end;GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,ap)GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore(q,ap)Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(q,ap)end;GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore=GameCallback_FarmAnimalChangedPlayerID;GameCallback_FarmAnimalChangedPlayerID=function(q,l3,l4)GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore(q,l3,l4)local l5=Logic.EntityGetPlayer(l4)local l6=Logic.EntityGetPlayer(l3)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(l4,l5,l3,l6)end;GameCallback_EntityCaptured_Orig_QSB_EntityCore=GameCallback_EntityCaptured;GameCallback_EntityCaptured=function(l4,l7,l3,l8)GameCallback_EntityCaptured_Orig_QSB_EntityCore(l4,l7,l3,l8)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(l4,l7,l3,l8)end;GameCallback_CartFreed_Orig_QSB_EntityCore=GameCallback_CartFreed;GameCallback_CartFreed=function(l4,l7,l3,l8)GameCallback_CartFreed_Orig_QSB_EntityCore(l4,l7,l3,l8)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(l4,l7,l3,l8)end;GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore=GameCallback_OnThiefDeliverEarnings;GameCallback_OnThiefDeliverEarnings=function(l9,la,hu,lb)GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore(l9,la,hu,lb)local lc=Logic.EntityGetPlayer(hu)Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(la,l9,hu,lc,lb)end;GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore=GameCallback_OnThiefStealBuilding;GameCallback_OnThiefStealBuilding=function(la,l9,hu,ld)Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(la,l9,hu,ld)end;GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore=GameCallback_OnBuildingUpgradeFinished;GameCallback_OnBuildingUpgradeFinished=function(q,ap,le)GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore(q,ap,le)Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(q,ap,le)end;GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore=GameCallback_OnUpgradeLevelCollapsed;GameCallback_OnUpgradeLevelCollapsed=function(q,hu,le)GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore(q,hu,le)Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(q,hu,le)end end;function Lib.EntityEvent.Global:OverrideLogic()self.Logic_ChangeEntityPlayerID=Logic.ChangeEntityPlayerID;Logic.ChangeEntityPlayerID=function(...)local f9={arg[1]}local l5=Logic.EntityGetPlayer(arg[1])local bW={self.Logic_ChangeEntityPlayerID(unpack(arg))}local l6=Logic.EntityGetPlayer(bW[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(f9,l5,bW,l6)return bW end;self.Logic_ChangeSettlerPlayerID=Logic.ChangeSettlerPlayerID;Logic.ChangeSettlerPlayerID=function(...)local f9={arg[1]}local l5=Logic.EntityGetPlayer(arg[1])local lf={Logic.GetSoldiersAttachedToLeader(arg[1])}if lf[1]and lf[1]>0 then for f=2,lf[1]+1 do table.insert(f9,lf[f])end end;local bW={self.Logic_ChangeSettlerPlayerID(unpack(arg))}local lg={Logic.GetSoldiersAttachedToLeader(bW[1])}if lg[1]and lg[1]>0 then for f=2,lg[1]+1 do table.insert(bW,lg[f])end end;local l6=Logic.EntityGetPlayer(bW[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(f9,l5,bW,l6)return bW[1]end end;function Lib.EntityEvent.Global:StartTriggers()self.JobID.EveryTurn=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()if Logic.GetCurrentTurn()>0 then Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()Lib.EntityEvent.Global:CheckOnSpawnerEntities()end end)self.JobID.EverySecond=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,function()local lh={Entities.R_IronMine,Entities.R_StoneMine}for f=1,#lh do local li=Logic.GetEntitiesOfType(lh[f])for aV=1,#li do local d5=self.MineAmounts[li[aV]]local lj=Logic.GetResourceDoodadGoodAmount(li[aV])if d5 and lj and d5~=lj then local l=Logic.GetResourceDoodadGoodType(li[aV])SendReport(Report.EntityResourceChanged,li[aV],l,d5,lj)SendReportToLocal(Report.EntityResourceChanged,li[aV],l,d5,lj)end;self.MineAmounts[li[aV]]=lj end end end)self.JobID.EntityDestroyed=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local lk=Event.GetEntityID()local l1=Logic.EntityGetPlayer(lk)Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(lk,l1)if Lib.EntityEvent.Global.AttackedEntities[lk]~=nil then local ll=Lib.EntityEvent.Global.AttackedEntities[lk][1]local l2=Logic.EntityGetPlayer(ll)Lib.EntityEvent.Global.AttackedEntities[lk]=nil;Lib.EntityEvent.Global:TriggerEntityKilledEvent(lk,l1,ll,l2)end end)self.JobID.EveryHurn=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_HURT_ENTITY,function()local lk=Event.GetEntityID1()local l1=Logic.EntityGetPlayer(lk)local ll=Event.GetEntityID2()local l2=Logic.EntityGetPlayer(ll)SendReport(Report.EntityHurt,lk,l1,ll,l2)SendReportToLocal(Report.EntityHurt,lk,l1,ll,l2)end)end;function Lib.EntityEvent.Global:CheckOnSpawnerEntities()local lm={}for f=1,#self.DynamicSpawnerTypes do if Entities[self.DynamicSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.DynamicSpawnerTypes[f]]))do table.insert(lm,h)end end end end;for f=1,#self.StaticSpawnerTypes do if Entities[self.StaticSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.StaticSpawnerTypes[f]]))do table.insert(lm,h)end end end end;for f=1,#lm do for g,h in pairs{Logic.GetSpawnedEntities(lm[f])}do if not self.RegisteredEntities[h]then self:TriggerEntitySpawnedEvent(h,lm[f])self.RegisteredEntities[h]=lm[f]end end end end;function Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(ln,lo,lp,lq)ln=type(ln)~="table"and{ln}or ln;lp=type(lp)~="table"and{lp}or lp;assert(#ln==#lp,"Sums of entities with changed owner does not add up!")for f=1,#ln do SendReport(Report.EntityOwnerChanged,ln[f],lo,lp[f],lq)SendReportToLocal(Report.EntityOwnerChanged,ln[f],lo,lp[f],lq)end end;function Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(la,l9,hu,ld,lb)SendReport(Report.ThiefDeliverEarnings,la,l9,hu,ld,lb)SendReportToLocal(Report.ThiefDeliverEarnings,la,l9,hu,ld,lb)end;function Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(la,l9,hu,ld)local lr=Logic.GetHeadquarters(ld)local h7=Logic.GetCathedral(ld)local eo=Logic.GetStoreHouse(ld)local ls=Logic.IsEntityInCategory(eo,EntityCategories.VillageStorehouse)==1;local lt=Logic.GetEntityType(hu)if eo==hu and(not ls or lr==0)then if not self.DisableThiefStorehouseHeist then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(la,l9,hu,ld)end end;if h7==hu then if not self.DisableThiefCathedralSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(la,l9,hu,ld)end end;if Framework.GetGameExtraNo()>0 and lt==Entities.B_Cistern then if not self.DisableThiefCisternSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(la,l9,hu,ld)end end;SendReport(Report.ThiefInfiltratedBuilding,la,l9,hu,ld)SendReportToLocal(Report.ThiefInfiltratedBuilding,la,l9,hu,ld)end;function Lib.EntityEvent.Global:TriggerEntitySpawnedEvent(ap,lu)local n=Logic.EntityGetPlayer(ap)SendReport(Report.EntitySpawned,ap,n,lu)SendReportToLocal(Report.EntitySpawned,ap,n,lu)end;function Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(q,ap)SendReport(Report.SettlerAttracted,ap,q)SendReportToLocal(Report.SettlerAttracted,ap,q)end;function Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(ap,q)SendReport(Report.EntityDestroyed,ap,q)SendReportToLocal(Report.EntityDestroyed,ap,q)end;function Lib.EntityEvent.Global:TriggerEntityKilledEvent(lv,lw,lx,ly)SendReport(Report.EntityKilled,lv,lw,lx,ly)SendReportToLocal(Report.EntityKilled,lv,lw,lx,ly)end;function Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(q,ap)SendReport(Report.BuildingConstructed,ap,q)SendReportToLocal(Report.BuildingConstructed,ap,q)end;function Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(q,ap,le)SendReport(Report.BuildingUpgraded,ap,q,le)SendReportToLocal(Report.BuildingUpgraded,ap,q,le)end;function Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(q,ap,le)SendReport(Report.BuildingUpgradeCollapsed,ap,q,le)SendReportToLocal(Report.BuildingUpgradeCollapsed,ap,q,le)end;function Lib.EntityEvent.Local:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")end;function Lib.EntityEvent.Local:OnEvent(aF,...)if aF==Report.LoadscreenClosed then self.LoadscreenClosed=true end end;function Lib.EntityEvent.Shared:IterateOverEntities(l0,lz)lz=lz or Entities;local lA={}for Z,h in pairs(lz)do local lB=Logic.GetEntitiesOfType(h)for f=1,#lB do if l0(lB[f])then table.insert(lA,lB[f])end end end;return lA end;RegisterModule(Lib.EntityEvent.Name)Lib.Register("module/entity/EntitySelection_Text")Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Text={Tooltips={KnightButton={Title={de="Ritter selektieren",en="Select Knight",fr="Sélectionner le chevalier"},Text={de="- Klick selektiert den Ritter {cr}- Doppelklick springt zum Ritter{cr}- UMSCH halten selektiert alle Ritter",en="- Click selects the knight {cr}- Double click jumps to knight{cr}- Press SHIFT to select all knights",fr="- Clic sélectionne le chevalier {cr}- Double-clic saute au chevalier{cr}- Maintenir SHIFT sélectionne tous les chevaliers"}},BattalionButton={Title={de="Militär selektieren",en="Select Units",fr="Sélectionner les unitées"},Text={de="- Selektiert alle Einheiten {cr}- UMSCH halten selektiert Militär {cr}- ALT halten selektiert Kriegsmaschinen {cr}- STRG halten selektiert Diebe",en="- Selects all units {cr}- Holding SHIFT selects military {cr}- Holding ALT selects siege engines {cr}- Holding CTRL selects thieves",fr="- Sélectionne toutes les unités {cr}- Maintenir SHIFT sélectionne les militaires {cr}- Maintenir ALT sélectionne les machines de guerre {cr}- Maintenir CTRL sélectionne les voleurs"}},ReleaseSoldiers={Title={de="Militär entlassen",en="Release military unit",fr="licencier l'unitées"},Text={de="- Eine Militäreinheit entlassen {cr}- Soldaten werden nacheinander entlassen",en="- Dismiss a military unit {cr}- Soldiers will be dismissed each after another",fr="- Licencier une unité militaire {cr}- Les soldats sont licenciés les uns après les autres"},Disabled={de="Kann nicht entlassen werden!",en="Releasing is impossible!",fr="Ne peut pas être licencié!"}},TrebuchetCart={Title={de="Trebuchetwagen",en="Trebuchet cart",fr="Chariot à trébuchet"},Text={de="- Kann einmalig zum Trebuchet ausgebaut werden",en="- Can uniquely be transmuted into a trebuchet",fr="- Peut être transformé une seule fois en trébuchet"}},Trebuchet={Title={de="Trebuchet",en="Trebuchet",fr="Trébuchet"},Text={de="- Kann über weite Strecken Gebäude angreifen {cr}- Kann Gebäude in Brand stecken {cr}- Trebuchet kann manuell zurückgeschickt werden",en="- Can perform long range attacks on buildings {cr}- Can set buildings on fire {cr}- The trebuchet can be manually send back to the city",fr="- Peut attaquer des bâtiments sur de longues distances {cr}- Peut mettre le feu à des bâtiments {cr}- Le trébuchet peut être renvoyé manuellement"}}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntitySelection_API")function DisableReleaseThieves(dz)if not GUI then ExecuteLocal([[DisableReleaseThieves(%s)]],tostring(dz))return end;Lib.EntitySelection.AquireContext()this.ThiefRelease=not dz;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseThieves=DisableReleaseThieves;function DisableReleaseSiegeEngines(dz)if not GUI then ExecuteLocal([[DisableReleaseSiegeEngines(%s)]],tostring(dz))return end;Lib.EntitySelection.AquireContext()this.SiegeEngineRelease=not dz;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseSiegeEngines=DisableReleaseSiegeEngines;function DisableReleaseSoldiers(dz)if not GUI then ExecuteLocal([[DisableReleaseSoldiers(%s)]],tostring(dz))return end;Lib.EntitySelection.AquireContext()this.MilitaryRelease=not dz;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseSoldiers=DisableReleaseSoldiers;function IsEntitySelected(k,q)local lC=false;local B=GetID(k)if IsExisting(B)then Lib.EntitySelection.AquireContext()for f=1,#this.SelectedEntities[q],1 do if this.SelectedEntities[q][f]==B then lC=true;break end end;Lib.EntitySelection.ReleaseContext()end;return lC end;API.IsEntityInSelection=IsEntitySelected;function GetSelectedEntity(q)local lD=0;Lib.EntitySelection.AquireContext()SelectedEntities=this.SelectedEntities[q][1]Lib.EntitySelection.ReleaseContext()return lD end;API.GetSelectedEntity=GetSelectedEntity;function GetSelectedEntities(q)local SelectedEntities={}Lib.EntitySelection.AquireContext()SelectedEntities=this.SelectedEntities[q]Lib.EntitySelection.ReleaseContext()return SelectedEntities end;API.GetSelectedEntities=GetSelectedEntities;Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Name="EntitySelection"Lib.EntitySelection.Global={TrebuchetIDToCart={},SelectedEntities={}}Lib.EntitySelection.Local={SelectedEntities={},TrebuchetDisassemble=false,TrebuchetErect=false,ThiefRelease=false,SiegeEngineRelease=true,MilitaryRelease=true}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/entity/EntitySelection_API")Lib.Require("module/entity/EntitySelection_Text")Lib.Register("module/entity/EntitySelection")function Lib.EntitySelection.Global:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")for f=1,8 do self.SelectedEntities[f]={}end;Lib.EntitySelection.Local=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Global:OnSaveGameLoaded()end;function Lib.EntitySelection.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ForceTrebuchetTasklist then Logic.SetTaskList(arg[1],arg[2])elseif aF==Report.ErectTrebuchet then Lib.EntitySelection.Global:MilitaryErectTrebuchet(arg[1])elseif aF==Report.DisambleTrebuchet then Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(arg[1])elseif aF==Report.ExpelSettler then DestroyEntity(arg[1])elseif aF==Report.SelectionChanged then local n=table.remove(arg,1)Lib.EntitySelection.Global.SelectedEntities[n]=arg end end;function Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(ap)local I,J,K=Logic.EntityGetPos(ap)local n=Logic.EntityGetPlayer(ap)if GameCallback_Lib_OnDisambleTrebuchet then GameCallback_Lib_OnDisambleTrebuchet(ap,n,I,J,K)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,I,J,0)Logic.SetEntityInvulnerabilityFlag(ap,1)Logic.SetEntitySelectableFlag(ap,0)Logic.SetVisible(ap,false)local lE=self.TrebuchetIDToCart[ap]if lE~=nil then Logic.SetEntityInvulnerabilityFlag(lE,0)Logic.SetEntitySelectableFlag(lE,1)Logic.SetVisible(lE,true)else lE=Logic.CreateEntity(Entities.U_SiegeEngineCart,I,J,0,n)self.TrebuchetIDToCart[ap]=lE end;Logic.DEBUG_SetSettlerPosition(lE,I,J)Logic.SetTaskList(lE,TaskLists.TL_NPC_IDLE)ExecuteLocal([[GUI.SelectEntity(%d)]],lE)end;function Lib.EntitySelection.Global:MilitaryErectTrebuchet(ap)local I,J,K=Logic.EntityGetPos(ap)local n=Logic.EntityGetPlayer(ap)if GameCallback_Lib_OnErectTrebuchet then GameCallback_Lib_OnErectTrebuchet(ap,n,I,J,K)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,I,J,0)Logic.SetEntityInvulnerabilityFlag(ap,1)Logic.SetEntitySelectableFlag(ap,0)Logic.SetVisible(ap,false)local lF;for g,h in pairs(self.TrebuchetIDToCart)do if h==ap then lF=tonumber(g)end end;if lF==nil then lF=Logic.CreateEntity(Entities.U_Trebuchet,I,J,0,n)self.TrebuchetIDToCart[lF]=ap end;Logic.SetEntityInvulnerabilityFlag(lF,0)Logic.SetEntitySelectableFlag(lF,1)Logic.SetVisible(lF,true)Logic.DEBUG_SetSettlerPosition(lF,I,J)ExecuteLocal([[GUI.SelectEntity(%d)]],lF)end;function Lib.EntitySelection.Local:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")if not(IsHistoryEdition()and IsMultiplayer())then self:OverrideSelection()self:OverwriteMilitaryCommands()self:OverwriteMilitaryErect()self:OverwriteMilitaryDisamble()self:OverwriteMultiselectIcon()self:OverwriteMilitaryDismount()self:OverwriteThiefDeliver()self:OverwriteSelectKnight()self:OverwriteSelectAllUnits()self:OverwriteNamesAndDescription()end;for f=1,8 do self.SelectedEntities[f]={}end;Lib.EntitySelection.Global=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Local:OnSaveGameLoaded()end;function Lib.EntitySelection.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.EntitySelection.Local:OverrideSelection()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.EntitySelection.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.EntitySelection.Local:OnSelectionCanged(b)end end;function Lib.EntitySelection.Local:OverwriteMilitaryCommands()GUI_Military.StandGroundClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local SelectedEntities={GUI.GetSelectedEntities()}for f=1,#SelectedEntities do local lG=SelectedEntities[f]local lH=Logic.GetEntityType(lG)GUI.SendCommandStationaryDefend(lG)if lH==Entities.U_Trebuchet then SendReportToGlobal(Report.ForceTrebuchetTasklist,lG,TaskLists.TL_NPC_IDLE)SendReport(Report.ForceTrebuchetTasklist,lG,TaskLists.TL_NPC_IDLE)end end end;GUI_Military.StandGroundUpdate=function()local lI="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack"local SelectedEntities={GUI.GetSelectedEntities()}SetIcon(lI,{12,4})if#SelectedEntities==1 then local bJ=SelectedEntities[1]local lH=Logic.GetEntityType(bJ)if lH==Entities.U_Trebuchet then if Logic.GetAmmunitionAmount(bJ)>0 then XGUIEng.ShowWidget(lI,0)else XGUIEng.ShowWidget(lI,1)end;SetIcon(lI,{1,10})else XGUIEng.ShowWidget(lI,1)end end end end;function Lib.EntitySelection.Local:OverwriteMilitaryErect()GUI_Military.ErectClicked_Orig_Selection=GUI_Military.ErectClicked;GUI_Military.ErectClicked=function()GUI_Military.ErectClicked_Orig_Selection()local SelectedEntities={GUI.GetSelectedEntities()}for f=1,#SelectedEntities,1 do local ep=Logic.GetEntityType(SelectedEntities[f])if ep==Entities.U_SiegeEngineCart then SendReportToGlobal(Report.ErectTrebuchet,SelectedEntities[f])SendReport(Report.ErectTrebuchet,SelectedEntities[f])end end end;GUI_Military.ErectUpdate_Orig_Selection=GUI_Military.ErectUpdate;GUI_Military.ErectUpdate=function()local jW=XGUIEng.GetCurrentWidgetID()local lJ=GUI.GetSelectedEntity()local ep=Logic.GetEntityType(lJ)if ep==Entities.U_SiegeEngineCart then local kF=Lib.EntitySelection.Local.TrebuchetErect and 0 or 1;XGUIEng.DisableButton(jW,kF)SetIcon(jW,{12,6})else GUI_Military.ErectUpdate_Orig_Selection()end end;GUI_Military.ErectMouseOver_Orig_Selection=GUI_Military.ErectMouseOver;GUI_Military.ErectMouseOver=function()local lJ=GUI.GetSelectedEntity()local lK;if Logic.GetEntityType(lJ)==Entities.U_SiegeEngineCart then lK="ErectCatapult"else GUI_Military.ErectMouseOver_Orig_Selection()return end;GUI_Tooltip.TooltipNormal(lK,"Erect")end end;function Lib.EntitySelection.Local:OverwriteMilitaryDisamble()GUI_Military.DisassembleClicked_Orig_Selection=GUI_Military.DisassembleClicked;GUI_Military.DisassembleClicked=function()GUI_Military.DisassembleClicked_Orig_Selection()local SelectedEntities={GUI.GetSelectedEntities()}for f=1,#SelectedEntities,1 do local ep=Logic.GetEntityType(SelectedEntities[f])if ep==Entities.U_Trebuchet then SendReportToGlobal(Report.DisambleTrebuchet,SelectedEntities[f])SendReport(Report.DisambleTrebuchet,SelectedEntities[f])end end end;GUI_Military.DisassembleMouseOver_Orig_Selection=GUI_Military.DisassembleMouseOver;GUI_Military.DisassembleMouseOver=function()local lL=GUI.GetSelectedEntity()local lM;if Logic.IsSiegeEngineUnderConstruction(lL)==true then lM="Disassemble"else lM="DisassembleNoSoldiersAttached"if not Lib.EntitySelection.Local.TrebuchetDisassemble then lM="Disassemble"end end;GUI_Tooltip.TooltipNormal(nil,lM)end;GUI_Military.DisassembleUpdate_Orig_Selection=GUI_Military.DisassembleUpdate;GUI_Military.DisassembleUpdate=function()local jW=XGUIEng.GetCurrentWidgetID()local lL=GUI.GetSelectedEntity()local ep=Logic.GetEntityType(lL)if ep==Entities.U_Trebuchet then local kF=Lib.EntitySelection.Local.TrebuchetDisassemble and 0 or 1;XGUIEng.DisableButton(jW,kF)SetIcon(jW,{12,9})else GUI_Military.DisassembleUpdate_Orig_Selection()end end end;function Lib.EntitySelection.Local:OnSelectionCanged(b)local n=GUI.GetPlayerID()local B=GUI.GetSelectedEntity()local ep=Logic.GetEntityType(B)local SelectedEntities={GUI.GetSelectedEntities()}self.SelectedEntities[n]=SelectedEntities;SendReportToGlobal(Report.SelectionChanged,n,unpack(SelectedEntities))SendReport(Report.SelectionChanged,n,unpack(SelectedEntities))if B~=nil then if ep==Entities.U_SiegeEngineCart then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngineCart",1)elseif ep==Entities.U_Trebuchet then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack",0)GUI_Military.StrengthUpdate()XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngine",1)end end end;function Lib.EntitySelection.Local:OverwriteMultiselectIcon()GUI_MultiSelection.IconUpdate_Orig_Selection=GUI_MultiSelection.IconUpdate;GUI_MultiSelection.IconUpdate=function()local jW=XGUIEng.GetCurrentWidgetID()local lN=XGUIEng.GetWidgetsMotherID(jW)local lO=XGUIEng.GetWidgetNameByID(lN)local dW=lO+0;local lP=XGUIEng.GetWidgetPathByID(lN)local lQ=lP.."/Health"local B=g_MultiSelection.EntityList[dW]local ep=Logic.GetEntityType(B)local lR=Logic.GetEntityHealth(B)local lS=Logic.GetEntityMaxHealth(B)if ep~=Entities.U_SiegeEngineCart and ep~=Entities.U_Trebuchet then GUI_MultiSelection.IconUpdate_Orig_Selection()return end;if Logic.IsEntityAlive(B)==false then XGUIEng.ShowWidget(lN,0)GUI_MultiSelection.CreateEX()return end;SetIcon(jW,g_TexturePositions.Entities[ep])lR=math.floor(lR/lS*100)if lR<50 then local lT=math.floor(2*255*lR/100)XGUIEng.SetMaterialColor(lQ,0,255,lT,20,255)else local lU=2*255-math.floor(2*255*lR/100)XGUIEng.SetMaterialColor(lQ,0,lU,255,20,255)end;XGUIEng.SetProgressBarValues(lQ,lR,100)end;GUI_MultiSelection.IconMouseOver_Orig_Selection=GUI_MultiSelection.IconMouseOver;GUI_MultiSelection.IconMouseOver=function()local jW=XGUIEng.GetCurrentWidgetID()local lN=XGUIEng.GetWidgetsMotherID(jW)local lO=XGUIEng.GetWidgetNameByID(lN)local dW=tonumber(lO)local B=g_MultiSelection.EntityList[dW]local ep=Logic.GetEntityType(B)if ep~=Entities.U_SiegeEngineCart and ep~=Entities.U_Trebuchet then GUI_MultiSelection.IconMouseOver_Orig_Selection()return end;if ep==Entities.U_SiegeEngineCart then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Title),Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Text))elseif ep==Entities.U_Trebuchet then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Title),Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Text))end end end;function Lib.EntitySelection.Local:OverwriteMilitaryDismount()GUI_Military.DismountClicked_Orig_Selection=GUI_Military.DismountClicked;GUI_Military.DismountClicked=function()local lV=GUI.GetSelectedEntity()local l=Logic.GetEntityType(lV)local lW=Logic.GetGuardedEntityID(lV)local lX=Logic.GetGuardianEntityID(lV)if lW~=0 and Logic.EntityGetPlayer(lW)~=GUI.GetPlayerID()then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsKnight(lV)or Logic.IsEntityInCategory(lV,EntityCategories.AttackableMerchant)==1 then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsLeader(lV)==1 and lW==0 then if Lib.EntitySelection.Local.MilitaryRelease then Sound.FXPlay2DSound("ui\\menu_click")local aC={Logic.GetSoldiersAttachedToLeader(lV)}SendReportToGlobal(Report.ExpelSettler,aC[#aC])SendReport(Report.ExpelSettler,aC[#aC])return end end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if Lib.EntitySelection.Local.SiegeEngineRelease and lX==0 then Sound.FXPlay2DSound("ui\\menu_click")SendReportToGlobal(Report.ExpelSettler,lV)SendReport(Report.ExpelSettler,lV)else GUI_Military.DismountClicked_Orig_Selection()end end end;GUI_Military.DismountUpdate_Orig_Selection=GUI_Military.DismountUpdate;GUI_Military.DismountUpdate=function()local jW=XGUIEng.GetCurrentWidgetID()local lV=GUI.GetSelectedEntity()local l=Logic.GetEntityType(lV)local lW=Logic.GetGuardedEntityID(lV)local lX=Logic.GetGuardianEntityID(lV)SetIcon(jW,{12,1})if lW~=0 and Logic.EntityGetPlayer(lW)~=GUI.GetPlayerID()then XGUIEng.DisableButton(jW,0)GUI_Military.DismountUpdate_Orig_Selection()return end;if Logic.IsKnight(lV)or Logic.IsEntityInCategory(lV,EntityCategories.AttackableMerchant)==1 then XGUIEng.DisableButton(jW,0)GUI_Military.DismountUpdate_Orig_Selection()return end;SetIcon(jW,{14,12})if l==Entities.U_MilitaryLeader then if not Lib.EntitySelection.Local.MilitaryRelease then XGUIEng.DisableButton(jW,1)else XGUIEng.DisableButton(jW,0)end;return end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if lX~=0 then SetIcon(jW,{12,1})XGUIEng.DisableButton(jW,0)else if not Lib.EntitySelection.Local.SiegeEngineRelease then XGUIEng.DisableButton(jW,1)else XGUIEng.DisableButton(jW,0)end end end end end;function Lib.EntitySelection.Local:OverwriteThiefDeliver()GUI_Thief.ThiefDeliverClicked_Orig_Selection=GUI_Thief.ThiefDeliverClicked;GUI_Thief.ThiefDeliverClicked=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverClicked_Orig_Selection()return end;Sound.FXPlay2DSound("ui\\menu_click")local lY=GUI.GetSelectedEntity()if lY==nil or Logic.GetEntityType(lY)~=Entities.U_Thief then return end;SendReportToGlobal(Report.ExpelSettler,lY)SendReport(Report.ExpelSettler,lY)end;GUI_Thief.ThiefDeliverMouseOver_Orig_Selection=GUI_Thief.ThiefDeliverMouseOver;GUI_Thief.ThiefDeliverMouseOver=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverMouseOver_Orig_Selection()return end;SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))end;GUI_Thief.ThiefDeliverUpdate_Orig_Selection=GUI_Thief.ThiefDeliverUpdate;GUI_Thief.ThiefDeliverUpdate=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverUpdate_Orig_Selection()return end;local jW=XGUIEng.GetCurrentWidgetID()local lY=GUI.GetSelectedEntity()if lY==nil or Logic.GetEntityType(lY)~=Entities.U_Thief then XGUIEng.DisableButton(jW,1)else XGUIEng.DisableButton(jW,0)end;SetIcon(jW,{14,12})end end;function Lib.EntitySelection.Local:OverwriteSelectKnight()GUI_Knight.JumpToButtonClicked=function()local n=GUI.GetPlayerID()local fC=Logic.GetKnightID(n)if fC>0 then g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}GUI.ClearSelection()if XGUIEng.IsModifierPressed(Keys.ModifierShift)then local lZ={}Logic.GetKnights(n,lZ)for f=1,#lZ do GUI.SelectEntity(lZ[f])end else GUI.SelectEntity(Logic.GetKnightID(n))if Framework.GetTimeMs()-g_Selection.LastClickTime<g_Selection.MaxDoubleClickTime then local aH=GetPosition(fC)Camera.RTS_SetLookAtPosition(aH.X,aH.Y)else Sound.FXPlay2DSound("ui\\mini_knight")end;g_Selection.LastClickTime=Framework.GetTimeMs()end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)else GUI.AddNote("Debug: You do not have a knight!")end end end;function Lib.EntitySelection.Local:OverwriteSelectAllUnits()GUI_MultiSelection.SelectAllPlayerUnitsClicked=function()local l_=XGUIEng.IsModifierPressed(Keys.ModifierAlt)local m0=XGUIEng.IsModifierPressed(Keys.ModifierControl)local m1=XGUIEng.IsModifierPressed(Keys.ModifierShift)if not l_ and not m0 and not m1 then Lib.EntitySelection.Local:SortOrderFullSelection()end;if l_ and not m0 and not m1 then Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()end;if not l_ and m0 and not m1 then Lib.EntitySelection.Local:SortOrderThievesOnly()end;if not l_ and not m0 and m1 then Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()end;Sound.FXPlay2DSound("ui\\menu_click")GUI.ClearSelection()local n=GUI.GetPlayerID()for f=1,#LeaderSortOrder do local m2=GetPlayerEntities(n,LeaderSortOrder[f])for aV=1,#m2 do GUI.SelectEntity(m2[aV])end end;if not l_ and not m0 and not m1 or not l_ and not m0 and m1 then local m3={}Logic.GetKnights(n,m3)for g=1,#m3 do GUI.SelectEntity(m3[g])end end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)end end;function Lib.EntitySelection.Local:SortOrderFullSelection()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_Trebuchet;LeaderSortOrder[15]=Entities.U_MilitarySiegeTower;LeaderSortOrder[16]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[17]=Entities.U_CatapultCart;LeaderSortOrder[18]=Entities.U_SiegeTowerCart;LeaderSortOrder[19]=Entities.U_BatteringRamCart;LeaderSortOrder[20]=Entities.U_AmmunitionCart;LeaderSortOrder[21]=Entities.U_Thief;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end end;function Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitaryCatapult;LeaderSortOrder[2]=Entities.U_Trebuchet;LeaderSortOrder[3]=Entities.U_MilitarySiegeTower;LeaderSortOrder[4]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[5]=Entities.U_CatapultCart;LeaderSortOrder[6]=Entities.U_SiegeTowerCart;LeaderSortOrder[7]=Entities.U_BatteringRamCart;LeaderSortOrder[8]=Entities.U_AmmunitionCart;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderThievesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_Thief end;function Lib.EntitySelection.Local:OverwriteNamesAndDescription()GUI_Tooltip.SetNameAndDescription_Orig_Selection=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(m4,m5,m6,m7,m8)local iV="/InGame/Root/Normal/AlignBottomRight"local jW=XGUIEng.GetCurrentWidgetID()if XGUIEng.GetWidgetID(iV.."/MapFrame/KnightButton")==jW then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Text))return end;if XGUIEng.GetWidgetID(iV.."/MapFrame/BattalionButton")==jW then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Text))return end;if XGUIEng.GetWidgetID(iV.."/DialogButtons/SiegeEngineCart/Dismount")==jW or XGUIEng.GetWidgetID(iV.."/DialogButtons/AmmunitionCart/Dismount")==jW or XGUIEng.GetWidgetID(iV.."/DialogButtons/Military/Dismount")==jW then local lD=GUI.GetSelectedEntity()if lD~=0 then if Logic.IsEntityInCategory(lD,EntityCategories.Military)==1 then local m9=Logic.GetGuardianEntityID(lD)local ma=Logic.GetGuardedEntityID(lD)if m9==0 and ma==0 then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))return end end end end;GUI_Tooltip.SetNameAndDescription_Orig_Selection(m4,m5,m6,m7,m8)end end;RegisterModule(Lib.EntitySelection.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/balancing/Damage_API")function SetEntityTypeDamage(i,mb,...)assert(not IsLocalScript())assert(type(mb)=="number")local j={...}Lib.Damage.AquireContext()this.EntityTypeDamage[i]=this.EntityTypeDamage[i]or{}if#j~=0 then for f=1,#j do this.EntityTypeDamage[i][j[f]]=mb end else this.EntityTypeDamage[i][0]=mb end;Lib.Damage.ReleaseContext()end;API.SetEntityTypeDamage=SetEntityTypeDamage;function SetEntityNameDamage(r,mb,...)assert(not IsLocalScript())assert(type(mb)=="number")local j={...}Lib.Damage.AquireContext()this.EntityNameDamage[r]=this.EntityNameDamage[r]or{}if#j~=0 then for f=1,#j do this.EntityNameDamage[r][j[f]]=mb end else this.EntityNameDamage[r][0]=mb end;Lib.Damage.ReleaseContext()end;API.SetEntityNameDamage=SetEntityNameDamage;function SetEntityTypeArmor(i,mc)assert(not IsLocalScript())assert(type(mc)=="number")Lib.Damage.AquireContext()this.EntityTypeArmor[i]=mc;Lib.Damage.ReleaseContext()end;API.SetEntityTypeArmor=SetEntityTypeArmor;function SetEntityNameArmor(r,mc)assert(not IsLocalScript())assert(type(mc)=="number")Lib.Damage.AquireContext()this.EntityNameArmor[r]=mc;Lib.Damage.ReleaseContext()end;API.SetEntityNameArmor=SetEntityNameArmor;function SetTerritoryBonus(q,md)assert(not IsLocalScript())assert(type(md)=="number")Lib.Damage.AquireContext()this.TerritoryBonus[q]=md or 1;Lib.Damage.ReleaseContext()end;API.SetTerritoryBonus=SetTerritoryBonus;function SetHeightModifier(q,md)assert(not IsLocalScript())assert(type(md)=="number")Lib.Damage.AquireContext()this.HeightModifier[q]=md or 1;Lib.Damage.ReleaseContext()end;API.SetHeightModifier=SetHeightModifier;function IsInvulnerable(k)local d=false;if not IsLocalScript()then Lib.Damage.AquireContext()d=this.InvulnerableList[GetID(k)]~=nil;Lib.Damage.ReleaseContext()end;return d end;API.IsInvulnerable=IsInvulnerable;Lib.Damage=Lib.Damage or{}Lib.Damage.Name="Damage"Lib.Damage.Global={InvulnerableList={},EntityTypeDamage={},EntityNameDamage={},EntityTypeArmor={},EntityNameArmor={},TerritoryBonus={},HeightModifier={}}Lib.Damage.Local={}Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent")Lib.Require("module/balancing/Damage_API")Lib.Register("module/balancing/Damage")function Lib.Damage.Global:Initialize()if not self.IsInstalled then for n=0,8 do self.TerritoryBonus[n]=1;self.HeightModifier[n]=1 end;self:OverwriteVulnerabilityFunctions()Lib.Damage.Local=nil end;self.IsInstalled=true end;function Lib.Damage.Global:OnSaveGameLoaded()end;function Lib.Damage.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true;self:InitEntityBaseDamage()elseif aF==Report.EntityDestroyed then self.InvulnerableList[arg[1]]=nil elseif aF==Report.EntityHurt then self:OnEntityHurtEntity(arg[1],arg[2],arg[3],arg[4])end end;function Lib.Damage.Global:IsInvulnerable(k)return self.InvulnerableList[GetID(k)]~=nil end;function Lib.Damage.Global:InitEntityBaseDamage()SetEntityTypeDamage(Entities.U_MilitaryBow,20)SetEntityTypeDamage(Entities.U_MilitaryBow,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,20)SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword,30)SetEntityTypeDamage(Entities.U_MilitarySword,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,30)SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBallista,50)SetEntityTypeDamage(Entities.U_MilitaryBallista,10,EntityCategories.CityWallGate)SetEntityTypeDamage(Entities.U_MilitaryCatapult,50)SetEntityTypeDamage(Entities.U_MilitaryCatapult,10,EntityCategories.CityWallGate)SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,120)SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,20,EntityCategories.CityWallSegment)SetEntityTypeDamage(Entities.U_MilitarySiegeTower,0)SetEntityTypeDamage(Entities.U_MilitaryTrap,800)SetEntityTypeDamage(Entities.A_ME_Bear,120)SetEntityTypeDamage(Entities.A_ME_Bear_black,120)SetEntityTypeDamage(Entities.A_ME_Wolf,20)SetEntityTypeDamage(Entities.A_NA_Lion_Female,40)SetEntityTypeDamage(Entities.A_NA_Lion_Male,40)SetEntityTypeDamage(Entities.A_NE_PolarBear,120)if g_GameExtraNo==0 then return end;SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,20)SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword_Khana,30)SetEntityTypeDamage(Entities.U_MilitarySword_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.A_AS_BearBlack,120)SetEntityTypeDamage(Entities.A_AS_Tiger,40)end;function Lib.Damage.Global:OverwriteVulnerabilityFunctions()MakeInvulnerable=function(k)if IsExisting(k)then local an=GetID(k)Lib.Damage.Global.InvulnerableList[an]=nil;Logic.SetEntityInvulnerabilityFlag(an,1)end end;MakeVulnerable=function(k)if IsExisting(k)then local an=GetID(k)Lib.Damage.Global.InvulnerableList[an]=true;Logic.SetEntityInvulnerabilityFlag(an,0)end end end;function Lib.Damage.Global:OnEntityHurtEntity(lv,lw,lx,ly)local me=self:GetTrueEntityID(lv)local c8=self:GetTrueEntityID(lx)if me==0 or c8==0 then return end;Logic.SetEntityInvulnerabilityFlag(c8,1)if self.InvulnerableList[c8]then return end;local mf=1;local mg=Logic.GetTerritoryBonus(me)*self.TerritoryBonus[lw]local mh=Logic.GetHeightDamageModifier(me)*self.HeightModifier[lw]local mi=Logic.GetEntityType(me)local mj=Logic.GetEntityType(c8)local mk=Logic.GetEntityName(me)local ml=Logic.GetEntityName(c8)local mm=Logic.GetPlayerMorale(lw)mf=self:GetEntityTypeBaseDamage(mi,mj)mf=self:GetEntityNameBaseDamage(mk,mj)local mn=0;if self.EntityTypeArmor[mj]then mn=self.EntityTypeArmor[mj]end;if self.EntityNameArmor[ml]then mn=self.EntityNameArmor[ml]end;mf=mf*(math.max(mm,0.5)+mg)*mh;mf=self:ApllyRangedCloseCombatDamage(me,mf)mf=self:ApllyWallCatapultCombatDamage(me,mf)mf=math.abs(mf-mn)if GameCallback_Lib_CalculateBattleDamage~=nil then mf=GameCallback_Lib_CalculateBattleDamage(me,lw,c8,ly,mf)end;local aa=Logic.GetEntityHealth(c8)mf=math.min(aa,math.max(1,math.ceil(mf)))Logic.SetEntityInvulnerabilityFlag(c8,0)Logic.HurtEntity(c8,mf)if aa>mf then Logic.SetEntityInvulnerabilityFlag(c8,1)end end;function Lib.Damage.Global:GetEntityTypeBaseDamage(mo,mp)if self.EntityTypeDamage[mo]then for jR,mf in pairs(self.EntityTypeDamage[mo])do if jR>0 and Logic.IsEntityTypeInCategory(mp,jR)==1 then return mf end end;return self.EntityTypeDamage[mo][0]or 25 end;return 25 end;function Lib.Damage.Global:GetEntityNameBaseDamage(mq,mp)if self.EntityNameDamage[mq]then for jR,mf in pairs(self.EntityNameDamage[mq])do if jR>0 and Logic.IsEntityTypeInCategory(mp,jR)==1 then return mf end end;return self.EntityNameDamage[mq][0]or 25 end;return 25 end;function Lib.Damage.Global:GetTrueEntityID(ap)if Logic.IsLeader(ap)==1 then local aC={Logic.GetSoldiersAttachedToLeader(ap)}for f=2,aC[1]+1 do if Logic.GetEntityHealth(aC[f])>0 then return aC[f]end end;return 0 end;if Logic.GetEntityHealth(ap)==0 then return 0 end;return ap end;function Lib.Damage.Global:ApllyRangedCloseCombatDamage(ap,mb)local mf=mb;if Logic.GetCurrentTaskList(ap)=="TL_BATTLE_BOW_CLOSECOMBAT"then local mr=0.3;if GameCallback_Lib_CalculateRangedCloseCombatDamageFactor then local n=Logic.EntityGetPlayer(ap)mr=GameCallback_Lib_CalculateRangedCloseCombatDamageFactor(n,ap,mb)end;mf=mf*mr end;return mf end;function Lib.Damage.Global:ApllyWallCatapultCombatDamage(ap,mb)local mf=mb;local l=Logic.GetEntityType(ap)if l==Entities.U_MilitaryBallista then local mr=1;local n=Logic.EntityGetPlayer(ap)if GameCallback_Lib_CalculateWallCatapultDamageFactor then mr=GameCallback_Lib_CalculateWallCatapultDamageFactor(n,ap,mb)elseif Logic.PlayerGetIsHumanFlag(n)==true then local I,J,K=Logic.EntityGetPos(ap)local ms={Logic.GetPlayerEntitiesInArea(n,l,I,J,1500,16)}mr=ms[1]>1 and mr/ms[1]or 1 end;mf=mf*mr end;return mf end;function Lib.Damage.Local:Initialize()if not self.IsInstalled then Lib.Damage.Global=nil end;self.IsInstalled=true end;function Lib.Damage.Local:OnSaveGameLoaded()end;function Lib.Damage.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.Damage.Name)Lib.Register("module/quest/Quest_Behavior")function Goal_WinQuest(...)return B_Goal_WinQuest:new(...)end;B_Goal_WinQuest={Name="Goal_WinQuest",Description={en="Goal: The player has to win a given quest.",de="Ziel: Der Spieler muss eine angegebene Quest erfolgreich abschliessen.",fr="Objectif: Le joueur doit réussir une quête indiquée."},Parameter={{ParameterType.QuestName,en="Quest Name",de="Questname",fr="Nom de la quête"}}}function B_Goal_WinQuest:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_WinQuest:AddParameter(b2,b3)if b2==0 then self.Quest=b3 end end;function B_Goal_WinQuest:CustomFunction(b1)local mt=Quests[GetQuestID(self.Quest)]if mt then if mt.Result==QuestResult.Failure then return false end;if mt.Result==QuestResult.Success then return true end end;return nil end;function B_Goal_WinQuest:Debug(b1)if Quests[GetQuestID(self.Quest)]==nil then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest.."' does not exist!")return true end;return false end;RegisterBehavior(B_Goal_WinQuest)function Goal_DiscoverPlayers(...)return B_Goal_DiscoverPlayers:new(...)end;B_Goal_DiscoverPlayers={Name="Goal_DiscoverPlayers",Description={en="Goal: Discover the home territory of some other players.",de="Ziel: Entdecke das Heimatterritorium einiger Spieler.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.Custom,en="Player amount",de="Spieleranzahl",fr="Montant du Joueur"},{ParameterType.PlayerID,en="Player 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="Player 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.PlayerID,en="Player 3",de="Spieler 3",fr="Joueur 3"},{ParameterType.PlayerID,en="Player 4",de="Spieler 4",fr="Joueur 4"},{ParameterType.PlayerID,en="Player 5",de="Spieler 5",fr="Joueur 5"},{ParameterType.PlayerID,en="Player 6",de="Spieler 6",fr="Joueur 6"}}}function B_Goal_DiscoverPlayers:GetGoalTable()return{Objective.Discover,2,{unpack(self.PlayerList)}}end;function B_Goal_DiscoverPlayers:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 end;if b2>0 then self.PlayerList=self.PlayerList or{}if b2<=self.Amount then local n=b3*1;table.insert(self.PlayerList,n)end end end;function B_Goal_DiscoverPlayers:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local bb=GetPlayerCategoryType(self.PlayerList[1]or 1)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayers)function Goal_DiscoverTerritories(...)return B_Goal_DiscoverTerritories:new(...)end;B_Goal_DiscoverTerritories={Name="Goal_DiscoverTerritories",Description={en="Goal: Discover multiple territories",de="Ziel: Entdecke mehrere Territorien",fr="Objectif : Découvrez plusieurs territoires"},Parameter={{ParameterType.Custom,en="Territory amount",de="Territorienanzahl",fr="Montant du territoire"},{ParameterType.TerritoryName,en="Territory 1",de="Territorium 1",fr="Territoire 1"},{ParameterType.TerritoryName,en="Territory 2",de="Territorium 2",fr="Territoire 2"},{ParameterType.TerritoryName,en="Territory 3",de="Territorium 3",fr="Territoire 3"},{ParameterType.TerritoryName,en="Territory 4",de="Territorium 4",fr="Territoire 4"},{ParameterType.TerritoryName,en="Territory 5",de="Territorium 5",fr="Territoire 5"},{ParameterType.TerritoryName,en="Territory 6",de="Territorium 6",fr="Territoire 6"}}}function B_Goal_DiscoverTerritories:GetGoalTable()return{Objective.Discover,1,{unpack(self.TerritoryList)}}end;function B_Goal_DiscoverTerritories:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 end;if b2>0 then self.TerritoryList=self.TerritoryList or{}if b2<=self.Amount then local _=tonumber(b3)if not _ then _=GetTerritoryIDByName(b3)end;assert(_>0)table.insert(self.TerritoryList,_)end end end;function B_Goal_DiscoverTerritories:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritories)function Trigger_OnAtLeastXOfYQuestsFailed(...)return B_Trigger_OnAtLeastXOfYQuestsFailed:new(...)end;B_Trigger_OnAtLeastXOfYQuestsFailed={Name="Trigger_OnAtLeastXOfYQuestsFailed",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests fehlgeschlagen sind.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont échoué."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsFailed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsFailed:AddParameter(b2,b3)if b2==0 then self.LeastAmount=tonumber(b3)elseif b2==1 then self.QuestAmount=tonumber(b3)elseif b2==2 then self.QuestName1=b3 elseif b2==3 then self.QuestName2=b3 elseif b2==4 then self.QuestName3=b3 elseif b2==5 then self.QuestName4=b3 elseif b2==6 then self.QuestName5=b3 end end;function B_Trigger_OnAtLeastXOfYQuestsFailed:CustomFunction()local cm=0;for f=1,self.QuestAmount do local bE=GetQuestID(self["QuestName"..f])if IsValidQuest(bE)then if Quests[bE].Result==QuestResult.Failure then cm=cm+1;if cm>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:Debug(b1)local cn=self.LeastAmount;local co=self.QuestAmount;if cn<=0 or cn>5 then error(b1.Identifier..":"..self.Name..": LeastAmount is wrong")return true elseif co<=0 or co>5 then error(b1.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif cn>co then error(b1.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,co do if not IsValidQuest(self["QuestName"..f])then error(b1.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:GetCustomData(b2)if b2==0 or b2==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsFailed)function Trigger_OnExactOneQuestIsWon(...)return B_Trigger_OnExactOneQuestIsWon:new(...)end;B_Trigger_OnExactOneQuestIsWon={Name="Trigger_OnExactOneQuestIsWon",Description={en="Trigger: if one of two given quests has been finished successfully, but NOT both.",de="Auslöser: wenn eine von zwei angegebenen Quests (aber NICHT beide) erfolgreich abgeschlossen wurde.",fr="Déclencheur: lorsque l'une des deux quêtes indiquées (mais PAS les deux) a été accomplie avec succès."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsWon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsWon:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnExactOneQuestIsWon:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if cl and ck then local mu=ck.State==QuestState.Over and ck.Result==QuestResult.Success;local mv=cl.State==QuestState.Over and cl.Result==QuestResult.Success;if mu and not mv or not mu and mv then return true end end;return false end;function B_Trigger_OnExactOneQuestIsWon:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsWon)function Trigger_OnExactOneQuestIsLost(...)return B_Trigger_OnExactOneQuestIsLost:new(...)end;B_Trigger_OnExactOneQuestIsLost={Name="Trigger_OnExactOneQuestIsLost",Description={en="Trigger: If one of two given quests has been lost, but NOT both.",de="Auslöser: Wenn einer von zwei angegebenen Quests (aber NICHT beide) fehlschlägt.",fr="Déclencheur: Si l'une des deux quêtes indiquées (mais PAS les deux) échoue."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsLost:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsLost:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnExactOneQuestIsLost:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if cl and ck then local mu=ck.State==QuestState.Over and ck.Result==QuestResult.Failure;local mv=cl.State==QuestState.Over and cl.Result==QuestResult.Failure;if mu and not mv or not mu and mv then return true end end;return false end;function B_Trigger_OnExactOneQuestIsLost:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsLost)Lib.Register("module/quest/Quest_API")function SetupQuest(gy)if GUI then return end;error(not gy.Name or not Quests[GetQuestID(gy.Name)],"SetupQuest: A quest named '%s' already exists!",tostring(gy.Name))return Lib.Quest.Global:CreateSimpleQuest(gy)end;API.CreateQuest=SetupQuest;function SetupNestedQuest(gy)if GUI or type(gy)~="table"then return end;error(gy.Segments~=nil and#gy.Segments~=0,"SetupNestedQuest: Segmented quest '%s' is missing it's segments!",tostring(gy.Name))return Lib.Quest.Global:CreateNestedQuest(gy)end;API.CreateNestedQuest=SetupNestedQuest;function AddDisableTriggerCondition(cF)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTriggerConditions,cF)end;API.AddDisableTriggerCondition=AddDisableTriggerCondition;function AddDisableTimerCondition(cF)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTimerConditions,cF)end;API.AddDisableTimerCondition=AddDisableTimerCondition;function AddDisableDecisionCondition(cF)if GUI then return end;table.insert(Lib.Quest.Global.ExternalDecisionConditions,cF)end;API.AddDisableDecisionCondition=AddDisableDecisionCondition;Lib.Quest=Lib.Quest or{}Lib.Quest.Name="Quest"Lib.Quest.Global={ExternalTriggerConditions={},ExternalTimerConditions={},ExternalDecisionConditions={},SegmentsOfQuest={}}Lib.Quest.Local={}SegmentResult={Success=1,Failure=2,Ignore=3}Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/IsValidQuestName")Lib.Require("core/core")Lib.Require("module/quest/Quest_API")Lib.Require("module/quest/Quest_Behavior")Lib.Register("module/quest/Quest")function Lib.Quest.Global:Initialize()if not self.IsInstalled then Quest_Loop=self.QuestLoop;self:OverrideKernelQuestApi()Lib.Quest.Local=nil end;self.IsInstalled=true end;function Lib.Quest.Global:OnSaveGameLoaded()end;function Lib.Quest.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ChatClosed then end end;function Lib.Quest.Global:CreateNestedQuest(gy)if not gy.Segments then return end;table.insert(gy,Goal_MapScriptFunction(self:GetCheckQuestSegmentsInlineGoal(),gy.Name))local Name=self:CreateSimpleQuest(gy)if Name~=nil then Quests[GetQuestID(Name)].Visible=false;self.SegmentsOfQuest[Name]={}for f=1,#gy.Segments,1 do self:CreateSegmentForSegmentedQuest(gy.Segments[f],Name,f)end end;return Name end;function Lib.Quest.Global:CreateSegmentForSegmentedQuest(gy,mw,b2)local Name=gy.Name or mw.."@Segment"..b2;local mx=Quests[GetQuestID(mw)]local my={Name=Name,Segments=gy.Segments,Result=gy.Result or SegmentResult.Success,Sender=gy.Sender or mx.SendingPlayer,Receiver=gy.Receiver or mx.ReceivingPlayer,Time=gy.Time,Suggestion=gy.Suggestion,Success=gy.Success,Failure=gy.Failure,Description=gy.Description,Loop=gy.Loop,Callback=gy.Callback}for f=1,#gy do table.insert(my,gy[f])end;table.insert(my,Trigger_OnQuestActive(mw,0))if my.Segments then self:CreateNestedQuest(my)else self:CreateSimpleQuest(my)end;table.insert(self.SegmentsOfQuest[mw],my)end;function Lib.Quest.Global:GetCheckQuestSegmentsInlineGoal()return function(dc)local mz=true;local mA=Lib.Quest.Global.SegmentsOfQuest[dc]for f=1,#mA,1 do local mB=Quests[GetQuestID(mA[f].Name)]if not mB then return false end;if mB.State==QuestState.Over and mB.Result~=QuestResult.Interrupted then if mA[f].Result==SegmentResult.Success and mB.Result~=QuestResult.Success then Lib.Quest.Global:AbortAllQuestSegments(dc)return false end;if mA[f].Result==SegmentResult.Failure and mB.Result~=QuestResult.Failure then Lib.Quest.Global:AbortAllQuestSegments(dc)return false end end;if mB.State~=QuestState.Over then mz=false end end;if mz then return true end end end;function Lib.Quest.Global:AbortAllQuestSegments(dc)for f=1,#self.SegmentsOfQuest[dc],1 do local mC=self.SegmentsOfQuest[dc][f].Name;if IsValidQuest(dc)and Quests[GetQuestID(mC)].State~=QuestState.Over then StopQuest(mC,true)end end end;function Lib.Quest.Global:CreateSimpleQuest(gy)if not gy.Name then AutomaticQuestNameCounter=(AutomaticQuestNameCounter or 0)+1;gy.Name=string.format("AutoNamed_Quest_%d",AutomaticQuestNameCounter)end;error(IsValidQuestName(gy.Name),"Quest '%s': invalid questname! Contains forbidden characters!",tostring(gy.Name))local mD={gy.Name,gy.Sender~=nil and gy.Sender or 1,gy.Receiver~=nil and gy.Receiver or 1,{},{},gy.Time~=nil and gy.Time or 0,{},{},gy.Callback,gy.Loop,gy.Visible==true or gy.Suggestion~=nil,gy.EndMessage==true or(gy.Failure~=nil or gy.Success~=nil),ConvertPlaceholders(type(gy.Description)=="table"and Localize(gy.Description)or gy.Description),ConvertPlaceholders(type(gy.Suggestion)=="table"and Localize(gy.Suggestion)or gy.Suggestion),ConvertPlaceholders(type(gy.Success)=="table"and Localize(gy.Success)or gy.Success),ConvertPlaceholders(type(gy.Failure)=="table"and Localize(gy.Failure)or gy.Failure)}if not self:QuestValidateQuestData(mD)then DumpTable(mD,"Quest")error(false,"ModuleQuest: Failed to vaidate quest data. Table has been copied to log.")end;for g,h in pairs(gy)do if tonumber(g)~=nil then if type(h)=="table"then if h.GetGoalTable then table.insert(mD[4],h:GetGoalTable())local mE=#mD[4]mD[4][mE].Context=h;mD[4][mE].FuncOverrideIcon=mD[4][mE].Context.GetIcon;mD[4][mE].FuncOverrideMsgKey=mD[4][mE].Context.GetMsgKey elseif h.GetReprisalTable then table.insert(mD[8],h:GetReprisalTable())elseif h.GetRewardTable then table.insert(mD[7],h:GetRewardTable())else table.insert(mD[5],h:GetTriggerTable())end end end end;if#mD[4]==0 then table.insert(mD[4],{Objective.Dummy})end;if#mD[5]==0 then table.insert(mD[5],{Triggers.Time,0})end;if mD[11]then table.insert(mD[5],self:GetFreeSpaceInlineTrigger())end;local bE,bF=QuestTemplate:New(unpack(mD,1,16))bF.MsgTableOverride=gy.MSGKeyOverwrite;bF.IconOverride=gy.IconOverwrite;bF.QuestInfo=gy.InfoText;bF.Arguments=gy.Arguments~=nil and table.copy(gy.Arguments)or{}return gy.Name,Quests[0]end;function Lib.Quest.Global:QuestValidateQuestData(gy)return type(gy[1])=="string"and IsValidQuestName(gy[1])and Quests[GetQuestID(gy[1])]==nil and(type(gy[2])=="number"and gy[2]>=1 and gy[2]<=8)and(type(gy[3])=="number"and gy[3]>=1 and gy[3]<=8)and(type(gy[6])=="number"and gy[6]>=0)and(gy[9]~=nil and type(gy[9])=="function"or gy[9]==nil)and(gy[10]~=nil and type(gy[10])=="function"or gy[10]==nil)and type(gy[11])=="boolean"and type(gy[12])=="boolean"and(gy[13]~=nil and type(gy[13])=="string"or gy[13]==nil)and(gy[14]~=nil and type(gy[14])=="string"or gy[14]==nil)and(gy[15]~=nil and type(gy[15])=="string"or gy[15]==nil)and(gy[16]~=nil and type(gy[16])=="string"or gy[16]==nil)end;function Lib.Quest.Global:GetFreeSpaceInlineTrigger()return{Triggers.Custom2,{{},function(gy,b1)local mF=0;if Quests[0]>0 then for f=1,Quests[0],1 do if Quests[f].State==QuestState.Active and Quests[f].Visible==true then mF=mF+1 end end end;return mF<6 end}}end;function Lib.Quest.Global:OverrideKernelQuestApi()FailQuest_Orig_ModuleQuest=FailQuest;FailQuest=function(dc,dd)if Lib.Quest.Global.SegmentsOfQuest[dc]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dc])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then FailQuest_Orig_ModuleQuest(h.Name,true)end end end;FailQuest_Orig_ModuleQuest(dc,dd)end;RestartQuest_Orig_ModuleQuest=RestartQuest;RestartQuest=function(dc,dd)if Lib.Quest.Global.SegmentsOfQuest[dc]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dc])do if IsValidQuest(h.Name)then StopQuest_Orig_ModuleQuest(h.Name,true)RestartQuest_Orig_ModuleQuest(h.Name,true)end end end;RestartQuest_Orig_ModuleQuest(dc,dd)end;StartQuest_Orig_ModuleQuest=StartQuest;StartQuest=function(dc,dd)if Lib.Quest.Global.SegmentsOfQuest[dc]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dc])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StartQuest_Orig_ModuleQuest(h.Name,true)end end end;StartQuest_Orig_ModuleQuest(dc,dd)end;StopQuest_Orig_ModuleQuest=StopQuest;StopQuest=function(dc,dd)if Lib.Quest.Global.SegmentsOfQuest[dc]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dc])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;StopQuest_Orig_ModuleQuest(dc,dd)end;WinQuest_Orig_ModuleQuest=WinQuest;WinQuest=function(dc,dd)if Lib.Quest.Global.SegmentsOfQuest[dc]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dc])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;WinQuest_Orig_ModuleQuest(dc,dd)end end;function Lib.Quest.Global.QuestLoop(mG)local self=JobQueue_GetParameter(mG)if self.LoopCallback~=nil then self:LoopCallback()end;if self.State==QuestState.NotTriggered then local mH=true;for f=1,#Lib.Quest.Global.ExternalTriggerConditions,1 do if not Lib.Quest.Global.ExternalTriggerConditions[f](self.ReceivingPlayer,self)then mH=false;break end end;if mH then for f=1,self.Triggers[0]do local ba=Lib.Quest.Global:SerializeBehavior(self.Triggers[f],Triggers.Custom2,4)if ba and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..ba,true)end;mH=mH and self:IsTriggerActive(self.Triggers[f])end end;if mH then self:SetMsgKeyOverride()self:SetIconOverride()self:Trigger()end elseif self.State==QuestState.Active then for f=1,#Lib.Quest.Global.ExternalTimerConditions,1 do if not Lib.Quest.Global.ExternalTimerConditions[f](self.ReceivingPlayer,self)then self.StartTime=self.StartTime+1;break end end;local mI=true;for f=1,#Lib.Quest.Global.ExternalDecisionConditions,1 do if not Lib.Quest.Global.ExternalDecisionConditions[f](self.ReceivingPlayer,self)then mI=false;break end end;if mI then local mJ=true;local mK=false;for f=1,self.Objectives[0]do local ba=Lib.Quest.Global:SerializeBehavior(self.Objectives[f],Objective.Custom2,1)if ba and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..ba,true)end;local mL=self:IsObjectiveCompleted(self.Objectives[f])if self.Objectives[f].Type==Objective.Deliver and mL==nil then if self.Objectives[f].Data[4]==nil then self.Objectives[f].Data[4]=0 end;if self.Objectives[f].Data[3]~=nil then self.Objectives[f].Data[4]=self.Objectives[f].Data[4]+1 end;local mM=self.StartTime;local mN=self.Duration;local mO=self.Objectives[f].Data[4]local mP=self.StartTime+self.Duration-self.Objectives[f].Data[4]if self.Duration>0 and self.StartTime+self.Duration+self.Objectives[f].Data[4]<Logic.GetTime()then mL=false end else if self.Duration>0 and self.StartTime+self.Duration<Logic.GetTime()then if mL==nil and(self.Objectives[f].Type==Objective.Protect or self.Objectives[f].Type==Objective.Dummy or self.Objectives[f].Type==Objective.NoChange)then mL=true elseif mL==nil or self.Objectives[f].Type==Objective.DummyFail then mL=false end end end;mJ=mL==true and mJ;mK=mL==false or mK end;if mJ then self:Success()elseif mK then self:Fail()end end else if self.IsEventQuest==true then Logic.ExecuteInLuaLocalState("StopEventMusic(nil, "..self.ReceivingPlayer..")")end;if self.Result==QuestResult.Success then for f=1,self.Rewards[0]do local ba=Lib.Quest.Global:SerializeBehavior(self.Rewards[f],Reward.Custom,3)if ba and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..ba,true)end;self:AddReward(self.Rewards[f])end elseif self.Result==QuestResult.Failure then for f=1,self.Reprisals[0]do local ba=Lib.Quest.Global:SerializeBehavior(self.Reprisals[f],Reprisal.Custom,3)if ba and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..ba,true)end;self:AddReprisal(self.Reprisals[f])end end;if self.EndCallback~=nil then self:EndCallback()end;return true end end;function Lib.Quest.Global:SerializeBehavior(gy,mQ,mR)local mS="Objective"local mT=Objective;if mR==2 then mS="Reprisal"mT=Reprisal elseif mR==3 then mS="Reward"mT=Reward elseif mR==4 then mS="Trigger"mT=Triggers end;local mU="Running {"local mV=GetNameOfKeyInTable(mT,gy.Type)if gy.Type==mQ then local mW=gy.Data[1].FuncName;mU=mU..mS.."."..mV..""if mW==nil then return else mU=mU..", "..tostring(mW)end;if gy.Data and gy.Data[1].i47ya_6aghw_frxil and#gy.Data[1].i47ya_6aghw_frxil>0 then for aV=1,#gy.Data[1].i47ya_6aghw_frxil,1 do mU=mU..", ("..type(gy.Data[1].i47ya_6aghw_frxil[aV])..") "..tostring(gy.Data[1].i47ya_6aghw_frxil[aV])end end else mU=mU..mS.."."..mV..""if gy.Data then if type(gy.Data)=="table"then for aV=1,#gy.Data do mU=mU..", ("..type(gy.Data[aV])..") "..tostring(gy.Data[aV])end else mU=mU..", ("..type(gy.Data)..") "..tostring(gy.Data)end end end;mU=mU.."}"return mU end;function Lib.Quest.Global:FindQuestsByAttribute(mX,...)mX=math.max(mX or 65565,1)local arg={...}local mY={}for f=1,Quests[0],1 do local mZ=true;for aV=1,#arg,2 do if arg[aV]=="Name"then if not string.find(Quests[f].Identifier,"^"..arg[aV+1])then mZ=false;break end else if Quests[f][arg[aV]]~=arg[aV+1]then mZ=false;break end end end;if mZ then table.insert(mY,Quests[f])end end;return mY end;function Lib.Quest.Global:FindQuestsByExactName(dc,mX)return self:FindQuestsByAttribute(mX,"Identifier",dc)end;function Lib.Quest.Global:ListQuestsByAttribute(mX,...)mX=math.max(mX or 65565,1)local mY=self:FindQuestsByAttribute(mX,...)local m_=""local n0=0;for f=1,#mY,1 do if n0>=mX then m_=m_.."... ("..#mY-n0 .." more)"break end;m_=m_.."> "..mY[f].Identifier.."{cr}"n0=n0+1 end;return"Found quests:{cr}"..m_ end;function Lib.Quest.Global:ListQuestsByState(n1,mX)return self:ListQuestsByAttribute(mX,"State",n1)end;function Lib.Quest.Global:ListQuestsByResult(n2,mX)return self:ListQuestsByAttribute(mX,"Result",n2)end;function Lib.Quest.Global:ListQuestsByName(dc,mX)return self:ListQuestsByAttribute(mX,"Name",dc)end;function Lib.Quest.Global:ProcessChatInput(d9,q,n3)if n3 then local fi=Lib.Core.Debug:CommandTokenizer(d9)for f=1,#fi,1 do if fi[f][1]=="fail"or fi[f][1]=="start"or fi[f][1]=="restart"or fi[f][1]=="stop"or fi[f][1]=="win"then local n4=self:FindQuestsByExactName(fi[f][2],1)error(#n4==1,"Unable to find quest containing '"..fi[f][2].."'")if fi[f][1]=="fail"then FailQuest(n4[1].Identifier)log("forced quest to fail: '"..n4[1].Identifier.."'")elseif fi[f][1]=="restart"then RestartQuest(n4[1].Identifier)log("forced quest to restart: '"..n4[1].Identifier.."'")elseif fi[f][1]=="start"then StartQuest(n4[1].Identifier)log("forced quest to start: '"..n4[1].Identifier.."'")elseif fi[f][1]=="stop"then StopQuest(n4[1].Identifier)log("forced quest to stop: '"..n4[1].Identifier.."'")elseif fi[f][1]=="win"then WinQuest(n4[1].Identifier)log("forced quest to succeed: '"..n4[1].Identifier.."'")end end;if fi[f][1]=="stopped"then AddNote(self:ListQuestsByResult(QuestResult.Interrupted,15))log(self:ListQuestsByResult(QuestResult.Interrupted))elseif fi[f][1]=="active"then AddNote(self:ListQuestsByState(QuestState.Active,15))log(self:ListQuestsByState(QuestState.Active))elseif fi[f][1]=="won"then AddNote(self:ListQuestsByResult(QuestResult.Success,15))log(self:ListQuestsByResult(QuestResult.Success))elseif fi[f][1]=="failed"then AddNote(self:ListQuestsByResult(QuestResult.Failure,15))log(self:ListQuestsByResult(QuestResult.Failure))elseif fi[f][1]=="waiting"then AddNote(self:ListQuestsByState(QuestState.NotTriggered,15))log(self:ListQuestsByState(QuestState.NotTriggered))elseif fi[f][1]=="find"then AddNote(self:ListQuestsByName(fi[f][2],15))log(self:ListQuestsByName(fi[f][2]))end end end end;function Lib.Quest.Local:Initialize()if not self.IsInstalled then self:OverwriteQuestTexts()Lib.Quest.Global=nil end;self.IsInstalled=true end;function Lib.Quest.Local:OnSaveGameLoaded()end;function Lib.Quest.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2],arg[3])end end;function Lib.Quest.Local:ProcessChatInput(d9,q,n3)if not n3 or GUI.GetPlayerID()~=q then return end;ExecuteGlobal([[Lib.Quest.Global:ProcessChatInput("%s", %d, %s)]],d9,q,tostring(n3==true))end;function Lib.Quest.Local:OverwriteQuestTexts()self.Orig_QuestLog_GetQuestTypeCaption=QuestLog.GetQuestTypeCaption;QuestLog.GetQuestTypeCaption=function(iq,b1)if iq==Objective.Custom or iq==Objective.Custom2 or iq==Objective.NoChange or iq==Objective.Dummy or iq==Objective.DummyFail then local ba=b1.QuestDescription or""if string.find(ba,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then return XGUIEng.GetStringTableText(ba)end end;return Lib.Quest.Local.Orig_QuestLog_GetQuestTypeCaption(iq,b1)end;Wrapped_GetStringTableText=function(cP,cQ)local n5=XGUIEng.GetStringTableText(cQ)if n5~=""then return n5 end;if cP==0 then return""end;local bF=Quests[cP]if not bF then return""end;if string.find(cQ,"speech")then local n6=string.find(cQ,"/")if not n6 then return""end;local n7=string.sub(cQ,n6+1)if bF.Identifier==n7 and bF.QuestStartMsg and not string.find(bF.QuestStartMsg,g_OverrideTextKeyPattern)then return bF.QuestStartMsg end;if bF.Identifier.."_Success"==n7 and bF.QuestSuccessMsg and not string.find(bF.QuestSuccessMsg,g_OverrideTextKeyPattern)then return bF.QuestSuccessMsg end;if bF.Identifier.."_Failure"==n7 and bF.QuestFailureMsg and not string.find(bF.QuestFailureMsg,g_OverrideTextKeyPattern)then return bF.QuestFailureMsg end else if bF.QuestDescription then local ba=bF.QuestDescription or""if string.find(ba,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba=XGUIEng.GetStringTableText(ba)end;return string.match(ba,"^[^~]+ ~ (.+)$")or ba end end;return""end;GetTextOverride=function(b1)assert(type(b1)=="table")local d;if b1.State==QuestState.Over then if b1.Result==QuestResult.Success then local ba=b1.QuestSuccessMsg or""if string.find(ba,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba="KEY("..b1.QuestSuccessMsg..")"end;d=string.match(ba,g_OverrideTextKeyPattern)elseif b1.Result==QuestResult.Failure then local ba=b1.QuestFailureMsg or""if string.find(ba,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba="KEY("..b1.QuestFailureMsg..")"end;d=string.match(ba,g_OverrideTextKeyPattern)end else local ba=b1.QuestStartMsg or""if string.find(ba,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba="KEY("..b1.QuestStartMsg..")"end;d=string.match(ba,g_OverrideTextKeyPattern)end;if d then local n8,n9=string.match(d,"^([^/]+)/([^/]+)$")if n8 and n9 then return n9,n8 end end;return d end end;RegisterModule(Lib.Quest.Name)Lib.Register("module/quest/QuestBehavior_Behavior")function Goal_MoveToPosition(...)return B_Goal_MoveToPosition:new(...)end;B_Goal_MoveToPosition={Name="Goal_MoveToPosition",Description={en="Goal: A entity have to moved as close as the distance to another entity. The target can be marked with a static marker.",de="Ziel: Ein Entity muss sich einer anderen bis auf eine bestimmte Distanz nähern. Die Lupe wird angezeigt, das Ziel kann markiert werden.",fr="Objectif: une entité doit s'approcher d'une autre à une distance donnée. La loupe est affichée, la cible peut être marquée."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Custom,en="Marker",de="Ziel markieren",fr="Marquer la cible"}}}function B_Goal_MoveToPosition:GetGoalTable()return{Objective.Distance,self.Entity,self.Target,self.Distance,self.Marker}end;function B_Goal_MoveToPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.Distance=b3*1 elseif b2==3 then self.Marker=ToBoolean(b3)end end;function B_Goal_MoveToPosition:GetCustomData(b2)local b5={}if b2==3 then b5={"true","false"}end;return b5 end;RegisterBehavior(B_Goal_MoveToPosition)function Goal_AmmunitionAmount(...)return B_Goal_AmmunitionAmount:new(...)end;B_Goal_AmmunitionAmount={Name="Goal_AmmunitionAmount",Description={en="Goal: Reach a smaller or bigger value than the given amount of ammunition in a war machine.",de="Ziel: Über- oder unterschreite die angegebene Anzahl Munition in einem Kriegsgerät.",fr="Objectif : Dépasser ou ne pas dépasser le nombre de munitions indiqué dans un engin de guerre."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_AmmunitionAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_AmmunitionAmount:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 elseif b2==1 then self.bRelSmallerThan=tostring(b3)=="true"or b3=="<"elseif b2==2 then self.Amount=b3*1 end end;function B_Goal_AmmunitionAmount:CustomFunction()local B=GetID(self.Scriptname)if not IsExisting(B)then return false end;local bu=Logic.GetAmmunitionAmount(B)if self.bRelSmallerThan and bu<self.Amount or not self.bRelSmallerThan and bu>=self.Amount then return true end;return nil end;function B_Goal_AmmunitionAmount:Debug(b1)if self.Amount<0 then error(b1.Identifier..": "..self.Name..": Amount is negative")return true end end;function B_Goal_AmmunitionAmount:GetCustomData(b2)if b2==1 then return{"<",">="}end end;RegisterBehavior(B_Goal_AmmunitionAmount)function Goal_CityReputation(...)return B_Goal_CityReputation:new(...)end;B_Goal_CityReputation={Name="Goal_CityReputation",Description={en="Goal: The reputation of the quest receivers city must at least reach the desired hight.",de="Ziel: Der Ruf der Stadt des Empfängers muss mindestens so hoch sein, wie angegeben.",fr="Objectif: la réputation de la ville du receveur doit être au moins aussi élevée que celle indiquée."},Parameter={{ParameterType.Number,en="City reputation",de="Ruf der Stadt",fr="Réputation de la ville"}},Text={de="RUF DER STADT{cr}{cr}Hebe den Ruf der Stadt durch weise Herrschaft an!{cr}Benötigter Ruf: %d",en="CITY REPUTATION{cr}{cr}Raise your reputation by fair rulership!{cr}Needed reputation: %d",fr="RÉPUTATION DE LA VILLE{cr}{cr} Augmente la réputation de la ville en la gouvernant sagement!{cr}Réputation requise : %d"}}function B_Goal_CityReputation:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CityReputation:AddParameter(b2,b3)if b2==0 then self.Reputation=b3*1 end end;function B_Goal_CityReputation:CustomFunction(b1)self:SetCaption(b1)local na=Logic.GetCityReputation(b1.ReceivingPlayer)*100;if na>=self.Reputation then return true end end;function B_Goal_CityReputation:SetCaption(b1)if not b1.QuestDescription or b1.QuestDescription==""then local ba=string.format(Localize(self.Text),self.Reputation)Lib.Core.Quest:ChangeCustomQuestCaptionText(ba.."%",b1)end end;function B_Goal_CityReputation:GetIcon()return{5,14}end;function B_Goal_CityReputation:Debug(b1)if type(self.Reputation)~="number"or self.Reputation<0 or self.Reputation>100 then error(b1.Identifier..": "..self.Name..": Reputation must be between 0 and 100!")return true end;return false end;RegisterBehavior(B_Goal_CityReputation)function Goal_DestroySpawnedEntities(...)return B_Goal_DestroySpawnedEntities:new(...)end;B_Goal_DestroySpawnedEntities={Name="Goal_DestroySpawnedEntities",Description={en="Goal: Destroy all entities spawned at the spawnpoint.",de="Ziel: Zerstöre alle Entitäten, die bei dem Spawnpoint erzeugt wurde.",fr="Objectif: Détruire toutes les entités créées au point d'apparition."},Parameter={{ParameterType.ScriptName,en="Spawnpoint",de="Spawnpoint",fr="Point d'émergence"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Custom,en="Name is prefixed",de="Name ist Präfix",fr="Le nom est un préfixe"}}}function B_Goal_DestroySpawnedEntities:GetGoalTable()if self.Prefixed then local cL=table.remove(self.SpawnPoint)local f=1;while IsExisting(cL..f)do table.insert(self.SpawnPoint,cL..f)f=f+1 end;assert(#self.SpawnPoint>0,"No spawnpoints found!")end;return{Objective.DestroyEntities,3,self.SpawnPoint,self.Amount}end;function B_Goal_DestroySpawnedEntities:AddParameter(b2,b3)if b2==0 then self.SpawnPoint={b3}elseif b2==1 then self.Amount=b3*1 elseif b2==2 then b3=b3 or"false"self.Prefixed=ToBoolean(b3)end end;function B_Goal_DestroySpawnedEntities:GetMsgKey()local an=GetID(self.SpawnPoint[1])if an~=0 then local h9=Logic.GetEntityTypeName(Logic.GetEntityType(an))if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_Destroy_Leader"elseif h9:find("Bear")or h9:find("Lion")or h9:find("Tiger")or h9:find("Wolf")then return"Quest_DestroyEntities_Predators"elseif h9:find("Military")or h9:find("Cart")then return"Quest_DestroyEntities_Unit"end end;return"Quest_DestroyEntities"end;function B_Goal_DestroySpawnedEntities:GetCustomData(b2)if b2==2 then return{"false","true"}end end;RegisterBehavior(B_Goal_DestroySpawnedEntities)function Goal_StealGold(...)return B_Goal_StealGold:new(...)end;B_Goal_StealGold={Name="Goal_StealGold",Description={en="Goal: Steal an explicit amount of gold from a players or any players city buildings.",de="Ziel: Diebe sollen eine bestimmte Menge Gold aus feindlichen Stadtgebäuden stehlen.",fr="Objectif: les voleurs doivent dérober une certaine quantité d'or dans les bâtiments urbains ennemis."},Parameter={{ParameterType.Number,en="Amount on Gold",de="Zu stehlende Menge",fr="Quantité à voler"},{ParameterType.Custom,en="Target player",de="Spieler von dem gestohlen wird",fr="Joueur à qui l'on vole"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Print progress",de="Fortschritt ausgeben",fr="Afficher les progrès"}}}function B_Goal_StealGold:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealGold:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then local n=tonumber(b3)or-1;self.Target=n*1 elseif b2==2 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)elseif b2==3 then b3=b3 or"true"self.Printout=ToBoolean(b3)end;self.StohlenGold=0 end;function B_Goal_StealGold:GetCustomData(b2)if b2==1 then return{"-",1,2,3,4,5,6,7,8}elseif b2==2 then return{"true","false"}end end;function B_Goal_StealGold:SetDescriptionOverwrite(b1)local nb=Localize({de=" anderen Spielern ",en=" different parties ",fr=" d'autres joueurs "})if self.Target~=-1 then nb=GetPlayerName(self.Target)if nb==nil or nb==""then nb=" PLAYER_NAME_MISSING "end end;if self.CheatEarnings then local nc={self.Target}if self.Target==-1 then nc={1,2,3,4,5,6,7,8}end;for f=1,#nc,1 do if f~=b1.ReceivingPlayer and Logic.GetStoreHouse(f)~=0 then local jm={Logic.GetPlayerEntitiesInCategory(f,EntityCategories.CityBuilding)}for aV=1,#jm,1 do local nd=Logic.GetBuildingProductEarnings(jm[aV])if nd<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(jm[aV],nd+1)end end end end end;local br=self.Amount-self.StohlenGold;br=br>0 and br or 0;local ga={de="Gold von %s stehlen {cr}{cr}Aus Stadtgebäuden zu stehlende Goldmenge: %d",en="Steal gold from %s {cr}{cr}Amount on gold to steal from city buildings: %d",fr="Voler l'or de %s {cr}{cr}Quantité d'or à voler dans les bâtiments de la ville : %d"}return"{center}"..string.format(Localize(ga),nb,br)end;function B_Goal_StealGold:CustomFunction(b1)if Lib.Core.Quest then Lib.Core.Quest:ChangeCustomQuestCaptionText(self:SetDescriptionOverwrite(b1),b1)end;if self.StohlenGold>=self.Amount then return true end;return nil end;function B_Goal_StealGold:GetIcon()return{5,13}end;function B_Goal_StealGold:Debug(b1)if tonumber(self.Amount)==nil and self.Amount<0 then error(b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;function B_Goal_StealGold:Reset(b1)self.StohlenGold=0 end;RegisterBehavior(B_Goal_StealGold)function Goal_StealFromBuilding(...)return B_Goal_StealFromBuilding:new(...)end;B_Goal_StealFromBuilding={Name="Goal_StealFromBuilding",Description={en="Goal: The player has to steal from a building. Not a castle and not a village storehouse!",de="Ziel: Der Spieler muss ein bestimmtes Gebäude bestehlen. Dies darf keine Burg und kein Dorflagerhaus sein!",fr="Objectif: Le joueur doit voler un bâtiment spécifique. Il ne peut s'agir ni d'un château ni d'un entrepôt de village !"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"}}}function B_Goal_StealFromBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealFromBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)end;self.RobberList={}end;function B_Goal_StealFromBuilding:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Goal_StealFromBuilding:SetDescriptionOverwrite(b1)local ne=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Cathedrals)==1;local nf=Logic.GetEntityType(GetID(self.Building))==Entities.B_StoreHouse;local ng=Logic.GetEntityType(GetID(self.Building))==Entities.B_Cistern;local ga;if ne then ga={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert die markierte Kirche.",en="Sabotage {cr}{cr} Send a thief to sabotage the marked chapel.",fr="Sabotage {cr}{cr} Envoyez un voleur pour saboter la chapelle marquée."}elseif nf then ga={de="Lagerhaus bestehlen {cr}{cr} Sendet einen Dieb in das markierte Lagerhaus.",en="Steal from storehouse {cr}{cr} Steal from the marked storehouse.",fr="Voler un entrepôt {cr}{cr} Envoie un voleur dans l'entrepôt marqué."}elseif ng then ga={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert den markierten Brunnen.",en="Sabotage {cr}{cr} Send a thief and break the marked well of the enemy.",fr="Sabotage {cr}{cr} Envoie un voleur et sabote le puits marqué."}else ga={de="Gebäude bestehlen {cr}{cr} Sendet einen Dieb und bestehlt das markierte Gebäude.",en="Steal from building {cr}{cr} Send a thief to steal from the marked building.",fr="Voler un bâtiment {cr}{cr} Envoie un voleur et vole le bâtiment marqué."}end;return"{center}"..Localize(ga)end;function B_Goal_StealFromBuilding:CustomFunction(b1)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aH=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aH.X,aH.Y,0)end;if self.CheatEarnings then local jq=GetID(self.Building)local nd=Logic.GetBuildingProductEarnings(jq)if Logic.IsEntityInCategory(jq,EntityCategories.CityBuilding)==1 and nd<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(jq,nd+1)end end;if self.SuccessfullyStohlen then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_StealFromBuilding:GetIcon()return{5,13}end;function B_Goal_StealFromBuilding:Debug(b1)local nh=Logic.GetEntityTypeName(Logic.GetEntityType(GetID(self.Building)))local ni=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Headquarters)==1;if Logic.IsBuilding(GetID(self.Building))==0 then error(b1.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(b1.Identifier..": "..self.Name..": target is destroyed :(")return true elseif string.find(nh,"B_NPC_BanditsHQ")or string.find(nh,"B_NPC_Cloister")or string.find(nh,"B_NPC_StoreHouse")then error(b1.Identifier..": "..self.Name..": village storehouses are not allowed!")return true elseif ni then error(b1.Identifier..": "..self.Name..": use Goal_StealInformation for headquarters!")return true end;return false end;function B_Goal_StealFromBuilding:Reset(b1)self.SuccessfullyStohlen=false;self.RobberList={}self.Marker=nil end;function B_Goal_StealFromBuilding:Interrupt(b1)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_StealFromBuilding)function Goal_SpyOnBuilding(...)return B_Goal_SpyOnBuilding:new(...)end;B_Goal_SpyOnBuilding={Name="Goal_SpyOnBuilding",IconOverwrite={5,13},Description={en="Goal: Infiltrate a building with a thief. A thief must be able to steal from the target building.",de="Ziel: Infiltriere ein Gebäude mit einem Dieb. Nur mit Gebaueden möglich, die bestohlen werden koennen.",fr="Objectif: Infiltrer un bâtiment avec un voleur. Seulement possible avec des bâtiments qui peuvent être volés."},Parameter={{ParameterType.ScriptName,en="Target Building",de="Zielgebäude",fr="Bâtiment cible"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Destroy Thief",de="Dieb löschen",fr="Supprimer le voleur"}}}function B_Goal_SpyOnBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SpyOnBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)elseif b2==2 then b3=b3 or"true"self.Delete=ToBoolean(b3)end end;function B_Goal_SpyOnBuilding:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Goal_SpyOnBuilding:SetDescriptionOverwrite(b1)if not b1.QuestDescription then local ga={de="Gebäude infriltrieren {cr}{cr}Spioniere das markierte Gebäude mit einem Dieb aus!",en="Infiltrate building {cr}{cr}Spy on the highlighted buildings with a thief!",fr="Infiltrer un bâtiment {cr}{cr}Espionner le bâtiment marqué avec un voleur!"}return Localize(ga)else return b1.QuestDescription end end;function B_Goal_SpyOnBuilding:CustomFunction(b1)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aH=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aH.X,aH.Y,0)end;if self.CheatEarnings then local jq=GetID(self.Building)if Logic.IsEntityInCategory(jq,EntityCategories.CityBuilding)==1 and Logic.GetBuildingEarnings(jq)<5 then Logic.SetBuildingEarnings(jq,5)end end;if self.Infiltrated then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_SpyOnBuilding:GetIcon()return self.IconOverwrite end;function B_Goal_SpyOnBuilding:Debug(b1)if Logic.IsBuilding(GetID(self.Building))==0 then error(b1.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(b1.Identifier..": "..self.Name..": target is destroyed :(")return true end;return false end;function B_Goal_SpyOnBuilding:Reset(b1)self.Infiltrated=false;self.Marker=nil end;function B_Goal_SpyOnBuilding:Interrupt(b1)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_SpyOnBuilding)function Goal_DestroySoldiers(...)return B_Goal_DestroySoldiers:new(...)end;B_Goal_DestroySoldiers={Name="Goal_DestroySoldiers",Description={en="Goal: Destroy a given amount of enemy soldiers",de="Ziel: Zerstöre eine Anzahl gegnerischer Soldaten",fr="Objectif: Détruire un certain nombre de soldats ennemis"},Parameter={{ParameterType.PlayerID,en="Attacking Player",de="Angreifer",fr="Attaquant"},{ParameterType.PlayerID,en="Defending Player",de="Verteidiger",fr="Défenseur"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}},Text={de="{center}SOLDATEN ZERSTÖREN {cr}{cr}von der Partei: %s{cr}{cr}Anzahl: %d",en="{center}DESTROY SOLDIERS {cr}{cr}from faction: %s{cr}{cr}Amount: %d",fr="{center}DESTRUIRE DES SOLDATS {cr}{cr}de la faction: %s{cr}{cr}Nombre : %d"}}function B_Goal_DestroySoldiers:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_DestroySoldiers:AddParameter(b2,b3)if b2==0 then self.AttackingPlayer=b3*1 elseif b2==1 then self.AttackedPlayer=b3*1 elseif b2==2 then self.KillsNeeded=b3*1 end end;function B_Goal_DestroySoldiers:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local s=GetPlayerName(self.AttackedPlayer)or"Player "..self.AttackedPlayer;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Swift.Text:Localize(self.Text),s,self.KillsNeeded),b1)end;local nj=0;if Lib.QuestBehavior then nj=Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(self.AttackingPlayer,self.AttackedPlayer)end;if self.KillsNeeded<=nj then return true end end;function B_Goal_DestroySoldiers:Debug(b1)if Logic.GetStoreHouse(self.AttackingPlayer)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AttackinPlayer.." is dead :-(")return true elseif Logic.GetStoreHouse(self.AttackedPlayer)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AttackedPlayer.." is dead :-(")return true elseif self.KillsNeeded<0 then error(b1.Identifier..": "..self.Name..": Amount negative")return true end end;function B_Goal_DestroySoldiers:GetIcon()return{7,12}end;RegisterBehavior(B_Goal_DestroySoldiers)function Reprisal_SetPosition(...)return B_Reprisal_SetPosition:new(...)end;B_Reprisal_SetPosition={Name="Reprisal_SetPosition",Description={en="Reprisal: Places an entity relative to the position of another. The entity can look the target.",de="Vergeltung: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden.",fr="Rétribution: place une Entity vis-à-vis de l'emplacement d'une autre. L'entité peut être orientée vers la cible."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target position",de="Zielposition",fr="Position cible"},{ParameterType.Custom,en="Face to face",de="Ziel ansehen",fr="Voir la cible"},{ParameterType.Number,en="Distance",de="Zielentfernung",fr="Distance de la cible"}}}function B_Reprisal_SetPosition:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.FaceToFace=ToBoolean(b3)elseif b2==3 then self.Distance=b3~=nil and tonumber(b3)or 100 end end;function B_Reprisal_SetPosition:CustomFunction(b1)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;local bZ=GetID(self.Entity)local nk=GetID(self.Target)local I,J,K=Logic.EntityGetPos(nk)if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)end;local nl=Logic.GetEntityOrientation(nk)+90;if self.FaceToFace then I=I+self.Distance*math.cos(math.rad(nl))J=J+self.Distance*math.sin(math.rad(nl))Logic.DEBUG_SetSettlerPosition(bZ,I,J)LookAt(self.Entity,self.Target)else if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)end;Logic.DEBUG_SetSettlerPosition(bZ,I,J)end end;function B_Reprisal_SetPosition:GetCustomData(b2)if b2==2 then return{"true","false"}end end;function B_Reprisal_SetPosition:Debug(b1)if self.FaceToFace then if tonumber(self.Distance)==nil or self.Distance<50 then error(b1.Identifier..": "..self.Name..": Distance is nil or to short!")return true end end;if not IsExisting(self.Entity)or not IsExisting(self.Target)then error(b1.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetPosition)function Reprisal_ChangePlayer(...)return B_Reprisal_ChangePlayer:new(...)end;B_Reprisal_ChangePlayer={Name="Reprisal_ChangePlayer",Description={en="Reprisal: Changes the owner of the entity or a battalion.",de="Vergeltung: Aendert den Besitzer einer Entity oder eines Battalions.",fr="Rétribution : Change le propriétaire d'une entité ou d'un bataillon."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Reprisal_ChangePlayer:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ChangePlayer:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Player=tostring(b3)end end;function B_Reprisal_ChangePlayer:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)if Logic.IsLeader(bJ)==1 then Logic.ChangeSettlerPlayerID(bJ,self.Player)else Logic.ChangeEntityPlayerID(bJ,self.Player)end end;function B_Reprisal_ChangePlayer:GetCustomData(b2)if b2==1 then return{"0","1","2","3","4","5","6","7","8"}end end;function B_Reprisal_ChangePlayer:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_ChangePlayer)function Reprisal_SetVisible(...)return B_Reprisal_SetVisible:new(...)end;B_Reprisal_SetVisible={Name="Reprisal_SetVisible",Description={en="Reprisal: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst.",fr="Rétribution: fixe la visibilité d'une Entité. S'il s'agit d'un spawn, les Entities spawnées sont également affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Visible",de="Sichtbar",fr="Visible"}}}function B_Reprisal_SetVisible:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVisible:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Visible=ToBoolean(b3)end end;function B_Reprisal_SetVisible:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local bM=Logic.EntityGetPlayer(bJ)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)if string.find(nm,"^S_")or string.find(nm,"^B_NPC_Bandits")or string.find(nm,"^B_NPC_Barracks")then local nn={Logic.GetSpawnedEntities(bJ)}for f=1,#nn do if Logic.IsLeader(nn[f])==1 then local no={Logic.GetSoldiersAttachedToLeader(nn[f])}for aV=2,#no do Logic.SetVisible(no[aV],self.Visible)end else Logic.SetVisible(nn[f],self.Visible)end end else if Logic.IsLeader(bJ)==1 then local no={Logic.GetSoldiersAttachedToLeader(bJ)}for aV=2,#no do Logic.SetVisible(no[aV],self.Visible)end else Logic.SetVisible(bJ,self.Visible)end end end;function B_Reprisal_SetVisible:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Reprisal_SetVisible:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVisible)function Reprisal_SetVulnerability(...)return B_Reprisal_SetVulnerability:new(...)end;B_Reprisal_SetVulnerability={Name="Reprisal_SetVulnerability",Description={en="Reprisal: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen.",fr="Rétribution: rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les Entities spawnées sont affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Vulnerability",de="Verwundbar",fr="Vulnérabilité"}}}function B_Reprisal_SetVulnerability:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVulnerability:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Vulnerability=ToBoolean(b3)end end;function B_Reprisal_SetVulnerability:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)local np={bJ}if string.find(nm,"S_")or string.find(nm,"B_NPC_Bandits")or string.find(nm,"B_NPC_Barracks")then np={Logic.GetSpawnedEntities(bJ)}end;local nq="MakeInvulnerable"if self.Vulnerability then nq="MakeVulnerable"end;for f=1,#np,1 do if Logic.IsLeader(np[f])==1 then local aC={Logic.GetSoldiersAttachedToLeader(np[f])}for aV=2,#aC,1 do _G[nq](aC[aV])end end;_G[nq](np[f])end end;function B_Reprisal_SetVulnerability:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Reprisal_SetVulnerability:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVulnerability)function Reprisal_SetModel(...)return B_Reprisal_SetModel:new(...)end;B_Reprisal_SetModel={Name="Reprisal_SetModel",Description={en="Reprisal: Changes the model of the entity. Be careful, some models crash the game.",de="Vergeltung: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz.",fr="Rétribution: modifie le modèle d'une entité. Attention: certains modèles entraînent un crash."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Model",de="Model",fr="Modèle"}}}function B_Reprisal_SetModel:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetModel:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Model=b3 end end;function B_Reprisal_SetModel:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)Logic.SetModel(bJ,Models[self.Model])end;function B_Reprisal_SetModel:GetCustomData(b2)if b2==1 then local b5={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(b5,g)end end;table.insert(b5,"Effects_Dust01")table.insert(b5,"Effects_E_DestructionSmoke")table.insert(b5,"Effects_E_DustLarge")table.insert(b5,"Effects_E_DustSmall")table.insert(b5,"Effects_E_Firebreath")table.insert(b5,"Effects_E_Fireworks01")table.insert(b5,"Effects_E_Flies01")table.insert(b5,"Effects_E_Grasshopper03")table.insert(b5,"Effects_E_HealingFX")table.insert(b5,"Effects_E_Knight_Chivalry_Aura")table.insert(b5,"Effects_E_Knight_Plunder_Aura")table.insert(b5,"Effects_E_Knight_Song_Aura")table.insert(b5,"Effects_E_Knight_Trader_Aura")table.insert(b5,"Effects_E_Knight_Wisdom_Aura")table.insert(b5,"Effects_E_KnightFight")table.insert(b5,"Effects_E_NA_BlowingSand01")table.insert(b5,"Effects_E_NE_BlowingSnow01")table.insert(b5,"Effects_E_Oillamp")table.insert(b5,"Effects_E_SickBuilding")table.insert(b5,"Effects_E_Splash")table.insert(b5,"Effects_E_Torch")table.insert(b5,"Effects_Fire01")table.insert(b5,"Effects_FX_Lantern")table.insert(b5,"Effects_FX_SmokeBIG")table.insert(b5,"Effects_XF_BuildingSmoke")table.insert(b5,"Effects_XF_BuildingSmokeLarge")table.insert(b5,"Effects_XF_BuildingSmokeMedium")table.insert(b5,"Effects_XF_HouseFire")table.insert(b5,"Effects_XF_HouseFireLo")table.insert(b5,"Effects_XF_HouseFireMedium")table.insert(b5,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(b5,"Effects_E_KhanaTemple_Fire")table.insert(b5,"Effects_E_Knight_Saraya_Aura")end;table.sort(b5)return b5 end end;function B_Reprisal_SetModel:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;if not Models[self.Model]then error(b1.Identifier..": "..self.Name..": model '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetModel)function Reward_SetPosition(...)return B_Reward_SetPosition:new(...)end;B_Reward_SetPosition=CopyTable(B_Reprisal_SetPosition)B_Reward_SetPosition.Name="Reward_SetPosition"B_Reward_SetPosition.Description.en="Reward: Places an entity relative to the position of another. The entity can look the target."B_Reward_SetPosition.Description.de="Lohn: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden."B_Reward_SetPosition.Description.fr="Récompense: Définit une Entity vis-à-vis de la position d'une autre. L'entité peut être orientée vers la cible."B_Reward_SetPosition.GetReprisalTable=nil;B_Reward_SetPosition.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetPosition)function Reward_ChangePlayer(...)return B_Reward_ChangePlayer:new(...)end;B_Reward_ChangePlayer=CopyTable(B_Reprisal_ChangePlayer)B_Reward_ChangePlayer.Name="Reward_ChangePlayer"B_Reward_ChangePlayer.Description.en="Reward: Changes the owner of the entity or a battalion."B_Reward_ChangePlayer.Description.de="Lohn: Ändert den Besitzer einer Entity oder eines Battalions."B_Reward_ChangePlayer.Description.fr="Récompense: Change le propriétaire d'une entité ou d'un bataillon."B_Reward_ChangePlayer.GetReprisalTable=nil;B_Reward_ChangePlayer.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ChangePlayer)function Reward_MoveToPosition(...)return B_Reward_MoveToPosition:new(...)end;B_Reward_MoveToPosition={Name="Reward_MoveToPosition",Description={en="Reward: Moves an entity relative to another entity. If angle is zero the entities will be standing directly face to face.",de="Lohn: Bewegt eine Entity relativ zur Position einer anderen. Wenn Winkel 0 ist, stehen sich die Entities direkt gegenüber.",fr="Récompense: Déplace une entité par rapport à la position d'une autre. Si l'angle est égal à 0, les entités sont directement opposées."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Number,en="Angle",de="Winkel",fr="Angle"}}}function B_Reward_MoveToPosition:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveToPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.Distance=b3*1 elseif b2==3 then self.Angle=b3*1 end end;function B_Reward_MoveToPosition:CustomFunction(b1)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;self.Angle=self.Angle or 0;local bZ=GetID(self.Entity)local nk=GetID(self.Target)local aJ=Logic.GetEntityOrientation(nk)local I,J,K=Logic.EntityGetPos(nk)if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)aJ=aJ-90 end;I=I+self.Distance*math.cos(math.rad(aJ+self.Angle))J=J+self.Distance*math.sin(math.rad(aJ+self.Angle))Logic.MoveSettler(bZ,I,J)self.EntityMovingJob=RequestJob(function(nr,ns)if Logic.IsEntityMoving(nr)==false then LookAt(nr,ns)return true end end,bZ,nk)end;function B_Reward_MoveToPosition:Reset(b1)if self.EntityMovingJob then EndJob(self.EntityMovingJob)end end;function B_Reward_MoveToPosition:Debug(b1)if tonumber(self.Distance)==nil or self.Distance<50 then error(b1.Identifier..": "..self.Name..": Distance is nil or to short!")return true elseif not IsExisting(self.Entity)or not IsExisting(self.Target)then error(b1.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveToPosition)function Reward_VictoryWithParty()return B_Reward_VictoryWithParty:new()end;B_Reward_VictoryWithParty={Name="Reward_VictoryWithParty",Description={en="Reward: (Singleplayer) The player wins the game with an animated festival on the market. Continue playing deleates the festival.",de="Lohn: (Einzelspieler) Der Spieler gewinnt das Spiel mit einer animierten Siegesfeier. Bei weiterspielen wird das Fest gelöscht.",fr="Récompense: (Joueur unique) Le joueur gagne la partie avec une fête de la victoire animée. Si le joueur continue à jouer, la fête est effacée."},Parameter={}}function B_Reward_VictoryWithParty:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_VictoryWithParty:AddParameter(b2,b3)end;function B_Reward_VictoryWithParty:CustomFunction(b1)if not Lib.QuestBehavior then return end;if Framework.IsNetworkGame()then error(b1.Identifier..": "..self.Name..": Can not be used in multiplayer!")return end;Victory(g_VictoryAndDefeatType.VictoryMissionComplete)local n=b1.ReceivingPlayer;local nt=Logic.GetMarketplace(n)if IsExisting(nt)then local aH=GetPosition(nt)Logic.CreateEffect(EGL_Effects.FXFireworks01,aH.X,aH.Y,0)Logic.CreateEffect(EGL_Effects.FXFireworks02,aH.X,aH.Y,0)local nu=self:GenerateParty(n)Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]=nu;Logic.ExecuteInLuaLocalState(string.format([[
                local MarketID = %d
                if IsExisting(MarketID) then
                    CameraAnimation.AllowAbort = false
                    CameraAnimation.QueueAnimation(CameraAnimation.SetCameraToEntity, MarketID)
                    CameraAnimation.QueueAnimation(CameraAnimation.StartCameraRotation, 5)
                    CameraAnimation.QueueAnimation(CameraAnimation.Stay ,9999)
                end

                GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty = GUI_Window.ContinuePlayingClicked
                GUI_Window.ContinuePlayingClicked = function()
                    GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty()
                    
                    local PlayerID = GUI.GetPlayerID()
                    GUI.SendScriptCommand("B_Reward_VictoryWithParty:ClearParty(" ..PlayerID.. ")")

                    CameraAnimation.AllowAbort = true
                    CameraAnimation.Abort()
                end
            ]],nt))end end;function B_Reward_VictoryWithParty:ClearParty(q)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]then for g,h in pairs(Lib.QuestBehavior.Global.VictoryWithPartyEntities[q])do DestroyEntity(h)end;Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]=nil end end;function B_Reward_VictoryWithParty:GenerateParty(q)local nv={}local nw=Logic.GetMarketplace(q)if nw~=nil and nw~=0 then local nx,ny=Logic.GetEntityPosition(nw)local an=Logic.CreateEntity(Entities.D_X_Garland,nx,ny,0,q)table.insert(nv,an)for aV=1,10 do for g=1,10 do local nz=nx-700+aV*150;local nA=ny-700+g*150;local nB=math.random(1,100)if nB>70 then local nC=GetRandomSettlerType()local W=math.random(1,359)local nD=Logic.CreateEntityOnUnblockedLand(nC,nz,nA,W,q)Logic.SetTaskList(nD,TaskLists.TL_WORKER_FESTIVAL_APPLAUD_SPEECH)table.insert(nv,nD)end end end end;return nv end;function B_Reward_VictoryWithParty:Debug(b1)if Lib.QuestBehavior then if Lib.QuestBehavior.Global.VictoryWithPartyEntities[b1.ReceivingPlayer]then error(b1.Identifier..": "..self.Name..": Victory festival already started for player "..b1.ReceivingPlayer.."!")return true end end;return false end;RegisterBehavior(B_Reward_VictoryWithParty)function Reward_SetVisible(...)return B_Reward_SetVisible:new(...)end;B_Reward_SetVisible=CopyTable(B_Reprisal_SetVisible)B_Reward_SetVisible.Name="Reward_SetVisible"B_Reward_SetVisible.Description.en="Reward: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVisible.Description.de="Lohn: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst."B_Reward_SetVisible.Description.fr="Récompense: Définit la visibilité d'une Entity. S'il s'agit d'un spawn, les entités spawnées sont également influencées."B_Reward_SetVisible.GetReprisalTable=nil;B_Reward_SetVisible.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVisible)function Reward_SetVulnerability(...)return B_Reward_SetVulnerability:new(...)end;B_Reward_SetVulnerability=CopyTable(B_Reprisal_SetVulnerability)B_Reward_SetVulnerability.Name="Reward_SetVulnerability"B_Reward_SetVulnerability.Description.en="Reward: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVulnerability.Description.de="Lohn: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen."B_Reward_SetVulnerability.Description.fr="Récompense: Rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les entités spawnées sont affectées."B_Reward_SetVulnerability.GetReprisalTable=nil;B_Reward_SetVulnerability.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVulnerability)function Reward_SetModel(...)return B_Reward_SetModel:new(...)end;B_Reward_SetModel=CopyTable(B_Reprisal_SetModel)B_Reward_SetModel.Name="Reward_SetModel"B_Reward_SetModel.Description.en="Reward: Changes the model of the entity. Be careful, some models crash the game."B_Reward_SetModel.Description.de="Lohn: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz."B_Reward_SetModel.Description.fr="Récompense: Modifie le modèle d'une entité. Attention : certains modèles entraînent un plantage."B_Reward_SetModel.GetReprisalTable=nil;B_Reward_SetModel.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetModel)function Reward_AI_SetEntityControlled(...)return B_Reward_AI_SetEntityControlled:new(...)end;B_Reward_AI_SetEntityControlled={Name="Reward_AI_SetEntityControlled",Description={en="Reward: Bind or Unbind an entity or a battalion to/from an AI player. The AI player must be activated!",de="Lohn: Die KI kontrolliert die Entity oder der KI die Kontrolle entziehen. Die KI muss aktiv sein!",fr="Récompense: L'IA contrôle l'entité ou retirer le contrôle à l'IA. L'IA doit être active !"},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="AI control entity",de="KI kontrolliert Entity",fr="L'IA contrôle l'entité"}}}function B_Reward_AI_SetEntityControlled:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEntityControlled:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Hidden=ToBoolean(b3)end end;function B_Reward_AI_SetEntityControlled:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local bM=Logic.EntityGetPlayer(bJ)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)if string.find(nm,"S_")or string.find(nm,"B_NPC_Bandits")or string.find(nm,"B_NPC_Barracks")then local nn={Logic.GetSpawnedEntities(bJ)}for f=1,#nn do if Logic.IsLeader(nn[f])==1 then AICore.HideEntityFromAI(bM,nn[f],not self.Hidden)end end else AICore.HideEntityFromAI(bM,bJ,not self.Hidden)end end;function B_Reward_AI_SetEntityControlled:GetCustomData(b2)if b2==1 then return{"false","true"}end end;function B_Reward_AI_SetEntityControlled:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEntityControlled)function Trigger_AmmunitionDepleted(...)return B_Trigger_AmmunitionDepleted:new(...)end;B_Trigger_AmmunitionDepleted={Name="Trigger_AmmunitionDepleted",Description={en="Trigger: if the ammunition of the entity is depleted.",de="Auslöser: wenn die Munition der Entity aufgebraucht ist.",fr="Déclencheur: lorsque les munitions de l'entité sont épuisées."},Parameter={{ParameterType.Scriptname,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Trigger_AmmunitionDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_AmmunitionDepleted:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 end end;function B_Trigger_AmmunitionDepleted:CustomFunction()if not IsExisting(self.Scriptname)then return false end;local B=GetID(self.Scriptname)if Logic.GetAmmunitionAmount(B)>0 then return false end;return true end;function B_Trigger_AmmunitionDepleted:Debug(b1)if not IsExisting(self.Scriptname)then error(b1.Identifier..": "..self.Name..": '"..self.Scriptname.."' is destroyed!")return true end;return false end;RegisterBehavior(B_Trigger_AmmunitionDepleted)Lib.Register("module/quest/QuestBehavior_API")Lib.QuestBehavior=Lib.QuestBehavior or{}Lib.QuestBehavior.Name="QuestBehavior"Lib.QuestBehavior.Global={VictoryWithPartyEntities={},SoldierKillsCounter={}}Lib.QuestBehavior.Local={}Lib.Require("comfort/GetPlayerName")Lib.Require("comfort/global/GetRandomSettlerType")Lib.Require("comfort/global/LookAt")Lib.Require("comfort/ToBoolean")Lib.Require("core/core")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestBehavior_API")Lib.Require("module/quest/QuestBehavior_Behavior")Lib.Register("module/quest/QuestBehavior")function Lib.QuestBehavior.Global:Initialize()if not self.IsInstalled then for n=0,8 do self.SoldierKillsCounter[n]={}end;self:OverrideIsObjectiveCompleted()self:OverrideOnQuestTriggered()Lib.QuestBehavior.Local=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Global:OnSaveGameLoaded()end;function Lib.QuestBehavior.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.ThiefInfiltratedBuilding then self:OnThiefInfiltratedBuilding(arg[1],arg[2],arg[3],arg[4])elseif aF==Report.ThiefDeliverEarnings then self:OnThiefDeliverEarnings(arg[1],arg[2],arg[3],arg[4],arg[5])elseif aF==Report.EntityKilled then self:OnEntityKilled(arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestBehavior.Global:OverrideOnQuestTriggered()QuestTemplate.Trigger_Orig_QSB_NewBehaviors=QuestTemplate.Trigger;QuestTemplate.Trigger=function(self)for cC=1,#self.Objectives,1 do if self.Objectives[cC]then if self.Objectives[cC].Type==Objective.DestroyEntities and self.Objectives[cC].Data[1]==3 then if self.Objectives[cC].Data[5]~=true then local nE=self.Objectives[cC].Data[2][0]local nF=self.Objectives[cC].Data[3]for f=1,nE,1 do local an=GetID(self.Objectives[cC].Data[2][f])local nG={Logic.GetSpawnedEntities(an)}for aV=1,#nG,1 do DestroyEntity(nG[aV])end end;while nF>0 do for f=1,nE,1 do if nF<1 then break end;local an=GetID(self.Objectives[cC].Data[2][f])Logic.RespawnResourceEntity_Spawn(an)nF=nF-1 end end;local nH=Logic.GetSpawnedEntities(self.Objectives[cC].Data[2][1])if not self.Objectives[cC].Data[6]then self.Objectives[cC].Data[6]={7,12}if Logic.IsEntityInCategory(nH,EntityCategories.AttackableAnimal)==1 then self.Objectives[cC].Data[6]={13,8}end end;self.Objectives[cC].Data[5]=true end end end end;self:Trigger_Orig_QSB_NewBehaviors()end end;function Lib.QuestBehavior.Global:OverrideIsObjectiveCompleted()QuestTemplate.IsObjectiveCompleted_Orig_QSB_NewBehaviors=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,df)local dg=df.Type;if df.Completed~=nil then if dg==Objective.DestroyEntities and df.Data[1]==3 then df.Data[5]=nil end;return df.Completed end;if dg==Objective.DestroyEntities then if df.Data[1]==3 then df.Completed=self:AreSpawnedQuestEntitiesDestroyed(df)else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(df)end else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(df)end end;QuestTemplate.AreSpawnedQuestEntitiesDestroyed=function(self,cS)if cS.Data[1]==3 then local nI={}for f=1,cS.Data[2][0],1 do local an=GetID(cS.Data[2][f])nI=Array_Append(nI,{Logic.GetSpawnedEntities(an)})end;if#nI==0 then return true end end end end;function Lib.QuestBehavior.Global:GetPossibleModels()local b5={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(b5,g)end end;table.insert(b5,"Effects_Dust01")table.insert(b5,"Effects_E_DestructionSmoke")table.insert(b5,"Effects_E_DustLarge")table.insert(b5,"Effects_E_DustSmall")table.insert(b5,"Effects_E_Firebreath")table.insert(b5,"Effects_E_Fireworks01")table.insert(b5,"Effects_E_Flies01")table.insert(b5,"Effects_E_Grasshopper03")table.insert(b5,"Effects_E_HealingFX")table.insert(b5,"Effects_E_Knight_Chivalry_Aura")table.insert(b5,"Effects_E_Knight_Plunder_Aura")table.insert(b5,"Effects_E_Knight_Song_Aura")table.insert(b5,"Effects_E_Knight_Trader_Aura")table.insert(b5,"Effects_E_Knight_Wisdom_Aura")table.insert(b5,"Effects_E_KnightFight")table.insert(b5,"Effects_E_NA_BlowingSand01")table.insert(b5,"Effects_E_NE_BlowingSnow01")table.insert(b5,"Effects_E_Oillamp")table.insert(b5,"Effects_E_SickBuilding")table.insert(b5,"Effects_E_Splash")table.insert(b5,"Effects_E_Torch")table.insert(b5,"Effects_Fire01")table.insert(b5,"Effects_FX_Lantern")table.insert(b5,"Effects_FX_SmokeBIG")table.insert(b5,"Effects_XF_BuildingSmoke")table.insert(b5,"Effects_XF_BuildingSmokeLarge")table.insert(b5,"Effects_XF_BuildingSmokeMedium")table.insert(b5,"Effects_XF_HouseFire")table.insert(b5,"Effects_XF_HouseFireLo")table.insert(b5,"Effects_XF_HouseFireMedium")table.insert(b5,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(b5,"Effects_E_KhanaTemple_Fire")table.insert(b5,"Effects_E_Knight_Saraya_Aura")end;table.sort(b5)return b5 end;function Lib.QuestBehavior.Global:OnThiefInfiltratedBuilding(la,q,hu,ld)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==q then for aV=1,Quests[f].Objectives[0]do if Quests[f].Objectives[aV].Type==Objective.Custom2 then if Quests[f].Objectives[aV].Data[1].Name=="Goal_SpyOnBuilding"then if GetID(Quests[f].Objectives[aV].Data[1].Building)==hu then Quests[f].Objectives[aV].Data[1].Infiltrated=true;if Quests[f].Objectives[aV].Data[1].Delete then DestroyEntity(la)end end elseif Quests[f].Objectives[aV].Data[1].Name=="Goal_StealFromBuilding"then local bN;local ng=Logic.GetEntityType(hu)==Entities.B_Cistern;local ne=Logic.IsEntityInCategory(hu,EntityCategories.Cathedrals)==1;local nf=Logic.GetEntityType(hu)==Entities.B_StoreHouse;if nf or ne or ng then Quests[f].Objectives[aV].Data[1].SuccessfullyStohlen=true else for g=1,#Quests[f].Objectives[aV].Data[1].RobberList do local nJ=Quests[f].Objectives[aV].Data[1].RobberList[g]if nJ[1]==hu and nJ[2]==la then bN=true;break end end end;if not bN then table.insert(Quests[f].Objectives[aV].Data[1].RobberList,{hu,la})end end end end end end end;function Lib.QuestBehavior.Global:OnThiefDeliverEarnings(la,q,hu,ld,nK)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==q then for aV=1,Quests[f].Objectives[0]do if Quests[f].Objectives[aV].Type==Objective.Custom2 then if Quests[f].Objectives[aV].Data[1].Name=="Goal_StealFromBuilding"then for g=1,#Quests[f].Objectives[aV].Data[1].RobberList do local nJ=Quests[f].Objectives[aV].Data[1].RobberList[g]if nJ[1]==GetID(Quests[f].Objectives[aV].Data[1].Building)and nJ[2]==la then Quests[f].Objectives[aV].Data[1].SuccessfullyStohlen=true;break end end elseif Quests[f].Objectives[aV].Data[1].Name=="Goal_StealGold"then local nL=Quests[f].Objectives[aV].Data[1]if nL.Target==-1 or nL.Target==ld then Quests[f].Objectives[aV].Data[1].StohlenGold=Quests[f].Objectives[aV].Data[1].StohlenGold+nK;if nL.Printout then AddNote(string.format("%d/%d %s",nL.StohlenGold,nL.Amount,Localize({de="Talern gestohlen",en="gold stolen"})))end end end end end end end end;function Lib.QuestBehavior.Global:OnEntityKilled(nM,nN,nO,nP)if nN~=0 and nP~=0 then self.SoldierKillsCounter[nP][nN]=self.SoldierKillsCounter[nP][nN]or 0;if Logic.IsEntityInCategory(nM,EntityCategories.Soldier)==1 then self.SoldierKillsCounter[nP][nN]=self.SoldierKillsCounter[nP][nN]+1 end end end;function Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(lw,ly)return self.SoldierKillsCounter[lw][ly]or 0 end;function Lib.QuestBehavior.Local:Initialize()if not self.IsInstalled then Lib.QuestBehavior.Global=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Local:OnSaveGameLoaded()end;function Lib.QuestBehavior.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.QuestBehavior.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/quest/QuestJornal_API")function ShowJournalForQuest(b1,dz)assert(not IsLocalScript(),"Can not be used in local script!")local bF=Quests[GetQuestID(b1)]if bF then bF.QuestNotes=dz==true end end;function AllowNotesForQuest(b1,dz)assert(not IsLocalScript(),"Can not be used in local script!")local bF=Quests[GetQuestID(b1)]if bF then Lib.QuestJornal.Global.CustomInputAllowed[b1]=dz==true end end;function CreateJournalEntry(d9)assert(not IsLocalScript(),"Can not be used in local script!")d9=d9:gsub("{@[A-Za-z0-9:,]+}","")d9=d9:gsub("{[A-Za-z0-9_]+}","")return Lib.QuestJornal.Global:CreateJournalEntry(d9,0,false)end;function AlterJournalEntry(aF,d9)assert(not IsLocalScript(),"Can not be used in local script!")d9=d9:gsub("{@[A-Za-z0-9:,]+}","")d9=d9:gsub("{[A-Za-z0-9_]+}","")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:UpdateJournalEntry(aF,d9,iJ.Rank,iJ.AlwaysVisible,iJ.Deleted)end end;function HighlightJournalEntry(aF,nQ)assert(not IsLocalScript(),"Can not be used in local script!")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:UpdateJournalEntry(aF,iJ[1],nQ==true and 1 or 0,iJ.AlwaysVisible,iJ.Deleted)end end;function DeleteJournalEntry(aF)assert(not IsLocalScript(),"Can not be used in local script!")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:UpdateJournalEntry(aF,iJ[1],iJ.Rank,iJ.AlwaysVisible,true)end end;function RestoreJournalEntry(aF)assert(not IsLocalScript(),"Can not be used in local script!")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:UpdateJournalEntry(aF,iJ[1],iJ.Rank,iJ.AlwaysVisible,false)end end;function AddJournalEntryToQuest(aF,b1)assert(not IsLocalScript(),"Can not be used in local script!")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aF,b1,true)end end;function RemoveJournalEntryFromQuest(aF,b1)assert(not IsLocalScript(),"Can not be used in local script!")local iJ=Lib.QuestJornal.Global:GetJournalEntry(aF)if iJ then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aF,b1,false)end end;Lib.QuestJornal=Lib.QuestJornal or{}Lib.QuestJornal.Name="QuestJornal"Lib.QuestJornal.Global={Journal={ID=0},CustomInputAllowed={},InputShown={},TextColor="{tooltip}"}Lib.QuestJornal.Local={NextButton="/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/TutorialNextButton",NextButtonIcon={16,10}}Lib.QuestJornal.Text={Next={de="Tagebuch anzeigen",en="Show Journal",fr="Afficher le journal"},Title={de="Tagebuch",en="Journal",fr="Journal"},Note={de="Notiz",en="Note",fr="Note"}}Lib.Require("core/core")Lib.Require("module/information/Requester")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestJornal_API")Lib.Register("module/quest/QuestJornal")function Lib.QuestJornal.Global:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")Lib.QuestJornal.Local=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Global:OnSaveGameLoaded()end;function Lib.QuestJornal.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.TutorialNextClicked then self:DisplayJournal(arg[1],arg[2])elseif aF==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2])elseif aF==Report.QuestJournalPlayerNote then self.InputShown[arg[1]]=arg[2]SendReportToLocal(Report.QuestJournalPlayerNote,arg[1],arg[2],arg[3]==true)elseif aF==Report.QuestJournalDisplayed then SendReportToLocal(Report.QuestJournalDisplayed,arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestJornal.Global:DisplayJournal(dc,q)local nR=self.CustomInputAllowed[dc]==true;local nS=self:FormatJournalEntry(dc,q)SendReport(Report.QuestJournalDisplayed,q,dc,nS,nR)end;function Lib.QuestJornal.Global:CreateJournalEntry(d9,nT,nU)self.Journal.ID=self.Journal.ID+1;table.insert(self.Journal,{ID=self.Journal.ID,AlwaysVisible=nU==true,Quests={},Rank=nT,d9})return self.Journal.ID end;function Lib.QuestJornal.Global:GetJournalEntry(aF)for f=1,#self.Journal do if self.Journal[f].ID==aF then return self.Journal[f]end end end;function Lib.QuestJornal.Global:UpdateJournalEntry(aF,d9,nT,nU,nV)for f=1,#self.Journal do if self.Journal[f].ID==aF then self.Journal[f].AlwaysVisible=nU==true;self.Journal[f].Deleted=nV==true;self.Journal[f].Rank=nT;self.Journal[f][1]=self.Journal[f][1]or d9 end end end;function Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aF,b1,dz)for f=1,#self.Journal do if self.Journal[f].ID==aF then self.Journal[f].Quests[b1]=dz==true end end end;function Lib.QuestJornal.Global:FormatJournalEntry(dc,q)local bF=Quests[GetQuestID(dc)]if bF and bF.QuestNotes and bF.ReceivingPlayer==q then local nW=self:GetJournalEntriesSorted()local nX=false;local nY=false;local mU=""local fp=""for f=1,#nW,1 do if nW[f].AlwaysVisible or nW[f].Quests[dc]then if not nW[f].Deleted then local ba=ConvertPlaceholders(Localize(nW[f][1]))if nW[f].Rank==1 then ba="{scarlet}"..ba..self.TextColor;nX=true end;if nW[f].Rank==0 then if nX then nX=false;ba="{cr}----------{cr}{cr}"..ba end;nY=true end;if nW[f].Rank==-1 then if nY then nY=false;fp="{violet}"ba="{cr}----------{cr}{cr}"..ba end;ba=fp..ba..self.TextColor end;mU=mU..(mU~=""and"{cr}"or"")..ba end end end;return mU end end;function Lib.QuestJornal.Global:GetJournalEntriesSorted()local nW={}for f=1,#self.Journal,1 do table.insert(nW,self.Journal[f])end;table.sort(nW,function(af,cC)return af.Rank>cC.Rank end)return nW end;function Lib.QuestJornal.Global:ProcessChatInput(d9,q)if self.InputShown[q]then if d9 and d9~=""then local nZ=self.InputShown[q]local nR=self.CustomInputAllowed[nZ]==true;local an=self:CreateJournalEntry(d9,-1,false)self:AssociateJournalEntryWithQuest(an,nZ,true)local nS=self:FormatJournalEntry(nZ,q)SendReport(Report.QuestJournalDisplayed,q,nZ,nS,nR)end;self.InputShown[q]=nil end end;function Lib.QuestJornal.Local:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")self:OverrideUpdateVoiceMessage()self:OverrideTutorialNext()self:OverrideStringKeys()self:OverrideTimerButtons()Lib.QuestJornal.Global=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Local:OnSaveGameLoaded()end;function Lib.QuestJornal.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.QuestJournalPlayerNote then if arg[1]==GUI.GetPlayerID()and arg[3]then ShowTextInput(arg[1],false)end elseif aF==Report.QuestJournalDisplayed then if arg[1]==GUI.GetPlayerID()then self:DisplayQuestJournal(arg[2],arg[1],arg[3],arg[4])end end end;function Lib.QuestJornal.Local:DisplayQuestJournal(dc,q,n_,F)if n_ and GUI.GetPlayerID()==q then local k1=Localize(Lib.QuestJornal.Text.Title)local b5={PlayerID=q,Caption=k1,Content=ConvertPlaceholders(n_),QuestName=dc}if F then b5.Button={Text=Localize{de="Notiz",en="Note",fr="Note"},Action=function(gy)SendReportToGlobal(Report.QuestJournalPlayerNote,gy.PlayerID,gy.QuestName,F)end}end;Lib.Requester.Local:ShowTextWindow(b5)end end;function Lib.QuestJornal.Local:OverrideUpdateVoiceMessage()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal=GUI_Interaction.UpdateVoiceMessage;GUI_Interaction.UpdateVoiceMessage=function()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal()if not QuestLog.IsQuestLogShown()then if Lib.QuestJornal.Local:IsShowingJournalButton(g_Interaction.CurrentMessageQuestIndex)then XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,1)SetIcon(Lib.QuestJornal.Local.NextButton,Lib.QuestJornal.Local.NextButtonIcon)else XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,0)end end end end;function Lib.QuestJornal.Local:IsShowingJournalButton(aF)if not g_Interaction.CurrentMessageQuestIndex then return false end;local bF=Quests[aF]if type(bF)=="table"and bF.QuestNotes then return true end;return false end;function Lib.QuestJornal.Local:OverrideTimerButtons()GUI_Interaction.TimerButtonClicked_Orig_QuestJornal=GUI_Interaction.TimerButtonClicked;GUI_Interaction.TimerButtonClicked=function()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 and XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions/ToggleWhisperTarget")==1 then return end;GUI_Interaction.TimerButtonClicked_Orig_QuestJornal()end end;function Lib.QuestJornal.Local:OverrideTutorialNext()GUI_Interaction.TutorialNext_Orig_QuestJornal=GUI_Interaction.TutorialNext;GUI_Interaction.TutorialNext=function()if g_Interaction.CurrentMessageQuestIndex then local bE=g_Interaction.CurrentMessageQuestIndex;local bF=Quests[bE]SendReportToGlobal(Report.TutorialNextClicked,bF.Identifier,GUI.GetPlayerID())SendReport(Report.TutorialNextClicked,bF.Identifier,GUI.GetPlayerID())end end end;function Lib.QuestJornal.Local:OverrideStringKeys()AddStringText("UI_ObjectNames/TutorialNextButton",Lib.QuestJornal.Text.Next)end;RegisterModule(Lib.QuestJornal.Name)Lib.Register("module/quest/Warehouse_Behavior")B_Reward_TradePost.DEBUG_Orig_Warehouse=B_Reward_TradePost.DEBUG;B_Reward_TradePost.DEBUG=function(self,b1)local dW=Lib.Warehouse.Global:GetIndex(self.ScriptName)if dW~=0 then debug(false,b1.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return false end;return self:DEBUG_Orig_Warehouse(b1)end;B_Reward_TradePost.CustomFunction_Orig_Warehouse=B_Reward_TradePost.CustomFunction;B_Reward_TradePost.CustomFunction=function(self,b1)local dW=Lib.Warehouse.Global:GetIndex(self.ScriptName)if dW~=0 then debug(false,b1.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return end;self:CustomFunction_Orig_Warehouse(b1)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Warehouse_API")function CreateWarehouse(gy)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:CreateWarehouse(gy)Lib.Warehouse.ReleaseContext()end;API.CreateWarehouse=CreateWarehouse;function CreateWarehouseOffer(r,aK,o0,o1,o2,o3,o4)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()local o5=this:CreateOffer(r,aK,o0,o1,o2,o3,o4)Lib.Warehouse.ReleaseContext()return o5 end;API.CreateWarehouseOffer=CreateWarehouseOffer;function RemoveWarehouseOffer(r,aF)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:RemoveOffer(r,aF)Lib.Warehouse.ReleaseContext()end;API.RemoveWarehouseOffer=RemoveWarehouseOffer;function DeactivateWarehouseOffer(r,aF,o6)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:ActivateOffer(r,aF,not o6)Lib.Warehouse.ReleaseContext()end;API.DeactivateWarehouseOffer=DeactivateWarehouseOffer;function GetWarehouseInflation(q,o0)Lib.Warehouse.AquireContext()local o7=this:GetInflation(q,o0)Lib.Warehouse.ReleaseContext()return o7 end;API.GetWarehouseInflation=GetWarehouseInflation;function SetWarehouseInflation(q,o0,o8)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:SetInflation(q,o0,o8)Lib.Warehouse.ReleaseContext()end;API.SetWarehouseInflation=SetWarehouseInflation;function GetWarehouseOfferByID(r,aF)Lib.Warehouse.AquireContext()local o5=this:GetOfferByID(r,aF)Lib.Warehouse.ReleaseContext()return o5 end;API.GetWarehouseOfferByID=GetWarehouseOfferByID;function GetActivWarehouseOffers(r,o9)Lib.Warehouse.AquireContext()local oa=this:GetActivOffers(r,o9)Lib.Warehouse.ReleaseContext()return oa end;API.GetActivWarehouseOffers=GetActivWarehouseOffers;Lib.Warehouse=Lib.Warehouse or{}Lib.Warehouse.Name="Warehouse"Lib.Warehouse.CinematicEvents={}Lib.Warehouse.Global={OfferSequence=0,Warehouses={Job=0},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Local={Warehouses={},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Text={OfferTitle={{de="Keine Angebote",en="No Offers"},{de="%d %s kaufen%s",en="Purchase %d %s%s"},{de="%s anheuern",en="Hire %s"},{de="%s anheuern%s",en="Hire %s%s"},{de="%s kaufen%s",en="Purchase %s%s"}}}Lib.Require("comfort/GetSiegeengineTypeByCartType")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/KeyOf")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("comfort/global/SendCart")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/io/IO")Lib.Require("module/ui/UIBuilding")Lib.Require("module/trade/Warehouse_API")Lib.Require("module/trade/Warehouse_Behavior")Lib.Register("module/trade/Warehouse")function Lib.Warehouse.Global:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")self:OverwriteGameCallbacks()for f=1,8 do self.Inflation.Players[f]={}end;self.Warehouses.Job=RequestJob(function()Lib.Warehouse.Global:ControlWarehouse()end)Lib.Warehouse.Local=nil end;self.IsInstalled=true end;function Lib.Warehouse.Global:OnSaveGameLoaded()end;function Lib.Warehouse.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.WarehouseOfferClicked then self:PerformTrade(unpack(arg))SendReportToLocal(aF,unpack(arg))end end;function Lib.Warehouse.Global:CreateWarehouse(gy)local ob={ScriptName=gy.ScriptName,BuildingName=gy.ScriptName.."_Post",Costs=gy.Costs,Offers={}}table.insert(self.Warehouses,ob)local an=GetID(gy.ScriptName)local I,J,K=Logic.EntityGetPos(an)local W=Logic.GetEntityOrientation(an)local n=Logic.EntityGetPlayer(an)local l=Logic.GetEntityType(an)DestroyEntity(ob.ScriptName)local hE=Logic.CreateEntity(Entities.I_X_TradePostConstructionSite,I,J,W,n)Logic.SetEntityName(hE,ob.ScriptName)if l==Entities.B_TradePost then hE=ReplaceEntity(hE,Entities.XD_ScriptEntity)local jq=Logic.CreateEntity(Entities.B_TradePost,I,J,W,n)Logic.SetEntityName(jq,ob.BuildingName)end;if gy.Costs then Logic.InteractiveObjectClearCosts(GetID(ob.ScriptName))if gy.Costs[1]then Logic.InteractiveObjectAddCosts(GetID(ob.ScriptName),gy.Costs[1],gy.Costs[2])end;if gy.Costs[3]then Logic.InteractiveObjectAddCosts(GetID(ob.ScriptName),gy.Costs[3],gy.Costs[4])end end;for f=1,#gy.Offers do if gy.Offers[f]then self:CreateOffer(ob.ScriptName,gy.Offers[f].Amount,gy.Offers[f].GoodType,gy.Offers[f].GoodAmount,gy.Offers[f].PaymentType,gy.Offers[f].BasePrice,gy.Offers[f].Refresh)end end;ExecuteLocal([[Lib.Warehouse.Local:InitTradeButtons("%s")]],ob.BuildingName)end;function Lib.Warehouse.Global:GetIndex(r)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==r then return f end end;return 0 end;function Lib.Warehouse.Global:CreateOffer(r,aK,ak,lb,o2,o3,o4)local dW=self:GetIndex(r)if dW~=0 then local bU=aK or 1;if KeyOf(ak,Goods)==nil and KeyOf(ak,Entities)~=nil and Logic.IsEntityTypeInCategory(ak,EntityCategories.Military)==0 then bU=1 end;self.OfferSequence=self.OfferSequence+1;local an=self.OfferSequence;table.insert(self.Warehouses[dW].Offers,{ID=an,BuyLock=false,Active=true,Current=bU,Amount=bU,Timer=o4 or 3*60,Refresh=o4 or 3*60,GoodType=ak,GoodAmount=lb or 9,PaymentType=o2 or Goods.G_Gold,BasePrice=o3 or 3})return an end;return 0 end;function Lib.Warehouse.Global:RemoveOffer(r,aF)local dW=self:GetIndex(r)if dW~=0 then for f=#self.Warehouses[dW].Offers,1,-1 do if self.Warehouses[dW].Offers[f].ID==aF then table.remove(self.Warehouses[dW].Offers,f)break end end end end;function Lib.Warehouse.Global:ActivateOffer(r,aF,oc)local dW=self:GetIndex(r)if dW~=0 then for f=#self.Warehouses[dW].Offers,1,-1 do if self.Warehouses[dW].Offers[f].ID==aF then self.Warehouses[dW].Offers[f].Active=oc==true;break end end end end;function Lib.Warehouse.Global:GetOfferByID(r,aF)local o5,od;local dW=self:GetIndex(r)if dW~=0 then for f=#self.Warehouses[dW].Offers,1,-1 do if self.Warehouses[dW].Offers[f].ID==aF then o5=self.Warehouses[dW].Offers[f]od=f end end end;return o5,od end;function Lib.Warehouse.Global:GetActivOffers(r,o9)local bV={}local dW=self:GetIndex(r)if dW~=0 then for f=1,#self.Warehouses[dW].Offers do if(not o9 or#bV<6)and self.Warehouses[dW].Offers[f].Active then table.insert(bV,self.Warehouses[dW].Offers[f].ID)end end end;return bV end;function Lib.Warehouse.Global:ChangeOfferAmount(r,aF,aK)local dW=self:GetIndex(r)if dW~=0 then for f=#self.Warehouses[dW].Offers,1,-1 do if self.Warehouses[dW].Offers[f].ID==aF then local oe=self.Warehouses[dW].Offers[aF].Amount;self.Warehouses[dW].Offers[aF].Current=math.min(aK,oe)break end end end end;function Lib.Warehouse.Global:GetInflation(q,ak)return self.Inflation.Players[q][ak]or 1.0 end;function Lib.Warehouse.Global:SetInflation(q,ak,o8)self.Inflation.Players[q][ak]=o8 or 1.0;ExecuteLocal([[Lib.Warehouse.Local.Inflation.Players[%d][%d] = %f]],q,ak,o8 or 1.0)end;function Lib.Warehouse.Global:CalculateInflation(q,ak)local mr=(self.Inflation.Players[q][ak]or 1.0)+self.Inflation.Inc;mr=math.max(self.Inflation.Min,mr)mr=math.min(mr,self.Inflation.Max)return mr end;function Lib.Warehouse.Global:PerformTrade(q,d6,o8,of,og,lb,oh,o3)if KeyOf(og,Goods)~=nil then SendCart(d6 .."_Post",q,og,lb)elseif KeyOf(og,Entities)~=nil then if Logic.IsEntityTypeInCategory(og,EntityCategories.Military)==1 then local I,J=Logic.GetBuildingApproachPosition(GetID(d6 .."_Post"))local W=Logic.GetEntityOrientation(GetID(d6 .."_Post"))-90;local an=Logic.CreateBattalionOnUnblockedLand(og,I,J,W,q)Logic.MoveSettler(an,I,J,-1)else local I,J=Logic.GetBuildingApproachPosition(GetID(d6 .."_Post"))Logic.HireEntertainer(og,q,I,J)end end;local oi=math.floor(o3*o8+0.5)AddGood(oh,-1*oi,q)ExecuteLocal([[GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 1, 1}, g_TexturePositions.Goods[%d])]],-1*oi,oh)self:UpdateOnPurchase(q,d6,of)SendReport(Report.WarehouseOfferBought,q,d6,og,lb,oh,oi)SendReportToLocal(Report.WarehouseOfferBought,q,d6,og,lb,oh,oi)end;function Lib.Warehouse.Global:UpdateOnPurchase(q,d6,of)local dW=self:GetIndex(d6)if dW~=0 then local o5=self.Warehouses[dW].Offers[of]self.Warehouses[dW].Offers[of].Current=o5.Current-1;local o7=self:CalculateInflation(q,o5.GoodType)self:SetInflation(q,o5.GoodType,o7)end end;function Lib.Warehouse.Global:OverwriteGameCallbacks()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,ap)Lib.Warehouse.Global.Orig_GameCallback_OnBuildingConstructionComplete(q,ap)if Logic.GetEntityType(ap)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostConstructed(ap)end end;self.Orig_GameCallback_BuildingDestroyed=GameCallback_BuildingDestroyed;GameCallback_BuildingDestroyed=function(ap,q,oj)Lib.Warehouse.Global.Orig_GameCallback_BuildingDestroyed(ap,q,oj)if Logic.GetEntityType(ap)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostDestroyed(q,ap)end end end;function Lib.Warehouse.Global:OnTradepostConstructed(ap)local I,J,K=Logic.EntityGetPos(ap)local hJ,hE=Logic.GetEntitiesInArea(Entities.I_X_TradePostConstructionSite,I,J,100,1)if hE~=0 then local aO=Logic.GetEntityName(hE)local dW=self:GetIndex(aO)if dW~=0 then Logic.SetEntityName(ap,self.Warehouses[dW].BuildingName)end end end;function Lib.Warehouse.Global:OnTradepostDestroyed(q,ap)local I,J,K=Logic.EntityGetPos(ap)local W=Logic.GetEntityOrientation(ap)local aO=Logic.GetEntityName(ap)local dW=aO and self:GetIndex(aO:sub(1,aO:len()-5))or 0;if dW~=0 then local b5=self.Warehouses[dW]local an=ReplaceEntity(b5.ScriptName,Entities.I_X_TradePostConstructionSite)for f=1,8 do Logic.InteractiveObjectSetPlayerState(an,f,1)end end end;function Lib.Warehouse.Global:ControlWarehouse()for f=1,#self.Warehouses do if self.Warehouses[f]then for aV=1,#self.Warehouses[f].Offers do local o5=self.Warehouses[f].Offers[aV]if o5.Active and o5.Refresh>0 then if self.Warehouses[f].Offers[aV].Current<o5.Amount then self.Warehouses[f].Offers[aV].Timer=o5.Timer-1;if o5.Timer==0 then self.Warehouses[f].Offers[aV].Current=o5.Current+1;self.Warehouses[f].Offers[aV].Timer=o5.Refresh end end end end end end;local hn=table.tostring(self.Warehouses)ExecuteLocal([[Lib.Warehouse.Local.Warehouses = %s]],hn)end;function Lib.Warehouse.Local:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")for f=1,8 do self.Inflation.Players[f]={}end;Lib.Warehouse.Global=nil end;self.IsInstalled=true end;function Lib.Warehouse.Local:OnSaveGameLoaded()end;function Lib.Warehouse.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.WarehouseOfferClicked then if GUI.GetPlayerID()==arg[2]then local dW=self:GetIndex(arg[2])if self.Warehouses[dW]then self.Warehouses[dW].Offers[arg[4]].BuyLock=false end end end end;function Lib.Warehouse.Local:GetIndex(r)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==r then return f end end;return 0 end;function Lib.Warehouse.Local:GetPrice(q,ak,o3)return math.floor((self.Inflation.Players[q][ak]or 1.0)*o3+0.5)end;function Lib.Warehouse.Local:GetInflation(q,ak)return self.Inflation.Players[q][ak]or 1.0 end;function Lib.Warehouse.Local:GetOfferByID(r,aF)local o5,od;local dW=self:GetIndex(r)if dW~=0 then for f=#self.Warehouses[dW].Offers,1,-1 do if self.Warehouses[dW].Offers[f].ID==aF then o5=self.Warehouses[dW].Offers[f]od=f end end end;return o5,od end;function Lib.Warehouse.Local:GetActivOffers(r,o9)local bV={}local dW=self:GetIndex(r)if dW~=0 then for f=1,#self.Warehouses[dW].Offers do if(not o9 or#bV<6)and self.Warehouses[dW].Offers[f].Active then table.insert(bV,self.Warehouses[dW].Offers[f].ID)end end end;return bV end;function Lib.Warehouse.Local:InitTradeButtons(d6)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(1,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(1,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(1,fv,ap)end)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(2,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(2,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(2,fv,ap)end)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(3,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(3,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(3,fv,ap)end)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(4,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(4,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(4,fv,ap)end)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(5,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(5,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(5,fv,ap)end)AddBuildingButtonByEntity(d6,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonAction(6,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonTooltip(6,fv,ap)end,function(fv,ap)Lib.Warehouse.Local:WarehouseButtonUpdate(6,fv,ap)end)end;function Lib.Warehouse.Local:WarehouseButtonAction(jX,fv,ap)local n=GUI.GetPlayerID()local aO=Logic.GetEntityName(ap)local c4,ct=string.find(aO,"_Post")aO=string.sub(aO,1,c4-1)local dW=self:GetIndex(aO)if dW==0 then return end;local bV=self:GetActivOffers(aO)local b5,od=self:GetOfferByID(aO,bV[jX])if not b5 then return end;if b5.BuyLock then return end;local ok=self:GetPrice(n,b5.GoodType,b5.BasePrice)local o7=self:GetInflation(n,b5.GoodType)if GetPlayerGoodsInSettlement(b5.PaymentType,n)<ok then return end;self.Warehouses[dW].Offers[od].BuyLock=true;SendReportToGlobal(Report.WarehouseOfferClicked,n,aO,o7,od,b5.GoodType,b5.GoodAmount,b5.PaymentType,b5.BasePrice)end;function Lib.Warehouse.Local:WarehouseButtonTooltip(jX,fv,ap)local n=GUI.GetPlayerID()local aO=Logic.GetEntityName(ap)local c4,ct=string.find(aO,"_Post")aO=string.sub(aO,1,c4-1)if XGUIEng.IsButtonDisabled(fv)==1 then SetTooltipCosts(ConvertPlaceholders(Localize(Lib.Warehouse.Text.OfferTitle[1])),"")return end;local dW=self:GetIndex(aO)if dW==0 then return end;local bV=self:GetActivOffers(aO)local b5,od=self:GetOfferByID(aO,bV[jX])if not b5 then return end;local ok=self:GetPrice(n,b5.GoodType,b5.BasePrice)local ol=true;local om=""local on=""local k2=Logic.GetGoodTypeName(b5.GoodType)local go=Logic.GetEntityTypeName(b5.GoodType)local oo=GetSiegeengineTypeByCartType(b5.GoodType)if k2~=nil and k2~=""then om=GetStringText("UI_ObjectNames/"..k2)on=GetStringText("UI_ObjectDescription/"..k2)else om=GetStringText("UI_ObjectNames/HireEntertainer")on=GetStringText("UI_ObjectDescription/HireEntertainer")if Logic.IsEntityTypeInCategory(b5.GoodType,EntityCategories.Soldier)==1 then om=GetStringText("UI_ObjectNames/HireMercenaries")on=GetStringText("UI_ObjectDescription/HireMercenaries")elseif oo or Logic.IsEntityTypeInCategory(b5.GoodType,EntityCategories.SiegeEngine)==1 then om=GetStringText("Names/"..go)local op=Logic.GetEntityTypeName(oo)on=GetStringText("UI_ObjectDescription/Abilities_"..op)end end;local oq=""if b5.Amount>1 then oq=string.format(" (%d/%d)",b5.Current,b5.Amount)end;local os=""if KeyOf(b5.GoodType,Goods)~=nil then os=string.format(Localize(Lib.Warehouse.Text.OfferTitle[2]),b5.GoodAmount,om,oq)elseif KeyOf(b5.GoodType,Entities)~=nil then if Logic.IsEntityTypeInCategory(b5.GoodType,EntityCategories.Military)==1 then os=string.format(Localize(Lib.Warehouse.Text.OfferTitle[4]),om,oq)elseif oo or Logic.IsEntityTypeInCategory(b5.GoodType,EntityCategories.SiegeEngine)==1 then os=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),om,oq)else os=string.format(Localize(Lib.Warehouse.Text.OfferTitle[3]),om)end end;SetTooltipCosts(os,on,nil,{b5.PaymentType,ok},ol)end;function Lib.Warehouse.Local:WarehouseButtonUpdate(jX,fv,ap)local aO=Logic.GetEntityName(ap)local c4,ct=string.find(aO,"_Post")aO=string.sub(aO,1,c4-1)local dW=self:GetIndex(aO)if dW==0 then XGUIEng.ShowWidget(fv,0)return end;local bV=self:GetActivOffers(aO)local b5,od=self:GetOfferByID(aO,bV[jX])if not b5 or not b5.Active then XGUIEng.ShowWidget(fv,0)return end;if not b5.BuyLock and b5.Current>0 then XGUIEng.DisableButton(fv,0)else XGUIEng.DisableButton(fv,1)end;local kS=b5.GoodType;local jV=g_TexturePositions.Goods[kS]or g_TexturePositions.Entities[kS]ChangeIcon(fv,jV)end;RegisterModule(Lib.Warehouse.Name)Lib.Register("module/mode/SettlementSurvival_Text")Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Text={Alarms={AnimalDiedFromIllness={de="{scarlet}Eure Nutztiere sterben an Krankheiten!",en="{scarlet}Your farm animals succumb to the plague!",fr="{scarlet}Vos animaux de ferme succombent à la peste!"},BuildingBurning={de="{scarlet}Brände wüten in Eurer Stadt!",en="{scarlet}Fires are raging in your city!",fr="{scarlet}Les incendies font rage dans votre ville !"},SettlerTemperature={de="{scarlet}Eure Siedler haben kein Feuerholz und frieren!",en="{scarlet}Your settlers lack of firewood to warm themselves!",fr="{scarlet}Vos colons manquent de bois de chauffage pour se réchauffer!"},SettlerNegligence={de="{scarlet}Eure Siedler verwahrlosen und werden krank!",en="{scarlet}Your settlers are neglected and getting sick!",fr="{scarlet}Vos colons sont négligés et tombent malades!"},SettlerDiedFromHunger={de="{scarlet}Eure Siedler haben nichts zu essen und verhungern!",en="{scarlet}Your settlers are starving to death!",fr="{scarlet}Vos colons meurent de faim!"},SettlerDiedFromIllness={de="{scarlet}Eure Siedler sterben an Krankheiten!",en="{scarlet}Your settlers succumb to the plague!",fr="{scarlet}Vos colons succombent à la peste!"}},Messages={BuildingMourning={de="Keine Baumaßnahmen möglich, solange Siedler trauern.",en="No construction work possible as long as settlers mourn.",fr="Aucun travail de construction possible tant que les colons pleurent."}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/mode/SettlementSurvival_API")function AnimalPlagueActivate(dz)Lib.SettlementSurvival.Global.AnimalPlague.IsActive=dz==true end;API.AnimalPlagueActivate=AnimalPlagueActivate;function AnimalPlagueActivateForAI(dz)Lib.SettlementSurvival.Global.AnimalPlague.AffectAI=dz==true end;API.AnimalPlagueActivateForAI=AnimalPlagueActivateForAI;function AnimalInfectionActivateAutomatic(dz)Lib.SettlementSurvival.Global.AnimalPlague.AnimalsBecomeSick=dz==true end;API.AnimalInfectionActivateAutomatic=AnimalInfectionActivateAutomatic;function AnimalPlagueSetDeathInterval(ot)Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer = %d]],ot)end;API.AnimalPlagueSetDeathInterval=AnimalPlagueSetDeathInterval;function AnimalPlagueSetDeathChance(ou)Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance = %d]],ou)end;API.AnimalPlagueSetDeathChance=AnimalPlagueSetDeathChance;function AnimalPlagueSetInfectionInterval(ot)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer = %d]],ot)end;API.AnimalPlagueSetInfectionInterval=AnimalPlagueSetInfectionInterval;function AnimalPlagueSetInfectionChance(ou)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance = %d]],ou)end;API.AnimalPlagueSetInfectionChance=AnimalPlagueSetInfectionChance;function HotWeatherActivate(dz)Lib.SettlementSurvival.Global.HotWeather.IsActive=dz==true end;API.HotWeatherActivate=HotWeatherActivate;function HotWeatherActivateForAI(dz)Lib.SettlementSurvival.Global.HotWeather.AffectAI=dz==true end;API.HotWeatherActivateForAI=HotWeatherActivateForAI;function HotWeatherSetTemperature(ov)Lib.SettlementSurvival.Shared.HotWeather.Temperature=ov;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.Temperature = %d]],ov)end;API.HotWeatherSetTemperature=HotWeatherSetTemperature;function HotWeatherSetIgnitionChance(ou)Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance = %d]],ou)end;API.HotWeatherSetIgnitionChance=HotWeatherSetIgnitionChance;function ColdWeatherActivate(dz)Lib.SettlementSurvival.Global.ColdWeather.IsActive=dz==true end;API.ColdWeatherActivate=ColdWeatherActivate;function ColdWeatherActivateForAI(dz)Lib.SettlementSurvival.Global.ColdWeather.AffectAI=dz==true end;API.ColdWeatherActivateForAI=ColdWeatherActivateForAI;function ColdWeatherSetTemperature(ov)Lib.SettlementSurvival.Shared.ColdWeather.Temperature=ov;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.Temperature = %d]],ov)end;API.ColdWeatherSetTemperature=ColdWeatherSetTemperature;function ColdWeatherSetConsumptionInterval(ot)Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer = %d]],ot)end;API.ColdWeatherSetConsumptionInterval=ColdWeatherSetConsumptionInterval;function ColdWeatherSetInfectionChance(ou)Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance = %d]],ou)end;API.ColdWeatherSetInfectionChance=ColdWeatherSetInfectionChance;function FamineActivate(dz)Lib.SettlementSurvival.Global.Famine.IsActive=dz==true end;API.FamineActivate=FamineActivate;function FamineActivateForAI(dz)Lib.SettlementSurvival.Global.Famine.AffectAI=dz==true end;API.FamineActivateForAI=FamineActivateForAI;function FamineSetDeathInterval(ot)Lib.SettlementSurvival.Shared.Famine.DeathTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathTimer = %d]],ot)end;API.FamineSetDeathInterval=FamineSetDeathInterval;function FamineSetDeathChance(ou)Lib.SettlementSurvival.Shared.Famine.DeathChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathChance = %d]],ou)end;API.FamineSetDeathChance=FamineSetDeathChance;function NegligenceActivate(dz)Lib.SettlementSurvival.Global.Negligence.IsActive=dz==true end;API.NegligenceActivate=NegligenceActivate;function NegligenceActivateForAI(dz)Lib.SettlementSurvival.Global.Negligence.AffectAI=dz==true end;API.NegligenceActivateForAI=NegligenceActivateForAI;function NegligenceSetInfectionInterval(ot)Lib.SettlementSurvival.Shared.Negligence.InfectionTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionTimer = %d]],ot)end;API.NegligenceSetInfectionInterval=NegligenceSetInfectionInterval;function NegligenceSetInfectionChance(ou)Lib.SettlementSurvival.Shared.Negligence.InfectionChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionChance = %d]],ou)end;API.NegligenceSetInfectionChance=NegligenceSetInfectionChance;function PlagueActivate(dz)Lib.SettlementSurvival.Global.Plague.IsActive=dz==true end;API.PlagueActivate=PlagueActivate;function PlagueActivateForAI(dz)Lib.SettlementSurvival.Global.Plague.AffectAI=dz==true end;API.PlagueActivateForAI=PlagueActivateForAI;function PlagueSetDeathInterval(ot)Lib.SettlementSurvival.Shared.Plague.DeathTimer=ot;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathTimer = %d]],ot)end;API.PlagueSetDeathInterval=PlagueSetDeathInterval;function PlagueSetDeathChance(ou)Lib.SettlementSurvival.Shared.Plague.DeathChance=ou;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathChance = %d]],ou)end;API.PlagueSetDeathChance=PlagueSetDeathChance;Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Name="SettlementSurvival"Lib.SettlementSurvival.Global={AnimalPlague={AnimalsBecomeSick=false,IsActive=false,AffectAI=false},Famine={IsActive=false,AffectAI=false},ColdWeather={IsActive=false,AffectAI=false},HotWeather={IsActive=false,AffectAI=false},Negligence={IsActive=false,AffectAI=false},Plague={IsActive=false,AffectAI=false},SuspendedSettlers={}}Lib.SettlementSurvival.Local={SuspendedSettlers={}}Lib.SettlementSurvival.Shared={AnimalPlague={InfectionChance=6,InfectionTimer=60,DeathChance=12,DeathTimer=30},ColdWeather={ConsumptionFactor=0.01,ConsumptionTimer=30,Temperature=5,InfectionChance=12},HotWeather={IgnitionChance=5,IgnitionTimer=30,Temperature=30},Famine={DeathChance=6,DeathTimer=30},Negligence={InfectionChance=6,InfectionTimer=90},Plague={DeathChance=12,DeathTimer=30},SuspendedSettlers={MourningTime=5*60}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/mode/SettlementSurvival_API")Lib.Require("module/mode/SettlementSurvival_Text")Lib.Register("module/mode/SettlementSurvival")function Lib.SettlementSurvival.Global:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")for n=1,8 do self.AnimalPlague[n]={}self.ColdWeather[n]={Consumption=0}self.Famine[n]={}self.Negligence[n]={}self.Plague[n]={}self.SuspendedSettlers[n]={}end;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()local ow=Logic.GetCurrentTurn()Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(ow)Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(ow)Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(ow)Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(ow)Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(ow)Lib.SettlementSurvival.Global:ControlAnimalInfections(ow)Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(ow)Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(ow)Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(ow)end)self:OverwriteNeeds()Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Global:OnSaveGameLoaded()self:RestoreSettlerSuspension()end;function Lib.SettlementSurvival.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.FireAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aF==Report.FireAlarmActivated_Internal then self:RestoreSettlerSuspension()elseif aF==Report.RepairAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aF==Report.ReRepairAlarmActivated_Internal then self:RestoreSettlerSuspension()end end;function Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local oy={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local oz={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local oA=Array_Append(oy,oz)for f=1,#oA do if not self.AnimalPlague[n][oA[f]]and Logic.IsFarmAnimalInPasture(oA[f])and Logic.IsFarmAnimalIll(oA[f])then self.AnimalPlague[n][oA[f]]={hZ}end end;for oB,h in pairs(self.AnimalPlague[n])do if not IsExisting(oB)or not Logic.IsFarmAnimalInPasture(oB)or not Logic.IsFarmAnimalIll(oB)then self.AnimalPlague[n][oB]=nil end end;local oC=Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer;local oD=false;if hZ%oC==0 then for oB,Z in pairs(self.AnimalPlague[n])do local oE=Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)oE=oE/2 end;if oE>=1 and math.random(1,100)<=math.min(oE,100)then SendReport(Report.AnimalDiedFromIllness,oB)SendReportToLocal(Report.AnimalDiedFromIllness,oB)SetHealth(oB,0)oD=true end end end;if oD then self:Print(n,Lib.SettlementSurvival.Text.Alarms.AnimalDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(ox)if not Lib.LifestockSystem or not Lib.LifestockSystem.Global.IsInstalled then if Logic.GetTime()%10==0 then local oF=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(oF)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,900,1)if IsExisting(oG)then local cj=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cj-1)end end;local oH=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(oH)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_SheepPasture,I,J,900,1)if IsExisting(oG)then local cj=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cj-1)end end end end end;function Lib.SettlementSurvival.Global:ControlAnimalInfections(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.AnimalPlague.AnimalsBecomeSick then if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local oI=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer;if hZ%oI==0 then local oy={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local oz={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local oA=Array_Append(oy,oz)local oE=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;for f=#oA,1,-1 do if Logic.IsFarmAnimalInPasture(oA[f])and not Logic.IsFarmAnimalIll(oA[f])then if math.random(1,100)<=oE then Logic.MakeFarmAnimalIll(oA[f])end end end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.HotWeather.IsActive and n>=1 and n<=8 then if self.HotWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()>=Lib.SettlementSurvival.Shared.HotWeather.Temperature then local oJ=Lib.SettlementSurvival.Shared.HotWeather.IgnitionTimer;if hZ%oJ==0 then local oK={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local oL={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local oM=Array_Append(oK,oL)local oN=false;for f=1,#oM do if Logic.IsConstructionComplete(oM[f])==1 and not Logic.IsBurning(oM[f])then local oO=Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance;if math.random(1,100)<=oO then Logic.DEBUG_SetBuildingOnFire(oM[f],50)oN=true end end end;if oN then self:Print(n,Lib.SettlementSurvival.Text.Alarms.BuildingBurning)end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.ColdWeather.IsActive and n>=1 and n<=8 then if self.ColdWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()<=Lib.SettlementSurvival.Shared.ColdWeather.Temperature then local oP=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer;if hZ%oP==0 then local oQ=0;local oK={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local oL={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local oM=Array_Append(oK,oL)for f=1,#oM do if Logic.IsConstructionComplete(oM[f])==1 then local oR=0;for Z,oS in pairs({Logic.GetWorkersAndSpousesForBuilding(oM[f])})do if not self:IsSettlerSuspended(oS)then oR=oR+1 end end;if Logic.IsNeedActive(oM[f],Needs.Clothes)and Logic.GetNeedState(oM[f],Needs.Clothes)>0.5 then oR=oR*0.5 end;oQ=oQ+oR end end;local oT=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionFactor*oQ;local oU=GetPlayerResources(Goods.G_Wood,n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption+oT;if self.ColdWeather[n].Consumption>1 then local oV=math.floor(oT)AddGood(Goods.G_Wood,-1*math.min(oV,oU),n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption-oV end;if oT>oU then local oW=Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance;for f=1,#oM do if math.random(1,100)<=oW then Logic.MakeBuildingIll(oM[f])end end;self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerTemperature)end end end end end end;function Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.Negligence.IsActive and n>=1 and n<=8 then if self.Negligence.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local oX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local oY={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}oY=Array_Append(oX,oY)for f=1,#oY do if not self.Negligence[n][oY[f]]and Logic.GetEntityType(oY[f])~=Entities.U_Pharmacist and(self:IsSettlerDirty(oY[f])or self:IsSettlerBored(oY[f]))and not self:IsSettlerSuspended(oY[f])and not Logic.IsIll(oY[f])then self.Negligence[n][oY[f]]={hZ}end end;for oS,h in pairs(self.Negligence[n])do if not self:IsSettlerBored(oS)and not self:IsSettlerDirty(oS)then self.Negligence[n][oS]=nil end end;local oI=Lib.SettlementSurvival.Shared.Negligence.InfectionTimer;local oD=false;if hZ%oI==0 then for oS,h in pairs(self.Negligence[n])do if h[1]+oI<hZ then local oE=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;if math.random(1,100)<=oE then if not self:IsSettlerCarryingHygiene(oS)and not self:IsSettlerCarryingBeer(oS)and not self:IsSettlerSuspended(oS)then Logic.MakeSettlerIll(oS)oD=true end end end end end;if oD then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerNegligence)end end end end;function Lib.SettlementSurvival.Global:IsSettlerDirty(k)local B=GetID(k)local jq=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(jq,Needs.Hygiene)end;function Lib.SettlementSurvival.Global:IsSettlerBored(k)local B=GetID(k)local jq=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(jq,Needs.Entertainment)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingHygiene(k)local B=GetID(k)local oZ=Logic.GetCurrentTaskList(B)return oZ and oZ:find("_HYGIENE")end;function Lib.SettlementSurvival.Global:IsSettlerCarryingBeer(k)local B=GetID(k)local oZ=Logic.GetCurrentTaskList(B)return oZ and oZ:find("_ENTERTAINMENT")end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.Famine.IsActive and n>=1 and n<=8 then if self.Famine.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local oX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local oY={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}oY=Array_Append(oX,oY)for f=1,#oY do if not self.Famine[n][oY[f]]and self:IsSettlerHungry(oY[f])and not self:IsSettlerSuspended(oY[f])then self.Famine[n][oY[f]]={hZ}end end;for oS,h in pairs(self.Famine[n])do if not IsExisting(oS)or not self:IsSettlerHungry(oS)then self.Famine[n][oS]=nil end end;local oC=Lib.SettlementSurvival.Shared.Famine.DeathTimer;local oD=false;if hZ%oC==0 then for oS,h in pairs(self.Famine[n])do if not self:IsSettlerCarryingFood(oS)and not self:IsSettlerSuspended(oS)then local oE=Lib.SettlementSurvival.Shared.Famine.DeathChance;if oE>=1 and math.random(1,100)<=math.ceil(oE)then SendReport(Report.SettlerDiedFromStarvation,oS)SendReportToLocal(Report.SettlerDiedFromStarvation,oS)self:SuspendSettler(oS,true)oD=true end end end end;if oD then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromHunger)end end end end;function Lib.SettlementSurvival.Global:IsSettlerHungry(k)local B=GetID(k)local jq=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(jq,Needs.Nutrition)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingFood(k)local B=GetID(k)local oZ=Logic.GetCurrentTaskList(B)return oZ and(oZ:find("_NUTRITION")or oZ:find("_FOOD"))end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(ox)local hZ=math.floor(Logic.GetTime())local n=ox%10;if self.Plague.IsActive and n>=1 and n<=8 then if self.Plague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local oX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local oY={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}oY=Array_Append(oX,oY)for f=1,#oY do if not self.Plague[n][oY[f]]and Logic.GetEntityType(oY[f])~=Entities.U_Pharmacist and Logic.IsIll(oY[f])and not self:IsSettlerSuspended(oY[f])then self.Plague[n][oY[f]]={hZ}end end;for oS,h in pairs(self.Plague[n])do if not IsExisting(oS)or not Logic.IsIll(oS)then self.Plague[n][oS]=nil end end;local oC=Lib.SettlementSurvival.Shared.Plague.DeathTimer;local oD=false;if hZ%oC==0 then for oS,h in pairs(self.Plague[n])do if not self:IsSettlerCarryingMedicine(oS)and not self:IsSettlerSuspended(oS)then local oE=Lib.SettlementSurvival.Shared.Plague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)oE=oE/2 end;if oE>=1 and math.random(1,100)<=math.ceil(oE)then SendReport(Report.SettlerDiedFromIllness,oS)SendReportToLocal(Report.SettlerDiedFromIllness,oS)self:SuspendSettler(oS,true)oD=true end end end end;if oD then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:IsSettlerCarryingMedicine(k)local B=GetID(k)local oZ=Logic.GetCurrentTaskList(B)return oZ and oZ:find("_MEDICINE")end;function Lib.SettlementSurvival.Global:ResumeSettler(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)local ci=Logic.GetStoreHouse(n)if ci~=0 then Logic.SetTaskList(B,TaskLists.TL_WAIT_THEN_WALK)Logic.SetVisible(B,true)if self.SuspendedSettlers[n][B]then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,B)self.SuspendedSettlers[n][B]=nil end end end;function Lib.SettlementSurvival.Global:SuspendSettler(k,o_)local B=GetID(k)local n=Logic.EntityGetPlayer(B)local ci=Logic.GetStoreHouse(n)if ci~=0 then local jq=Logic.GetSettlersWorkBuilding(B)local p0={Logic.GetWorkersAndSpousesForBuilding(jq)}local p1=false;for f=1,#p0 do if not self:IsSettlerSuspended(k)then p1=true;break end end;if p1==false then Logic.SetNeedState(B,Needs.Nutrition,1.0)Logic.SetNeedState(B,Needs.Entertainment,1.0)Logic.SetNeedState(B,Needs.Clothes,1.0)Logic.SetNeedState(B,Needs.Hygiene,1.0)Logic.SetNeedState(B,Needs.Medicine,1.0)end;local I,J,K=Logic.EntityGetPos(ci)Logic.DEBUG_SetSettlerPosition(B,I,J)Logic.SetVisible(B,false)Logic.SetTaskList(B,TaskLists.TL_NPC_IDLE)if not self.SuspendedSettlers[n][B]then local p2=o_ and Logic.GetTime()or-1;ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = {%d}",n,B,p2)self.SuspendedSettlers[n][B]={p2}end end end;function Lib.SettlementSurvival.Global:IsSettlerSuspended(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][B]~=nil end;function Lib.SettlementSurvival.Global:HasSuspendedInhabitants(k)local jq=GetID(k)local p0={Logic.GetWorkersAndSpousesForBuilding(jq)}for f=1,#p0 do if self:IsSettlerSuspended(p0[f])then return true end end;return false end;function Lib.SettlementSurvival.Global:RestoreSettlerSuspension()for n=1,8 do for g,h in pairs(self.SuspendedSettlers[n])do if not IsExisting(g)then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,g)self.SuspendedSettlers[n][g]=nil else self:SuspendSettler(g)end end end end;function Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(ox)local p3=Lib.SettlementSurvival.Shared.SuspendedSettlers.MourningTime;local hZ=Logic.GetTime()local n=ox%10;if n>=1 and n<=8 then for g,h in pairs(self.SuspendedSettlers[n])do if h[1]>-1 and h[1]+p3<=hZ then self:ResumeSettler(g)DestroyEntity(g)end end end end;function Lib.SettlementSurvival.Global:OverwriteNeeds()ActivateNeedsForBuilding=function(q,ap)for p4,Z in pairs(PlayerActiveNeeds[q])do if Logic.IsEntityInCategory(ap,EntityCategories.OuterRimBuilding)==1 then if p4==Needs.Nutrition or p4==Needs.Clothes or p4==Needs.Medicine then Logic.SetNeedActive(ap,p4,true)end end;if Logic.IsEntityInCategory(ap,EntityCategories.CityBuilding)==1 then Logic.SetNeedActive(ap,p4,true)end end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end;ActivateNeedForPlayer=function(q,p5)if p5==nil then return end;for g=1,#p5 do local p4=p5[g]PlayerActiveNeeds[q][p4]=true;local jd={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}if p4==Needs.Nutrition or p4==Needs.Clothes or p4==Needs.Medicine then local p6={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}for aV=1,#p6 do local jq=p6[aV]table.insert(jd,jq)end end;for f=1,#jd do local jq=jd[f]Logic.SetNeedActive(jq,p4,true)end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end end end;function Lib.SettlementSurvival.Global:Print(q,d9)local ba=ConvertPlaceholders(Localize(d9))ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            GUI.ClearNotes()
            GUI.AddNote("%s")
        end
    ]],q,ba)end;function Lib.SettlementSurvival.Local:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")self:OverrideSelectionChanged()self:OverwriteAlarmButtons()self:OverwriteGameCallbacks()self:OverwriteJumpToWorker()self:OverwriteUpgradeButton()for n=1,8 do self.SuspendedSettlers[n]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Local:OnSaveGameLoaded()end;function Lib.SettlementSurvival.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementSurvival.Local:OverwriteJumpToWorker()GUI_BuildingInfo.JumpToWorkerClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local n=GUI.GetPlayerID()local p7=GUI.GetSelectedEntity()local p8=0;local p9;if Logic.IsBuilding(p7)==1 then p8=p7;p9=false else if Logic.IsWorker(p7)==1 or Logic.IsSpouse(p7)==true or Logic.GetEntityType(p7)==Entities.U_Priest then p8=Logic.GetSettlersWorkBuilding(p7)p9=true end end;if p8~=0 then local pa={Logic.GetWorkersAndSpousesForBuilding(p8)}for f=#pa,1,-1 do local oS=pa[f]if Lib.SettlementSurvival.Local.SuspendedSettlers[n]then if Lib.SettlementSurvival.Local.SuspendedSettlers[n][oS]then table.remove(pa,f)end end end;local pb;if g_CloseUpView.Active==false and p9==true then pb=p7 else local pc=1;for f=1,#pa do if pa[f]==g_LastSelectedInhabitant then pc=f+1;break end end;pb=pa[pc]if pb==0 then pb=pa[pc+1]end end;if pb==nil then local I,J=Logic.GetEntityPosition(p8)g_LastSelectedInhabitant=nil;ShowCloseUpView(0,I,J)GUI.SetSelectedEntity(p8)else GUI.SetSelectedEntity(pb)ShowCloseUpView(pb)g_LastSelectedInhabitant=pb end end end end;function Lib.SettlementSurvival.Local:IsSettlerSuspended(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][B]~=nil end;function Lib.SettlementSurvival.Local:HasSuspendedInhabitants(k)local jq=GetID(k)local p0={Logic.GetWorkersAndSpousesForBuilding(jq)}for f=1,#p0 do if self:IsSettlerSuspended(p0[f])then return true end end;return false end;function Lib.SettlementSurvival.Local:OverwriteGameCallbacks()self.Orig_GameCallback_Feedback_OnBuildingBurning=GameCallback_Feedback_OnBuildingBurning;GameCallback_Feedback_OnBuildingBurning=function(q,ap)Lib.SettlementSurvival.Local.Orig_GameCallback_Feedback_OnBuildingBurning(q,ap)SendReportToGlobal(Report.FireAlarmActivated_Internal,ap)end;self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(hu,d7)if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(hu)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(hu)return end;Lib.SettlementSurvival.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(hu,d7)end end;function Lib.SettlementSurvival.Local:OverwriteAlarmButtons()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopFireAlarmClicked;GUI_BuildingButtons.StartStopFireAlarmClicked=function()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsFireAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.FireAlarmActivated_Internal,B)else SendReportToGlobal(Report.FireAlarmDeactivated_Internal,B)end end;GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopRepairAlarmClicked;GUI_BuildingButtons.StartStopRepairAlarmClicked=function()GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsRepairAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.ReRepairAlarmActivated_Internal,B)else SendReportToGlobal(Report.RepairAlarmDeactivated_Internal,B)end end end;function Lib.SettlementSurvival.Local:OverwriteUpgradeButton()GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival=GUI_BuildingButtons.UpgradeClicked;GUI_BuildingButtons.UpgradeClicked=function()local jq=GUI.GetSelectedEntity()if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(jq)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(jq)return end;GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival()end end;function Lib.SettlementSurvival.Local:OverrideSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.SettlementSurvival.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.SettlementSurvival.Local:OnBuildingSelected()end end;function Lib.SettlementSurvival.Local:OnBuildingSelected()local B=GUI.GetSelectedEntity()if Logic.IsEntityInCategory(B,EntityCategories.OuterRimBuilding)==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",1)end end;RegisterModule(Lib.SettlementSurvival.Name)Lib.Register("module/mode/SettlementLimitation_Text")Lib.SettlementLimitation=Lib.SettlementLimitation or{}Lib.SettlementLimitation.Text={DevelopTerritory={Title={de="Territorium entwickeln",en="Develop territory",fr="Développer le territoire"},Text={de="Entwickelt das Territorium fort, um ein weiteres Gebäude zu errichten.",en="Develop the territory to be able to build another building.",fr="Aménager le territoire pour construire un autre bâtiment."},DisabledUpgrade={de="Benötigt Ausbau!",en="Requires Upgrade!",fr="Nécessite une mise à jour!"},DisabledDone={de="Wurde bereits entwickelt!",en="Territory already developed!",fr="Territoire déjà aménagé !"}},BuildingLimit={de="Gebäude: ",en="Buildings: ",fr="Imeuble: "}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/mode/SettlementLimitation_API")function ActivateSettlementLimitation(dz)if not IsLocalScript()then ExecuteLocal("ActivateSettlementLimitation(%s)",tostring(dz==true))end;Lib.SettlementLimitation.AquireContext()this.Active=true;Lib.SettlementLimitation.ReleaseContext()end;function SetTerritoryBuildingLimit(q,hj,fO)local _=GetTerritoryID(hj)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingLimit(%d,%d,%d)",q,_,fO)end;Lib.SettlementLimitation.AquireContext()this.TerritoryRestriction[q][_]=fO;Lib.SettlementLimitation.ReleaseContext()end;function SetTerritoryBuildingTypeLimit(q,hj,i,fO)local _=GetTerritoryID(hj)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingTypeLimit(%d,%d,%d,%d)",q,_,i,fO)end;Lib.SettlementLimitation.AquireContext()if not this.TerritoryTypeRestriction[q][_]then this.TerritoryTypeRestriction[q][_]={}end;this.TerritoryTypeRestriction[q][_][i]=fO;Lib.SettlementLimitation.ReleaseContext()end;function ClearTerritoryBuildingLimit(q,hj)local _=GetTerritoryID(hj)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingTypeLimit(%d,%d)",q,_)end;Lib.SettlementLimitation.AquireContext()this.TerritoryRestriction[q][_]=nil;Lib.SettlementLimitation.ReleaseContext()end;function ClearTerritoryBuildingTypeLimit(q,hj,i)local _=GetTerritoryID(hj)if not IsLocalScript()then ExecuteLocal("ClearTerritoryBuildingTypeLimit(%d,%d,%d)",q,_,i)end;Lib.SettlementLimitation.AquireContext()if not this.TerritoryTypeRestriction[q][_]then this.TerritoryTypeRestriction[q][_]={}end;this.TerritoryTypeRestriction[q][_][i]=nil;Lib.SettlementLimitation.ReleaseContext()end;function SetTerritoryDevelopmentCost(pd,pe,pf,pg)if not IsLocalScript()then ExecuteLocal("SetTerritoryDevelopmentCost(%s,%s,%s,%s)",tostring(pd),tostring(pe),tostring(pf or nil),tostring(pg or nil))end;Lib.SettlementLimitation.AquireContext()this.UpgradeTerritoryCosts={pd,pe,pf,pg}Lib.SettlementLimitation.ReleaseContext()end;Lib.SettlementLimitation=Lib.SettlementLimitation or{}Lib.SettlementLimitation.Name="SettlementLimitation"Lib.SettlementLimitation.Global={Active=false,TerritoryRestriction={},TerritoryTypeRestriction={},OutpostUpgradeBonus={},UpgradeTerritoryCosts={Goods.G_Gold,300},CityBuildings={},OuterRimBuildings={}}Lib.SettlementLimitation.Local={Active=false,TerritoryRestriction={},TerritoryTypeRestriction={},OutpostUpgradeBonus={},UpgradeTerritoryCosts={Goods.G_Gold,300},CityBuildings={},OuterRimBuildings={}}Lib.Require("comfort/GetTerritoryID")Lib.Require("core/Core")Lib.Require("module/city/Construction")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/mode/SettlementLimitation_API")Lib.Require("module/mode/SettlementLimitation_Text")Lib.Register("module/mode/SettlementLimitation")function Lib.SettlementLimitation.Global:Initialize()if not self.IsInstalled then Report.DevelopTerritory_Internal=CreateReport("DevelopTerritory_Internal")self.CityBuildings={Logic.GetEntityTypesInCategory(EntityCategories.CityBuilding)}self.OuterRimBuildings={Logic.GetEntityTypesInCategory(EntityCategories.OuterRimBuilding)}for n=1,8 do self.TerritoryRestriction[n]={}self.TerritoryTypeRestriction[n]={}self.OutpostUpgradeBonus[n]={}end;Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementLimitation.Global:OnSaveGameLoaded()end;function Lib.SettlementLimitation.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true;for n=1,8 do self:InitDefaultRules(n)self:InitConstructionLimit(n)end elseif aF==Report.DevelopTerritory_Internal then local gi=Lib.SettlementLimitation.Local.UpgradeTerritoryCosts;AddGood(gi[1],gi[2],arg[1])self:SetOutpostUpgradeBonusAmount(arg[1],arg[2],arg[3])end end;function Lib.SettlementLimitation.Global:InitDefaultRules(q)local ph={Logic.GetTerritories()}for f=1,#ph do SetTerritoryBuildingLimit(q,ph[f],3)for aV=1,#self.CityBuildings do SetTerritoryBuildingTypeLimit(q,ph[f],self.CityBuildings[aV],0)end;for aV=1,#self.OuterRimBuildings do SetTerritoryBuildingTypeLimit(q,ph[f],self.OuterRimBuildings[aV],1)end end end;function Lib.SettlementLimitation.Global:InitConstructionLimit(q)SettlementLimitation_Global_TerritoryBuildingGeneralLimitRule=function(q,i,gU,gV)local pi=Logic.GetStoreHouse(q)local _=Logic.GetTerritoryAtPosition(gU,gV)local pj=Logic.GetTerritoryAcquiringBuildingID(_)if Lib.SettlementLimitation.Global.Active and GetTerritoryUnderEntity(pi)~=_ then if Lib.SettlementLimitation.Global.TerritoryRestriction[q]then local pk=Lib.SettlementLimitation.Global.TerritoryRestriction[q][_]if Lib.SettlementLimitation.Global.TerritoryRestriction[q][0]then pk=Lib.SettlementLimitation.Global.TerritoryRestriction[q][0]end;local pl=Lib.SettlementLimitation.Global:GetOutpostUpgradeBonusAmount(q,_)local pm=#{Logic.GetEntitiesOfCategoryInTerritory(_,q,EntityCategories.AttackableBuilding,0)}pm=pm-(pj~=0 and 1 or 0)if(pk or-1)~=-1 then return pm<pk+pl end end end;return true end;SettlementLimitation_Global_TerritoryBuildingTypeLimitRule=function(q,i,gU,gV)local pi=Logic.GetStoreHouse(q)local _=Logic.GetTerritoryAtPosition(gU,gV)if Lib.SettlementLimitation.Global.Active and GetTerritoryUnderEntity(pi)~=_ then if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[q]then local pk=-1;if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[q][_]then pk=Lib.SettlementLimitation.Global.TerritoryTypeRestriction[q][_][i]or-1 end;if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[q][0]then pk=Lib.SettlementLimitation.Global.TerritoryTypeRestriction[q][0][i]or-1 end;local pm=#{Logic.GetEntitiesOfTypeInTerritory(_,q,i,0)}if(pk or-1)~=-1 then return pm<pk end end end;return true end;CustomRuleConstructBuilding(q,"SettlementLimitation_Global_TerritoryBuildingGeneralLimitRule")CustomRuleConstructBuilding(q,"SettlementLimitation_Global_TerritoryBuildingTypeLimitRule")end;function Lib.SettlementLimitation.Global:ActivateSettlementLimitation(dz)self.Active=dz==true;ExecuteLocal([[Lib.SettlementLimitation.Local.Active = %s == true]],tostring(dz==true))end;function Lib.SettlementLimitation.Global:GetOutpostUpgradeBonusAmount(q,aF)if self.OutpostUpgradeBonus[q]then return self.OutpostUpgradeBonus[q][aF]or 0 end;return 0 end;function Lib.SettlementLimitation.Local:Initialize()if not self.IsInstalled then Report.DevelopTerritory_Internal=CreateReport("DevelopTerritory_Internal")self:AddOutpostDevelopButton()self:OverwritePlacementUpdate()self.CityBuildings={Logic.GetEntityTypesInCategory(EntityCategories.CityBuilding)}self.OuterRimBuildings={Logic.GetEntityTypesInCategory(EntityCategories.OuterRimBuilding)}for n=1,8 do self.TerritoryRestriction[n]={}self.TerritoryTypeRestriction[n]={}self.OutpostUpgradeBonus[n]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementLimitation.Local:OnSaveGameLoaded()end;function Lib.SettlementLimitation.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementLimitation.Local:AddOutpostDevelopButton()local iF=function(fv,ap)local n=GUI.GetPlayerID()local _=GetTerritoryUnderEntity(ap)local gi=Lib.SettlementLimitation.Local.UpgradeTerritoryCosts;if GetPlayerGoodsInSettlement(gi[1],n,true)<=gi[2]then Message(XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold"))return end;SendReportToGlobal(Report.DevelopTerritory_Internal,n,_,1)end;local pn=function(fv,ap)local n=GUI.GetPlayerID()local _=GetTerritoryUnderEntity(ap)local po;if Logic.GetUpgradeLevel(ap)<1 then po=Localize(Lib.SettlementLimitation.Text.DevelopTerritory.DisabledUpgrade)elseif Lib.SettlementLimitation.Local.OutpostUpgradeBonus[n][_]then po=Localize(Lib.SettlementLimitation.Text.DevelopTerritory.DisabledDone)end;SetTooltipCosts(Localize(Lib.SettlementLimitation.Text.DevelopTerritory.Title),Localize(Lib.SettlementLimitation.Text.DevelopTerritory.Text),po,Lib.SettlementLimitation.Local.UpgradeTerritoryCosts,true)end;local pp=function(fv,ap)local n=GUI.GetPlayerID()local _=GetTerritoryUnderEntity(ap)SetIcon(fv,{1,8})if Lib.SettlementLimitation.Local.Active then if Lib.SettlementLimitation.Local.OutpostUpgradeBonus[n][_]or Logic.GetUpgradeLevel(ap)<1 then XGUIEng.DisableButton(fv,1)else XGUIEng.DisableButton(fv,0)end else XGUIEng.ShowWidget(fv,0)end end;AddBuildingButtonByType(Entities.B_Outpost_ME,iF,pn,pp)AddBuildingButtonByType(Entities.B_Outpost_NA,iF,pn,pp)AddBuildingButtonByType(Entities.B_Outpost_NE,iF,pn,pp)AddBuildingButtonByType(Entities.B_Outpost_SE,iF,pn,pp)if Entities.B_Outpost_AS then AddBuildingButtonByType(Entities.B_Outpost_AS,iF,pn,pp)end end;function Lib.SettlementLimitation.Local:OverwritePlacementUpdate()self.Orig_GUI_Construction_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()if PlacementState~=0 then Lib.SettlementLimitation.Local.Orig_GUI_Construction_PlacementUpdate()return end;local n=GUI.GetPlayerID()local I,J=GUI.Debug_GetMapPositionUnderMouse()local pq;local _;if I~=-1 then _=Logic.GetTerritoryAtPosition(I,J)FoWState=Logic.GetFoWState(n,I,J)if _~=nil then TerritoryName=GetTerritoryName(_)pq=Logic.GetTerritoryPlayerID(_)end end;if _==nil or pq==0 or g_Construction.CurrentPlacementType==1 then return end;local pr,ps,pt=GUI.GetPlayerColor(pq)PlayerColor="{@color:"..pr..","..ps..","..pt..",255}"local TerritoryName=GetTerritoryName(_)local hI=Lib.Construction.Local.LastSelectedBuildingType;local Z,lt=Logic.GetBuildingTypesInUpgradeCategory(hI)local pu=self:GetRestrictionText(n,_,lt)local pv=self:GetRestrictionTypeText(n,_,lt)local pw=""if pu==""and pv==""then TerritoryName=""else pw=pu..pv end;for f=0,4 do XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryName"..f,"{center}"..PlayerColor.." "..TerritoryName)XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryReason"..f,"{center}"..pw)XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/OtherReason"..f,"")XGUIEng.SetText("/InGame/Root/Normal/TextMessages/MessageContainer/Message"..f,"")end end end;function Lib.SettlementLimitation.Local:GetRestrictionText(q,be,i)local pi=Logic.GetStoreHouse(q)if GetTerritoryUnderEntity(pi)==be or not Lib.SettlementLimitation.Local.Active then return""end;local function px(et,py,pz)local pj=Logic.GetTerritoryAcquiringBuildingID(py)local pm=#{Logic.GetEntitiesOfCategoryInTerritory(py,et,EntityCategories.AttackableBuilding,0)}pm=pm-(pj~=0 and 1 or 0)local pl=self:GetOutpostUpgradeBonusAmount(et,py)local ba=string.format("%s%s %d / %d{@color:255,255,255,255}{cr}",pm>=pz and"{@color:255,0,0,255}"or"{@color:255,255,255,255}",Localize(Lib.SettlementLimitation.Text.BuildingLimit),pm,pz+pl)return ba end;local pA=self.TerritoryRestriction[q]if pA then local pB=pA[be]if pB and pB~=-1 then return px(q,be,pB)end;local pC=pA[0]if pC and pC~=-1 then return px(q,be,pC)end end;return""end;function Lib.SettlementLimitation.Local:GetRestrictionTypeText(q,be,i)local pi=Logic.GetStoreHouse(q)if GetTerritoryUnderEntity(pi)==be or not Lib.SettlementLimitation.Local.Active then return""end;local function px(et,py,eH,pD)local h9=Logic.GetEntityTypeName(eH)local pm=#{Logic.GetEntitiesOfTypeInTerritory(py,et,eH,0)}local pk=pD;local pl=self:GetOutpostUpgradeBonusAmount(et,py)local ba=string.format("%s%s %d / %d{@color:255,255,255,255}{cr}",pm>=pk and"{@color:255,0,0,255}"or"{@color:255,255,255,255}",XGUIEng.GetStringTableText("Names/"..h9),pm,pk+pl)return ba end;local pE=self.TerritoryTypeRestriction[q]if pE then local pA=pE[be]if pA and pA[i]and pA[i]~=-1 then return px(q,be,i,pA[i])end;local pF=pE[0]if pF and pF[i]and pF[i]~=-1 then return px(q,be,i,pF[i])end end;return""end;function Lib.SettlementLimitation.Local:GetOutpostUpgradeBonusAmount(q,aF)if self.OutpostUpgradeBonus[q]then return self.OutpostUpgradeBonus[q][aF]or 0 end;return 0 end;RegisterModule(Lib.SettlementLimitation.Name)Lib.Register("module/information/BriefingSystem_Behavior")function Reprisal_Briefing(r,pG)return B_Reprisal_Briefing:new(r,pG)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(b2,b3)if b2==0 then self.BriefingName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Briefing:CustomFunction(b1)_G[self.Function](self.BriefingName,b1.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(b1)if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Briefing)function Reward_Briefing(r,pG)return B_Reward_Briefing:new(r,pG)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Briefing)function Trigger_Briefing(r,q,dt)return B_Trigger_Briefing:new(r,q,dt)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(b2,b3)if b2==0 then self.BriefingName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Briefing:CustomFunction(b1)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Briefing)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/BriefingSystem_API")function StartBriefing(pG,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(pG)=="table","Briefing must be a table!")assert(#pG>0,"Briefing does not contain pages!")for f=1,#pG do assert(type(pG[f])~="table"or pG[f].__Legit,"A page is not initalized!")end;if pG.EnableSky==nil then pG.EnableSky=true end;if pG.EnableFoW==nil then pG.EnableFoW=false end;if pG.EnableGlobalImmortality==nil then pG.EnableGlobalImmortality=true end;if pG.EnableBorderPins==nil then pG.EnableBorderPins=false end;if pG.RestoreGameSpeed==nil then pG.RestoreGameSpeed=true end;if pG.RestoreCamera==nil then pG.RestoreCamera=true end;Lib.BriefingSystem.Global:StartBriefing(r,n,pG)end;API.StartBriefing=StartBriefing;function RequestBriefingAlternateGraphics()if not GUI then ExecuteLocal("RequestBriefingAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestBriefingAlternateGraphics=RequestBriefingAlternateGraphics;function IsBriefingActive(q)if not IsLocalScript()then return Lib.BriefingSystem.Global:GetCurrentBriefing(q)~=nil end;return Lib.BriefingSystem.Local:GetCurrentBriefing(q)~=nil end;API.IsBriefingActive=IsBriefingActive;function GetFramePosition(k,pH)local I,J,K=Logic.EntityGetPos(GetID(k))return I,J,K+(pH or 0)end;function GetFrameVector(pI,pJ,pK,pL)local av,aw,ax=Logic.EntityGetPos(GetID(pI))local az,aA,aB=Logic.EntityGetPos(GetID(pK))return av,aw,ax+(pJ or 0),az,aA,aB+(pL or 0)end;function AddBriefingPages(pG)Lib.BriefingSystem.Global:CreateBriefingGetPage(pG)Lib.BriefingSystem.Global:CreateBriefingAddPage(pG)Lib.BriefingSystem.Global:CreateBriefingAddMCPage(pG)Lib.BriefingSystem.Global:CreateBriefingAddRedirect(pG)local AP=function(pM)local pN;if type(pM)=="table"then if pM.MC then pN=pG:AddMCPage(pM)else pN=pG:AddPage(pM)end else pN=pG:AddRedirect(pM)end;return pN end;local ASP=function(...)pG.PageAnimation=pG.PageAnimation or{}local Name,k1,ba,V;local pO=false;local iF=function()end;local pP=false;if#arg==3 and type(arg[1])=="string"or#arg>=4 and type(arg[4])=="boolean"then Name=table.remove(arg,1)end;k1=table.remove(arg,1)ba=table.remove(arg,1)if#arg>0 then pO=table.remove(arg,1)==true end;if#arg>0 then V=table.remove(arg,1)end;if#arg>0 then iF=table.remove(arg,1)end;if#arg>0 then pP=not table.remove(arg,1)end;local pQ;if V then pQ=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if V and Logic.IsSettler(GetID(V))==1 then pQ=Logic.GetEntityOrientation(GetID(V))+90 end end;return pG:AddPage{Name=Name,Title=k1,Text=ba,Action=iF,Position=V,DisableSkipping=pP,DialogCamera=pO,Rotation=pQ}end;return AP,ASP end;API.AddBriefingPages=AddBriefingPages;function AP(gy)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/BriefingSystem_Text")Lib.BriefingSystem.Text={NextButton={de="Weiter",en="Forward",fr="Continuer"},PrevButton={de="Zurück",en="Previous",fr="Retour"},EndButton={de="Beenden",en="Close",fr="Quitter"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.BriefingSystem=Lib.BriefingSystem or{}Lib.BriefingSystem.Name="BriefingSystem"Lib.BriefingSystem.Global={Briefing={},BriefingQueue={},BriefingCounter=0}Lib.BriefingSystem.Local={Config={DoAlternateGraphics=true},ParallaxWidgets={{"/EndScreen/EndScreen/BackGround","/EndScreen/EndScreen"},{"/InGame/Root/EndScreen/BlackBG","/InGame/Root/EndScreen"},{"/InGame/Root/EndScreen/BG","/InGame/Root/EndScreen"},{"/InGame/Root/BlackStartScreen/BG","/InGame/Root/BlackStartScreen"}},Briefing={}}CONST_BRIEFING={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/BriefingSystem_Text")Lib.Require("module/information/BriefingSystem_API")Lib.Require("module/information/BriefingSystem_Behavior")Lib.Register("module/information/BriefingSystem")CinematicEventTypes.Briefing=2;function Lib.BriefingSystem.Global:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")for f=1,8 do self.BriefingQueue[f]={}end;RequestHiResJob(function()Lib.BriefingSystem.Global:UpdateQueue()Lib.BriefingSystem.Global:BriefingExecutionController()end)Lib.BriefingSystem.Local=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Global:OnSaveGameLoaded()end;function Lib.BriefingSystem.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then elseif aF==Report.BriefingStarted then self:NextPage(arg[1])elseif aF==Report.BriefingEnded then SendReportToLocal(Report.BriefingEnded,arg[1],arg[2])elseif aF==Report.BriefingPageShown then SendReportToLocal(Report.BriefingPageShown,arg[1],arg[2])elseif aF==Report.BriefingOptionSelected then self:OnOptionSelected(arg[1],arg[2])elseif aF==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartBriefing(f)then local gO=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if gO and gO[1]==CinematicEventTypes.Briefing then self:NextBriefing(f)end end end end;function Lib.BriefingSystem.Global:BriefingExecutionController()for f=1,8 do if self.Briefing[f]and not self.Briefing[f].DisplayIngameCutscene then local pR=self.Briefing[f].CurrentPage;local pN=self.Briefing[f][pR]if pN and not pN.MC and pN.Duration>0 then if pN.Started+pN.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.BriefingSystem.Global:CreateBriefingGetPage(pG)pG.GetPage=function(self,pS)local an=Lib.BriefingSystem.Global:GetPageIDByName(pG.PlayerID,pS)return Lib.BriefingSystem.Global.Briefing[pG.PlayerID][an]end end;function Lib.BriefingSystem.Global:CreateBriefingAddPage(pG)pG.AddPage=function(self,pM)self.Length=(self.Length or 0)+1;pG.PageAnimation=pG.PageAnimation or{}pG.PageParallax=pG.PageParallax or{}local pT="Page"..#self+1;if pM.Name then pT=pM.Name else pM.Name=pT end;pM.__Legit=true;pM.Title=Localize(pM.Title or"")pM.Text=Localize(pM.Text or"")if pM.BigBars==nil then pM.BigBars=true end;if pM.Position then if not pM.Angle then pM.Angle=CONST_BRIEFING.CAMERA_ANGLEDEFAULT;if pM.DialogCamera then pM.Angle=CONST_BRIEFING.DLGCAMERA_ANGLEDEFAULT end end;if not pM.Rotation then pM.Rotation=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if pM.DialogCamera then pM.Rotation=CONST_BRIEFING.DLGCAMERA_ROTATIONDEFAULT end end;if not pM.Zoom then pM.Zoom=CONST_BRIEFING.CAMERA_ZOOMDEFAULT;if pM.DialogCamera then pM.Zoom=CONST_BRIEFING.DLGCAMERA_ZOOMDEFAULT end end;local pU,pV,pW,pX;if pM.FlyTo then pU=pM.FlyTo.Position or pU;pV=pM.FlyTo.Rotation or pV;pW=pM.FlyTo.Zoom or pW;pX=pM.FlyTo.Angle or pX end;pG.PageAnimation[pT]={Clear=true,{pM.Duration or 1,pM.Position,pM.Rotation,pM.Zoom,pM.Angle,pU,pV,pW,pX}}end;if not pM.FOV then if pM.DialogCamera then pM.FOV=CONST_BRIEFING.DLGCAMERA_FOVDEFAULT else pM.FOV=CONST_BRIEFING.CAMERA_FOVDEFAULT end end;if not pM.Duration then if not pM.Position then pM.DisableSkipping=false;pM.Duration=-1 else if pM.DisableSkipping==nil then pM.DisableSkipping=false end;pM.Duration=pM.Text:len()*CONST_BRIEFING.TIMER_PER_CHAR;pM.Duration=pM.Duration<6 and 6 or pM.Duration<6 end end;pM.GetSelected=function(self)return 0 end;table.insert(self,pM)return pM end end;function Lib.BriefingSystem.Global:CreateBriefingAddMCPage(pG)pG.AddMCPage=function(self,pM)local pN=self:AddPage(pM)pN.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;if pN.MC then for f=1,#pN.MC do pN.MC[f][1]=Localize(pN.MC[f][1])pN.MC[f].ID=pN.MC[f].ID or f end;pN.BigBars=true;pN.DisableSkipping=true;pN.Duration=-1 end;return pN end end;function Lib.BriefingSystem.Global:CreateBriefingAddRedirect(pG)pG.AddRedirect=function(self,S)self.Length=(self.Length or 0)+1;local pN=S==nil and-1 or S;table.insert(self,pN)return pN end end;function Lib.BriefingSystem.Global:StartBriefing(r,q,gy)self.BriefingQueue[q]=self.BriefingQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Briefing,r,gy)end;function Lib.BriefingSystem.Global:EndBriefing(q)Logic.SetGlobalInvulnerability(0)local pY=self.Briefing[q]SendReport(Report.BriefingEnded,q,pY.Name)if pY.Finished then pY:Finished()end;FinishCinematicEvent(pY.Name,q)self.Briefing[q]=nil end;function Lib.BriefingSystem.Global:NextBriefing(q)if self:CanStartBriefing(q)then local pZ=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(pZ[1]==CinematicEventTypes.Briefing)StartCinematicEvent(pZ[2],q)local pY=pZ[3]pY.Name=pZ[2]pY.PlayerID=q;pY.CurrentPage=0;self.Briefing[q]=pY;self:TransformAnimations(q)self:TransformParallaxes(q)if pY.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Briefing[q].Starting then self.Briefing[q]:Starting()end;SendReportToLocal(Report.BriefingStarted,q,pY.Name,pY)SendReport(Report.BriefingStarted,q,pY.Name)end end;function Lib.BriefingSystem.Global:TransformAnimations(q)if self.Briefing[q].PageAnimation then for g,h in pairs(self.Briefing[q].PageAnimation)do local pR=self:GetPageIDByName(q,g)if pR~=0 then self.Briefing[q][pR].Animations={}self.Briefing[q][pR].Animations.Repeat=h.Repeat==true;self.Briefing[q][pR].Animations.Clear=h.Clear==true;for f=1,#h,1 do local iJ={}iJ.Interpolation=h[f].Interpolation;iJ.Modulation=h[f].Modulation or(#h[f]>=4 and 1.25 or 1)iJ.Duration=h[f][1]or 2*60;if h[f][4]and type(h[f][4])~="table"then iJ.Start={Position=type(h[f][2])~="table"and{h[f][2],0}or h[f][2],Rotation=h[f][3]or CONST_BRIEFING.CAMERA_ROTATIONDEFAULT,Zoom=h[f][4]or CONST_BRIEFING.CAMERA_ZOOMDEFAULT,Angle=h[f][5]or CONST_BRIEFING.CAMERA_ANGLEDEFAULT}local p_=h[f][6]or iJ.Start.Position;iJ.End={Position=type(p_)~="table"and{p_,0}or p_,Rotation=h[f][7]or iJ.Start.Rotation,Zoom=h[f][8]or iJ.Start.Zoom,Angle=h[f][9]or iJ.Start.Angle}table.insert(self.Briefing[q][pR].Animations,iJ)else iJ.AnimFrames={}for aV=2,#h[f]do table.insert(iJ.AnimFrames,h[f][aV])end end;table.insert(self.Briefing[q][pR].Animations,iJ)end end end;self.Briefing[q].PageAnimation=nil end end;function Lib.BriefingSystem.Global:TransformParallaxes(q)if self.Briefing[q].PageParallax then for g,h in pairs(self.Briefing[q].PageParallax)do local pR=self:GetPageIDByName(q,g)if pR~=0 then self.Briefing[q][pR].Parallax={}self.Briefing[q][pR].Parallax.Clear=h.Clear==true;for f=1,4,1 do if h[f]then local iJ={}iJ.Image=h[f][1]iJ.Interpolation=h[f].Interpolation;iJ.Modulation=h[f].Modulation or 1;iJ.Duration=h[f][2]or 2*60;iJ.AnimData={}for aV=3,#h[f]do table.insert(iJ.AnimData,h[f][aV])end;self.Briefing[q][pR].Parallax[f]=iJ end end end end;self.Briefing[q].PageParallax=nil end end;function Lib.BriefingSystem.Global:NextPage(q)if self.Briefing[q]==nil then return end;self.Briefing[q].CurrentPage=self.Briefing[q].CurrentPage+1;local pR=self.Briefing[q].CurrentPage;if pR==-1 or pR==0 then self:EndBriefing(q)return end;local pN=self.Briefing[q][pR]if type(pN)=="table"then if pR<=#self.Briefing[q]then self.Briefing[q][pR].Started=Logic.GetTime()self.Briefing[q][pR].Duration=pN.Duration or-1;if self.Briefing[q][pR].Action then self.Briefing[q][pR]:Action()end;self:DisplayPage(q,pR)else self:EndBriefing(q)end elseif type(pN)=="number"or type(pN)=="string"then local aE=self:GetPageIDByName(q,self.Briefing[q][pR])self.Briefing[q].CurrentPage=aE-1;self:NextPage(q)else self:EndBriefing(q)end end;function Lib.BriefingSystem.Global:DisplayPage(q,q0)if self.Briefing[q]==nil then return end;local pN=self.Briefing[q][q0]if type(pN)=="table"then local pR=self.Briefing[q].CurrentPage;if pN.MC then for f=1,#pN.MC,1 do if type(pN.MC[f][3])=="function"then self.Briefing[q][pR].MC[f].Visible=pN.MC[f][3](q,pR,f)end end end end;SendReport(Report.BriefingPageShown,q,q0)end;function Lib.BriefingSystem.Global:SkipButtonPressed(q,q0)if not self.Briefing[q]then return end;local pR=self.Briefing[q].CurrentPage;if self.Briefing[q][pR].OnForward then self.Briefing[q][pR]:OnForward()end;self:NextPage(q)end;function Lib.BriefingSystem.Global:OnOptionSelected(q,q1)if self.Briefing[q]==nil then return end;local pR=self.Briefing[q].CurrentPage;if type(self.Briefing[q][pR])~="table"then return end;local pN=self.Briefing[q][pR]if pN.MC then local q2;for f=1,#pN.MC,1 do if pN.MC[f].ID==q1 then q2=pN.MC[f]end end;if q2~=nil then local aE=q2[2]if type(q2[2])=="function"then aE=q2[2](q,pR,q1)end;self.Briefing[q][pR].MC.Selected=q2.ID;self.Briefing[q].CurrentPage=self:GetPageIDByName(q,aE)-1;self:NextPage(q)end end end;function Lib.BriefingSystem.Global:GetCurrentBriefing(q)return self.Briefing[q]end;function Lib.BriefingSystem.Global:GetCurrentBriefingPage(q)if self.Briefing[q]then local pR=self.Briefing[q].CurrentPage;return self.Briefing[q][pR]end end;function Lib.BriefingSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Briefing[q]~=nil then for f=1,#self.Briefing[q],1 do if type(self.Briefing[q][f])=="table"and self.Briefing[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.BriefingSystem.Global:CanStartBriefing(q)return self.Briefing[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.BriefingSystem.Local:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")self:OverrideThroneRoomFunctions()Lib.BriefingSystem.Global=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Local:OnSaveGameLoaded()end;function Lib.BriefingSystem.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then elseif aF==Report.BriefingStarted then self:StartBriefing(arg[1],arg[2],arg[3])elseif aF==Report.BriefingEnded then self:EndBriefing(arg[1],arg[2])elseif aF==Report.BriefingPageShown then self:DisplayPage(arg[1],arg[2])elseif aF==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Local:StartBriefing(q,q3,pG)if GUI.GetPlayerID()~=q then return end;self.Briefing[q]=pG;self.Briefing[q].LastSkipButtonPressed=0;self.Briefing[q].CurrentPage=0;local f6,f7=Camera.RTS_GetLookAtPosition()local pQ=Camera.RTS_GetRotationAngle()local q4=Camera.RTS_GetZoomFactor()local q5=Game.GameTimeGetFactor(q)self.Briefing[q].Backup={Camera={f6,f7,pQ,q4},Speed=q5}DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)end;function Lib.BriefingSystem.Local:EndBriefing(q,q3)if GUI.GetPlayerID()~=q then return end;local pY=self.Briefing[q]if pY.RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,pY.Backup.Speed)end;if pY.RestoreCamera then Camera.RTS_SetLookAtPosition(pY.Backup.Camera[1],pY.Backup.Camera[2])Camera.RTS_SetRotationAngle(pY.Backup.Camera[3])Camera.RTS_SetZoomFactor(pY.Backup.Camera[4])end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Briefing[q]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.BriefingSystem.Local:DisplayPage(q,q0)if GUI.GetPlayerID()~=q then return end;self.Briefing[q].AnimationQueue=self.Briefing[q].AnimationQueue or{}self.Briefing[q].ParallaxLayers=self.Briefing[q].ParallaxLayers or{}self.Briefing[q].CurrentPage=q0;if type(self.Briefing[q][q0])=="table"then self.Briefing[q][q0].Started=Logic.GetTime()self:SetPageFarClipPlane(q,q0)self:DisplayPageBars(q,q0)self:DisplayPageTitle(q,q0)self:DisplayPageText(q,q0)self:DisplayPageControls(q,q0)self:DisplayPageAnimation(q,q0)self:DisplayPageFader(q,q0)self:DisplayPageParallaxes(q,q0)if self.Briefing[q][q0].MC then self:DisplayPageOptionsDialog(q,q0)end end end;function Lib.BriefingSystem.Local:SetPageFarClipPlane(q,q0)ResetRenderDistance()local pN=self.Briefing[q][q0]if pN.FarClipPlane then SetRenderDistance(pN.FarClipPlane)end end;function Lib.BriefingSystem.Local:DisplayPageBars(q,q0)local pN=self.Briefing[q][q0]local q6=pN.BarOpacity~=nil and pN.BarOpacity or 1;local q7=255*q6;local q8=255*q6;local q9=pN.BigBars and 1 or 0;local qa=pN.BigBars and 0 or 1;if q6==0 then q9=0;qa=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",q9)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",qa)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",q9)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",qa)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,q7)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,q7)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,q8)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,q8)end;function Lib.BriefingSystem.Local:DisplayPageTitle(q,q0)local pN=self.Briefing[q][q0]local qb="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(qb,"")if pN.Title then local k1=ConvertPlaceholders(Localize(pN.Title))if k1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then k1=XGUIEng.GetStringTableText(k1)end;if k1:sub(1,1)~="{"then k1="{@color:255,250,0,255}{center}"..k1 end;XGUIEng.SetText(qb,k1)end end;function Lib.BriefingSystem.Local:DisplayPageText(q,q0)local pN=self.Briefing[q][q0]local qc="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(qc,"")if pN.Text then local ba=ConvertPlaceholders(Localize(pN.Text))if ba:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba=XGUIEng.GetStringTableText(ba)end;if ba:sub(1,1)~="{"then ba="{center}"..ba end;if not pN.BigBars then ba="{cr}{cr}{cr}"..ba end;XGUIEng.SetText(qc,ba)end end;function Lib.BriefingSystem.Local:DisplayPageControls(q,q0)local pN=self.Briefing[q][q0]local qd=1;qd=(pN.Duration==nil or pN.Duration==-1)and 1 or 0;if pN.DisableSkipping~=nil then qd=pN.DisableSkipping and 0 or 1 end;if pN.MC~=nil then qd=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",qd)end;function Lib.BriefingSystem.Local:DisplayPageAnimation(q,q0)local pN=self.Briefing[q][q0]if pN.Animations then if pN.Animations.Clear then self.Briefing[q].CurrentAnimation=nil;self.Briefing[q].AnimationQueue={}end;for f=1,#pN.Animations,1 do local qe=table.copy(pN.Animations[f])table.insert(self.Briefing[q].AnimationQueue,qe)end end end;function Lib.BriefingSystem.Local:DisplayPageFader(q,q0)local pN=self.Briefing[q][q0]g_Fade.To=pN.FaderAlpha or 0;local qf=pN.FadeIn;if qf then FadeIn(qf)end;local qg=pN.FadeOut;if qg then self.Briefing[q].FaderJob=RequestHiResJob(function(i5,qh)if Logic.GetTimeMs()>i5-qh*1000 then FadeOut(qh)return true end end,Logic.GetTimeMs()+(pN.Duration or 0)*1000,qg)end end;function Lib.BriefingSystem.Local:DisplayPageParallaxes(q,q0)local pN=self.Briefing[q][q0]if pN.Parallax then if pN.Parallax.Clear then for f=1,#self.ParallaxWidgets do XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)end;self.Briefing[q].ParallaxLayers={}end;for f=1,4,1 do if pN.Parallax[f]then local qe=table.copy(pN.Parallax[f])qe.Started=XGUIEng.GetSystemTime()self.Briefing[q].ParallaxLayers[f]=qe end end end end;function Lib.BriefingSystem.Local:ControlParallaxes(q)if self.Briefing[q].ParallaxLayers then local hZ=XGUIEng.GetSystemTime()for dW,b5 in pairs(self.Briefing[q].ParallaxLayers)do local j1=self.ParallaxWidgets[dW][1]local gT={GUI.GetScreenSize()}local mr=math.min(math.lerp(b5.Started,hZ,b5.Duration),1)if b5.Interpolation then mr=math.min(b5:Interpolation(hZ),1)end;if type(b5.Modulation)=="function"then mr=b5:Modulation(hZ,mr)elseif type(b5.Modulation)=="number"then mr=self:ModulateInterpolationFactor(mr,b5.Modulation)end;mr=math.min(math.max(mr,0),1)local qi=b5.Image;if type(qi)=="function"then qi=b5:Image(mr,b5.Started,hZ,b5.Duration)end;if type(qi)=="table"then local qj=math.min(math.ceil(#qi*mr),#qi)qi=qi[qj]end;local fW,fY,fX,fZ,qk=0,0,1,1,255;if b5.AnimData then local ql=#b5.AnimData;if b5.AnimData[3]and type(b5.AnimData[3])~="table"then fW,fY,fX,fZ,qk=unpack(b5.AnimData)else if#b5.AnimData>=4 then local qm=math.floor(mr*(ql-3))+1;qm=math.min(qm,ql-3)fW,fY,fX,fZ,qk=self:CubicParallaxInterpolation(b5.AnimData[qm],b5.AnimData[qm+1],b5.AnimData[qm+2],b5.AnimData[qm+3],mr)elseif#b5.AnimData>=2 then local qm=math.floor(mr*(ql-1))+1;qm=math.min(qm,ql-1)fW,fY,fX,fZ,qk=self:LinearParallaxInterpolation(b5.AnimData[qm],b5.AnimData[qm+1],mr)end end end;if gT[1]/gT[2]<1.6 then fW=fW+fW/0.125;fX=fX-fX*0.125 end;XGUIEng.SetMaterialAlpha(j1,1,qk or 255)XGUIEng.SetMaterialTexture(j1,1,qi)XGUIEng.SetMaterialUV(j1,1,fW,fY,fX,fZ)end end end;function Lib.BriefingSystem.Local:DisplayPageOptionsDialog(q,q0)local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local qn={GUI.GetScreenSize()}local pN=self.Briefing[q][q0]local qo=XGUIEng.GetWidgetID(j1 .."/ListBox")self.Briefing[q].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(j1)}XGUIEng.ListBoxPopAll(qo)self.Briefing[q].MCSelectionOptionsMap={}for f=1,#pN.MC,1 do if pN.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(qo,pN.MC[f][1])table.insert(self.Briefing[q].MCSelectionOptionsMap,pN.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(qo,0)local qp={XGUIEng.GetWidgetScreenSize(j1)}local qq=math.ceil(qn[1]/2-qp[1]/2)local qr=math.ceil(qn[2]-(qp[2]-10))if pN.Text and pN.Text~=""then qr=math.ceil(qn[2]/2-qp[2]/2)end;XGUIEng.SetWidgetScreenPosition(j1,qq,qr)XGUIEng.PushPage(j1,false)XGUIEng.ShowWidget(j1,1)self.Briefing[q].MCSelectionIsShown=true end;function Lib.BriefingSystem.Local:OnOptionSelected(q)local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local V=self.Briefing[q].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(j1,V[1],V[2])XGUIEng.ShowWidget(j1,0)XGUIEng.PopPage()local lV=XGUIEng.ListBoxGetSelectedIndex(j1 .."/ListBox")+1;local qs=self.Briefing[q].MCSelectionOptionsMap[lV]SendReport(Report.BriefingOptionSelected,q,qs)SendReportToGlobal(Report.BriefingOptionSelected,q,qs)end;function Lib.BriefingSystem.Local:ThroneRoomCameraControl(q,pM)if pM then self:ControlCameraAnimation(q)local qt=type(pM)=="table"and pM.FOV or 42;local qu,qv,qw,qx,qy,qz=0,0,0,0,0,0;local qA=self.Briefing[q].CurrentAnimation;if qA and qA.AnimFrames then if#qA.AnimFrames>=4 then local mr=self:GetInterpolationFactor(q)local ql=#qA.AnimFrames;local qm=math.floor(mr*(ql-3))+1;qm=math.min(qm,#qA.AnimFrames-3)qu,qv,qw,qx,qy,qz=self:CubicInterpolation(qA.AnimFrames[qm],qA.AnimFrames[qm+1],qA.AnimFrames[qm+2],qA.AnimFrames[qm+3],mr)elseif#qA.AnimFrames>=2 then local mr=self:GetInterpolationFactor(q)local ql=#qA.AnimFrames;local qm=math.floor(mr*(ql-1))+1;qm=math.min(qm,#qA.AnimFrames-1)qu,qv,qw,qx,qy,qz=self:LinearInterpolation(qA.AnimFrames[qm],qA.AnimFrames[qm+1],mr)else qu,qv,qw,qx,qy,qz=unpack(qA.AnimFrames[1])end else qu,qv,qw=self:GetPagePosition(q)qx,qy,qz=self:GetPageLookAt(q)if qu and not qx then qx,qy,qz,qu,qv,qw,qt=self:GetCameraProperties(q,qt)end end;Camera.ThroneRoom_SetPosition(qu,qv,qw)Camera.ThroneRoom_SetLookAt(qx,qy,qz)Camera.ThroneRoom_SetFOV(qt)self:ControlParallaxes(q)if self.Briefing[q].MCSelectionIsShown then local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(j1)==0 then self.Briefing[q].MCSelectionIsShown=false;self:OnOptionSelected(q)end end;local qB=Localize(Lib.BriefingSystem.Text.NextButton)local pR=self.Briefing[q].CurrentPage;if pR==#self.Briefing[q]or self.Briefing[q][pR+1]==-1 then qB=Localize(Lib.BriefingSystem.Text.EndButton)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..qB)end end;function Lib.BriefingSystem.Local:ControlCameraAnimation(q)if self.Briefing[q].CurrentAnimation then local hZ=XGUIEng.GetSystemTime()local qe=self.Briefing[q].CurrentAnimation;if hZ>qe.Started+qe.Duration then if#self.Briefing[q].AnimationQueue>0 then self.Briefing[q].CurrentAnimation=nil end end end;if self.Briefing[q].CurrentAnimation==nil then if self.Briefing[q].AnimationQueue and#self.Briefing[q].AnimationQueue>0 then local pR=self.Briefing[q].CurrentPage;local pN=self.Briefing[q][pR]local gO=table.remove(self.Briefing[q].AnimationQueue,1)if pN and pN.Animations and pN.Animations.Repeat then table.insert(self.Briefing[q].AnimationQueue,gO)end;gO.Started=XGUIEng.GetSystemTime()self.Briefing[q].CurrentAnimation=gO end end end;function Lib.BriefingSystem.Local:GetPagePosition(q)local I,J,K=0,0,0;local V,qC;if self.Briefing[q].CurrentAnimation then V=self.Briefing[q].CurrentAnimation.Start.Position;qC=self.Briefing[q].CurrentAnimation.End;I,J,K=self:ConvertPosition(V)if qC then local qD,qE,qF=self:ConvertPosition(qC.Position)if qD and qE and qF then I=I+(qD-I)*self:GetInterpolationFactor(q)J=J+(qE-J)*self:GetInterpolationFactor(q)K=K+(qF-K)*self:GetInterpolationFactor(q)end end end;return I,J,K end;function Lib.BriefingSystem.Local:GetPageLookAt(q)local LookAt,qC;if self.Briefing[q].CurrentAnimation then LookAt=self.Briefing[q].CurrentAnimation.Start.LookAt;qC=self.Briefing[q].CurrentAnimation.End end;local I,J,K=self:ConvertPosition(LookAt)if qC and I then local qD,qE,qF=self:ConvertPosition(qC.LookAt)if qD and qE and qF then I=I+(qD-I)*self:GetInterpolationFactor(q)J=J+(qE-J)*self:GetInterpolationFactor(q)K=K+(qF-K)*self:GetInterpolationFactor(q)end end;return I,J,K end;function Lib.BriefingSystem.Local:ConvertPosition(G)local I,J,K;if G and type(G)=="table"then if G.X then I=G.X;J=G.Y;K=G.Z elseif G[3]then I=G[1]J=G[2]K=G[3]else I,J,K=Logic.EntityGetPos(GetID(G[1]))K=K+(G[2]or 0)end end;return I,J,K end;function Lib.BriefingSystem.Local:GetInterpolationFactor(q)if self.Briefing[q].CurrentAnimation then local hZ=XGUIEng.GetSystemTime()local b5=self.Briefing[q].CurrentAnimation;local mr=1;if b5.Interpolation then mr=b5:Interpolation(hZ)else mr=math.lerp(self.Briefing[q].CurrentAnimation.Started,hZ,self.Briefing[q].CurrentAnimation.Duration)end;if type(b5.Modulation)=="function"then mr=b5:Modulation(hZ,mr)elseif type(b5.Modulation)=="number"then mr=self:ModulateInterpolationFactor(mr,b5.Modulation)end;return math.min(math.max(mr,0),1)end;return 1 end;function Lib.BriefingSystem.Local:ModulateInterpolationFactor(qG,qH)local qI=qH or 1;local cB=qG^qI/(qG^qI+(1-qG)^qI)return math.min(math.max(cB,0),1)end;function Lib.BriefingSystem.Local:LinearInterpolation(L,M,qG)local V={PX=(1-qG)*L[1]+qG*M[1],PY=(1-qG)*L[2]+qG*M[2],PZ=(1-qG)*L[3]+qG*M[3]}local LookAt={LX=(1-qG)*L[4]+qG*M[4],LY=(1-qG)*L[5]+qG*M[5],LZ=(1-qG)*L[6]+qG*M[6]}return V.PX,V.PY,V.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:LinearParallaxInterpolation(qJ,qK,qG)qG=math.max(0,math.min(1,qG))local qL={U0=(1-qG)*qJ[1]+qG*qK[1],V0=(1-qG)*qJ[2]+qG*qK[2],U1=(1-qG)*qJ[3]+qG*qK[3],V1=(1-qG)*qJ[4]+qG*qK[4],A=(1-qG)*qJ[5]+qG*qK[5]}return qL.U0,qL.V0,qL.U1,qL.V1,qL.A end;function Lib.BriefingSystem.Local:CubicInterpolation(L,M,qM,qN,qG)local V={PX=0.5*(2*M[1]+(qM[1]-L[1])*qG+(2*L[1]-5*M[1]+4*qM[1]-qN[1])*qG^2+(3*(M[1]-qM[1])+qN[1]-L[1])*qG^3),PY=0.5*(2*M[2]+(qM[2]-L[2])*qG+(2*L[2]-5*M[2]+4*qM[2]-qN[2])*qG^2+(3*(M[2]-qM[2])+qN[2]-L[2])*qG^3),PZ=0.5*(2*M[3]+(qM[3]-L[3])*qG+(2*L[3]-5*M[3]+4*qM[3]-qN[3])*qG^2+(3*(M[3]-qM[3])+qN[3]-L[3])*qG^3)}local LookAt={LX=0.5*(2*M[1]+(qM[4]-L[4])*qG+(2*L[4]-5*M[4]+4*qM[4]-qN[4])*qG^2+(3*(M[4]-qM[4])+qN[4]-L[4])*qG^3),LY=0.5*(2*M[5]+(qM[5]-L[5])*qG+(2*L[5]-5*M[5]+4*qM[5]-qN[5])*qG^2+(3*(M[5]-qM[5])+qN[5]-L[5])*qG^3),LZ=0.5*(2*M[6]+(qM[6]-L[6])*qG+(2*L[6]-5*M[6]+4*qM[6]-qN[6])*qG^2+(3*(M[6]-qM[6])+qN[6]-L[6])*qG^3)}return V.PX,V.PY,V.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:CubicParallaxInterpolation(qJ,qK,qO,qP,qG)qG=math.max(0,math.min(1,qG))local qL={U0=0.5*(2*qK[1]+(qO[1]-qJ[1])*qG+(2*qJ[1]-5*qK[1]+4*qO[1]-qP[1])*qG^2+(3*(qK[1]-qO[1])+qP[1]-qJ[1])*qG^3),V0=0.5*(2*qK[2]+(qO[2]-qJ[2])*qG+(2*qJ[2]-5*qK[2]+4*qO[2]-qP[2])*qG^2+(3*(qK[2]-qO[2])+qP[2]-qJ[2])*qG^3),U1=0.5*(2*qK[3]+(qO[3]-qJ[3])*qG+(2*qJ[3]-5*qK[3]+4*qO[3]-qP[3])*qG^2+(3*(qK[3]-qO[3])+qP[3]-qJ[3])*qG^3),V1=0.5*(2*qK[4]+(qO[4]-qJ[4])*qG+(2*qJ[4]-5*qK[4]+4*qO[4]-qP[4])*qG^2+(3*(qK[4]-qO[4])+qP[4]-qJ[4])*qG^3),A=0.5*(2*qK[5]+(qO[5]-qJ[5])*qG+(2*qJ[5]-5*qK[5]+4*qO[5]-qP[5])*qG^2+(3*(qK[5]-qO[5])+qP[5]-qJ[5])*qG^3)}return qL.U0,qL.V0,qL.U1,qL.V1,qL.A end;function Lib.BriefingSystem.Local:GetCameraProperties(q,qQ)local qR,qC;if self.Briefing[q].CurrentAnimation then qR=self.Briefing[q].CurrentAnimation.Start;qC=self.Briefing[q].CurrentAnimation.End end;local qS=qR.Position;local qT=qC and qC.Position or qR.Position;local qU=qR.Rotation;local qV=qC and qC.Rotation or qR.Rotation;local qW=qR.Angle;local qX=qC and qC.Angle or qR.Angle;local qY=qR.Zoom;local qZ=qC and qC.Zoom or qR.Zoom;local q_=self:GetInterpolationFactor(q)local r0,r1,r2=self:ConvertPosition(qS)local r3,r4,r5=self:ConvertPosition(qT)local r6=r0+(r3-r0)*q_;local r7=r1+(r4-r1)*q_;local r8=r2+(r5-r2)*q_;local r9=qY+(qZ-qY)*q_;local ra=qW+(qX-qW)*q_;local gF=qU+(qV-qU)*q_;local rb=r9*math.cos(math.rad(ra))local rc=r6+math.cos(math.rad(gF-90))*rb;local rd=r7+math.sin(math.rad(gF-90))*rb;local re=r8+r9*math.sin(math.rad(ra))return r6,r7,r8,rc,rd,re,qQ end;function Lib.BriefingSystem.Local:SkipButtonPressed(q,pM)if not self.Briefing[q]then return end;if self.Briefing[q].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Briefing[q].LastSkipButtonPressed=Logic.GetTimeMs()end end;function Lib.BriefingSystem.Local:GetCurrentBriefing(q)return self.Briefing[q]end;function Lib.BriefingSystem.Local:GetCurrentBriefingPage(q)if self.Briefing[q]then local pR=self.Briefing[q].CurrentPage;return self.Briefing[q][pR]end end;function Lib.BriefingSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Briefing[q]~=nil then for f=1,#self.Briefing[q],1 do if type(self.Briefing[q][f])=="table"and self.Briefing[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.BriefingSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneRoomLeftClick=GameCallback_Camera_ThroneRoomLeftClick;GameCallback_Camera_ThroneRoomLeftClick=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneRoomLeftClick(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingLeftClick,q)SendReport(Report.BriefingLeftClick,q)end end;self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingSkipButtonPressed,q)SendReport(Report.BriefingSkipButtonPressed,q)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local pY=Lib.BriefingSystem.Local:GetCurrentBriefing(q)if pY~=nil then Lib.BriefingSystem.Local:ThroneRoomCameraControl(q,Lib.BriefingSystem.Local:GetCurrentBriefingPage(q))end end end;GameCallback_Escape_Orig_BriefingSystem=GameCallback_Escape;GameCallback_Escape=function()if Lib.BriefingSystem.Local.Briefing[GUI.GetPlayerID()]then return end;GameCallback_Escape_Orig_BriefingSystem()end end;function Lib.BriefingSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local rf,rg=GUI.GetScreenSize()function EndScreen_ExitGame()end;function MissionFadeInEndScreen()end;for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],1)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],1)XGUIEng.PushPage(self.ParallaxWidgets[f][2],false)XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)XGUIEng.SetMaterialUV(self.ParallaxWidgets[f][1],1,0,0,1,1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo",false)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo/LeftFrame",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local I,J=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",I,65*rg/1080)XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Objectives",2,0,2000,20)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.SetText("/InGame/ThroneRoom/KnightInfo/Text"," ")XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Text",200,300,1000,10)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Briefing[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Briefing[q].EnableSky then Display.SetRenderSky(1)end;if not self.Briefing[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.BriefingSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",1)for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],0)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],0)XGUIEng.PopPage()end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)ResetRenderDistance()end;function Lib.BriefingSystem.Local:IsChangingGraphicsPermited()return self.Config.DoAlternateGraphics==true end;function Lib.BriefingSystem.Local:RequestAlternateGraphics()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.BriefingSystem.Text.Request.Title,Lib.BriefingSystem.Text.Request.Text,function(iH)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=iH==true end,false)end;RegisterModule(Lib.BriefingSystem.Name)Lib.Register("module/information/CutsceneSystem_Behavior")function Reprisal_Cutscene(r,rh)return B_Reprisal_Cutscene:new(r,rh)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(b2,b3)if b2==0 then self.CutsceneName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Cutscene:CustomFunction(b1)_G[self.Function](self.CutsceneName,b1.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(b1)if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Cutscene)function Reward_Cutscene(r,rh)return B_Reward_Cutscene:new(r,rh)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Cutscene)function Trigger_Cutscene(r,q,dt)return B_Trigger_Cutscene:new(r,q,dt)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(b2,b3)if b2==0 then self.CutsceneName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Cutscene:CustomFunction(b1)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Cutscene)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/CutsceneSystem_API")function StartCutscene(rh,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(rh)=="table","Cutscene must be a table!")assert(#rh>0,"Cutscene does not contain pages!")for f=1,#rh do assert(type(rh[f])~="table"or rh[f].__Legit,"A page is not initialized!")end;if rh.EnableSky==nil then rh.EnableSky=true end;if rh.EnableFoW==nil then rh.EnableFoW=false end;if rh.EnableGlobalImmortality==nil then rh.EnableGlobalImmortality=true end;if rh.EnableBorderPins==nil then rh.EnableBorderPins=false end;Lib.CutsceneSystem.Global:StartCutscene(r,n,rh)end;API.StartCutscene=StartCutscene;function RequestCutsceneAlternateGraphics()if not GUI then ExecuteLocal("RequestCutsceneAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestCutsceneAlternateGraphics=RequestCutsceneAlternateGraphics;function IsCutsceneActive(q)if not IsLocalScript()then return Lib.CutsceneSystem.Global:GetCurrentCutscene(q)~=nil end;return Lib.CutsceneSystem.Local:GetCurrentCutscene(q)~=nil end;API.IsCutsceneActive=IsCutsceneActive;function AddCutscenePages(rh)Lib.CutsceneSystem.Global:CreateCutsceneGetPage(rh)Lib.CutsceneSystem.Global:CreateCutsceneAddPage(rh)local AP=function(pM)return rh:AddPage(pM)end;return AP end;API.AddCutscenePages=AddCutscenePages;function AP(gy)assert(false)end;Lib.Register("module/information/CutsceneSystem_Text")Lib.CutsceneSystem.Text={FastForwardActivate={de="Beschleunigen",en="Fast Forward",fr="Accélérer"},FastForwardDeactivate={de="Zurücksetzen",en="Normal Speed",fr="Réinitialiser"},FastFormardMessage={de="SCHNELLER VORLAUF",en="FAST FORWARD",fr="AVANCÉ RAPIDE"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.CutsceneSystem=Lib.CutsceneSystem or{}Lib.CutsceneSystem.Name="CutsceneSystem"Lib.CutsceneSystem.Global={Cutscene={},CutsceneQueue={},CutsceneCounter=0}Lib.CutsceneSystem.Local={Config={DoAlternateGraphics=true},Cutscene={}}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/CutsceneSystem_Text")Lib.Require("module/information/CutsceneSystem_API")Lib.Require("module/information/CutsceneSystem_Behavior")Lib.Register("module/information/CutsceneSystem")CinematicEventTypes.Cutscene=3;function Lib.CutsceneSystem.Global:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")for f=1,8 do self.CutsceneQueue[f]={}end;RequestHiResJob(function()Lib.CutsceneSystem.Global:UpdateQueue()end)Lib.CutsceneSystem.Local=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Global:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then elseif aF==Report.CutsceneStarted then elseif aF==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aF==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aF==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aF==Report.CutsceneSkipButtonPressed then SendReportToLocal(Report.CutsceneSkipButtonPressed,arg[1])elseif aF==Report.CutscenePageShown then SendReportToLocal(Report.CutscenePageShown,arg[1],arg[2],arg[3])end end;function Lib.CutsceneSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartCutscene(f)then local gO=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if gO and gO[1]==CinematicEventTypes.Cutscene then self:NextCutscene(f)end end end end;function Lib.CutsceneSystem.Global:CreateCutsceneGetPage(rh)rh.GetPage=function(self,q,pS)local an=Lib.CutsceneSystem.Global:GetPageIDByName(q,pS)return Lib.CutsceneSystem.Global.Cutscene[q][an]end end;function Lib.CutsceneSystem.Global:CreateCutsceneAddPage(rh)rh.AddPage=function(self,pM)if type(pM)=="table"then pM.__Legit=true;pM.Title=Localize(pM.Title)if pM.Text then pM.Text=Localize(pM.Text)end;if pM.Lines then pM.Lines=Localize(pM.Lines)end;if not pM.Lines and not pM.Text then assert(false,"Missing Lines or Text attribute!")return end;if pM.BigBars==nil then pM.BigBars=false end end;table.insert(rh,pM)return pM end end;function Lib.CutsceneSystem.Global:StartCutscene(r,q,gy)self.CutsceneQueue[q]=self.CutsceneQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Cutscene,r,gy)end;function Lib.CutsceneSystem.Global:EndCutscene(q)Logic.SetGlobalInvulnerability(0)SendReportToLocal(Report.CutsceneEnded,q)if self.Cutscene[q].Finished then self.Cutscene[q]:Finished()end;FinishCinematicEvent(self.Cutscene[q].Name,q)self.Cutscene[q]=nil end;function Lib.CutsceneSystem.Global:NextCutscene(q)if self:CanStartCutscene(q)then local ri=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(ri[1]==CinematicEventTypes.Cutscene)StartCinematicEvent(ri[2],q)local rj=ri[3]rj.Name=ri[2]rj.PlayerID=q;rj.BarOpacity=rj.BarOpacity or 1;rj.CurrentPage=0;self.Cutscene[q]=rj;if rj.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Cutscene[q].Starting then self.Cutscene[q]:Starting()end;SendReportToLocal(Report.CutsceneStarted,q,rj.Name,rj)SendReport(Report.CutsceneStarted,q,rj.Name)end end;function Lib.CutsceneSystem.Global:StartCutsceneFlight(q,q0,rk)if self.Cutscene[q]==nil then return end;self.Cutscene[q][q0].Duration=rk;if self.Cutscene[q][q0].Action then self.Cutscene[q][q0]:Action()end;SendReportToLocal(Report.CutsceneFlightStarted,q,q0,rk)end;function Lib.CutsceneSystem.Global:EndCutsceneFlight(q,q0)if self.Cutscene[q]==nil then return end;SendReportToLocal(Report.CutsceneFlightEnded,q,q0)end;function Lib.CutsceneSystem.Global:DisplayPage(q,q0)if self.Cutscene[q]==nil then return end;SendReportToLocal(Report.CutscenePageShown,q,q0)end;function Lib.CutsceneSystem.Global:GetCurrentCutscene(q)return self.Cutscene[q]end;function Lib.CutsceneSystem.Global:GetCurrentCutscenePage(q)if self.Cutscene[q]then local pR=self.Cutscene[q].CurrentPage;return self.Cutscene[q][pR]end end;function Lib.CutsceneSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Cutscene[q]~=nil then for f=1,#self.Cutscene[q],1 do if type(self.Cutscene[q][f])=="table"and self.Cutscene[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.CutsceneSystem.Global:CanStartCutscene(q)return self.Cutscene[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.CutsceneSystem.Local:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")self:OverrideThroneRoomFunctions()Lib.CutsceneSystem.Global=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Local:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then elseif aF==Report.CutsceneStarted then self:StartCutscene(arg[1],arg[2],arg[3])elseif aF==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aF==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aF==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aF==Report.CutsceneSkipButtonPressed then self:SkipButtonPressed(arg[1])elseif aF==Report.CutscenePageShown then end end;function Lib.CutsceneSystem.Local:StartCutscene(q,rl,rh)if GUI.GetPlayerID()~=q then return end;self.Cutscene[q]=rh;self.Cutscene[q].LastSkipButtonPressed=0;self.Cutscene[q].CurrentPage=0;DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)self:NextFlight(q)end;function Lib.CutsceneSystem.Local:EndCutscene(q)if GUI.GetPlayerID()~=q then return end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Cutscene[q]=nil end;function Lib.CutsceneSystem.Local:NextFlight(q)if self.Cutscene[q]then self.Cutscene[q].CurrentPage=self.Cutscene[q].CurrentPage+1;local pR=self.Cutscene[q].CurrentPage;if self.Cutscene[q][pR]then local rm=self.Cutscene[q][pR].Flight;if Camera.IsValidCutscene(rm)then if GUI.GetPlayerID()==q then Camera.StartCutscene(rm)end else error("Lib.CutsceneSystem.Local:NextFlight: %s is an invalid flight!",tostring(rm))self:PropagateCutsceneEnded(q)end else self:PropagateCutsceneEnded(q)end end end;function Lib.CutsceneSystem.Local:PropagateCutsceneEnded(q)if not self.Cutscene[q]then return end;SendReportToGlobal(Report.CutsceneEnded,q)end;function Lib.CutsceneSystem.Local:FlightStarted(rk)local n=GUI.GetPlayerID()if self.Cutscene[n]then local pR=self.Cutscene[n].CurrentPage;local pN=self.Cutscene[n][pR]if pN.FarClipPlane then SetRenderDistance(pN.FarClipPlane)end;SendReportToGlobal(Report.CutsceneFlightStarted,n,pR,rk)end end;CutsceneFlightStarted=function(rk)Lib.CutsceneSystem.Local:FlightStarted(rk)end;function Lib.CutsceneSystem.Local:StartCutsceneFlight(q,q0,rk)if self.Cutscene[q]==nil then return end;self:DisplayPage(q,q0,rk)end;function Lib.CutsceneSystem.Local:FlightFinished()local n=GUI.GetPlayerID()if self.Cutscene[n]then local pR=self.Cutscene[n].CurrentPage;SendReportToGlobal(Report.CutsceneFlightEnded,n,pR)end end;CutsceneFlightFinished=function()Lib.CutsceneSystem.Local:FlightFinished()end;function Lib.CutsceneSystem.Local:EndCutsceneFlight(q,q0)if self.Cutscene[q]==nil then return end;self:NextFlight(q)end;function Lib.CutsceneSystem.Local:DisplayPage(q,q0,rk)if GUI.GetPlayerID()~=q then return end;self.Cutscene[q].AnimationQueue=self.Cutscene[q].AnimationQueue or{}self.Cutscene[q].CurrentPage=q0;if type(self.Cutscene[q][q0])=="table"then self.Cutscene[q][q0].Started=Logic.GetTime()self.Cutscene[q][q0].Duration=rk;ResetRenderDistance()self:DisplayPageBars(q,q0)self:DisplayPageTitle(q,q0)self:DisplayPageText(q,q0)self:DisplayPageControls(q,q0)self:DisplayPageFader(q,q0)SendReportToGlobal(Report.CutscenePageShown,q,q0,rk)end end;function Lib.CutsceneSystem.Local:DisplayPageBars(q,q0)local pN=self.Cutscene[q][q0]local q6=pN.Opacity~=nil and pN.Opacity or 1;local q7=255*q6;local q8=255*q6;local q9=pN.BigBars and 1 or 0;local qa=pN.BigBars and 0 or 1;if q6==0 then q9=0;qa=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",q9)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",qa)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",q9)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",qa)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,q7)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,q7)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,q8)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,q8)end;function Lib.CutsceneSystem.Local:DisplayPageTitle(q,q0)local pN=self.Cutscene[q][q0]local qb="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(qb,"")if pN.Title then local k1=ConvertPlaceholders(Localize(pN.Title))if k1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then k1=XGUIEng.GetStringTableText(k1)end;if k1:sub(1,1)~="{"then k1="{@color:255,250,0,255}{center}"..k1 end;XGUIEng.SetText(qb,k1)end end;function Lib.CutsceneSystem.Local:DisplayPageText(q,q0)local pN=self.Cutscene[q][q0]local qc="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(qc,"Bockwurst")if pN.Text then local ba=ConvertPlaceholders(Localize(pN.Text))if ba:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ba=XGUIEng.GetStringTableText(ba)end;if ba:sub(1,1)~="{"then ba="{center}"..ba end;if not pN.BigBars then ba="{cr}{cr}{cr}"..ba end;XGUIEng.SetText(qc,ba)end end;function Lib.CutsceneSystem.Local:DisplayPageControls(q,q0)local pN=self.Cutscene[q][q0]local qd=1;if pN.DisableSkipping==true then self.Cutscene[q].FastForward=false;Game.GameTimeSetFactor(q,1)qd=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",qd)end;function Lib.CutsceneSystem.Local:DisplayPageFader(q,q0)local pN=self.Cutscene[q][q0]g_Fade.To=pN.FaderAlpha or 0;local qf=pN.FadeIn;if qf then FadeIn(qf)end;local qg=pN.FadeOut;if qg then self.Cutscene[q].FaderJob=RequestHiResJob(function(i5,qh)if Logic.GetTimeMs()>i5-qh*1000 then FadeOut(qh)return true end end,pN.Started*1000+pN.Duration*100,qg)end end;function Lib.CutsceneSystem.Local:ThroneRoomCameraControl(q,pM)if pM then if pM.DisableSkipping then XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")return end;local qB=Localize(Lib.CutsceneSystem.Text.FastForwardActivate)if self.Cutscene[q].FastForward then qB=Localize(Lib.CutsceneSystem.Text.FastForwardDeactivate)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..qB)if self.Cutscene[q].FastForward then local rn=GetSecondsRealTime()if not self.Cutscene[q].FastForwardRealTime then self.Cutscene[q].FastForwardRealTime=rn end;if self.Cutscene[q].FastForwardRealTime<rn then self.Cutscene[q].FastForwardIndent=(self.Cutscene[q].FastForwardIndent or 0)+1;if self.Cutscene[q].FastForwardIndent>4 then self.Cutscene[q].FastForwardIndent=1 end;self.Cutscene[q].FastForwardRealTime=rn end;local ba="{cr}{cr}"..Localize(Lib.CutsceneSystem.Text.FastFormardMessage)local ro=string.rep("  ",self.Cutscene[q].FastForwardIndent or 0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",ba..ro..". . .")else XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")end end end;function Lib.CutsceneSystem.Local:SkipButtonPressed(q)if self.Cutscene[q]==nil then return end;if self.Cutscene[q].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Cutscene[q].LastSkipButtonPressed=Logic.GetTimeMs()if not Framework.IsNetworkGame()then if self.Cutscene[q].FastForward then self.Cutscene[q].FastForward=false;Game.GameTimeSetFactor(q,1)else self.Cutscene[q].FastForward=true;Game.GameTimeSetFactor(q,10)end end end end;function Lib.CutsceneSystem.Local:GetCurrentCutscene(q)return self.Cutscene[q]end;function Lib.CutsceneSystem.Local:GetCurrentCutscenePage(q)if self.Cutscene[q]then local pR=self.Cutscene[q].CurrentPage;return self.Cutscene[q][pR]end end;function Lib.CutsceneSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Cutscene[q]~=nil then for f=1,#self.Cutscene[q],1 do if type(self.Cutscene[q][f])=="table"and self.Cutscene[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.CutsceneSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(q)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.CutsceneSkipButtonPressed,q)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local rj=Lib.CutsceneSystem.Local:GetCurrentCutscene(q)if rj~=nil then Lib.CutsceneSystem.Local:ThroneRoomCameraControl(q,Lib.CutsceneSystem.Local:GetCurrentCutscenePage(q))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.CutsceneSystem.Local.Cutscene[GUI.GetPlayerID()]then return end;Lib.CutsceneSystem.Local.Orig_GameCallback_Escape()end end;function Lib.CutsceneSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local rf,rg=GUI.GetScreenSize()XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Cutscene",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/LeftFrame",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local I,J=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",I,65*rg/1080)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Cutscene[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Cutscene[q].EnableSky then Display.SetRenderSky(1)end;if not self.Cutscene[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=1;SetFaderAlpha(1)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.CutsceneSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")ResetRenderDistance()end;function Lib.CutsceneSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.CutsceneSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.CutsceneSystem.Text.Request.Title,Lib.CutsceneSystem.Text.Request.Text,function(iH)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=iH==true end,false)end;RegisterModule(Lib.CutsceneSystem.Name)Lib.Register("module/information/DialogSystem_Behavior")function Reprisal_Dialog(r,rp)return B_Reprisal_Dialog:new(r,rp)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(b2,b3)if b2==0 then self.DialogName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Dialog:CustomFunction(b1)_G[self.Function](self.DialogName,b1.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(b1)if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Dialog)function Reward_Dialog(r,rp)return B_Reward_Dialog:new(r,rp)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Dialog)function Trigger_Dialog(r,q,dt)return B_Trigger_Dialog:new(r,q,dt)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(b2,b3)if b2==0 then self.DialogName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Dialog:CustomFunction(b1)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Dialog)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/DialogSystem_API")function StartDialog(rp,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(rp)=="table","Dialog must be a table!")assert(#rp>0,"Dialog does not contain pages!")for f=1,#rp do assert(type(rp[f])~="table"or rp[f].__Legit,"Page is not initialized!")end;if rp.EnableSky==nil then rp.EnableSky=true end;if rp.EnableFoW==nil then rp.EnableFoW=false end;if rp.EnableGlobalImmortality==nil then rp.EnableGlobalImmortality=true end;if rp.EnableBorderPins==nil then rp.EnableBorderPins=false end;if rp.RestoreGameSpeed==nil then rp.RestoreGameSpeed=true end;if rp.RestoreCamera==nil then rp.RestoreCamera=true end;Lib.DialogSystem.Global:StartDialog(r,n,rp)end;API.StartDialog=StartDialog;function RequestDialogAlternateGraphics()if not GUI then ExecuteLocal("RequestDialogAlternateGraphics()")return end;Lib.DialogSystem.Local:RequestAlternateGraphics()end;API.RequestDialogAlternateGraphics=RequestDialogAlternateGraphics;function IsDialogActive(q)if not IsLocalScript()then return Lib.DialogSystem.Global:GetCurrentDialog(q)~=nil end;return Lib.DialogSystem.Local:GetCurrentDialog(q)~=nil end;API.IsDialogActive=IsDialogActive;function AddDialogPages(rp)Lib.DialogSystem.Global:CreateDialogGetPage(rp)Lib.DialogSystem.Global:CreateDialogAddPage(rp)Lib.DialogSystem.Global:CreateDialogAddMCPage(rp)Lib.DialogSystem.Global:CreateDialogAddRedirect(rp)local AP=function(pM)local pN;if type(pM)=="table"then if pM.MC then pN=rp:AddMCPage(pM)else pN=rp:AddPage(pM)end else pN=rp:AddRedirect(pM)end;return pN end;local ASP=function(...)if type(arg[1])~="number"then Name=table.remove(arg,1)end;local bK=table.remove(arg,1)local V=table.remove(arg,1)local k1=table.remove(arg,1)local ba=table.remove(arg,1)local rq=table.remove(arg,1)local iF;if type(arg[1])=="function"then iF=table.remove(arg,1)end;return rp:AddPage{Name=Name,Title=k1,Text=ba,Actor=bK,Target=V,DialogCamera=rq==true,Action=iF}end;return AP,ASP end;API.AddDialogPages=AddDialogPages;function AP(gy)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/DialogSystem_Text")Lib.DialogSystem.Text={Continue={de="{cr}{cr}{azure}Weiter mit ESC",en="{cr}{cr}{azure}Continue with ESC",fr="{cr}{cr}{azure}Continuer avec ESC"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.DialogSystem=Lib.DialogSystem or{}Lib.DialogSystem.Name="DialogSystem"Lib.DialogSystem.Global={Dialog={},DialogQueue={},DialogCounter=0}Lib.DialogSystem.Local={Config={DoAlternateGraphics=true},Dialog={}}CONST_DIALOG={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/DialogSystem_Text")Lib.Require("module/information/DialogSystem_API")Lib.Require("module/information/DialogSystem_Behavior")Lib.Register("module/information/DialogSystem")CinematicEventTypes.Dialog=5;function Lib.DialogSystem.Global:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")for f=1,8 do self.DialogQueue[f]={}end;RequestHiResJob(function()Lib.DialogSystem.Global:UpdateQueue()Lib.DialogSystem.Global:DialogExecutionController()end)Lib.DialogSystem.Local=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Global:OnSaveGameLoaded()end;function Lib.DialogSystem.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then self:SkipButtonPressed(arg[1])elseif aF==Report.DialogStarted then self:NextPage(arg[1])elseif aF==Report.DialogEnded then elseif aF==Report.DialogPageShown then elseif aF==Report.DialogOptionSelected then self:OnOptionSelected(arg[1],arg[2])end end;function Lib.DialogSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartDialog(f)then local gO=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if gO and gO[1]==CinematicEventTypes.Dialog then self:NextDialog(f)end end end end;function Lib.DialogSystem.Global:DialogExecutionController()for f=1,8 do if self.Dialog[f]then local pR=self.Dialog[f].CurrentPage;local pN=self.Dialog[f][pR]if pN and not pN.MC and pN.Duration>0 and pN.AutoSkip then if pN.Started+pN.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.DialogSystem.Global:CreateDialogGetPage(rp)rp.GetPage=function(self,pS)local an=Lib.DialogSystem.Global:GetPageIDByName(rp.PlayerID,pS)return Lib.DialogSystem.Global.Dialog[rp.PlayerID][an]end end;function Lib.DialogSystem.Global:CreateDialogAddPage(rp)rp.AddPage=function(self,pM)self.Length=(self.Length or 0)+1;local pT="Page"..#self+1;if pM.Name then pT=pM.Name else pM.Name=pT end;pM.__Legit=true;pM.Text=Localize(pM.Text or"")pM.AutoSkip=false;if pM.Duration then if pM.Duration==-1 then pM.Duration=string.len(pM.Text or"")*CONST_DIALOG.TIMER_PER_CHAR;pM.Duration=pM.Duration<6 and 6 or pM.Duration<6 end;pM.AutoSkip=pM.Duration>0 end;if not pM.Rotation then pM.Rotation=CONST_DIALOG.CAMERA_ROTATIONDEFAULT;if pM.DialogCamera then pM.Rotation=CONST_DIALOG.DLGCAMERA_ROTATIONDEFAULT end;if pM.Position and type(pM.Position)~="table"then local an=GetID(pM.Position)local W=Logic.GetEntityOrientation(an)+90;pM.Rotation=W elseif pM.Target then local an=GetID(pM.Target)local W=Logic.GetEntityOrientation(an)+90;pM.Rotation=W end end;if not pM.Distance then pM.Distance=CONST_DIALOG.CAMERA_ZOOMDEFAULT;if pM.DialogCamera then pM.Distance=CONST_DIALOG.DLGCAMERA_ZOOMDEFAULT end end;if not pM.Angle then pM.Angle=CONST_DIALOG.CAMERA_ANGLEDEFAULT;if pM.DialogCamera then pM.Angle=CONST_DIALOG.DLGCAMERA_ANGLEDEFAULT end end;pM.GetSelected=function(self)return 0 end;table.insert(self,pM)return pM end end;function Lib.DialogSystem.Global:CreateDialogAddMCPage(rp)rp.AddMCPage=function(self,pM)local pN=self:AddPage(pM)if pN.MC then for f=1,#pN.MC do pN.MC[f][1]=Localize(pN.MC[f][1])pN.MC[f].ID=pN.MC[f].ID or f end;pN.AutoSkip=false;pN.Duration=-1 end;pN.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;return pN end end;function Lib.DialogSystem.Global:CreateDialogAddRedirect(rp)rp.AddRedirect=function(self,S)self.Length=(self.Length or 0)+1;local pN=S==nil and-1 or S;table.insert(self,pN)return pN end end;function Lib.DialogSystem.Global:StartDialog(r,q,gy)self.DialogQueue[q]=self.DialogQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Dialog,r,gy)end;function Lib.DialogSystem.Global:EndDialog(q)Logic.SetGlobalInvulnerability(0)ExecuteLocal([[Lib.DialogSystem.Local:ResetTimerButtons(%d);
          Camera.RTS_FollowEntity(0);]],q)SendReport(Report.DialogEnded,q,self.Dialog[q].Name)SendReportToLocal(Report.DialogEnded,q,self.Dialog[q].Name,self.Dialog[q])if self.Dialog[q].Finished then self.Dialog[q]:Finished()end;FinishCinematicEvent(self.Dialog[q].Name,q)self.Dialog[q]=nil end;function Lib.DialogSystem.Global:NextDialog(q)if self:CanStartDialog(q)then local rr=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(rr[1]==CinematicEventTypes.Dialog)StartCinematicEvent(rr[2],q)local rq=rr[3]rq.Name=rr[2]rq.PlayerID=q;rq.LastSkipButtonPressed=0;rq.CurrentPage=0;self.Dialog[q]=rq;if rq.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Dialog[q].Starting then self.Dialog[q]:Starting()end;SendReportToLocal(Report.DialogStarted,q,self.Dialog[q].Name,self.Dialog[q])SendReport(Report.DialogStarted,q,self.Dialog[q].Name)end end;function Lib.DialogSystem.Global:NextPage(q)if self.Dialog[q]==nil then return end;self.Dialog[q].CurrentPage=self.Dialog[q].CurrentPage+1;local pR=self.Dialog[q].CurrentPage;if pR==-1 or pR==0 then self:EndDialog(q)return end;local pN=self.Dialog[q][pR]if type(pN)=="table"then if pR<=#self.Dialog[q]then self.Dialog[q][pR].Started=Logic.GetTime()self.Dialog[q][pR].Duration=pN.Duration or-1;if self.Dialog[q][pR].Action then self.Dialog[q][pR]:Action()end;self:DisplayPage(q,pR)else self:EndDialog(q)end elseif type(pN)=="number"or type(pN)=="string"then local aE=self:GetPageIDByName(q,self.Dialog[q][pR])self.Dialog[q].CurrentPage=aE-1;self:NextPage(q)else self:EndDialog(q)end end;function Lib.DialogSystem.Global:DisplayPage(q,q0)if self.Dialog[q]==nil then return end;local pN=self.Dialog[q][q0]if type(pN)=="table"then local pR=self.Dialog[q].CurrentPage;if pN.MC then for f=1,#pN.MC,1 do if type(pN.MC[f][3])=="function"then self.Dialog[q][pR].MC[f].Visible=pN.MC[f][3](q,pR,f)end end end end;SendReport(Report.DialogPageShown,q,q0)SendReportToLocal(Report.DialogPageShown,q,q0,pN)end;function Lib.DialogSystem.Global:SkipButtonPressed(q,q0)if not self.Dialog[q]then return end;if self.Dialog[q].LastSkipButtonPressed+500>Logic.GetTimeMs()then return end;local pR=self.Dialog[q].CurrentPage;if self.Dialog[q][pR].AutoSkip or self.Dialog[q][pR].MC then return end;if self.Dialog[q][pR].OnForward then self.Dialog[q][pR]:OnForward()end;self.Dialog[q].LastSkipButtonPressed=Logic.GetTimeMs()self:NextPage(q)end;function Lib.DialogSystem.Global:OnOptionSelected(q,q1)if self.Dialog[q]==nil then return end;local pR=self.Dialog[q].CurrentPage;if type(self.Dialog[q][pR])~="table"then return end;local pN=self.Dialog[q][pR]if pN.MC then local q2;for f=1,#pN.MC,1 do if pN.MC[f].ID==q1 then q2=pN.MC[f]end end;if q2~=nil then local aE=q2[2]if type(q2[2])=="function"then aE=q2[2](q,pR,q1)end;self.Dialog[q][pR].MC.Selected=q2.ID;self.Dialog[q].CurrentPage=self:GetPageIDByName(q,aE)-1;self:NextPage(q)end end end;function Lib.DialogSystem.Global:GetCurrentDialog(q)return self.Dialog[q]end;function Lib.DialogSystem.Global:GetCurrentDialogPage(q)if self.Dialog[q]then local pR=self.Dialog[q].CurrentPage;return self.Dialog[q][pR]end end;function Lib.DialogSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Dialog[q]~=nil then for f=1,#self.Dialog[q],1 do if type(self.Dialog[q][f])=="table"and self.Dialog[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.DialogSystem.Global:CanStartDialog(q)return self.Dialog[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.DialogSystem.Local:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")self:OverrideThroneRoomFunctions()Lib.DialogSystem.Global=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Local:OnSaveGameLoaded()end;function Lib.DialogSystem.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.EscapePressed then elseif aF==Report.DialogStarted then self:StartDialog(arg[1],arg[2],arg[3])elseif aF==Report.DialogEnded then self:EndDialog(arg[1],arg[2],arg[3])elseif aF==Report.DialogPageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.DialogSystem.Local:StartDialog(q,rs,rp)if GUI.GetPlayerID()~=q then return end;self.Dialog[q]=rp;self.Dialog[q].CurrentPage=0;local f6,f7=Camera.RTS_GetLookAtPosition()local pQ=Camera.RTS_GetRotationAngle()local q4=Camera.RTS_GetZoomFactor()local q5=Game.GameTimeGetFactor(q)local rt,ru=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/AlignBottomLeft/SubTitles")self.Dialog[q].Backup={SubTitles={rt,ru},Camera={f6,f7,pQ,q4},Speed=q5}DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)end;function Lib.DialogSystem.Local:EndDialog(q,rs,rp)if GUI.GetPlayerID()~=q then return end;if self.Dialog[q].RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,self.Dialog[q].Backup.Speed)end;if self.Dialog[q].RestoreCamera then Camera.RTS_SetLookAtPosition(self.Dialog[q].Backup.Camera[1],self.Dialog[q].Backup.Camera[2])Camera.RTS_SetRotationAngle(self.Dialog[q].Backup.Camera[3])Camera.RTS_SetZoomFactor(self.Dialog[q].Backup.Camera[4])end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Dialog[q]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.DialogSystem.Local:DisplayPage(q,q0,rv)if GUI.GetPlayerID()~=q then return end;self.Dialog[q][q0]=rv;self.Dialog[q].CurrentPage=q0;if type(self.Dialog[q][q0])=="table"then self.Dialog[q][q0].Started=Logic.GetTime()self:DisplayPageFader(q,q0)self:DisplayPagePosition(q,q0)self:DisplayPageActor(q,q0)self:DisplayPageTitle(q,q0)self:DisplayPageText(q,q0)if self.Dialog[q][q0].MC then self:DisplayPageOptionsDialog(q,q0)end end end;function Lib.DialogSystem.Local:DisplayPagePosition(q,q0)local pN=self.Dialog[q][q0]Camera.RTS_FollowEntity(0)if pN.Position then local V=pN.Position;if type(V)~="table"then V=GetPosition(pN.Position)end;Camera.RTS_SetLookAtPosition(V.X,V.Y)elseif pN.Target then Camera.RTS_FollowEntity(GetID(pN.Target))else assert(false)end;Camera.RTS_SetRotationAngle(pN.Rotation)Camera.RTS_SetZoomFactor(pN.Distance/18000)Camera.RTS_SetZoomAngle(pN.Angle)end;function Lib.DialogSystem.Local:DisplayPageFader(q,q0)local pN=self.Dialog[q][q0]g_Fade.To=pN.FaderAlpha or 0;local qf=pN.FadeIn;if qf then FadeIn(qf)end;local qg=pN.FadeOut;if qg then self.Dialog[q].FaderJob=RequestHiResJob(function(i5,qh)if Logic.GetTimeMs()>i5-qh*1000 then FadeOut(qh)return true end end,Logic.GetTimeMs()+(pN.Duration or 0)*1000,qg)end end;function Lib.DialogSystem.Local:DisplayPageActor(q,q0)local rw="/InGame/Root/Normal/AlignBottomLeft/Message"XGUIEng.ShowWidget(rw,1)XGUIEng.ShowAllSubWidgets(rw,1)XGUIEng.ShowWidget(rw.."/QuestLog",0)XGUIEng.ShowWidget(rw.."/Update",0)local pN=self.Dialog[q][q0]if not pN.Actor or pN.Actor==-1 then XGUIEng.ShowWidget(rw,0)return end;local rx=self:GetPageActor(q,q0)self:DisplayActorPortrait(q,rx)end;function Lib.DialogSystem.Local:GetPageActor(q,q0)local rx=g_PlayerPortrait[q]local pN=self.Dialog[q][q0]if type(pN.Actor)=="string"then rx=pN.Actor elseif type(pN.Actor)=="number"then rx=g_PlayerPortrait[pN.Actor]end;if not Models["Heads_"..tostring(rx)]then rx="H_NPC_Generic_Trader"end;return rx end;function Lib.DialogSystem.Local:DisplayPageTitle(q,q0)local rw="/InGame/Root/Normal/AlignBottomLeft/Message"local pN=self.Dialog[q][q0]if pN.Title then local k1=ConvertPlaceholders(Localize(pN.Title))if k1:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then k1=XGUIEng.GetStringTableText(k1)end;if k1:sub(1,1)~="{"then k1="{center}"..k1 end;XGUIEng.SetText(rw.."/MessagePortrait/PlayerName",k1)XGUIEng.ShowWidget(rw.."/MessagePortrait/PlayerName",1)else XGUIEng.ShowWidget(rw.."/MessagePortrait/PlayerName",0)end end;function Lib.DialogSystem.Local:DisplayPageText(q,q0)self:ResetSubtitlesPosition(q)local pN=self.Dialog[q][q0]local ry="/InGame/Root/Normal/AlignBottomLeft/SubTitles"if not pN or not pN.Text or pN.Text==""then XGUIEng.SetText(ry.."/VoiceText1"," ")XGUIEng.ShowWidget(ry,0)return end;XGUIEng.ShowWidget(ry,1)XGUIEng.ShowWidget(ry.."/Update",0)XGUIEng.ShowWidget(ry.."/VoiceText1",1)XGUIEng.ShowWidget(ry.."/BG",1)local ba=ConvertPlaceholders(Localize(pN.Text))local rz=""if not pN.AutoSkip and not pN.MC then rz=ConvertPlaceholders(Localize(Lib.DialogSystem.Text.Continue))end;XGUIEng.SetText(ry.."/VoiceText1",ba..rz)self:SetSubtitlesPosition(q,q0)end;function Lib.DialogSystem.Local:SetSubtitlesPosition(q,q0)local pN=self.Dialog[q][q0]local iV="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local gc=XGUIEng.GetTextHeight(iV.."/VoiceText1",true)local gd,ge=XGUIEng.GetWidgetSize(iV.."/VoiceText1")local ej,ek=XGUIEng.GetWidgetLocalPosition(iV)if pN.Actor then XGUIEng.SetWidgetSize(iV.."/BG",gd+10,gc+120)ek=675-gc;XGUIEng.SetWidgetLocalPosition(iV,ej,ek)else XGUIEng.SetWidgetSize(iV.."/BG",gd+10,gc+35)ek=1115-gc;XGUIEng.SetWidgetLocalPosition(iV,46,ek)end end;function Lib.DialogSystem.Local:ResetSubtitlesPosition(q)local V=self.Dialog[q].Backup.SubTitles;local rA="/InGame/Root/Normal/AlignBottomLeft/SubTitles"XGUIEng.SetWidgetLocalPosition(rA,V[1],V[2])end;function Lib.DialogSystem.Local:ResetTimerButtons(q)if GUI.GetPlayerID()~=q then return end;if not g_Interaction.TimerQuests then return end;local rB="/InGame/Root/Normal/AlignTopLeft/QuestTimers/"for f=1,6 do local rC=rB..f.."/TimerButton"local rD=g_Interaction.TimerQuests[f]if rD~=nil then local bF=Quests[rD]if g_Interaction.CurrentMessageQuestIndex==rD and not QuestLog.IsQuestLogShown()then g_Interaction.CurrentMessageQuestIndex=nil;g_VoiceMessageIsRunning=false;g_VoiceMessageEndTime=nil;XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget(QuestLog.Widget.Main,0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)XGUIEng.HighLightButton(rC,0)end;if bF then self:DisplayActorPortrait(bF.SendingPlayer)end end end end;function Lib.DialogSystem.Local:DisplayActorPortrait(q,rE)local rw="/InGame/Root/Normal/AlignBottomLeft/Message"local rx=g_PlayerPortrait[q]if rE then if not Models["Heads_"..tostring(rE)]then rE="H_NPC_Generic_Trader"end;rx=rE end;XGUIEng.ShowWidget(rw.."/MessagePortrait",1)XGUIEng.ShowWidget(rw.."/QuestObjectives",0)SetPortraitWithCameraSettings(rw.."/MessagePortrait/3DPortraitFaceFX",rx)GUI.PortraitWidgetSetRegister(rw.."/MessagePortrait/3DPortraitFaceFX","Mood_Friendly",1,2,0)GUI.PortraitWidgetSetRegister(rw.."/MessagePortrait/3DPortraitFaceFX","Mood_Angry",1,2,0)end;function Lib.DialogSystem.Local:DisplayPageOptionsDialog(q,q0)local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local qn={GUI.GetScreenSize()}local pN=self.Dialog[q][q0]local qo=XGUIEng.GetWidgetID(j1 .."/ListBox")self.Dialog[q].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(j1)}XGUIEng.ListBoxPopAll(qo)self.Dialog[q].MCSelectionOptionsMap={}for f=1,#pN.MC,1 do if pN.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(qo,pN.MC[f][1])table.insert(self.Dialog[q].MCSelectionOptionsMap,pN.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(qo,0)local rF={XGUIEng.GetWidgetScreenSize(j1)}local rG=math.ceil(qn[1]*0.05+rF[1]/2)local rH=math.ceil(qn[2]-(rF[2]+60*qn[2]/540))if not pN.Actor then rG=15*qn[1]/960;rH=math.ceil(qn[2]-(rF[2]+0*qn[2]/540))end;XGUIEng.SetWidgetScreenPosition(j1,rG,rH)XGUIEng.PushPage(j1,false)XGUIEng.ShowWidget(j1,1)if not pN.Actor then local qc="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local rI,rJ=XGUIEng.GetWidgetLocalPosition(qc)XGUIEng.SetWidgetLocalPosition(qc,rI,rJ-220)end;self.Dialog[q].MCSelectionIsShown=true end;function Lib.DialogSystem.Local:OnOptionSelected(q)local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local V=self.Dialog[q].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(j1,V[1],V[2])XGUIEng.ShowWidget(j1,0)XGUIEng.PopPage()local lV=XGUIEng.ListBoxGetSelectedIndex(j1 .."/ListBox")+1;local qs=self.Dialog[q].MCSelectionOptionsMap[lV]SendReport(Report.DialogOptionSelected,q,qs)SendReportToGlobal(Report.DialogOptionSelected,q,qs)end;function Lib.DialogSystem.Local:ThroneRoomCameraControl(q,pM)if pM then if self.Dialog[q].MCSelectionIsShown then local j1="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(j1)==0 then self.Dialog[q].MCSelectionIsShown=false;self:OnOptionSelected(q)end end end end;function Lib.DialogSystem.Local:ConvertPosition(G)local V=G;if type(V)~="table"then V=GetPosition(G)end;return V.X,V.Y,V.Z end;function Lib.DialogSystem.Local:GetCurrentDialog(q)return self.Dialog[q]end;function Lib.DialogSystem.Local:GetCurrentDialogPage(q)if self.Dialog[q]then local pR=self.Dialog[q].CurrentPage;return self.Dialog[q][pR]end end;function Lib.DialogSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Dialog[q]~=nil then for f=1,#self.Dialog[q],1 do if type(self.Dialog[q][f])=="table"and self.Dialog[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.DialogSystem.Local:IsAnyCinematicEventActive(q)for g,h in pairs(Lib.UIEffects.Local.CinematicEventStatus[q])do if h==1 then return true end end;return false end;function Lib.DialogSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.DialogSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local rq=Lib.DialogSystem.Local:GetCurrentDialog(q)if rq~=nil then Lib.DialogSystem.Local:ThroneRoomCameraControl(q,Lib.DialogSystem.Local:GetCurrentDialogPage(q))end end end end;function Lib.DialogSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main",1)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/Main",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Objectives"," ")self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Dialog[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Dialog[q].EnableSky then Display.SetRenderSky(1)end;if not self.Dialog[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(0)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.DialogSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/SubTitles/VoiceText1"," ")XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)ResetRenderDistance()self:ResetSubtitlesPosition(q)end;function Lib.DialogSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.DialogSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.DialogSystem.Text.Request.Title,Lib.DialogSystem.Text.Request.Text,function(iH)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=iH==true end,false)end;RegisterModule(Lib.DialogSystem.Name)Lib.Register("module/city/LifestockSystem_Text")Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Text={CattleStarved={de="Eure Kühe sind verhungert!",en="Your cows have starved to death!",fr="Tes vaches sont mortes de faim !"},SheepStarved={de="Eure Schafe sind verhungert!",en="Your sheep have starved to death!",fr="Vos moutons sont morts de faim!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/LifestockSystem_API")function SetCattleBreedingParameters(gy)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(gy)=="table","Malformed data passed!")local rK=gy.BasePrice or 300;local rL=gy.GrainCost or 10;local rM=gy.GrainUpkeep or 1;local rN=gy.FeedingTimer or 0;local rO=gy.StarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.CattleBasePrice = %d]],rK)Lib.LifestockSystem.Global.CattleBasePrice=rK;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Cow] = %d]],rL)MerchantSystem.BasePrices[Goods.G_Cow]=rK;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainCost = %d]],rL)Lib.LifestockSystem.Global.CattleGrainCost=rL;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainUpkeep = %d]],rM)Lib.LifestockSystem.Global.CattleGrainUpkeep=rM;ExecuteLocal([[Lib.LifestockSystem.Global.CattleFeedingTimer = %d]],rN)Lib.LifestockSystem.Global.CattleFeedingTimer=rN;ExecuteLocal([[Lib.LifestockSystem.Global.CattleStarveChance = %d]],rO)Lib.LifestockSystem.Global.CattleStarveChance=rO end;API.SetCattleBreedingParameters=SetCattleBreedingParameters;function SetSheepBreedingParameters(gy)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(gy)=="table","Malformed data passed!")local rP=gy.SheepBasePrice or 300;local rQ=gy.SheepGrainCost or 10;local rR=gy.SheepGrainUpkeep or 1;local rS=gy.SheepFeedingTimer or 0;local rT=gy.SheepStarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.SheepBasePrice = %d]],rP)Lib.LifestockSystem.Global.SheepBasePrice=rP;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Sheep] = %d]],rP)MerchantSystem.BasePrices[Goods.G_Sheep]=rP;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainCost = %d]],rQ)Lib.LifestockSystem.Global.SheepGrainCost=rQ;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainUpkeep = %d]],rR)Lib.LifestockSystem.Global.SheepGrainUpkeep=rR;ExecuteLocal([[Lib.LifestockSystem.Global.SheepFeedingTimer = %d]],rS)Lib.LifestockSystem.Global.SheepFeedingTimer=rS;ExecuteLocal([[Lib.LifestockSystem.Global.SheepStarveChance = %d]],rT)Lib.LifestockSystem.Global.SheepStarveChance=rT end;API.SetSheepBreedingParameters=SetSheepBreedingParameters;function RequireTitleToBreedCattle(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_Cattle)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Cattle,0)end end;API.RequireTitleToBreedCattle=RequireTitleToBreedCattle;function RequireTitleToBreedSheep(fy)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],fy)table.insert(NeedsAndRightsByKnightTitle[fy][4],1,Technologies.R_Sheep)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Sheep,0)end end;API.RequireTitleToBreedSheep=RequireTitleToBreedSheep;Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Name="LifestockSystem"Lib.LifestockSystem.Global={CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleStaved="",SheepStarved=""}}Lib.LifestockSystem.Local={BuyLock=false,CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleTitle="",CattleDescription="",CattleDisabled="",SheepTitle="",SheepDescription="",SheepDisabled=""}}Lib.LifestockSystem.Shared={TechnologyConfig={{"R_Cattle",{de="Kühe züchten",en="Breeding Cows",fr="Vaches reproductrices"},{3,16,0},0},{"R_Sheep",{de="Schafe züchten",en="Breeding Sheeps",fr="Moutons reproducteurs"},{4,1,0},0}}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/ui/UIBuilding")Lib.Require("module/faker/Technology")Lib.Require("module/city/Promotion")Lib.Require("module/city/LifestockSystem_API")Lib.Require("module/city/LifestockSystem_Text")Lib.Register("module/city/LifestockSystem")function Lib.LifestockSystem.Global:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()RequestJob(function()Lib.LifestockSystem.Global:ControlFeeding()Lib.LifestockSystem.Global:ControlDecay()end)Lib.LifestockSystem.Local=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Global:OnSaveGameLoaded()end;function Lib.LifestockSystem.Global:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.LanguageChanged then self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)elseif aF==Report.BreedAnimalClicked then Lib.LifestockSystem.Global:BuyAnimal(arg[1],arg[2],arg[3])end end;function Lib.LifestockSystem.Global:BuyAnimal(b2,q,hu)local rU=b2=="Cattle"and Entities.A_X_Cow01 or Entities.A_X_Sheep01;local rV=self[b2 .."GrainCost"]if GetPlayerResources(Goods.G_Grain,q)<rV then return end;local I,J=Logic.GetBuildingApproachPosition(hu)local B=Logic.CreateEntity(rU,I,J,0,q)AddGood(Goods.G_Grain,-1*rV,q)SendReport(Report[b2 .."Bought"],q,B,hu)SendReportToLocal(Report[b2 .."Bought"],q,B,hu)end;function Lib.LifestockSystem.Global:ControlFeeding()for n=1,8 do if Logic.PlayerGetIsHumanFlag(n)then local rW=self.CattleFeedingTimer;local rX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}if rW>0 then local rY=math.max(rW*(1-0.03*#rX),15)if#rX>0 and Logic.GetTime()%math.floor(rY)==0 then local rZ=self.CattleGrainUpkeep;local r_=GetPlayerResources(Goods.G_Grain,n)if r_<rZ then local s0=false;for g,h in pairs(rX)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,750,1)if IsExisting(oG)and math.random(1,100)<=self.CattleStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.CattleStarved,n,h)SendReport(Report.CattleStarved,n,h)s0=true end end;if s0 then local ba=Localize(self.Text.CattleStarved)AddMessage(ba)end else AddGood(Goods.G_Grain,-1*rZ,n)end end end;local s1=self.SheepFeedingTimer;local oy={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}if s1>0 then local rY=math.max(s1*(1-0.03*#oy),15)if#oy>0 and Logic.GetTime()%math.floor(rY)==0 then local rZ=self.SheepGrainUpkeep;local r_=GetPlayerResources(Goods.G_Grain,n)if r_<rZ then local s0=false;for g,h in pairs(oy)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,750,1)if IsExisting(oG)and math.random(1,100)<=self.SheepStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.SheepStarved,n,h)SendReport(Report.SheepStarved,n,h)end end;if s0 then local ba=Localize(self.Text.SheepStarved)AddMessage(ba)end else AddGood(Goods.G_Grain,-1*rZ,n)end end end end end end;function Lib.LifestockSystem.Global:ControlDecay()if Logic.GetTime()%10==0 then local oF=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(oF)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,900,1)if IsExisting(oG)then local cj=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cj-1)end end;local oH=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(oH)do local I,J,K=Logic.EntityGetPos(h)local Z,oG=Logic.GetEntitiesInArea(Entities.B_SheepPasture,I,J,900,1)if IsExisting(oG)then local cj=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cj-1)end end end end;function Lib.LifestockSystem.Local:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleTitle=XGUIEng.GetStringTableText("Names/A_X_Cow01")self.Text.CattleDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Cow")self.Text.CattleDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")self.Text.SheepTitle=XGUIEng.GetStringTableText("Names/A_X_Sheep01")self.Text.SheepDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Sheep")self.Text.SheepDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()self:InitBuyCowButton()self:InitBuySheepButton()Lib.LifestockSystem.Global=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Local:OnSaveGameLoaded()end;function Lib.LifestockSystem.Local:OnReportReceived(aF,...)if aF==Report.LoadingFinished then self.LoadscreenClosed=true elseif aF==Report.CattleBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end elseif aF==Report.SheepBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end end end;function Lib.LifestockSystem.Local:BuyAnimalAction(b2,fv,ap)local rV=self[b2 .."GrainCost"]local n=Logic.EntityGetPlayer(ap)if GetPlayerResources(Goods.G_Grain,n)<rV then local ba=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")Message(ba)return end;self.BuyLock=true;SendReportToGlobal(Report.BreedAnimalClicked,b2,n,ap)SendReport(Report.BreedAnimalClicked,b2,n,ap)end;function Lib.LifestockSystem.Local:BuyAnimalTooltip(b2,fv,ap)local k1=self.Text[b2 .."Title"]local ba=self.Text[b2 .."Description"]local kF=""local rV=self[b2 .."GrainCost"]local n=Logic.EntityGetPlayer(ap)local s2=b2=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;if Logic.TechnologyGetState(n,s2)==0 then local b8=GUI_Tooltip.GetDisabledKeyForTechnologyType(s2)kF=GetStringText("UI_ButtonDisabled/"..b8)elseif XGUIEng.IsButtonDisabled(fv)==1 then kF=self.Text[b2 .."Disabled"]end;SetTooltipCosts(k1,ba,kF,{Goods.G_Grain,rV},true)end;function Lib.LifestockSystem.Local:BuyAnimalUpdate(b2,fv,ap)local n=Logic.EntityGetPlayer(ap)local s2=b2=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;local s3=Logic.GetEntityType(ap)local s4=Logic.TechnologyGetState(n,s2)local jV=b2=="Cattle"and{3,16}or{4,1}local s5=0;local s6=GetPlayerEntities(n,s3)local oA={Logic.GetPlayerEntitiesInCategory(n,EntityCategories[b2 .."Pasture"])}if s4~=TechnologyStates.Unlocked and s4~=TechnologyStates.Researched or self.BuyLock or#s6*5<=#oA then jV=b2=="Cattle"and{4,2}or{4,3}s5=1 end;XGUIEng.DisableButton(fv,s5)SetIcon(fv,jV)end;function Lib.LifestockSystem.Local:InitBuyCowButton()local V={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_CattlePasture,V[1],V[2],function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalAction("Cattle",fv,ap)end,function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalTooltip("Cattle",fv,ap)end,function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalUpdate("Cattle",fv,ap)end)end;function Lib.LifestockSystem.Local:InitBuySheepButton()local V={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_SheepPasture,V[1],V[2],function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalAction("Sheep",fv,ap)end,function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalTooltip("Sheep",fv,ap)end,function(fv,ap)Lib.LifestockSystem.Local:BuyAnimalUpdate("Sheep",fv,ap)end)end;function Lib.LifestockSystem.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for aV=1,8 do Logic.TechnologySetState(aV,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.LifestockSystem.Name)Lib.Register("core/QSB")ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local aS=g_QuestBehaviorTypes[f]if not _G["B_"..aS.Name].new then _G["B_"..aS.Name].new=function(self,...)local aT={...}local aU=table.copy(self)aU.i47ya_6aghw_frxil={}aU.v12ya_gg56h_al125={}for aV=1,#aT,1 do table.insert(aU.v12ya_gg56h_al125,aT[aV])if self.Parameter and self.Parameter[aV]~=nil then aU:AddParameter(aV-1,aT[aV])else table.insert(aU.i47ya_6aghw_frxil,aT[aV])end end;return aU end end end end;function RegisterBehavior(aW)if GUI~=nil then return end;if type(aW)~="table"or aW.Name==nil then assert(false,"Behavior is invalid!")return end;if aW.RequiresExtraNo and aW.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..aW.Name]then error(string.format("Behavior %s does not exist!",aW.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==aW.Name then return end end;table.insert(g_QuestBehaviorTypes,aW)end;if not MapEditor and GUI then return end;Lib.Register("core/Core_Behavior")function Reward_DEBUG(aX,aY,aZ,a_,b0)return B_Reward_DEBUG:new(aX,aY,aZ,a_,b0)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(b1)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(b2,b3)if b2==0 then self.DisplayScriptErrors=ToBoolean(b3)elseif b2==1 then self.CheckWhileRuntime=ToBoolean(b3)elseif b2==2 then self.DevelopingCheats=ToBoolean(b3)elseif b2==3 then self.DevelopingShell=ToBoolean(b3)elseif b2==4 then self.UseQuestTrace=ToBoolean(b3)end end;function B_Reward_DEBUG:CustomFunction(b1)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(b2)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,b4,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 elseif b2==2 then self.OverrideTarget=tonumber(b3)elseif b2==3 then self.IgnoreCapture=ToBoolean(b3)end end;function B_Goal_Deliver:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then table.insert(b5,"-")for f=1,8 do table.insert(b5,f)end elseif b2==3 then table.insert(b5,"true")table.insert(b5,"false")else assert(false)end;return b5 end;function B_Goal_Deliver:GetMsgKey()local b4=Logic.GetGoodTypeID(self.GoodTypeName)local b6=Logic.GetGoodCategoryForGoodType(b4)local b7={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if b6 then local b8=b7[b6]if b8 then return b8 end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(b1)local b9=self:GetDiplomacyMapping()local s=GetPlayerName(self.PlayerID)or""local ba=string.format(Localize(self.TextPattern),Localize(b9[self.DiplState]),s)Lib.Core.Quest:ChangeCustomQuestCaptionText(ba,b1)end;function B_Goal_Diplomacy:CustomFunction(b1)self:ChangeCaption(b1)if self.Relation=="<="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Relation=b3 elseif b2==2 then self.DiplState=DiplomacyStates[b3]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(b2)if b2==1 then return{">=","<=","=="}elseif b2==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local aE=Logic.GetHeadquarters(self.PlayerID)if not aE or aE==0 then aE=Logic.GetStoreHouse(self.PlayerID)end;assert(aE and aE~=0)return{Objective.Steal,1,{aE}}end;function B_Goal_StealInformation:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local bb=GetPlayerCategoryType(self.PlayerID)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local an=GetID(self.ScriptName)if an and an~=0 then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1;self.DestroyTypeAmount=self.Amount elseif b2==2 then self.PlayerID=b3*1 end end;function B_Goal_DestroyType:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then for f=0,8 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Goal_DestroyType:GetMsgKey()local an=self.EntityName;if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(b2,b3)if b2==0 then self.Entity1=b3 elseif b2==1 then self.Entity2=b3 elseif b2==2 then self.bRelSmallerThan=b3=="<"elseif b2==3 then self.Distance=b3*1 end end;function B_Goal_EntityDistance:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local au=GetID(self.Entity1)local ay=GetID(self.Entity2)local bc=Logic.CheckEntitiesDistance(au,ay,self.Distance)if self.bRelSmallerThan and bc or not self.bRelSmallerThan and not bc then return true end end;function B_Goal_EntityDistance:GetCustomData(b2)local b5={}if b2==2 then table.insert(b5,">")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_EntityDistance:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,b1.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(b2,b3)if b2==0 then self.Target=b3 elseif b2==1 then if b3==nil or b3==""then b3=0 end;self.Distance=b3*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(b3)end elseif b2==1 then self.PlayerID=tonumber(b3)*1 elseif b2==2 then self.Category=b3 elseif b2==3 then self.bRelSmallerThan=tostring(b3)=="true"or tostring(b3)=="<"elseif b2==4 then self.NumberOfUnits=b3*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(b1)local bd=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#bd>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#bd<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(be,q,bf)local bd={}local bg={}if q==-1 then for f=0,8 do local bh=0;repeat bg={Logic.GetEntitiesOfCategoryInTerritory(be,f,q,bh)}bd=Array_Append(bd,bg)bh=bh+#bg until#bg==0 end else local bh=0;repeat bg={Logic.GetEntitiesOfCategoryInTerritory(be,q,bf,bh)}bd=Array_Append(bd,bg)bh=bh+#bg until#bg==0 end;return bd end;function B_Goal_UnitsOnTerritory:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,-1)for f=1,8 do table.insert(b5,f)end elseif b2==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(b5,g)end end;table.sort(b5)elseif b2==3 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_UnitsOnTerritory:Debug(b1)local bi={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(bi,self.TerritoryID)then debug(false,b1.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,b1.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.BuffName=b3;self.Buff=Buffs[b3]end end;function B_Goal_ActivateBuff:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local b7=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then b7=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,b7)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(b7[self.BuffName])),b1)end;local bj=Logic.GetBuff(self.PlayerID,self.Buff)if bj and bj~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(b2)local b5={}if b2==1 then b5={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(b5,"Buff_Gems")table.insert(b5,"Buff_MusicalInstrument")table.insert(b5,"Buff_Olibanum")end;table.sort(b5)else assert(false)end;return b5 end;function B_Goal_ActivateBuff:GetIcon()local b7={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then b7[Buffs.Buff_Gems]="Goods.G_Gems"b7[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"b7[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return b7[self.Buff]end;function B_Goal_ActivateBuff:Debug(b1)if not self.Buff then debug(false,b1.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(b2,b3)if b2==0 then self.Entity1=b3 elseif b2==1 then self.Entity2=b3 elseif b2==2 then self.bRoadsOnly=ToBoolean(b3)end end;function B_Goal_BuildRoad:GetCustomData(b2)local b5;if b2==2 then b5={"true","false"}end;return b5 end;function B_Goal_BuildRoad:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.EntityName1=b3 elseif b2==2 then self.EntityName2=b3 end end;function B_Goal_BuildWall:CustomFunction(b1)local bk=GetID(self.EntityName1)local bl=GetID(self.EntityName2)if not IsExisting(bk)then return false end;if not IsExisting(bl)then return false end;local I,J,K=Logic.EntityGetPos(bk)if Logic.IsBuilding(bk)==1 then I,J=Logic.GetBuildingApproachPosition(bk)end;local bm=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)local I,J,K=Logic.EntityGetPos(bl)if Logic.IsBuilding(bl)==1 then I,J=Logic.GetBuildingApproachPosition(bl)end;local bn=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)if bm~=bn then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(b1)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then debug(false,b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(false,b1.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(b2,b3)if b2==0 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(b2,b3)if b2==0 then self.TerritoriesToClaim=b3*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 elseif b2==2 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,b4,self.GoodAmount}end;function B_Goal_Produce:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,b4,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 elseif b2==2 then self.bRelSmallerThan=b3=="<"or tostring(b3)=="true"end end;function B_Goal_GoodAmount:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Need=b3 end end;function B_Goal_SatisfyNeed:GetMsgKey()local b7={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local b8=b7[Needs[self.Need]]if b8 then return b8 end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(b2,b3)if b2==0 then self.SettlersAmount=b3*1 elseif b2==1 then self.PlayerID=b3*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(b2,b3)if b2==0 then self.SpousesAmount=b3*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.bRelSmallerThan=tostring(b3)=="true"or tostring(b3)=="<"elseif b2==2 then self.NumberOfUnits=b3*1 end end;function B_Goal_SoldierCount:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local bo=tostring(self.bRelSmallerThan)local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),s,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[bo]),self.NumberOfUnits),b1)end;local bp=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and bp<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and bp>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(b1)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(b2,b3)if b2==0 then self.KnightTitle=b3 end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(b2)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(b2,b3)if b2==0 then self.PlayerID=tonumber(b3)else assert(b2==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(b3)end end;function B_Goal_Festivals:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),s,self.NeededFestivals),b1)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local bq={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local br=0;for g=2,#bq do local bs=bq[g]if Logic.GetIndexOnOutStockByGoodType(bs,Goods.G_Beer)~=-1 then local bt=Logic.GetAmountOnOutStockByGoodType(bs,Goods.G_Beer)br=br+bt end end;if not self.FestivalStarted and br>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif br==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then debug(false,b1.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_Capture:GetMsgKey()local an=GetID(self.ScriptName)if Logic.IsEntityAlive(an)then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 elseif b2==2 then self.PlayerID=b3*1 end end;function B_Goal_CaptureType:GetCustomData(b2)local b5={}if b2==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then for f=0,8 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Goal_CaptureType:GetMsgKey()local an=self.EntityName;if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local an=GetID(self.ScriptName)if an and an~=0 then an=Logic.GetEntityType(an)if an and an~=0 then if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.SpecialBuilding)==1 then local b7={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local bb=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.bRelSmallerThan=b3=="<"elseif b2==2 then self.Amount=b3*1 end end;function B_Goal_ResourceAmount:CustomFunction(b1)local an=GetID(self.ScriptName)if an and an~=0 and Logic.GetResourceDoodadGoodType(an)~=0 then local bu=Logic.GetResourceDoodadGoodAmount(an)if self.bRelSmallerThan and bu<self.Amount or not self.bRelSmallerThan and bu>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,">=")table.insert(b5,"<")else assert(false)end;return b5 end;function B_Goal_ResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then debug(false,b1.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Goal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Goal_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Relation=b3 elseif b2==2 then local bv=tonumber(b3)self.Value=bv==nil and tostring(b3)or bv end end;function B_Goal_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if bw==bx then return true end elseif self.Relation=="~="then if bw==bx then return true end elseif self.Relation=="<"then if bw<bx then return true end elseif self.Relation=="<="then if bw<=bx then return true end elseif self.Relation==">="then if bw>=bx then return true end else if bw>bx then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(b2)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(b1)local by={"==","~=","<=","<",">",">="}local bz={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(by,self.Relation)then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Goal_TributeDiplomacy(...)return B_Goal_TributeDiplomacy:new(...)end;B_Goal_TributeDiplomacy={Name="Goal_TributeDiplomacy",Description={en="Goal: AI requests periodical tribute for better Diplomacy",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer bessere Diplomatie. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour une meilleure diplomatie. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Time till next peyment in seconds",de="Zeit bis zur Forderung in Sekunden",fr="Temps jusqu'à la demande en secondes"},{ParameterType.Number,en="Time to pay tribute in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Custom,en="Restart if failed to pay",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeDiplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeDiplomacy:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.PeriodLength=b3*1 elseif b2==2 then self.TributTime=b3*1 elseif b2==3 then self.StartMsg=b3 elseif b2==4 then self.SuccessMsg=b3 elseif b2==5 then self.FailureMsg=b3 elseif b2==6 then self.RestartAtFailure=ToBoolean(b3)end end;function B_Goal_TributeDiplomacy:GetTributeQuest(b1)if not self.InternTributeQuest then local bA=CONST_LANGUAGE;local bB=self.StartMsg;if type(bB)=="table"then bB=bB[bA]end;local bC=self.SuccessMsg;if type(bC)=="table"then bC=bC[bA]end;local bD=self.FailureMsg;if type(bD)=="table"then bD=bD[bA]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bE,bF=QuestTemplate:New(b1.Identifier.."_TributeDiplomacyQuest_"..Lib.Core.Quest.QuestCounter,b1.SendingPlayer,b1.ReceivingPlayer,{{Objective.Deliver,{Goods.G_Gold,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,nil,nil,true,true,nil,bB,bC,bD)self.InternTributeQuest=bF end end;function B_Goal_TributeDiplomacy:CheckTributeQuest(b1)if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Over and not self.RestartQuest then if self.InternTributeQuest.Result~=QuestResult.Success then SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.Enemy)if not self.RestartAtFailure then return false end else SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.TradeContact)end;self.RestartQuest=true;self.Time=Logic.GetTime()end end;function B_Goal_TributeDiplomacy:CheckTributePlayer(b1)local bG=Logic.GetStoreHouse(b1.SendingPlayer)if bG==0 or Logic.IsEntityDestroyed(bG)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeDiplomacy:TributQuestRestarter(b1)if self.InternTributeQuest and self.Time and self.RestartQuest and Logic.GetTime()-self.Time>=self.PeriodLength then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)self.RestartQuest=nil end end;function B_Goal_TributeDiplomacy:CustomFunction(b1)self:GetTributeQuest(b1)if self:CheckTributeQuest(b1)==false then return false end;if self:CheckTributePlayer(b1)==true then return true end;self:TributQuestRestarter(b1)end;function B_Goal_TributeDiplomacy:Debug(b1)if self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": Amount is negative!")return true end;if self.PeriodLength<self.TributTime then debug(false,b1.Identifier..": "..self.Name..": TributTime too long!")return true end end;function B_Goal_TributeDiplomacy:Reset(b1)self.Time=nil;self.InternTributeQuest=nil;self.RestartQuest=nil end;function B_Goal_TributeDiplomacy:Interrupt(b1)if self.InternTributeQuest~=nil then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeDiplomacy:GetCustomData(b2)if b2==6 then return{"true","false"}end end;RegisterBehavior(B_Goal_TributeDiplomacy)function Goal_TributeClaim(...)return B_Goal_TributeClaim:new(...)end;B_Goal_TributeClaim={Name="Goal_TributeClaim",Description={en="Goal: AI requests periodical tribute for a specified territory. The quest sender is the demanding player.",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer ein Territorium. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour un territoire. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Good Type",de="Warentyp",fr="Type de biens"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Length of Period in seconds",de="Sekunden bis zur nächsten Forderung",fr="secondes jusqu'à la prochaine demande"},{ParameterType.Number,en="Time to pay Tribut in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Number,en="How often to pay (0 = forerver)",de="Anzahl der Tributquests (0 = unendlich)",fr="Nombre de quêtes de tribut (0 = infini)"},{ParameterType.Custom,en="Other Owner cancels the Quest",de="Anderer Spieler kann Quest beenden",fr="Un autre joueur peut terminer une quête"},{ParameterType.Custom,en="About if a rate is not payed",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeClaim:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeClaim:AddParameter(b2,b3)if b2==0 then if type(b3)=="string"then b3=GetTerritoryIDByName(b3)end;self.TerritoryID=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.GoodType=Goods[b3 or"G_Gold"]elseif b2==3 then self.Amount=b3*1 elseif b2==4 then self.PeriodLength=b3*1 elseif b2==5 then self.TributTime=b3*1 elseif b2==6 then self.StartMsg=b3 elseif b2==7 then self.SuccessMsg=b3 elseif b2==8 then self.FailureMsg=b3 elseif b2==9 then self.HowOften=b3*1 elseif b2==10 then self.OtherOwnerCancels=ToBoolean(b3)elseif b2==11 then self.DontPayCancels=ToBoolean(b3)end end;function B_Goal_TributeClaim:CureOutpost(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(bH)and GetHealth(bH)<25 and Logic.IsBuildingBeingKnockedDown(bH)==false then while Logic.GetEntityHealth(bH)<Logic.GetEntityMaxHealth(bH)*0.6 do Logic.HealEntity(bH,1)end end end;function B_Goal_TributeClaim:RestartTributeQuest(b1)if self.InternTributeQuest then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)end end;function B_Goal_TributeClaim:CreateTributeQuest(b1)if not self.InternTributeQuest then local bA=CONST_LANGUAGE;local bB=self.StartMsg;if type(bB)=="table"then bB=bB[bA]end;local bC=self.SuccessMsg;if type(bC)=="table"then bC=bC[bA]end;local bD=self.FailureMsg;if type(bD)=="table"then bD=bD[bA]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bI=function()self.Time=Logic.GetTime()end;local bE,bF=QuestTemplate:New(b1.Identifier.."_TributeClaimQuest"..Lib.Core.Quest.QuestCounter,self.PlayerID,b1.ReceivingPlayer,{{Objective.Deliver,{self.GoodType,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,bI,nil,true,true,nil,bB,bC,bD)self.InternTributeQuest=bF end end;function B_Goal_TributeClaim:OnTributeFailed(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(bH)then Logic.ChangeEntityPlayerID(bH,self.PlayerID)end;Logic.SetTerritoryPlayerID(self.TerritoryID,self.PlayerID)self.InternTributeQuest.State=false;self.Time=nil;if self.DontPayCancels then b1:Interrupt()end end;function B_Goal_TributeClaim:OnTributePaid(b1)local bH=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if self.InternTributeQuest.Result==QuestResult.Success then if Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if IsExisting(bH)then Logic.ChangeEntityPlayerID(bH,b1.ReceivingPlayer)end;Logic.SetTerritoryPlayerID(self.TerritoryID,b1.ReceivingPlayer)end end;if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then if self.HowOften and self.HowOften~=0 then self.TributeCounter=(self.TributeCounter or 0)+1;if self.TributeCounter>=self.HowOften then return false end end;self:RestartTributeQuest()self.Time=nil end end;function B_Goal_TributeClaim:CustomFunction(b1)self:CreateTributeQuest(b1)self:CureOutpost(b1)if Logic.GetTerritoryPlayerID(self.TerritoryID)==b1.ReceivingPlayer or Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if self.OtherOwner then self:RestartTributeQuest()self.OtherOwner=nil end;if self.InternTributeQuest.State==QuestState.Over then if self.InternTributeQuest.Result==QuestResult.Failure then self:OnTributeFailed(b1)else self:OnTributePaid(b1)end elseif self.InternTributeQuest.State==false then if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then self:RestartTributeQuest(b1)end end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)==0 and self.InternTributeQuest then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)~=self.PlayerID then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;if self.OtherOwnerCancels then b1:Interrupt()end;self.OtherOwner=true end;local bG=Logic.GetStoreHouse(self.PlayerID)if bG==0 or Logic.IsEntityDestroyed(bG)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeClaim:Debug(b1)if self.TerritoryID==0 then debug(false,b1.Identifier..": "..self.Name..": Unknown Territory")return true end;if not self.Quest and Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end;if self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": Amount is negative")return true end;if self.PeriodLength<self.TributTime or self.PeriodLength<1 then debug(false,b1.Identifier..": "..self.Name..": Period Length is wrong")return true end;if self.HowOften<0 then debug(false,b1.Identifier..": "..self.Name..": HowOften is negative")return true end end;function B_Goal_TributeClaim:Reset(b1)self.InternTributeQuest=nil;self.Time=nil;self.OtherOwner=nil end;function B_Goal_TributeClaim:Interrupt(b1)if type(self.InternTributeQuest)=="table"then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeClaim:GetCustomData(b2)if b2==2 then local b5={}for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)return b5 elseif b2==10 or b2==11 then return{"false","true"}end end;RegisterBehavior(B_Goal_TributeClaim)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(b1)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bJ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bJ]and CONST_INITIALIZED_OBJECTS[bJ]==b1.Identifier then debug(false,b1.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then local aT=0;if b3=="Always"or 1 then aT=1 end;self.UsingState=aT*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(b1)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(b2)if b2==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bJ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bJ]and CONST_INITIALIZED_OBJECTS[bJ]==b1.Identifier then debug(false,b1.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(b1)local bK=b1.SendingPlayer;local bL=b1.ReceivingPlayer;local State=GetDiplomacyState(bL,bK)if State>-2 then SetDiplomacyState(bL,bK,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID1=b3*1 elseif b2==1 then self.PlayerID2=b3*1 elseif b2==2 then self.Relation=DiplomacyStates[b3]end end;function B_Reprisal_Diplomacy:CustomFunction(b1)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(b1)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then debug(false,b1.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then debug(false,b1.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Reprisal_DestroyEntity:CustomFunction(b1)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(b1)if not IsExisting(self.ScriptName)then warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,b1.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.NewType=b3 elseif b2==2 then self.PlayerID=tonumber(b3)end end;function B_Reprisal_ReplaceEntity:CustomFunction(b1)local bJ=GetID(self.ScriptName)local bM=self.PlayerID;if bM==Logic.EntityGetPlayer(bJ)then bM=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],bM)end;function B_Reprisal_ReplaceEntity:GetCustomData(b2)local b5={}if b2==1 then for g,h in pairs(Entities)do local t={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==2 then b5={"-","0","1","2","3","4","5","6","7","8"}end;return b5 end;function B_Reprisal_ReplaceEntity:Debug(b1)if not Entities[self.NewType]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)then self.WarningPrinted=true;warn(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestRestart:CustomFunction(b1)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestFailure:CustomFunction(b1)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestSuccess:CustomFunction(b1)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(b1)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(b1)if not IsValidQuest(self.QuestName)then debug(false,b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Reprisal_QuestInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)local bF=Quests[bE]if bF.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.InterruptEnded=ToBoolean(b3)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(b2)local b5={}if b2==1 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reprisal_QuestForceInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)local bF=Quests[bE]if self.InterruptEnded or bF.State~=QuestState.Over then bF:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Operator=b3 elseif b2==2 then local bv=tonumber(b3)self.Value=bv==nil and tostring(b3)or bv end end;function B_Reprisal_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then bw=bx elseif self.Operator=="+"then bw=bw+bx elseif self.Operator=="-"then bw=bw-bx elseif self.Operator=="*"then bw=bw*bx elseif self.Operator=="/"then bw=bw/bx elseif self.Operator=="^"then bw=bw%bx end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,bw)end;function B_Reprisal_CustomVariables:GetCustomData(b2)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(b1)local bO={"=","+","-","*","/","^"}if not table.contains(bO,self.Operator)then debug(false,b1.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then debug(false,b1.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Reprisal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,b1)end;function B_Reprisal_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.LockType=b3=="Lock"elseif b2==2 then self.Technology=b3 end end;function B_Reprisal_Technology:CustomFunction(b1)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(b2)local b5={}if b2==1 then b5[1]="Lock"b5[2]="UnLock"elseif b2==2 then for g,h in pairs(Technologies)do table.insert(b5,g)end end;return b5 end;function B_Reprisal_Technology:Debug(b1)if not Technologies[self.Technology]then debug(false,b1.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.Distance=b3*1 elseif b2==2 then self.Waittime=b3*1 elseif b2==3 then self.RewardType=b3 elseif b2==4 then self.RewardAmount=b3*1 elseif b2==5 then self.FirstCostType=b3 elseif b2==6 then self.FirstCostAmount=b3*1 elseif b2==7 then self.SecondCostType=b3 elseif b2==8 then self.SecondCostAmount=b3*1 elseif b2==9 then local aT=nil;if b3=="Always"or b3==1 then aT=1 elseif b3=="Never"or b3==2 then aT=2 elseif b3=="Knight only"or b3==0 then aT=0 end;self.UsingState=aT end end;function B_Reward_ObjectInit:CustomFunction(b1)local bJ=GetID(self.ScriptName)if bJ==0 then return end;CONST_INITIALIZED_OBJECTS[bJ]=b1.Identifier;Logic.InteractiveObjectClearCosts(bJ)Logic.InteractiveObjectClearRewards(bJ)Logic.InteractiveObjectSetInteractionDistance(bJ,self.Distance)Logic.InteractiveObjectSetTimeToOpen(bJ,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(bJ,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(bJ,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(bJ,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(bJ,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(bJ,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(bJ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(bJ,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(bJ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(bJ,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(bJ)table.insert(HiddenTreasures,bJ)end;function B_Reward_ObjectInit:GetCustomData(b2)if b2==3 or b2==5 or b2==7 then local b5={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then b5[#b5+1]="G_Gems"b5[#b5+1]="G_MusicalInstrument"b5[#b5+1]="G_Olibanum"end;return b5 elseif b2==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(b1)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then debug(false,b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(false,b1.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then debug(false,b1.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then debug(false,b1.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then debug(false,b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(b1)local bK=b1.SendingPlayer;local bL=b1.ReceivingPlayer;local State=GetDiplomacyState(bL,bK)if State<2 then SetDiplomacyState(bL,bK,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradePost(...)return B_Reward_TradePost:new(...)end;B_Reward_TradePost={Name="B_Reward_TradePost",Description={en="Sets options for a Tradepost and deactivates it.",de="Stellt einen Handelsposten ein und deaktiviert ihn.",fr=""},Parameter={{ParameterType.ScriptName,en="ScriptName",de="ScriptName"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID"},{ParameterType.Custom,en="Type of good to pay 1",de="Resourcentyp Bezahlung 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 1",de="Resourcentyp Angebot 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource"},{ParameterType.Custom,en="Type of good to pay 2",de="Resourcentyp Bezahlung 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 2",de="Resourcentyp Angebot 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 3",de="Resourcentyp Bezahlung 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 3",de="Resourcentyp Angebot 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 4",de="Resourcentyp Bezahlung 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 4",de="Resourcentyp Angebot 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""}}}function B_Reward_TradePost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_TradePost:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==3 then self.PayType1=b3 elseif b2==4 then self.PayAmount1=b3*1 elseif b2==5 then self.OfferType1=b3 elseif b2==6 then self.OfferAmount1=b3*1 elseif b2==7 then self.PayType2=b3 elseif b2==8 then self.PayAmount2=b3*1 elseif b2==9 then self.OfferType2=b3 elseif b2==10 then self.OfferAmount2=b3*1 elseif b2==11 then self.PayType3=b3 elseif b2==12 then self.PayAmount3=b3*1 elseif b2==13 then self.OfferType3=b3 elseif b2==14 then self.OfferAmount3=b3*1 elseif b2==15 then self.PayType4=b3 elseif b2==16 then self.PayAmount4=b3*1 elseif b2==17 then self.OfferType4=b3 elseif b2==18 then self.OfferAmount4=b3*1 end end;function B_Reward_TradePost:CustomFunction(b1)local bP=0;for f=1,4 do if self["PayAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]and self["OfferAmount"..f]>0 then bP=f else break end end;debug(IsExisting(self.ScriptName),b1.Identifier..": Error in "..self.Name..": CustomFunction: Tradepost is missing")local bQ=GetID(self.ScriptName)if bP>0 then Logic.TradePost_SetTradePartnerGenerateGoodsFlag(bQ,true)Logic.TradePost_SetTradePartnerPlayerID(bQ,self.PlayerID)for f=1,bP do for aV=1,bP do Logic.TradePost_SetTradeDefinition(bQ,aV-1,Goods[self["PayType"..aV]],self["PayAmount"..aV],Goods[self["OfferType"..aV]],self["OfferAmount"..aV])end end;Logic.TradePost_SetActiveTradeSlot(bQ,0)Logic.InteractiveObjectSetAvailability(bQ,false)for n=1,8 do Logic.InteractiveObjectSetPlayerState(bQ,n,2)end end end;function B_Reward_TradePost:DEBUG(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..":  Error in "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif not IsExisting(self.ScriptName)then debug(false,b1.Identifier..":  Error in "..self.Name..": No TradePost found")return true end;for f=1,4 do if self["PayAmount"..f]and self["OfferAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]>0 and(not Goods[self["PayType"..f]]or not Goods[self["OfferType"..f]])then debug(false,b1.Identifier..":  Error in "..self.Name..": Offer type or pay type in Slot "..f.." is wrong")return true end end end;function B_Reward_TradePost:GetCustomData(bR)if bR>=2 and bR<=16 and bR%2==0 then return{"G_Carcass","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Milk","G_RawFish","G_Stone","G_Wood","G_Wool","G_Salt","G_Dye","G_Olibanum","G_Gems","G_MusicalInstrument"}end end;if g_GameExtraNo and g_GameExtraNo>=1 then RegisterBehavior(B_Reward_TradePost)end;function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then b3=b3 or 0;self.AmountOffer1=b3*1 elseif b2==2 then self.Offer1=b3 elseif b2==3 then b3=b3 or 0;self.AmountOffer2=b3*1 elseif b2==4 then self.Offer2=b3 elseif b2==5 then b3=b3 or 0;self.AmountOffer3=b3*1 elseif b2==6 then self.Offer3=b3 elseif b2==7 then b3=b3 or 0;self.AmountOffer4=b3*1 elseif b2==8 then self.Offer4=b3 end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local bS=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(bS)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(bS,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(bS,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(bS,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(b2)local bT={1,2,3,4,5,6,7,8}local bU={"1","2","3","4","5","6","7","8","9"}local bV={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(bV,"G_Gems")table.insert(bV,"G_Olibanum")table.insert(bV,"G_MusicalInstrument")table.insert(bV,"G_MilitaryBandit_Ranged_AS")table.insert(bV,"G_MilitaryBandit_Melee_AS")table.insert(bV,"U_MilitarySword_Khana")table.insert(bV,"U_MilitaryBow_Khana")end;if b2==0 then return bT elseif b2==1 or b2==3 or b2==5 or b2==7 then return bU elseif b2==2 or b2==4 or b2==6 or b2==8 then return bV end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.Orientation=b3*1 elseif b2==4 then self.SoldierCount=b3*1 elseif b2==5 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateBattalion:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,self.SoldierCount)local bX=GetID(self.ScriptNameEntity)if Logic.IsBuilding(bX)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(bW,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end;function B_Reward_CreateBattalion:GetCustomData(b2)local b5={}if b2==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateBattalion:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.ScriptNameEntity=b3 elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.UnitKey=b3 elseif b2==4 then self.Orientation=b3*1 elseif b2==5 then self.SoldierCount=b3*1 elseif b2==6 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local bY=GetID(self.ScriptNameEntity)local I,J,K=Logic.EntityGetPos(bY)if Logic.IsBuilding(bY)==1 then I,J=Logic.GetBuildingApproachPosition(bY)end;for f=1,self.Amount do local bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],I,J,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(bW,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(b2)local b5={}if b2==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(b5,g)end end;table.sort(b5)elseif b2==6 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateSeveralBattalions:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 elseif b2==1 then self.Type=EGL_Effects[b3]elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.Location=b3 elseif b2==4 then self.Orientation=b3*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Location)then return end;local bZ=assert(GetID(self.Location),b1.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local b_,c0=Logic.GetEntityPosition(bZ)local aJ=tonumber(self.Orientation)local c1=Logic.CreateEffectWithOrientation(self.Type,b_,c0,aJ,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=c1 end end;function B_Reward_CreateEffect:Debug(b1)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then debug(false,b1.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then debug(false,b1.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then debug(false,b1.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(b2)assert(b2==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local c2={}for g,h in pairs(EGL_Effects)do table.insert(c2,g)end;table.sort(c2)return c2 end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.Orientation=b3*1 elseif b2==4 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateEntity:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,1)local c3,c4=Logic.GetSoldiersAttachedToLeader(bW)Logic.SetOrientation(c4,math.floor(self.Orientation+0.5))else bW=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID)end;local bX=GetID(self.ScriptNameEntity)if Logic.IsBuilding(bX)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(bW,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end;function B_Reward_CreateEntity:GetCustomData(b2)local b5={}if b2==2 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==4 or b2==5 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateEntity:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then self.ScriptNameEntity=b3 elseif b2==2 then self.PlayerID=b3*1 elseif b2==3 then self.UnitKey=b3 elseif b2==4 then self.Orientation=b3*1 elseif b2==5 then self.HideFromAI=ToBoolean(b3)end end;function B_Reward_CreateSeveralEntities:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local aH=GetPosition(self.ScriptNameEntity)local bW;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then bW=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID,1)local c3,c4=Logic.GetSoldiersAttachedToLeader(bW)Logic.SetOrientation(c4,math.floor(self.Orientation+0.5))else bW=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aH.X,aH.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(bW,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,bW,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(b2)local b5={}if b2==3 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bN=false;for f=1,#t do if g:find(t[f])then bN=true;break end end;if not bN then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 or b2==6 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_CreateSeveralEntities:Debug(b1)if not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then debug(false,b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(b2,b3)if b2==0 then self.ScriptNameUnit=b3 elseif b2==1 then self.ScriptNameDest=b3 end end;function B_Reward_MoveSettler:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local c5=GetID(self.ScriptNameDest)local c6,c7=Logic.GetEntityPosition(c5)if Logic.IsBuilding(c5)==1 then c6,c7=Logic.GetBuildingApproachPosition(c5)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),c6,c7)end;function B_Reward_MoveSettler:Debug(b1)if not IsExisting(self.ScriptNameUnit)then debug(false,b1.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then debug(false,b1.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(b1)b1:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(b1.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TerritoryID=tonumber(b3)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(b3)end elseif b2==3 then self.NumSword=b3*1 elseif b2==4 then self.NumBow=b3*1 elseif b2==5 then self.NumCatapults=b3*1 elseif b2==6 then self.NumSiegeTowers=b3*1 elseif b2==7 then self.NumRams=b3*1 elseif b2==8 then self.NumAmmoCarts=b3*1 elseif b2==9 then if b3=="Normal"or b3==false then self.TroopType=false elseif b3=="RedPrince"or b3==true then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==10 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(b2)local b5={}if b2==9 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==10 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(b1)local c8=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if c8~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,c8,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then debug(false,b1.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then debug(false,b1.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then debug(false,b1.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then debug(false,b1.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then debug(false,b1.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TargetName=b3 elseif b2==3 then self.Radius=b3*1 elseif b2==4 then self.NumSword=b3*1 elseif b2==5 then self.NumBow=b3*1 elseif b2==6 then if b3=="Normal"or b3==false then self.TroopType=false elseif b3=="RedPrince"or b3==true then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==7 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(b2)local b5={}if b2==6 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==7 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local c8=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,c8,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then self.Spawnpoint=b3 elseif b2==2 then self.TargetName=b3 elseif b2==3 then self.Radius=b3*1 elseif b2==4 then self.Time=b3*1 elseif b2==5 then self.NumSword=b3*1 elseif b2==6 then self.NumBow=b3*1 elseif b2==7 then self.CaptureTradeCarts=ToBoolean(b3)elseif b2==8 then if b3=="Normal"or b3==true then self.TroopType=false elseif b3=="RedPrince"or b3==false then self.TroopType=true elseif b3=="Bandit"or b3==2 then self.TroopType=2 elseif b3=="Cultist"or b3==3 then self.TroopType=3 else assert(false)end elseif b2==9 then self.ReuseTroops=ToBoolean(b3)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(b2)local b5={}if b2==7 then table.insert(b5,"false")table.insert(b5,"true")elseif b2==8 then table.insert(b5,"Normal")table.insert(b5,"RedPrince")table.insert(b5,"Bandit")if g_GameExtraNo>=1 then table.insert(b5,"Cultist")end elseif b2==9 then table.insert(b5,"false")table.insert(b5,"true")else assert(false)end;return b5 end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local c8=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,c8,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(b1)if self.AIPlayerID<2 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then debug(false,b1.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(b2,b3)if b2==0 then self.AIPlayerID=b3*1 elseif b2==1 then local c9={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=c9[b3]elseif b2==2 then self.Value=b3*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(b1)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(b2)if b2==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(b1)if Logic.GetStoreHouse(self.AIPlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then debug(false,b1.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then debug(false,b1.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then debug(false,b1.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then debug(false,b1.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(b2,b3)if b2==0 then self.AIPlayer=b3*1 elseif b2==1 then self.Aggressiveness=tonumber(b3)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local aI=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)assert(aI~=nil)PlayerAIs[self.AIPlayer]=aI;if self.Aggressiveness>=2 then aI.ProfileLoop=AIProfile_Skirmish;aI.Skirmish=aI.Skirmish or{}aI.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;aI.Skirmish.Claim_MaxTime=aI.Skirmish.Claim_MinTime*2 else aI.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(b1)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(b2)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(b2,b3)if b2==0 then self.AIPlayer=b3*1 elseif b2==1 then self.Enemy=b3*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local aI=PlayerAIs[self.AIPlayer]if aI and aI.Skirmish then aI.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(b1)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then debug(false,b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 elseif b2==1 then self.Amount=b3*1 end end;function B_Reward_SetResourceAmount:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local B=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(B)==0 then return false end;Logic.SetResourceDoodadGoodAmount(B,self.Amount)end;function B_Reward_SetResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then debug(false,b1.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then debug(false,b1.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(b2,b3)if b2==0 then self.GoodTypeName=b3 elseif b2==1 then self.GoodAmount=b3*1 end end;function B_Reward_Resources:GetRewardTable()local b4=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,b4,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(b2,b3)if b2==0 then self.ScriptNameEntity=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then self.UnitKey=b3 elseif b2==3 then self.GoodType=b3 elseif b2==4 then self.GoodAmount=b3*1 elseif b2==5 then self.OverrideTargetPlayer=tonumber(b3)elseif b2==6 then self.IgnoreReservation=ToBoolean(b3)elseif b2==7 then self.ReplaceEntity=ToBoolean(b3)end end;function B_Reward_SendCart:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local an=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(an,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(an,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(b2)local b5={}if b2==2 then b5={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif b2==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(b5,g)end end;table.sort(b5)elseif b2==5 then table.insert(b5,"-")for f=1,8 do table.insert(b5,f)end elseif b2==6 then table.insert(b5,"false")table.insert(b5,"true")elseif b2==7 then table.insert(b5,"false")table.insert(b5,"true")end;return b5 end;function B_Reward_SendCart:Debug(b1)if not IsExisting(self.ScriptNameEntity)then debug(false,b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,b1.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then debug(false,b1.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then debug(false,b1.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then debug(false,b1.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then debug(false,b1.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(b2,b3)if b2==0 then self.EntityName=b3 elseif b2==1 then self.Amount=b3*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(b2,b3)if b2==0 then self.Points=b3 end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 else self.SoldiersType=b3 end end;function B_Reward_AI_MountOutpost:CustomFunction(b1)local ca=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),b1.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local cb=Logic.EntityGetPlayer(ca)local cc,cd=Logic.GetBuildingApproachPosition(ca)local ce=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],cc,cd,0,cb,0)AICore.HideEntityFromAI(cb,ce,true)Logic.CommandEntityToMountBuilding(ce,ca)end;function B_Reward_AI_MountOutpost:GetCustomData(b2)if b2==1 then local b5={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then b5[#b5+1]=g end end;return b5 end end;function B_Reward_AI_MountOutpost:Debug(b1)if Logic.IsEntityDestroyed(self.Scriptname)then debug(false,b1.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(b2,b3)self.QuestName=b3 end;function B_Reward_QuestRestartForceActive:CustomFunction(b1)local bE,bF=self:ResetQuest(b1)if bE then bF:SetMsgKeyOverride()bF:SetIconOverride()bF:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then debug(false,b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 end end;function B_Reward_UpgradeBuilding:CustomFunction(b1)local cf=GetID(self.Building)if cf~=0 and Logic.IsBuilding(cf)==1 and Logic.IsBuildingUpgradable(cf,true)and Logic.IsBuildingUpgradable(cf,false)then Logic.UpgradeBuilding(cf)end end;function B_Reward_UpgradeBuilding:Debug(b1)local cf=GetID(self.Building)if not(cf~=0 and Logic.IsBuilding(cf)==1 and Logic.IsBuildingUpgradable(cf,true)and Logic.IsBuildingUpgradable(cf,false))then debug(false,b1.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then self.UpgradeLevel=tonumber(b3)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local cf=Logic.GetEntityIDByName(self.Building)local cg=Logic.GetUpgradeLevel(cf)local ch=Logic.GetMaxUpgradeLevel(cf)if cf~=0 and Logic.IsBuilding(cf)==1 and(Logic.IsBuildingUpgradable(cf,true)or ch~=0 and ch==cg)then Logic.SetUpgradableBuildingState(cf,math.min(self.UpgradeLevel,ch),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(b1)local cf=Logic.GetEntityIDByName(self.Building)if not cf or Logic.IsBuilding(cf)==0 then debug(false,b1.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then debug(false,b1.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(b2)if b2==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.DiplState=b3 end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.Need=b3 elseif b2==2 then self.WorkersOnStrike=b3*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(b1)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then debug(false,b1.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then debug(false,b1.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(b2,b3)if b2==0 then self.ScriptName=b3 end end;function B_Trigger_OnResourceDepleted:CustomFunction(b1)local an=GetID(self.ScriptName)return not an or an==0 or Logic.GetResourceDoodadGoodType(an)==0 or Logic.GetResourceDoodadGoodAmount(an)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(b2,b3)if b2==0 then self.PlayerID=b3*1 elseif b2==1 then self.GoodTypeName=b3 elseif b2==2 then self.GoodAmount=b3*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(b1)local ci=Logic.GetStoreHouse(self.PlayerID)if ci==0 then return false end;local b4=Logic.GetGoodTypeID(self.GoodTypeName)local cj=Logic.GetAmountOnOutStockByGoodType(ci,b4)if cj>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then debug(false,b1.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then debug(false,b1.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(b1)local bE=GetQuestID(self.QuestName)if bE~=nil then assert(type(bE)=="number")if Quests[bE].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(b1)end;function B_Trigger_OnQuestActiveWait:Reset(b1)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.Over and Quests[bE].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].State==QuestState.Over and Quests[bE].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(b2,b3)if b2==0 then self.QuestName=b3 elseif b2==1 then self.WaitTime=b3~=nil and tonumber(b3)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bE=GetQuestID(self.QuestName)if Quests[bE].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(b1)if type(self.QuestName)~="string"then debug(false,b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,b1.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(b2,b3)if b2==0 then self.QuestName=b3;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(b2,b3)if b2==0 then self.VariableName=b3 elseif b2==1 then self.Relation=b3 elseif b2==2 then local bv=tonumber(b3)bv=bv~=nil and bv or b3;self.Value=bv end end;function B_Trigger_CustomVariables:CustomFunction()local bw=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bx=self.Value;if type(self.Value)=="string"then bx=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return bw==bx elseif self.Relation~="~="then return bw~=bx elseif self.Relation==">"then return bw>bx elseif self.Relation==">="then return bw>=bx elseif self.Relation=="<="then return bw<=bx else return bw<bx end;return false end;function B_Trigger_CustomVariables:GetCustomData(b2)if b2==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(b1)local by={"==","~=","<=","<",">",">="}local bz={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(by,self.Relation)then debug(false,b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(b2,b3)if b2==0 then self.Month=b3*1 end end;function B_Trigger_OnMonth:CustomFunction(b1)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(b2)local b5={}if b2==0 then for f=1,12 do table.insert(b5,f)end else assert(false)end;return b5 end;function B_Trigger_OnMonth:Debug(b1)if self.Month<1 or self.Month>12 then debug(false,b1.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(b1)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(b2,b3)if b2==0 then self.Time=b3*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(b1)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if ck.State==QuestState.Over and ck.Result==QuestResult.Failure or cl.State==QuestState.Over and cl.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(b1)if self.Quest1==self.Quest2 then debug(false,b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if ck.State==QuestState.Over and ck.Result==QuestResult.Success or cl.State==QuestState.Over and cl.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(b1)if self.Quest1==self.Quest2 then debug(false,b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(b2,b3)if b2==0 then self.LeastAmount=tonumber(b3)elseif b2==1 then self.QuestAmount=tonumber(b3)elseif b2==2 then self.QuestName1=b3 elseif b2==3 then self.QuestName2=b3 elseif b2==4 then self.QuestName3=b3 elseif b2==5 then self.QuestName4=b3 elseif b2==6 then self.QuestName5=b3 end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local cm=0;for f=1,self.QuestAmount do local bE=GetQuestID(self["QuestName"..f])if IsValidQuest(bE)then if Quests[bE].Result==QuestResult.Success then cm=cm+1;if cm>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(b1)local cn=self.LeastAmount;local co=self.QuestAmount;if cn<=0 or cn>5 then debug(false,b1.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif co<=0 or co>5 then debug(false,b1.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif cn>co then debug(false,b1.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,co do if not IsValidQuest(self["QuestName"..f])then debug(false,b1.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(b2)if b2==0 or b2==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(b1)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(b2,b3)if b2==0 then self.FuncName=b3 end end;function B_Trigger_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Trigger_MapScriptFunction:Debug(b1)if not self.FuncName then debug(false,b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(b2,b3)if b2==0 then self.EffectName=b3 end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,b1.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)Lib.Register("module/entity/NPC_Behavior")function Goal_NPC(hQ,hR)return B_Goal_NPC:new(hQ,hR)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(b2,b3)if b2==0 then self.NPC=b3 elseif b2==1 then self.Hero=b3;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)Lib.Register("module/io/IO_Behavior")function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(b2,b3)if b2==0 then assert(b3~=nil and b3~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if b3~=nil and b3~=""then table.insert(self.ScriptNames,b3)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,b1)local B=GetID(self.ScriptName)if B==0 then return end;CONST_INITIALIZED_OBJECTS[B]=b1.Identifier;local kb;if self.RewardType and self.RewardType~="-"then kb={Goods[self.RewardType],self.RewardAmount}end;local kc;if self.FirstCostType and self.FirstCostType~="-"then kc=kb or{}table.insert(kc,Goods[self.FirstCostType])table.insert(kc,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then kc=kb or{}table.insert(kc,Goods[self.SecondCostType])table.insert(kc,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=kb,Costs=kc}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;Lib.Register("module/quest/Quest_Behavior")function Goal_WinQuest(...)return B_Goal_WinQuest:new(...)end;B_Goal_WinQuest={Name="Goal_WinQuest",Description={en="Goal: The player has to win a given quest.",de="Ziel: Der Spieler muss eine angegebene Quest erfolgreich abschliessen.",fr="Objectif: Le joueur doit réussir une quête indiquée."},Parameter={{ParameterType.QuestName,en="Quest Name",de="Questname",fr="Nom de la quête"}}}function B_Goal_WinQuest:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_WinQuest:AddParameter(b2,b3)if b2==0 then self.Quest=b3 end end;function B_Goal_WinQuest:CustomFunction(b1)local mt=Quests[GetQuestID(self.Quest)]if mt then if mt.Result==QuestResult.Failure then return false end;if mt.Result==QuestResult.Success then return true end end;return nil end;function B_Goal_WinQuest:Debug(b1)if Quests[GetQuestID(self.Quest)]==nil then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest.."' does not exist!")return true end;return false end;RegisterBehavior(B_Goal_WinQuest)function Goal_DiscoverPlayers(...)return B_Goal_DiscoverPlayers:new(...)end;B_Goal_DiscoverPlayers={Name="Goal_DiscoverPlayers",Description={en="Goal: Discover the home territory of some other players.",de="Ziel: Entdecke das Heimatterritorium einiger Spieler.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.Custom,en="Player amount",de="Spieleranzahl",fr="Montant du Joueur"},{ParameterType.PlayerID,en="Player 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="Player 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.PlayerID,en="Player 3",de="Spieler 3",fr="Joueur 3"},{ParameterType.PlayerID,en="Player 4",de="Spieler 4",fr="Joueur 4"},{ParameterType.PlayerID,en="Player 5",de="Spieler 5",fr="Joueur 5"},{ParameterType.PlayerID,en="Player 6",de="Spieler 6",fr="Joueur 6"}}}function B_Goal_DiscoverPlayers:GetGoalTable()return{Objective.Discover,2,{unpack(self.PlayerList)}}end;function B_Goal_DiscoverPlayers:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 end;if b2>0 then self.PlayerList=self.PlayerList or{}if b2<=self.Amount then local n=b3*1;table.insert(self.PlayerList,n)end end end;function B_Goal_DiscoverPlayers:GetMsgKey()local b7={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local bb=GetPlayerCategoryType(self.PlayerList[1]or 1)if bb then local b8=b7[bb]if b8 then return b8 end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayers)function Goal_DiscoverTerritories(...)return B_Goal_DiscoverTerritories:new(...)end;B_Goal_DiscoverTerritories={Name="Goal_DiscoverTerritories",Description={en="Goal: Discover multiple territories",de="Ziel: Entdecke mehrere Territorien",fr="Objectif : Découvrez plusieurs territoires"},Parameter={{ParameterType.Custom,en="Territory amount",de="Territorienanzahl",fr="Montant du territoire"},{ParameterType.TerritoryName,en="Territory 1",de="Territorium 1",fr="Territoire 1"},{ParameterType.TerritoryName,en="Territory 2",de="Territorium 2",fr="Territoire 2"},{ParameterType.TerritoryName,en="Territory 3",de="Territorium 3",fr="Territoire 3"},{ParameterType.TerritoryName,en="Territory 4",de="Territorium 4",fr="Territoire 4"},{ParameterType.TerritoryName,en="Territory 5",de="Territorium 5",fr="Territoire 5"},{ParameterType.TerritoryName,en="Territory 6",de="Territorium 6",fr="Territoire 6"}}}function B_Goal_DiscoverTerritories:GetGoalTable()return{Objective.Discover,1,{unpack(self.TerritoryList)}}end;function B_Goal_DiscoverTerritories:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 end;if b2>0 then self.TerritoryList=self.TerritoryList or{}if b2<=self.Amount then local _=tonumber(b3)if not _ then _=GetTerritoryIDByName(b3)end;assert(_>0)table.insert(self.TerritoryList,_)end end end;function B_Goal_DiscoverTerritories:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritories)function Trigger_OnAtLeastXOfYQuestsFailed(...)return B_Trigger_OnAtLeastXOfYQuestsFailed:new(...)end;B_Trigger_OnAtLeastXOfYQuestsFailed={Name="Trigger_OnAtLeastXOfYQuestsFailed",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests fehlgeschlagen sind.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont échoué."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsFailed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsFailed:AddParameter(b2,b3)if b2==0 then self.LeastAmount=tonumber(b3)elseif b2==1 then self.QuestAmount=tonumber(b3)elseif b2==2 then self.QuestName1=b3 elseif b2==3 then self.QuestName2=b3 elseif b2==4 then self.QuestName3=b3 elseif b2==5 then self.QuestName4=b3 elseif b2==6 then self.QuestName5=b3 end end;function B_Trigger_OnAtLeastXOfYQuestsFailed:CustomFunction()local cm=0;for f=1,self.QuestAmount do local bE=GetQuestID(self["QuestName"..f])if IsValidQuest(bE)then if Quests[bE].Result==QuestResult.Failure then cm=cm+1;if cm>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:Debug(b1)local cn=self.LeastAmount;local co=self.QuestAmount;if cn<=0 or cn>5 then error(b1.Identifier..":"..self.Name..": LeastAmount is wrong")return true elseif co<=0 or co>5 then error(b1.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif cn>co then error(b1.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,co do if not IsValidQuest(self["QuestName"..f])then error(b1.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:GetCustomData(b2)if b2==0 or b2==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsFailed)function Trigger_OnExactOneQuestIsWon(...)return B_Trigger_OnExactOneQuestIsWon:new(...)end;B_Trigger_OnExactOneQuestIsWon={Name="Trigger_OnExactOneQuestIsWon",Description={en="Trigger: if one of two given quests has been finished successfully, but NOT both.",de="Auslöser: wenn eine von zwei angegebenen Quests (aber NICHT beide) erfolgreich abgeschlossen wurde.",fr="Déclencheur: lorsque l'une des deux quêtes indiquées (mais PAS les deux) a été accomplie avec succès."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsWon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsWon:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnExactOneQuestIsWon:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if cl and ck then local mu=ck.State==QuestState.Over and ck.Result==QuestResult.Success;local mv=cl.State==QuestState.Over and cl.Result==QuestResult.Success;if mu and not mv or not mu and mv then return true end end;return false end;function B_Trigger_OnExactOneQuestIsWon:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsWon)function Trigger_OnExactOneQuestIsLost(...)return B_Trigger_OnExactOneQuestIsLost:new(...)end;B_Trigger_OnExactOneQuestIsLost={Name="Trigger_OnExactOneQuestIsLost",Description={en="Trigger: If one of two given quests has been lost, but NOT both.",de="Auslöser: Wenn einer von zwei angegebenen Quests (aber NICHT beide) fehlschlägt.",fr="Déclencheur: Si l'une des deux quêtes indiquées (mais PAS les deux) échoue."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsLost:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsLost:AddParameter(b2,b3)self.QuestTable={}if b2==0 then self.Quest1=b3 elseif b2==1 then self.Quest2=b3 end end;function B_Trigger_OnExactOneQuestIsLost:CustomFunction(b1)local ck=Quests[GetQuestID(self.Quest1)]local cl=Quests[GetQuestID(self.Quest2)]if cl and ck then local mu=ck.State==QuestState.Over and ck.Result==QuestResult.Failure;local mv=cl.State==QuestState.Over and cl.Result==QuestResult.Failure;if mu and not mv or not mu and mv then return true end end;return false end;function B_Trigger_OnExactOneQuestIsLost:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsLost)Lib.Register("module/quest/QuestBehavior_Behavior")function Goal_MoveToPosition(...)return B_Goal_MoveToPosition:new(...)end;B_Goal_MoveToPosition={Name="Goal_MoveToPosition",Description={en="Goal: A entity have to moved as close as the distance to another entity. The target can be marked with a static marker.",de="Ziel: Ein Entity muss sich einer anderen bis auf eine bestimmte Distanz nähern. Die Lupe wird angezeigt, das Ziel kann markiert werden.",fr="Objectif: une entité doit s'approcher d'une autre à une distance donnée. La loupe est affichée, la cible peut être marquée."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Custom,en="Marker",de="Ziel markieren",fr="Marquer la cible"}}}function B_Goal_MoveToPosition:GetGoalTable()return{Objective.Distance,self.Entity,self.Target,self.Distance,self.Marker}end;function B_Goal_MoveToPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.Distance=b3*1 elseif b2==3 then self.Marker=ToBoolean(b3)end end;function B_Goal_MoveToPosition:GetCustomData(b2)local b5={}if b2==3 then b5={"true","false"}end;return b5 end;RegisterBehavior(B_Goal_MoveToPosition)function Goal_AmmunitionAmount(...)return B_Goal_AmmunitionAmount:new(...)end;B_Goal_AmmunitionAmount={Name="Goal_AmmunitionAmount",Description={en="Goal: Reach a smaller or bigger value than the given amount of ammunition in a war machine.",de="Ziel: Über- oder unterschreite die angegebene Anzahl Munition in einem Kriegsgerät.",fr="Objectif : Dépasser ou ne pas dépasser le nombre de munitions indiqué dans un engin de guerre."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_AmmunitionAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_AmmunitionAmount:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 elseif b2==1 then self.bRelSmallerThan=tostring(b3)=="true"or b3=="<"elseif b2==2 then self.Amount=b3*1 end end;function B_Goal_AmmunitionAmount:CustomFunction()local B=GetID(self.Scriptname)if not IsExisting(B)then return false end;local bu=Logic.GetAmmunitionAmount(B)if self.bRelSmallerThan and bu<self.Amount or not self.bRelSmallerThan and bu>=self.Amount then return true end;return nil end;function B_Goal_AmmunitionAmount:Debug(b1)if self.Amount<0 then error(b1.Identifier..": "..self.Name..": Amount is negative")return true end end;function B_Goal_AmmunitionAmount:GetCustomData(b2)if b2==1 then return{"<",">="}end end;RegisterBehavior(B_Goal_AmmunitionAmount)function Goal_CityReputation(...)return B_Goal_CityReputation:new(...)end;B_Goal_CityReputation={Name="Goal_CityReputation",Description={en="Goal: The reputation of the quest receivers city must at least reach the desired hight.",de="Ziel: Der Ruf der Stadt des Empfängers muss mindestens so hoch sein, wie angegeben.",fr="Objectif: la réputation de la ville du receveur doit être au moins aussi élevée que celle indiquée."},Parameter={{ParameterType.Number,en="City reputation",de="Ruf der Stadt",fr="Réputation de la ville"}},Text={de="RUF DER STADT{cr}{cr}Hebe den Ruf der Stadt durch weise Herrschaft an!{cr}Benötigter Ruf: %d",en="CITY REPUTATION{cr}{cr}Raise your reputation by fair rulership!{cr}Needed reputation: %d",fr="RÉPUTATION DE LA VILLE{cr}{cr} Augmente la réputation de la ville en la gouvernant sagement!{cr}Réputation requise : %d"}}function B_Goal_CityReputation:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CityReputation:AddParameter(b2,b3)if b2==0 then self.Reputation=b3*1 end end;function B_Goal_CityReputation:CustomFunction(b1)self:SetCaption(b1)local na=Logic.GetCityReputation(b1.ReceivingPlayer)*100;if na>=self.Reputation then return true end end;function B_Goal_CityReputation:SetCaption(b1)if not b1.QuestDescription or b1.QuestDescription==""then local ba=string.format(Localize(self.Text),self.Reputation)Lib.Core.Quest:ChangeCustomQuestCaptionText(ba.."%",b1)end end;function B_Goal_CityReputation:GetIcon()return{5,14}end;function B_Goal_CityReputation:Debug(b1)if type(self.Reputation)~="number"or self.Reputation<0 or self.Reputation>100 then error(b1.Identifier..": "..self.Name..": Reputation must be between 0 and 100!")return true end;return false end;RegisterBehavior(B_Goal_CityReputation)function Goal_DestroySpawnedEntities(...)return B_Goal_DestroySpawnedEntities:new(...)end;B_Goal_DestroySpawnedEntities={Name="Goal_DestroySpawnedEntities",Description={en="Goal: Destroy all entities spawned at the spawnpoint.",de="Ziel: Zerstöre alle Entitäten, die bei dem Spawnpoint erzeugt wurde.",fr="Objectif: Détruire toutes les entités créées au point d'apparition."},Parameter={{ParameterType.ScriptName,en="Spawnpoint",de="Spawnpoint",fr="Point d'émergence"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Custom,en="Name is prefixed",de="Name ist Präfix",fr="Le nom est un préfixe"}}}function B_Goal_DestroySpawnedEntities:GetGoalTable()if self.Prefixed then local cL=table.remove(self.SpawnPoint)local f=1;while IsExisting(cL..f)do table.insert(self.SpawnPoint,cL..f)f=f+1 end;assert(#self.SpawnPoint>0,"No spawnpoints found!")end;return{Objective.DestroyEntities,3,self.SpawnPoint,self.Amount}end;function B_Goal_DestroySpawnedEntities:AddParameter(b2,b3)if b2==0 then self.SpawnPoint={b3}elseif b2==1 then self.Amount=b3*1 elseif b2==2 then b3=b3 or"false"self.Prefixed=ToBoolean(b3)end end;function B_Goal_DestroySpawnedEntities:GetMsgKey()local an=GetID(self.SpawnPoint[1])if an~=0 then local h9=Logic.GetEntityTypeName(Logic.GetEntityType(an))if Logic.IsEntityTypeInCategory(an,EntityCategories.AttackableBuilding)==1 then return"Quest_Destroy_Leader"elseif h9:find("Bear")or h9:find("Lion")or h9:find("Tiger")or h9:find("Wolf")then return"Quest_DestroyEntities_Predators"elseif h9:find("Military")or h9:find("Cart")then return"Quest_DestroyEntities_Unit"end end;return"Quest_DestroyEntities"end;function B_Goal_DestroySpawnedEntities:GetCustomData(b2)if b2==2 then return{"false","true"}end end;RegisterBehavior(B_Goal_DestroySpawnedEntities)function Goal_StealGold(...)return B_Goal_StealGold:new(...)end;B_Goal_StealGold={Name="Goal_StealGold",Description={en="Goal: Steal an explicit amount of gold from a players or any players city buildings.",de="Ziel: Diebe sollen eine bestimmte Menge Gold aus feindlichen Stadtgebäuden stehlen.",fr="Objectif: les voleurs doivent dérober une certaine quantité d'or dans les bâtiments urbains ennemis."},Parameter={{ParameterType.Number,en="Amount on Gold",de="Zu stehlende Menge",fr="Quantité à voler"},{ParameterType.Custom,en="Target player",de="Spieler von dem gestohlen wird",fr="Joueur à qui l'on vole"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Print progress",de="Fortschritt ausgeben",fr="Afficher les progrès"}}}function B_Goal_StealGold:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealGold:AddParameter(b2,b3)if b2==0 then self.Amount=b3*1 elseif b2==1 then local n=tonumber(b3)or-1;self.Target=n*1 elseif b2==2 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)elseif b2==3 then b3=b3 or"true"self.Printout=ToBoolean(b3)end;self.StohlenGold=0 end;function B_Goal_StealGold:GetCustomData(b2)if b2==1 then return{"-",1,2,3,4,5,6,7,8}elseif b2==2 then return{"true","false"}end end;function B_Goal_StealGold:SetDescriptionOverwrite(b1)local nb=Localize({de=" anderen Spielern ",en=" different parties ",fr=" d'autres joueurs "})if self.Target~=-1 then nb=GetPlayerName(self.Target)if nb==nil or nb==""then nb=" PLAYER_NAME_MISSING "end end;if self.CheatEarnings then local nc={self.Target}if self.Target==-1 then nc={1,2,3,4,5,6,7,8}end;for f=1,#nc,1 do if f~=b1.ReceivingPlayer and Logic.GetStoreHouse(f)~=0 then local jm={Logic.GetPlayerEntitiesInCategory(f,EntityCategories.CityBuilding)}for aV=1,#jm,1 do local nd=Logic.GetBuildingProductEarnings(jm[aV])if nd<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(jm[aV],nd+1)end end end end end;local br=self.Amount-self.StohlenGold;br=br>0 and br or 0;local ga={de="Gold von %s stehlen {cr}{cr}Aus Stadtgebäuden zu stehlende Goldmenge: %d",en="Steal gold from %s {cr}{cr}Amount on gold to steal from city buildings: %d",fr="Voler l'or de %s {cr}{cr}Quantité d'or à voler dans les bâtiments de la ville : %d"}return"{center}"..string.format(Localize(ga),nb,br)end;function B_Goal_StealGold:CustomFunction(b1)if Lib.Core.Quest then Lib.Core.Quest:ChangeCustomQuestCaptionText(self:SetDescriptionOverwrite(b1),b1)end;if self.StohlenGold>=self.Amount then return true end;return nil end;function B_Goal_StealGold:GetIcon()return{5,13}end;function B_Goal_StealGold:Debug(b1)if tonumber(self.Amount)==nil and self.Amount<0 then error(b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;function B_Goal_StealGold:Reset(b1)self.StohlenGold=0 end;RegisterBehavior(B_Goal_StealGold)function Goal_StealFromBuilding(...)return B_Goal_StealFromBuilding:new(...)end;B_Goal_StealFromBuilding={Name="Goal_StealFromBuilding",Description={en="Goal: The player has to steal from a building. Not a castle and not a village storehouse!",de="Ziel: Der Spieler muss ein bestimmtes Gebäude bestehlen. Dies darf keine Burg und kein Dorflagerhaus sein!",fr="Objectif: Le joueur doit voler un bâtiment spécifique. Il ne peut s'agir ni d'un château ni d'un entrepôt de village !"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"}}}function B_Goal_StealFromBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealFromBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)end;self.RobberList={}end;function B_Goal_StealFromBuilding:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Goal_StealFromBuilding:SetDescriptionOverwrite(b1)local ne=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Cathedrals)==1;local nf=Logic.GetEntityType(GetID(self.Building))==Entities.B_StoreHouse;local ng=Logic.GetEntityType(GetID(self.Building))==Entities.B_Cistern;local ga;if ne then ga={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert die markierte Kirche.",en="Sabotage {cr}{cr} Send a thief to sabotage the marked chapel.",fr="Sabotage {cr}{cr} Envoyez un voleur pour saboter la chapelle marquée."}elseif nf then ga={de="Lagerhaus bestehlen {cr}{cr} Sendet einen Dieb in das markierte Lagerhaus.",en="Steal from storehouse {cr}{cr} Steal from the marked storehouse.",fr="Voler un entrepôt {cr}{cr} Envoie un voleur dans l'entrepôt marqué."}elseif ng then ga={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert den markierten Brunnen.",en="Sabotage {cr}{cr} Send a thief and break the marked well of the enemy.",fr="Sabotage {cr}{cr} Envoie un voleur et sabote le puits marqué."}else ga={de="Gebäude bestehlen {cr}{cr} Sendet einen Dieb und bestehlt das markierte Gebäude.",en="Steal from building {cr}{cr} Send a thief to steal from the marked building.",fr="Voler un bâtiment {cr}{cr} Envoie un voleur et vole le bâtiment marqué."}end;return"{center}"..Localize(ga)end;function B_Goal_StealFromBuilding:CustomFunction(b1)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aH=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aH.X,aH.Y,0)end;if self.CheatEarnings then local jq=GetID(self.Building)local nd=Logic.GetBuildingProductEarnings(jq)if Logic.IsEntityInCategory(jq,EntityCategories.CityBuilding)==1 and nd<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(jq,nd+1)end end;if self.SuccessfullyStohlen then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_StealFromBuilding:GetIcon()return{5,13}end;function B_Goal_StealFromBuilding:Debug(b1)local nh=Logic.GetEntityTypeName(Logic.GetEntityType(GetID(self.Building)))local ni=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Headquarters)==1;if Logic.IsBuilding(GetID(self.Building))==0 then error(b1.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(b1.Identifier..": "..self.Name..": target is destroyed :(")return true elseif string.find(nh,"B_NPC_BanditsHQ")or string.find(nh,"B_NPC_Cloister")or string.find(nh,"B_NPC_StoreHouse")then error(b1.Identifier..": "..self.Name..": village storehouses are not allowed!")return true elseif ni then error(b1.Identifier..": "..self.Name..": use Goal_StealInformation for headquarters!")return true end;return false end;function B_Goal_StealFromBuilding:Reset(b1)self.SuccessfullyStohlen=false;self.RobberList={}self.Marker=nil end;function B_Goal_StealFromBuilding:Interrupt(b1)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_StealFromBuilding)function Goal_SpyOnBuilding(...)return B_Goal_SpyOnBuilding:new(...)end;B_Goal_SpyOnBuilding={Name="Goal_SpyOnBuilding",IconOverwrite={5,13},Description={en="Goal: Infiltrate a building with a thief. A thief must be able to steal from the target building.",de="Ziel: Infiltriere ein Gebäude mit einem Dieb. Nur mit Gebaueden möglich, die bestohlen werden koennen.",fr="Objectif: Infiltrer un bâtiment avec un voleur. Seulement possible avec des bâtiments qui peuvent être volés."},Parameter={{ParameterType.ScriptName,en="Target Building",de="Zielgebäude",fr="Bâtiment cible"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Destroy Thief",de="Dieb löschen",fr="Supprimer le voleur"}}}function B_Goal_SpyOnBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SpyOnBuilding:AddParameter(b2,b3)if b2==0 then self.Building=b3 elseif b2==1 then b3=b3 or"false"self.CheatEarnings=ToBoolean(b3)elseif b2==2 then b3=b3 or"true"self.Delete=ToBoolean(b3)end end;function B_Goal_SpyOnBuilding:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Goal_SpyOnBuilding:SetDescriptionOverwrite(b1)if not b1.QuestDescription then local ga={de="Gebäude infriltrieren {cr}{cr}Spioniere das markierte Gebäude mit einem Dieb aus!",en="Infiltrate building {cr}{cr}Spy on the highlighted buildings with a thief!",fr="Infiltrer un bâtiment {cr}{cr}Espionner le bâtiment marqué avec un voleur!"}return Localize(ga)else return b1.QuestDescription end end;function B_Goal_SpyOnBuilding:CustomFunction(b1)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aH=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aH.X,aH.Y,0)end;if self.CheatEarnings then local jq=GetID(self.Building)if Logic.IsEntityInCategory(jq,EntityCategories.CityBuilding)==1 and Logic.GetBuildingEarnings(jq)<5 then Logic.SetBuildingEarnings(jq,5)end end;if self.Infiltrated then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_SpyOnBuilding:GetIcon()return self.IconOverwrite end;function B_Goal_SpyOnBuilding:Debug(b1)if Logic.IsBuilding(GetID(self.Building))==0 then error(b1.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(b1.Identifier..": "..self.Name..": target is destroyed :(")return true end;return false end;function B_Goal_SpyOnBuilding:Reset(b1)self.Infiltrated=false;self.Marker=nil end;function B_Goal_SpyOnBuilding:Interrupt(b1)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_SpyOnBuilding)function Goal_DestroySoldiers(...)return B_Goal_DestroySoldiers:new(...)end;B_Goal_DestroySoldiers={Name="Goal_DestroySoldiers",Description={en="Goal: Destroy a given amount of enemy soldiers",de="Ziel: Zerstöre eine Anzahl gegnerischer Soldaten",fr="Objectif: Détruire un certain nombre de soldats ennemis"},Parameter={{ParameterType.PlayerID,en="Attacking Player",de="Angreifer",fr="Attaquant"},{ParameterType.PlayerID,en="Defending Player",de="Verteidiger",fr="Défenseur"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}},Text={de="{center}SOLDATEN ZERSTÖREN {cr}{cr}von der Partei: %s{cr}{cr}Anzahl: %d",en="{center}DESTROY SOLDIERS {cr}{cr}from faction: %s{cr}{cr}Amount: %d",fr="{center}DESTRUIRE DES SOLDATS {cr}{cr}de la faction: %s{cr}{cr}Nombre : %d"}}function B_Goal_DestroySoldiers:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_DestroySoldiers:AddParameter(b2,b3)if b2==0 then self.AttackingPlayer=b3*1 elseif b2==1 then self.AttackedPlayer=b3*1 elseif b2==2 then self.KillsNeeded=b3*1 end end;function B_Goal_DestroySoldiers:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local s=GetPlayerName(self.AttackedPlayer)or"Player "..self.AttackedPlayer;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Swift.Text:Localize(self.Text),s,self.KillsNeeded),b1)end;local nj=0;if Lib.QuestBehavior then nj=Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(self.AttackingPlayer,self.AttackedPlayer)end;if self.KillsNeeded<=nj then return true end end;function B_Goal_DestroySoldiers:Debug(b1)if Logic.GetStoreHouse(self.AttackingPlayer)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AttackinPlayer.." is dead :-(")return true elseif Logic.GetStoreHouse(self.AttackedPlayer)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AttackedPlayer.." is dead :-(")return true elseif self.KillsNeeded<0 then error(b1.Identifier..": "..self.Name..": Amount negative")return true end end;function B_Goal_DestroySoldiers:GetIcon()return{7,12}end;RegisterBehavior(B_Goal_DestroySoldiers)function Reprisal_SetPosition(...)return B_Reprisal_SetPosition:new(...)end;B_Reprisal_SetPosition={Name="Reprisal_SetPosition",Description={en="Reprisal: Places an entity relative to the position of another. The entity can look the target.",de="Vergeltung: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden.",fr="Rétribution: place une Entity vis-à-vis de l'emplacement d'une autre. L'entité peut être orientée vers la cible."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target position",de="Zielposition",fr="Position cible"},{ParameterType.Custom,en="Face to face",de="Ziel ansehen",fr="Voir la cible"},{ParameterType.Number,en="Distance",de="Zielentfernung",fr="Distance de la cible"}}}function B_Reprisal_SetPosition:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.FaceToFace=ToBoolean(b3)elseif b2==3 then self.Distance=b3~=nil and tonumber(b3)or 100 end end;function B_Reprisal_SetPosition:CustomFunction(b1)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;local bZ=GetID(self.Entity)local nk=GetID(self.Target)local I,J,K=Logic.EntityGetPos(nk)if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)end;local nl=Logic.GetEntityOrientation(nk)+90;if self.FaceToFace then I=I+self.Distance*math.cos(math.rad(nl))J=J+self.Distance*math.sin(math.rad(nl))Logic.DEBUG_SetSettlerPosition(bZ,I,J)LookAt(self.Entity,self.Target)else if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)end;Logic.DEBUG_SetSettlerPosition(bZ,I,J)end end;function B_Reprisal_SetPosition:GetCustomData(b2)if b2==2 then return{"true","false"}end end;function B_Reprisal_SetPosition:Debug(b1)if self.FaceToFace then if tonumber(self.Distance)==nil or self.Distance<50 then error(b1.Identifier..": "..self.Name..": Distance is nil or to short!")return true end end;if not IsExisting(self.Entity)or not IsExisting(self.Target)then error(b1.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetPosition)function Reprisal_ChangePlayer(...)return B_Reprisal_ChangePlayer:new(...)end;B_Reprisal_ChangePlayer={Name="Reprisal_ChangePlayer",Description={en="Reprisal: Changes the owner of the entity or a battalion.",de="Vergeltung: Aendert den Besitzer einer Entity oder eines Battalions.",fr="Rétribution : Change le propriétaire d'une entité ou d'un bataillon."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Reprisal_ChangePlayer:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ChangePlayer:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Player=tostring(b3)end end;function B_Reprisal_ChangePlayer:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)if Logic.IsLeader(bJ)==1 then Logic.ChangeSettlerPlayerID(bJ,self.Player)else Logic.ChangeEntityPlayerID(bJ,self.Player)end end;function B_Reprisal_ChangePlayer:GetCustomData(b2)if b2==1 then return{"0","1","2","3","4","5","6","7","8"}end end;function B_Reprisal_ChangePlayer:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_ChangePlayer)function Reprisal_SetVisible(...)return B_Reprisal_SetVisible:new(...)end;B_Reprisal_SetVisible={Name="Reprisal_SetVisible",Description={en="Reprisal: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst.",fr="Rétribution: fixe la visibilité d'une Entité. S'il s'agit d'un spawn, les Entities spawnées sont également affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Visible",de="Sichtbar",fr="Visible"}}}function B_Reprisal_SetVisible:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVisible:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Visible=ToBoolean(b3)end end;function B_Reprisal_SetVisible:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local bM=Logic.EntityGetPlayer(bJ)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)if string.find(nm,"^S_")or string.find(nm,"^B_NPC_Bandits")or string.find(nm,"^B_NPC_Barracks")then local nn={Logic.GetSpawnedEntities(bJ)}for f=1,#nn do if Logic.IsLeader(nn[f])==1 then local no={Logic.GetSoldiersAttachedToLeader(nn[f])}for aV=2,#no do Logic.SetVisible(no[aV],self.Visible)end else Logic.SetVisible(nn[f],self.Visible)end end else if Logic.IsLeader(bJ)==1 then local no={Logic.GetSoldiersAttachedToLeader(bJ)}for aV=2,#no do Logic.SetVisible(no[aV],self.Visible)end else Logic.SetVisible(bJ,self.Visible)end end end;function B_Reprisal_SetVisible:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Reprisal_SetVisible:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVisible)function Reprisal_SetVulnerability(...)return B_Reprisal_SetVulnerability:new(...)end;B_Reprisal_SetVulnerability={Name="Reprisal_SetVulnerability",Description={en="Reprisal: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen.",fr="Rétribution: rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les Entities spawnées sont affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Vulnerability",de="Verwundbar",fr="Vulnérabilité"}}}function B_Reprisal_SetVulnerability:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVulnerability:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Vulnerability=ToBoolean(b3)end end;function B_Reprisal_SetVulnerability:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)local np={bJ}if string.find(nm,"S_")or string.find(nm,"B_NPC_Bandits")or string.find(nm,"B_NPC_Barracks")then np={Logic.GetSpawnedEntities(bJ)}end;local nq="MakeInvulnerable"if self.Vulnerability then nq="MakeVulnerable"end;for f=1,#np,1 do if Logic.IsLeader(np[f])==1 then local aC={Logic.GetSoldiersAttachedToLeader(np[f])}for aV=2,#aC,1 do _G[nq](aC[aV])end end;_G[nq](np[f])end end;function B_Reprisal_SetVulnerability:GetCustomData(b2)if b2==1 then return{"true","false"}end end;function B_Reprisal_SetVulnerability:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVulnerability)function Reprisal_SetModel(...)return B_Reprisal_SetModel:new(...)end;B_Reprisal_SetModel={Name="Reprisal_SetModel",Description={en="Reprisal: Changes the model of the entity. Be careful, some models crash the game.",de="Vergeltung: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz.",fr="Rétribution: modifie le modèle d'une entité. Attention: certains modèles entraînent un crash."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Model",de="Model",fr="Modèle"}}}function B_Reprisal_SetModel:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetModel:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Model=b3 end end;function B_Reprisal_SetModel:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)Logic.SetModel(bJ,Models[self.Model])end;function B_Reprisal_SetModel:GetCustomData(b2)if b2==1 then local b5={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(b5,g)end end;table.insert(b5,"Effects_Dust01")table.insert(b5,"Effects_E_DestructionSmoke")table.insert(b5,"Effects_E_DustLarge")table.insert(b5,"Effects_E_DustSmall")table.insert(b5,"Effects_E_Firebreath")table.insert(b5,"Effects_E_Fireworks01")table.insert(b5,"Effects_E_Flies01")table.insert(b5,"Effects_E_Grasshopper03")table.insert(b5,"Effects_E_HealingFX")table.insert(b5,"Effects_E_Knight_Chivalry_Aura")table.insert(b5,"Effects_E_Knight_Plunder_Aura")table.insert(b5,"Effects_E_Knight_Song_Aura")table.insert(b5,"Effects_E_Knight_Trader_Aura")table.insert(b5,"Effects_E_Knight_Wisdom_Aura")table.insert(b5,"Effects_E_KnightFight")table.insert(b5,"Effects_E_NA_BlowingSand01")table.insert(b5,"Effects_E_NE_BlowingSnow01")table.insert(b5,"Effects_E_Oillamp")table.insert(b5,"Effects_E_SickBuilding")table.insert(b5,"Effects_E_Splash")table.insert(b5,"Effects_E_Torch")table.insert(b5,"Effects_Fire01")table.insert(b5,"Effects_FX_Lantern")table.insert(b5,"Effects_FX_SmokeBIG")table.insert(b5,"Effects_XF_BuildingSmoke")table.insert(b5,"Effects_XF_BuildingSmokeLarge")table.insert(b5,"Effects_XF_BuildingSmokeMedium")table.insert(b5,"Effects_XF_HouseFire")table.insert(b5,"Effects_XF_HouseFireLo")table.insert(b5,"Effects_XF_HouseFireMedium")table.insert(b5,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(b5,"Effects_E_KhanaTemple_Fire")table.insert(b5,"Effects_E_Knight_Saraya_Aura")end;table.sort(b5)return b5 end end;function B_Reprisal_SetModel:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;if not Models[self.Model]then error(b1.Identifier..": "..self.Name..": model '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetModel)function Reward_SetPosition(...)return B_Reward_SetPosition:new(...)end;B_Reward_SetPosition=CopyTable(B_Reprisal_SetPosition)B_Reward_SetPosition.Name="Reward_SetPosition"B_Reward_SetPosition.Description.en="Reward: Places an entity relative to the position of another. The entity can look the target."B_Reward_SetPosition.Description.de="Lohn: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden."B_Reward_SetPosition.Description.fr="Récompense: Définit une Entity vis-à-vis de la position d'une autre. L'entité peut être orientée vers la cible."B_Reward_SetPosition.GetReprisalTable=nil;B_Reward_SetPosition.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetPosition)function Reward_ChangePlayer(...)return B_Reward_ChangePlayer:new(...)end;B_Reward_ChangePlayer=CopyTable(B_Reprisal_ChangePlayer)B_Reward_ChangePlayer.Name="Reward_ChangePlayer"B_Reward_ChangePlayer.Description.en="Reward: Changes the owner of the entity or a battalion."B_Reward_ChangePlayer.Description.de="Lohn: Ändert den Besitzer einer Entity oder eines Battalions."B_Reward_ChangePlayer.Description.fr="Récompense: Change le propriétaire d'une entité ou d'un bataillon."B_Reward_ChangePlayer.GetReprisalTable=nil;B_Reward_ChangePlayer.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ChangePlayer)function Reward_MoveToPosition(...)return B_Reward_MoveToPosition:new(...)end;B_Reward_MoveToPosition={Name="Reward_MoveToPosition",Description={en="Reward: Moves an entity relative to another entity. If angle is zero the entities will be standing directly face to face.",de="Lohn: Bewegt eine Entity relativ zur Position einer anderen. Wenn Winkel 0 ist, stehen sich die Entities direkt gegenüber.",fr="Récompense: Déplace une entité par rapport à la position d'une autre. Si l'angle est égal à 0, les entités sont directement opposées."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Number,en="Angle",de="Winkel",fr="Angle"}}}function B_Reward_MoveToPosition:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveToPosition:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Target=b3 elseif b2==2 then self.Distance=b3*1 elseif b2==3 then self.Angle=b3*1 end end;function B_Reward_MoveToPosition:CustomFunction(b1)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;self.Angle=self.Angle or 0;local bZ=GetID(self.Entity)local nk=GetID(self.Target)local aJ=Logic.GetEntityOrientation(nk)local I,J,K=Logic.EntityGetPos(nk)if Logic.IsBuilding(nk)==1 then I,J=Logic.GetBuildingApproachPosition(nk)aJ=aJ-90 end;I=I+self.Distance*math.cos(math.rad(aJ+self.Angle))J=J+self.Distance*math.sin(math.rad(aJ+self.Angle))Logic.MoveSettler(bZ,I,J)self.EntityMovingJob=RequestJob(function(nr,ns)if Logic.IsEntityMoving(nr)==false then LookAt(nr,ns)return true end end,bZ,nk)end;function B_Reward_MoveToPosition:Reset(b1)if self.EntityMovingJob then EndJob(self.EntityMovingJob)end end;function B_Reward_MoveToPosition:Debug(b1)if tonumber(self.Distance)==nil or self.Distance<50 then error(b1.Identifier..": "..self.Name..": Distance is nil or to short!")return true elseif not IsExisting(self.Entity)or not IsExisting(self.Target)then error(b1.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveToPosition)function Reward_VictoryWithParty()return B_Reward_VictoryWithParty:new()end;B_Reward_VictoryWithParty={Name="Reward_VictoryWithParty",Description={en="Reward: (Singleplayer) The player wins the game with an animated festival on the market. Continue playing deleates the festival.",de="Lohn: (Einzelspieler) Der Spieler gewinnt das Spiel mit einer animierten Siegesfeier. Bei weiterspielen wird das Fest gelöscht.",fr="Récompense: (Joueur unique) Le joueur gagne la partie avec une fête de la victoire animée. Si le joueur continue à jouer, la fête est effacée."},Parameter={}}function B_Reward_VictoryWithParty:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_VictoryWithParty:AddParameter(b2,b3)end;function B_Reward_VictoryWithParty:CustomFunction(b1)if not Lib.QuestBehavior then return end;if Framework.IsNetworkGame()then error(b1.Identifier..": "..self.Name..": Can not be used in multiplayer!")return end;Victory(g_VictoryAndDefeatType.VictoryMissionComplete)local n=b1.ReceivingPlayer;local nt=Logic.GetMarketplace(n)if IsExisting(nt)then local aH=GetPosition(nt)Logic.CreateEffect(EGL_Effects.FXFireworks01,aH.X,aH.Y,0)Logic.CreateEffect(EGL_Effects.FXFireworks02,aH.X,aH.Y,0)local nu=self:GenerateParty(n)Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]=nu;Logic.ExecuteInLuaLocalState(string.format([[
                local MarketID = %d
                if IsExisting(MarketID) then
                    CameraAnimation.AllowAbort = false
                    CameraAnimation.QueueAnimation(CameraAnimation.SetCameraToEntity, MarketID)
                    CameraAnimation.QueueAnimation(CameraAnimation.StartCameraRotation, 5)
                    CameraAnimation.QueueAnimation(CameraAnimation.Stay ,9999)
                end

                GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty = GUI_Window.ContinuePlayingClicked
                GUI_Window.ContinuePlayingClicked = function()
                    GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty()
                    
                    local PlayerID = GUI.GetPlayerID()
                    GUI.SendScriptCommand("B_Reward_VictoryWithParty:ClearParty(" ..PlayerID.. ")")

                    CameraAnimation.AllowAbort = true
                    CameraAnimation.Abort()
                end
            ]],nt))end end;function B_Reward_VictoryWithParty:ClearParty(q)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]then for g,h in pairs(Lib.QuestBehavior.Global.VictoryWithPartyEntities[q])do DestroyEntity(h)end;Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]=nil end end;function B_Reward_VictoryWithParty:GenerateParty(q)local nv={}local nw=Logic.GetMarketplace(q)if nw~=nil and nw~=0 then local nx,ny=Logic.GetEntityPosition(nw)local an=Logic.CreateEntity(Entities.D_X_Garland,nx,ny,0,q)table.insert(nv,an)for aV=1,10 do for g=1,10 do local nz=nx-700+aV*150;local nA=ny-700+g*150;local nB=math.random(1,100)if nB>70 then local nC=GetRandomSettlerType()local W=math.random(1,359)local nD=Logic.CreateEntityOnUnblockedLand(nC,nz,nA,W,q)Logic.SetTaskList(nD,TaskLists.TL_WORKER_FESTIVAL_APPLAUD_SPEECH)table.insert(nv,nD)end end end end;return nv end;function B_Reward_VictoryWithParty:Debug(b1)if Lib.QuestBehavior then if Lib.QuestBehavior.Global.VictoryWithPartyEntities[b1.ReceivingPlayer]then error(b1.Identifier..": "..self.Name..": Victory festival already started for player "..b1.ReceivingPlayer.."!")return true end end;return false end;RegisterBehavior(B_Reward_VictoryWithParty)function Reward_SetVisible(...)return B_Reward_SetVisible:new(...)end;B_Reward_SetVisible=CopyTable(B_Reprisal_SetVisible)B_Reward_SetVisible.Name="Reward_SetVisible"B_Reward_SetVisible.Description.en="Reward: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVisible.Description.de="Lohn: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst."B_Reward_SetVisible.Description.fr="Récompense: Définit la visibilité d'une Entity. S'il s'agit d'un spawn, les entités spawnées sont également influencées."B_Reward_SetVisible.GetReprisalTable=nil;B_Reward_SetVisible.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVisible)function Reward_SetVulnerability(...)return B_Reward_SetVulnerability:new(...)end;B_Reward_SetVulnerability=CopyTable(B_Reprisal_SetVulnerability)B_Reward_SetVulnerability.Name="Reward_SetVulnerability"B_Reward_SetVulnerability.Description.en="Reward: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVulnerability.Description.de="Lohn: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen."B_Reward_SetVulnerability.Description.fr="Récompense: Rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les entités spawnées sont affectées."B_Reward_SetVulnerability.GetReprisalTable=nil;B_Reward_SetVulnerability.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVulnerability)function Reward_SetModel(...)return B_Reward_SetModel:new(...)end;B_Reward_SetModel=CopyTable(B_Reprisal_SetModel)B_Reward_SetModel.Name="Reward_SetModel"B_Reward_SetModel.Description.en="Reward: Changes the model of the entity. Be careful, some models crash the game."B_Reward_SetModel.Description.de="Lohn: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz."B_Reward_SetModel.Description.fr="Récompense: Modifie le modèle d'une entité. Attention : certains modèles entraînent un plantage."B_Reward_SetModel.GetReprisalTable=nil;B_Reward_SetModel.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetModel)function Reward_AI_SetEntityControlled(...)return B_Reward_AI_SetEntityControlled:new(...)end;B_Reward_AI_SetEntityControlled={Name="Reward_AI_SetEntityControlled",Description={en="Reward: Bind or Unbind an entity or a battalion to/from an AI player. The AI player must be activated!",de="Lohn: Die KI kontrolliert die Entity oder der KI die Kontrolle entziehen. Die KI muss aktiv sein!",fr="Récompense: L'IA contrôle l'entité ou retirer le contrôle à l'IA. L'IA doit être active !"},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="AI control entity",de="KI kontrolliert Entity",fr="L'IA contrôle l'entité"}}}function B_Reward_AI_SetEntityControlled:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEntityControlled:AddParameter(b2,b3)if b2==0 then self.Entity=b3 elseif b2==1 then self.Hidden=ToBoolean(b3)end end;function B_Reward_AI_SetEntityControlled:CustomFunction(b1)if not IsExisting(self.Entity)then return end;local bJ=GetID(self.Entity)local bM=Logic.EntityGetPlayer(bJ)local lH=Logic.GetEntityType(bJ)local nm=Logic.GetEntityTypeName(lH)if string.find(nm,"S_")or string.find(nm,"B_NPC_Bandits")or string.find(nm,"B_NPC_Barracks")then local nn={Logic.GetSpawnedEntities(bJ)}for f=1,#nn do if Logic.IsLeader(nn[f])==1 then AICore.HideEntityFromAI(bM,nn[f],not self.Hidden)end end else AICore.HideEntityFromAI(bM,bJ,not self.Hidden)end end;function B_Reward_AI_SetEntityControlled:GetCustomData(b2)if b2==1 then return{"false","true"}end end;function B_Reward_AI_SetEntityControlled:Debug(b1)if not IsExisting(self.Entity)then error(b1.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEntityControlled)function Trigger_AmmunitionDepleted(...)return B_Trigger_AmmunitionDepleted:new(...)end;B_Trigger_AmmunitionDepleted={Name="Trigger_AmmunitionDepleted",Description={en="Trigger: if the ammunition of the entity is depleted.",de="Auslöser: wenn die Munition der Entity aufgebraucht ist.",fr="Déclencheur: lorsque les munitions de l'entité sont épuisées."},Parameter={{ParameterType.Scriptname,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Trigger_AmmunitionDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_AmmunitionDepleted:AddParameter(b2,b3)if b2==0 then self.Scriptname=b3 end end;function B_Trigger_AmmunitionDepleted:CustomFunction()if not IsExisting(self.Scriptname)then return false end;local B=GetID(self.Scriptname)if Logic.GetAmmunitionAmount(B)>0 then return false end;return true end;function B_Trigger_AmmunitionDepleted:Debug(b1)if not IsExisting(self.Scriptname)then error(b1.Identifier..": "..self.Name..": '"..self.Scriptname.."' is destroyed!")return true end;return false end;RegisterBehavior(B_Trigger_AmmunitionDepleted)Lib.Register("module/quest/Warehouse_Behavior")B_Reward_TradePost.DEBUG_Orig_Warehouse=B_Reward_TradePost.DEBUG;B_Reward_TradePost.DEBUG=function(self,b1)local dW=Lib.Warehouse.Global:GetIndex(self.ScriptName)if dW~=0 then debug(false,b1.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return false end;return self:DEBUG_Orig_Warehouse(b1)end;B_Reward_TradePost.CustomFunction_Orig_Warehouse=B_Reward_TradePost.CustomFunction;B_Reward_TradePost.CustomFunction=function(self,b1)local dW=Lib.Warehouse.Global:GetIndex(self.ScriptName)if dW~=0 then debug(false,b1.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return end;self:CustomFunction_Orig_Warehouse(b1)end;Lib.Register("module/information/BriefingSystem_Behavior")function Reprisal_Briefing(r,pG)return B_Reprisal_Briefing:new(r,pG)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(b2,b3)if b2==0 then self.BriefingName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Briefing:CustomFunction(b1)_G[self.Function](self.BriefingName,b1.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(b1)if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Briefing)function Reward_Briefing(r,pG)return B_Reward_Briefing:new(r,pG)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Briefing)function Trigger_Briefing(r,q,dt)return B_Trigger_Briefing:new(r,q,dt)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(b2,b3)if b2==0 then self.BriefingName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Briefing:CustomFunction(b1)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Briefing)Lib.Register("module/information/CutsceneSystem_Behavior")function Reprisal_Cutscene(r,rh)return B_Reprisal_Cutscene:new(r,rh)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(b2,b3)if b2==0 then self.CutsceneName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Cutscene:CustomFunction(b1)_G[self.Function](self.CutsceneName,b1.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(b1)if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Cutscene)function Reward_Cutscene(r,rh)return B_Reward_Cutscene:new(r,rh)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Cutscene)function Trigger_Cutscene(r,q,dt)return B_Trigger_Cutscene:new(r,q,dt)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(b2,b3)if b2==0 then self.CutsceneName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Cutscene:CustomFunction(b1)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Cutscene)Lib.Register("module/information/DialogSystem_Behavior")function Reprisal_Dialog(r,rp)return B_Reprisal_Dialog:new(r,rp)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(b2,b3)if b2==0 then self.DialogName=b3 elseif b2==1 then self.Function=b3 end end;function B_Reprisal_Dialog:CustomFunction(b1)_G[self.Function](self.DialogName,b1.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(b1)if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Dialog)function Reward_Dialog(r,rp)return B_Reward_Dialog:new(r,rp)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Dialog)function Trigger_Dialog(r,q,dt)return B_Trigger_Dialog:new(r,q,dt)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(b2,b3)if b2==0 then self.DialogName=b3 elseif b2==1 then self.PlayerID=b3*1 elseif b2==2 then b3=b3 or 0;self.WaitTime=b3*1 end end;function B_Trigger_Dialog:CustomFunction(b1)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(b1)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Dialog)Lib.Register("module/information/Requester_Behavior")function Goal_Decide(...)return B_Goal_Decide:new(...)end;g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;B_Goal_Decide={Name="Goal_Decide",Description={en="Goal: Opens a Yes/No Dialog. The decision dictates the quest result (yes=true, no=false).",de="Ziel: Öffnet einen Ja/Nein-Dialog. Die Entscheidung bestimmt das Quest-Ergebnis (ja=true, nein=false).",fr="Objectif: ouvre une fenêtre de dialogue oui/non. La décision détermine le résultat de la quête (oui=true, non=false)."},Parameter={{ParameterType.Default,en="Text",de="Text",fr="Text"},{ParameterType.Default,en="Title",de="Titel",fr="Titre"},{ParameterType.Custom,en="Button labels",de="Button Beschriftung",fr="Inscription sur le bouton"}}}function B_Goal_Decide:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Decide:AddParameter(b2,b3)if b2==0 then self.Text=b3 elseif b2==1 then self.Title=b3 elseif b2==2 then self.Buttons=b3=="Ok/Cancel"or b3==true end end;function B_Goal_Decide:CustomFunction(b1)if Framework.IsNetworkGame()then return false end;if IsCinematicEventActive and IsCinematicEventActive(b1.ReceivingPlayer)then return end;if g_GoalDecideDialogDisplayed==nil then g_GoalDecideDialogDisplayed=true;ExecuteLocal([[DialogRequestBox("%s", "%s", function(_Yes) end, %s)]],self.Title,self.Text,self.Buttons and"true"or"nil")end;local iy=g_DecisionWindowResult;if iy~=nil then g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;return iy end end;function B_Goal_Decide:GetCustomData(b2)if b2==2 then return{"Yes/No","Ok/Cancel"}end end;function B_Goal_Decide:Debug(b1)if Framework.IsNetworkGame()then debug(false,b1.Identifier..": "..self.Name..": Can not be used in multiplayer!")return true end;if b1.Visible==true then debug(false,b1.Identifier..": "..self.Name..": Is supposed to be used in invisible quests!")return true end;return false end;function B_Goal_Decide:Reset()g_GoalDecideDialogDisplayed=nil end;RegisterBehavior(B_Goal_Decide)
Lib={Loader={Paths={"script/"},Version="LIB 1.0.0",Root="libertica",IsLocalEnv=GUI~=nil,IsHistoryEdition=false,Sources={},Loaded={}}}if Framework and Network then table.insert(Lib.Loader.Paths,1,"maps/externalmap/"..Framework.GetCurrentMapName().."/")Lib.Loader.IsHistoryEdition=Network.IsNATReady~=nil end;API={}QSB={}function Lib.Loader.PushPath(a)end;function Lib.Loader.Require(a)end;Lib.Require=Lib.Loader.Require;function Lib.Loader.Register(a)end;Lib.Register=Lib.Loader.Register;function Lib.Loader.LoadSourceFile(b,a)end;Lib.Register("comfort/CopyTable")function CopyTable(b,c)local d=c or{}assert(type(b)=="table","CopyTable: Source is nil!")assert(type(d)=="table")local e=0;for f=1,#b do e=e+1;if type(b[f])=="table"then table.insert(d,CopyTable(b[f]))else table.insert(d,b[f])end end;for g,h in pairs(b)do if type(g)=="number"then if g<=0 or g>e then if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end else if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end end;return d end;API.CopyTable=CopyTable;Lib.Register("comfort/GetCategoriesOfType")function GetCategoriesOfType(i)local j={}for g,h in pairs(EntityCategories)do if Logic.IsEntityTypeInCategory(i,h)==1 then table.insert(j,h)end end;return j end;Lib.Require("comfort/GetCategoriesOfType")Lib.Register("comfort/GetCategoriesOfEntity")function GetCategoriesOfEntity(k)local l=Logic.GetEntityType(k)return GetCategoriesOfType(l)end;Lib.Register("comfort/GetActivePlayers")function GetActivePlayers()local m={}for f=1,8 do if Network.IsNetworkSlotIDUsed(f)then local n=Logic.GetSlotPlayerID(f)if Logic.PlayerGetIsHumanFlag(n)and Logic.PlayerGetGameState(n)~=0 then table.insert(m,n)end end end;return m end;API.GetActivePlayers=GetActivePlayers;Lib.Require("comfort/GetActivePlayers")Lib.Register("comfort/GetDelayedPlayers")function GetDelayedPlayers()local m={}for g,h in pairs(GetActivePlayers())do if Network.IsWaitingForNetworkSlotID(API.GetPlayerSlotID(h))then table.insert(m,h)end end;return m end;API.GetDelayedPlayers=GetDelayedPlayers;Lib.Register("comfort/GetPlayerAtSlot")function GetPlayerAtSlot(o)if Network.IsNetworkSlotIDUsed(o)then local p=Logic.GetSlotPlayerID(o)if Logic.PlayerGetIsHumanFlag(p)then return p end end;return 0 end;API.GetSlotPlayerID=GetPlayerAtSlot;Lib.Register("comfort/GetSoldiersOfGroup")function GetSoldiersOfGroup(q)local r={}local s=GetID(q)assert(s~=0,"Entity does not exist.")if Logic.IsLeader(s)==1 then local t={Logic.GetSoldiersAttachedToLeader(s)}for f=2,t[1]+1 do table.insert(r,t[f])end end;return r end;API.GetSoldiersOfGroup=GetSoldiersOfGroup;Lib.Register("comfort/IsLocalScript")function IsLocalScript()return GUI~=nil end;API.IsLocalScript=IsLocalScript;Lib.Register("comfort/KeyOf")function KeyOf(u,v)if v==nil then return false end;for g,h in pairs(v)do if h==u then return g end end end;API.KeyOf=KeyOf;Lib.Register("comfort/ToBoolean")function ToBoolean(w)if type(w)=="boolean"then return w end;if type(w)=="number"then return w==1 end;if string.find(string.lower(tostring(w)),"^[1tjy\\+].*$")then return true end;return false end;API.ToBoolean=ToBoolean;Lib.Register("comfort/DumpTable")function DumpTable(x,y)local z="{"if y then z=y.." = \n"..z end;Framework.WriteToLog(z)for g,h in pairs(x)do if type(h)=="table"then Framework.WriteToLog("["..g.."] = ")DumpTable(h)elseif type(h)=="string"then Framework.WriteToLog("["..g.."] = \""..h.."\"")else Framework.WriteToLog("["..g.."] = "..tostring(h))end end;Framework.WriteToLog("}")end;API.DumpTable=DumpTable;Lib.Register("comfort/GetPosition")function GetPosition(k)if not k then return{X=0,Y=0,Z=0}end;if type(k)=="table"and k.X and k.Y then k.Z=k.Z or 0;return k end;assert(IsExisting(k),"Entity does not exist.")local A,B,C=Logic.EntityGetPos(GetID(k))return{X=A,Y=B,Z=C}end;API.GetPosition=GetPosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetDistance")function GetDistance(D,E,F)if type(D)=="string"or type(D)=="number"then D=GetPosition(D)end;if type(E)=="string"or type(E)=="number"then E=GetPosition(E)end;assert(type(D)=="table","Invalid frist position.")assert(type(E)=="table","Invalid second position.")local G=D.X-E.X;local H=D.Y-E.Y;if F then return G^2+H^2 end;return math.sqrt(G^2+H^2)end;API.GetDistance=GetDistance;Lib.Register("comfort/IsMultiplayer")function IsMultiplayer()return Framework.IsNetworkGame()end;API.IsMultiplayer=IsMultiplayer;Lib.Register("comfort/IsValidPosition")function IsValidPosition(I)if type(I)=="table"then if I.X~=nil and type(I.X)=="number"and(I.Y~=nil and type(I.Y)=="number")then local J={Logic.WorldGetSize()}if not I.Z or I.Z>=0 then if I.X<J[1]and I.X>0 and I.Y<J[2]and I.Y>0 then return true end end end end;return false end;API.IsValidPosition=IsValidPosition;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetCirclePosition")function GetCirclePosition(K,L,M)if not IsValidPosition(K)and not IsExisting(K)then error(false,"Target does not exist or is invalid position!")end;local N=K;local O=0+(M or 0)if type(K)~="table"then local s=GetID(K)O=Logic.GetEntityOrientation(s)+(M or 0)N=GetPosition(s)end;local d={X=N.X+L*math.cos(math.rad(O)),Y=N.Y+L*math.sin(math.rad(O)),Z=N.Z}return d end;API.GetRelatiePos=GetCirclePosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetGeometricFocus")function GetGeometricFocus(...)local arg={...}local P={X=0,Y=0,Z=0}local Q=0;for f=1,#arg do local N=GetPosition(arg[f])if N then P.X=P.X+N.X;P.Y=P.Y+N.Y;P.Z=P.Z+(N.Z or 0)Q=Q+1 end end;return{X=P.X*1/Q,Y=P.Y*1/Q,Z=P.Z*1/Q}end;API.GetGeometricFocus=GetGeometricFocus;Lib.Register("comfort/GetSiegecartTypeByEngineType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_MilitaryBatteringRam]=Entities.U_BatteringRamCart,[Entities.U_MilitaryCatapult]=Entities.U_CatapultCart,[Entities.U_MilitarySiegeTower]=Entities.U_SiegeTowerCart}end;function GetSiegecartTypeByEngineType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Register("comfort/IsHistoryEdition")function IsHistoryEdition()return Network.IsNATReady~=nil end;API.IsHistoryEdition=IsHistoryEdition;Lib.Register("comfort/IsMultiplayerReady")function IsMultiplayerReady()return Framework.IsNetworkGame()and Network.SessionHaveAllPlayersFinishedLoading()==true end;API.IsMultiplayerReady=IsMultiplayerReady;Lib.Register("comfort/Round")function Round(R,S)S=math.ceil(S or 0)if S<=0 then return math.floor(R+0.5)end;return tonumber(string.format("%."..S.."f",R))end;API.Round=Round;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetAngleBetween")function GetAngleBetween(D,E)local T=0;local U=0;local V=0;if type(D)=="string"or type(D)=="number"then D=GetPosition(GetID(D))end;if type(E)=="string"or type(E)=="number"then E=GetPosition(GetID(E))end;assert(D~=nil)assert(E~=nil)T=D.X-E.X;U=D.Y-E.Y;if T==0 and U==0 then return 0 end;V=math.deg(math.asin(math.abs(T)/math.sqrt(T%2+U%2)))if T>=0 and U>0 then V=270-V elseif T<0 and U>0 then V=270+V elseif T<0 and U<=0 then V=90-V elseif T>=0 and U<=0 then V=90+V end;return V end;API.GetAngleBetween=GetAngleBetween;Lib.Require("comfort/GetDistance")Lib.Register("comfort/GetClosestToTarget")function GetClosestToTarget(K,W)local X=0;local Y=Logic.WorldGetSize()^2;for f=1,#W,1 do assert(type(W[f])~="table","Invalid entity.")local Z=GetDistance(W[f],K,true)if Z<Y then Y=Z;X=W[f]end end;return X end;API.GetClosestToTarget=GetClosestToTarget;Lib.Register("comfort/GetHealth")function GetHealth(k)local s=GetID(k)if IsExisting(s)then local _=Logic.GetEntityMaxHealth(s)local a0=Logic.GetEntityHealth(s)return a0/_*100 end;return 0 end;API.GetHealth=GetHealth;Lib.Register("comfort/GetSiegeengineTypeByCartType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_BatteringRamCart]=Entities.U_MilitaryBatteringRam,[Entities.U_CatapultCart]=Entities.U_MilitaryCatapult,[Entities.U_SiegeTowerCart]=Entities.U_MilitarySiegeTower}end;function GetSiegeengineTypeByCartType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Require("comfort/GetAngleBetween")Lib.Register("comfort/IsInCone")function IsInCone(a1,a2,a3,a4)local a5=GetAngleBetween(a2,a1)local a6=a3-a4;local a7=a3+a4;if a5>=a6 and a5<=a7 then return true end;if(a5+180)%360>=(a6+180)%360 and(a5+180)%360<=(a7+180)%360 then return true end;return false end;API.IsInCone=IsInCone;Lib.Register("comfort/SerializeTable")function SerializeTable(x)local a8="{"for g,h in pairs(x)do local a9=type(g)=="string"and g or"["..g.."]"if type(h)=="table"then a8=a8 ..a9 .." = "..SerializeTable(h)..", "elseif type(h)=="number"then a8=a8 ..a9 .." = "..h..", "elseif type(h)=="string"then a8=a8 ..a9 .." = \""..h.."\", "elseif type(h)=="boolean"or type(h)=="nil"then a8=a8 ..a9 .." = "..tostring(h)..", "else a8=a8 ..a9 .." = \""..tostring(h).."\", "end end;a8=a8 .."}"return a8 end;API.SerializeTable=SerializeTable;Lib.Register("comfort/global/CreateCartByGoodType")function CreateCartByGoodType(aa,a1,ab,ac,ad)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")ac=ac or 0;local ae=0;local N=GetID(a1)assert(N~=0,"Entity does not exist.")local A,B,C=Logic.EntityGetPos(N)if Logic.IsBuilding(N)==1 then A,B=Logic.GetBuildingApproachPosition(N)ac=Logic.GetEntityOrientation(N)-90 end;local af=Logic.GetGoodCategoryForGoodType(ab)if af==GoodCategories.GC_Resource then ae=Logic.CreateEntityOnUnblockedLand(Entities.U_ResourceMerchant,A,B,ac,aa)elseif ab==Goods.G_Medicine then ae=Logic.CreateEntityOnUnblockedLand(Entities.U_Medicus,A,B,ac,aa)elseif ab==Goods.G_Gold or ab==Goods.G_None or ab==Goods.G_Information then if ad then ae=Logic.CreateEntityOnUnblockedLand(ad,A,B,ac,aa)else ae=Logic.CreateEntityOnUnblockedLand(Entities.U_GoldCart,A,B,ac,aa)end else ae=Logic.CreateEntityOnUnblockedLand(Entities.U_Marketer,A,B,ac,aa)end;return ae end;API.CreateCartByGoodType=CreateCartByGoodType;Lib.Register("comfort/global/CreateEntityName")CreateEntityName_Sequence_ID=0;function CreateEntityName(ag)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")if type(ag)=="string"then return ag else assert(type(ag)=="number","Invalid entity ID.")local ah=Logic.GetEntityName(ag)if type(ah)~="string"or ah==""then CreateEntityName_Sequence_ID=CreateEntityName_Sequence_ID+1;ah="AutomaticScriptName_"..CreateEntityName_Sequence_ID;Logic.SetEntityName(ag,ah)end;return ah end end;API.CreateEntityName=CreateEntityName;Lib.Register("comfort/global/CreateStock")function CreateStock(aa,ab)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local af=Logic.GetGoodCategoryForGoodType(ab)if af==GoodCategories.GC_Resource or ab==Goods.G_None then local ai=Logic.GetStoreHouse(aa)local aj=Logic.GetHeadquarters(aa)if ai~=0 and Logic.GetIndexOnInStockByGoodType(ai,ab)==-1 then if ab~=Goods.G_Gold or ab==Goods.G_Gold and aj==0 then Logic.AddGoodToStock(ai,ab,0,true,true)end end end end;API.CreateStock=CreateStock;Lib.Register("comfort/global/GetQuestID")function GetQuestID(y)if type(y)=="number"then return y end;for g,h in pairs(Quests)do if h and g>0 then if h.Identifier==y then return g end end end;return-1 end;API.GetQuestID=GetQuestID;Lib.Require("comfort/global/GetQuestID")Lib.Register("comfort/global/IsValidQuest")function IsValidQuest(ak)return Quests[ak]~=nil or Quests[GetQuestID(ak)]~=nil end;API.IsValidQuest=IsValidQuest;Lib.Register("comfort/global/IsValidQuestName")CONST_REGEX_QUEST_NAME="^[A-Za-z0-9_ @ÄÖÜäöüß]+$"function IsValidQuestName(y)return string.find(y,CONST_REGEX_QUEST_NAME)~=nil end;API.IsValidQuestName=IsValidQuestName;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/LookAt")function LookAt(k,K)local al=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(al~=0,"Looking entity does not exist!")local am,an,ao=Logic.EntityGetPos(al)local ap;local aq,ar,as;if type(K)=="table"then aq=K.X;ar=K.Y;as=K.Z else ap=GetID(K)assert(ap~=0,"Target entity does not exist!")aq,ar,as=Logic.EntityGetPos(ap)end;assert(IsValidPosition({X=am,Y=an,Z=ao}),"Invalid looking position!")assert(IsValidPosition({X=aq,Y=ar,Z=as}),"Invalid target position!")Angle=math.deg(math.atan2(ar-an,aq-am))Angle=Angle<0 and Angle+360 or Angle;if Logic.IsLeader(al)==1 then local at={Logic.GetSoldiersAttachedToLeader(al)}for f=2,at[1]+1 do Logic.SetOrientation(at[f],Angle)end end;Logic.SetOrientation(al,Angle)end;API.LookAt=LookAt;Lib.Register("comfort/global/Move")function Move(k,K,au)local ae=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(ae~=0,"Moving entity does not exist!")local av;if type(K)~="table"then local ap=GetID(K)local A,B,C=Logic.EntityGetPos(ap)av={X=A,Y=B}else av=K end;if au then Logic.MoveEntity(ae,av.X,av.Y)if Logic.IsSettler(ae)==1 then Logic.SetTaskList(ae,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(ae,av.X,av.Y)end;StartSimpleJobEx(function(aw,K)if not IsExisting(aw)then return true end;if Logic.IsEntityMoving(aw)==false then if Logic.IsSettler(aw)==1 then Logic.SetTaskList(aw,TaskLists.TL_NPC_IDLE)end;return true end end,ae,av)end;API.Move=Move;Lib.Register("comfort/global/ReplaceEntity")function ReplaceEntity(k,i,ax)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local al=GetID(k)if al==0 then return 0 end;local ay=GetPosition(al)local az=ax or Logic.EntityGetPlayer(al)local aA=Logic.GetEntityOrientation(al)local ah=Logic.GetEntityName(al)DestroyEntity(al)local ap=Logic.CreateEntity(i,ay.X,ay.Y,aA,az)Logic.SetEntityName(ap,ah)if Logic.IsSettler(ap)==1 then Logic.SetTaskList(ap,TaskLists.TL_NPC_IDLE)end;return ap end;API.ReplaceEntity=ReplaceEntity;Lib.Require("comfort/global/CreateStock")Lib.Require("comfort/global/CreateCartByGoodType")Lib.Register("comfort/global/SendCart")function SendCart(a1,aa,ab,aB,ad,aC,aD)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local aE=GetID(a1)if not IsExisting(aE)then return 0 end;local O=Logic.GetEntityOrientation(aE)local aF=Logic.GetEntityName(aE)local ae=CreateCartByGoodType(aa,aE,ab,O,ad)assert(ae~=0,"Cart was not created properly.")CreateStock(aa,ab)Logic.HireMerchant(ae,aa,ab,aB,aa,aC)if aD and Logic.IsBuilding(aE)==0 then Logic.SetEntityName(ae,aF)DestroyEntity(aE)end;return ae end;API.SendCart=SendCart;Lib.Register("comfort/global/SetHealth")function SetHealth(k,aG)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(type(aG)=="number"and aG>=0)local s=GetID(k)assert(s~=0,"Entity does not exist.")assert(Logic.IsLeader(s)==0,"Can not be used on groups.")local _=Logic.GetEntityMaxHealth(s)local a0=math.max(math.min(aG,_),0)local aH=Logic.GetEntityHealth(s)local aI=math.ceil(_*a0/100)if aI>aH then Logic.HealEntity(s,aI-aH)elseif aI<aH then Logic.HurtEntity(s,aH-aI)end end;API.SetHealth=SetHealth;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/SetPosition")function SetPosition(k,K)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local ae=GetID(k)if not ae then return end;local av=GetPosition(K)assert(IsValidPosition(av),"Invalid position.")for g,h in pairs(GetSoldiersOfGroup(ae))do SetPosition(h,K)end;Logic.DEBUG_SetSettlerPosition(ae,av.X,av.Y)end;API.SetPosition=SetPosition;Lib.Register("comfort/local/Test")Lib.Core=Lib.Core or{}Lib.Core.Report={ScriptEventRegister={},ScriptEventListener={},ScriptCommandRegister={},ScriptCommandSequence=0}Report={}Command={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_Report")function Lib.Core.Report:Initialize()if not IsLocalScript()then self:OverrideSoldierPayment()Lib.Core.Report:CreateScriptCommand("Cmd_SendReportToGlobal",function(aw,...)SendReport(aw,...)end)end end;function Lib.Core.Report:OnSaveGameLoaded()end;function Lib.Core.Report:OnReportReceived(aw,...)end;function Lib.Core.Report:OverrideSoldierPayment()GameCallback_SetSoldierPaymentLevel_Orig_Libertica=GameCallback_SetSoldierPaymentLevel;GameCallback_SetSoldierPaymentLevel=function(aa,aJ)if aJ<=2 then return GameCallback_SetSoldierPaymentLevel_Orig_Libertica(aa,aJ)end;Lib.Core.Event:ProcessScriptCommand(aa,aJ)end end;function Lib.Core.Report:ProcessScriptCommand(aa,aw)assert(aw and self.ScriptCommandRegister[aw],"Commands is invalid.")local aK=Logic.GetPlayerName(aa+4)local aL=self:DecodeScriptCommandParameters(aK)self.ScriptCommandRegister[aw][2](unpack(aL))end;function Lib.Core.Report:CreateScriptCommand(y,aM)assert(not IsLocalScript(),"Commands must be created in global script.")self.ScriptCommandSequence=self.ScriptCommandSequence+1;local ae=self.ScriptCommandSequence;local Name=y;if string.find(y,"^Cmd_")then Name=string.sub(y,5)end;self.ScriptCommandRegister[ae]={Name,aM}ExecuteLocal([[
        local ID, Name = %d, "%s"
        Lib.Core.Report.ScriptCommandRegister[ID] = Name
        Command[Name] = ID
    ]],ae,Name)end;function Lib.Core.Report:DecodeScriptCommandParameters(aN)local aL={}for g,h in pairs(string.slice(aN,"#"))do local aO=h;aO=aO:replaceAll("<<<HT>>>",'#')aO=aO:replaceAll("<<<QT>>>",'"')aO=aO:replaceAll("<<<ES>>>",'')if aO==nil then aO=nil elseif aO=="true"or aO=="false"then aO=aO=="true"elseif string.indexOf(aO,"{")==1 then local aP=string.slice(string.sub(aO,2,string.len(aO)-1),",")aO={}for f=1,#aP do aO[f]=tonumber(aP[f])~=nil and tonumber(aP[f])or aP end elseif tonumber(aO)~=nil then aO=tonumber(aO)end;table.insert(aL,aO)end;return aL end;function Lib.Core.Report:SendScriptCommand(aw,...)assert(IsLocalScript(),"Commands must be send in local script.")assert(aw and self.ScriptCommandRegister[aw],"Command is invalid.")local n=GUI.GetPlayerID()local aQ=n+4;local aK=Logic.GetPlayerName(aQ)local aL=self:EncodeScriptCommandParameters(...)GUI.SetPlayerName(aQ,aL)if IsHistoryEdition()and IsMultiplayer()then GUI.SetSoldierPaymentLevel(aw)else ExecuteGlobal([[Lib.Core.Report:ProcessScriptCommand(%d, %d)]],n,aw)end;GUI.SetPlayerName(aQ,aK)GUI.SetSoldierPaymentLevel(PlayerSoldierPaymentLevel[n])end;function Lib.Core.Report:EncodeScriptCommandParameters(...)local aR=""for f=1,#arg do local aS=arg[f]if type(aS)=="string"then aS=aS:gsub('#',"<<<HT>>>")aS=aS:gsub('"',"<<<QT>>>")if aS:len()==0 then aS="<<<ES>>>"end elseif type(aS)=="table"then aS="{"..table.concat(aS,",").."}"end;if string.len(aR)>0 then aR=aR.."#"end;aR=aR..tostring(aS)end;return aR end;function Lib.Core.Report:CreateReport(y)assert(type(y)=="string","Report name must be a string.")for f=1,#self.ScriptEventRegister,1 do if self.ScriptEventRegister[f]==y then assert(false,"Report already exists")return 0 end end;local ae=#self.ScriptEventRegister+1;self.ScriptEventRegister[ae]=y;self.ScriptEventListener[ae]={SequenceID=0}return ae end;function Lib.Core.Report:SendReport(aw,...)assert(self.ScriptEventRegister[aw]~=nil,"Report type does not exist.")if GameCallback_Lib_OnEventReceived then GameCallback_Lib_OnEventReceived(aw,...)end;if self.ScriptEventListener[aw]then for g,h in pairs(self.ScriptEventListener[aw])do if tonumber(g)then h(...)end end end end;function Lib.Core.Report:CreateReportReceiver(aT,aM)assert(type(aM)=="function","Listener must be a function.")assert(self.ScriptEventRegister[aT]~=nil,"Event does not exist.")local aU=self.ScriptEventListener[aT]self.ScriptEventListener[aT].SequenceID=aU.SequenceID+1;self.ScriptEventListener[aT][aU.SequenceID]=aM;return aU.IDSequence end;function Lib.Core.Report:RemoveReportReceiver(aT,aw)assert(self.ScriptEventRegister[aT]~=nil,"Event does not exist.")self.ScriptEventListener[aT][aw]=nil end;function CreateReport(y)return Lib.Core.Report:CreateReport(y)end;API.CreateScriptEvent=CreateReport;function SendReport(aw,...)local arg={...}Lib.Core.Report:SendReport(aw,unpack(arg))end;API.SendScriptEvent=SendReport;function SendReportToGlobal(aw,...)assert(IsLocalScript(),"Was called from global script.")local arg={...}Lib.Core.Report:SendScriptCommand(Command.SendReportToGlobal,aw,unpack(arg))end;API.SendScriptEventToGlobal=SendReportToGlobal;function SendReportToLocal(aw,...)assert(not IsLocalScript(),"Was called from local script.")local arg={...}if#arg>0 then local aS=""for f=1,#arg do if f>1 then aS=aS..","end;if type(arg[f])=="string"then aS=aS.."\""..arg[f].."\""elseif type(arg[f])=="table"then aS=aS..table.tostring(arg[f])else aS=aS..tostring(arg[f])end end;ExecuteLocal([[SendReport(%d, %s)]],aw,aS)else ExecuteLocal([[SendReport(%d)]],aw)end end;API.SendScriptEventToLocal=SendReportToLocal;function CreateReportReceiver(aT,aM)return Lib.Core.Report:CreateReportReceiver(aT,aM)end;API.CreateScriptEventReceiver=CreateReportReceiver;function RemoveReportReceiver(aT,aw)Lib.Core.Report:RemoveReportReceiver(aT,aw)end;API.RemoveScriptEventReceiver=RemoveReportReceiver;Lib.Core=Lib.Core or{}Lib.Core.Quest={QuestCounter=0,Text={ActivateBuff={Pattern={de="BONUS AKTIVIEREN{cr}{cr}%s",en="ACTIVATE BUFF{cr}{cr}%s",fr="ACTIVER BONUS{cr}{cr}%s"},BuffsVanilla={["Buff_Spice"]={de="Salz",en="Salt",fr="Sel"},["Buff_Colour"]={de="Farben",en="Color",fr="Couleurs"},["Buff_Entertainers"]={de="Entertainer",en="Entertainer",fr="Artistes"},["Buff_FoodDiversity"]={de="Vielfältige Nahrung",en="Food diversity",fr="Diversité alimentaire"},["Buff_ClothesDiversity"]={de="Vielfältige Kleidung",en="Clothes diversity",fr="Diversité vestimentaire"},["Buff_HygieneDiversity"]={de="Vielfältige Reinigung",en="Hygiene diversity",fr="Diversité hygiénique"},["Buff_EntertainmentDiversity"]={de="Vielfältige Unterhaltung",en="Entertainment diversity",fr="Diversité des dievertissements"},["Buff_Sermon"]={de="Predigt",en="Sermon",fr="Sermon"},["Buff_Festival"]={de="Fest",en="Festival",fr="Festival"},["Buff_ExtraPayment"]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},["Buff_HighTaxes"]={de="Hohe Steuern",en="High taxes",fr="Hautes taxes"},["Buff_NoPayment"]={de="Kein Sold",en="No payment",fr="Aucun paiement"},["Buff_NoTaxes"]={de="Keine Steuern",en="No taxes",fr="Aucune taxes"}},BuffsEx1={["Buff_Gems"]={de="Edelsteine",en="Gems",fr="Gemmes"},["Buff_MusicalInstrument"]={de="Musikinstrumente",en="Musical instruments",fr="Instruments musicaux"},["Buff_Olibanum"]={de="Weihrauch",en="Olibanum",fr="Encens"}}},SoldierCount={Pattern={de="SOLDATENANZAHL {cr}Partei: %s{cr}{cr}%s %d",en="SOLDIER COUNT {cr}Faction: %s{cr}{cr}%s %d",fr="NOMBRE DE SOLDATS {cr}Faction: %s{cr}{cr}%s %d"},Relation={["true"]={de="Weniger als ",en="Less than ",fr="Moins de"},["false"]={de="Mindestens ",en="At least ",fr="Au moins"}}},Festivals={Pattern={de="FESTE FEIERN {cr}{cr}Partei: %s{cr}{cr}Anzahl: %d",en="HOLD PARTIES {cr}{cr}Faction: %s{cr}{cr}Amount: %d",fr="FESTIVITÉS {cr}{cr}Faction: %s{cr}{cr}Nombre : %d"}}}}CONST_EFFECT_NAME_TO_ID={}CONST_INITIALIZED_OBJECTS={}CONST_REFILL_AMOUNT={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/ToBoolean")Lib.Require("comfort/GetHealth")Lib.Require("comfort/CopyTable")Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/SendCart")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Quest")function SaveCustomVariable(y,R)Lib.Core.Quest:SetCustomVariable(y,R)end;function ObtainCustomVariable(y,aV)local aO=Lib.CustomVariable[y]if not aO and aV then aO=aV end;return aO end;function Lib.Core.Quest:Initialize()Report.CustomValueChanged=CreateReport("Event_CustomValueChanged")Report.QuestFailure=CreateReport("Event_QuestFailure")Report.QuestInterrupt=CreateReport("Event_QuestInterrupt")Report.QuestReset=CreateReport("Event_QuestReset")Report.QuestSuccess=CreateReport("Event_QuestSuccess")Report.QuestTrigger=CreateReport("Event_QuestTrigger")if not IsLocalScript()then self:OverrideQuestSystemGlobal()self:OverrideQuestMarkers()self:OverwriteGeologistRefill()end;if IsLocalScript()then self:OverrideDisplayQuestObjective()end end;function Lib.Core.Quest:OnSaveGameLoaded()end;function Lib.Core.Quest:OnReportReceived(aw,...)end;function Lib.Core.Quest:OverrideQuestMarkers()QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then DestroyQuestMarker(self.Objectives[f].Data[2])end end end end;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then ShowQuestMarker(self.Objectives[f].Data[2])end end end end;function ShowQuestMarker(k)local aW=GetID(k)local A,B=Logic.GetEntityPosition(aW)local aX=EGL_Effects.E_Questmarker_low;if Logic.IsBuilding(aW)==1 then aX=EGL_Effects.E_Questmarker end;DestroyQuestMarker(k)Questmarkers[aW]=Logic.CreateEffect(aX,A,B,0)end;function DestroyQuestMarker(k)local aW=GetID(k)if Questmarkers[aW]~=nil then Logic.DestroyEffect(Questmarkers[aW])Questmarkers[aW]=nil end end end;function Lib.Core.Quest:OverrideDisplayQuestObjective()GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(aY,aZ)local a_,b0=GUI_Interaction.GetPotentialSubQuestAndType(aY)if b0==Objective.Distance then if a_.Objectives[1].Data[1]==-65566 then a_.Objectives[1].Data[1]=Logic.GetKnightID(a_.ReceivingPlayer)end end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core(aY,aZ)end end;function Lib.Core.Quest:IsQuestPositionReached(b1,b2)local b3=GetID(b2.Data[1])if b3==-65566 then b2.Data[1]=Logic.GetKnightID(b1.ReceivingPlayer)b3=b2.Data[1]end;local b4=GetID(b2.Data[2])b2.Data[3]=b2.Data[3]or 2500;if not(Logic.IsEntityDestroyed(b3)or Logic.IsEntityDestroyed(b4))then if Logic.GetDistanceBetweenEntities(b3,b4)<=b2.Data[3]then DestroyQuestMarker(b4)return true end else DestroyQuestMarker(b4)return false end end;function Lib.Core.Quest:OverwriteGeologistRefill()if Framework.GetGameExtraNo()>=1 then GameCallback_OnGeologistRefill_Orig_Lib_Core=GameCallback_OnGeologistRefill;GameCallback_OnGeologistRefill=function(aa,b5,b6)GameCallback_OnGeologistRefill_Orig_Lib_Core(aa,b5,b6)if CONST_REFILL_AMOUNT[b5]then local b7=CONST_REFILL_AMOUNT[b5]local b8=b7+math.random(1,math.floor(b7*0.2+0.5))Logic.SetResourceDoodadGoodAmount(b5,b8)if b8>0 then if Logic.GetResourceDoodadGoodType(b5)==Goods.G_Iron then Logic.SetModel(b5,Models.Doodads_D_SE_ResourceIron)else Logic.SetModel(b5,Models.R_ResorceStone_Scaffold)end end end end end end;function Lib.Core.Quest:TriggerEntityKilledCallbacks(k,b9)local ba=GetID(k)local bb=GetID(b9 or 0)if bb==0 or ba==0 or Logic.GetEntityHealth(ba)>0 then return end;local A,B,C=Logic.EntityGetPos(ba)local bc=Logic.EntityGetPlayer(ba)local bd=Logic.GetEntityType(ba)local be=Logic.EntityGetPlayer(bb)local bf=Logic.GetEntityType(bb)GameCallback_EntityKilled(ba,bc,bb,be,bd,bf)Logic.ExecuteInLuaLocalState(string.format("GameCallback_Feedback_EntityKilled(%d, %d, %d, %d,%d, %d, %f, %f)",ba,bc,bb,be,bd,bf,A,B))end;function Lib.Core.Quest:GetCustomVariable(y)return Lib.CustomVariable[y]end;function Lib.Core.Quest:SetCustomVariable(y,R)self:UpdateCustomVariable(y,R)local aO=tostring(R)if type(R)~="number"then aO=[["]]..aO..[["]]end;if not GUI then ExecuteLocal([[Lib.Core.Quest:UpdateCustomVariable("%s", %s)]],y,aO)end end;function Lib.Core.Quest:UpdateCustomVariable(y,R)if Lib.CustomVariable[y]then local bg=Lib.CustomVariable[y]Lib.CustomVariable[y]=R;SendReport(Report.CustomValueChanged,y,bg,R)else Lib.CustomVariable[y]=R;SendReport(Report.CustomValueChanged,y,nil,R)end end;function InteractiveObjectActivate(bh,bi)bi=bi or 0;if GUI or not IsExisting(bh)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bh),f,bi)end end;API.InteractiveObjectActivate=InteractiveObjectActivate;function InteractiveObjectDeactivate(bh)if GUI or not IsExisting(bh)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bh),f,2)end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Lib.Core.Quest:OverrideQuestSystemGlobal()QuestTemplate.Trigger_Orig_QSB_Core=QuestTemplate.Trigger;QuestTemplate.Trigger=function(b1)QuestTemplate.Trigger_Orig_QSB_Core(b1)local bj=GetQuestID(b1.Identifier)for f=1,b1.Objectives[0]do if b1.Objectives[f].Type==Objective.Custom2 and b1.Objectives[f].Data[1].SetDescriptionOverwrite then local bk=b1.Objectives[f].Data[1]:SetDescriptionOverwrite(b1)Lib.Core.Quest:ChangeCustomQuestCaptionText(bk,b1)break end end;SendReport(Report.QuestTrigger,bj)SendReportToLocal(Report.QuestTrigger,bj)end;QuestTemplate.Interrupt_Orig_QSB_Core=QuestTemplate.Interrupt;QuestTemplate.Interrupt=function(b1)b1:Interrupt_Orig_QSB_Core()local bj=GetQuestID(b1.Identifier)for f=1,b1.Objectives[0]do if b1.Objectives[f].Type==Objective.Custom2 and b1.Objectives[f].Data[1].Interrupt then b1.Objectives[f].Data[1]:Interrupt(b1,f)end end;for f=1,b1.Triggers[0]do if b1.Triggers[f].Type==Triggers.Custom2 and b1.Triggers[f].Data[1].Interrupt then b1.Triggers[f].Data[1]:Interrupt(b1,f)end end;SendReport(Report.QuestInterrupt,bj)SendReportToLocal(Report.QuestInterrupt,bj)end;QuestTemplate.Fail_Orig_QSB_Core=QuestTemplate.Fail;QuestTemplate.Fail=function(b1)b1:Fail_Orig_QSB_Core()local bj=GetQuestID(b1.Identifier)SendReport(Report.QuestFailure,bj)SendReportToLocal(Report.QuestFailure,bj)end;QuestTemplate.Success_Orig_QSB_Core=QuestTemplate.Success;QuestTemplate.Success=function(b1)b1:Success_Orig_QSB_Core()local bj=GetQuestID(b1.Identifier)SendReport(Report.QuestSuccess,bj)SendReportToLocal(Report.QuestSuccess,bj)end end;function Lib.Core.Quest:ChangeCustomQuestCaptionText(bl,b1)if b1 and b1.Visible then b1.QuestDescription=bl;ExecuteLocal([[
            XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/BGDeco",0)
            local identifier = "%s"
            for i=1, Quests[0] do
                if Quests[i].Identifier == identifier then
                    local text = Quests[i].QuestDescription
                    XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/Text", "%s")
                    break
                end
            end
        ]],b1.Identifier,bl)end end;function SetResourceAmount(k,bm,bn)if GUI or not IsExisting(k)then return end;assert(type(bm)=="number")assert(type(bn)=="number")local s=GetID(k)if IsExisting(s)and Logic.GetResourceDoodadGoodType(s)~=0 then if Logic.GetResourceDoodadGoodAmount(s)==0 then s=ReplaceEntity(s,Logic.GetEntityType(s))end;Logic.SetResourceDoodadGoodAmount(s,bm)CONST_REFILL_AMOUNT[s]=bn end end;function SetCustomBehaviorText(bo,bl)local bj=GetQuestID(bo)local a_=Quests[bj]assert(a_~=nil,"Quest '"..bo.."' not found!")Lib.Core.Quest:ChangeCustomQuestCaptionText(bl,a_)end;API.SetCustomBehaviorText=SetCustomBehaviorText;function RestartQuest(bo,bp)local bj=GetQuestID(bo)local a_=Quests[bj]if a_ then if not bp then Logic.DEBUG_AddNote("restart quest "..bo)end;if a_.Objectives then local bq=a_.Objectives;for f=1,bq[0]do local br=bq[f]br.Completed=nil;local bs=br.Type;if bs==Objective.Deliver then local bt=br.Data;bt[3]=nil;bt[4]=nil;bt[5]=nil;bt[9]=nil elseif g_GameExtraNo and g_GameExtraNo>=1 and bs==Objective.Refill then br.Data[2]=nil elseif bs==Objective.Protect or bs==Objective.Object then local bt=br.Data;for bu=1,bt[0],1 do bt[-bu]=nil end elseif bs==Objective.DestroyEntities and br.Data[1]==2 and br.DestroyTypeAmount then br.Data[3]=br.DestroyTypeAmount elseif bs==Objective.DestroyEntities and br.Data[1]==3 then br.Data[4]=nil;br.Data[5]=nil elseif bs==Objective.Distance then if br.Data[1]==-65565 then br.Data[4].NpcInstance=nil end elseif bs==Objective.Custom2 and br.Data[1].Reset then br.Data[1]:Reset(a_,f)end end end;local function bv(bw,bx)local a_=a_;local by=a_[bw]if by then for f=1,by[0]do local bz=by[f]if bz.Type==bx then local bA=bz.Data[1]if bA and bA.Reset then bA:Reset(a_,f)end end end end end;bv("Triggers",Triggers.Custom2)bv("Rewards",Reward.Custom)bv("Reprisals",Reprisal.Custom)a_.Result=nil;local bB=a_.State;a_.State=QuestState.NotTriggered;ExecuteLocal("LocalScriptCallback_OnQuestStatusChanged(%d)",a_.Index)if bB==QuestState.Over then a_.Job=Trigger.RequestTrigger(Events.LOGIC_EVENT_EVERY_SECOND,"","Quest_Loop",1,0,{a_.QueueID})end;SendReport(Report.QuestReset,bj)SendReportToLocal(Report.QuestReset,bj)end;return bj,a_ end;API.RestartQuest=RestartQuest;function FailQuest(bo,bp)local bj=GetQuestID(bo)local a_=Quests[bj]if a_ then if not bp then Logic.DEBUG_AddNote("fail quest "..bo)end;a_:RemoveQuestMarkers()a_:Fail()end end;API.FailQuest=FailQuest;function StartQuest(bo,bp)local bj=GetQuestID(bo)local a_=Quests[bj]if a_ then if not bp then Logic.DEBUG_AddNote("start quest "..bo)end;a_:SetMsgKeyOverride()a_:SetIconOverride()a_:Trigger()end end;API.StartQuest=StartQuest;function StopQuest(bo,bp)local bj=GetQuestID(bo)local a_=Quests[bj]if a_ then if not bp then Logic.DEBUG_AddNote("interrupt quest "..bo)end;a_:RemoveQuestMarkers()a_:Interrupt(-1)end end;API.StopQuest=StopQuest;function WinQuest(bo,bp)local bj=GetQuestID(bo)local a_=Quests[bj]if a_ then if not bp then Logic.DEBUG_AddNote("win quest "..bo)end;a_:RemoveQuestMarkers()a_:Success()end end;API.WinQuest=WinQuest;Lib.Core=Lib.Core or{}Lib.Core.Job={EventJobMappingID=0,EventJobMapping={},EventJobs={},SecondsSinceGameStart=0,LastTimeStamp=0}Lib.Register("core/feature/Core_Job")function Lib.Core.Job:Initialize()self:StartJobs()end;function Lib.Core.Job:OnSaveGameLoaded()end;function Lib.Core.Job:OnReportReceived(aw,...)end;function Lib.Core.Job:StartJobs()self:CreateEventJob(Events.LOGIC_EVENT_EVERY_TURN,function()Lib.Core.Job:RealtimeController()end)end;function Lib.Core.Job:CreateEventJob(i,aM,...)self.EventJobMappingID=self.EventJobMappingID+1;local ae=Trigger.RequestTrigger(i,"","LiberticaCore_Job_EventJobExecutor",1,{},{self.EventJobMappingID})self.EventJobs[ae]={ae,true,aM,arg}self.EventJobMapping[self.EventJobMappingID]=ae;return ae end;function Lib.Core.Job:EventJobExecutor(bC)local ae=self.EventJobMapping[bC]if ae and self.EventJobs[ae]and self.EventJobs[ae][2]then local aS=self.EventJobs[ae][4]if self.EventJobs[ae][3](unpack(aS))then self.EventJobs[ae][2]=false end end end;function Lib.Core.Job:RealtimeController()if not self.LastTimeStamp then self.LastTimeStamp=math.floor(Framework.TimeGetTime())end;local bD=math.floor(Framework.TimeGetTime())if self.LastTimeStamp~=bD then self.LastTimeStamp=bD;self.SecondsSinceGameStart=self.SecondsSinceGameStart+1 end end;function LiberticaCore_Job_EventJobExecutor(bC)Lib.Core.Job:EventJobExecutor(bC)end;function RequestJobByEventType(bE,aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return Lib.Core.Job:CreateEventJob(bE,aM,...)end;API.StartJobByEventType=RequestJobByEventType;function RequestJob(aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,bF,...)end;API.StartJob=RequestJob;StartSimpleJob=RequestJob;StartSimpleJobEx=RequestJob;function RequestHiResJob(aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,bF,...)end;API.StartHiResJob=RequestHiResJob;StartSimpleHiResJob=RequestHiResJob;StartSimpleHiResJobEx=RequestHiResJob;function RequestDelay(bG,aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return RequestJob(function(bH,bI,bJ,bK)if bH+bI<=Logic.GetTime()then bJ(unpack(bK or{}))return true end end,Logic.GetTime(),bG,aM,{...})end;API.StartDelay=RequestDelay;function RequestHiResDelay(bG,aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return RequestHiResJob(function(bH,bI,bJ,bK)if bH+bI<=Logic.GetCurrentTurn()then bJ(unpack(bK or{}))return true end end,Logic.GetTime(),bG,aM,{...})end;API.StartHiResDelay=RequestHiResDelay;function RequestRealTimeDelay(bG,aM,...)local bF=_G[aM]or aM;assert(type(bF)=="function","Function does not exist!")return RequestHiResJob(function(bH,bI,bJ,bK)if Lib.Core.Job.SecondsSinceGameStart>=bH+bI then bJ(unpack(bK or{}))return true end end,Lib.Core.Job.SecondsSinceGameStart,bG,aM,{...})end;API.StartRealTimeDelay=RequestRealTimeDelay;function StopJob(bL)if Lib.Core.Job.EventJobs[bL]then Trigger.UnrequestTrigger(Lib.Core.Job.EventJobs[bL][1])Lib.Core.Job.EventJobs[bL]=nil;return end;EndJob(bL)end;API.EndJob=StopJob;function IsJobRunning(bL)if Lib.Core.Job.EventJobs[bL]then return Lib.Core.Job.EventJobs[bL][2]==true end;return JobIsRunning(bL)end;API.JobIsRunning=IsJobRunning;function ResumeJob(bL)if Lib.Core.Job.EventJobs[bL]then if Lib.Core.Job.EventJobs[bL][2]~=true then Lib.Core.Job.EventJobs[bL][2]=true end;return end;assert(false,"Failed to resume job.")end;API.ResumeJob=ResumeJob;function YieldJob(bL)if Lib.Core.Job.EventJobs[bL]then if Lib.Core.Job.EventJobs[bL][2]==true then Lib.Core.Job.EventJobs[bL][2]=false end;return end;assert(false,"Failed to yield job.")end;API.YieldJob=YieldJob;function GetSecondsRealTime()return Lib.Core.Job.SecondsSinceGameStart end;API.GetSecondsRealTime=GetSecondsRealTime;Lib.Core=Lib.Core or{}Lib.Core.Save={HistoryEditionQuickSave=false,SavingDisabled=false,LoadingDisabled=false}Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Save")function DisableAutoSave(bM)if not IsLocalScript()then Lib.Core.Save.HistoryEditionQuickSave=bM==true;ExecuteLocal([[Lib.Core.Save.HistoryEditionQuickSave = %s]],tostring(bM==true))end end;API.DisableAutoSave=DisableAutoSave;function DisableSaving(bM)Lib.Core.Save:DisableSaving(bM)end;API.DisableSaving=DisableSaving;function DisableLoading(bM)Lib.Core.Save:DisableLoading(bM)end;API.DisableLoading=DisableLoading;function Lib.Core.Save:Initialize()Report.SaveGameLoaded=CreateReport("Event_SaveGameLoaded")self:SetupQuicksaveKeyCallback()self:SetupQuicksaveKeyTrigger()end;function Lib.Core.Save:OnSaveGameLoaded()self:SetupQuicksaveKeyTrigger()self:UpdateLoadButtons()self:UpdateSaveButtons()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Save:OnReportReceived(aw,...)end;function Lib.Core.Save:SetupQuicksaveKeyTrigger()if IsLocalScript()then RequestHiResJob(function()Input.KeyBindDown(Keys.ModifierControl+Keys.S,"KeyBindings_SaveGame(true)",2,false)return true end)end end;function Lib.Core.Save:SetupQuicksaveKeyCallback()if IsLocalScript()then KeyBindings_SaveGame_Orig_Core=KeyBindings_SaveGame;KeyBindings_SaveGame=function(...)if Lib.Core.Save.SavingDisabled then return end;if not Lib.Core.Save.HistoryEditionQuickSave and not arg[1]then return end;KeyBindings_SaveGame_Orig_Core()end end end;function Lib.Core.Save:DisableSaving(bM)self.SavingDisabled=bM==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableSaving(%s)]],tostring(bM))else self:UpdateSaveButtons()end end;function Lib.Core.Save:UpdateSaveButtons()if IsLocalScript()then local bN=self.SavingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickSave",bN)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/SaveGame",bN)end end;function Lib.Core.Save:DisableLoading(bM)self.LoadingDisabled=bM==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableLoading(%s)]],tostring(bM))else self:UpdateLoadButtons()end end;function Lib.Core.Save:UpdateLoadButtons()if IsLocalScript()then local bN=self.LoadingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/LoadGame",bN)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickLoad",bN)end end;Lib.Core=Lib.Core or{}Lib.Core.Text={Languages={{"de","Deutsch","en"},{"en","English","en"},{"fr","Français","en"}},Colors={red="{@color:255,80,80,255}",blue="{@color:104,104,232,255}",yellow="{@color:255,255,80,255}",green="{@color:80,180,0,255}",white="{@color:255,255,255,255}",black="{@color:0,0,0,255}",grey="{@color:140,140,140,255}",azure="{@color:0,160,190,255}",orange="{@color:255,176,30,255}",amber="{@color:224,197,117,255}",violet="{@color:180,100,190,255}",pink="{@color:255,170,200,255}",scarlet="{@color:190,0,0,255}",magenta="{@color:190,0,89,255}",olive="{@color:74,120,0,255}",celeste="{@color:145,170,210,255}",tooltip="{@color:51,51,120,255}",none="{@color:none}"},StringTables={},Placeholders={Names={},EntityTypes={}}}CONST_LANGUAGE="de"Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Text")function Lib.Core.Text:Initialize()Report.LanguageChanged=CreateReport("Event_LanguageChanged")self:DetectLanguage()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnSaveGameLoaded()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnReportReceived(aw,...)end;function Lib.Core.Text:OverwriteGetStringTableText()XGUIEng.GetStringTableText_Orig_Core=XGUIEng.GetStringTableText;XGUIEng.GetStringTableText=function(bO)return Lib.Core.Text:GetStringTableOverwrite(bO)end end;function Lib.Core.Text:AddStringTableOverwrite(bP,bl)local f=string.find(bP,"/[^/]*$")local bQ=bP:sub(1,f-1):lower()local bR=bP:sub(f+1):lower()self.StringTables[bQ]=self.StringTables[bQ]or{}self.StringTables[bQ][bR]=bl end;function Lib.Core.Text:DeleteStringTableOverwrite(bP)local f=string.find(bP,"/[^/]*$")local bQ=bP:sub(1,f-1):lower()local bR=bP:sub(f+1):lower()self.StringTables[bQ]=self.StringTables[bQ]or{}self.StringTables[bQ][bR]=nil end;function Lib.Core.Text:GetStringTableOverwrite(bP)local f=string.find(bP,"/[^/]*$")local bQ=bP:sub(1,f-1):lower()local bR=bP:sub(f+1):lower()self.StringTables[bQ]=self.StringTables[bQ]or{}if self.StringTables[bQ][bR]then local bS=self.StringTables[bQ][bR]if type(bS)=="string"and bS:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bS=XGUIEng.GetStringTableText_Orig_Core(bS)end;return ConvertPlaceholders(Localize(bS))end;return XGUIEng.GetStringTableText_Orig_Core(bP)end;function Lib.Core.Text:DetectLanguage()local bT=Network.GetDesiredLanguage()if bT~="de"and bT~="fr"then bT="en"end;CONST_LANGUAGE=bT end;function Lib.Core.Text:ChangeSystemLanguage(aa,bU,bV)local bW=CONST_LANGUAGE;local bX=bV;if bU==nil or bU==true then CONST_LANGUAGE=bV;ExecuteLocal([[CONST_LANGUAGE = "%s"]],bV)SendReport(Report.LanguageChanged,bW,bX)SendReportToLocal(Report.LanguageChanged,bW,bX)end end;function Lib.Core.Text:Localize(bl)local bY="ERROR_NO_TEXT"if type(bl)=="table"then if bl[CONST_LANGUAGE]then bY=bl[CONST_LANGUAGE]else for g,h in pairs(self.Languages)do if h[1]==CONST_LANGUAGE and h[3]and bl[h[3]]then bY=bl[h[3]]break end end end else bY=tostring(bl)end;return bY end;function Lib.Core.Text:ConvertPlaceholders(bl)if type(bl)=="string"then while true do local bZ,b_,c0,c1,c2,c3,c4,c5;if bl:find("{n:")then bZ,b_,c0,c2,c3,c4,c5=self:SplicePlaceholderText(bl,"{n:")c1=self.Placeholders.Names[b_]bl=bZ..self:Localize(c1 or"n:"..tostring(b_)..": not found")..c0 elseif bl:find("{t:")then bZ,b_,c0,c2,c3,c4,c5=self:SplicePlaceholderText(bl,"{t:")c1=self.Placeholders.EntityTypes[b_]bl=bZ..self:Localize(c1 or"n:"..tostring(b_)..": not found")..c0 elseif bl:find("{v:")then bZ,b_,c0,c2,c3,c4,c5=self:SplicePlaceholderText(bl,"{v:")c1=self:ReplaceValuePlaceholder(b_)bl=bZ..self:Localize(c1 or"v:"..tostring(b_)..": not found")..c0 end;if c2==nil or c3==nil or c4==nil or c5==nil then break end end;bl=self:ReplaceColorPlaceholders(bl)end;return bl end;function Lib.Core.Text:SplicePlaceholderText(bl,c6)local c2,c3=bl:find(c6)local c4,c5=bl:find("}",c3)local bZ=bl:sub(1,c2-1)local b_=bl:sub(c3+1,c4-1)local c0=bl:sub(c5+1)return bZ,b_,c0,c2,c3,c4,c5 end;function Lib.Core.Text:ReplaceColorPlaceholders(bl)for g,h in pairs(self.Colors)do bl=bl:gsub("{"..g.."}",h)end;return bl end;function Lib.Core.Text:ReplaceValuePlaceholder(bl)local c7=_G;local c8=string.slice(bl,"%.")for f=1,#c8 do local c9=c8[f]local ca=tonumber(c9)if ca~=nil then c9=ca end;if not c7[c9]then return nil end;c7=c7[c9]end;return c7 end;function Localize(bl)return Lib.Core.Text:Localize(bl)end;API.Localize=Localize;function ConvertPlaceholders(bl)return Lib.Core.Text:ConvertPlaceholders(bl)end;API.ConvertPlaceholders=ConvertPlaceholders;function AddNote(bl)bl=ConvertPlaceholders(Localize(bl))if not IsLocalScript()then Logic.DEBUG_AddNote(bl)return end;GUI.AddNote(bl)end;API.Note=AddNote;function AddStaticNote(bl)bl=ConvertPlaceholders(Localize(bl))if not IsLocalScript()then ExecuteLocal([[GUI.AddStaticNote("%s")]],bl)return end;GUI.AddStaticNote(bl)end;API.StaticNote=AddStaticNote;function AddMessage(bl,cb)bl=ConvertPlaceholders(Localize(bl))if not IsLocalScript()then ExecuteLocal([[AddMessage("%s", "%s")]],bl,cb or"")return end;bl=ConvertPlaceholders(Localize(bl))Message(bl,cb and cb~=""and cb:gsub("/","\\")or nil)end;function ClearNotes()if not IsLocalScript()then ExecuteLocal([[ClearNotes()]])return end;GUI.ClearNotes()end;API.ClearNotes=ClearNotes;function AddStringText(bP,bl)assert(IsLocalScript(),"Text can only be set in local script!")Lib.Core.Text:AddStringTableOverwrite(bP,bl)end;API.AddStringText=AddStringText;function DeleteStringText(bP)assert(IsLocalScript(),"Text can only be removed in local script!")Lib.Core.Text:DeleteStringTableOverwrite(bP)end;API.DeleteStringText=DeleteStringText;function GetStringText(bP)assert(IsLocalScript(),"Text can only be retrieved in local script!")return Lib.Core.Text:GetStringTableOverwrite(bP)end;API.GetStringText=GetStringText;function DefineLanguage(cc,y,cd,ce)assert(type(cc)=="string")assert(type(y)=="string")assert(type(cd)=="string")for g,h in pairs(Lib.Core.Text.Languages)do if h[1]==cc then return end end;ce=ce or#Lib.Core.Text.Languages+1;table.insert(Lib.Core.Text.Languages,ce,{cc,y,cd})ExecuteLocal([[
        table.insert(Lib.Core.Text.Languages, %d, {"%s", "%s", "%s"})
    ]],ce,cc,y,cd)end;Lib.Core=Lib.Core or{}Lib.Core.LuaExtension={}Lib.Require("comfort/CopyTable")Lib.Require("comfort/SerializeTable")Lib.Register("core/feature/Core_LuaExtension")function Lib.Core.LuaExtension:Initialize()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnSaveGameLoaded()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnReportReceived(aw,...)end;function Lib.Core.LuaExtension:OverrideTable()table.compare=function(cf,cg,ch)assert(type(cf)=="table")assert(type(cg)=="table")ch=ch or function(cf,cg)return tostring(cf)<tostring(cg)end;assert(type(ch)=="function")return ch(cf,cg)end;table.equals=function(cf,cg)assert(type(cf)=="table")assert(type(cg)=="table")local ch=function(cf,cg)return table.tostring(cf)<table.tostring(cg)end;assert(type(ch)=="function")return ch(cf,cg)end;table.contains=function(ci,cj)assert(type(ci)=="table")for g,h in pairs(ci)do if h==cj then return true end end;return false end;table.length=function(ci)return#ci end;table.size=function(ci)local ck=0;for g,h in pairs(ci)do if g~="n"or g=="n"and type(h)~="number"then ck=ck+1 end end;return ck end;table.isEmpty=function(ci)return table.size(ci)==0 end;table.copy=function(cf,cg)cg=cg or{}assert(type(cf)=="table")assert(type(cg)=="table")return CopyTable(cf,cg)end;table.invert=function(cf)assert(type(cf)=="table")local cg={}for f=table.length(cf),1,-1 do table.insert(cg,cf[f])end;return cg end;table.push=function(ci,cj)assert(type(ci)=="table")table.insert(ci,1,cj)end;table.pop=function(ci)assert(type(ci)=="table")return table.remove(ci,1)end;table.tostring=function(ci)return SerializeTable(ci)end end;function Lib.Core.LuaExtension:OverrideString()string.contains=function(self,cl)return self:find(cl)~=nil end;string.indexOf=function(self,cl)return self:find(cl)end;string.slice=function(self,cm)cm=cm or"%s"local ci={}if self then for cn in self:gmatch("([^"..cm.."]+)")do table.insert(ci,cn)end end;return ci end;string.join=function(self,...)local cl=""local co={self,...}for f=1,#co do if type(co[f])=="table"then cl=cl..string.join(unpack(co[f]))else cl=cl..tostring(co[f])end end;return cl end;string.replace=function(self,cp,cq)local cl,ck=self:gsub(cp,cq,1)return cl end;string.replaceAll=function(self,cp,cq)local cl,ck=self:gsub(cp,cq)return cl end end;function Lib.Core.LuaExtension:OverrideMath()math.lerp=function(cl,ck,cj)local cr=(ck-cl)/cj;return cr>1 and 1 or cr end;math.qmod=function(a5,cs)return a5-math.floor(a5/cs)*cs end end;Lib.Core=Lib.Core or{}Lib.Core.ScriptingValue={SV={Game="Vanilla",Vanilla={Destination={X=19,Y=20},Health=-41,Player=-71,Size=-45,Visible=-50,NPC=6},HistoryEdition={Destination={X=17,Y=18},Health=-38,Player=-68,Size=-42,Visible=-47,NPC=6}}}CONST_SCRIPTING_VALUES=Lib.Core.ScriptingValue.SV.Vanilla;Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_ScriptingValue")function Lib.Core.ScriptingValue:Initialize()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnSaveGameLoaded()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnReportReceived(aw,...)end;function Lib.Core.ScriptingValue:BitsInteger(ct)local ci={}while ct>0 do local cu=math.qmod(ct,2)table.insert(ci,1,cu)ct=(ct-cu)/2 end;table.remove(ci,1)return ci end;function Lib.Core.ScriptingValue:BitsFraction(ct,ci)for f=1,48 do ct=ct*2;if ct>=1 then table.insert(ci,1)ct=ct-1 else table.insert(ci,0)end;if ct==0 then return ci end end;return ci end;function Lib.Core.ScriptingValue:IntegerToFloat(ct)if ct==0 then return 0 end;local cv=1;if ct<0 then ct=2147483648+ct;cv=-1 end;local cw=math.qmod(ct,8388608)local cx=(ct-cw)/8388608;local cy=math.qmod(cx,256)local cz=cy-127;local cA=1;local cB=0.5;local cC=4194304;for f=23,0,-1 do if cw-cC>0 then cA=cA+cB;cw=cw-cC end;cC=cC/2;cB=cB/2 end;return cA*math.pow(2,cz)*cv end;function Lib.Core.ScriptingValue:FloatToInteger(cD)if cD==0 then return 0 end;local cE=false;if cD<0 then cE=true;cD=cD*-1 end;local cF=0;local cG;local cz=0;if cD>=1 then local cH=math.floor(cD)local cI=cD-cH;cG=self:BitsInteger(cH)cz=#cG;self:BitsFraction(cI,cG)else cG={}self:BitsFraction(cD,cG)while cG[1]==0 do cz=cz-1;table.remove(cG,1)end;cz=cz-1;table.remove(cG,1)end;local cJ=4194304;local cK=1;for cL=cK,23 do local cM=cG[cL]if not cM then break end;if cM==1 then cF=cF+cJ end;cJ=cJ/2 end;cF=cF+(cz+127)*8388608;if cE then cF=cF-2147483648 end;return cF end;function GetInteger(k,cN)local ae=GetID(k)assert(IsExisting(ae),"Entity does not exist.")return Logic.GetEntityScriptingValue(ae,cN)end;API.GetInteger=GetInteger;function GetFloat(k,cN)local ae=GetID(k)assert(IsExisting(ae),"Entity does not exist.")local aO=Logic.GetEntityScriptingValue(ae,cN)return ConvertIntegerToFloat(aO)end;API.GetFloat=GetFloat;function SetInteger(k,cN,R)local ae=GetID(k)assert(IsExisting(ae),"Entity does not exist.")Logic.SetEntityScriptingValue(ae,cN,R)end;API.SetInteger=SetInteger;function SetFloat(k,cN,R)local ae=GetID(k)assert(IsExisting(ae),"Entity does not exist.")Logic.SetEntityScriptingValue(ae,cN,ConvertFloatToInteger(R))end;API.SetFloat=SetFloat;function ConvertIntegerToFloat(R)return Lib.Core.ScriptingValue:IntegerToFloat(R)end;API.ConvertIntegerToFloat=ConvertIntegerToFloat;function ConvertFloatToInteger(R)return Lib.Core.ScriptingValue:FloatToInteger(R)end;API.ConvertFloatToInteger=ConvertFloatToInteger;Lib.Core=Lib.Core or{}Lib.Core.Bugfix={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/GetDistance")Lib.Require("core/feature/Core_Text")Lib.Register("core/feature/Core_Bugfix")function Lib.Core.Bugfix:Initialize()if not IsLocalScript()then self:FixResourceSlotsInStorehouses()self:FixMiddleEuropeNpcBarracks()self:FixMerchantArrivedCheckpoints()self:FixDestroyAllPlayerUnits()self:FixBanditCampFireplace()end;if IsLocalScript()then self:FixInteractiveObjectClicked()self:FixBigCathedralName()self:FixClimateZoneForHouseMenu()self:FixAbilityInfoWhenHomeless()end end;function Lib.Core.Bugfix:OnSaveGameLoaded()end;function Lib.Core.Bugfix:OnReportReceived(aw,...)end;function Lib.Core.Bugfix:FixResourceSlotsInStorehouses()for f=1,8 do local cO=Logic.GetStoreHouse(f)if cO~=0 then Logic.AddGoodToStock(cO,Goods.G_Salt,0,true,true)Logic.AddGoodToStock(cO,Goods.G_Dye,0,true,true)end end end;function Lib.Core.Bugfix:FixMiddleEuropeNpcBarracks()GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(aa,ag)GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix(aa,ag)local cP=Logic.GetEntityType(ag)if cP==Entities.B_NPC_Barracks_ME then Logic.RespawnResourceSetMaxSpawn(ag,0.01)Logic.RespawnResourceSetMinSpawn(ag,0.01)end end;for g,h in pairs(Logic.GetEntitiesOfType(Entities.B_NPC_Barracks_ME))do Logic.RespawnResourceSetMaxSpawn(h,0.01)Logic.RespawnResourceSetMinSpawn(h,0.01)end end;function Lib.Core.Bugfix:FixMerchantArrivedCheckpoints()function QuestTemplate:IsMerchantArrived(br)if br.Data[3]~=nil then if br.Data[3]==1 then if br.Data[5].ID~=nil then br.Data[3]=br.Data[5].ID;DeleteQuestMerchantWithID(br.Data[3])if MapCallback_DeliverCartSpawned then MapCallback_DeliverCartSpawned(self,br.Data[3],br.Data[1])end end elseif Logic.IsEntityDestroyed(br.Data[3])then DeleteQuestMerchantWithID(br.Data[3])br.Data[3]=nil;br.Data[5].ID=nil else local av=br.Data[6]and br.Data[6]or self.SendingPlayer;local cQ=Logic.GetStoreHouse(av)local cR=Logic.GetStoreHouse(av)local cS=Logic.GetStoreHouse(av)local cT=nil;if cQ>0 then local A,B=Logic.GetBuildingApproachPosition(cQ)cT=GetDistance(br.Data[3],{X=A,Y=B})<1000 end;if cR>0 then local A,B=Logic.GetBuildingApproachPosition(cR)cT=cT or GetDistance(br.Data[3],{X=A,Y=B})<1000 end;if cS>0 then local A,B=Logic.GetBuildingApproachPosition(cS)cT=cT or GetDistance(br.Data[3],{X=A,Y=B})<1000 end;return cT end end;return false end end;function Lib.Core.Bugfix:FixInteractiveObjectClicked()GUI_Interaction.InteractiveObjectClicked=function()local cU=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local cV=g_Interaction.ActiveObjectsOnScreen[cU]if cV==nil or not Logic.InteractiveObjectGetAvailability(cV)then return end;local n=GUI.GetPlayerID()local cW={Logic.InteractiveObjectGetEffectiveCosts(cV,n)}local cX=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")local cY=true;if cY and cW~=nil and cW[1]~=nil then if cW[1]==Goods.G_Gold then cX=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if cW[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(cW[1])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")cY=false end;cY=cY and GetPlayerGoodsInSettlement(cW[1],n,false)>=cW[2]end;if cY and cW~=nil and cW[3]~=nil then if cW[3]==Goods.G_Gold then cX=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if cW[3]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(cW[3])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")cY=false end;cY=cY and GetPlayerGoodsInSettlement(cW[3],n,false)>=cW[4]end;if not cY then Message(cX)return end;if not GUI_Interaction.InteractionClickOverride or not GUI_Interaction.InteractionClickOverride(cV)then Sound.FXPlay2DSound("ui\\menu_click")end;if not GUI_Interaction.InteractionSpeechFeedbackOverride or not GUI_Interaction.InteractionSpeechFeedbackOverride(cV)then GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)end;if not Mission_Callback_OverrideObjectInteraction or not Mission_Callback_OverrideObjectInteraction(cV,n,cW)then GUI.ExecuteObjectInteraction(cV,n)end end end;function Lib.Core.Bugfix:FixDestroyAllPlayerUnits()QuestTemplate.IsObjectiveCompleted_Orig_Core_Bugfix=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,br)local bs=br.Type;if br.Completed~=nil then return br.Completed end;local bt=br.Data;if bs==Objective.DestroyAllPlayerUnits then local cZ=GetPlayerEntities(bt,0)local c_={}for f=#cZ,1,-1 do local l=Logic.GetEntityType(cZ[f])if Logic.IsEntityInCategory(cZ[f],EntityCategories.AttackableBuilding)==0 or Logic.IsEntityInCategory(cZ[f],EntityCategories.Wall)==0 then if Logic.IsConstructionComplete(cZ[f])==0 then table.insert(c_,cZ[f])end end;local d0={Entities.XD_ScriptEntity,Entities.S_AIHomePosition,Entities.S_AIAreaDefinition}if table.contains(d0,l)then table.insert(c_,cZ[f])end end;if#cZ==0 or#cZ-#c_==0 then br.Completed=true end elseif bs==Objective.Distance then br.Completed=Lib.Core.Quest:IsQuestPositionReached(self,br)else return self:IsObjectiveCompleted_Orig_Core_Bugfix(br)end end end;function Lib.Core.Bugfix:FixBigCathedralName()AddStringText("Names/B_Cathedral_Big",{de="Dom",en="Cathedral",fr="Cathédrale"})end;if EntityCategories then Lib.Core.Bugfix.HouseMenuWidgetToCategory={["B_Castle_ME"]=EntityCategories.Headquarters,["B_Cathedral"]=EntityCategories.Cathedrals,["B_Cathedral_Big"]=EntityCategories.Cathedrals,["B_Outpost_ME"]=EntityCategories.Outpost}end;function Lib.Core.Bugfix:FixClimateZoneForHouseMenu()HouseMenuGetNextBuildingID=function(d1)local d2;local d3=0;local d4=false;local n=GUI.GetPlayerID()local d5=Lib.Core.Bugfix.HouseMenuWidgetToCategory[d1]d1=GetClimateEntityName(d1)if HouseMenu.Widget.CurrentBuilding~=d1 then HouseMenu.Widget.CurrentBuilding=d1;HouseMenu.Widget.CurrentBuildingNumber=0 end;if d5~=nil then d2={Logic.GetPlayerEntitiesInCategory(n,d5)}else d2={Logic.GetBuildingsByPlayer(n)}end;for f=1,#d2 do local cP=Logic.GetEntityType(d2[f])local d6=Logic.GetEntityTypeName(cP)if d5~=nil or d6==d1 then d3=f;if d3>HouseMenu.Widget.CurrentBuildingNumber then HouseMenu.Widget.CurrentBuildingNumber=d3;d4=true;break end end end;if d3~=0 then if not d4 then for f=1,#d2 do local cP=Logic.GetEntityType(d2[f])local d6=Logic.GetEntityTypeName(cP)if d5~=nil or d6==d1 then HouseMenu.Widget.CurrentBuildingNumber=f;break end end end;return d2[HouseMenu.Widget.CurrentBuildingNumber]end;return nil end;HouseMenuSetIconsPart=function(d7,d8)local n=GUI.GetPlayerID()local d9={XGUIEng.ListSubWidgets(d7)}local da={Logic.GetBuildingsByPlayer(n)}local d1,d5;for f=1,#d9 do d1=XGUIEng.GetWidgetNameByID(d9[f])d5=Lib.Core.Bugfix.HouseMenuWidgetToCategory[d1]local db=Entities[d1]local dc=d7 .."/"..d1 .."/Button"SetIcon(dc,g_TexturePositions.Entities[db])local dd=0;local de;if d5~=nil then de={Logic.GetPlayerEntitiesInCategory(n,d5)}dd=#de else for bu=1,#da do local cP=Logic.GetEntityType(da[bu])local d6=Logic.GetEntityTypeName(cP)local df=GetClimateEntityName(d1)if d6==df then dd=dd+1 end end end;XGUIEng.DisableButton(dc,dd==0 and 1 or 0)local dg=d7 .."/"..d1 .."/Amount"XGUIEng.SetText(dg,"{center}"..dd)local dh=d7 .."/"..d1 .."/Stop"UpdateStopOverlay(dh,d1,dd)if d1==HouseMenu.Widget.CurrentBuilding then UpdateStopOverlay(HouseMenu.Widget.CurrentStop,HouseMenu.Widget.CurrentBuilding,dd)end end;HouseMenu.Counter=HouseMenu.Counter+1;if d8 or HouseMenu.Counter%20==0 then for bu=1,#d9 do local di=XGUIEng.GetWidgetNameByID(d9[bu])local dj=d7 .."/"..di.."/Button"di=GetClimateEntityName(di)XGUIEng.HighLightButton(dj,di==HouseMenu.Widget.CurrentBuilding and 1 or 0)end end end end;function Lib.Core.Bugfix:FixAbilityInfoWhenHomeless()StartKnightVoiceForActionSpecialAbility=function(dk,dl)local n=GUI.GetPlayerID()local cQ=Logic.GetStoreHouse(n)local dm=Logic.GetEntityType(Logic.GetKnightID(n))if dk==dm and cQ~=0 and ActionAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(n,"Hint_SpecialAbilityAction",false,n,dl)ActionAbilityIsExplained=true end end;StartKnightVoiceForPermanentSpecialAbility=function(dk)local n=GUI.GetPlayerID()local cQ=Logic.GetStoreHouse(n)local dm=Logic.GetEntityType(Logic.GetKnightID(n))if dk==dm and cQ~=0 and PermanentAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(n,"Hint_SpecialAbilityPermanetly",false,n)PermanentAbilityIsExplained=true end end end;function Lib.Core.Bugfix:FixBanditCampFireplace()g_Outlaws.ReplaceCampType={}g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace01]=Entities.D_X_Fireplace01_Expired;g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace02]=Entities.D_X_Fireplace02_Expired;ActivateFireplaceforBanditPack=function(dn)local dp=Logic.EntityGetPlayer(dn)if g_Outlaws.Players[dp][dn].CampFire==nil then local dq,dr=Logic.GetBuildingApproachPosition(dn)local ds,dt=Logic.GetEntityPosition(dn)local A=(dq-ds)*1.3+dq;local B=(dr-dt)*1.3+dr;local du=Entities.D_X_Fireplace01;if Logic.IsEntityInCategory(dn,EntityCategories.Storehouse)==1 then du=Entities.D_X_Fireplace02 end;g_Outlaws.Players[dp][dn].CampFireType=du;local dv=g_Outlaws.Players[dp][dn].ExtinguishedFire;Logic.DestroyEntity(dv)local dw=Logic.CreateEntityOnUnblockedLand(du,A,B,0,0)g_Outlaws.Players[dp][dn].CampFire=dw;g_Outlaws.Players[dp][dn].CampFirePos={X=A,Y=B}return true end;return false end;DisableFireplaceforBanditPack=function(dn)local dp=Logic.EntityGetPlayer(dn)if g_Outlaws.Players[dp][dn].CampFire~=nil then local A=g_Outlaws.Players[dp][dn].CampFirePos.X;local B=g_Outlaws.Players[dp][dn].CampFirePos.Y;local dv=g_Outlaws.Players[dp][dn].CampFire;Logic.DestroyEntity(dv)local dx=g_Outlaws.Players[dp][dn].CampFireType;local du=g_Outlaws.ReplaceCampType[dx]local dw=Logic.CreateEntityOnUnblockedLand(du,A,B,0,0)g_Outlaws.Players[dp][dn].ExtinguishedFire=dw;g_Outlaws.Players[dp][dn].CampFire=nil end end end;Lib.Core=Lib.Core or{}Lib.Core.Chat={DebugInput={}}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Chat")function Lib.Core.Chat:Initialize()Report.ChatOpened=CreateReport("Event_ChatOpened")Report.ChatClosed=CreateReport("Event_ChatClosed")for f=1,8 do self.DebugInput[f]={}end end;function Lib.Core.Chat:OnSaveGameLoaded()end;function Lib.Core.Chat:OnReportReceived(aw,...)end;function Lib.Core.Chat:ShowTextInput(aa,dy)if Lib.IsHistoryEdition and Framework.IsNetworkGame()then return end;if not GUI then ExecuteLocal([[Lib.Core.Chat:ShowTextInput(%d, %s)]],aa,tostring(dy==true))return end;aa=aa or GUI.GetPlayerID()self:PrepareInputVariable(aa)self:ShowInputBox(aa,dy==true)end;function Lib.Core.Chat:ShowInputBox(aa,dz)if GUI.GetPlayerID()~=aa then return end;self.DebugInput[aa]=dz==true;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()Input.ChatMode()XGUIEng.SetText("/InGame/Root/Normal/ChatInput/ChatInput","")XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",1)XGUIEng.SetFocus("/InGame/Root/Normal/ChatInput/ChatInput")SendReportToGlobal(Report.ChatOpened,aa)SendReport(Report.ChatOpened,aa)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;return true end)end;function Lib.Core.Chat:PrepareInputVariable(aa)if not IsLocalScript()then return end;GUI_Chat.Abort_Orig_Core=GUI_Chat.Abort_Orig_Core or GUI_Chat.Abort;GUI_Chat.Confirm_Orig_Core=GUI_Chat.Confirm_Orig_Core or GUI_Chat.Confirm;GUI_Chat.Confirm=function()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",0)local dA=XGUIEng.GetText("/InGame/Root/Normal/ChatInput/ChatInput")local dB=Lib.Core.Chat.DebugInput[aa]Lib.Core.Chat.ChatBoxInput=dA;Lib.Core.Chat:SendInputAsEvent(dA,dB)g_Chat.JustClosed=1;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,1)end;Input.GameMode()if dA:len()>0 and Framework.IsNetworkGame()and not dB then GUI.SendChatMessage(dA,aa,g_Chat.CurrentMessageType,g_Chat.CurrentWhisperTarget)end end;if not Framework.IsNetworkGame()then GUI_Chat.Abort=function()end end end;function Lib.Core.Chat:SendInputAsEvent(bl,dz)bl=bl==nil and""or bl;local n=GUI.GetPlayerID()SendReportToGlobal(Report.ChatClosed,bl or"<<<ES>>>",GUI.GetPlayerID(),dz==true)SendReport(Report.ChatClosed,bl or"<<<ES>>>",GUI.GetPlayerID(),dz==true)self.DebugInput[n]=false end;function ShowTextInput(aa,dy)Lib.Core.Chat:ShowTextInput(aa,dy)end;API.ShowTextInput=ShowTextInput;Lib.Core=Lib.Core or{}Lib.Core.Debug={DisplayScriptErrors=false,CheckAtRun=false,TraceQuests=false,DevelopingCheats=false,DevelopingShell=false}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Chat")Lib.Register("core/feature/Core_Debug")function Lib.Core.Debug:Initialize()Report.DebugChatConfirmed=CreateReport("Event_DebugChatConfirmed")Report.DebugConfigChanged=CreateReport("Event_DebugConfigChanged")if IsLocalScript()then self:InitializeQsbDebugHotkeys()CreateReportReceiver(Report.ChatClosed,function(...)Lib.Core.Debug:ProcessDebugInput(...)end)end end;function Lib.Core.Debug:OnSaveGameLoaded()if IsLocalScript()then self:InitializeDebugWidgets()self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnReportReceived(aw,...)end;function Lib.Core.Debug:ActivateDebugMode(dC,dD,dE,dF,dG)if IsLocalScript()then return end;self.DisplayScriptErrors=dC==true;self.CheckAtRun=dD==true;self.DevelopingCheats=dE==true;self.DevelopingShell=dF==true;self.TraceQuests=dG==true;SendReport(Report.DebugConfigChanged,self.DisplayScriptErrors,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)ExecuteLocal([[
            Lib.Core.Debug.DisplayScriptErrors = %s;
            Lib.Core.Debug.CheckAtRun          = %s;
            Lib.Core.Debug.DevelopingCheats    = %s;
            Lib.Core.Debug.DevelopingShell     = %s;
            Lib.Core.Debug.TraceQuests         = %s;

            SendReport(
                Report.DebugConfigChanged,
                Lib.Core.Debug.DisplayScriptErrors,
                Lib.Core.Debug.CheckAtRun,
                Lib.Core.Debug.DevelopingCheats,
                Lib.Core.Debug.DevelopingShell,
                Lib.Core.Debug.TraceQuests
            );
            Lib.Core.Debug:InitializeDebugWidgets();
        ]],tostring(self.DisplayScriptErrors),tostring(self.CheckAtRun),tostring(self.DevelopingCheats),tostring(self.DevelopingShell),tostring(self.TraceQuests))end;function Lib.Core.Debug:InitializeDebugWidgets()if Network.IsNATReady~=nil and Framework.IsNetworkGame()then return end;if self.DevelopingCheats then KeyBindings_EnableDebugMode(1)KeyBindings_EnableDebugMode(2)KeyBindings_EnableDebugMode(3)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClock=true else KeyBindings_EnableDebugMode(0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClock=false end end;function Lib.Core.Debug:InitializeQsbDebugHotkeys()if Framework.IsNetworkGame()then return end;Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.ModifierAlt+Keys.R,"Lib.Core.Debug:ProcessDebugShortcut('RestartMap')",30,false)Input.KeyBindDown(Keys.ModifierShift+Keys.OemPipe,"Lib.Core.Debug:ProcessDebugShortcut('Terminal')",30,false)end;function Lib.Core.Debug:ProcessDebugShortcut(i,dH)if self.DevelopingCheats then if i=="RestartMap"then Framework.RestartMap()elseif i=="Terminal"then ShowTextInput(GUI.GetPlayerID(),true)end end end;function Lib.Core.Debug:ProcessDebugInput(w,aa,dI)if dI then if w:lower():find("^restartmap")then self:ProcessDebugShortcut("RestartMap")elseif w:lower():find("^clear")then GUI.ClearNotes()elseif w:lower():find("^version")then GUI.AddStaticNote("Version: "..Lib.Loader.Version)elseif w:find("^> ")then GUI.SendScriptCommand(w:sub(3),true)elseif w:find("^>> ")then GUI.SendScriptCommand(string.format("Logic.ExecuteInLuaLocalState(\"%s\")",w:sub(4)),true)elseif w:find("^< ")then GUI.SendScriptCommand(string.format([[Script.Load("%s")]],w:sub(3)))elseif w:find("^<< ")then Script.Load(w:sub(4))end end end;function Lib.Core.Debug:CommandTokenizer(w)local dJ={}if w==nil then return dJ end;local dK={w}local dL={}local cl,cj=string.find(w,"%s+&&%s+")if cl then dK={}while cl do local dM=string.sub(w,1,cl-1)table.insert(dK,dM)w=string.sub(w,cj+1)cl,cj=string.find(w,"%s+&&%s+")end;if string.len(w)>0 then table.insert(dK,w)end end;for f=1,#dK,1 do cl,cj=string.find(dK[f],"%s+&%s+")if cl then local dN=""while cl do local dM=string.sub(dK[f],1,cl-1)table.insert(dL,dN..dM)if string.find(dM," ")then dN=string.sub(dM,1,string.find(dM," ")-1).." "end;dK[f]=string.sub(dK[f],cj+1)cl,cj=string.find(dK[f],"%s+&%s+")end;if string.len(dK[f])>0 then table.insert(dL,dN..dK[f])end else table.insert(dL,dK[f])end end;for f=1,#dL,1 do local dO={}cl,cj=string.find(dL[f],"%s+")if cl then while cl do local dM=string.sub(dL[f],1,cl-1)table.insert(dO,dM)dL[f]=string.sub(dL[f],cj+1)cl,cj=string.find(dL[f],"%s+")end;table.insert(dO,dL[f])else table.insert(dO,dL[f])end;table.insert(dJ,dO)end;return dJ end;function ActivateDebugMode(dC,dD,dE,dF,dG)Lib.Core.Debug:ActivateDebugMode(dC,dD,dE,dF,dG)end;API.ActivateDebugMode=ActivateDebugMode;Lib.Core=Lib.Core or{}Lib.Core.ModuleList={}Lib.Core.Global={IsInstalled=false}Lib.Core.Local={IsInstalled=false}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Chat")Lib.Require("core/feature/Core_Debug")Lib.Require("core/feature/Core_LuaExtension")Lib.Require("core/feature/Core_Bugfix")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_ScriptingValue")Lib.Require("core/feature/Core_Text")Lib.Require("core/feature/Core_Job")Lib.Require("core/feature/Core_Save")Lib.Require("core/feature/Core_Quest")Lib.Register("core/Core")function log(bl,...)local bS=bl;if#arg>0 then bS=string.format(bS,unpack(arg))end;Framework.WriteToLog(bS)return bS end;function warn(dP,bl,...)if not dP then local dQ="{@color:255,0,0,255}"local bS=dQ..log(bl,unpack(arg))if GUI then GUI.AddNote(bS)else Logic.DEBUG_Addnote(bS)end;return bS end end;function error(dP,bl,...)if not dP then local bS=log(bl,unpack(arg))return assert(dP,bS)end end;function Lib.Core.Global:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local dR=GameCallback_Lib_GetExternFilesToLoad()for f=1,#dR do Script.Load(dR[f])end end;for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Global and dS.Global.Initialize then dS.Global:Initialize()end end;self:OverrideOnSaveGameLoaded()self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()LoadBehaviors()Lib.Core.Local=nil end;self.IsInstalled=true end;function Lib.Core.Global:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Global and dS.Global.OnSaveGameLoaded then dS.Global:OnSaveGameLoaded()end end end;function Lib.Core.Global:OverrideOnSaveGameLoaded()Mission_OnSaveGameLoaded_Orig_Libertica=Mission_OnSaveGameLoaded;Mission_OnSaveGameLoaded=function()Lib.Core.Global:ExecuteLocal("Lib.Core.Local:OnSaveGameLoaded()")Lib.Core.Global:OnSaveGameLoaded()end end;function Lib.Core.Global:InitReportListener()GameCallback_Lib_OnEventReceived=function(aw,...)Lib.Core.LuaExtension:OnReportReceived(aw,...)Lib.Core.Report:OnReportReceived(aw,...)Lib.Core.Text:OnReportReceived(aw,...)Lib.Core.Job:OnReportReceived(aw,...)Lib.Core.ScriptingValue:OnReportReceived(aw,...)Lib.Core.Save:OnReportReceived(aw,...)Lib.Core.Quest:OnReportReceived(aw,...)Lib.Core.Chat:OnReportReceived(aw,...)Lib.Core.Debug:OnReportReceived(aw,...)Lib.Core.Bugfix:OnReportReceived(aw,...)if aw==Report.LoadingFinished then SendReportToLocal(Report.LoadingFinished,...)end;if aw==Report.EscapePressed then SendReportToLocal(Report.EscapePressed,...)end;for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Global and dS.Global.OnReportReceived then dS.Global:OnReportReceived(aw,...)end end;if aw==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Global:ExecuteLocal(dT,...)local dU=dT;if arg and#arg>0 then dU=dU:format(unpack(arg))end;Logic.ExecuteInLuaLocalState(dU)end;function Lib.Core.Global:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")end;function Lib.Core.Global:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")end;function Lib.Core.Local:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local dR=GameCallback_Lib_GetExternFilesToLoad()for f=1,#dR do Script.Load(dR[f])end end;for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Local and dS.Local.Initialize then dS.Local:Initialize()end end;self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()Lib.Core.Global=nil end;self.IsInstalled=true end;function Lib.Core.Local:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Local and dS.Local.OnSaveGameLoaded then dS.Local:OnSaveGameLoaded()end end;self:SetEscapeKeyTrigger()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Local:InitReportListener()GameCallback_Lib_OnEventReceived=function(aw,...)Lib.Core.LuaExtension:OnReportReceived(aw,...)Lib.Core.Report:OnReportReceived(aw,...)Lib.Core.Text:OnReportReceived(aw,...)Lib.Core.Job:OnReportReceived(aw,...)Lib.Core.ScriptingValue:OnReportReceived(aw,...)Lib.Core.Save:OnReportReceived(aw,...)Lib.Core.Quest:OnReportReceived(aw,...)Lib.Core.Chat:OnReportReceived(aw,...)Lib.Core.Debug:OnReportReceived(aw,...)Lib.Core.Bugfix:OnReportReceived(aw,...)if aw==Report.LoadingFinished then XGUIEng.PopPage()end;for f=1,#Lib.Core.ModuleList do local dS=Lib[Lib.Core.ModuleList[f]]if dS.Local and dS.Local.OnReportReceived then dS.Local:OnReportReceived(aw,...)end end;if aw==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Local:ExecuteGlobal(dT,...)local dU=dT;assert(not(IsHistoryEdition()and IsMultiplayer()),"Script command is not allowed in history edition multiplayer.")if arg and#arg>0 then dU=dU:format(unpack(arg))end;GUI.SendScriptCommand(dU)end;function Lib.Core.Local:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")self:SetEscapeKeyTrigger()end;function Lib.Core.Local:SetEscapeKeyTrigger()Input.KeyBindDown(Keys.Escape,"SendReportToGlobal(Report.EscapePressed, GUI.GetPlayerID())",30,false)end;function Lib.Core.Local:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")self.LoadscreenWatchJobID=RequestHiResJob(function()if XGUIEng.IsWidgetShownEx("/LoadScreen/LoadScreen")==0 then SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())return true end end)HideLoadScreen_Orig_Core=HideLoadScreen;HideLoadScreen=function()HideLoadScreen_Orig_Core()XGUIEng.PushPage("/LoadScreen/LoadScreen",true)XGUIEng.ShowWidget("/LoadScreen/LoadScreen/ButtonStart",0)EndJob(Lib.Core.Local.LoadscreenWatchJobID)SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())end end;function PrepareLibrary()assert(not IsLocalScript(),"Must be called from global script!")Lib.Core.Global:Initialize()ExecuteLocal("Lib.Core.Local:Initialize()")end;function RegisterModule(y)assert(Lib[y],"Module '"..y.."' does not exist!")table.insert(Lib.Core.ModuleList,y)end;function ExecuteLocal(dT,...)assert(not IsLocalScript(),"Can not be used in local script.")Lib.Core.Global:ExecuteLocal(dT,...)end;function ExecuteGlobal(dT,...)assert(IsLocalScript(),"Can not be used in global script.")Lib.Core.Local:ExecuteGlobal(dT,...)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UITools_API")function ChangeIcon(dV,dW,dX,y)error(IsLocalScript(),"Can only be done in local script!")dW=dW or{10,14}Lib.UITools.Widget:SetIcon(dV,dW,dX,y)end;API.SetIcon=ChangeIcon;function SetTooltipNormal(dY,bl,dZ)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipNormal(dY,bl,dZ)end;API.SetTooltipNormal=SetTooltipNormal;function SetTooltipCosts(dY,bl,dZ,d_,e0)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipCosts(dY,bl,dZ,d_,e0)end;API.SetTooltipCosts=SetTooltipCosts;function HideMinimap(bM)if not IsLocalScript()then ExecuteLocal("HideMinimap(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapOverlay",bM)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapTerrain",bM)end;API.HideMinimap=HideMinimap;function HideToggleMinimap(bM)if not IsLocalScript()then ExecuteLocal("HideToggleMinimap(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/MinimapButton",bM)end;API.HideToggleMinimap=HideToggleMinimap;function HideDiplomacyMenu(bM)if not IsLocalScript()then ExecuteLocal("HideDiplomacyMenu(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/DiplomacyMenuButton",bM)end;API.HideDiplomacyMenu=HideDiplomacyMenu;function HideProductionMenu(bM)if not IsLocalScript()then ExecuteLocal("HideProductionMenu(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/ProductionMenuButton",bM)end;API.HideProductionMenu=HideProductionMenu;function HideWeatherMenu(bM)if not IsLocalScript()then ExecuteLocal("HideWeatherMenu(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/WeatherMenuButton",bM)end;API.HideWeatherMenu=HideWeatherMenu;function HideBuyTerritory(bM)if not IsLocalScript()then ExecuteLocal("HideBuyTerritory(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory",bM)end;API.HideBuyTerritory=HideBuyTerritory;function HideKnightAbility(bM)if not IsLocalScript()then ExecuteLocal("HideKnightAbility(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbilityProgress",bM)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbility",bM)end;API.HideKnightAbility=HideKnightAbility;function HideKnightButton(bM)if not IsLocalScript()then ExecuteLocal("HideKnightButton(%s)",tostring(bM))Logic.SetEntitySelectableFlag("..KnightID..",bM and 0 or 1)return end;local e1=Logic.GetKnightID(GUI.GetPlayerID())if bM then GUI.DeselectEntity(e1)end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButtonProgress",bM)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButton",bM)end;API.HideKnightButton=HideKnightButton;function HideSelectionButton(bM)if not IsLocalScript()then ExecuteLocal("HideSelectionButton(%s)",tostring(bM))return end;HideKnightButton(bM)GUI.ClearSelection()Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/BattalionButton",bM)end;API.HideSelectionButton=HideSelectionButton;function HideBuildMenu(bM)if not IsLocalScript()then ExecuteLocal("HideBuildMenu(%s)",tostring(bM))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/BuildMenu",bM)end;API.HideBuildMenu=HideBuildMenu;function AddShortcutDescription(bP,e2)if not IsLocalScript()then return-1 end;g_KeyBindingsOptions.Descriptions=nil;for f=1,#Lib.UITools.Shortcut.HotkeyDescriptions do if Lib.UITools.Shortcut.HotkeyDescriptions[f][1]==bP then return-1 end end;local ae=#Lib.UITools.Shortcut.HotkeyDescriptions+1;table.insert(Lib.UITools.Shortcut.HotkeyDescriptions,{ID=ae,bP,e2})return#Lib.UITools.Shortcut.HotkeyDescriptions end;API.AddShortcutDescription=AddShortcutDescription;function RemoveShortcutDescription(aw)if not IsLocalScript()then return end;g_KeyBindingsOptions.Descriptions=nil;for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h.ID==aw then Lib.UITools.Shortcut.HotkeyDescriptions[g]=nil end end end;API.RemoveShortcutDescription=RemoveShortcutDescription;function SpeedLimitActivate(bM)if IsLocalScript()or Framework.IsNetworkGame()then return end;return ExecuteLocal("Lib.UITools.Speed:ActivateSpeedLimit(%s)",tostring(bM))end;API.SpeedLimitActivate=SpeedLimitActivate;function GetTerritoryName(e3)local Name=Logic.GetTerritoryName(e3)local e4=Framework.GetCurrentMapTypeAndCampaignName()if e4==1 or e4==3 then return Name end;local e5=Framework.GetCurrentMapName()local e6="Map_"..e5;local e7=string.gsub(Name," ","")e7=XGUIEng.GetStringTableText(e6 .."/Territory_"..e7)if e7==""then e7=Name.."(key?)"end;return e7 end;API.GetTerritoryName=GetTerritoryName;function GetPlayerName(aa)local aK=Logic.GetPlayerName(aa)local ah=CONST_PLAYER_NAMES[aa]if ah~=nil and ah~=""then aK=ah end;local e4=Framework.GetCurrentMapTypeAndCampaignName()local e8=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),e4)if e8>0 then return aK end;if e4==1 or e4==3 then local e9,ea,eb=Framework.GetPlayerInfo(aa)if aK~=""then return aK end;return e9 end;return aK end;API.GetPlayerName=GetPlayerName;function SetPlayerName(aa,y)assert(type(aa)=="number")assert(type(y)=="string")if not IsLocalScript()then ExecuteLocal([[SetPlayerName(%d, "%s")]],aa,y)return end;GUI_MissionStatistic.PlayerNames[aa]=y;CONST_PLAYER_NAMES[aa]=y end;API.SetPlayerName=SetPlayerName;function SetPlayerColor(aa,ec,ed,ee)error(not IsLocalScript(),"Player color must be set from logic!")g_ColorIndex["ExtraColor1"]=g_ColorIndex["ExtraColor1"]or 16;g_ColorIndex["ExtraColor2"]=g_ColorIndex["ExtraColor2"]or 17;local ef=type(ec)=="string"and g_ColorIndex[ec]or ec;local eg=ed or-1;local eh=ee or-1;Logic.PlayerSetPlayerColor(aa,ef,eg,eh)ExecuteLocal([[
        Display.UpdatePlayerColors()
        GUI.RebuildMinimapTerrain()
        GUI.RebuildMinimapTerritory()
    ]])end;API.SetPlayerColor=SetPlayerColor;function SetPlayerPortrait(aa,ei)error(aa>=1 and aa<=8,"Invalid player ID!")if not IsLocalScript()then local ej=ei~=nil and"'"..ei.."'"or"nil"ExecuteLocal("SetPlayerPortrait(%d, %s)",aa,ej)return end;if ei==nil then Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(aa)elseif ei~=nil and IsExisting(ei)then Lib.UITools.Player:SetPlayerPortraitBySettler(aa,ei)else Lib.UITools.Player:SetPlayerPortraitByModelName(aa,ei)end end;API.SetPlayerPortrait=SetPlayerPortrait;Lib.Register("module/ui/UITools_Speed")Lib.UITools=Lib.UITools or{}Lib.UITools.Speed={SpeedLimit=1,Text={Message={NoSpeedUp={de="Die Spielgeschwindigkeit kann nicht erhöht werden!",en="The game speed can not be increased!",fr="La vitesse du jeu ne peut pas être augmentée!"}}}}function Lib.UITools.Speed:SetSpeedLimit(ek)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;ek=ek<1 and 1 or math.floor(ek)log("ModuleGuiControl: Setting speed limit to "..ek)self.SpeedLimit=ek end;function Lib.UITools.Speed:ActivateSpeedLimit(bM)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;self.UseSpeedLimit=bM==true;if bM and Game.GameTimeGetFactor(GUI.GetPlayerID())>self.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..self.SpeedLimit)Game.GameTimeSetFactor(GUI.GetPlayerID(),self.SpeedLimit)g_GameSpeed=1 end end;function Lib.UITools.Speed:InitForbidSpeedUp()GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(el)GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp(el)if Lib.UITools.Speed.UseSpeedLimit==true then log("ModuleGuiControl: Checking speed limit.")if el>Lib.UITools.Speed.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..tostring(el)..".")Game.GameTimeSetFactor(GUI.GetPlayerID(),Lib.UITools.Speed.SpeedLimit)g_GameSpeed=1;Message(Lib.UITools.Speed.Text.Message.NoSpeedUp)end end end end;Lib.Register("module/ui/UITools_Widget")Lib.UITools=Lib.UITools or{}Lib.UITools.Widget={HiddenWidgets={}}function Lib.UITools.Widget:DisplayInterfaceButton(em,en)self.HiddenWidgets[em]=en==true;XGUIEng.ShowWidget(em,en==true and 0 or 1)end;function Lib.UITools.Widget:UpdateHiddenWidgets()for g,h in pairs(self.HiddenWidgets)do XGUIEng.ShowWidget(g,0)end end;function Lib.UITools.Widget:OverrideMissionGoodCounter()StartMissionGoodOrEntityCounter=function(eo,ep)local eq="/InGame/Root/Normal/MissionGoodOrEntityCounter/Icon"local er="/InGame/Root/Normal/MissionGoodOrEntityCounter"if type(eo[3])=="string"or eo[3]>2 then Lib.UITools.Widget:SetIcon(eq,eo,64,eo[3])else SetIcon(eq,eo)end;g_MissionGoodOrEntityCounterAmountToReach=ep;g_MissionGoodOrEntityCounterIcon=eo;XGUIEng.ShowWidget(er,1)end end;function Lib.UITools.Widget:OverrideUpdateClaimTerritory()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface=GUI_Knight.ClaimTerritoryUpdate;GUI_Knight.ClaimTerritoryUpdate=function()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface()local bR="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory"if Lib.UITools.Widget.HiddenWidgets[bR]==true then XGUIEng.ShowWidget(bR,0)return true end end end;function Lib.UITools.Widget:SetIcon(dV,dW,dX,y)dX=dX or 64;dW[3]=dW[3]or 0;if y==nil then return SetIcon(dV,dW,dX)end;assert(dX==44 or dX==64 or dX==128)if dX==44 then y=y..".png"end;if dX==64 then y=y.."big.png"end;if dX==128 then y=y.."verybig.png"end;local es,et,eu,ev;es=(dW[1]-1)*dX;eu=(dW[2]-1)*dX;et=dW[1]*dX;ev=dW[2]*dX;State=1;if XGUIEng.IsButton(dV)==1 then State=7 end;XGUIEng.SetMaterialAlpha(dV,State,255)XGUIEng.SetMaterialTexture(dV,State,y)XGUIEng.SetMaterialUV(dV,State,es,eu,et,ev)end;function Lib.UITools.Widget:TooltipNormal(ew,ex,ey)if ew and ew:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ew=XGUIEng.GetStringTableText(ew)end;if ex and ex:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ex=XGUIEng.GetStringTableText(ex)end;ey=ey or""if ey and ey:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ey=XGUIEng.GetStringTableText(ey)end;local ez="/InGame/Root/Normal/TooltipNormal"local eA=XGUIEng.GetWidgetID(ez)local eB=XGUIEng.GetWidgetID(ez.."/FadeIn/Name")local eC=XGUIEng.GetWidgetID(ez.."/FadeIn/Text")local eD=XGUIEng.GetWidgetID(ez.."/FadeIn/BG")local eE=XGUIEng.GetWidgetID(ez.."/FadeIn")local eF=XGUIEng.GetCurrentWidgetID()local eG=ew and ew or""local eH=ex and ex or""local eI=""if XGUIEng.IsButtonDisabled(eF)==1 and ey then eI=eI.."{cr}{@color:255,32,32,255}"..ey end;XGUIEng.SetText(eB,"{center}"..eG)XGUIEng.SetText(eC,eH..eI)local eJ=XGUIEng.GetTextHeight(eC,true)local eK,eL=XGUIEng.GetWidgetSize(eC)XGUIEng.SetWidgetSize(eC,eK,eJ)GUI_Tooltip.ResizeBG(eD,eC)local eM={eD}GUI_Tooltip.SetPosition(eA,eM,eF)GUI_Tooltip.FadeInTooltip(eE)end;function Lib.UITools.Widget:TooltipCosts(ew,ex,ey,eN,eO)eN=eN or{}local cW={}for f=1,4,1 do cW[f]=eN[f]end;if ew and ew:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ew=XGUIEng.GetStringTableText(ew)end;if ex and ex:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ex=XGUIEng.GetStringTableText(ex)end;if ey and ey:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then ey=XGUIEng.GetStringTableText(ey)end;local ez="/InGame/Root/Normal/TooltipBuy"local eA=XGUIEng.GetWidgetID(ez)local eB=XGUIEng.GetWidgetID(ez.."/FadeIn/Name")local eC=XGUIEng.GetWidgetID(ez.."/FadeIn/Text")local eD=XGUIEng.GetWidgetID(ez.."/FadeIn/BG")local eE=XGUIEng.GetWidgetID(ez.."/FadeIn")local eP=XGUIEng.GetWidgetID(ez.."/Costs")local eF=XGUIEng.GetCurrentWidgetID()local eG=ew and ew or""local eH=ex and ex or""local eI=""if XGUIEng.IsButtonDisabled(eF)==1 and ey then eI=eI.."{cr}{@color:255,32,32,255}"..ey end;XGUIEng.SetText(eB,"{center}"..eG)XGUIEng.SetText(eC,eH..eI)local eJ=XGUIEng.GetTextHeight(eC,true)local eK,eL=XGUIEng.GetWidgetSize(eC)XGUIEng.SetWidgetSize(eC,eK,eJ)GUI_Tooltip.ResizeBG(eD,eC)GUI_Tooltip.SetCosts(eP,cW,eO)local eM={eA,eP,eD}GUI_Tooltip.SetPosition(eA,eM,eF,nil,true)GUI_Tooltip.OrderTooltip(eM,eE,eP,eF,eD)GUI_Tooltip.FadeInTooltip(eE)end;Lib.Register("module/ui/UITools_Shortcut")Lib.UITools=Lib.UITools or{}Lib.UITools.Shortcut={HotkeyDescriptions={}}function Lib.UITools.Shortcut:OverrideRegisterHotkey()function g_KeyBindingsOptions:OnShow()if Game~=nil then XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",1)else XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",0)end;if g_KeyBindingsOptions.Descriptions==nil then g_KeyBindingsOptions.Descriptions={}DescRegister("MenuInGame")DescRegister("MenuDiplomacy")DescRegister("MenuProduction")DescRegister("MenuPromotion")DescRegister("MenuWeather")DescRegister("ToggleOutstockInformations")DescRegister("JumpMarketplace")DescRegister("JumpMinimapEvent")DescRegister("BuildingUpgrade")DescRegister("BuildLastPlaced")DescRegister("BuildStreet")DescRegister("BuildTrail")DescRegister("KnockDown")DescRegister("MilitaryAttack")DescRegister("MilitaryStandGround")DescRegister("MilitaryGroupAdd")DescRegister("MilitaryGroupSelect")DescRegister("MilitaryGroupStore")DescRegister("MilitaryToggleUnits")DescRegister("UnitSelect")DescRegister("UnitSelectToggle")DescRegister("UnitSelectSameType")DescRegister("StartChat")DescRegister("StopChat")DescRegister("QuickSave")DescRegister("QuickLoad")DescRegister("TogglePause")DescRegister("RotateBuilding")DescRegister("ExitGame")DescRegister("Screenshot")DescRegister("ResetCamera")DescRegister("CameraMove")DescRegister("CameraMoveMouse")DescRegister("CameraZoom")DescRegister("CameraZoomMouse")DescRegister("CameraRotate")for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h then h[1]=type(h[1])=="table"and Localize(h[1])or h[1]h[2]=type(h[2])=="table"and Localize(h[2])or h[2]table.insert(g_KeyBindingsOptions.Descriptions,1,h)end end end;XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ShortcutList)XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ActionList)for ca,bk in ipairs(g_KeyBindingsOptions.Descriptions)do XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ShortcutList,bk[1])XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ActionList,bk[2])end end end;Lib.Register("module/ui/UITools_Player")Lib.UITools=Lib.UITools or{}Lib.UITools.Player={}function Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(aa)local e1=Logic.GetKnightID(aa)local eQ="H_NPC_Generic_Trader"if e1~=0 then local dm=Logic.GetEntityType(e1)local eR=Logic.GetEntityTypeName(dm)eQ="H"..string.sub(eR,2,8).."_"..string.sub(eR,9)if not Models["Heads_"..eQ]then eQ="H_NPC_Generic_Trader"end end;g_PlayerPortrait[aa]=eQ end;function Lib.UITools.Player:SetPlayerPortraitBySettler(aa,ei)local eS={["U_KnightChivalry"]="H_Knight_Chivalry",["U_KnightHealing"]="H_Knight_Healing",["U_KnightPlunder"]="H_Knight_Plunder",["U_KnightRedPrince"]="H_Knight_RedPrince",["U_KnightSabatta"]="H_Knight_Sabatt",["U_KnightSong"]="H_Knight_Song",["U_KnightTrading"]="H_Knight_Trading",["U_KnightWisdom"]="H_Knight_Wisdom",["U_NPC_Amma_NE"]="H_NPC_Amma",["U_NPC_Castellan_ME"]="H_NPC_Castellan_ME",["U_NPC_Castellan_NA"]="H_NPC_Castellan_NA",["U_NPC_Castellan_NE"]="H_NPC_Castellan_NE",["U_NPC_Castellan_SE"]="H_NPC_Castellan_SE",["U_MilitaryBandit_Ranged_ME"]="H_NPC_Mercenary_ME",["U_MilitaryBandit_Melee_NA"]="H_NPC_Mercenary_NA",["U_MilitaryBandit_Melee_NE"]="H_NPC_Mercenary_NE",["U_MilitaryBandit_Melee_SE"]="H_NPC_Mercenary_SE",["U_NPC_Monk_ME"]="H_NPC_Monk_ME",["U_NPC_Monk_NA"]="H_NPC_Monk_NA",["U_NPC_Monk_NE"]="H_NPC_Monk_NE",["U_NPC_Monk_SE"]="H_NPC_Monk_SE",["U_NPC_Villager01_ME"]="H_NPC_Villager01_ME",["U_NPC_Villager01_NA"]="H_NPC_Villager01_NA",["U_NPC_Villager01_NE"]="H_NPC_Villager01_NE",["U_NPC_Villager01_SE"]="H_NPC_Villager01_SE"}if g_GameExtraNo>0 then eS["U_KnightPraphat"]="H_Knight_Praphat"eS["U_KnightSaraya"]="H_Knight_Saraya"eS["U_KnightKhana"]="H_Knight_Khana"eS["U_MilitaryBandit_Melee_AS"]="H_NPC_Mercenary_AS"eS["U_NPC_Castellan_AS"]="H_NPC_Castellan_AS"eS["U_NPC_Villager_AS"]="H_NPC_Villager_AS"eS["U_NPC_Monk_AS"]="H_NPC_Monk_AS"eS["U_NPC_Monk_Khana"]="H_NPC_Monk_Khana"end;local eQ="H_NPC_Generic_Trader"local s=GetID(ei)if s~=0 then local cP=Logic.GetEntityType(s)local eT=Logic.GetEntityTypeName(cP)eQ=eS[eT]or"H_NPC_Generic_Trader"if not eQ then eQ="H_NPC_Generic_Trader"end end;g_PlayerPortrait[aa]=eQ end;function Lib.UITools.Player:SetPlayerPortraitByModelName(aa,ei)if not Models["Heads_"..tostring(ei)]then ei="H_NPC_Generic_Trader"end;g_PlayerPortrait[aa]=ei end;Lib.UITools=Lib.UITools or{}Lib.UITools.Name="UITools"Lib.UITools.Global={}Lib.UITools.Local={}CONST_PLAYER_NAMES={}Lib.Require("core/Core")Lib.Require("module/ui/UITools_Player")Lib.Require("module/ui/UITools_Shortcut")Lib.Require("module/ui/UITools_Widget")Lib.Require("module/ui/UITools_Speed")Lib.Require("module/ui/UITools_API")Lib.Register("module/ui/UITools")function Lib.UITools.Global:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Local=nil;Lib.UITools.Player=nil;Lib.UITools.Shortcut=nil;Lib.UITools.Speed=nil;Lib.UITools.Widget=nil end;self.IsInstalled=true end;function Lib.UITools.Global:OnSaveGameLoaded()end;function Lib.UITools.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.UpdateTexturePosition then g_TexturePositions=g_TexturePositions or{}g_TexturePositions[arg[1]]=g_TexturePositions[arg[1]]or{}g_TexturePositions[arg[1]][arg[2]]={arg[3],arg[4],arg[5]}end end;function Lib.UITools.Local:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Shortcut:OverrideRegisterHotkey()Lib.UITools.Widget:OverrideMissionGoodCounter()Lib.UITools.Widget:OverrideUpdateClaimTerritory()Lib.UITools.Speed:InitForbidSpeedUp()self:PostTexturePositionsToGlobal()self:OverrideAfterBuildingPlacement()Lib.UITools.Global=nil end;self.IsInstalled=true end;function Lib.UITools.Local:OnSaveGameLoaded()Lib.UITools.Widget:UpdateHiddenWidgets()end;function Lib.UITools.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UITools.Local:OverrideAfterBuildingPlacement()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools=GameCallback_GUI_AfterBuildingPlacement;GameCallback_GUI_AfterBuildingPlacement=function()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools()local A,B=GUI.Debug_GetMapPositionUnderMouse()RequestHiResJob(function()local eU={Logic.GetPlayerEntitiesInArea(GUI.GetPlayerID(),0,A,B,50,16)}for f=2,eU[1]+1 do if eU[f]and eU[f]~=0 and Logic.IsBuilding(eU[f])==1 and Logic.IsConstructionComplete(eU[f])==0 then SendReportToGlobal(Report.BuildingPlaced,eU[f],Logic.EntityGetPlayer(eU[f]))SendReport(Report.BuildingPlaced,eU[f],Logic.EntityGetPlayer(eU[f]))end end end,A,B)end end;function Lib.UITools.Local:PostTexturePositionsToGlobal()RequestJob(function()if Logic.GetTime()>1 then for g,h in pairs(g_TexturePositions)do for eV,eW in pairs(h)do local A,B,C=eW[1]or 1,eW[2]or 1,eW[3]or 0;SendReportToGlobal(Report.UpdateTexturePosition,g,eV,A,B,C)end end;return true end end)end;RegisterModule(Lib.UITools.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIEffects_API")function ActivateColoredScreen(aa,eX,eY,eZ,e_)ActivateImageScreen(aa,"",eX or 0,eY or 0,eZ or 0,e_ or 255)end;API.ActivateColoredScreen=ActivateColoredScreen;function DeactivateColoredScreen(aa)DeactivateImageScreen(aa)end;API.DeactivateColoredScreen=DeactivateColoredScreen;function ActivateImageScreen(aa,f0,eX,eY,eZ,e_)assert(aa and aa>=1 and aa<=8)if not IsLocalScript()then ExecuteLocal([[Lib.UIEffects.Local:InterfaceActivateImageBackground(%d, "%s", %d, %d, %d, %d)]],aa,f0,eX~=nil and eX or 255,eY~=nil and eY or 255,eZ~=nil and eZ or 255,e_~=nil and e_ or 255)return end;Lib.UIEffects.Local:InterfaceActivateImageBackground(aa,f0,eX,eY,eZ,e_)end;API.ActivateImageScreen=ActivateImageScreen;function DeactivateImageScreen(aa)assert(aa and aa>=1 and aa<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateImageBackground(%d)",aa)return end;Lib.UIEffects.Local:InterfaceDeactivateImageBackground(aa)end;API.DeactivateImageScreen=DeactivateImageScreen;function ActivateNormalInterface(aa)assert(aa and aa>=1 and aa<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceActivateNormalInterface(%d)",aa)return end;Lib.UIEffects.Local:InterfaceActivateNormalInterface(aa)end;API.ActivateNormalInterface=ActivateNormalInterface;function DeactivateNormalInterface(aa)assert(aa and aa>=1 and aa<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(%d)",aa)return end;Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(aa)end;API.DeactivateNormalInterface=DeactivateNormalInterface;function StartCinematicEvent(y,aa)assert(IsLocalScript()==false)assert(aa and aa>=1 and aa<=8)Lib.UIEffects.CinematicEvents[aa]=Lib.UIEffects.CinematicEvents[aa]or{}local ae=Lib.UIEffects.Global:ActivateCinematicEvent(aa)Lib.UIEffects.CinematicEvents[aa][y]=ae end;API.StartCinematicEvent=StartCinematicEvent;function FinishCinematicEvent(y,aa)assert(IsLocalScript()==false)assert(aa and aa>=1 and aa<=8)Lib.UIEffects.CinematicEvents[aa]=Lib.UIEffects.CinematicEvents[aa]or{}if Lib.UIEffects.CinematicEvents[aa][y]then Lib.UIEffects.Global:ConcludeCinematicEvent(Lib.UIEffects.CinematicEvents[aa][y],aa)end end;API.FinishCinematicEvent=FinishCinematicEvent;function GetCinematicEvent(f1,aa)assert(aa and aa>=1 and aa<=8)Lib.UIEffects.CinematicEvents[aa]=Lib.UIEffects.CinematicEvents[aa]or{}if type(f1)=="number"then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(f1)end;return Lib.UIEffects.Global:GetCinematicEventStatus(f1)end;if Lib.UIEffects.CinematicEvents[aa][f1]then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[aa][f1])end;return Lib.UIEffects.Global:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[aa][f1])end;return CinematicEventState.NotTriggered end;API.GetCinematicEvent=GetCinematicEvent;function IsCinematicEventActive(aa)assert(aa and aa>=1 and aa<=8)Lib.UIEffects.CinematicEvents[aa]=Lib.UIEffects.CinematicEvents[aa]or{}for g,h in pairs(Lib.UIEffects.CinematicEvents[aa])do if GetCinematicEvent(g,aa)==CinematicEventState.Active then return true end end;return false end;API.IsCinematicEventActive=IsCinematicEventActive;function StartTypewriter(f2)if Framework.IsNetworkGame()~=true then f2.PlayerID=f2.PlayerID or 1 end;if f2.PlayerID==nil or(f2.PlayerID<1 or f2.PlayerID>8)then return end;f2.Text=Localize(f2.Text or"")f2.Callback=f2.Callback or function()end;f2.CharSpeed=f2.CharSpeed or 1;f2.Waittime=(f2.Waittime or 8)*10;f2.TargetEntity=GetID(f2.TargetEntity or 0)f2.Image=f2.Image or""f2.Color=f2.Color or{R=f2.Image and f2.Image~=""and 255 or 0,G=f2.Image and f2.Image~=""and 255 or 0,B=f2.Image and f2.Image~=""and 255 or 0,A=255}if f2.Opacity and f2.Opacity>=0 and f2.Opacity then f2.Color.A=math.floor(255*f2.Opacity+0.5)end;f2.Delay=15;f2.Index=0;return Lib.UIEffects.Global:StartTypewriter(f2)end;API.StartTypewriter=StartTypewriter;Lib.Register("module/camera/Camera_Text")Lib.Camera=Lib.Camera or{}Lib.Camera.Text={Shortcut={Hotkey={de="STRG + UMSCHALT + K",en="CTRL + SHIFT + K",fr="CTRL + SHIFT + K"},Description={de="Alternativen Zoom ein/aus",en="Alternative zoom on/off",fr="Zoom alternatif On/Off"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/camera/Camera_API")function SetRenderDistance(f3)if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:SetRenderDistance(%f)]],f3)return end;Lib.Camera.Local:SetRenderDistance(f3)end;function ResetRenderDistance()if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:ResetRenderDistance()]])return end;Lib.Camera.Local:ResetRenderDistance()end;function ActivateBorderScroll(aa)aa=aa or-1;assert(aa==-1 or aa>=1 and aa<=8)if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:ActivateBorderScroll(%d)",aa)return end;Lib.Camera.Local:ActivateBorderScroll(aa)end;API.ActivateBorderScroll=ActivateBorderScroll;function DeactivateBorderScroll(a1,aa)aa=aa or-1;assert(aa==-1 or aa>=1 and aa<=8)local f4;if a1 then f4=GetID(a1)end;if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:DeactivateBorderScroll(%d, %d)",aa,f4 or 0)return end;Lib.Camera.Local:DeactivateBorderScroll(aa,f4)end;API.DeactivateBorderScroll=DeactivateBorderScroll;function AllowExtendedZoom(bM,aa)aa=aa or-1;if not GUI then ExecuteLocal([[API.AllowExtendedZoom(%s, %d)]],tostring(bM==true),aa)return end;if aa~=-1 and GUI.GetPlayerID()~=aa then return end;Lib.Camera.Local.ExtendedZoomAllowed=bM==true;if bM==true then Lib.Camera.Local:DescribeExtendedZoomShortcut()else Lib.Camera.Local:RemoveExtendedZoomShortcut()Lib.Camera.Local:DeactivateExtendedZoom(aa)end end;API.AllowExtendedZoom=AllowExtendedZoom;function FocusCameraOnKnight(aa,f5,f6)FocusCameraOnEntity(Logic.GetKnightID(aa),f5,f6)end;API.FocusCameraOnKnight=FocusCameraOnKnight;function FocusCameraOnEntity(k,f5,f6)if not GUI then local f7=type(k)~="string"and k or"'"..k.."'"ExecuteLocal([[API.FocusCameraOnEntity(%s, %f, %f)]],f7,f5,f6)return end;assert(type(f5)=="number","Rotation is wrong!")assert(type(f6)=="number","Zoom factor is wrong!")assert(IsExisting(k),"Entity does not exist!")Lib.Camera.Local:SetCameraToEntity(k,f5,f6)end;API.FocusCameraOnEntity=FocusCameraOnEntity;Lib.Camera=Lib.Camera or{}Lib.Camera.Name="Camera"Lib.Camera.Global={}Lib.Camera.Local={BorderScrollDeactivated=false,ExtendedZoomHotKeyID=0,ExtendedZoomAllowed=true}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/camera/Camera_API")Lib.Require("module/camera/Camera_Text")Lib.Register("module/camera/Camera")function Lib.Camera.Global:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")Lib.Camera.Local=nil end;self.IsInstalled=true end;function Lib.Camera.Global:OnSaveGameLoaded()end;function Lib.Camera.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Camera.Local:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")self:ResetRenderDistance()self:DescribeExtendedZoomShortcut()self:InitExtendedZoomHotkey()Lib.Camera.Global=nil end;self.IsInstalled=true end;function Lib.Camera.Local:OnSaveGameLoaded()end;function Lib.Camera.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.SaveGameLoaded then if self.ExtendedZoomActive then self:ActivateExtendedZoom(GUI.GetPlayerID())end;self:InitExtendedZoomHotkey()self:ResetRenderDistance()end end;function Lib.Camera.Local:SetRenderDistance(f3)Camera.Cutscene_SetFarClipPlane(f3,f3)Display.SetFarClipPlaneMinAndMax(f3,f3)end;function Lib.Camera.Local:ResetRenderDistance()Camera.Cutscene_SetFarClipPlane(CONST_FARCLIPPLANE)Display.SetFarClipPlaneMinAndMax(CONST_FARCLIPPLANE_DEFAULT,CONST_FARCLIPPLANE_DEFAULT)end;function Lib.Camera.Local:DeactivateBorderScroll(aa,f8)if aa~=-1 and aa~=GUI.GetPlayerID()or self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=true;if f8 then Camera.RTS_FollowEntity(f8)end;Camera.RTS_SetBorderScrollSize(0)Camera.RTS_SetZoomWheelSpeed(0)SendReportToGlobal(Report.BorderScrollLocked,aa,f8 or 0)SendReport(Report.BorderScrollLocked,aa,f8 or 0)end;function Lib.Camera.Local:ActivateBorderScroll(aa)if aa~=-1 and aa~=GUI.GetPlayerID()or not self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=false;Camera.RTS_FollowEntity(0)Camera.RTS_SetBorderScrollSize(3.0)Camera.RTS_SetZoomWheelSpeed(4.2)SendReportToGlobal(Report.BorderScrollReset,aa)SendReport(Report.BorderScrollReset,aa)end;function Lib.Camera.Local:SetCameraToEntity(k,f5,f6)local ay=GetPosition(k)local f9=f5 or-45;local fa=f6 or 0.5;Camera.RTS_SetLookAtPosition(ay.X,ay.Y)Camera.RTS_SetRotationAngle(f9)Camera.RTS_SetZoomFactor(fa)end;function Lib.Camera.Local:DescribeExtendedZoomShortcut()self:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID==0 then self.ExtendedZoomHotKeyID=AddShortcutDescription(Localize(Lib.Camera.Text.Shortcut.Hotkey),Localize(Lib.Camera.Text.Shortcut.Description))end end;function Lib.Camera.Local:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID~=0 then RemoveShortcutDescription(self.ExtendedZoomHotKeyID)self.ExtendedZoomHotKeyID=0 end end;function Lib.Camera.Local:InitExtendedZoomHotkey()Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.K,"Lib.Camera.Local:ToggleExtendedZoom(GUI.GetPlayerID())",2)end;function Lib.Camera.Local:ToggleExtendedZoom(aa)if self.ExtendedZoomAllowed then if self.ExtendedZoomActive then self:DeactivateExtendedZoom(aa)else self:ActivateExtendedZoom(aa)end end end;function Lib.Camera.Local:ActivateExtendedZoom(aa)if aa~=-1 and aa~=GUI.GetPlayerID()then return end;if not self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomDeactivated,aa)end;self.ExtendedZoomActive=true;Camera.RTS_SetZoomFactorMax(0.870001)Camera.RTS_SetZoomFactor(0.870000)Camera.RTS_SetZoomFactorMin(0.099999)SendReportToGlobal(Report.ExtendedZoomDeactivated,aa)end;function Lib.Camera.Local:DeactivateExtendedZoom(aa)if aa~=-1 and aa~=GUI.GetPlayerID()then return end;if self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomActivated,aa)end;self.ExtendedZoomActive=false;Camera.RTS_SetZoomFactor(0.500000)Camera.RTS_SetZoomFactorMax(0.500001)Camera.RTS_SetZoomFactorMin(0.099999)end;RegisterModule(Lib.Camera.Name)Lib.UIEffects=Lib.UIEffects or{}Lib.UIEffects.Name="UIEffects"Lib.UIEffects.CinematicEvents={}Lib.UIEffects.Global={CinematicEventID=0,CinematicEventStatus={},CinematicEventQueue={},TypewriterEventData={},TypewriterEventCounter=0}Lib.UIEffects.Local={CinematicEventStatus={},ChatOptionsWasShown=false,MessageLogWasShown=false,PauseScreenShown=false,NormalModeHidden=false}CinematicEventTypes={}CinematicEventState={NotTriggered=0,Active=1,Concluded=2}Lib.Require("core/Core")Lib.Require("module/camera/Camera")Lib.Require("module/ui/UIEffects_API")Lib.Register("module/ui/UIEffects")function Lib.UIEffects.Global:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}self.CinematicEventQueue[f]={}end;RequestHiResJob(function()Lib.UIEffects.Global:ControlTypewriter()end)Lib.UIEffects.Local=nil end;self.IsInstalled=true end;function Lib.UIEffects.Global:OnSaveGameLoaded()end;function Lib.UIEffects.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1;DeactivateImageScreen(arg[2])ActivateNormalInterface(arg[2])elseif aw==Report.CinematicConcluded then if self.CinematicEventStatus[arg[2]][arg[1]]then self.CinematicEventStatus[arg[2]][arg[1]]=2 end;if#self.CinematicEventQueue[arg[2]]>0 then ActivateImageScreen(arg[2],"",0,0,0,255)DeactivateNormalInterface(arg[2])end end end;function Lib.UIEffects.Global:PushCinematicEventToQueue(aa,i,y,f2)table.insert(self.CinematicEventQueue[aa],{i,y,f2})end;function Lib.UIEffects.Global:LookUpCinematicInQueue(aa)if#self.CinematicEventQueue[aa]>0 then return self.CinematicEventQueue[aa][1]end end;function Lib.UIEffects.Global:PopCinematicEventFromQueue(aa)if#self.CinematicEventQueue[aa]>0 then return table.remove(self.CinematicEventQueue[aa],1)end end;function Lib.UIEffects.Global:GetNewCinematicEventID()self.CinematicEventID=self.CinematicEventID+1;return self.CinematicEventID end;function Lib.UIEffects.Global:GetCinematicEventStatus(fb)for f=1,8 do if self.CinematicEventStatus[f][fb]then return self.CinematicEventStatus[f][fb]end end;return 0 end;function Lib.UIEffects.Global:ActivateCinematicEvent(aa)local ae=self:GetNewCinematicEventID()SendReport(Report.CinematicActivated,ae,aa)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicActivated, %d, %d);
          if GUI.GetPlayerID() == %d then
            Lib.UIEffects.Local.SavingWasDisabled = Lib.Core.Save.SavingDisabled == true;
            DisableSaving(true);
          end]],ae,aa,aa))return ae end;function Lib.UIEffects.Global:ConcludeCinematicEvent(aw,aa)SendReport(Report.CinematicConcluded,aw,aa)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicConcluded, %d, %d);
          if GUI.GetPlayerID() == %d then
            if not Lib.UIEffects.Local.SavingWasDisabled then
                DisableSaving(false);
            end
            Lib.UIEffects.Local.SavingWasDisabled = false;
          end]],aw,aa,aa))end;function Lib.UIEffects.Global:StartTypewriter(f2)self.TypewriterEventCounter=self.TypewriterEventCounter+1;local fc="CinematicEvent_Typewriter"..self.TypewriterEventCounter;f2.Name=fc;if not self.LoadscreenClosed or IsCinematicEventActive(f2.PlayerID)then Lib.UIEffects.Global:PushCinematicEventToQueue(f2.PlayerID,CinematicEventTypes.Typewriter,fc,f2)return f2.Name end;return self:PlayTypewriter(f2)end;function Lib.UIEffects.Global:PlayTypewriter(f2)local ae=StartCinematicEvent(f2.Name,f2.PlayerID)f2.ID=ae;f2.TextTokens=self:TokenizeText(f2)self.TypewriterEventData[f2.PlayerID]=f2;ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            ActivateImageScreen(GUI.GetPlayerID(), "%s", %d, %d, %d, %d)
            DeactivateNormalInterface(GUI.GetPlayerID())
            DeactivateBorderScroll(GUI.GetPlayerID(), %d)
            Input.CutsceneMode()
            GUI.ClearNotes()
        end
        ]],f2.PlayerID,f2.Image,f2.Color.R or 0,f2.Color.G or 0,f2.Color.B or 0,f2.Color.A or 255,f2.TargetEntity)SendReport(Report.TypewriterStarted,f2.PlayerID,f2.Name)SendReportToLocal(Report.TypewriterStarted,f2.PlayerID,f2.Name)return f2.Name end;function Lib.UIEffects.Global:FinishTypewriter(aa)if self.TypewriterEventData[aa]then local fd=table.copy(self.TypewriterEventData[aa])local fe=self.TypewriterEventData[aa].PlayerID;ExecuteLocal([[
            if GUI.GetPlayerID() == %d then
                ResetRenderDistance()
                DeactivateImageScreen(GUI.GetPlayerID())
                ActivateNormalInterface(GUI.GetPlayerID())
                ActivateBorderScroll(GUI.GetPlayerID())
                if ModuleGuiControl then
                    Lib.UITools.Widget:UpdateHiddenWidgets()
                end
                Input.GameMode()
                GUI.ClearNotes()
            end
        ]],aa)SendReport(Report.TypewriterEnded,fe,fd.Name)SendReportToLocal(Report.TypewriterEnded,fe,fd.Name)self.TypewriterEventData[aa]:Callback()FinishCinematicEvent(fd.Name,fe)self.TypewriterEventData[aa]=nil end end;function Lib.UIEffects.Global:TokenizeText(f2)local ff={}local fg={}local bS=ConvertPlaceholders(Localize(f2.Text))bS=bS:gsub("%s+"," ")while true do local c2,c3=bS:find("{")local c4,c5=bS:find("}")if not c2 or not c4 then table.insert(fg,bS)break end;if c2>1 then table.insert(fg,bS:sub(1,c2-1))end;table.insert(fg,bS:sub(c2,c5))bS=bS:sub(c5+1)end;local fh=false;for f=1,#fg,1 do if fg[f]:find("{")then local ca=#ff;if fh then ff[ca]=ff[ca]..fg[f]else table.insert(ff,ca+1,fg[f])end;fh=true else local ca=1;while ca<=#fg[f]do if string.byte(fg[f]:sub(ca,ca))==195 then table.insert(ff,fg[f]:sub(ca,ca+1))ca=ca+1 else table.insert(ff,fg[f]:sub(ca,ca))end;ca=ca+1 end;fh=false end end;return ff end;function Lib.UIEffects.Global:ControlTypewriter()for f=1,8 do if self.LoadscreenClosed and not IsCinematicEventActive(f)then local fi=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fi and fi[1]==CinematicEventTypes.Typewriter then local aU=Lib.UIEffects.Global:PopCinematicEventFromQueue(f)self:PlayTypewriter(aU[3])end end end;for g,h in pairs(self.TypewriterEventData)do if self.TypewriterEventData[g].Delay>0 then self.TypewriterEventData[g].Delay=self.TypewriterEventData[g].Delay-1;ExecuteLocal([[if GUI.GetPlayerID() == %d then GUI.ClearNotes() end]],self.TypewriterEventData[g].PlayerID)end;if self.TypewriterEventData[g].Delay==0 then self.TypewriterEventData[g].Index=h.Index+h.CharSpeed;if h.Index>#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Index=#self.TypewriterEventData[g].TextTokens end;local ca=math.floor(h.Index+0.5)local bS=""for f=1,ca,1 do bS=bS..self.TypewriterEventData[g].TextTokens[f]end;ExecuteLocal([[
                if GUI.GetPlayerID() == %d then
                    GUI.ClearNotes()
                    GUI.AddNote("%s")
                end
                ]],self.TypewriterEventData[g].PlayerID,bS)if ca==#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Waittime=h.Waittime-1;if h.Waittime<=0 then self:FinishTypewriter(g)end end end end end;function Lib.UIEffects.Local:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}end;self:OverrideInterfaceUpdateForCinematicMode()self:OverrideInterfaceThroneroomForCinematicMode()Lib.UIEffects.Global=nil end;self.IsInstalled=true end;function Lib.UIEffects.Local:OnSaveGameLoaded()end;function Lib.UIEffects.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1 elseif aw==Report.CinematicConcluded then for f=1,8 do if self.CinematicEventStatus[f][arg[1]]then self.CinematicEventStatus[f][arg[1]]=2 end end end end;function Lib.UIEffects.Local:GetCinematicEventStatus(fb)for f=1,8 do if self.CinematicEventStatus[f][fb]then return self.CinematicEventStatus[f][fb]end end;return 0 end;function Lib.UIEffects.Local:OverrideInterfaceUpdateForCinematicMode()GameCallback_GameSpeedChanged_Orig_UIEffects=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(el)if not Lib.UIEffects.Local.PauseScreenShown then GameCallback_GameSpeedChanged_Orig_UIEffects(el)end end;MissionTimerUpdate_Orig_UIEffects=MissionTimerUpdate;MissionTimerUpdate=function()MissionTimerUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)end end;MissionGoodOrEntityCounterUpdate_Orig_UIEffects=MissionGoodOrEntityCounterUpdate;MissionGoodOrEntityCounterUpdate=function()MissionGoodOrEntityCounterUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)end end;MerchantButtonsUpdater_Orig_UIEffects=GUI_Merchant.ButtonsUpdater;GUI_Merchant.ButtonsUpdater=function()MerchantButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)end end;if GUI_Tradepost then TradepostButtonsUpdater_Orig_UIEffects=GUI_Tradepost.ButtonsUpdater;GUI_Tradepost.ButtonsUpdater=function()TradepostButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end end end end;function Lib.UIEffects.Local:OverrideInterfaceThroneroomForCinematicMode()GameCallback_Camera_StartButtonPressed=function(aa)end;OnStartButtonPressed=function()GameCallback_Camera_StartButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_BackButtonPressed=function(aa)end;OnBackButtonPressed=function()GameCallback_Camera_BackButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_SkipButtonPressed=function(aa)end;OnSkipButtonPressed=function()GameCallback_Camera_SkipButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_ThroneRoomLeftClick=function(aa)end;ThroneRoomLeftClick=function()GameCallback_Camera_ThroneRoomLeftClick(GUI.GetPlayerID())end;GameCallback_Camera_ThroneroomCameraControl=function(aa)end;ThroneRoomCameraControl=function()GameCallback_Camera_ThroneroomCameraControl(GUI.GetPlayerID())end end;function Lib.UIEffects.Local:InterfaceActivateImageBackground(aa,fj,fk,_G,fl,fm)if aa~=GUI.GetPlayerID()or self.PauseScreenShown then return end;self.PauseScreenShown=true;XGUIEng.PushPage("/InGame/Root/Normal/PauseScreen",false)XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",1)if fj and fj~=""then local fn={GUI.GetScreenSize()}local es,eu,et,ev=0,0,1,1;if fn[1]/fn[2]<1.6 then es=es+es/0.125;et=et-et*0.125 end;XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,fj)XGUIEng.SetMaterialUV("/InGame/Root/Normal/PauseScreen",0,es,eu,et,ev)end;XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,fk,_G,fl,fm)SendReportToGlobal(Report.ImageScreenShown,aa)SendReport(Report.ImageScreenShown,aa)end;function Lib.UIEffects.Local:InterfaceDeactivateImageBackground(aa)if aa~=GUI.GetPlayerID()or not self.PauseScreenShown then return end;self.PauseScreenShown=false;XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",0)XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,"")XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,40,40,40,180)XGUIEng.PopPage()SendReportToGlobal(Report.ImageScreenHidden,aa)SendReport(Report.ImageScreenHidden,aa)end;function Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(aa)if GUI.GetPlayerID()~=aa or self.NormalModeHidden then return end;self.NormalModeHidden=true;XGUIEng.PushPage("/InGame/Root/Normal/NotesWindow",false)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",0)XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)HideOtherMenus()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/AlignTopLeft/GameClock")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClockWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/ChatOptions/Background")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)self.ChatOptionsWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/MessageLog/Name")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)self.MessageLogWasShown=true end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end;SendReportToGlobal(Report.GameInterfaceHidden,GUI.GetPlayerID())SendReport(Report.GameInterfaceHidden,GUI.GetPlayerID())end;function Lib.UIEffects.Local:InterfaceActivateNormalInterface(aa)if GUI.GetPlayerID()~=aa or not self.NormalModeHidden then return end;self.NormalModeHidden=false;XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",1)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",1)XGUIEng.PopPage()if g_MissionTimerEndTime then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",1)end;if g_MissionGoodOrEntityCounterAmountToReach then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",1)end;if self.GameClockWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClockWasShown=false end;if self.ChatOptionsWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.ChatOptionsWasShown=false end;if self.MessageLogWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)self.MessageLogWasShown=false end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",1)end;SendReportToGlobal(Report.GameInterfaceShown,GUI.GetPlayerID())SendReport(Report.GameInterfaceShown,GUI.GetPlayerID())end;RegisterModule(Lib.UIEffects.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_API")function AddBuildingButtonAtPosition(fo,fp,fq,fr,fs)return Lib.UIBuilding.Local:AddButtonBinding(0,fo,fp,fq,fr,fs)end;API.AddBuildingButtonAtPosition=AddBuildingButtonAtPosition;function AddBuildingButton(fq,fr,fs)return AddBuildingButtonAtPosition(nil,nil,fq,fr,fs)end;API.AddBuildingButton=AddBuildingButton;function AddBuildingButtonByTypeAtPosition(i,fo,fp,fq,fr,fs)return Lib.UIBuilding.Local:AddButtonBinding(i,fo,fp,fq,fr,fs)end;API.AddBuildingButtonByTypeAtPosition=AddBuildingButtonByTypeAtPosition;function AddBuildingButtonByType(i,fq,fr,fs)return AddBuildingButtonByTypeAtPosition(i,nil,nil,fq,fr,fs)end;API.AddBuildingButtonByType=AddBuildingButtonByType;function AddBuildingButtonByEntityAtPosition(bh,fo,fp,fq,fr,fs)return Lib.UIBuilding.Local:AddButtonBinding(bh,fo,fp,fq,fr,fs)end;API.AddBuildingButtonByEntityAtPosition=AddBuildingButtonByEntityAtPosition;function AddBuildingButtonByEntity(bh,fq,fr,fs)return AddBuildingButtonByEntityAtPosition(bh,nil,nil,fq,fr,fs)end;API.AddBuildingButtonByEntity=AddBuildingButtonByEntity;function DropBuildingButton(aw)Lib.UIBuilding.Local:RemoveButtonBinding(0,aw)end;API.DropBuildingButton=DropBuildingButton;function DropBuildingButtonFromType(i,aw)Lib.UIBuilding.Local:RemoveButtonBinding(i,aw)end;API.DropBuildingButtonFromType=DropBuildingButtonFromType;function DropBuildingButtonFromEntity(bh,aw)Lib.UIBuilding.Local:RemoveButtonBinding(bh,aw)end;API.DropBuildingButtonFromEntity=DropBuildingButtonFromEntity;Lib.UIBuilding=Lib.UIBuilding or{}Lib.UIBuilding.Name="UIBuilding"Lib.UIBuilding.CinematicEvents={}Lib.UIBuilding.Global={}Lib.UIBuilding.Local={BuildingButtons={BindingCounter=0,Bindings={},Configuration={["BuyAmmunitionCart"]={TypeExclusion="^B_.*StoreHouse",OriginalPosition=nil,Bind=nil},["BuyBattallion"]={TypeExclusion="^B_[CB]a[sr][tr][la][ec]",OriginalPosition=nil,Bind=nil},["PlaceField"]={TypeExclusion="^B_.*[BFH][aei][erv][kme]",OriginalPosition=nil,Bind=nil},["StartFestival"]={TypeExclusion="^B_Marketplace",OriginalPosition=nil,Bind=nil},["StartTheatrePlay"]={TypeExclusion="^B_Theatre",OriginalPosition=nil,Bind=nil},["UpgradeTurret"]={TypeExclusion="^B_WallTurret",OriginalPosition=nil,Bind=nil},["BuyBatteringRamCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuyCatapultCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuySiegeTowerCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil}}}}Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding_API")Lib.Register("module/ui/UIBuilding")function Lib.UIBuilding.Global:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")end;self.IsInstalled=true end;function Lib.UIBuilding.Global:OnSaveGameLoaded()end;function Lib.UIBuilding.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.StartUpgradeClicked then SendReportToLocal(aw,unpack(arg))elseif aw==Report.CancelUpgradeClicked then SendReportToLocal(aw,unpack(arg))elseif aw==Report.FestivalClicked then SendReportToLocal(aw,unpack(arg))elseif aw==Report.SermonClicked then SendReportToLocal(aw,unpack(arg))elseif aw==Report.TheatrePlayClicked then SendReportToLocal(aw,unpack(arg))end end;function Lib.UIBuilding.Local:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self:InitBackupPositions()self:OverrideOnSelectionChanged()self:OverrideBuyAmmunitionCart()self:OverrideBuyBattalion()self:OverrideBuySiegeEngineCart()self:OverridePlaceField()self:OverrideStartFestival()self:OverrideStartTheatrePlay()self:OverrideUpgradeTurret()self:OverrideUpgradeBuilding()self:OverrideStartSermon()end;self.IsInstalled=true end;function Lib.UIBuilding.Local:OnSaveGameLoaded()end;function Lib.UIBuilding.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UIBuilding.Local:OverrideOnSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.UIBuilding.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.UIBuilding.Local:UnbindButtons()Lib.UIBuilding.Local:BindButtons(GUI.GetSelectedEntity())end end;function Lib.UIBuilding.Local:OverrideBuyAmmunitionCart()self.Orig_BuyAmmunitionCartClicked=GUI_BuildingButtons.BuyAmmunitionCartClicked;GUI_BuildingButtons.BuyAmmunitionCartClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartClicked()end;dc.Action(ft,s)end;Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate=GUI_BuildingButtons.BuyAmmunitionCartUpdate;GUI_BuildingButtons.BuyAmmunitionCartUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then SetIcon(ft,{10,4})XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideBuyBattalion()self.Orig_BuyBattalionClicked=GUI_BuildingButtons.BuyBattalionClicked;GUI_BuildingButtons.BuyBattalionClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_BuyBattalionClicked()end;dc.Action(ft,s)end;self.Orig_BuyBattalionMouseOver=GUI_BuildingButtons.BuyBattalionMouseOver;GUI_BuildingButtons.BuyBattalionMouseOver=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc;if Lib.UIBuilding.Local.BuildingButtons.Configuration[d1]then dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind end;if not dc then return Lib.UIBuilding.Local.Orig_BuyBattalionMouseOver()end;dc.Tooltip(ft,s)end;self.Orig_BuyBattalionUpdate=GUI_BuildingButtons.BuyBattalionUpdate;GUI_BuildingButtons.BuyBattalionUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_BuyBattalionUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverridePlaceField()self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_PlaceFieldClicked()end;dc.Action(ft,s)end;self.Orig_PlaceFieldMouseOver=GUI_BuildingButtons.PlaceFieldMouseOver;GUI_BuildingButtons.PlaceFieldMouseOver=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_PlaceFieldMouseOver()end;dc.Tooltip(ft,s)end;self.Orig_PlaceFieldUpdate=GUI_BuildingButtons.PlaceFieldUpdate;GUI_BuildingButtons.PlaceFieldUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_PlaceFieldUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideStartFestival()self.Orig_StartKnightsPromotionCelebration=StartKnightsPromotionCelebration;StartKnightsPromotionCelebration=function(aa,fu,fv)Lib.UIBuilding.Local.Orig_StartKnightsPromotionCelebration(aa,fu,fv)SendReportToGlobal(Report.FestivalClicked,aa,1)end;GUI_BuildingButtons.StartFestivalClicked=function(fw)local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then local n=GUI.GetPlayerID()local cW={Logic.GetFestivalCost(n,fw)}local fx,cX=AreCostsAffordable(cW)if s~=Logic.GetMarketplace(n)then return end;if fx==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartFestival(n,fw)StartEventMusic(MusicSystem.EventFestivalMusic,n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightSong)GUI.AddBuff(Buffs.Buff_Festival)SendReportToGlobal(Report.FestivalClicked,n,0)else Message(cX)end;return end;dc.Action(ft,s)end;self.Orig_StartFestivalMouseOver=GUI_BuildingButtons.StartFestivalMouseOver;GUI_BuildingButtons.StartFestivalMouseOver=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_StartFestivalMouseOver()end;dc.Tooltip(ft,s)end;self.Orig_StartFestivalUpdate=GUI_BuildingButtons.StartFestivalUpdate;GUI_BuildingButtons.StartFestivalUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then SetIcon(ft,{4,15})XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_StartFestivalUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideStartTheatrePlay()GUI_BuildingButtons.StartTheatrePlayClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then local n=GUI.GetPlayerID()local fy=Logic.GetGoodTypeOnOutStockByIndex(s,0)local dg=Logic.GetMaxAmountOnStock(s)local cW={fy,dg}local fx,cX=AreCostsAffordable(cW)if Logic.CanStartTheatrePlay(s)==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartTheatrePlay(s)SendReportToGlobal(Report.TheatrePlayClicked,n)elseif fx==false then Message(cX)end;return end;dc.Action(ft,s)end;self.Orig_StartTheatrePlayMouseOver=GUI_BuildingButtons.StartTheatrePlayMouseOver;GUI_BuildingButtons.StartTheatrePlayMouseOver=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_StartTheatrePlayMouseOver()end;dc.Tooltip(ft,s)end;self.Orig_StartTheatrePlayUpdate=GUI_BuildingButtons.StartTheatrePlayUpdate;GUI_BuildingButtons.StartTheatrePlayUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then SetIcon(ft,{16,2})XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_StartTheatrePlayUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideUpgradeTurret()self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_UpgradeTurretClicked()end;dc.Action(ft,s)end;self.Orig_UpgradeTurretMouseOver=GUI_BuildingButtons.UpgradeTurretMouseOver;GUI_BuildingButtons.UpgradeTurretMouseOver=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then return Lib.UIBuilding.Local.Orig_UpgradeTurretMouseOver()end;dc.Tooltip(ft,s)end;self.Orig_UpgradeTurretUpdate=GUI_BuildingButtons.UpgradeTurretUpdate;GUI_BuildingButtons.UpgradeTurretUpdate=function()local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind;if not dc then XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_UpgradeTurretUpdate()end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideBuySiegeEngineCart()self.Orig_BuySiegeEngineCartClicked=GUI_BuildingButtons.BuySiegeEngineCartClicked;GUI_BuildingButtons.BuySiegeEngineCartClicked=function(fz)local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc;if d1=="BuyCatapultCart"or d1=="BuySiegeTowerCart"or d1=="BuyBatteringRamCart"then dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind end;if not dc then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartClicked(fz)end;dc.Action(ft,s)end;self.Orig_BuySiegeEngineCartMouseOver=GUI_BuildingButtons.BuySiegeEngineCartMouseOver;GUI_BuildingButtons.BuySiegeEngineCartMouseOver=function(fz,fA)local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc;if d1=="BuyCatapultCart"or d1=="BuySiegeTowerCart"or d1=="BuyBatteringRamCart"then dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind end;if not dc then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartMouseOver(fz,fA)end;dc.Tooltip(ft,s)end;self.Orig_BuySiegeEngineCartUpdate=GUI_BuildingButtons.BuySiegeEngineCartUpdate;GUI_BuildingButtons.BuySiegeEngineCartUpdate=function(fz)local ft=XGUIEng.GetCurrentWidgetID()local d1=XGUIEng.GetWidgetNameByID(ft)local s=GUI.GetSelectedEntity()local dc;if d1=="BuyCatapultCart"or d1=="BuySiegeTowerCart"or d1=="BuyBatteringRamCart"then dc=Lib.UIBuilding.Local.BuildingButtons.Configuration[d1].Bind end;if not dc then if d1=="BuyBatteringRamCart"then SetIcon(ft,{9,2})elseif d1=="BuySiegeTowerCart"then SetIcon(ft,{9,3})elseif d1=="BuyCatapultCart"then SetIcon(ft,{9,1})end;XGUIEng.ShowWidget(ft,1)XGUIEng.DisableButton(ft,0)return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartUpdate(fz)end;dc.Update(ft,s)end end;function Lib.UIBuilding.Local:OverrideUpgradeBuilding()GUI_BuildingButtons.UpgradeClicked=function()local ft=XGUIEng.GetCurrentWidgetID()local s=GUI.GetSelectedEntity()if Logic.CanCancelUpgradeBuilding(s)then Sound.FXPlay2DSound("ui\\menu_click")GUI.CancelBuildingUpgrade(s)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/BuildingButtons",1)SendReportToGlobal(Report.CancelUpgradeClickede,s,GUI.GetPlayerID())return end;local cW=GUI_BuildingButtons.GetUpgradeCosts()local fx,cX=AreCostsAffordable(cW)if fx==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.UpgradeBuilding(s,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightWisdom)if ft~=0 then SaveButtonPressed(ft)end;SendReportToGlobal(Report.StartUpgradeClicked,s,GUI.GetPlayerID())else Message(cX)end end end;function Lib.UIBuilding.Local:OverrideStartSermon()function GUI_BuildingButtons.StartSermonClicked()local n=GUI.GetPlayerID()if Logic.CanSermonBeActivated(n)then GUI.ActivateSermon(n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightHealing)GUI.AddBuff(Buffs.Buff_Sermon)local fB=Logic.GetCathedral(n)local A,B=Logic.GetEntityPosition(fB)local C=0;Sound.FXPlay3DSound("buildings\\building_start_sermon",A,B,C)SendReportToGlobal(Report.SermonClicked,GUI.GetPlayerID())end end end;function Lib.UIBuilding.Local:InitBackupPositions()for g,h in pairs(self.BuildingButtons.Configuration)do local A,B=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g)self.BuildingButtons.Configuration[g].OriginalPosition={A,B}end end;function Lib.UIBuilding.Local:GetButtonsForOverwrite(aw,aB)local fC={}local l=Logic.GetEntityType(aw)local fD=Logic.GetEntityTypeName(l)for g,h in pairs(self.BuildingButtons.Configuration)do if#fC==aB then break end;if not fD:find(h.TypeExclusion)then table.insert(fC,g)end end;assert(#fC==aB)table.sort(fC)return fC end;function Lib.UIBuilding.Local:AddButtonBinding(i,fo,fp,fE,fF,fG)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;if#self.BuildingButtons.Bindings[i]<6 then self.BuildingButtons.BindingCounter=self.BuildingButtons.BindingCounter+1;table.insert(self.BuildingButtons.Bindings[i],{ID=self.BuildingButtons.BindingCounter,Position={fo,fp},Action=fE,Tooltip=fF,Update=fG})return self.BuildingButtons.BindingCounter end;return 0 end;function Lib.UIBuilding.Local:RemoveButtonBinding(i,aw)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;for f=#self.BuildingButtons.Bindings[i],1,-1 do if self.BuildingButtons.Bindings[i][f].ID==aw then table.remove(self.BuildingButtons.Bindings[i],f)end end end;function Lib.UIBuilding.Local:BindButtons(aw)if aw==nil or aw==0 or Logic.IsBuilding(aw)==0 and not Logic.IsWall(aw)then return self:UnbindButtons()end;local Name=Logic.GetEntityName(aw)local l=Logic.GetEntityType(aw)local fH=self:GetButtonsForOverwrite(aw,6)local fI={}if self.BuildingButtons.Bindings[Name]and#self.BuildingButtons.Bindings[Name]>0 then for f=1,#self.BuildingButtons.Bindings[Name]do table.insert(fI,self.BuildingButtons.Bindings[Name][f])end end;if self.BuildingButtons.Bindings[l]and#self.BuildingButtons.Bindings[l]>0 then for f=1,#self.BuildingButtons.Bindings[l]do table.insert(fI,self.BuildingButtons.Bindings[l][f])end end;if self.BuildingButtons.Bindings[0]and#self.BuildingButtons.Bindings[0]>0 then for f=1,#self.BuildingButtons.Bindings[0]do table.insert(fI,self.BuildingButtons.Bindings[0][f])end end;for f=1,#fI do if f>6 then break end;local fJ=fH[f]self.BuildingButtons.Configuration[fJ].Bind=fI[f]XGUIEng.ShowWidget("/InGame/Root/Normal/BuildingButtons/"..fJ,1)XGUIEng.DisableButton("/InGame/Root/Normal/BuildingButtons/"..fJ,0)local fK=fI[f].Position[1]local fL=fI[f].Position[2]if not fK or not fL then local fM={15,296}fK=fM[1]+64*(f-1)fL=fM[2]end;XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..fJ,fK,fL)end end;function Lib.UIBuilding.Local:UnbindButtons()for g,h in pairs(self.BuildingButtons.Configuration)do local N=self.BuildingButtons.Configuration[g].OriginalPosition;if N then XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g,N[1],N[2])end;self.BuildingButtons.Configuration[g].Bind=nil end end;RegisterModule(Lib.UIBuilding.Name)Lib.Register("module/city/Construction_Text")Lib.Construction=Lib.Construction or{}Lib.Construction.Text={NoKnockdown={de="Das kann nicht abgerissen werden!",en="This cannot be demolished!",fr="Cela ne peut pas être démoli!"},NoRoad={de="Straßen sind hier nicht möglich!",en="Roads are not possible here!",fr="Les routes ne sont pas possibles ici!"},NoWall={de="Befästigungen sind hier nicht möglich!",en="Ramparts are not possible here!",fr="Les confirmations ne sont pas possibles ici!"},NoWallGate={de="Ein anderes Torhaus ist zu nah!",en="Another gatehouse is too close!",fr="Une autre guérite est trop proche!"},NoBallista={de="Zu nahe an anderem Mauerkatapult!",en="To close to another ballista!",fr="A rapprocher d'une autre baliste!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/Construction_API")function CustomRuleConstructBuilding(aa,fN,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructBuilding(aa,fN,unpack(arg))end;API.CustomRuleConstructBuilding=CustomRuleConstructBuilding;function CustomRuleConstructRoad(aa,fN,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructRoad(aa,fN,unpack(arg))end;API.CustomRuleConstructRoad=CustomRuleConstructRoad;function CustomRuleConstructWall(aa,fN,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructWall(aa,fN,unpack(arg))end;API.CustomRuleConstructWall=CustomRuleConstructWall;function CustomRuleKnockdownBuilding(aa,fN,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleKnockdownBuilding(aa,fN,unpack(arg))end;API.CustomRuleKnockdownBuilding=CustomRuleKnockdownBuilding;function WhitelistConstructTypeInArea(aa,i,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInArea(aa,i,fo,fp,fO)end;API.WhitelistConstructTypeInArea=WhitelistConstructTypeInArea;function WhitelistConstructCategoryInArea(aa,fP,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInArea(aa,fP,fo,fp,fO)end;API.WhitelistConstructCategoryInArea=WhitelistConstructCategoryInArea;function WhitelistConstructTypeInTerritory(aa,i,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInTerritory(aa,i,fQ)end;API.WhitelistConstructTypeInTerritory=WhitelistConstructTypeInTerritory;function WhitelistConstructCategoryInTerritory(aa,fP,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInTerritory(aa,fP,fQ)end;API.WhitelistConstructCategoryInTerritory=WhitelistConstructCategoryInTerritory;function BlacklistConstructTypeInArea(aa,i,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInArea(aa,i,fo,fp,fO)end;API.BlacklistConstructTypeInArea=BlacklistConstructTypeInArea;function BlacklistConstructCategoryInArea(aa,fP,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInArea(aa,fP,fo,fp,fO)end;API.BlacklistConstructCategoryInArea=BlacklistConstructCategoryInArea;function BlacklistConstructTypeInTerritory(aa,i,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInTerritory(aa,i,fQ)end;API.BlacklistConstructTypeInTerritory=BlacklistConstructTypeInTerritory;function BlacklistConstructCategoryInTerritory(aa,fP,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInTerritory(aa,fP,fQ)end;API.BlacklistConstructCategoryInTerritory=BlacklistConstructCategoryInTerritory;function WhitelistConstructRoadInArea(aa,fR,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInArea(aa,fR,fo,fp,fO)end;API.WhitelistConstructRoadInArea=WhitelistConstructRoadInArea;function WhitelistConstructWallInArea(aa,fS,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInArea(aa,fS,fo,fp,fO)end;API.WhitelistConstructWallInArea=WhitelistConstructWallInArea;function WhitelistConstructRoadInTerritory(aa,fR,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInTerritory(aa,fR,fQ)end;API.WhitelistConstructRoadInTerritory=WhitelistConstructRoadInTerritory;function WhitelistConstructWallInTerritory(aa,fS,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInTerritory(aa,fS,fQ)end;API.WhitelistConstructWallInTerritory=WhitelistConstructWallInTerritory;function BlacklistConstructRoadInArea(aa,fR,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInArea(aa,fR,fo,fp,fO)end;API.BlacklistConstructRoadInArea=BlacklistConstructRoadInArea;function BlacklistConstructWallInArea(aa,fS,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInArea(aa,fS,fo,fp,fO)end;API.BlacklistConstructWallInArea=BlacklistConstructWallInArea;function BlacklistConstructRoadInTerritory(aa,fR,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInTerritory(aa,fR,fQ)end;API.BlacklistConstructRoadInTerritory=BlacklistConstructRoadInTerritory;function BlacklistConstructWallInTerritory(aa,fS,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInTerritory(aa,fS,fQ)end;API.BlacklistConstructWallInTerritory=BlacklistConstructWallInTerritory;function WhitelistKnockdownTypeInArea(aa,i,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInArea(aa,i,fo,fp,fO)end;API.WhitelistKnockdownTypeInArea=WhitelistKnockdownTypeInArea;function WhitelistKnockdownCategoryInArea(aa,fP,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInArea(aa,fP,fo,fp,fO)end;API.WhitelistKnockdownCategoryInArea=WhitelistKnockdownCategoryInArea;function WhitelistKnockdownTypeInTerritory(aa,i,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(aa,i,fQ)end;API.WhitelistKnockdownTypeInTerritory=WhitelistKnockdownTypeInTerritory;function WhitelistKnockdownCategoryInTerritory(aa,fP,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(aa,fP,fQ)end;API.WhitelistKnockdownCategoryInTerritory=WhitelistKnockdownCategoryInTerritory;function BlacklistKnockdownTypeInArea(aa,i,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInArea(aa,i,fo,fp,fO)end;API.BlacklistKnockdownTypeInArea=BlacklistKnockdownTypeInArea;function BlacklistKnockdownCategoryInArea(aa,fP,fo,fp,fO)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInArea(aa,fP,fo,fp,fO)end;API.BlacklistKnockdownCategoryInArea=BlacklistKnockdownCategoryInArea;function BlacklistKnockdownTypeInTerritory(aa,i,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(aa,i,fQ)end;API.BlacklistKnockdownTypeInTerritory=BlacklistKnockdownTypeInTerritory;function BlacklistKnockdownCategoryInTerritory(aa,fP,fQ)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(aa,fP,fQ)end;API.BlacklistKnockdownCategoryInTerritory=BlacklistKnockdownCategoryInTerritory;Lib.Construction=Lib.Construction or{}Lib.Construction.Name="Construction"Lib.Construction.Global={Construction={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Construction.Local={Construction={Restriction={BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={LastSelectedBuildingType=0,LastSelectedRoadType=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Require("comfort/GetCategoriesOfType")Lib.Require("comfort/GetDistance")Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/city/Construction_API")Lib.Require("module/city/Construction_Text")Lib.Register("module/city/Construction")function Lib.Construction.Global:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;Lib.Construction.Local=nil end;self.IsInstalled=true end;function Lib.Construction.Global:OnSaveGameLoaded()end;function Lib.Construction.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Global:WhitelistConstructTypeInArea(aa,i,fo,fp,fO)return self:ListConstructArea("BuildingAreaWhitelist",aa,i,nil,fo,fp,fO)end;function Lib.Construction.Global:WhitelistConstructCategoryInArea(aa,fP,fo,fp,fO)return self:ListConstructArea("BuildingCateWhitelist",aa,nil,fP,fo,fp,fO)end;function Lib.Construction.Global:WhitelistConstructTypeInTerritory(aa,i,fQ)return self:ListConstructTerritory("BuildingTerritoryWhitelist",aa,i,nil,fQ)end;function Lib.Construction.Global:WhitelistConstructCategoryInTerritory(aa,fP,fQ)return self:ListConstructTerritory("BuildingTerritoryWhitelist",aa,nil,fP,fQ)end;function Lib.Construction.Global:BlacklistConstructTypeInArea(aa,i,fo,fp,fO)return self:ListConstructArea("BuildingAreaBlacklist",aa,i,nil,fo,fp,fO)end;function Lib.Construction.Global:BlacklistConstructCategoryInArea(aa,fP,fo,fp,fO)return self:ListConstructArea("BuildingAreaBlacklist",aa,nil,fP,fo,fp,fO)end;function Lib.Construction.Global:BlacklistConstructTypeInTerritory(aa,i,fQ)return self:ListConstructTerritory("BuildingTerritoryBlacklist",aa,i,nil,fQ)end;function Lib.Construction.Global:BlacklistConstructCategoryInTerritory(aa,fP,fQ)return self:ListConstructTerritory("BuildingTerritoryBlacklist",aa,nil,fP,fQ)end;function Lib.Construction.Global:WhitelistConstructRoadInArea(aa,fR,fo,fp,fO)return self:ListConstructArea("RoadAreaWhitelist",aa,fR,nil,fo,fp,fO)end;function Lib.Construction.Global:WhitelistConstructWallInArea(aa,fS,fo,fp,fO)return self:ListConstructArea("WallAreaWhitelist",aa,fS,nil,fo,fp,fO)end;function Lib.Construction.Global:WhitelistConstructRoadInTerritory(aa,fR,fQ)return self:ListConstructTerritory("RoadTerritoryWhitelist",aa,fR,nil,fQ)end;function Lib.Construction.Global:WhitelistConstructWallInTerritory(aa,fS,fQ)return self:ListConstructTerritory("WallTerritoryWhitelist",aa,fS,nil,fQ)end;function Lib.Construction.Global:BlacklistConstructRoadInArea(aa,fR,fo,fp,fO)return self:ListConstructArea("RoadAreaBlacklist",aa,fR,nil,fo,fp,fO)end;function Lib.Construction.Global:BlacklistConstructWallInArea(aa,fS,fo,fp,fO)return self:ListConstructArea("WallAreaBlacklist",aa,fS,nil,fo,fp,fO)end;function Lib.Construction.Global:BlacklistConstructRoadInTerritory(aa,fR,fQ)return self:ListConstructTerritory("RoadTerritoryBlacklist",aa,fR,nil,fQ)end;function Lib.Construction.Global:BlacklistConstructWallInTerritory(aa,fS,fQ)return self:ListConstructTerritory("WallTerritoryBlacklist",aa,fS,nil,fQ)end;function Lib.Construction.Global:CustomRuleConstructBuilding(aa,fN,...)return self:ListConstructCustom("BuildingCustomRule",aa,fN,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructRoad(aa,fN,...)return self:ListConstructCustom("RoadCustomRule",aa,fN,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructWall(aa,fN,...)return self:ListConstructCustom("WallCustomRule",aa,fN,unpack(arg))end;function Lib.Construction.Global:ListConstructArea(W,aa,i,fP,fo,fp,fO)local ae=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[W][aa],{ID=ae,Category=fP,Type=i,Center={X=fo,Y=fp},Area=fO})self:MirrorConstructionRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:ListConstructTerritory(W,aa,i,fP,fQ)local ae=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[W][aa],{ID=ae,Category=fP,Type=i,Territory=fQ})self:MirrorConstructionRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:ListConstructCustom(W,aa,fT,...)local ae=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[W][aa],{ID=ae,Function=fT,Arguments=arg})self:MirrorConstructionRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:GetNewRestrictionID()self.Construction.Restriction.Index=self.Construction.Restriction.Index+1;local ca=self.Construction.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Construction.Restriction.Index = %d]],ca)return ca end;function Lib.Construction.Global:MirrorConstructionRestrictionsToLocalScript()local fU=table.tostring(self.Construction.Restriction)ExecuteLocal([[Lib.Construction.Local.Construction.Restriction = %s]],fU)end;function Lib.Construction.Global:WhitelistKnockdownTypeInArea(aa,i,fo,fp,fO)return self:ListKnockdownArea("BuildingAreaWhitelist",aa,i,nil,fo,fp,fO)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInArea(aa,fP,fo,fp,fO)return self:ListKnockdownArea("BuildingAreaWhitelist",aa,nil,fP,fo,fp,fO)end;function Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(aa,i,fQ)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",aa,i,nil,fQ)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(aa,fP,fQ)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",aa,nil,fP,fQ)end;function Lib.Construction.Global:BlacklistKnockdownTypeInArea(aa,i,fo,fp,fO)return self:ListKnockdownArea("BuildingAreaBlacklist",aa,i,nil,fo,fp,fO)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInArea(aa,fP,fo,fp,fO)return self:ListKnockdownArea("BuildingAreaBlacklist",aa,nil,fP,fo,fp,fO)end;function Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(aa,i,fQ)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",aa,i,nil,fQ)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(aa,fP,fQ)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",aa,nil,fP,fQ)end;function Lib.Construction.Global:CustomRuleKnockdownBuilding(aa,fN,...)return self:ListKnockdownCustom("BuildingCustomRule",aa,fN,unpack(arg))end;function Lib.Construction.Global:ListKnockdownArea(W,aa,i,fP,fo,fp,fO)local ae=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[W][aa],{ID=ae,Category=fP,Type=i,Center={X=fo,Y=fp},Area=fO})self:MirrorKnockdownRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:ListKnockdownTerritory(W,aa,i,fP,fQ)local ae=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[W][aa],{ID=ae,Category=fP,Type=i,Territory=fQ})self:MirrorKnockdownRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:ListKnockdownCustom(W,aa,fT,...)local ae=self:GetNewRestrictionID()table.insert(self.Knockdown.Restriction[W][aa],{ID=ae,Function=fT,Arguments=arg})self:MirrorKnockdownRestrictionsToLocalScript()return ae end;function Lib.Construction.Global:GetNewProtectionID()self.Knockdown.Restriction.Index=self.Knockdown.Restriction.Index+1;local ca=self.Knockdown.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction.Index = %d]],ca)return ca end;function Lib.Construction.Global:MirrorKnockdownRestrictionsToLocalScript()local fU=table.tostring(self.Knockdown.Restriction)ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction = %s]],fU)end;function Lib.Construction.Global:IsConstructionAllowed(aa,i,fo,fp)local fV=Logic.GetTerritoryAtPosition(fo,fp)local j=GetCategoriesOfType(i)local fW=self.Construction.Restriction.BuildingTerritoryWhitelist[aa]if#fW>0 then for g,h in pairs(fW)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==fV then return true end end;return false end;local fX=self.Construction.Restriction.BuildingAreaWhitelist[aa]if#fX>0 then for g,h in pairs(fX)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=fo,Y=fp},h.Center)<=h.Area then return true end end;return false end;local fY=self.Construction.Restriction.BuildingTerritoryBlacklist[aa]for g,h in pairs(fY)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==fV then return false end end;local fZ=self.Construction.Restriction.BuildingAreaBlacklist[aa]for g,h in pairs(fZ)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=fo,Y=fp},h.Center)<=h.Area then return false end end;local f_=self.Construction.Restriction.BuildingCustomRule[aa]for g,h in pairs(f_)do if _G[h.Function]and not _G[h.Function](aa,i,fo,fp,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Global:OverwriteGameCallbacks()self.Orig_GameCallback_CanPlayerPlaceBuilding=GameCallback_CanPlayerPlaceBuilding;GameCallback_CanPlayerPlaceBuilding=function(aa,i,fo,fp)if Lib.Construction.Global:IsConstructionAllowed(aa,i,fo,fp)then return Lib.Construction.Global.Orig_GameCallback_CanPlayerPlaceBuilding(aa,i,fo,fp)end;return false end end;function Lib.Construction.Local:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;self:OverrideBuildButtonClicked()self:OverridePlacementUpdate()Lib.Construction.Global=nil end;self.IsInstalled=true end;function Lib.Construction.Local:OnSaveGameLoaded()end;function Lib.Construction.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Local:IsKnockdownAllowed(aa,ag,bi)local l=Logic.GetEntityType(ag)local A,B,C=Logic.EntityGetPos(ag)local fV=GetTerritoryUnderEntity(ag)local j=GetCategoriesOfType(l)local fW=self.Knockdown.Restriction.BuildingTerritoryWhitelist[aa]if#fW>0 then for g,h in pairs(fW)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==fV then return true end end;return false end;local fX=self.Knockdown.Restriction.BuildingAreaWhitelist[aa]if#fX>0 then for g,h in pairs(fX)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then return true end end;return false end;local fY=self.Knockdown.Restriction.BuildingTerritoryBlacklist[aa]for g,h in pairs(fY)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==fV then return false end end;local fZ=self.Knockdown.Restriction.BuildingAreaBlacklist[aa]for g,h in pairs(fZ)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then return false end end;local f_=self.Knockdown.Restriction.BuildingCustomRule[aa]for g,h in pairs(f_)do if _G[h.Function]and not _G[h.Function](aa,ag,A,B,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Local:OverwriteGameCallbacks()self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(g0,bi)local n=Logic.EntityGetPlayer(g0)if not Lib.Construction.Local:IsKnockdownAllowed(n,g0,bi)then Message(Localize(Lib.Construction.Text.NoKnockdown))GUI.CancelBuildingKnockDown(g0)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(g0,bi)end end;function Lib.Construction.Local:OverrideBuildButtonClicked()self.Orig_BuildClicked=GUI_Construction.BuildClicked;GUI_Construction.BuildClicked=function(g1)Lib.Construction.Local.LastSelectedBuildingType=g1;Lib.Construction.Local.Orig_BuildClicked(g1)end;self.Orig_BuildStreetClicked=GUI_Construction.BuildStreetClicked;GUI_Construction.BuildStreetClicked=function(g2)g2=g2~=nil and g2 or false;Lib.Construction.Local.LastSelectedRoadType=g2;Lib.Construction.Local.Orig_BuildStreetClicked(g2)end;self.Orig_BuildWallClicked=GUI_Construction.BuildWallClicked;GUI_Construction.BuildWallClicked=function(g1)if g1==nil then g1=GetUpgradeCategoryForClimatezone("WallSegment")end;Lib.Construction.Local.LastSelectedBuildingType=g1;Lib.Construction.Local.Orig_BuildWallClicked(g1)end;self.Orig_BuildWallGateClicked=GUI_Construction.BuildWallGateClicked;GUI_Construction.BuildWallGateClicked=function(g1)if g1==nil then g1=GetUpgradeCategoryForClimatezone("WallGate")end;Lib.Construction.Local.LastSelectedBuildingType=g1;Lib.Construction.Local.Orig_BuildWallGateClicked(g1)end;self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local cP=Logic.GetEntityType(GUI.GetSelectedEntity())Lib.Construction.Local.LastSelectedBuildingType=cP;Lib.Construction.Local.Orig_PlaceFieldClicked()end end;function Lib.Construction.Local:OverridePlacementUpdate()self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged=GameCallBack_GUI_ConstructWallSegmentCountChanged;GameCallBack_GUI_ConstructWallSegmentCountChanged=function(g3,g4)self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged(g3,g4)Lib.Construction.Local:CancleConstructWallState(GUI.GetPlayerID(),g3,g4)end;self.Orig_GameCallBack_GUI_BuildRoadCostChanged=GameCallBack_GUI_BuildRoadCostChanged;GameCallBack_GUI_BuildRoadCostChanged=function(g5)self.Orig_GameCallBack_GUI_BuildRoadCostChanged(g5)Lib.Construction.Local:CancleConstructRoad(GUI.GetPlayerID(),g5)end;self.Orig_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()Lib.Construction.Local:CancleWallGatesToCloseToEachother(GUI.GetPlayerID())Lib.Construction.Local.Orig_PlacementUpdate()end;self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local s=GUI.GetSelectedEntity()local n=Logic.EntityGetPlayer(s)local A,B,C=Logic.EntityGetPos(s)if Lib.Construction.Local:AreOtherBallistasToCloseToPosition(n,A,B,2500)then Message(Localize(Lib.Construction.Text.NoBallista))return end;Lib.Construction.Local.Orig_UpgradeTurretClicked()end end;function Lib.Construction.Local:AreOtherBallistasToCloseToPosition(aa,g6,g7,g8)local g9,ga=Logic.GetPlayerEntitiesInArea(aa,Entities.U_MilitaryBallista_BuildingSite,g6,g7,g8,1)local gb,gc=Logic.GetPlayerEntitiesInArea(aa,Entities.U_MilitaryBallista,g6,g7,g8,1)return g9>0 or gb>0 end;function Lib.Construction.Local:CancleConstructWallState(aa,g3,g4)local gd=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType~=1 then local cW={Logic.GetCostForWall(g3,g4,StartTurretX,StartTurretY,EndTurretX,EndTurretY)}if gd==2 and cW[1]and cW[2]>0 then local A,B=GUI.Debug_GetMapPositionUnderMouse()local fV=Logic.GetTerritoryAtPosition(A or 1,B or 1)local ge=self.LastSelectedBuildingType;local gf,l=Logic.GetBuildingTypesInUpgradeCategory(ge)local gg=Logic.IsEntityTypeInCategory(l,EntityCategories.Wall)==1;local fW=self.Construction.Restriction.WallTerritoryWhitelist[aa]if gg and#fW>0 then for g,h in pairs(fW)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==fV then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==fV then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local fX=self.Construction.Restriction.WallAreaWhitelist[aa]if gg and#fX>0 then for g,h in pairs(fW)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local fY=self.Construction.Restriction.WallTerritoryBlacklist[aa]if gg then for g,h in pairs(fY)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==fV then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==fV then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local fZ=self.Construction.Restriction.WallAreaBlacklist[aa]if gg then for g,h in pairs(fZ)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local f_=self.Construction.Restriction.WallCustomRule[aa]for g,h in pairs(f_)do local gh=string.find(Logic.GetEntityTypeName(l),"B_Wall")~=nil;if _G[h.Function]and not _G[h.Function](aa,gh,A,B,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleConstructRoad(aa,g5)local gd=GUI.GetCurrentStateID()local A,B=GUI.Debug_GetMapPositionUnderMouse()local fV=Logic.GetTerritoryAtPosition(A or 1,B or 1)if g_Construction.CurrentPlacementType==1 then if gd==5 and g5>0 then local gi=not self.LastSelectedRoadType;local fW=self.Construction.Restriction.RoadTerritoryWhitelist[aa]if#fW>0 then for g,h in pairs(fW)do if h.Type==gi and h.Territory==fV then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local fX=self.Construction.Restriction.RoadAreaWhitelist[aa]if#fX>0 then for g,h in pairs(fX)do if h.Type==gi and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local fY=self.Construction.Restriction.RoadTerritoryBlacklist[aa]for g,h in pairs(fY)do if h.Type==gi and h.Territory==fV then self:CancelState(g_Construction.CurrentPlacementType)return end end;local fZ=self.Construction.Restriction.RoadAreaBlacklist[aa]for g,h in pairs(fZ)do if h.Type==gi and h.Center and GetDistance({X=A,Y=B},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end;local f_=self.Construction.Restriction.RoadCustomRule[aa]for g,h in pairs(f_)do if _G[h.Function]and not _G[h.Function](aa,gi,A,B,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleWallGatesToCloseToEachother(aa)local gd=GUI.GetCurrentStateID()if gd==3 then local gj=Lib.Construction.Local.LastSelectedBuildingType;local gk,l=Logic.GetBuildingTypesInUpgradeCategory(gj)local gl=l==Entities.B_PalisadeGate and 1200 or 2350;local A,B=GUI.Debug_GetMapPositionUnderMouse()local gf,ae=Logic.GetPlayerEntitiesInArea(aa,l,A,B,gl,1)if gf>0 then self:CancelState(-1)end end end;function Lib.Construction.Local:CancelState(gm)local bS=Lib.Construction.Text.NoWall;if gm==1 then bS=Lib.Construction.Text.NoRoad elseif gm==-1 then bS=Lib.Construction.Text.NoWallGate end;Message(Localize(bS))GUI.CancelState()end;RegisterModule(Lib.Construction.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/npc/NPC_API")function NpcCompose(f2)error(not IsLocalScript(),"NPC manipulated in local script.")error(type(f2)=="table","NPC must be a table.")error(f2.Name~=nil,"NPC needs a script name.")error(IsExisting(f2.Name),"Entity does not exist.")local gn=Lib.NPC.Global:GetNpc(f2.Name)error(gn==nil or not gn.Active,"NPC already active.")error(not f2.Type or(f2.Type>=1 or f2.Type<=4),"NPC type is invalid.")return Lib.NPC.Global:CreateNpc(f2)end;API.NpcCompose=NpcCompose;function NpcDispose(f2)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f2.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(f2.Name)==nil,"NPC must first be composed.")Lib.NPC.Global:DestroyNpc(f2)end;API.NpcDispose=NpcDispose;function NpcUpdate(f2)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f2.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(f2.Name)~=nil,"NPC must first be composed.")Lib.NPC.Global:UpdateNpc(f2)end;API.NpcUpdate=NpcUpdate;function NpcIsActive(f2)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f2.Name),"Entity does not exist.")local go=Lib.NPC.Global:GetNpc(f2.Name)error(go~=nil,"NPC was not found.")if go.Active==true then return GetInteger(f2.Name,CONST_SCRIPTING_VALUES.NPC)==6 end;return false end;API.NpcIsActive=NpcIsActive;function NpcTalkedTo(f2,gp,aa)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f2.Name),"Entity does not exist.")local go=Lib.NPC.Global:GetNpc(f2.Name)error(go~=nil,"NPC was not found.")local gq=go.TalkedTo~=nil and go.TalkedTo~=0;if gp and gq then gq=go.TalkedTo==GetID(gp)end;if aa and gq then gq=Logic.EntityGetPlayer(go.TalkedTo)==aa end;return gq end;API.NpcTalkedTo=NpcTalkedTo;Lib.NPC=Lib.NPC or{}Lib.NPC.Name="NPC"Lib.NPC.Global={Interactions={},NPC={},UseMarker=true}Lib.NPC.Local={}Lib.NPC.Text={StartConversation={de="Gespräch beginnen",en="Start conversation",fr="Commencer la conversation"}}CONST_LAST_NPC_INTERACTED=0;CONST_LAST_HERO_INTERACTED=0;Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/global/LookAt")Lib.Require("core/Core")Lib.Require("module/npc/NPC_API")Lib.Register("module/npc/NPC")function Lib.NPC.Global:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()RequestHiResJob(function()if Logic.GetTime()>1 then Lib.NPC.Global:InteractionTriggerController()end end)RequestJob(function()Lib.NPC.Global:InteractableMarkerController()end)Lib.NPC.Local=nil end;self.IsInstalled=true end;function Lib.NPC.Global:OnSaveGameLoaded()end;function Lib.NPC.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]self.Interactions[arg[1]]=self.Interactions[arg[1]]or{}if self.Interactions[arg[1]][arg[2]]then if Logic.GetCurrentTurn()<=self.Interactions[arg[1]][arg[2]]+5 then return end end;self.Interactions[arg[1]][arg[2]]=Logic.GetCurrentTurn()self:PerformNpcInteraction(arg[3])end end;function Lib.NPC.Global:CreateNpc(f2)self.NPC[f2.Name]={Name=f2.Name,Active=true,Type=f2.Type or 1,Player=f2.Player or{1,2,3,4,5,6,7,8},WrongPlayerAction=f2.WrongPlayerAction,Hero=f2.Hero,WrongHeroAction=f2.WrongHeroAction,Distance=f2.Distance or 350,Condition=f2.Condition,Callback=f2.Callback,UseMarker=self.UseMarker==true,MarkerID=0}self:UpdateNpc(f2)return self.NPC[f2.Name]end;function Lib.NPC.Global:DestroyNpc(f2)f2.Active=false;self:UpdateNpc(f2)self:DestroyMarker(f2.Name)self.NPC[f2.Name]=nil end;function Lib.NPC.Global:GetNpc(bh)return self.NPC[bh]end;function Lib.NPC.Global:UpdateNpc(f2)if not IsExisting(f2.Name)then return end;if not self.NPC[f2.Name]then local s=GetID(f2.Name)Logic.SetOnScreenInformation(s,0)return end;for g,h in pairs(f2)do self.NPC[f2.Name][g]=h end;self:CreateMarker(f2.Name)if self.NPC[f2.Name].Active then local s=GetID(f2.Name)Logic.SetOnScreenInformation(s,self.NPC[f2.Name].Type)else local s=GetID(f2.Name)Logic.SetOnScreenInformation(s,0)end end;function Lib.NPC.Global:PerformNpcInteraction(aa)local aF=Logic.GetEntityName(CONST_LAST_NPC_INTERACTED)if self.NPC[aF]then local aU=self.NPC[aF]self:RotateActorsToEachother(aa)self:AdjustHeroTalkingDistance(aU.Distance)if not self:InteractionIsAppropriatePlayer(aF,aa,CONST_LAST_HERO_INTERACTED)then return end;aU.TalkedTo=CONST_LAST_HERO_INTERACTED;if not self:InteractionIsAppropriateHero(aF)then return end;if aU.Condition==nil or aU:Condition(aa,CONST_LAST_HERO_INTERACTED)then aU.Active=false;if aU.Callback then aU:Callback(aa,CONST_LAST_HERO_INTERACTED)end else aU.TalkedTo=0 end;self:UpdateNpc(aU)end end;function Lib.NPC.Global:InteractionIsAppropriatePlayer(bh,aa,gr)local gs=true;if self.NPC[bh]then local aU=self.NPC[bh]if aU.Player~=nil then if type(aU.Player)=="table"then gs=table.contains(aU.Player,aa)else gs=aU.Player==aa end;if not gs then local gt=(aU.WrongHeroTick or 0)+1;local gu=Logic.GetTime()if aU.WrongPlayerAction and gt<gu then self.NPC[bh].LastWongPlayerTick=gu;aU:WrongPlayerAction(aa)end end end end;return gs end;function Lib.NPC.Global:InteractionIsAppropriateHero(bh)local gs=true;if self.NPC[bh]then local aU=self.NPC[bh]if aU.Hero~=nil then if type(aU.Hero)=="table"then gs=table.contains(aU.Hero,Logic.GetEntityName(CONST_LAST_HERO_INTERACTED))end;gs=aU.Hero==Logic.GetEntityName(CONST_LAST_HERO_INTERACTED)if not gs then local gt=(aU.WrongHeroTick or 0)+1;local gu=Logic.GetTime()if aU.WrongHeroAction and gt<gu then self.NPC[bh].WrongHeroTick=gu;aU:WrongHeroAction(CONST_LAST_HERO_INTERACTED)end end end end;return gs end;function Lib.NPC.Global:GetEntityMovementTarget(ag)local fK=GetFloat(ag,CONST_SCRIPTING_VALUES.Destination.X)local fL=GetFloat(ag,CONST_SCRIPTING_VALUES.Destination.Y)return{X=fK,Y=fL}end;function Lib.NPC.Global:RotateActorsToEachother(aa)local gv={}Logic.GetKnights(aa,gv)for g,h in pairs(gv)do local av=self:GetEntityMovementTarget(h)local A,B,C=Logic.EntityGetPos(CONST_LAST_NPC_INTERACTED)if math.floor(av.X)==math.floor(A)and math.floor(av.Y)==math.floor(B)then A,B,C=Logic.EntityGetPos(h)Logic.MoveEntity(h,A,B)LookAt(h,CONST_LAST_NPC_INTERACTED)end end;LookAt(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)LookAt(CONST_LAST_NPC_INTERACTED,CONST_LAST_HERO_INTERACTED)end;function Lib.NPC.Global:AdjustHeroTalkingDistance(L)local gw=L*GetFloat(CONST_LAST_NPC_INTERACTED,CONST_SCRIPTING_VALUES.Size)if GetDistance(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)<=gw*0.7 then local O=Logic.GetEntityOrientation(CONST_LAST_NPC_INTERACTED)local am,an,ao=Logic.EntityGetPos(CONST_LAST_HERO_INTERACTED)local aq=am+gw*0.5*math.cos(math.rad(O))local ar=an+gw*0.5*math.sin(math.rad(O))local ae=Logic.CreateEntityOnUnblockedLand(Entities.XD_ScriptEntity,aq,ar,0,0)local gx,gy,gz=Logic.EntityGetPos(ae)Logic.MoveSettler(CONST_LAST_HERO_INTERACTED,gx,gy)RequestHiResJob(function(gr,gA,gB)if Logic.GetTime()>gB+0.5 and Logic.IsEntityMoving(gr)==false then LookAt(gr,gA)LookAt(gA,gr)return true end end,CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED,Logic.GetTime())end end;function Lib.NPC.Global:OverrideQuestFunctions()GameCallback_OnNPCInteraction_Orig_NPC=GameCallback_OnNPCInteraction;GameCallback_OnNPCInteraction=function(ag,aa,gC)GameCallback_OnNPCInteraction_Orig_NPC(ag,aa,gC)local gD=gC or Lib.NPC.Global:GetClosestKnight(ag,aa)SendReport(Report.NpcInteraction,ag,gD,aa)SendReportToLocal(Report.NpcInteraction,ag,gD,aa)end;QuestTemplate.RemoveQuestMarkers_Orig_NPC=QuestTemplate.RemoveQuestMarkers;QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)else if self.Objectives[f].Data[4]then NpcDispose(self.Objectives[f].Data[4].NpcInstance)self.Objectives[f].Data[4].NpcInstance=nil end end else QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)end end end;QuestTemplate.ShowQuestMarkers_Orig_NPC=QuestTemplate.ShowQuestMarkers;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.ShowQuestMarkers_Orig_NPC(self)else if not self.Objectives[f].Data[4].NpcInstance then self.Objectives[f].Data[4].NpcInstance=NpcCompose{Name=self.Objectives[f].Data[3],Hero=self.Objectives[f].Data[2],Player=self.ReceivingPlayer}end end end end end;QuestTemplate.IsObjectiveCompleted_Orig_NPC=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,br)local bs=br.Type;local bt=br.Data;if br.Completed~=nil then return br.Completed end;if bs~=Objective.Distance then return self:IsObjectiveCompleted_Orig_NPC(br)else if bt[1]==-65565 then error(IsExisting(bt[3]),bt[3].." is dead! :(")if NpcTalkedTo(bt[4].NpcInstance,bt[2],self.ReceivingPlayer)then br.Completed=true end else return self:IsObjectiveCompleted_Orig_NPC(br)end end end end;function Lib.NPC.Global:GetClosestKnight(ag,aa)local gE={}Logic.GetKnights(aa,gE)return GetClosestToTarget(ag,gE)end;function Lib.NPC.Global:ToggleMarkerUsage(bM)self.UseMarker=bM==true;for g,h in pairs(self.NPC)do self.NPC[g].UseMarker=bM==true;self:HideMarker(g)end end;function Lib.NPC.Global:CreateMarker(bh)if self.NPC[bh]then local A,B,C=Logic.EntityGetPos(GetID(bh))local gF=Logic.CreateEntity(Entities.XD_ScriptEntity,A,B,0,0)DestroyEntity(self.NPC[bh].MarkerID)self.NPC[bh].MarkerID=gF;self:HideMarker(bh)end end;function Lib.NPC.Global:DestroyMarker(bh)if self.NPC[bh]then DestroyEntity(self.NPC[bh].MarkerID)self.NPC[bh].MarkerID=0 end end;function Lib.NPC.Global:HideMarker(bh)if self.NPC[bh]then if IsExisting(self.NPC[bh].MarkerID)then Logic.SetModel(self.NPC[bh].MarkerID,Models.Effects_E_NullFX)Logic.SetVisible(self.NPC[bh].MarkerID,false)end end end;function Lib.NPC.Global:ShowMarker(bh)if self.NPC[bh]then if self.NPC[bh].UseMarker==true and IsExisting(self.NPC[bh].MarkerID)then local fn=GetFloat(bh,CONST_SCRIPTING_VALUES.Size)SetFloat(self.NPC[bh].MarkerID,CONST_SCRIPTING_VALUES.Size,fn)Logic.SetModel(self.NPC[bh].MarkerID,Models.Effects_E_Wealth)Logic.SetVisible(self.NPC[bh].MarkerID,true)end end end;function Lib.NPC.Global:GetEntityMovingTarget(ag)local A=GetFloat(ag,CONST_SCRIPTING_VALUES.Destination.X)local B=GetFloat(ag,CONST_SCRIPTING_VALUES.Destination.Y)return{X=A,Y=B}end;function Lib.NPC.Global:InteractionTriggerController()for n=1,8,1 do local gG={}Logic.GetKnights(n,gG)for f=1,#gG,1 do if Logic.GetCurrentTaskList(gG[f])=="TL_NPC_INTERACTION"then for g,h in pairs(self.NPC)do if h.Distance>=350 then local av=self:GetEntityMovementTarget(gG[f])local aq,ar=Logic.EntityGetPos(GetID(g))if math.floor(av.X)==math.floor(aq)and math.floor(av.Y)==math.floor(ar)then if IsExisting(g)and IsNear(gG[f],g,h.Distance)then GameCallback_OnNPCInteraction(GetID(g),n,gG[f])return end end end end end end end end;function Lib.NPC.Global:InteractableMarkerController()for g,h in pairs(self.NPC)do if h.Active then if h.UseMarker and IsExisting(h.MarkerID)and GetInteger(h.MarkerID,CONST_SCRIPTING_VALUES.Visible)==801280 then self:HideMarker(g)else self:ShowMarker(g)end;local am,an,ao=Logic.EntityGetPos(h.MarkerID)local aq,ar,as=Logic.EntityGetPos(GetID(g))if math.abs(am-aq)>20 or math.abs(an-ar)>20 then Logic.DEBUG_SetPosition(h.MarkerID,aq,ar)end end end end;function Lib.NPC.Local:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()Lib.NPC.Global=nil end;self.IsInstalled=true end;function Lib.NPC.Local:OnSaveGameLoaded()end;function Lib.NPC.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]end end;function Lib.NPC.Local:OverrideQuestFunctions()GUI_Interaction.DisplayQuestObjective_Orig_NPC=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(aY,aZ)local gH=tonumber(aY)if gH then aY=gH end;local a_,b0=GUI_Interaction.GetPotentialSubQuestAndType(aY)local gI="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gJ;local gK;g_CurrentDisplayedQuestID=aY;if b0==Objective.Distance then gJ=gI.."/List"gK=Wrapped_GetStringTableText(aY,"UI_Texts/QuestInteraction")local gL={}if a_.Objectives[1].Data[1]==-65565 then gJ=gI.."/Distance"gK=Wrapped_GetStringTableText(aY,"UI_Texts/QuestMoveHere")SetIcon(gJ.."/QuestTypeIcon",{7,10})local gM=GetID(a_.Objectives[1].Data[2])local gN=Logic.GetEntityType(gM)local gO=g_TexturePositions.Entities[gN]if not gO then gO={7,9}end;SetIcon(gJ.."/IconMover",gO)local gP=GetID(a_.Objectives[1].Data[3])local gQ=Logic.GetEntityType(gP)local gR=g_TexturePositions.Entities[gQ]if not gR then gR={14,10}end;local eq=gJ.."/IconTarget"local gS=gJ.."/TargetPlayerColor"SetIcon(eq,gR)XGUIEng.SetMaterialColor(gS,0,255,255,255,0)SetIcon(gJ.."/QuestTypeIcon",{16,12})local gT=Lib.NPC.Text.StartConversation;gK=Localize(gT)XGUIEng.SetText(gJ.."/Caption","{center}"..gK)XGUIEng.ShowWidget(gJ,1)else GUI_Interaction.DisplayQuestObjective_Orig_NPC(aY,aZ)end else GUI_Interaction.DisplayQuestObjective_Orig_NPC(aY,aZ)end end;GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC=GUI_Interaction.GetEntitiesOrTerritoryListForQuest;GUI_Interaction.GetEntitiesOrTerritoryListForQuest=function(b1,gU)local gV={}local gW=true;if gU==Objective.Distance then if b1.Objectives[1].Data[1]==-65565 then local gX=GetID(b1.Objectives[1].Data[3])table.insert(gV,gX)else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(b1,gU)end else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(b1,gU)end;return gV,gW end end;RegisterModule(Lib.NPC.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/Sound/Sound_API")function StartEventPlaylist(gY,aa)aa=aa or 1;if not GUI then ExecuteLocal("StartEventPlaylist('%s', %d)",gY,aa)return end;if aa==GUI.GetPlayerID()then Sound.MusicStartEventPlaylist(gY)end end;API.StartEventPlaylist=StartEventPlaylist;function StopEventPlaylist(gY,aa)aa=aa or 1;if not GUI then ExecuteLocal("StopEventPlaylist('%s', %d)",gY,aa)return end;if aa==GUI.GetPlayerID()then Sound.MusicStopEventPlaylist(gY)end end;API.StopEventPlaylist=StopEventPlaylist;function Play2DSound(cb,aa)aa=aa or 1;if not GUI then ExecuteLocal([[Play2DSound("%s", %d)]],cb,aa)return end;if aa==GUI.GetPlayerID()then Sound.FXPlay2DSound(cb:gsub("/","\\"))end end;API.Play2DSound=Play2DSound;function Play3DSound(cb,fo,fp,gZ,aa)aa=aa or 1;fo=fo or 1;fp=fp or 1;gZ=gZ or 0;if not GUI then ExecuteLocal([[Play3DSound("%s", %f, %f, %d)]],cb,fo,fp,aa)return end;if aa==GUI.GetPlayerID()then Sound.FXPlay3DSound(cb:gsub("/","\\"),fo,fp,gZ)end end;API.Play3DSound=Play3DSound;function SoundSetVolume(g_)g_=g_<0 and 0 or math.floor(g_)if not GUI then ExecuteLocal("SoundSetVolume(%d)",g_)return end;Lib.Sound.Local:AdjustSound(g_,nil,nil,nil,nil)end;API.SoundSetVolume=SoundSetVolume;function SoundSetMusicVolume(g_)g_=g_<0 and 0 or math.floor(g_)if not GUI then ExecuteLocal("SoundSetMusicVolume(%d)",g_)return end;Lib.Sound.Local:AdjustSound(nil,g_,nil,nil,nil)end;API.SoundSetMusicVolume=SoundSetMusicVolume;function SoundSetVoiceVolume(g_)g_=g_<0 and 0 or math.floor(g_)if not GUI then ExecuteLocal("SoundSetVoiceVolume(%d)",g_)return end;Lib.Sound.Local:AdjustSound(nil,nil,g_,nil,nil)end;API.SoundSetVoiceVolume=SoundSetVoiceVolume;function SoundSetAtmoVolume(g_)g_=g_<0 and 0 or math.floor(g_)if not GUI then ExecuteLocal("SoundSetAtmoVolume(%d)",g_)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,g_,nil)end;API.SoundSetAtmoVolume=SoundSetAtmoVolume;function SoundSetUIVolume(g_)g_=g_<0 and 0 or math.floor(g_)if not GUI then ExecuteLocal("SoundSetUIVolume(%d)",g_)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,nil,g_)end;API.SoundSetUIVolume=SoundSetUIVolume;function SoundSave()if not GUI then Logic.ExecuteInLuaLocalState("SoundSave()")return end;Lib.Sound.Local:SaveSound()end;API.SoundSave=SoundSave;function SoundRestore()if not GUI then ExecuteLocal("SoundRestore()")return end;Lib.Sound.Local:RestoreSound()end;API.SoundRestore=SoundRestore;function PlayVoice(h0)if not GUI then ExecuteLocal([[PlayVoice("%s")]],h0)return end;StopVoice()Sound.PlayVoice("ImportantStuff",h0)end;API.PlayVoice=PlayVoice;function StopVoice()if not GUI then ExecuteLocal("StopVoice()")return end;Sound.StopVoice("ImportantStuff")end;API.StopVoice=StopVoice;Lib.Sound=Lib.Sound or{}Lib.Sound.Name="Sound"Lib.Sound.Global={}Lib.Sound.Local={SoundBackup={}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/sound/Sound_API")Lib.Register("module/sound/Sound")function Lib.Sound.Global:Initialize()if not self.IsInstalled then Lib.Sound.Local=nil end;self.IsInstalled=true end;function Lib.Sound.Global:OnSaveGameLoaded()end;function Lib.Sound.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:Initialize()if not self.IsInstalled then Lib.Sound.Global=nil end;self.IsInstalled=true end;function Lib.Sound.Local:OnSaveGameLoaded()end;function Lib.Sound.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:AdjustSound(h1,h2,h3,h4,h5)self:SaveSound()if h1 then Sound.SetGlobalVolume(h1)end;if h2 then Sound.SetMusicVolume(h2)end;if h3 then Sound.SetSpeechVolume(h3)end;if h4 then Sound.SetFXSoundpointVolume(h4)Sound.SetFXAtmoVolume(h4)end;if h5 then Sound.Set2DFXVolume(h5)Sound.SetFXVolume(h5)end end;function Lib.Sound.Local:SaveSound()if not self.SoundBackup.Saved then self.SoundBackup.Saved=true;self.SoundBackup.FXSP=Sound.GetFXSoundpointVolume()self.SoundBackup.FXAtmo=Sound.GetFXAtmoVolume()self.SoundBackup.FXVol=Sound.GetFXVolume()self.SoundBackup.Sound=Sound.GetGlobalVolume()self.SoundBackup.Music=Sound.GetMusicVolume()self.SoundBackup.Voice=Sound.GetSpeechVolume()self.SoundBackup.UI=Sound.Get2DFXVolume()end end;function Lib.Sound.Local:RestoreSound()if self.SoundBackup.Saved then Sound.SetFXSoundpointVolume(self.SoundBackup.FXSP)Sound.SetFXAtmoVolume(self.SoundBackup.FXAtmo)Sound.SetFXVolume(self.SoundBackup.FXVol)Sound.SetGlobalVolume(self.SoundBackup.Sound)Sound.SetMusicVolume(self.SoundBackup.Music)Sound.SetSpeechVolume(self.SoundBackup.Voice)Sound.Set2DFXVolume(self.SoundBackup.UI)self.SoundBackup={}end end;RegisterModule(Lib.Sound.Name)Lib.Register("module/promotion/Promotion_Requirements")InitKnightTitleTablesOverwrite=function()KnightTitles={}KnightTitles.Knight=0;KnightTitles.Mayor=1;KnightTitles.Baron=2;KnightTitles.Earl=3;KnightTitles.Marquees=4;KnightTitles.Duke=5;KnightTitles.Archduke=6;NeedsAndRightsByKnightTitle={}NeedsAndRightsByKnightTitle[KnightTitles.Knight]={ActivateNeedForPlayer,{Needs.Nutrition,Needs.Medicine},ActivateRightForPlayer,{Technologies.R_Gathering,Technologies.R_Woodcutter,Technologies.R_StoneQuarry,Technologies.R_HuntersHut,Technologies.R_FishingHut,Technologies.R_CattleFarm,Technologies.R_GrainFarm,Technologies.R_SheepFarm,Technologies.R_IronMine,Technologies.R_Beekeeper,Technologies.R_HerbGatherer,Technologies.R_Nutrition,Technologies.R_Bakery,Technologies.R_Dairy,Technologies.R_Butcher,Technologies.R_SmokeHouse,Technologies.R_Clothes,Technologies.R_Tanner,Technologies.R_Weaver,Technologies.R_Construction,Technologies.R_Trail,Technologies.R_KnockDown,Technologies.R_Sermon}}NeedsAndRightsByKnightTitle[KnightTitles.Mayor]={ActivateNeedForPlayer,{Needs.Clothes},ActivateRightForPlayer,{Technologies.R_Military,Technologies.R_MilitarySword,Technologies.R_Thieves,Technologies.R_Hygiene,Technologies.R_Soapmaker,Technologies.R_BroomMaker,Technologies.R_SpecialEdition,Technologies.R_SpecialEdition_Pavilion,Technologies.R_SpecialEdition_StatueFamily},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Baron]={ActivateNeedForPlayer,{Needs.Hygiene},ActivateRightForPlayer,{Technologies.R_SiegeEngineWorkshop,Technologies.R_BatteringRam,Technologies.R_Pallisade,Technologies.R_Medicine,Technologies.R_Entertainment,Technologies.R_Tavern,Technologies.R_Street,Technologies.R_Festival,Technologies.R_SpecialEdition_Column},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Earl]={ActivateNeedForPlayer,{Needs.Entertainment,Needs.Prosperity},ActivateRightForPlayer,{Technologies.R_MilitaryBow,Technologies.R_Baths,Technologies.R_Prosperity,Technologies.R_Taxes,Technologies.R_SpecialEdition_StatueSettler},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Marquees]={ActivateNeedForPlayer,{Needs.Wealth},ActivateRightForPlayer,{Technologies.R_Theater,Technologies.R_Wealth,Technologies.R_BannerMaker,Technologies.R_SiegeTower,Technologies.R_Wall,Technologies.R_Ballista,Technologies.R_AmmunitionCart,Technologies.R_SpecialEdition_StatueProduction},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Duke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Catapult,Technologies.R_Carpenter,Technologies.R_CandleMaker,Technologies.R_Blacksmith,Technologies.R_SpecialEdition_StatueDario},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Archduke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Victory},StartKnightsPromotionCelebration}if Framework.GetGameExtraNo()>=1 then local h6=4;table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][h6],Technologies.R_Cistern)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][h6],Technologies.R_Beautification_Brazier)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][h6],Technologies.R_Beautification_Shrine)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][h6],Technologies.R_Beautification_Pillar)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][h6],Technologies.R_Beautification_StoneBench)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][h6],Technologies.R_Beautification_Sundial)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Marquees][h6],Technologies.R_Beautification_Vase)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Duke][h6],Technologies.R_Beautification_VictoryColumn)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Archduke][h6],Technologies.R_Beautification_TriumphalArch)end;KnightTitleRequirements={}KnightTitleRequirements[KnightTitles.Mayor]={}KnightTitleRequirements[KnightTitles.Mayor].Headquarters=1;KnightTitleRequirements[KnightTitles.Mayor].Settlers=10;KnightTitleRequirements[KnightTitles.Mayor].Products={{GoodCategories.GC_Clothes,6}}KnightTitleRequirements[KnightTitles.Baron]={}KnightTitleRequirements[KnightTitles.Baron].Settlers=30;KnightTitleRequirements[KnightTitles.Baron].Headquarters=1;KnightTitleRequirements[KnightTitles.Baron].Storehouse=1;KnightTitleRequirements[KnightTitles.Baron].Cathedrals=1;KnightTitleRequirements[KnightTitles.Baron].Products={{GoodCategories.GC_Hygiene,12}}KnightTitleRequirements[KnightTitles.Earl]={}KnightTitleRequirements[KnightTitles.Earl].Settlers=50;KnightTitleRequirements[KnightTitles.Earl].Headquarters=2;KnightTitleRequirements[KnightTitles.Earl].Goods={{Goods.G_Beer,18}}KnightTitleRequirements[KnightTitles.Marquees]={}KnightTitleRequirements[KnightTitles.Marquees].Settlers=70;KnightTitleRequirements[KnightTitles.Marquees].Headquarters=2;KnightTitleRequirements[KnightTitles.Marquees].Storehouse=2;KnightTitleRequirements[KnightTitles.Marquees].Cathedrals=2;KnightTitleRequirements[KnightTitles.Marquees].RichBuildings=20;KnightTitleRequirements[KnightTitles.Duke]={}KnightTitleRequirements[KnightTitles.Duke].Settlers=90;KnightTitleRequirements[KnightTitles.Duke].Storehouse=2;KnightTitleRequirements[KnightTitles.Duke].Cathedrals=2;KnightTitleRequirements[KnightTitles.Duke].Headquarters=3;KnightTitleRequirements[KnightTitles.Duke].DecoratedBuildings={{Goods.G_Banner,9}}KnightTitleRequirements[KnightTitles.Archduke]={}KnightTitleRequirements[KnightTitles.Archduke].Settlers=150;KnightTitleRequirements[KnightTitles.Archduke].Storehouse=3;KnightTitleRequirements[KnightTitles.Archduke].Cathedrals=3;KnightTitleRequirements[KnightTitles.Archduke].Headquarters=3;KnightTitleRequirements[KnightTitles.Archduke].RichBuildings=30;KnightTitleRequirements[KnightTitles.Archduke].FullDecoratedBuildings=30;CreateTechnologyKnightTitleTable()end;Lib.Register("module/promotion/Promotion_Helper")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Helper={}Lib.Promotion.Helper.OverwritePromotionHelper=function()DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist;DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist;DoesNeededNumberOfGoodTypesForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist;DoNeededNumberOfConsumedGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist;DoNumberOfProductsInCategoryExist=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist;DoNeededDiversityBuffForKnightTitleExist=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist;DoCustomFunctionForKnightTitleSucceed=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed;DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist;DoNeededSpecialBuildingUpgradeForKnightTitleExist=Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist;DoesNeededCityReputationForKnightTitleExist=Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist;DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist;DoNeededNumberOfRichBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist;DoNeededNumberOfGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist;DoesNeededNumberOfSettlersForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist;CanKnightBePromoted=Lib.Promotion.Helper.CanKnightBePromoted;VictroryBecauseOfTitle=Lib.Promotion.Helper.VictroryBecauseOfTitle end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Category==nil then return end;if h8 then local h9=KnightTitleRequirements[h7].Category[h8][1]local ha=KnightTitleRequirements[h7].Category[h8][2]local hb=0;if h9==EntityCategories.Spouse then hb=Logic.GetNumberOfSpouses(aa)else local da={Logic.GetPlayerEntitiesInCategory(aa,h9)}for f=1,#da do if Logic.IsBuilding(da[f])==1 then if Logic.IsConstructionComplete(da[f])==1 then hb=hb+1 end else hb=hb+1 end end end;if hb>=ha then return true,hb,ha end;return false,hb,ha else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Category do hc,hd,he=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Entities==nil then return end;if h8 then local cP=KnightTitleRequirements[h7].Entities[h8][1]local ha=KnightTitleRequirements[h7].Entities[h8][2]local da=GetPlayerEntities(aa,cP)local hb=0;for f=1,#da do if Logic.IsBuilding(da[f])==1 then if Logic.IsConstructionComplete(da[f])==1 then hb=hb+1 end else hb=hb+1 end end;if hb>=ha then return true,hb,ha end;return false,hb,ha else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Entities do hc,hd,he=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Goods==nil then return end;if h8 then local fy=KnightTitleRequirements[h7].Goods[h8][1]local ha=KnightTitleRequirements[h7].Goods[h8][2]local hb=GetPlayerGoodsInSettlement(fy,aa,true)if hb>=ha then return true,hb,ha end;return false,hb,ha else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Goods do hc,hd,he=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Consume==nil then return end;if h8 then CONST_CONSUMED_GOODS_COUNTER[aa]=CONST_CONSUMED_GOODS_COUNTER[aa]or{}local fy=KnightTitleRequirements[h7].Consume[h8][1]local hf=CONST_CONSUMED_GOODS_COUNTER[aa][fy]or 0;local hg=KnightTitleRequirements[h7].Consume[h8][2]if hf>=hg then return true,hf,hg else return false,hf,hg end else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Consume do hc,hd,he=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist(aa,h7,f)if hc==false then return false,hd,he end end;return true,hd,he end end;Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Products==nil then return end;if h8 then local hf=0;local hh=KnightTitleRequirements[h7].Products[h8][2]local hi=KnightTitleRequirements[h7].Products[h8][1]local hj={Logic.GetGoodTypesInGoodCategory(hi)}for f=1,#hj do hf=hf+GetPlayerGoodsInSettlement(hj[f],aa,true)end;return hf>=hh,hf,hh else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Products do hc,hd,he=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].Buff==nil then return end;if h8 then local hk=KnightTitleRequirements[h7].Buff[h8]if Logic.GetBuff(aa,hk)and Logic.GetBuff(aa,hk)~=0 then return true end;return false else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Buff do hc,hd,he=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed=function(aa,h7,h8)if KnightTitleRequirements[h7].Custom==nil then return end;if h8 then return KnightTitleRequirements[h7].Custom[h8][1](aa,h7,h8)else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].Custom do hc,hd,he=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=function(aa,h7,h8)if KnightTitleRequirements[h7].DecoratedBuildings==nil then return end;if h8 then local hl={Logic.GetPlayerEntitiesInCategory(aa,EntityCategories.CityBuilding)}local hm=KnightTitleRequirements[h7].DecoratedBuildings[h8][1]local hn=KnightTitleRequirements[h7].DecoratedBuildings[h8][2]local ho=0;for f=1,#hl do local hp=hl[f]local hq=Logic.GetBuildingWealthGoodState(hp,hm)if hq>0 then ho=ho+1 end end;if ho>=hn then return true,ho,hn else return false,ho,hn end else local hc,hd,he;for f=1,#KnightTitleRequirements[h7].DecoratedBuildings do hc,hd,he=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(aa,h7,f)if hc==false then return hc,hd,he end end;return hc end end;Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist=function(aa,h7,hr)local hs;local ht;if hr==EntityCategories.Headquarters then hs=Logic.GetHeadquarters(aa)ht="Headquarters"elseif hr==EntityCategories.Storehouse then hs=Logic.GetStoreHouse(aa)ht="Storehouse"elseif hr==EntityCategories.Cathedrals then hs=Logic.GetCathedral(aa)ht="Cathedrals"else return end;if KnightTitleRequirements[h7][ht]==nil then return end;local hu=KnightTitleRequirements[h7][ht]if hs~=nil then local hv=Logic.GetUpgradeLevel(hs)if hv>=hu then return true,hv,hu else return false,hv,hu end else return false,0,hu end end;Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist=function(aa,h7)if KnightTitleRequirements[h7].Reputation==nil then return end;local ha=KnightTitleRequirements[h7].Reputation;if not ha then return end;local hb=math.floor(Logic.GetCityReputation(aa)*100+0.5)if hb>=ha then return true,hb,ha end;return false,hb,ha end;Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=function(aa,h7)if KnightTitleRequirements[h7].FullDecoratedBuildings==nil then return end;local hl={Logic.GetPlayerEntitiesInCategory(aa,EntityCategories.CityBuilding)}local hn=KnightTitleRequirements[h7].FullDecoratedBuildings;local ho=0;for f=1,#hl do local hp=hl[f]local hw=0;if Logic.GetBuildingWealthGoodState(hp,Goods.G_Banner)>0 then hw=hw+1 end;if Logic.GetBuildingWealthGoodState(hp,Goods.G_Sign)>0 then hw=hw+1 end;if Logic.GetBuildingWealthGoodState(hp,Goods.G_Candle)>0 then hw=hw+1 end;if Logic.GetBuildingWealthGoodState(hp,Goods.G_Ornament)>0 then hw=hw+1 end;if hw>=4 then ho=ho+1 end end;if ho>=hn then return true,ho,hn else return false,ho,hn end end;Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist=function(aa,h7)if KnightTitleRequirements[h7].RichBuildings==nil then return end;local hx=Logic.GetNumberOfProsperBuildings(aa,1)local hy=KnightTitleRequirements[h7].RichBuildings;if hy==-1 then hy=Logic.GetNumberOfPlayerEntitiesInCategory(aa,EntityCategories.CityBuilding)hy=hy-Logic.GetNumberOfEntitiesOfTypeOfPlayer(aa,Entities.B_Barracks)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(aa,Entities.B_BarracksArchers)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(aa,Entities.B_SiegeEngineWorkshop)end;if hx>=hy then return true,hx,hy else return false,hx,hy end end;Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist=function(aa,h7)if KnightTitleRequirements[h7].Good==nil then return end;local h9=KnightTitleRequirements[h7].Good[1]local hz={Logic.GetPlayerEntitiesInCategory(aa,h9)}local hf=0;for f=1,#hz do local s=hz[f]local cP=Logic.GetEntityType(s)if cP~=Entities.B_TableBeer and cP~=Entities.B_Marketslot and Logic.IsEntityTypeInCategory(cP,EntityCategories.Marketplace)==0 and Logic.IsKnight(s)==false then local hA=Logic.GetAmountOnOutStockByIndex(s,0)hf=hf+hA end end;local hg=KnightTitleRequirements[h7].Good[2]if hf>=hg then return true,hf,hg else return false,hf,hg end end;Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist=function(aa,h7)if KnightTitleRequirements[h7].Settlers==nil then return end;local hB=KnightTitleRequirements[h7].Settlers;if hB~=nil then local hC=Logic.GetNumberOfEmployedWorkers(aa)if hC>=hB then return true,hC,hB else return false,hC,hB end end end;Lib.Promotion.Helper.CanKnightBePromoted=function(aa,h7)if h7==nil then h7=Logic.GetKnightTitle(aa)+1 end;if Logic.CanStartFestival(aa,1)==true then if KnightTitleRequirements[h7]~=nil and DoesNeededNumberOfSettlersForKnightTitleExist(aa,h7)~=false and DoNeededNumberOfGoodsForKnightTitleExist(aa,h7)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(aa,h7,EntityCategories.Headquarters)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(aa,h7,EntityCategories.Storehouse)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(aa,h7,EntityCategories.Cathedrals)~=false and DoNeededNumberOfRichBuildingsForKnightTitleExist(aa,h7)~=false and DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(aa,h7)~=false and DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(aa,h7)~=false and DoesNeededCityReputationForKnightTitleExist(aa,h7)~=false and DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(aa,h7)~=false and DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(aa,h7)~=false and DoesNeededNumberOfGoodTypesForKnightTitleExist(aa,h7)~=false and DoNeededDiversityBuffForKnightTitleExist(aa,h7)~=false and DoCustomFunctionForKnightTitleSucceed(aa,h7)~=false and DoNeededNumberOfConsumedGoodsForKnightTitleExist(aa,h7)~=false and DoNumberOfProductsInCategoryExist(aa,h7)~=false then return true end end;return false end;Lib.Promotion.Helper.VictroryBecauseOfTitle=function()QuestTemplate:TerminateEventsAndStuff()Victory(g_VictoryAndDefeatType.VictoryMissionComplete)end;Lib.Register("module/promotion/Promotion_Config")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Config={}function Lib.Promotion.Config:InitAddonText()if Framework.GetGameExtraNo()~=0 then Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Gems]={de="Edelsteine beschaffen",en="Obtain gems",fr="Se procurer des Gemmes"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Olibanum]={de="Weihrauch beschaffen",en="Obtain olibanum",fr="Se procurer de l'encens"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_MusicalInstrument]={de="Muskinstrumente beschaffen",en="Obtain instruments",fr="Se procurer des instruments de musique"}end end;function Lib.Promotion.Config:InitTexturePositions()g_TexturePositions.EntityCategories[EntityCategories.GC_Food_Supplier]={1,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Clothes_Supplier]={1,2}g_TexturePositions.EntityCategories[EntityCategories.GC_Hygiene_Supplier]={16,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Entertainment_Supplier]={1,4}g_TexturePositions.EntityCategories[EntityCategories.GC_Luxury_Supplier]={16,3}g_TexturePositions.EntityCategories[EntityCategories.GC_Weapon_Supplier]={1,7}g_TexturePositions.EntityCategories[EntityCategories.GC_Medicine_Supplier]={2,10}g_TexturePositions.EntityCategories[EntityCategories.Outpost]={12,3}g_TexturePositions.EntityCategories[EntityCategories.Spouse]={5,15}g_TexturePositions.EntityCategories[EntityCategories.CattlePasture]={3,16}g_TexturePositions.EntityCategories[EntityCategories.SheepPasture]={4,1}g_TexturePositions.EntityCategories[EntityCategories.Soldier]={7,12}g_TexturePositions.EntityCategories[EntityCategories.GrainField]={14,2}g_TexturePositions.EntityCategories[EntityCategories.BeeHive]={2,1}g_TexturePositions.EntityCategories[EntityCategories.OuterRimBuilding]={3,4}g_TexturePositions.EntityCategories[EntityCategories.CityBuilding]={8,1}g_TexturePositions.EntityCategories[EntityCategories.Leader]={7,11}g_TexturePositions.EntityCategories[EntityCategories.Range]={9,8}g_TexturePositions.EntityCategories[EntityCategories.Melee]={9,7}g_TexturePositions.EntityCategories[EntityCategories.SiegeEngine]={2,15}g_TexturePositions.Entities[Entities.B_Beehive]={2,1}g_TexturePositions.Entities[Entities.B_Cathedral_Big]={3,12}g_TexturePositions.Entities[Entities.B_CattlePasture]={3,16}g_TexturePositions.Entities[Entities.B_GrainField_ME]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NA]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NE]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_SE]={1,13}g_TexturePositions.Entities[Entities.U_MilitaryBallista]={10,5}g_TexturePositions.Entities[Entities.B_Outpost]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_ME]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NA]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NE]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_SE]={12,3}g_TexturePositions.Entities[Entities.B_SheepPasture]={4,1}g_TexturePositions.Entities[Entities.U_SiegeEngineCart]={9,4}g_TexturePositions.Entities[Entities.U_Trebuchet]={9,1}g_TexturePositions.Needs[Needs.Medicine]={2,10}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_1]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_2]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_3]={4,7}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_1]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_2]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_3]={4,5}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_1]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_2]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_3]={4,6}g_TexturePositions.Buffs=g_TexturePositions.Buffs or{}g_TexturePositions.Buffs[Buffs.Buff_ClothesDiversity]={1,2}g_TexturePositions.Buffs[Buffs.Buff_EntertainmentDiversity]={1,4}g_TexturePositions.Buffs[Buffs.Buff_FoodDiversity]={1,1}g_TexturePositions.Buffs[Buffs.Buff_HygieneDiversity]={1,3}g_TexturePositions.Buffs[Buffs.Buff_Colour]={5,11}g_TexturePositions.Buffs[Buffs.Buff_Entertainers]={5,12}g_TexturePositions.Buffs[Buffs.Buff_ExtraPayment]={1,8}g_TexturePositions.Buffs[Buffs.Buff_Sermon]={4,14}g_TexturePositions.Buffs[Buffs.Buff_Spice]={5,10}g_TexturePositions.Buffs[Buffs.Buff_NoTaxes]={1,6}g_TexturePositions.GoodCategories=g_TexturePositions.GoodCategories or{}g_TexturePositions.GoodCategories[GoodCategories.GC_Ammunition]={10,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Animal]={4,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Clothes]={1,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Document]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Entertainment]={1,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Food]={1,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Gold]={1,8}g_TexturePositions.GoodCategories[GoodCategories.GC_Hygiene]={16,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Luxury]={16,3}g_TexturePositions.GoodCategories[GoodCategories.GC_Medicine]={2,10}g_TexturePositions.GoodCategories[GoodCategories.GC_None]={15,16}g_TexturePositions.GoodCategories[GoodCategories.GC_RawFood]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_RawMedicine]={2,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Research]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Resource]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Tools]={4,12}g_TexturePositions.GoodCategories[GoodCategories.GC_Water]={1,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Weapon]={8,5}end;function Lib.Promotion.Config:InitTexturePositionsAddon()if Framework.GetGameExtraNo()~=0 then g_TexturePositions.Entities[Entities.B_GrainField_AS]={1,13}g_TexturePositions.Entities[Entities.B_Outpost_AS]={12,3}g_TexturePositions.Buffs[Buffs.Buff_Gems]={1,1,1}g_TexturePositions.Buffs[Buffs.Buff_MusicalInstrument]={1,3,1}g_TexturePositions.Buffs[Buffs.Buff_Olibanum]={1,2,1}end end;Lib.Promotion.Config.RequirementWidgets={[1]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Settlers",[2]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Goods",[3]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/RichBuildings",[4]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Castle",[5]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Storehouse",[6]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Cathedral"}if GoodCategories then Lib.Promotion.Config.GoodCategoryNames={[GoodCategories.GC_Ammunition]={de="Munition",en="Ammunition",fr="Munition"},[GoodCategories.GC_Animal]={de="Nutztiere",en="Livestock",fr="Animaux d'élevage"},[GoodCategories.GC_Clothes]={de="Kleidung",en="Clothes",fr="Vêtements"},[GoodCategories.GC_Document]={de="Dokumente",en="Documents",fr="Documents"},[GoodCategories.GC_Entertainment]={de="Unterhaltung",en="Entertainment",fr="Divertissement"},[GoodCategories.GC_Food]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_Gold]={de="Gold",en="Gold",fr="Or"},[GoodCategories.GC_Hygiene]={de="Hygieneartikel",en="Hygiene",fr="Hygiène"},[GoodCategories.GC_Luxury]={de="Dekoration",en="Decoration",fr="Décoration"},[GoodCategories.GC_Medicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_None]={de="Nichts",en="None",fr="Rien"},[GoodCategories.GC_RawFood]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_RawMedicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_Research]={de="Forschung",en="Research",fr="Recherche"},[GoodCategories.GC_Resource]={de="Rohstoffe",en="Resource",fr="Ressources"},[GoodCategories.GC_Tools]={de="Werkzeug",en="Tools",fr="Outils"},[GoodCategories.GC_Water]={de="Wasser",en="Water",fr="Eau"},[GoodCategories.GC_Weapon]={de="Waffen",en="Weapon",fr="Armes"}}end;if Buffs then Lib.Promotion.Config.BuffTypeNames={[Buffs.Buff_ClothesDiversity]={de="Vielfältige Kleidung",en="Clothes variety",fr="Diversité vestimentaire"},[Buffs.Buff_Colour]={de="Farben beschaffen",en="Obtain color",fr="Se procurer des couleurs"},[Buffs.Buff_Entertainers]={de="Gaukler anheuern",en="Hire entertainer",fr="Engager des saltimbanques"},[Buffs.Buff_EntertainmentDiversity]={de="Vielfältige Unterhaltung",en="Entertainment variety",fr="Diversité des divertissements"},[Buffs.Buff_ExtraPayment]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},[Buffs.Buff_Festival]={de="Fest veranstalten",en="Hold Festival",fr="Organiser une fête"},[Buffs.Buff_FoodDiversity]={de="Vielfältige Nahrung",en="Food variety",fr="Diversité alimentaire"},[Buffs.Buff_HygieneDiversity]={de="Vielfältige Hygiene",en="Hygiene variety",fr="Diversité hygiénique"},[Buffs.Buff_NoTaxes]={de="Steuerbefreiung",en="No taxes",fr="Exonération fiscale"},[Buffs.Buff_Sermon]={de="Pregigt abhalten",en="Hold sermon",fr="Tenir des prêches"},[Buffs.Buff_Spice]={de="Salz beschaffen",en="Obtain salt",fr="Se procurer du sel"}}end;Lib.Promotion.Config.Description={Settlers={Title={de="Benötigte Siedler",en="Needed settlers",fr="Settlers nécessaires"},Text={de="- Benötigte Menge an Siedlern",en="- Needed number of settlers",fr="- Quantité de settlers nécessaire"}},RichBuildings={Title={de="Reiche Häuser",en="Rich city buildings",fr="Bâtiments riches"},Text={de="- Menge an reichen Stadtgebäuden",en="- Needed amount of rich city buildings",fr="- Quantité de bâtiments de la ville riches"}},Goods={Title={de="Waren lagern",en="Store Goods",fr="Entreposer des marchandises"},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},FullDecoratedBuildings={Title={de="Dekorierte Häuser",en="Decorated City buildings",fr="Bâtiments décorés"},Text={de="- Menge an voll dekorierten Gebäuden",en="- Amount of full decoraded city buildings",fr="- Quantité de bâtiments entièrement décorés"}},DecoratedBuildings={Title={de="Dekoration",en="Decoration",fr="Décoration"},Text={de="- Menge an Dekorationsgütern in der Siedlung",en="- Amount of decoration goods in settlement",fr="- Quantité de biens de décoration dans la ville"}},Headquarters={Title={de="Burgstufe",en="Castle level",fr="Niveau du château"},Text={de="- Benötigte Ausbauten der Burg",en="- Needed castle upgrades",fr="- Améliorations nécessaires du château"}},Storehouse={Title={de="Lagerhausstufe",en="Storehouse level",fr="Niveau de l'entrepôt"},Text={de="- Benötigte Ausbauten des Lagerhauses",en="- Needed storehouse upgrades",fr="- Améliorations nécessaires de l'entrepôt"}},Cathedrals={Title={de="Kirchenstufe",en="Cathedral level",fr="Niveau de la cathédrale"},Text={de="- Benötigte Ausbauten der Kirche",en="- Needed cathedral upgrades",fr="- Améliorations nécessaires de la cathédrale"}},Reputation={Title={de="Ruf der Stadt",en="City reputation",fr="Réputation de la ville"},Text={de="- Benötigter Ruf der Stadt",en="- Needed city reputation",fr="- Réputation de la ville nécessaire"}},EntityCategoryDefault={Title={de="",en="",fr=""},Text={de="- Benötigte Anzahl",en="- Needed amount",fr="- Nombre requis"}},Cattle={Title={de="Kühe",en="Cattle",fr="Vaches"},Text={de="- Benötigte Menge an Kühen",en="- Needed amount of cattle",fr="- Quantité de vaches nécessaire"}},Sheep={Title={de="Schafe",en="Sheeps",fr="Moutons"},Text={de="- Benötigte Menge an Schafen",en="- Needed amount of sheeps",fr="- Quantité de moutons nécessaire"}},Outposts={Title={de="Territorien",en="Territories",fr="Territoires"},Text={de="- Zu erobernde Territorien",en="- Territories to claim",fr="- Territoires à conquérir"}},CityBuilding={Title={de="Stadtgebäude",en="City buildings",fr="Bâtiment de la ville"},Text={de="- Menge benötigter Stadtgebäude",en="- Needed amount of city buildings",fr="- Quantité de bâtiments urbains nécessaires"}},OuterRimBuilding={Title={de="Rohstoffgebäude",en="Gatherer",fr="Cueilleur"},Text={de="- Menge benötigter Rohstoffgebäude",en="- Needed amount of gatherer",fr="- Quantité de bâtiments de matières premières nécessaires"}},FarmerBuilding={Title={de="Farmeinrichtungen",en="Farming structure",fr="Installations de la ferme"},Text={de="- Menge benötigter Nutzfläche",en="- Needed amount of farming structure",fr="- Quantité de surface utile nécessaire"}},Consume={Title={de="",en="",fr=""},Text={de="- Durch Siedler zu konsumierende Menge",en="- Amount to be consumed by the settlers",fr="- Quantité à consommer par les settlers"}},Products={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},Buff={Title={de="Bonus aktivieren",en="Activate Buff",fr="Activer bonus"},Text={de="- Aktiviere diesen Bonus auf den Ruf der Stadt",en="- Raise the city reputatition with this buff",fr="- Active ce bonus sur la réputation de la ville"}},Leader={Title={de="Batalione",en="Battalions",fr="Battalions"},Text={de="- Menge an Batalionen unterhalten",en="- Battalions you need under your command",fr="- Maintenir une quantité de bataillons"}},Soldiers={Title={de="Soldaten",en="Soldiers",fr="Soldats"},Text={de="- Menge an Streitkräften unterhalten",en="- Soldiers you need under your command",fr="- Maintenir une quantité de forces armées"}},Worker={Title={de="Arbeiter",en="Workers",fr="Travailleurs"},Text={de="- Menge an arbeitender Bevölkerung",en="- Workers you need under your reign",fr="- Quantité de population au travail"}},Entities={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed Amount",fr="- Quantité nécessaire"}},Buildings={Title={de="Gebäude",en="Buildings",fr="Bâtiments"},Text={de="- Gesamtmenge an Gebäuden",en="- Amount of buildings",fr="- Total des bâtiments"}},Weapons={Title={de="Waffen",en="Weapons",fr="Armes"},Text={de="- Benötigte Menge an Waffen",en="- Needed amount of weapons",fr="- Quantité d'armes nécessaire"}},HeavyWeapons={Title={de="Belagerungsgeräte",en="Siege Engines",fr="Matériel de siège"},Text={de="- Benötigte Menge an Belagerungsgeräten",en="- Needed amount of siege engine",fr="- Quantité de matériel de siège nécessaire"}},Spouse={Title={de="Ehefrauen",en="Spouses",fr="Épouses"},Text={de="- Benötigte Anzahl Ehefrauen in der Stadt",en="- Needed amount of spouses in your city",fr="- Nombre d'épouses nécessaires dans la ville"}}}Lib.Register("module/promotion/Promotion_API")Lib.Require("comfort/IsLocalScript")Lib.Register("module/faker/Technology_API")function AddCustomTechnology(bP,y,eo)Lib.Technology.Shared:AddCustomTechnology(bP,y,eo)end;API.AddCustomTechnology=AddCustomTechnology;Lib.Technology=Lib.Technology or{}Lib.Technology.Name="Technology"Lib.Technology.Global={}Lib.Technology.Local={}Lib.Technology.Shared={CustomTechnologySequence=0,CustomTechnologies={}}CONST_TECHNOLOGY_TO_INDEX={}Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/faker/Technology_API")Lib.Register("module/faker/Technology")function Lib.Technology.Global:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Local=nil end;self.IsInstalled=true end;function Lib.Technology.Global:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Local:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Global=nil end;self.IsInstalled=true end;function Lib.Technology.Local:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Shared:AddCustomTechnology(bP,y,eo)if Technologies[bP]then return end;self.CustomTechnologySequence=self.CustomTechnologySequence+1;local hD={bP,self.CustomTechnologySequence,eo,{},y}table.insert(self.CustomTechnologies,hD)Technologies[bP]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[bP]]=#self.CustomTechnologies;CONST_TECHNOLOGY_TO_INDEX[bP]=#self.CustomTechnologies;if IsLocalScript()then g_TexturePositions.Technologies[Technologies[bP]]=eo;AddStringText("UI_ObjectNames/"..bP,y)else for f=1,8 do Logic.TechnologySetState(f,Technologies[bP],0)end end end;function Lib.Technology.Shared:IsCustomTechnology(hE)return hE>=1000 and CONST_TECHNOLOGY_TO_INDEX[hE]~=nil end;function Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared.Orig_Logic_TechnologyGetState=Logic.TechnologyGetState;Logic.TechnologyGetState=function(aa,hE)if hE and Lib.Technology.Shared:IsCustomTechnology(hE)then local ca=CONST_TECHNOLOGY_TO_INDEX[hE]if self.CustomTechnologies[ca]then return self.CustomTechnologies[ca][4][aa]or TechnologyStates.Locked end end;return Lib.Technology.Shared.Orig_Logic_TechnologyGetState(aa,hE)end;if not IsLocalScript()then Lib.Technology.Shared.Orig_Logic_TechnologySetState=Logic.TechnologySetState;Logic.TechnologySetState=function(aa,hE,bi)if hE and Lib.Technology.Shared:IsCustomTechnology(hE)then local ca=CONST_TECHNOLOGY_TO_INDEX[hE]if self.CustomTechnologies[ca]then self.CustomTechnologies[ca][4][aa]=bi;RequestHiResDelay(1,ExecuteLocal,[[Lib.Technology.Shared.CustomTechnologies[%d][4][%d] = %d]],ca,aa,bi)return end end;Lib.Technology.Shared.Orig_Logic_TechnologySetState(aa,hE,bi)end end end;function Lib.Technology.Shared:InitNewTechnologies()self.CustomTechnologySequence=0;for g,h in pairs(Technologies)do if self.CustomTechnologySequence<h then self.CustomTechnologySequence=h end end;self.CustomTechnologySequence=self.CustomTechnologySequence+1000-self.CustomTechnologySequence;for f=1,#self.CustomTechnologies do self.CustomTechnologySequence=self.CustomTechnologySequence+1;self.CustomTechnologies[f][2]=self.CustomTechnologySequence;local aU=self.CustomTechnologies[f]Technologies[aU[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[aU[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[aU[1]]=f;if IsLocalScript()then g_TexturePositions.Technologies[Technologies[aU[1]]]=aU[3]AddStringText("UI_ObjectNames/"..aU[1],aU[4])end end end;function Lib.Technology.Shared:RestoreNewTechnologies()for f=1,#self.CustomTechnologies do local aU=self.CustomTechnologies[f]Technologies[aU[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[aU[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[aU[1]]=f end end;RegisterModule(Lib.Technology.Name)Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Name="Promotion"Lib.Promotion.Global={TechnologiesToResearch={}}Lib.Promotion.Local={}Lib.Promotion.Shared={TechnologyConfig={{"R_MilitarySword","UI_ObjectNames/BuySwordfighters",{9,7,0},0},{"R_MilitaryBow","UI_ObjectNames/BuyBowmen",{9,8,0},0}}}CONST_REQUIREMENT_TOOLTIP_TYPE={}CONST_CONSUMED_GOODS_COUNTER={}Lib.Require("core/Core")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UITools")Lib.Require("module/promotion/Promotion_API")Lib.Require("module/promotion/Promotion_Config")Lib.Require("module/promotion/Promotion_Helper")Lib.Require("module/promotion/Promotion_Requirements")Lib.Register("module/promotion/Promotion")function Lib.Promotion.Global:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:OverrideKnightTitleChanged()self:OverwriteConsumedGoods()self:InitRelatedTechnologies()Lib.Promotion.Local=nil end;self.IsInstalled=true end;function Lib.Promotion.Global:OnSaveGameLoaded()end;function Lib.Promotion.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()for f=1,8 do ActivateNeedsAndRightsForPlayerByKnightTitle(f,0)end;self.LoadscreenClosed=true elseif aw==Report.KnightTitleChanged then self:UnlockRelatedTechnologies(arg[1],arg[2])local hF=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=hF or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aw==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Global:RegisterConsumedGoods(aa,hG)CONST_CONSUMED_GOODS_COUNTER[aa]=CONST_CONSUMED_GOODS_COUNTER[aa]or{}CONST_CONSUMED_GOODS_COUNTER[aa][hG]=CONST_CONSUMED_GOODS_COUNTER[aa][hG]or 0;CONST_CONSUMED_GOODS_COUNTER[aa][hG]=CONST_CONSUMED_GOODS_COUNTER[aa][hG]+1 end;function Lib.Promotion.Global:OverrideKnightTitleChanged()GameCallback_KnightTitleChanged_Orig_Promo=GameCallback_KnightTitleChanged;GameCallback_KnightTitleChanged=function(aa,hH)GameCallback_KnightTitleChanged_Orig_Promo(aa,hH)SendReport(Report.KnightTitleChanged,aa,hH)SendReportToLocal(Report.KnightTitleChanged,aa,hH)end end;function Lib.Promotion.Global:OverwriteConsumedGoods()GameCallback_ConsumeGood_Orig_Promo=GameCallback_ConsumeGood;GameCallback_ConsumeGood=function(hI,hG,hJ)GameCallback_ConsumeGood_Orig_Promo(hI,hG,hJ)SendReport(Report.GoodsConsumed,hI,hG,hJ)SendReportToLocal(Report.GoodsConsumed,hI,hG,hJ)end end;function Lib.Promotion.Global:InitRelatedTechnologies()self.TechnologiesToResearch[Technologies.R_MilitaryBow]={Technologies.R_BarracksArchers,Technologies.R_BowMaker}self.TechnologiesToResearch[Technologies.R_MilitarySword]={Technologies.R_Barracks,Technologies.R_SwordSmith}end;function Lib.Promotion.Global:UnlockRelatedTechnologies(aa,hH)if NeedsAndRightsByKnightTitle[hH]then for g,h in pairs(NeedsAndRightsByKnightTitle[hH][4])do if self.TechnologiesToResearch[h]then for gk,hD in pairs(self.TechnologiesToResearch[h])do if Logic.TechnologyGetState(aa,hD)==0 or Logic.TechnologyGetState(aa,hD)==2 then Logic.TechnologySetState(aa,hD,3)end end end end end end;function Lib.Promotion.Local:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:InitTexturePositions()self:OverwriteUpdateRequirements()self:OverwriteTooltips()Lib.Promotion.Global=nil end;self.IsInstalled=true end;function Lib.Promotion.Local:OnSaveGameLoaded()end;function Lib.Promotion.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()self.LoadscreenClosed=true elseif aw==Report.KnightTitleChanged then local hF=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=hF or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aw==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Local:RegisterConsumedGoods(aa,hG)CONST_CONSUMED_GOODS_COUNTER[aa]=CONST_CONSUMED_GOODS_COUNTER[aa]or{}CONST_CONSUMED_GOODS_COUNTER[aa][hG]=CONST_CONSUMED_GOODS_COUNTER[aa][hG]or 0;CONST_CONSUMED_GOODS_COUNTER[aa][hG]=CONST_CONSUMED_GOODS_COUNTER[aa][hG]+1 end;function Lib.Promotion.Local:InitTexturePositions()Lib.Promotion.Config:InitTexturePositions()Lib.Promotion.Config:InitTexturePositionsAddon()end;function Lib.Promotion.Local:OverwriteUpdateRequirements()GUI_Knight.UpdateRequirements=function()local hK=Lib.Promotion.Config.RequirementWidgets;local hL=1;local n=GUI.GetPlayerID()local hM=Logic.GetKnightTitle(n)local hN=hM+1;local e1=Logic.GetKnightID(n)local dm=Logic.GetEntityType(e1)XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitle","{center}"..GUI_Knight.GetTitleNameByTitleID(dm,hN))XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitleWhite","{center}"..GUI_Knight.GetTitleNameByTitleID(dm,hN))if KnightTitleRequirements[hN].Settlers~=nil then ChangeIcon(hK[hL].."/Icon",{5,16})local hO,hP,ha=DoesNeededNumberOfSettlersForKnightTitleExist(n,hN)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Settlers"hL=hL+1 end;if KnightTitleRequirements[hN].RichBuildings~=nil then ChangeIcon(hK[hL].."/Icon",{8,4})local hO,hP,ha=DoNeededNumberOfRichBuildingsForKnightTitleExist(n,hN)if ha==-1 then ha=Logic.GetNumberOfPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)end;XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="RichBuildings"hL=hL+1 end;if KnightTitleRequirements[hN].Headquarters~=nil then ChangeIcon(hK[hL].."/Icon",{4,7})local hO,hP,ha=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,hN,EntityCategories.Headquarters)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP+1 .."/"..ha+1)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Headquarters"hL=hL+1 end;if KnightTitleRequirements[hN].Storehouse~=nil then ChangeIcon(hK[hL].."/Icon",{4,6})local hO,hP,ha=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,hN,EntityCategories.Storehouse)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP+1 .."/"..ha+1)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Storehouse"hL=hL+1 end;if KnightTitleRequirements[hN].Cathedrals~=nil then ChangeIcon(hK[hL].."/Icon",{4,5})local hO,hP,ha=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,hN,EntityCategories.Cathedrals)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP+1 .."/"..ha+1)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Cathedrals"hL=hL+1 end;if KnightTitleRequirements[hN].FullDecoratedBuildings~=nil then local hO,hP,ha=DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(n,hN)local h9=KnightTitleRequirements[hN].FullDecoratedBuildings;ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Needs[Needs.Wealth])XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="FullDecoratedBuildings"hL=hL+1 end;if KnightTitleRequirements[hN].Reputation~=nil then ChangeIcon(hK[hL].."/Icon",{5,14})local hO,hP,ha=DoesNeededCityReputationForKnightTitleExist(n,hN)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Reputation"hL=hL+1 end;if KnightTitleRequirements[hN].Goods~=nil then for f=1,#KnightTitleRequirements[hN].Goods do local fy=KnightTitleRequirements[hN].Goods[f][1]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Goods[fy])local hO,hP,ha=DoesNeededNumberOfGoodTypesForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Goods"..f;hL=hL+1 end end;if KnightTitleRequirements[hN].Category~=nil then for f=1,#KnightTitleRequirements[hN].Category do local d5=KnightTitleRequirements[hN].Category[f][1]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.EntityCategories[d5])local hO,hP,ha=DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)local hz={Logic.GetEntityTypesInCategory(d5)}if Logic.IsEntityTypeInCategory(hz[1],EntityCategories.GC_Weapon_Supplier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Weapons"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.SiegeEngine)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="HeavyWeapons"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.Spouse)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Spouse"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.Worker)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Worker"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.Soldier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Soldiers"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.Leader)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Leader"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.Outpost)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Outposts"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.CattlePasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Cattle"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.SheepPasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Sheep"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.CityBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="CityBuilding"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.OuterRimBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="OuterRimBuilding"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.GrainField)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.BeeHive)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(hz[1],EntityCategories.AttackableBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Buildings"..f else CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="EntityCategoryDefault"..f end;hL=hL+1 end end;if KnightTitleRequirements[hN].Entities~=nil then for f=1,#KnightTitleRequirements[hN].Entities do local cP=KnightTitleRequirements[hN].Entities[f][1]local eT=Logic.GetEntityTypeName(cP)ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Entities[cP])local hO,hP,ha=DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)local hQ="Entities"..f;if eT=="B_Beehive"or eT:find("GrainField")or eT:find("Pasture")then hQ="FarmerBuilding"..f end;CONST_REQUIREMENT_TOOLTIP_TYPE[hL]=hQ;hL=hL+1 end end;if KnightTitleRequirements[hN].Consume~=nil then for f=1,#KnightTitleRequirements[hN].Consume do local fy=KnightTitleRequirements[hN].Consume[f][1]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Goods[fy])local hO,hP,ha=DoNeededNumberOfConsumedGoodsForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Consume"..f;hL=hL+1 end end;if KnightTitleRequirements[hN].Products~=nil then for f=1,#KnightTitleRequirements[hN].Products do local hR=KnightTitleRequirements[hN].Products[f][1]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.GoodCategories[hR])local hO,hP,ha=DoNumberOfProductsInCategoryExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Products"..f;hL=hL+1 end end;if KnightTitleRequirements[hN].Buff~=nil then for f=1,#KnightTitleRequirements[hN].Buff do local hS=KnightTitleRequirements[hN].Buff[f]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Buffs[hS])local hO=DoNeededDiversityBuffForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","")if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Buff"..f;hL=hL+1 end end;if KnightTitleRequirements[hN].Custom~=nil then for f=1,#KnightTitleRequirements[hN].Custom do local hT;local hU=table.copy(KnightTitleRequirements[hN].Custom[f][2])if type(hU[3])=="string"then hT=hU[3]hU[3]=0 end;ChangeIcon(hK[hL].."/Icon",hU,nil,hT)local hO,hP,ha=DoCustomFunctionForKnightTitleSucceed(n,hN,f)if hP and ha then XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)else XGUIEng.SetText(hK[hL].."/Amount","")end;if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="Custom"..f;hL=hL+1 end end;if KnightTitleRequirements[hN].DecoratedBuildings~=nil then for f=1,#KnightTitleRequirements[hN].DecoratedBuildings do local fy=KnightTitleRequirements[hN].DecoratedBuildings[f][1]ChangeIcon(hK[hL].."/Icon",g_TexturePositions.Goods[fy])local hO,hP,ha=DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(n,hN,f)XGUIEng.SetText(hK[hL].."/Amount","{center}"..hP.."/"..ha)if hO then XGUIEng.ShowWidget(hK[hL].."/Done",1)else XGUIEng.ShowWidget(hK[hL].."/Done",0)end;XGUIEng.ShowWidget(hK[hL],1)CONST_REQUIREMENT_TOOLTIP_TYPE[hL]="DecoratedBuildings"..f;hL=hL+1 end end;for f=hL,6 do XGUIEng.ShowWidget(hK[f],0)end end end;function Lib.Promotion.Local:OverwriteTooltips()GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(...)local hV=XGUIEng.GetCurrentWidgetID()for g,h in pairs(Lib.Promotion.Config.RequirementWidgets)do if h.."/Icon"==XGUIEng.GetWidgetPathByID(hV)then local a9=CONST_REQUIREMENT_TOOLTIP_TYPE[g]local ct=tonumber(string.sub(a9,string.len(a9)))if ct~=nil then a9=string.sub(a9,1,string.len(a9)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(a9,ct)return end end;GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements(...)end;GUI_Knight.RewardTooltip=function(hW)Lib.Promotion.Local:RewardTooltipWrapped(hW)end;GUI_Knight.RequiredGoodTooltip=function()local a9=CONST_REQUIREMENT_TOOLTIP_TYPE[2]local ct=tonumber(string.sub(a9,string.len(a9)))if ct~=nil then a9=string.sub(a9,1,string.len(a9)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(a9,ct)end;Lib.Promotion.Config:InitAddonText()end;function Lib.Promotion.Local:RewardTooltipWrapped(h8)local hX=GUI_Knight.NextRightsForTitle[h8]local hY=GetNameOfKeyInTable(Technologies,hX)local Name=string.gsub(hY,"R_","")local hZ=""local bR="B_"..Name;if GetStringText("UI_ObjectNames/"..bR)==""then bR="U_"..Name end;if GetStringText("UI_ObjectNames/"..bR)==""then bR="Start"..Name end;if GetStringText("UI_ObjectNames/"..bR)==""then bR="R_"..Name end;hZ=GetStringText("UI_ObjectNames/"..bR)SetTooltipNormal(Localize(hZ),"")end;function Lib.Promotion.Local:RequirementTooltipWrapped(bO,h8)local n=GUI.GetPlayerID()local h_=Logic.GetKnightTitle(n)local i0=""local bS=""if bO=="Consume"or bO=="Goods"or bO=="DecoratedBuildings"then local fy=KnightTitleRequirements[h_+1][bO][h8][1]local i1=Logic.GetGoodTypeName(fy)local i2=GetStringText("UI_ObjectNames/"..i1)if i2==nil then i2="Goods."..i1 end;i0=i2;bS=Lib.Promotion.Config.Description[bO].Text elseif bO=="Products"then local i3=Lib.Promotion.Config.GoodCategoryNames;local d5=KnightTitleRequirements[h_+1][bO][h8][1]local i4=Localize(i3[d5])if i4==nil then i4="ERROR: Name missng!"end;i0=i4;bS=Lib.Promotion.Config.Description[bO].Text elseif bO=="Entities"then local cP=KnightTitleRequirements[h_+1][bO][h8][1]local eT=Logic.GetEntityTypeName(cP)local d6=GetStringText("Names/"..eT)if d6==nil then d6="Entities."..eT end;i0=d6;bS=Lib.Promotion.Config.Description[bO].Text elseif bO=="Custom"then local i5=KnightTitleRequirements[h_+1].Custom[h8]i0=i5[3]bS=i5[4]elseif bO=="Buff"then local i6=Lib.Promotion.Config.BuffTypeNames;local i7=KnightTitleRequirements[h_+1][bO][h8]local i8=Localize(i6[i7])if i8==nil then i8="ERROR: Name missng!"end;i0=i8;bS=Lib.Promotion.Config.Description[bO].Text else i0=Lib.Promotion.Config.Description[bO].Title;bS=Lib.Promotion.Config.Description[bO].Text end;SetTooltipNormal(Localize(i0),Localize(bS),nil)end;InitKnightTitleTables=function()NeedsAndRightsByKnightTitle={}KnightTitleRequirements={}end;function Lib.Promotion.Shared:UpdateInvisibleTechnologies()if not IsLocalScript()then return end;if TechnologiesNotShownForKnightTitle==nil then TechnologiesNotShownForKnightTitle={}TechnologiesNotShownForKnightTitle[Technologies.R_Nutrition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Clothes]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Hygiene]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Entertainment]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Wealth]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Prosperity]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Military]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Column]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Pavilion]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueDario]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueFamily]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueProduction]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueSettler]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Victory]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Barracks]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BarracksArchers]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BowMaker]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SwordSmith]=true end;if g_GameExtraNo>0 and Technologies.R_CallGeologist then TechnologiesNotShownForKnightTitle[Technologies.R_CallGeologist]=true end end;function Lib.Promotion.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])end end end end;RegisterModule(Lib.Promotion.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IO_API")function SetupObject(e2)if GUI then return end;return Lib.IO.Global:CreateObject(e2)end;API.CreateObject=SetupObject;function DisposeObject(bh)if GUI or not CONST_IO[bh]then return end;Lib.IO.Global:DestroyObject(bh)end;API.DisposeObject=DisposeObject;function ResetObject(bh)if GUI or not CONST_IO[bh]then return end;Lib.IO.Global:ResetObject(bh)InteractiveObjectDeactivate(bh)end;API.ResetObject=ResetObject;function InteractiveObjectAddCustomName(bP,bl)local i9=Entities[bP]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectSetQuestName("%s", %s)]],bP,type(bl)=="table"and table.tostring(bl)or"\""..bl.."\"")return end;AddStringText(i9 ..bP,bl)end;API.InteractiveObjectSetQuestName=InteractiveObjectAddCustomName;function InteractiveObjectDeleteCustomName(bP)local i9=Entities[bP]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectDeleteCustomName("%s")]],bP)return end;DeleteStringText(i9 ..bP)end;API.InteractiveObjectUnsetQuestName=InteractiveObjectDeleteCustomName;function AllowActivateIronMines(aa,ia)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(aa,Technologies.R_RefillIronMine,ia and 3 or 1)end;API.AllowActivateIronMines=AllowActivateIronMines;function RequireTitleToRefilIronMines(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillIronMine)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_RefillIronMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillIronMine,0)end end;API.RequireTitleToRefilIronMines=RequireTitleToRefilIronMines;function AllowActivateStoneMines(aa,ia)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(aa,Technologies.R_RefillStoneMine,ia and 3 or 1)end;API.AllowActivateStoneMines=AllowActivateStoneMines;function RequireTitleToRefilStoneMines(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillStoneMine)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_RefillStoneMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillStoneMine,0)end end;API.RequireTitleToRefilStoneMines=RequireTitleToRefilStoneMines;function AllowActivateCisterns(aa,ia)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(aa,Technologies.R_RefillCistern,ia and 3 or 1)end;API.AllowActivateCisterns=AllowActivateCisterns;function RequireTitleToRefilCisterns(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillCistern)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_RefillCistern)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillCisternMine,0)end end;API.RequireTitleToRefilCisterns=RequireTitleToRefilCisterns;function AllowActivateTradepost(aa,ia)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(aa,Technologies.R_Tradepost,ia and 3 or 1)end;API.AllowActivateTradepost=AllowActivateTradepost;function RequireTitleToBuildTradeposts(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Tradepost)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_Tradepost)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Tradepost,0)end end;API.RequireTitleToBuildTradeposts=RequireTitleToBuildTradeposts;InteractiveObjectActivate=function(bh,bi,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[bh]then local ib=CONST_IO[bh].Slave or bh;if CONST_IO[bh].Slave then CONST_IO_SLAVE_STATE[ib]=1;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 1]],ib))end;Lib.IO.Global:SetObjectState(ib,bi,unpack(arg))CONST_IO[bh].IsActive=true;ExecuteLocal([[CONST_IO["%s"].IsActive = true]],bh)else Lib.IO.Global:SetObjectState(bh,bi,unpack(arg))end end end;API.InteractiveObjectActivate=InteractiveObjectActivate;InteractiveObjectDeactivate=function(bh,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[bh]then local ib=CONST_IO[bh].Slave or bh;if CONST_IO[bh].Slave then CONST_IO_SLAVE_STATE[ib]=0;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 0]],ib))end;Lib.IO.Global:SetObjectState(ib,2,unpack(arg))CONST_IO[bh].IsActive=false;ExecuteLocal([[CONST_IO["%s"].IsActive = false]],bh)else Lib.IO.Global:SetObjectState(bh,2,unpack(arg))end end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;Lib.IO=Lib.IO or{}Lib.IO.Name="IO"Lib.IO.Global={SlaveSequence=0}Lib.IO.Local={Data={}}Lib.IO.Shared={TechnologyConfig={{"R_CallGeologist",{de="Geologen rufen",en="Order geologist",fr="Ordre géologue"},{8,1,1},1},{"R_RefillIronMine",{de="Eisenmine auffüllen",en="Refill mine",fr="Recharger le mien"},{8,2,1},1},{"R_RefillStoneMine",{de="Steinbruch auffüllen",en="Refill quarry",fr="Carrière de recharge"},{8,3,1},1},{"R_RefillCistern",{de="Brunnen auffüllen",en="Refill well",fr="Bien remplir"},{8,4,1},1},{"R_Tradepost",{de="Handelsposten bauen",en="Build Tradepost",fr="Route commerciale"},{3,1,1},1}}}CONST_IO={}CONST_IO_SLAVE_TO_MASTER={}CONST_IO_SLAVE_STATE={}CONST_IO_LAST_OBJECT=0;CONST_IO_LAST_HERO=0;Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/faker/Technology")Lib.Require("module/io/IO_API")Lib.Register("module/io/IO")function Lib.IO.Global:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideObjectInteraction()self:StartObjectDestructionController()self:StartObjectConditionController()Lib.IO.Local=nil end;self.IsInstalled=true end;function Lib.IO.Global:OnSaveGameLoaded()end;function Lib.IO.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ObjectInteraction then self:OnObjectInteraction(arg[1],arg[2],arg[3])elseif aw==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end end end;function Lib.IO.Global:OnObjectInteraction(bh,gC,aa)CONST_IO_LAST_OBJECT=GetID(bh)CONST_IO_LAST_HERO=gC;if CONST_IO_SLAVE_TO_MASTER[bh]then bh=CONST_IO_SLAVE_TO_MASTER[bh]end;if CONST_IO[bh]then CONST_IO[bh].IsUsed=true;ExecuteLocal([[
            local ScriptName = "%s"
            if CONST_IO[ScriptName] then
                CONST_IO[ScriptName].IsUsed = true
            end
        ]],bh)if CONST_IO[bh].Replacement then ReplaceEntity(bh,CONST_IO[bh].Replacement)end;if CONST_IO[bh].Action then CONST_IO[bh]:Action(aa,gC)end end end;function Lib.IO.Global:CreateObject(e2)local ae=GetID(e2.Name)if ae==0 then return end;self:DestroyObject(e2.Name)local fD=Logic.GetEntityTypeName(Logic.GetEntityType(ae))if fD and not fD:find("^I_X_")then self:CreateSlaveObject(e2)end;e2.IsActive=true;e2.IsUsed=false;e2.Player=e2.Player or{1,2,3,4,5,6,7,8}e2.State=e2.State or 0;e2.Waittime=e2.Waittime or 5;e2.Distance=e2.Distance or 1000;CONST_IO[e2.Name]=e2;ExecuteLocal([[CONST_IO["%s"] = %s]],e2.Name,table.tostring(CONST_IO[e2.Name]))self:SetupObject(e2)return e2 end;function Lib.IO.Global:DestroyObject(bh)if not CONST_IO[bh]then return end;if CONST_IO[bh].Slave then CONST_IO_SLAVE_TO_MASTER[CONST_IO[bh].Slave]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],CONST_IO[bh].Slave)CONST_IO_SLAVE_STATE[CONST_IO[bh].Slave]=nil;DestroyEntity(CONST_IO[bh].Slave)end;self:SetObjectState(bh,2)SendReport(Report.ObjectDelete,bh)SendReportToLocal(Report.ObjectDelete,bh)ExecuteLocal([[CONST_IO["%s"] = nil]],bh)CONST_IO[bh]=nil end;function Lib.IO.Global:CreateSlaveObject(ic)local Name;for g,h in pairs(CONST_IO_SLAVE_TO_MASTER)do if h==ic.Name and IsExisting(g)then Name=g end end;if Name==nil then self.SlaveSequence=self.SlaveSequence+1;Name="LIB_IO_SlaveObject_"..self.SlaveSequence end;local id=GetID(Name)if not IsExisting(Name)then local A,B,C=Logic.EntityGetPos(GetID(ic.Name))id=Logic.CreateEntity(Entities.I_X_DragonBoatWreckage,A,B,0,0)Logic.SetModel(id,Models.Effects_E_Mosquitos)Logic.SetEntityName(id,Name)CONST_IO_SLAVE_TO_MASTER[Name]=ic.Name;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = "%s"]],Name,ic.Name)ic.Slave=Name end;CONST_IO_SLAVE_STATE[Name]=1;return id end;function Lib.IO.Global:SetupObject(ic)local ae=GetID(ic.Slave and ic.Slave or ic.Name)Logic.InteractiveObjectClearCosts(ae)Logic.InteractiveObjectClearRewards(ae)Logic.InteractiveObjectSetInteractionDistance(ae,ic.Distance)Logic.InteractiveObjectSetTimeToOpen(ae,ic.Waittime)local ie=ic.RewardResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetRewardResourceCartType(ae,ie)local ig=ic.RewardGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetRewardGoldCartType(ae,ig)local ih=ic.CostResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetCostResourceCartType(ae,ih)local ii=ic.CostGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetCostGoldCartType(ae,ii)if ic.Reward then Logic.InteractiveObjectAddRewards(ae,ic.Reward[1],ic.Reward[2])end;if ic.Costs and ic.Costs[1]then Logic.InteractiveObjectAddCosts(ae,ic.Costs[1],ic.Costs[2])end;if ic.Costs and ic.Costs[3]then Logic.InteractiveObjectAddCosts(ae,ic.Costs[3],ic.Costs[4])end;table.insert(HiddenTreasures,ae)InteractiveObjectActivate(Logic.GetEntityName(ae),ic.State or 0)end;function Lib.IO.Global:ResetObject(bh)local ae=GetID(CONST_IO[bh].Slave and CONST_IO[bh].Slave or bh)RemoveInteractiveObjectFromOpenedList(ae)table.insert(HiddenTreasures,ae)Logic.InteractiveObjectSetAvailability(ae,true)self:SetObjectState(ae,CONST_IO[bh].State or 0)CONST_IO[bh].IsUsed=false;CONST_IO[bh].IsActive=true;SendReport(Report.ObjectReset,bh)SendReportToLocal(Report.ObjectReset,bh)end;function Lib.IO.Global:SetObjectState(bh,bi,...)arg=(not arg or#arg==0)and{1,2,3,4,5,6,7,8}or arg;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bh),f,2)end;for f=1,#arg,1 do Logic.InteractiveObjectSetPlayerState(GetID(bh),arg[f],bi)end;Logic.InteractiveObjectSetAvailability(GetID(bh),bi~=2)end;function Lib.IO.Global:OverrideObjectInteraction()GameCallback_OnObjectInteraction=function(ag,aa)OnInteractiveObjectOpened(ag,aa)OnTreasureFound(ag,aa)local aF=Logic.GetEntityName(ag)if CONST_IO_SLAVE_TO_MASTER[aF]then aF=CONST_IO_SLAVE_TO_MASTER[aF]end;local gE={}Logic.GetKnights(aa,gE)local e1=GetClosestToTarget(ag,gE)SendReport(Report.ObjectInteraction,aF,e1,aa)SendReportToLocal(Report.ObjectInteraction,aF,e1,aa)end;QuestTemplate.AreObjectsActivated=function(self,ij)for f=1,ij[0]do if not ij[-f]then ij[-f]=GetID(ij[f])end;local d6=Logic.GetEntityName(ij[-f])if CONST_IO_SLAVE_TO_MASTER[d6]then d6=CONST_IO_SLAVE_TO_MASTER[d6]end;if CONST_IO[d6]then if CONST_IO[d6].IsUsed~=true then return false end elseif Logic.IsInteractiveObject(ij[-f])then if not IsInteractiveObjectOpen(ij[-f])then return false end end end;return true end end;function Lib.IO.Global:ProcessChatInput(bl)local dJ=Lib.Core.Debug:CommandTokenizer(bl)for f=1,#dJ,1 do if dJ[f][1]=="enableobject"then local State=dJ[f][3]and tonumber(dJ[f][3])or nil;local n=dJ[f][4]and tonumber(dJ[f][4])or nil;error(IsExisting(dJ[f][2]),"object "..dJ[f][2].." does not exist!")InteractiveObjectActivate(dJ[f][2],State,n)log("activated object "..dJ[f][2]..".")elseif dJ[f][1]=="disableobject"then local n=dJ[f][3]and tonumber(dJ[f][3])or nil;error(IsExisting(dJ[f][2]),"object "..dJ[f][2].." does not exist!")InteractiveObjectDeactivate(dJ[f][2],n)log("deactivated object "..dJ[f][2]..".")elseif dJ[f][1]=="initobject"then error(IsExisting(dJ[f][2]),"object "..dJ[f][2].." does not exist!")API.SetupObject({Name=dJ[f][2],Waittime=0,State=0})log("quick initalization of object "..dJ[f][2]..".")end end end;function Lib.IO.Global:StartObjectDestructionController()RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local ik=Event.GetEntityID()local ib=Logic.GetEntityName(ik)local il=CONST_IO_SLAVE_TO_MASTER[ib]if ib and il then local im=CONST_IO[il]if not im then return end;log("slave "..ib.." of master "..il.." has been deleted!")log("try to create new slave...")CONST_IO_SLAVE_TO_MASTER[ib]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],ib)local id=Lib.IO.Global:CreateSlaveObject(im)error(IsExisting(id),"failed to create slave!")Lib.IO.Global:SetupObject(im)if im.IsUsed==true or CONST_IO_SLAVE_STATE[ib]and CONST_IO_SLAVE_STATE[ib]==0 then InteractiveObjectDeactivate(im.Slave)end;log("new slave created for master "..il..".")end end)end;function Lib.IO.Global:StartObjectConditionController()RequestHiResJob(function()for g,h in pairs(CONST_IO)do if h and not h.IsUsed and h.IsActive then CONST_IO[g].IsFullfilled=true;if CONST_IO[g].Condition then local io=h:Condition()CONST_IO[g].IsFullfilled=io end;ExecuteLocal([[
                    local ScriptName = "%s"
                    if CONST_IO[ScriptName] then
                        CONST_IO[ScriptName].IsFullfilled = %s
                    end
                ]],g,tostring(CONST_IO[g].IsFullfilled))end end end)end;function Lib.IO.Local:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideGameFunctions()Lib.IO.Global=nil end;self.IsInstalled=true end;function Lib.IO.Local:OnSaveGameLoaded()end;function Lib.IO.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ObjectReset then if CONST_IO[arg[1]]then CONST_IO[arg[1]].IsUsed=false end elseif aw==Report.ObjectInteraction then CONST_IO_LAST_OBJECT=GetID(arg[1])CONST_IO_LAST_HERO=arg[2]end end;function Lib.IO.Local:OverrideGameFunctions()g_CurrentDisplayedQuestID=0;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO=GUI_Interaction.InteractiveObjectClicked;GUI_Interaction.InteractiveObjectClicked=function()local f=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local s=g_Interaction.ActiveObjectsOnScreen[f]local n=GUI.GetPlayerID()if not s then return end;local aF=Logic.GetEntityName(s)if CONST_IO_SLAVE_TO_MASTER[aF]then aF=CONST_IO_SLAVE_TO_MASTER[aF]end;if CONST_IO[aF]then if not CONST_IO[aF].IsFullfilled then local bS=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")if CONST_IO[aF].ConditionInfo then bS=ConvertPlaceholders(Localize(CONST_IO[aF].ConditionInfo))end;Message(bS)return end;if type(CONST_IO[aF].Costs)=="table"and#CONST_IO[aF].Costs~=0 then local cO=Logic.GetStoreHouse(n)local aj=Logic.GetHeadquarters(n)if cO==nil or cO==0 or aj==nil or aj==0 then GUI.AddNote("DEBUG: Player needs special buildings when using activation costs!")return end end end;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO()if not Framework.IsNetworkGame()then local gE={}Logic.GetKnights(n,gE)local e1=GetClosestToTarget(s,gE)SendReportToGlobal(Report.ObjectClicked,aF,e1,n)SendReport(Report.ObjectClicked,aF,e1,n)end end;GUI_Interaction.InteractiveObjectUpdate=function()if g_Interaction.ActiveObjects==nil then return end;local n=GUI.GetPlayerID()for f=1,#g_Interaction.ActiveObjects do local cV=g_Interaction.ActiveObjects[f]local ip=cV;local aF=Logic.GetEntityName(cV)if CONST_IO_SLAVE_TO_MASTER[aF]then ip=GetID(CONST_IO_SLAVE_TO_MASTER[aF])end;local fK,fL=GUI.GetEntityInfoScreenPosition(ip)local iq,ir=GUI.GetScreenSize()if fK~=0 and fL~=0 and fK>-50 and fL>-50 and fK<iq+50 and fL<ir+50 then if not table.contains(g_Interaction.ActiveObjectsOnScreen,cV)then table.insert(g_Interaction.ActiveObjectsOnScreen,cV)end else for f=1,#g_Interaction.ActiveObjectsOnScreen do if g_Interaction.ActiveObjectsOnScreen[f]==cV then table.remove(g_Interaction.ActiveObjectsOnScreen,f)end end end end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local is="/InGame/Root/Normal/InteractiveObjects/"..f;if XGUIEng.IsWidgetExisting(is)==1 then local cV=g_Interaction.ActiveObjectsOnScreen[f]local ip=cV;local aF=Logic.GetEntityName(cV)if CONST_IO_SLAVE_TO_MASTER[aF]then ip=GetID(CONST_IO_SLAVE_TO_MASTER[aF])aF=Logic.GetEntityName(ip)end;local cP=Logic.GetEntityType(cV)local eT=Logic.GetEntityTypeName(cP)local fK,fL=GUI.GetEntityInfoScreenPosition(ip)local it={XGUIEng.GetWidgetScreenSize(is)}XGUIEng.SetWidgetScreenPosition(is,fK-it[1]/2,fL-it[2]/2)local iu={Logic.InteractiveObjectGetCosts(cV)}local iv={Logic.InteractiveObjectGetEffectiveCosts(cV,n)}local iw=Logic.InteractiveObjectGetAvailability(cV)local ix=Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(cV,n)local iy=false;if iu[1]~=nil and iv[1]==nil and iw==true then iy=true end;if ix==false then iy=true end;if Logic.GetTime()>1 and g_GameExtraNo>0 then if iy==false and string.find(eT,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iy=true end end;if iy==false and string.find(eT,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iy=true end end;if iy==false and(string.find(eT,"B_Cistern")or string.find(eT,"B_Well"))then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iy=true end end;if iy==false and string.find(eT,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then iy=true end end end;if iy==false then if CONST_IO[aF]and type(CONST_IO[aF].Player)=="table"then iy=not self:IsAvailableForGuiPlayer(aF)elseif CONST_IO[aF]and type(CONST_IO[aF].Player)=="number"then iy=CONST_IO[aF].Player~=n end end;if iy==true then XGUIEng.DisableButton(is,1)else XGUIEng.DisableButton(is,0)end;if GUI_Interaction.InteractiveObjectUpdateEx1~=nil then GUI_Interaction.InteractiveObjectUpdateEx1(is,cP)end;XGUIEng.ShowWidget(is,1)end end;for f=#g_Interaction.ActiveObjectsOnScreen+1,2 do local is="/InGame/Root/Normal/InteractiveObjects/"..f;XGUIEng.ShowWidget(is,0)end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local is="/InGame/Root/Normal/InteractiveObjects/"..f;local cV=g_Interaction.ActiveObjectsOnScreen[f]local aF=Logic.GetEntityName(cV)if CONST_IO_SLAVE_TO_MASTER[aF]then aF=CONST_IO_SLAVE_TO_MASTER[aF]end;if CONST_IO[aF]and CONST_IO[aF].Texture then local hT;local a5=CONST_IO[aF].Texture[1]or 14;local cs=CONST_IO[aF].Texture[2]or 10;local ck=CONST_IO[aF].Texture[3]or 0;if type(ck)=="string"then hT=ck;ck=0 end;ChangeIcon(is,{a5,cs,ck},nil,hT)end end end;GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO=GUI_Interaction.InteractiveObjectMouseOver;GUI_Interaction.InteractiveObjectMouseOver=function()local n=GUI.GetPlayerID()local ft=XGUIEng.GetCurrentWidgetID()local cU=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local cV=g_Interaction.ActiveObjectsOnScreen[cU]local cP=Logic.GetEntityType(cV)local eT=Logic.GetEntityTypeName(cP)if tonumber(Logic.GetEntityName(cV))~=nil and string.find(eT,"^I_X_")then GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO()return end;local iz=false;local iA=false;if g_GameExtraNo>0 then iz=string.find(eT,"^R_Stone")~=nil or string.find(eT,"^R_Iron")~=nil or string.find(eT,"^B_Cistern")~=nil or string.find(eT,"^B_Well")~=nil;iA=string.find(eT,"^I_X_Trade")~=nil end;local iB;local bR="InteractiveObjectAvailable"if Logic.InteractiveObjectGetAvailability(cV)==false then bR="InteractiveObjectNotAvailable"elseif Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(cV,n)==false then iB="InteractiveObjectAvailableReward"elseif XGUIEng.IsButtonDisabled(ft)==1 then iB="UpgradeOutpost"if g_GameExtraNo>0 then if string.find(eT,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iB=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillStoneMine)or iB end end;if string.find(eT,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iB=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillIronMine)or iB end end;if string.find(eT,"B_Cistern")or string.find(eT,"B_Well")then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then iB=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillCistern)or iB end end;if string.find(eT,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then iB=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_Tradepost)or iB end end end end;local i0="UI_ObjectNames/"..bR;local bS="UI_ObjectDescription/"..bR;local iC=iB~=nil and"UI_ButtonDisabled/"..iB or nil;if iz then i0="UI_ObjectNames/InteractiveObjectGeologist"end;if iA then i0="UI_ObjectNames/InteractiveObjectTradepost"end;local iD=false;local cW={Logic.InteractiveObjectGetEffectiveCosts(cV,n)}if cW and cW[1]and cW[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(cW[1])~=GoodCategories.GC_Resource then iD=true end;local aF=Logic.GetEntityName(cV)if CONST_IO_SLAVE_TO_MASTER[aF]then aF=CONST_IO_SLAVE_TO_MASTER[aF]end;if CONST_IO[aF]and CONST_IO[aF].IsUsed~=true then bR="InteractiveObjectAvailable"if CONST_IO[aF]and type(CONST_IO[aF].Player)=="table"and not self:IsAvailableForGuiPlayer(aF)or CONST_IO[aF]and type(CONST_IO[aF].Player)=="number"and CONST_IO[aF].Player~=n or Logic.InteractiveObjectGetAvailability(cV)==false then bR="InteractiveObjectNotAvailable"end;i0=ConvertPlaceholders(Localize(CONST_IO[aF].Title or i0))if i0 and i0:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then i0=XGUIEng.GetStringTableText(i0)end;bS=ConvertPlaceholders(Localize(CONST_IO[aF].Text or bS))if bS and bS:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bS=XGUIEng.GetStringTableText(bS)end;iC=CONST_IO[aF].DisabledText or iC;if iC then iC=ConvertPlaceholders(Localize(iC))if iC and iC:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then iC=XGUIEng.GetStringTableText(iC)end end;cW=CONST_IO[aF].Costs;if cW and cW[1]and cW[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(cW[1])~=GoodCategories.GC_Resource then iD=true end end;SetTooltipCosts(i0,bS,iC,cW,iD)end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(aY,aZ)local gH=tonumber(aY)if gH then aY=gH end;local a_,b0=GUI_Interaction.GetPotentialSubQuestAndType(aY)local gI="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gJ;local gK;g_CurrentDisplayedQuestID=aY;if b0==Objective.Object then gJ=gI.."/List"gK=Wrapped_GetStringTableText(aY,"UI_Texts/QuestInteraction")local gL={}for f=1,a_.Objectives[1].Data[0]do local iE;if Logic.IsEntityDestroyed(a_.Objectives[1].Data[f])then iE=g_Interaction.SavedQuestEntityTypes[aY][f]else iE=Logic.GetEntityType(GetID(a_.Objectives[1].Data[f]))end;local iF=Logic.GetEntityName(a_.Objectives[1].Data[f])local iG=""if iE~=nil and iE~=0 then local iH=Logic.GetEntityTypeName(iE)iG=Wrapped_GetStringTableText(aY,"Names/"..iH)or GetStringText("Names/"..iH)if iG==""then iG=Wrapped_GetStringTableText(aY,"UI_ObjectNames/"..iH)or GetStringText("UI_ObjectNames/"..iH)end;if iG==nil then iG="Debug: ObjectName missing for "..iH end end;table.insert(gL,Localize(ConvertPlaceholders(iG)))end;for f=1,4 do local a8=gL[f]if a8==nil then a8=""end;XGUIEng.SetText(gJ.."/Entry"..f,"{center}"..a8)end;SetIcon(gJ.."/QuestTypeIcon",{14,10})XGUIEng.SetText(gJ.."/Caption","{center}"..gK)XGUIEng.ShowWidget(gJ,1)else GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO(aY,aZ)end end end;function Lib.IO.Local:IsAvailableForGuiPlayer(bh)local n=GUI.GetPlayerID()if CONST_IO[bh]and type(CONST_IO[bh].Player)=="table"then for f=1,8 do if CONST_IO[bh].Player[f]and CONST_IO[bh].Player[f]==n then return true end end;return false end;return true end;function Lib.IO.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for bu=1,8 do Logic.TechnologySetState(bu,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.IO.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOChest_API")function CreateRandomChest(y,hG,iI,iJ,dP,fq)if IsLocalScript()then return end;if not fq then fq=dP;dP=nil end;assert(IsExisting(y),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,hG)~=nil,"Good type is invalid!")assert(type(iI)=="number"and iI>=1,"Minimum is to low!")iJ=iJ or iI;assert(type(iJ)=="number"or iJ>=1,"Maximum is to low!")assert(iJ>=iI,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(y,hG,iI,iJ,false,false,dP,fq)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomChest(y,hG,iI,iJ,dP,fq)if IsLocalScript()then return end;if not fq then fq=dP;dP=nil end;assert(IsExisting(y),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,hG)~=nil,"Good type is invalid!")assert(type(iI)=="number"and iI>=1,"Minimum is to low!")iJ=iJ or iI;assert(type(iJ)=="number"or iJ>=1,"Maximum is to low!")assert(iJ>=iI,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(y,hG,iI,iJ,false,true,dP,fq)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomGoldChest(y)if IsLocalScript()then return end;assert(IsExisting(y),"Entity does not exist!")Lib.IOChest.Global:CreateRandomGoldChest(y)end;API.CreateRandomGoldChest=CreateRandomGoldChest;function CreateRandomResourceChest(y)if IsLocalScript()then return end;assert(IsExisting(y),"Entity does not exist!")Lib.IOChest.Global:CreateRandomResourceChest(y)end;API.CreateRandomResourceChest=CreateRandomResourceChest;function CreateRandomLuxuryChest(y)if IsLocalScript()then return end;assert(IsExisting(y),"Entity does not exist!")Lib.IOChest.Global:CreateRandomLuxuryChest(y)end;API.CreateRandomLuxuryChest=CreateRandomLuxuryChest;Lib.IOChest=Lib.IOChest or{}Lib.IOChest.Name="IOChest"Lib.IOChest.Global={}Lib.IOChest.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOChest_API")Lib.Register("module/io/IOChest")function Lib.IOChest.Global:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Lib.IOChest.Local=nil end;self.IsInstalled=true end;function Lib.IOChest.Global:OnSaveGameLoaded()end;function Lib.IOChest.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif aw==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then self:ResetIOChest(arg[1])end elseif aw==Report.ObjectDelete then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then end end end;function Lib.IOChest.Global:ProcessChatInput(bl)local dJ=Lib.Core.Debug:CommandTokenizer(bl)for f=1,#dJ,1 do if dJ[f][1]=="spawncow"then if not IsExisting(dJ[f][2])then CreateRandomGoldChest(dJ[f][2])end elseif dJ[f][1]=="spawnsheep"then if not IsExisting(dJ[f][2])then CreateRandomResourceChest(dJ[f][2])end elseif dJ[f][1]=="luxurychest"then if not IsExisting(dJ[f][2])then CreateRandomLuxuryChest(dJ[f][2])end end end end;function Lib.IOChest.Global:CreateRandomChest(y,hG,iI,iJ,iK,iL,dP,fq)iI=math.floor(iI~=nil and iI>0 and iI or 1)iJ=math.floor(iJ~=nil and iJ>1 and iJ or 2)assert(hG~=nil,"CreateRandomChest: Good does not exist!")assert(iI<=iJ,"CreateRandomChest: min amount must be smaller or equal than max amount!")log("Creating chest (%s, %s, %d, %d, %s, %s)",y,Logic.GetGoodTypeName(hG),iI,iJ,tostring(iK==true),tostring(iL==true))if not iL then local aW=ReplaceEntity(y,Entities.XD_ScriptEntity,0)Logic.SetModel(aW,Models.Doodads_D_X_ChestClose)Logic.SetVisible(aW,true)end;local hf=iI;if iI<iJ then hf=math.random(iI,iJ)end;local iM;local iN;if not iK then iN={hG,hf}else iM={hG,hf}end;SetupObject{Name=y,IsInteractiveChest=true,Reward=iN,DirectReward=iM,Texture={1,6},Distance=iL and 1200 or 650,Waittime=0,State=0,DoNotChangeModel=iL==true,ActivationCondition=dP,ActivationAction=fq,Condition=function(f2)if f2.ActivationCondition then return f2.ActivationCondition(f2)end;return true end,Action=function(f2,gC,aa)if not f2.DoNotChangeModel then Logic.SetModel(GetID(f2.Name),Models.Doodads_D_X_ChestOpenEmpty)end;if f2.DirectReward then AddGood(f2.DirectReward[1],f2.DirectReward[2],aa)end;if f2.ActivationAction then f2.ActivationAction(f2,gC,aa)end;SendReport(Report.InteractiveTreasureActivated,f2.Name,gC,aa)SendReportToLocal(Report.InteractiveTreasureActivated,f2.Name,gC,aa)end}end;function Lib.IOChest.Global:ResetIOChest(bh)if not CONST_IO[bh].DoNotChangeModel then local s=ReplaceEntity(bh,Entities.XD_ScriptEntity,0)Logic.SetModel(s,Models.Doodads_D_X_ChestClose)Logic.SetVisible(s,true)end end;function Lib.IOChest.Global:CreateRandomGoldChest(y)self:CreateRandomChest(y,Goods.G_Gold,300,600,false)end;function Lib.IOChest.Global:CreateRandomResourceChest(y)local iO={Goods.G_Iron,Goods.G_Stone,Goods.G_Wood,Goods.G_Wool,Goods.G_Carcass,Goods.G_Herb,Goods.G_Honeycomb,Goods.G_Milk,Goods.G_RawFish,Goods.G_Grain}local iP=iO[math.random(1,#iO)]self:CreateRandomChest(y,iP,30,60,false)end;function Lib.IOChest.Global:CreateRandomLuxuryChest(y)local iQ={Goods.G_Salt,Goods.G_Dye}if g_GameExtraNo>=1 then table.insert(iQ,Goods.G_Gems)table.insert(iQ,Goods.G_MusicalInstrument)table.insert(iQ,Goods.G_Olibanum)end;local iP=iQ[math.random(1,#iQ)]self:CreateRandomChest(y,iP,50,100,false)end;function Lib.IOChest.Local:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")self:CreateDefaultObjectNames()Lib.IOChest.Global=nil end;self.IsInstalled=true end;function Lib.IOChest.Local:OnSaveGameLoaded()end;function Lib.IOChest.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.IOChest.Local:CreateDefaultObjectNames()AddStringText("UI_ObjectNames/D_X_ChestClosed",{de="Verschlossene Schatztruhe",en="Closed Treasure Chest",fr="Coffre au trésor fermé"})AddStringText("UI_ObjectNames/D_X_ChestOpenEmpty",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen01",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen02",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen03",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen04",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})end;RegisterModule(Lib.IOChest.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOMine_API")function CreateIOIronMine(f2)local cW={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(f2)Lib.IOMine.Global:CreateIOMine(f2.Scriptname,Entities.R_IronMine,f2.Title,f2.Text,f2.Costs or cW,f2.ResourceAmount,f2.RefillAmount,f2.ConstructionCondition,f2.ConditionInfo,f2.ConstructionAction)end;API.CreateIOIronMine=CreateIOIronMine;function CreateIOStoneMine(f2)local cW={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(f2)Lib.IOMine.Global:CreateIOMine(f2.Scriptname,Entities.R_StoneMine,f2.Title,f2.Text,f2.Costs or cW,f2.ResourceAmount,f2.RefillAmount,f2.ConstructionCondition,f2.ConditionInfo,f2.ConstructionAction)end;API.CreateIOStoneMine=CreateIOStoneMine;function CheckIOMineParameter(f2)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(f2.Scriptname),"API.CreateIOIronMine: Scriptname '%s' does not exist!",tostring(f2.Scriptname))local cW={Goods.G_Gold,500,Goods.G_Wood,20}if f2.Costs then if f2.Costs[1]then error(GetNameOfKeyInTable(Goods,f2.Costs[1]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(f2.Costs[1]))error(f2.Costs[2]and(type(f2.Costs[2])=="number"or f2.Costs[2]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end;if f2.Costs[3]then error(GetNameOfKeyInTable(Goods,f2.Costs[3]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(f2.Costs[3]))error(f2.Costs[4]and(type(f2.Costs[4])=="number"or f2.Costs[4]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end end end;Lib.IOMine=Lib.IOMine or{}Lib.IOMine.Name="IOMine"Lib.IOMine.Global={Mines={}}Lib.IOMine.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOMine_API")Lib.Register("module/io/IOMine")function Lib.IOMine.Global:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Local=nil end;self.IsInstalled=true end;function Lib.IOMine.Global:OnSaveGameLoaded()end;function Lib.IOMine.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveMine then self:ResetIOMine(arg[1],CONST_IO[arg[1]].Type)end elseif aw==Report.ObjectDelete then if CONST_IO[arg[1]].IsInteractiveMine and CONST_IO[arg[1]].Type then ReplaceEntity(arg[1],CONST_IO[arg[1]].Type)end end end;function Lib.IOMine.Global:CreateIOMine(a1,i,dY,bl,d_,iR,bn,dP,iS,fq)local iT=self:ResetIOMine(a1,i)local hU={14,10}local iU;if i==Entities.R_IronMine then iU="Names/R_IronMine"hU={14,10}end;if i==Entities.R_StoneMine then iU="Names/R_StoneMine"hU={14,10}end;SetupObject{Name=a1,IsInteractiveMine=true,Title=dY or iU,Text=bl,Texture=hU,Type=i,ResourceAmount=iR or 250,RefillAmount=bn or 75,Costs=d_,InvisibleBlocker=iT,Distance=1200,Waittime=0,ConditionInfo=iS,AdditionalCondition=dP,AdditionalAction=fq,Condition=function(f2)if f2.AdditionalCondition then return f2:AdditionalCondition(f2)end;return true end,Action=function(f2,gC,aa)local ae=ReplaceEntity(f2.Name,f2.Type)SetResourceAmount(ae,f2.ResourceAmount,f2.RefillAmount)DestroyEntity(f2.InvisibleBlocker)SendReport(Report.InteractiveMineErected,f2.Name,gC,aa)SendReportToLocal(Report.InteractiveMineErected,f2.Name,gC,aa)if f2.AdditionalAction then f2.AdditionalAction(f2,gC,aa)end end}end;function Lib.IOMine.Global:ResetIOMine(bh,i)if CONST_IO[bh]then DestroyEntity(CONST_IO[bh].InvisibleBlocker)end;local s=ReplaceEntity(bh,Entities.XD_ScriptEntity)local iV=Models.Doodads_D_SE_ResourceIron_Wrecked;if i==Entities.R_StoneMine then iV=Models.R_SE_ResorceStone_10 end;Logic.SetVisible(s,true)Logic.SetModel(s,iV)local A,B,C=Logic.EntityGetPos(s)local iT=Logic.CreateEntity(Entities.D_ME_Rock_Set01_B_07,A,B,0,0)Logic.SetVisible(iT,false)if CONST_IO[bh]then CONST_IO[bh].InvisibleBlocker=iT end;return iT end;function Lib.IOMine.Local:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Global=nil end;self.IsInstalled=true end;function Lib.IOMine.Local:OnSaveGameLoaded()end;function Lib.IOMine.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOMine.Name)Lib.Register("module/quest/Quest_API")function SetupQuest(f2)if GUI then return end;error(not f2.Name or not Quests[GetQuestID(f2.Name)],"SetupQuest: A quest named '%s' already exists!",tostring(f2.Name))return Lib.Quest.Global:CreateSimpleQuest(f2)end;API.CreateQuest=SetupQuest;function SetupNestedQuest(f2)if GUI or type(f2)~="table"then return end;error(f2.Segments~=nil and#f2.Segments~=0,"SetupNestedQuest: Segmented quest '%s' is missing it's segments!",tostring(f2.Name))return Lib.Quest.Global:CreateNestedQuest(f2)end;API.CreateNestedQuest=SetupNestedQuest;function AddDisableTriggerCondition(aM)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTriggerConditions,aM)end;API.AddDisableTriggerCondition=AddDisableTriggerCondition;function AddDisableTimerCondition(aM)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTimerConditions,aM)end;API.AddDisableTimerCondition=AddDisableTimerCondition;function AddDisableDecisionCondition(aM)if GUI then return end;table.insert(Lib.Quest.Global.ExternalDecisionConditions,aM)end;API.AddDisableDecisionCondition=AddDisableDecisionCondition;Lib.Quest=Lib.Quest or{}Lib.Quest.Name="Quest"Lib.Quest.Global={ExternalTriggerConditions={},ExternalTimerConditions={},ExternalDecisionConditions={},SegmentsOfQuest={}}Lib.Quest.Local={}SegmentResult={Success=1,Failure=2,Ignore=3}Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/IsValidQuestName")Lib.Require("core/core")Lib.Require("module/quest/Quest_API")Lib.Register("module/quest/Quest")function Lib.Quest.Global:Initialize()if not self.IsInstalled then Quest_Loop=self.QuestLoop;self:OverrideKernelQuestApi()Lib.Quest.Local=nil end;self.IsInstalled=true end;function Lib.Quest.Global:OnSaveGameLoaded()end;function Lib.Quest.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ChatClosed then end end;function Lib.Quest.Global:CreateNestedQuest(f2)if not f2.Segments then return end;table.insert(f2,Goal_MapScriptFunction(self:GetCheckQuestSegmentsInlineGoal(),f2.Name))local Name=self:CreateSimpleQuest(f2)if Name~=nil then Quests[GetQuestID(Name)].Visible=false;self.SegmentsOfQuest[Name]={}for f=1,#f2.Segments,1 do self:CreateSegmentForSegmentedQuest(f2.Segments[f],Name,f)end end;return Name end;function Lib.Quest.Global:CreateSegmentForSegmentedQuest(f2,iW,ce)local Name=f2.Name or iW.."@Segment"..ce;local iX=Quests[GetQuestID(iW)]local iY={Name=Name,Segments=f2.Segments,Result=f2.Result or SegmentResult.Success,Sender=f2.Sender or iX.SendingPlayer,Receiver=f2.Receiver or iX.ReceivingPlayer,Time=f2.Time,Suggestion=f2.Suggestion,Success=f2.Success,Failure=f2.Failure,Description=f2.Description,Loop=f2.Loop,Callback=f2.Callback}for f=1,#f2 do table.insert(iY,f2[f])end;table.insert(iY,Trigger_OnQuestActive(iW,0))if iY.Segments then self:CreateNestedQuest(iY)else self:CreateSimpleQuest(iY)end;table.insert(self.SegmentsOfQuest[iW],iY)end;function Lib.Quest.Global:GetCheckQuestSegmentsInlineGoal()return function(bo)local iZ=true;local i_=Lib.Quest.Global.SegmentsOfQuest[bo]for f=1,#i_,1 do local j0=Quests[GetQuestID(i_[f].Name)]if not j0 then return false end;if j0.State==QuestState.Over and j0.Result~=QuestResult.Interrupted then if i_[f].Result==SegmentResult.Success and j0.Result~=QuestResult.Success then Lib.Quest.Global:AbortAllQuestSegments(bo)return false end;if i_[f].Result==SegmentResult.Failure and j0.Result~=QuestResult.Failure then Lib.Quest.Global:AbortAllQuestSegments(bo)return false end end;if j0.State~=QuestState.Over then iZ=false end end;if iZ then return true end end end;function Lib.Quest.Global:AbortAllQuestSegments(bo)for f=1,#self.SegmentsOfQuest[bo],1 do local j1=self.SegmentsOfQuest[bo][f].Name;if IsValidQuest(bo)and Quests[GetQuestID(j1)].State~=QuestState.Over then StopQuest(j1,true)end end end;function Lib.Quest.Global:CreateSimpleQuest(f2)if not f2.Name then AutomaticQuestNameCounter=(AutomaticQuestNameCounter or 0)+1;f2.Name=string.format("AutoNamed_Quest_%d",AutomaticQuestNameCounter)end;error(IsValidQuestName(f2.Name),"Quest '%s': invalid questname! Contains forbidden characters!",tostring(f2.Name))local j2={f2.Name,f2.Sender~=nil and f2.Sender or 1,f2.Receiver~=nil and f2.Receiver or 1,{},{},f2.Time~=nil and f2.Time or 0,{},{},f2.Callback,f2.Loop,f2.Visible==true or f2.Suggestion~=nil,f2.EndMessage==true or(f2.Failure~=nil or f2.Success~=nil),ConvertPlaceholders(type(f2.Description)=="table"and Localize(f2.Description)or f2.Description),ConvertPlaceholders(type(f2.Suggestion)=="table"and Localize(f2.Suggestion)or f2.Suggestion),ConvertPlaceholders(type(f2.Success)=="table"and Localize(f2.Success)or f2.Success),ConvertPlaceholders(type(f2.Failure)=="table"and Localize(f2.Failure)or f2.Failure)}if not self:QuestValidateQuestData(j2)then DumpTable(j2,"Quest")error(false,"ModuleQuest: Failed to vaidate quest data. Table has been copied to log.")end;for g,h in pairs(f2)do if tonumber(g)~=nil then if type(h)=="table"then if h.GetGoalTable then table.insert(j2[4],h:GetGoalTable())local j3=#j2[4]j2[4][j3].Context=h;j2[4][j3].FuncOverrideIcon=j2[4][j3].Context.GetIcon;j2[4][j3].FuncOverrideMsgKey=j2[4][j3].Context.GetMsgKey elseif h.GetReprisalTable then table.insert(j2[8],h:GetReprisalTable())elseif h.GetRewardTable then table.insert(j2[7],h:GetRewardTable())else table.insert(j2[5],h:GetTriggerTable())end end end end;if#j2[4]==0 then table.insert(j2[4],{Objective.Dummy})end;if#j2[5]==0 then table.insert(j2[5],{Triggers.Time,0})end;if j2[11]then table.insert(j2[5],self:GetFreeSpaceInlineTrigger())end;local bj,a_=QuestTemplate:New(unpack(j2,1,16))a_.MsgTableOverride=f2.MSGKeyOverwrite;a_.IconOverride=f2.IconOverwrite;a_.QuestInfo=f2.InfoText;a_.Arguments=f2.Arguments~=nil and table.copy(f2.Arguments)or{}return f2.Name,Quests[0]end;function Lib.Quest.Global:QuestValidateQuestData(f2)return type(f2[1])=="string"and IsValidQuestName(f2[1])and Quests[GetQuestID(f2[1])]==nil and(type(f2[2])=="number"and f2[2]>=1 and f2[2]<=8)and(type(f2[3])=="number"and f2[3]>=1 and f2[3]<=8)and(type(f2[6])=="number"and f2[6]>=0)and(f2[9]~=nil and type(f2[9])=="function"or f2[9]==nil)and(f2[10]~=nil and type(f2[10])=="function"or f2[10]==nil)and type(f2[11])=="boolean"and type(f2[12])=="boolean"and(f2[13]~=nil and type(f2[13])=="string"or f2[13]==nil)and(f2[14]~=nil and type(f2[14])=="string"or f2[14]==nil)and(f2[15]~=nil and type(f2[15])=="string"or f2[15]==nil)and(f2[16]~=nil and type(f2[16])=="string"or f2[16]==nil)end;function Lib.Quest.Global:GetFreeSpaceInlineTrigger()return{Triggers.Custom2,{{},function(f2,b1)local j4=0;if Quests[0]>0 then for f=1,Quests[0],1 do if Quests[f].State==QuestState.Active and Quests[f].Visible==true then j4=j4+1 end end end;return j4<6 end}}end;function Lib.Quest.Global:OverrideKernelQuestApi()FailQuest_Orig_ModuleQuest=FailQuest;FailQuest=function(bo,bp)if Lib.Quest.Global.SegmentsOfQuest[bo]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bo])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then FailQuest_Orig_ModuleQuest(h.Name,true)end end end;FailQuest_Orig_ModuleQuest(bo,bp)end;RestartQuest_Orig_ModuleQuest=RestartQuest;RestartQuest=function(bo,bp)if Lib.Quest.Global.SegmentsOfQuest[bo]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bo])do if IsValidQuest(h.Name)then StopQuest_Orig_ModuleQuest(h.Name,true)RestartQuest_Orig_ModuleQuest(h.Name,true)end end end;RestartQuest_Orig_ModuleQuest(bo,bp)end;StartQuest_Orig_ModuleQuest=StartQuest;StartQuest=function(bo,bp)if Lib.Quest.Global.SegmentsOfQuest[bo]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bo])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StartQuest_Orig_ModuleQuest(h.Name,true)end end end;StartQuest_Orig_ModuleQuest(bo,bp)end;StopQuest_Orig_ModuleQuest=StopQuest;StopQuest=function(bo,bp)if Lib.Quest.Global.SegmentsOfQuest[bo]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bo])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;StopQuest_Orig_ModuleQuest(bo,bp)end;WinQuest_Orig_ModuleQuest=WinQuest;WinQuest=function(bo,bp)if Lib.Quest.Global.SegmentsOfQuest[bo]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bo])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;WinQuest_Orig_ModuleQuest(bo,bp)end end;function Lib.Quest.Global.QuestLoop(j5)local self=JobQueue_GetParameter(j5)if self.LoopCallback~=nil then self:LoopCallback()end;if self.State==QuestState.NotTriggered then local j6=true;for f=1,#Lib.Quest.Global.ExternalTriggerConditions,1 do if not Lib.Quest.Global.ExternalTriggerConditions[f](self.ReceivingPlayer,self)then j6=false;break end end;if j6 then for f=1,self.Triggers[0]do local bS=Lib.Quest.Global:SerializeBehavior(self.Triggers[f],Triggers.Custom2,4)if bS then log("Quest '"..self.Identifier.."' "..bS,true)end;j6=j6 and self:IsTriggerActive(self.Triggers[f])end end;if j6 then self:SetMsgKeyOverride()self:SetIconOverride()self:Trigger()end elseif self.State==QuestState.Active then for f=1,#Lib.Quest.Global.ExternalTimerConditions,1 do if not Lib.Quest.Global.ExternalTimerConditions[f](self.ReceivingPlayer,self)then self.StartTime=self.StartTime+1;break end end;local j7=true;for f=1,#Lib.Quest.Global.ExternalDecisionConditions,1 do if not Lib.Quest.Global.ExternalDecisionConditions[f](self.ReceivingPlayer,self)then j7=false;break end end;if j7 then local j8=true;local j9=false;for f=1,self.Objectives[0]do local bS=Lib.Quest.Global:SerializeBehavior(self.Objectives[f],Objective.Custom2,1)if bS then log("Quest '"..self.Identifier.."' "..bS,true)end;local ja=self:IsObjectiveCompleted(self.Objectives[f])if self.Objectives[f].Type==Objective.Deliver and ja==nil then if self.Objectives[f].Data[4]==nil then self.Objectives[f].Data[4]=0 end;if self.Objectives[f].Data[3]~=nil then self.Objectives[f].Data[4]=self.Objectives[f].Data[4]+1 end;local jb=self.StartTime;local jc=self.Duration;local jd=self.Objectives[f].Data[4]local je=self.StartTime+self.Duration-self.Objectives[f].Data[4]if self.Duration>0 and self.StartTime+self.Duration+self.Objectives[f].Data[4]<Logic.GetTime()then ja=false end else if self.Duration>0 and self.StartTime+self.Duration<Logic.GetTime()then if ja==nil and(self.Objectives[f].Type==Objective.Protect or self.Objectives[f].Type==Objective.Dummy or self.Objectives[f].Type==Objective.NoChange)then ja=true elseif ja==nil or self.Objectives[f].Type==Objective.DummyFail then ja=false end end end;j8=ja==true and j8;j9=ja==false or j9 end;if j8 then self:Success()elseif j9 then self:Fail()end end else if self.IsEventQuest==true then Logic.ExecuteInLuaLocalState("StopEventMusic(nil, "..self.ReceivingPlayer..")")end;if self.Result==QuestResult.Success then for f=1,self.Rewards[0]do local bS=Lib.Quest.Global:SerializeBehavior(self.Rewards[f],Reward.Custom,3)if bS then log("Quest '"..self.Identifier.."' "..bS,true)end;self:AddReward(self.Rewards[f])end elseif self.Result==QuestResult.Failure then for f=1,self.Reprisals[0]do local bS=Lib.Quest.Global:SerializeBehavior(self.Reprisals[f],Reprisal.Custom,3)if bS then log("Quest '"..self.Identifier.."' "..bS,true)end;self:AddReprisal(self.Reprisals[f])end end;if self.EndCallback~=nil then self:EndCallback()end;return true end end;function Lib.Quest.Global:SerializeBehavior(f2,jf,jg)local jh="Objective"local ji=Objective;if jg==2 then jh="Reprisal"ji=Reprisal elseif jg==3 then jh="Reward"ji=Reward elseif jg==4 then jh="Trigger"ji=Triggers end;local jj="Running {"local jk=GetNameOfKeyInTable(ji,f2.Type)if f2.Type==jf then local jl=f2.Data[1].FuncName;jj=jj..jh.."."..jk..""if jl==nil then return else jj=jj..", "..tostring(jl)end;if f2.Data and f2.Data[1].i47ya_6aghw_frxil and#f2.Data[1].i47ya_6aghw_frxil>0 then for bu=1,#f2.Data[1].i47ya_6aghw_frxil,1 do jj=jj..", ("..type(f2.Data[1].i47ya_6aghw_frxil[bu])..") "..tostring(f2.Data[1].i47ya_6aghw_frxil[bu])end end else jj=jj..jh.."."..jk..""if f2.Data then if type(f2.Data)=="table"then for bu=1,#f2.Data do jj=jj..", ("..type(f2.Data[bu])..") "..tostring(f2.Data[bu])end else jj=jj..", ("..type(f2.Data)..") "..tostring(f2.Data)end end end;jj=jj.."}"return jj end;function Lib.Quest.Global:FindQuestNames(ee,jm)local jn=FindQuestsByName(ee,jm)if#jn==0 then return{}end;local jo={}for f=1,#jn,1 do table.insert(jo,jn[f].Identifier)end;return jo end;function Lib.Quest.Global:ProcessChatInput(bl,aa,jp)if jp then local dJ=Lib.Core.Debug:CommandTokenizer(bl)for f=1,#dJ,1 do if dJ[f][1]=="fail"or dJ[f][1]=="start"or dJ[f][1]=="restart"or dJ[f][1]=="stop"or dJ[f][1]=="win"then local jn=self:FindQuestNames(dJ[f][2],true)error(#jn==1,"Unable to find quest containing '"..dJ[f][2].."'")if dJ[f][1]=="fail"then FailQuest(jn[1])log("fail quest '"..jn[1].."'")elseif dJ[f][1]=="restart"then RestartQuest(jn[1])log("restart quest '"..jn[1].."'")elseif dJ[f][1]=="start"then StartQuest(jn[1])log("trigger quest '"..jn[1].."'")elseif dJ[f][1]=="stop"then StopQuest(jn[1])log("interrupt quest '"..jn[1].."'")elseif dJ[f][1]=="win"then WinQuest(jn[1])log("win quest '"..jn[1].."'")end end end end end;function Lib.Quest.Local:Initialize()if not self.IsInstalled then Lib.Quest.Global=nil end;self.IsInstalled=true end;function Lib.Quest.Local:OnSaveGameLoaded()end;function Lib.Quest.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2],arg[3])end end;function Lib.Quest.Local:ProcessChatInput(bl,aa,jp)if not jp or GUI.GetPlayerID()~=aa then return end;ExecuteGlobal([[Lib.Quest.Global:ProcessChatInput("%s", %d, %s)]],bl,aa,tostring(jp==true))end;RegisterModule(Lib.Quest.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/quest/QuestJornal_API")function ShowJournalForQuest(b1,bM)assert(not IsLocalScript(),"Can not be used in local script!")local a_=Quests[GetQuestID(b1)]if a_ then a_.QuestNotes=bM==true end end;function AllowNotesForQuest(b1,bM)assert(not IsLocalScript(),"Can not be used in local script!")local a_=Quests[GetQuestID(b1)]if a_ then Lib.QuestJornal.Global.CustomInputAllowed[b1]=bM==true end end;function CreateJournalEntry(bl)assert(not IsLocalScript(),"Can not be used in local script!")bl=bl:gsub("{@[A-Za-z0-9:,]+}","")bl=bl:gsub("{[A-Za-z0-9_]+}","")return Lib.QuestJornal.Global:CreateJournalEntry(bl,0,false)end;function AlterJournalEntry(aw,bl)assert(not IsLocalScript(),"Can not be used in local script!")bl=bl:gsub("{@[A-Za-z0-9:,]+}","")bl=bl:gsub("{[A-Za-z0-9_]+}","")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:UpdateJournalEntry(aw,bl,jq.Rank,jq.AlwaysVisible,jq.Deleted)end end;function HighlightJournalEntry(aw,jr)assert(not IsLocalScript(),"Can not be used in local script!")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:UpdateJournalEntry(aw,jq[1],jr==true and 1 or 0,jq.AlwaysVisible,jq.Deleted)end end;function DeleteJournalEntry(aw)assert(not IsLocalScript(),"Can not be used in local script!")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:UpdateJournalEntry(aw,jq[1],jq.Rank,jq.AlwaysVisible,true)end end;function RestoreJournalEntry(aw)assert(not IsLocalScript(),"Can not be used in local script!")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:UpdateJournalEntry(aw,jq[1],jq.Rank,jq.AlwaysVisible,false)end end;function AddJournalEntryToQuest(aw,b1)assert(not IsLocalScript(),"Can not be used in local script!")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aw,b1,true)end end;function RemoveJournalEntryFromQuest(aw,b1)assert(not IsLocalScript(),"Can not be used in local script!")local jq=Lib.QuestJornal.Global:GetJournalEntry(aw)if jq then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aw,b1,false)end end;Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/Requester_API")function TextWindow(js,jt,aa)aa=aa or 1;js=Localize(js)jt=Localize(jt)if not GUI then ExecuteLocal([[API.TextWindow("%s", "%s", %d)]],js,jt,aa)return end;Lib.Requester.Local:ShowTextWindow{PlayerID=aa,Caption=js,Content=jt}end;API.TextWindow=TextWindow;function DialogInfoBox(aa,dY,bl,fq)assert(IsLocalScript(),"Can not be used in global script.")if type(aa)~="number"then fq=bl;bl=dY;dY=aa;aa=GUI.GetPlayerID()end;if type(dY)=="table"then dY=Localize(dY)end;if type(bl)=="table"then bl=Localize(bl)end;Lib.Requester.Local:OpenDialog(aa,dY,bl,fq)end;API.DialogInfoBox=DialogInfoBox;function DialogRequestBox(aa,dY,bl,fq,ju)assert(IsLocalScript(),"Can not be used in global script.")if type(aa)~="number"then ju=fq;fq=bl;bl=dY;dY=aa;aa=GUI.GetPlayerID()end;if type(dY)=="table"then dY=Localize(dY)end;if type(bl)=="table"then bl=Localize(bl)end;Lib.Requester.Local:OpenRequesterDialog(aa,dY,bl,fq,ju)end;API.DialogRequestBox=DialogRequestBox;function DialogSelectBox(aa,dY,bl,fq,W)assert(IsLocalScript(),"Can not be used in global script.")if type(aa)~="number"then W=fq;fq=bl;bl=dY;dY=aa;aa=GUI.GetPlayerID()end;if type(dY)=="table"then dY=Localize(dY)end;if type(bl)=="table"then bl=Localize(bl)end;bl=bl.."{cr}"Lib.Requester.Local:OpenSelectionDialog(aa,dY,bl,fq,W)end;API.DialogSelectBox=DialogSelectBox;function DialogLanguageSelection(aa)aa=aa or 0;if not GUI then ExecuteLocal([[DialogLanguageSelection(%d)]],aa)return end;local jv=aa;local n=GUI.GetPlayerID()local jw=jv==0 or jv==n;if jv~=0 and GUI.GetPlayerID()~=jv then return end;local jx={}for f=1,#Lib.Core.Text.Languages do table.insert(jx,Lib.Core.Text.Languages[f][2])end;local jy=function(jz)SendReportToGlobal(Report.LanguageSelectionClosed,n,jw,Lib.Core.Text.Languages[jz][1])SendReport(Report.LanguageSelectionClosed,n,jw,Lib.Core.Text.Languages[jz][1])end;DialogSelectBox(n,Localize(Lib.Requester.Shared.Text.ChooseLanguage.Title),Localize(Lib.Requester.Shared.Text.ChooseLanguage.Text),jy,jx)end;API.DialogLanguageSelection=DialogLanguageSelection;Lib.Requester=Lib.Requester or{}Lib.Requester.Name="Requester"Lib.Requester.Global={}Lib.Requester.Local={Chat={Data={},History={},Visible={},Widgets={}},Requester={ActionFunction=nil,ActionRequester=nil,Next=nil,Queue={}}}Lib.Requester.Shared={Text={ChooseLanguage={Title={de="Wählt die Sprache",en="Chose your Tongue",fr="Sélectionnez la langue"},Text={de="Wählt aus der Liste die Sprache aus, in die Handlungstexte übersetzt werden sollen.",en="Choose from the list below which language story texts shall be presented to you.",fr="Sélectionne dans la liste la langue dans laquelle les textes narratifs doivent être traduits."}}}}Lib.Require("core/core")Lib.Require("module/information/Requester_API")Lib.Register("module/information/Requester")function Lib.Requester.Global:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")Lib.Requester.Local=nil end;self.IsInstalled=true end;function Lib.Requester.Global:OnSaveGameLoaded()end;function Lib.Requester.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.LanguageSelectionClosed then Lib.Core.Text:ChangeSystemLanguage(arg[1],arg[2],arg[3])end end;function Lib.Requester.Local:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")for f=1,8 do self.Chat.Data[f]={}self.Chat.History[f]={}self.Chat.Visible[f]=false;self.Chat.Widgets[f]={}end;self:OverrideChatLog()self:DialogOverwriteOriginal()self:DialogAltF4Hotkey()Lib.Requester.Global=nil end;self.IsInstalled=true end;function Lib.Requester.Local:OnSaveGameLoaded()end;function Lib.Requester.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.SaveGameLoaded then self:DialogAltF4Hotkey()end end;function Lib.Requester.Local:DialogAltF4Hotkey()StartSimpleJobEx(function()if Lib.Requester.Local.LoadscreenClosed then Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"Lib.Requester.Local:DialogAltF4Action()",2,false)return true end end)end;function Lib.Requester.Local:DialogAltF4Action()Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"",30,false)self:OpenRequesterDialog(GUI.GetPlayerID(),XGUIEng.GetStringTableText("UI_Texts/MainMenuExitGame_center"),XGUIEng.GetStringTableText("UI_Texts/ConfirmQuitCurrentGame"),function(jA)if jA then Framework.ExitGame()end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;Lib.Requester.Local:DialogAltF4Hotkey()end)end;function Lib.Requester.Local:Callback(aa)if self.Requester.ActionFunction then self.Requester.ActionFunction(CustomGame.Knight+1,aa)end;self:OnDialogClosed()end;function Lib.Requester.Local:CallbackRequester(jB,aa)if self.Requester.ActionRequester then self.Requester.ActionRequester(jB,aa)end;self:OnDialogClosed()end;function Lib.Requester.Local:OnDialogClosed()if not self.SavingWasDisabled then DisableSaving(false)end;if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;self.SavingWasDisabled=false;self.DialogWindowShown=false;self:DialogQueueStartNext()end;function Lib.Requester.Local:DialogQueueStartNext()self.Requester.Next=table.remove(self.Requester.Queue,1)RequestHiResJob(function()local jq=Lib.Requester.Local.Requester.Next;if jq and jq[1]and jq[2]then local jC=jq[1]Lib.Requester.Local[jC](Lib.Requester.Local,unpack(jq[2]))Lib.Requester.Local.Requester.Next=nil end;return true end)end;function Lib.Requester.Local:DialogQueuePush(jD,jE)local jq={jD,jE}table.insert(self.Requester.Queue,jq)end;function Lib.Requester.Local:OpenDialog(aa,dY,bl,fq)if GUI.GetPlayerID()~=aa then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(dY)=="string")assert(type(bl)=="string")if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;dY="{center}"..Lib.Core.Text:ConvertPlaceholders(dY)bl=Lib.Core.Text:ConvertPlaceholders(bl)if string.len(bl)<35 then bl=bl.."{cr}"end;g_MapAndHeroPreview.SelectKnight=function(jF)end;XGUIEng.ShowAllSubWidgets("/InGame/Dialog/BG",1)XGUIEng.ShowWidget("/InGame/Dialog/Backdrop",0)XGUIEng.ShowWidget(RequesterDialog,1)XGUIEng.ShowWidget(RequesterDialog_Yes,0)XGUIEng.ShowWidget(RequesterDialog_No,0)XGUIEng.ShowWidget(RequesterDialog_Ok,1)if type(fq)=="function"then self.Requester.ActionFunction=fq;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)else self.Requester.ActionFunction=nil;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)end;XGUIEng.SetText(RequesterDialog_Message,"{center}"..bl)XGUIEng.SetText(RequesterDialog_Title,dY)XGUIEng.SetText(RequesterDialog_Title.."White",dY)XGUIEng.PushPage(RequesterDialog,false)if Lib.Core.Save.SavingDisabled then self.SavingWasDisabled=true end;DisableSaving(true)self.DialogWindowShown=true else self:DialogQueuePush("OpenDialog",{aa,dY,bl,fq})end end;function Lib.Requester.Local:OpenRequesterDialog(aa,dY,bl,fq,ju)if GUI.GetPlayerID()~=aa then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(dY)=="string")assert(type(bl)=="string")dY="{center}"..dY;self:OpenDialog(aa,dY,bl,fq)XGUIEng.ShowWidget(RequesterDialog_Yes,1)XGUIEng.ShowWidget(RequesterDialog_No,1)XGUIEng.ShowWidget(RequesterDialog_Ok,0)if ju then XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Ok_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/Cancel_center"))else XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Yes_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/No_center"))end;self.Requester.ActionRequester=nil;if fq then assert(type(fq)=="function")self.Requester.ActionRequester=fq end;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, true, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Yes,jy)local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, false, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_No,jy)else self:DialogQueuePush("OpenRequesterDialog",{aa,dY,bl,fq,ju})end end;function Lib.Requester.Local:OpenSelectionDialog(aa,dY,bl,fq,W)if GUI.GetPlayerID()~=aa then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then self:OpenDialog(aa,dY,bl,fq)local jG=XGUIEng.GetWidgetID(CustomGame.Widget.KnightsList)XGUIEng.ListBoxPopAll(jG)for f=1,#W do XGUIEng.ListBoxPushItem(jG,W[f])end;XGUIEng.ListBoxSetSelectedIndex(jG,0)CustomGame.Knight=0;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)local jH="/InGame/Singleplayer/CustomGame/ContainerSelection/"XGUIEng.SetText(jH.."HeroComboBoxMain/HeroComboBox","")if W[1]then XGUIEng.SetText(jH.."HeroComboBoxMain/HeroComboBox",W[1])end;XGUIEng.PushPage(jH.."HeroComboBoxContainer",false)XGUIEng.PushPage(jH.."HeroComboBoxMain",false)XGUIEng.ShowWidget(jH.."HeroComboBoxContainer",0)local jI={GUI.GetScreenSize()}local am,an=XGUIEng.GetWidgetScreenPosition(RequesterDialog_Ok)XGUIEng.SetWidgetScreenPosition(jH.."HeroComboBoxMain",am-25,an-90*jI[2]/1080)XGUIEng.SetWidgetScreenPosition(jH.."HeroComboBoxContainer",am-25,an-20*jI[2]/1080)else self:DialogQueuePush("OpenSelectionDialog",{aa,dY,bl,fq,W})end end;function Lib.Requester.Local:DialogOverwriteOriginal()OpenDialog_Orig_Windows=OpenDialog;OpenDialog=function(jJ,dY,jK)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"OpenDialog_Orig_Windows(dY,jJ)end end;OpenRequesterDialog_Orig_Windows=OpenRequesterDialog;OpenRequesterDialog=function(jJ,dY,jL,ju,jM)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_Yes,jy)local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_No,jy)OpenRequesterDialog_Orig_Windows(jJ,dY,jL,ju,jM)end end end;function Lib.Requester.Local:ShowTextWindow(f2)f2.PlayerID=f2.PlayerID or 1;f2.Button=f2.Button or{}local n=GUI.GetPlayerID()if f2.PlayerID~=n then return end;if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 then self:UpdateChatLogText(f2)return end;self.Chat.Data[n]=f2;self:CloseTextWindow(n)self:AlterChatLog()XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",f2.Content)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}"..f2.Caption)if f2.DisableClose then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/Exit",0)end;self:ShouldShowSlider(f2.Content)XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)end;function Lib.Requester.Local:CloseTextWindow(aa)assert(aa~=nil)local n=GUI.GetPlayerID()if aa~=n then return end;GUI_Chat.CloseChatMenu()end;function Lib.Requester.Local:UpdateChatLogText(f2)XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",f2.Content)end;function Lib.Requester.Local:AlterChatLog()local n=GUI.GetPlayerID()if self.Chat.Visible[n]then return end;self.Chat.Visible[n]=true;self.Chat.History[n]=table.copy(g_Chat.ChatHistory)g_Chat.ChatHistory={}self:AlterChatLogDisplay()end;function Lib.Requester.Local:RestoreChatLog()local n=GUI.GetPlayerID()if not self.Chat.Visible[n]then return end;self.Chat.Visible[n]=false;g_Chat.ChatHistory={}for f=1,#self.Chat.History[n]do GUI_Chat.ChatlogAddMessage(self.Chat.History[n][f])end;self:RestoreChatLogDisplay()self.Chat.History[n]={}self.Chat.Widgets[n]={}self.Chat.Data[n]={}end;function Lib.Requester.Local:UpdateToggleWhisperTarget()local n=GUI.GetPlayerID()local jN="/InGame/Root/Normal/ChatOptions/"if not self.Chat.Data[n]or not self.Chat.Data[n].Button or not self.Chat.Data[n].Button.Action then XGUIEng.ShowWidget(jN.."ToggleWhisperTarget",0)return end;local jO=self.Chat.Data[n].Button.Text;XGUIEng.SetText(jN.."ToggleWhisperTarget","{center}"..jO)end;function Lib.Requester.Local:ShouldShowSlider(bl)local jP=string.len(bl)local jQ=1;local jR=0;while true do local cl,cj=string.find(bl,"{cr}",jQ)if not cj then break end;if cj-jQ<=58 then jP=jP+58-(cj-jQ)end;jQ=cj+1 end;if jP+jR*55>1000 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/ChatLogSlider",1)end end;function Lib.Requester.Local:OverrideChatLog()GUI_Chat.ChatlogAddMessage_Orig_Requester=GUI_Chat.ChatlogAddMessage;GUI_Chat.ChatlogAddMessage=function(jJ)local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ChatlogAddMessage_Orig_Requester(jJ)return end;table.insert(Lib.Requester.Local.Chat.History[n],jJ)end;GUI_Chat.DisplayChatLog_Orig_Requester=GUI_Chat.DisplayChatLog;GUI_Chat.DisplayChatLog=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.DisplayChatLog_Orig_Requester()end end;GUI_Chat.CloseChatMenu_Orig_Requester=GUI_Chat.CloseChatMenu;GUI_Chat.CloseChatMenu=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CloseChatMenu_Orig_Requester()return end;Lib.Requester.Local:RestoreChatLog()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)end;GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester=GUI_Chat.ToggleWhisperTargetUpdate;GUI_Chat.ToggleWhisperTargetUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester()return end;Lib.Requester.Local:UpdateToggleWhisperTarget()end;GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester=GUI_Chat.CheckboxMessageTypeWhisperUpdate;GUI_Chat.CheckboxMessageTypeWhisperUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester()return end end;GUI_Chat.ToggleWhisperTarget_Orig_Requester=GUI_Chat.ToggleWhisperTarget;GUI_Chat.ToggleWhisperTarget=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTarget_Orig_Requester()return end;if Lib.Requester.Local.Chat.Data[n].Button.Action then local aU=Lib.Requester.Local.Chat.Data[n]Lib.Requester.Local.Chat.Data[n].Button.Action(aU)end end end;function Lib.Requester.Local:AlterChatLogDisplay()local n=GUI.GetPlayerID()local jS,jT,A,B;local is;local jN="/InGame/Root/Normal/ChatOptions/"A,B=XGUIEng.GetWidgetLocalPosition(jN.."ToggleWhisperTarget")jS,jT=XGUIEng.GetWidgetSize(jN.."ToggleWhisperTarget")self.Chat.Widgets[n]["ToggleWhisperTarget"]={X=A,Y=B,W=jS,H=jT}is=self.Chat.Widgets[n]["ToggleWhisperTarget"]A,B=XGUIEng.GetWidgetLocalPosition(jN.."ChatLog")jS,jT=XGUIEng.GetWidgetSize(jN.."ChatLog")self.Chat.Widgets[n]["ChatLog"]={X=A,Y=B,W=jS,H=jT}is=self.Chat.Widgets[n]["ChatLog"]A,B=XGUIEng.GetWidgetLocalPosition(jN.."ChatLogSlider")jS,jT=XGUIEng.GetWidgetSize(jN.."ChatLogSlider")self.Chat.Widgets[n]["ChatLogSlider"]={X=A,Y=B,W=jS,H=jT}is=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.ShowWidget(jN.."ChatModeAllPlayers",0)XGUIEng.ShowWidget(jN.."ChatModeTeam",0)XGUIEng.ShowWidget(jN.."ChatModeWhisper",0)XGUIEng.ShowWidget(jN.."ChatChooseModeCaption",0)XGUIEng.ShowWidget(jN.."Background/TitleBig",1)XGUIEng.ShowWidget(jN.."Background/TitleBig/Info",0)XGUIEng.ShowWidget(jN.."ChatLogCaption",0)XGUIEng.ShowWidget(jN.."BGChoose",0)XGUIEng.ShowWidget(jN.."BGChatLog",0)XGUIEng.ShowWidget(jN.."ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/BG",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Close",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Slider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Text",0)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}Test")XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog",15,90)XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog/Name",0,0)XGUIEng.SetTextColor("/InGame/Root/Normal/MessageLog/Name",51,51,121,255)XGUIEng.SetWidgetSize(jN.."ChatLogSlider",46,600)XGUIEng.SetWidgetLocalPosition(jN.."ChatLogSlider",780,130)XGUIEng.SetWidgetSize(jN.."Background/DialogBG/1 (2)/2",150,400)XGUIEng.SetWidgetPositionAndSize(jN.."Background/DialogBG/1 (2)/3",400,500,350,400)XGUIEng.SetWidgetLocalPosition(jN.."ToggleWhisperTarget",280,760)XGUIEng.SetWidgetLocalPosition(jN.."ChatLog",140,150)XGUIEng.SetWidgetSize(jN.."ChatLog",640,560)end;function Lib.Requester.Local:RestoreChatLogDisplay()local n=GUI.GetPlayerID()local is;local jN="/InGame/Root/Normal/ChatOptions/"is=self.Chat.Widgets[n]["ToggleWhisperTarget"]XGUIEng.SetWidgetLocalPosition(jN.."ToggleWhisperTarget",is.X,is.Y)XGUIEng.SetWidgetSize(jN.."ToggleWhisperTarget",is.W,is.H)is=self.Chat.Widgets[n]["ChatLog"]XGUIEng.SetWidgetLocalPosition(jN.."ChatLog",is.X,is.Y)XGUIEng.SetWidgetSize(jN.."ChatLog",is.W,is.H)is=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.SetWidgetLocalPosition(jN.."ChatLogSlider",is.X,is.Y)XGUIEng.SetWidgetSize(jN.."ChatLogSlider",is.W,is.H)XGUIEng.ShowWidget(jN.."ChatModeAllPlayers",1)XGUIEng.ShowWidget(jN.."ChatModeTeam",1)XGUIEng.ShowWidget(jN.."ChatModeWhisper",1)XGUIEng.ShowWidget(jN.."ChatChooseModeCaption",1)XGUIEng.ShowWidget(jN.."Background/TitleBig",1)XGUIEng.ShowWidget(jN.."Background/TitleBig/Info",1)XGUIEng.ShowWidget(jN.."ChatLogCaption",1)XGUIEng.ShowWidget(jN.."BGChoose",1)XGUIEng.ShowWidget(jN.."BGChatLog",1)XGUIEng.ShowWidget(jN.."ChatLogSlider",1)XGUIEng.ShowWidget(jN.."ToggleWhisperTarget",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)end;RegisterModule(Lib.Requester.Name)Lib.QuestJornal=Lib.QuestJornal or{}Lib.QuestJornal.Name="QuestJornal"Lib.QuestJornal.Global={Journal={ID=0},CustomInputAllowed={},InputShown={},TextColor="{tooltip}"}Lib.QuestJornal.Local={NextButton="/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/TutorialNextButton",NextButtonIcon={16,10}}Lib.QuestJornal.Text={Next={de="Tagebuch anzeigen",en="Show Journal",fr="Afficher le journal"},Title={de="Tagebuch",en="Journal",fr="Journal"},Note={de="Notiz",en="Note",fr="Note"}}Lib.Require("core/core")Lib.Require("module/information/Requester")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestJornal_API")Lib.Register("module/quest/QuestJornal")function Lib.QuestJornal.Global:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")Lib.QuestJornal.Local=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Global:OnSaveGameLoaded()end;function Lib.QuestJornal.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.TutorialNextClicked then self:DisplayJournal(arg[1],arg[2])elseif aw==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2])elseif aw==Report.QuestJournalPlayerNote then self.InputShown[arg[1]]=arg[2]SendReportToLocal(Report.QuestJournalPlayerNote,arg[1],arg[2],arg[3]==true)elseif aw==Report.QuestJournalDisplayed then SendReportToLocal(Report.QuestJournalDisplayed,arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestJornal.Global:DisplayJournal(bo,aa)local jU=self.CustomInputAllowed[bo]==true;local jV=self:FormatJournalEntry(bo,aa)SendReport(Report.QuestJournalDisplayed,aa,bo,jV,jU)end;function Lib.QuestJornal.Global:CreateJournalEntry(bl,jW,jX)self.Journal.ID=self.Journal.ID+1;table.insert(self.Journal,{ID=self.Journal.ID,AlwaysVisible=jX==true,Quests={},Rank=jW,bl})return self.Journal.ID end;function Lib.QuestJornal.Global:GetJournalEntry(aw)for f=1,#self.Journal do if self.Journal[f].ID==aw then return self.Journal[f]end end end;function Lib.QuestJornal.Global:UpdateJournalEntry(aw,bl,jW,jX,jY)for f=1,#self.Journal do if self.Journal[f].ID==aw then self.Journal[f].AlwaysVisible=jX==true;self.Journal[f].Deleted=jY==true;self.Journal[f].Rank=jW;self.Journal[f][1]=self.Journal[f][1]or bl end end end;function Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aw,b1,bM)for f=1,#self.Journal do if self.Journal[f].ID==aw then self.Journal[f].Quests[b1]=bM==true end end end;function Lib.QuestJornal.Global:FormatJournalEntry(bo,aa)local a_=Quests[GetQuestID(bo)]if a_ and a_.QuestNotes and a_.ReceivingPlayer==aa then local jZ=self:GetJournalEntriesSorted()local j_=false;local k0=false;local jj=""local dQ=""for f=1,#jZ,1 do if jZ[f].AlwaysVisible or jZ[f].Quests[bo]then if not jZ[f].Deleted then local bS=ConvertPlaceholders(Localize(jZ[f][1]))if jZ[f].Rank==1 then bS="{scarlet}"..bS..self.TextColor;j_=true end;if jZ[f].Rank==0 then if j_ then j_=false;bS="{cr}----------{cr}{cr}"..bS end;k0=true end;if jZ[f].Rank==-1 then if k0 then k0=false;dQ="{violet}"bS="{cr}----------{cr}{cr}"..bS end;bS=dQ..bS..self.TextColor end;jj=jj..(jj~=""and"{cr}"or"")..bS end end end;return jj end end;function Lib.QuestJornal.Global:GetJournalEntriesSorted()local jZ={}for f=1,#self.Journal,1 do table.insert(jZ,self.Journal[f])end;table.sort(jZ,function(a5,cs)return a5.Rank>cs.Rank end)return jZ end;function Lib.QuestJornal.Global:ProcessChatInput(bl,aa)if self.InputShown[aa]then if bl and bl~=""then local k1=self.InputShown[aa]local jU=self.CustomInputAllowed[k1]==true;local ae=self:CreateJournalEntry(bl,-1,false)self:AssociateJournalEntryWithQuest(ae,k1,true)local jV=self:FormatJournalEntry(k1,aa)SendReport(Report.QuestJournalDisplayed,aa,k1,jV,jU)end;self.InputShown[aa]=nil end end;function Lib.QuestJornal.Local:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")self:OverrideUpdateVoiceMessage()self:OverrideTutorialNext()self:OverrideStringKeys()self:OverrideTimerButtons()Lib.QuestJornal.Global=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Local:OnSaveGameLoaded()end;function Lib.QuestJornal.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.QuestJournalPlayerNote then if arg[1]==GUI.GetPlayerID()and arg[3]then ShowTextInput(arg[1],false)end elseif aw==Report.QuestJournalDisplayed then if arg[1]==GUI.GetPlayerID()then self:DisplayQuestJournal(arg[2],arg[1],arg[3],arg[4])end end end;function Lib.QuestJornal.Local:DisplayQuestJournal(bo,aa,k2,w)if k2 and GUI.GetPlayerID()==aa then local i0=Localize(Lib.QuestJornal.Text.Title)local aU={PlayerID=aa,Caption=i0,Content=ConvertPlaceholders(k2),QuestName=bo}if w then aU.Button={Text=Localize{de="Notiz",en="Note",fr="Note"},Action=function(f2)SendReportToGlobal(Report.QuestJournalPlayerNote,f2.PlayerID,f2.QuestName,w)end}end;Lib.Requester.Local:ShowTextWindow(aU)end end;function Lib.QuestJornal.Local:OverrideUpdateVoiceMessage()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal=GUI_Interaction.UpdateVoiceMessage;GUI_Interaction.UpdateVoiceMessage=function()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal()if not QuestLog.IsQuestLogShown()then if Lib.QuestJornal.Local:IsShowingJournalButton(g_Interaction.CurrentMessageQuestIndex)then XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,1)SetIcon(Lib.QuestJornal.Local.NextButton,Lib.QuestJornal.Local.NextButtonIcon)else XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,0)end end end end;function Lib.QuestJornal.Local:IsShowingJournalButton(aw)if not g_Interaction.CurrentMessageQuestIndex then return false end;local a_=Quests[aw]if type(a_)=="table"and a_.QuestNotes then return true end;return false end;function Lib.QuestJornal.Local:OverrideTimerButtons()GUI_Interaction.TimerButtonClicked_Orig_QuestJornal=GUI_Interaction.TimerButtonClicked;GUI_Interaction.TimerButtonClicked=function()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 and XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions/ToggleWhisperTarget")==1 then return end;GUI_Interaction.TimerButtonClicked_Orig_QuestJornal()end end;function Lib.QuestJornal.Local:OverrideTutorialNext()GUI_Interaction.TutorialNext_Orig_QuestJornal=GUI_Interaction.TutorialNext;GUI_Interaction.TutorialNext=function()if g_Interaction.CurrentMessageQuestIndex then local bj=g_Interaction.CurrentMessageQuestIndex;local a_=Quests[bj]SendReportToGlobal(Report.TutorialNextClicked,a_.Identifier,GUI.GetPlayerID())SendReport(Report.TutorialNextClicked,a_.Identifier,GUI.GetPlayerID())end end end;function Lib.QuestJornal.Local:OverrideStringKeys()AddStringText("UI_ObjectNames/TutorialNextButton",Lib.QuestJornal.Text.Next)end;RegisterModule(Lib.QuestJornal.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Warehouse_API")function CreateWarehouse(f2)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:CreateWarehouse(f2)end;API.CreateWarehouse=CreateWarehouse;function CreateWarehouseOffer(y,aB,k3,k4,k5,k6,k7)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Warehouse.Global:CreateOffer(y,aB,k3,k4,k5,k6,k7)end;API.CreateWarehouseOffer=CreateWarehouseOffer;function RemoveWarehouseOffer(y,aw)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:RemoveOffer(y,aw)end;API.RemoveWarehouseOffer=RemoveWarehouseOffer;function DeactivateWarehouseOffer(y,aw,k8)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:ActivateOffer(y,aw,not k8)end;API.DeactivateWarehouseOffer=DeactivateWarehouseOffer;function GetWarehouseInflation(aa,k3)if IsLocalScript()then return Lib.Warehouse.Local:GetInflation(aa,k3)end;return Lib.Warehouse.Global:GetInflation(aa,k3)end;API.GetWarehouseInflation=GetWarehouseInflation;function SetWarehouseInflation(aa,k3,k9)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:SetInflation(aa,k3,k9)end;API.SetWarehouseInflation=SetWarehouseInflation;function GetWarehouseOfferByID(y,aw)if IsLocalScript()then return Lib.Warehouse.Local:GetOfferByID(y,aw)end;return Lib.Warehouse.Global:GetOfferByID(y,aw)end;API.GetWarehouseOfferByID=GetWarehouseOfferByID;function GetActivWarehouseOffers(y,ka)if IsLocalScript()then return Lib.Warehouse.Local:GetActivOffers(y,ka)end;return Lib.Warehouse.Global:GetActivOffers(y,ka)end;API.GetActivWarehouseOffers=GetActivWarehouseOffers;Lib.Warehouse=Lib.Warehouse or{}Lib.Warehouse.Name="Warehouse"Lib.Warehouse.CinematicEvents={}Lib.Warehouse.Global={OfferSequence=0,Warehouses={Job=0},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Local={Warehouses={},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Text={OfferTitle={{de="Keine Angebote",en="No Offers"},{de="%d %s kaufen%s",en="Purchase %d %s%s"},{de="%s anheuern",en="Hire %s"},{de="%s anheuern%s",en="Hire %s%s"},{de="%s kaufen%s",en="Purchase %s%s"}}}Lib.Require("comfort/GetSiegeengineTypeByCartType")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/KeyOf")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("comfort/global/SendCart")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/io/IO")Lib.Require("module/ui/UIBuilding")Lib.Require("module/trade/Warehouse_API")Lib.Register("module/trade/Warehouse")function Lib.Warehouse.Global:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")self:OverwriteGameCallbacks()for f=1,8 do self.Inflation.Players[f]={}end;self.Warehouses.Job=RequestJob(function()Lib.Warehouse.Global:ControlWarehouse()end)Lib.Warehouse.Local=nil end;self.IsInstalled=true end;function Lib.Warehouse.Global:OnSaveGameLoaded()end;function Lib.Warehouse.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.WarehouseOfferClicked then self:PerformTrade(unpack(arg))SendReportToLocal(aw,unpack(arg))end end;function Lib.Warehouse.Global:CreateWarehouse(f2)local kb={ScriptName=f2.ScriptName,BuildingName=f2.ScriptName.."_Post",Costs=f2.Costs,Offers={}}table.insert(self.Warehouses,kb)local ae=GetID(f2.ScriptName)local A,B,C=Logic.EntityGetPos(ae)local O=Logic.GetEntityOrientation(ae)local n=Logic.EntityGetPlayer(ae)local l=Logic.GetEntityType(ae)DestroyEntity(kb.ScriptName)local ga=Logic.CreateEntity(Entities.I_X_TradePostConstructionSite,A,B,O,n)Logic.SetEntityName(ga,kb.ScriptName)if l==Entities.B_TradePost then ga=ReplaceEntity(ga,Entities.XD_ScriptEntity)local hp=Logic.CreateEntity(Entities.B_TradePost,A,B,O,n)Logic.SetEntityName(hp,kb.BuildingName)end;if f2.Costs then Logic.InteractiveObjectClearCosts(GetID(kb.ScriptName))if f2.Costs[1]then Logic.InteractiveObjectAddCosts(GetID(kb.ScriptName),f2.Costs[1],f2.Costs[2])end;if f2.Costs[3]then Logic.InteractiveObjectAddCosts(GetID(kb.ScriptName),f2.Costs[3],f2.Costs[4])end end;for f=1,#f2.Offers do if f2.Offers[f]then self:CreateOffer(kb.ScriptName,f2.Offers[f].Amount,f2.Offers[f].GoodType,f2.Offers[f].GoodAmount,f2.Offers[f].PaymentType,f2.Offers[f].BasePrice,f2.Offers[f].Refresh)end end;ExecuteLocal([[Lib.Warehouse.Local:InitTradeButtons("%s")]],kb.BuildingName)end;function Lib.Warehouse.Global:GetIndex(y)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==y then return f end end;return 0 end;function Lib.Warehouse.Global:CreateOffer(y,aB,ab,kc,k5,k6,k7)local ca=self:GetIndex(y)if ca~=0 then local dg=aB or 1;if KeyOf(ab,Goods)==nil and KeyOf(ab,Entities)~=nil and Logic.IsEntityTypeInCategory(ab,EntityCategories.Military)==0 then dg=1 end;self.OfferSequence=self.OfferSequence+1;local ae=self.OfferSequence;table.insert(self.Warehouses[ca].Offers,{ID=ae,BuyLock=false,Active=true,Current=dg,Amount=dg,Timer=k7 or 3*60,Refresh=k7 or 3*60,GoodType=ab,GoodAmount=kc or 9,PaymentType=k5 or Goods.G_Gold,BasePrice=k6 or 3})return ae end;return 0 end;function Lib.Warehouse.Global:RemoveOffer(y,aw)local ca=self:GetIndex(y)if ca~=0 then for f=#self.Warehouses[ca].Offers,1,-1 do if self.Warehouses[ca].Offers[f].ID==aw then table.remove(self.Warehouses[ca].Offers,f)break end end end end;function Lib.Warehouse.Global:ActivateOffer(y,aw,kd)local ca=self:GetIndex(y)if ca~=0 then for f=#self.Warehouses[ca].Offers,1,-1 do if self.Warehouses[ca].Offers[f].ID==aw then self.Warehouses[ca].Offers[f].Active=kd==true;break end end end end;function Lib.Warehouse.Global:GetOfferByID(y,aw)local ke,kf;local ca=self:GetIndex(y)if ca~=0 then for f=#self.Warehouses[ca].Offers,1,-1 do if self.Warehouses[ca].Offers[f].ID==aw then ke=self.Warehouses[ca].Offers[f]kf=f end end end;return ke,kf end;function Lib.Warehouse.Global:GetActivOffers(y,ka)local kg={}local ca=self:GetIndex(y)if ca~=0 then for f=1,#self.Warehouses[ca].Offers do if(not ka or#kg<6)and self.Warehouses[ca].Offers[f].Active then table.insert(kg,self.Warehouses[ca].Offers[f].ID)end end end;return kg end;function Lib.Warehouse.Global:ChangeOfferAmount(y,aw,aB)local ca=self:GetIndex(y)if ca~=0 then for f=#self.Warehouses[ca].Offers,1,-1 do if self.Warehouses[ca].Offers[f].ID==aw then local kh=self.Warehouses[ca].Offers[aw].Amount;self.Warehouses[ca].Offers[aw].Current=math.min(aB,kh)break end end end end;function Lib.Warehouse.Global:GetInflation(aa,ab)return self.Inflation.Players[aa][ab]or 1.0 end;function Lib.Warehouse.Global:SetInflation(aa,ab,k9)self.Inflation.Players[aa][ab]=k9 or 1.0;ExecuteLocal([[Lib.Warehouse.Local.Inflation.Players[%d][%d] = %f]],aa,ab,k9 or 1.0)end;function Lib.Warehouse.Global:CalculateInflation(aa,ab)local ki=(self.Inflation.Players[aa][ab]or 1.0)+self.Inflation.Inc;ki=math.max(self.Inflation.Min,ki)ki=math.min(ki,self.Inflation.Max)return ki end;function Lib.Warehouse.Global:PerformTrade(aa,bh,k9,kj,kk,kc,kl,k6)if KeyOf(kk,Goods)~=nil then SendCart(bh.."_Post",aa,kk,kc)elseif KeyOf(kk,Entities)~=nil then if Logic.IsEntityTypeInCategory(kk,EntityCategories.Military)==1 then local A,B=Logic.GetBuildingApproachPosition(GetID(bh.."_Post"))local O=Logic.GetEntityOrientation(GetID(bh.."_Post"))-90;local ae=Logic.CreateBattalionOnUnblockedLand(kk,A,B,O,aa)Logic.MoveSettler(ae,A,B,-1)else local A,B=Logic.GetBuildingApproachPosition(GetID(bh.."_Post"))Logic.HireEntertainer(kk,aa,A,B)end end;local km=math.floor(k6*k9+0.5)AddGood(kl,-1*km,aa)ExecuteLocal([[GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 1, 1}, g_TexturePositions.Goods[%d])]],-1*km,kl)self:UpdateOnPurchase(aa,bh,kj)SendReport(Report.WarehouseOfferBought,aa,bh,kk,kc,kl,km)SendReportToLocal(Report.WarehouseOfferBought,aa,bh,kk,kc,kl,km)end;function Lib.Warehouse.Global:UpdateOnPurchase(aa,bh,kj)local ca=self:GetIndex(bh)if ca~=0 then local ke=self.Warehouses[ca].Offers[kj]self.Warehouses[ca].Offers[kj].Current=ke.Current-1;local kn=self:CalculateInflation(aa,ke.GoodType)self:SetInflation(aa,ke.GoodType,kn)end end;function Lib.Warehouse.Global:OverwriteGameCallbacks()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(aa,ag)Lib.Warehouse.Global.Orig_GameCallback_OnBuildingConstructionComplete(aa,ag)if Logic.GetEntityType(ag)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostConstructed(ag)end end;self.Orig_GameCallback_BuildingDestroyed=GameCallback_BuildingDestroyed;GameCallback_BuildingDestroyed=function(ag,aa,ko)Lib.Warehouse.Global.Orig_GameCallback_BuildingDestroyed(ag,aa,ko)if Logic.GetEntityType(ag)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostDestroyed(aa,ag)end end end;function Lib.Warehouse.Global:OnTradepostConstructed(ag)local A,B,C=Logic.EntityGetPos(ag)local gf,ga=Logic.GetEntitiesInArea(Entities.I_X_TradePostConstructionSite,A,B,100,1)if ga~=0 then local aF=Logic.GetEntityName(ga)local ca=self:GetIndex(aF)if ca~=0 then Logic.SetEntityName(ag,self.Warehouses[ca].BuildingName)end end end;function Lib.Warehouse.Global:OnTradepostDestroyed(aa,ag)local A,B,C=Logic.EntityGetPos(ag)local O=Logic.GetEntityOrientation(ag)local aF=Logic.GetEntityName(ag)local ca=aF and self:GetIndex(aF:sub(1,aF:len()-5))or 0;if ca~=0 then local aU=self.Warehouses[ca]local ae=ReplaceEntity(aU.ScriptName,Entities.I_X_TradePostConstructionSite)for f=1,8 do Logic.InteractiveObjectSetPlayerState(ae,f,1)end end end;function Lib.Warehouse.Global:ControlWarehouse()for f=1,#self.Warehouses do if self.Warehouses[f]then for bu=1,#self.Warehouses[f].Offers do local ke=self.Warehouses[f].Offers[bu]if ke.Active and ke.Refresh>0 then if self.Warehouses[f].Offers[bu].Current<ke.Amount then self.Warehouses[f].Offers[bu].Timer=ke.Timer-1;if ke.Timer==0 then self.Warehouses[f].Offers[bu].Current=ke.Current+1;self.Warehouses[f].Offers[bu].Timer=ke.Refresh end end end end end end;local fU=table.tostring(self.Warehouses)ExecuteLocal([[Lib.Warehouse.Local.Warehouses = %s]],fU)end;function Lib.Warehouse.Local:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")for f=1,8 do self.Inflation.Players[f]={}end;Lib.Warehouse.Global=nil end;self.IsInstalled=true end;function Lib.Warehouse.Local:OnSaveGameLoaded()end;function Lib.Warehouse.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.WarehouseOfferClicked then if GUI.GetPlayerID()==arg[2]then local ca=self:GetIndex(arg[2])if self.Warehouses[ca]then self.Warehouses[ca].Offers[arg[4]].BuyLock=false end end end end;function Lib.Warehouse.Local:GetIndex(y)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==y then return f end end;return 0 end;function Lib.Warehouse.Local:GetPrice(aa,ab,k6)return math.floor((self.Inflation.Players[aa][ab]or 1.0)*k6+0.5)end;function Lib.Warehouse.Local:GetInflation(aa,ab)return self.Inflation.Players[aa][ab]or 1.0 end;function Lib.Warehouse.Local:GetOfferByID(y,aw)local ke,kf;local ca=self:GetIndex(y)if ca~=0 then for f=#self.Warehouses[ca].Offers,1,-1 do if self.Warehouses[ca].Offers[f].ID==aw then ke=self.Warehouses[ca].Offers[f]kf=f end end end;return ke,kf end;function Lib.Warehouse.Local:GetActivOffers(y,ka)local kg={}local ca=self:GetIndex(y)if ca~=0 then for f=1,#self.Warehouses[ca].Offers do if(not ka or#kg<6)and self.Warehouses[ca].Offers[f].Active then table.insert(kg,self.Warehouses[ca].Offers[f].ID)end end end;return kg end;function Lib.Warehouse.Local:InitTradeButtons(bh)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(1,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(1,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(1,dV,ag)end)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(2,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(2,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(2,dV,ag)end)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(3,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(3,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(3,dV,ag)end)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(4,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(4,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(4,dV,ag)end)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(5,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(5,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(5,dV,ag)end)AddBuildingButtonByEntity(bh,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonAction(6,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonTooltip(6,dV,ag)end,function(dV,ag)Lib.Warehouse.Local:WarehouseButtonUpdate(6,dV,ag)end)end;function Lib.Warehouse.Local:WarehouseButtonAction(hW,dV,ag)local n=GUI.GetPlayerID()local aF=Logic.GetEntityName(ag)local cl,cj=string.find(aF,"_Post")aF=string.sub(aF,1,cl-1)local ca=self:GetIndex(aF)if ca==0 then return end;local kg=self:GetActivOffers(aF)local aU,kf=self:GetOfferByID(aF,kg[hW])if not aU then return end;if aU.BuyLock then return end;local kp=self:GetPrice(n,aU.GoodType,aU.BasePrice)local kn=self:GetInflation(n,aU.GoodType)if GetPlayerGoodsInSettlement(aU.PaymentType,n)<kp then return end;self.Warehouses[ca].Offers[kf].BuyLock=true;SendReportToGlobal(Report.WarehouseOfferClicked,n,aF,kn,kf,aU.GoodType,aU.GoodAmount,aU.PaymentType,aU.BasePrice)end;function Lib.Warehouse.Local:WarehouseButtonTooltip(hW,dV,ag)local n=GUI.GetPlayerID()local aF=Logic.GetEntityName(ag)local cl,cj=string.find(aF,"_Post")aF=string.sub(aF,1,cl-1)if XGUIEng.IsButtonDisabled(dV)==1 then SetTooltipCosts(ConvertPlaceholders(Localize(Lib.Warehouse.Text.OfferTitle[1])),"")return end;local ca=self:GetIndex(aF)if ca==0 then return end;local kg=self:GetActivOffers(aF)local aU,kf=self:GetOfferByID(aF,kg[hW])if not aU then return end;local kp=self:GetPrice(n,aU.GoodType,aU.BasePrice)local kq=true;local kr=""local ks=""local i1=Logic.GetGoodTypeName(aU.GoodType)local eT=Logic.GetEntityTypeName(aU.GoodType)local kt=GetSiegeengineTypeByCartType(aU.GoodType)if i1~=nil and i1~=""then kr=GetStringText("UI_ObjectNames/"..i1)ks=GetStringText("UI_ObjectDescription/"..i1)else kr=GetStringText("UI_ObjectNames/HireEntertainer")ks=GetStringText("UI_ObjectDescription/HireEntertainer")if Logic.IsEntityTypeInCategory(aU.GoodType,EntityCategories.Soldier)==1 then kr=GetStringText("UI_ObjectNames/HireMercenaries")ks=GetStringText("UI_ObjectDescription/HireMercenaries")elseif kt or Logic.IsEntityTypeInCategory(aU.GoodType,EntityCategories.SiegeEngine)==1 then kr=GetStringText("Names/"..eT)local ku=Logic.GetEntityTypeName(kt)ks=GetStringText("UI_ObjectDescription/Abilities_"..ku)end end;local kv=""if aU.Amount>1 then kv=string.format(" (%d/%d)",aU.Current,aU.Amount)end;local kw=""if KeyOf(aU.GoodType,Goods)~=nil then kw=string.format(Localize(Lib.Warehouse.Text.OfferTitle[2]),aU.GoodAmount,kr,kv)elseif KeyOf(aU.GoodType,Entities)~=nil then if Logic.IsEntityTypeInCategory(aU.GoodType,EntityCategories.Military)==1 then kw=string.format(Localize(Lib.Warehouse.Text.OfferTitle[4]),kr,kv)elseif kt or Logic.IsEntityTypeInCategory(aU.GoodType,EntityCategories.SiegeEngine)==1 then kw=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),kr,kv)else kw=string.format(Localize(Lib.Warehouse.Text.OfferTitle[3]),kr)end end;SetTooltipCosts(kw,ks,nil,{aU.PaymentType,kp},kq)end;function Lib.Warehouse.Local:WarehouseButtonUpdate(hW,dV,ag)local aF=Logic.GetEntityName(ag)local cl,cj=string.find(aF,"_Post")aF=string.sub(aF,1,cl-1)local ca=self:GetIndex(aF)if ca==0 then XGUIEng.ShowWidget(dV,0)return end;local kg=self:GetActivOffers(aF)local aU,kf=self:GetOfferByID(aF,kg[hW])if not aU or not aU.Active then XGUIEng.ShowWidget(dV,0)return end;if not aU.BuyLock and aU.Current>0 then XGUIEng.DisableButton(dV,0)else XGUIEng.DisableButton(dV,1)end;local iP=aU.GoodType;local hU=g_TexturePositions.Goods[iP]or g_TexturePositions.Entities[iP]ChangeIcon(dV,hU)end;RegisterModule(Lib.Warehouse.Name)Lib.Register("module/city/SettlementSurvival_Text")Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Text={Alarms={AnimalDiedFromIllness={de="{scarlet}Eure Nutztiere sterben an Krankheiten!",en="{scarlet}Your farm animals succumb to the plague!",fr="{scarlet}Vos animaux de ferme succombent à la peste!"},BuildingBurning={de="{scarlet}Brände wüten in Eurer Stadt!",en="{scarlet}Fires are raging in your city!",fr="{scarlet}Les incendies font rage dans votre ville !"},SettlerTemperature={de="{scarlet}Eure Siedler haben kein Feuerholz und frieren!",en="{scarlet}Your settlers lack of firewood to warm themselves!",fr="{scarlet}Vos colons manquent de bois de chauffage pour se réchauffer!"},SettlerNegligence={de="{scarlet}Eure Siedler verwahrlosen und werden krank!",en="{scarlet}Your settlers are neglected and getting sick!",fr="{scarlet}Vos colons sont négligés et tombent malades!"},SettlerDiedFromHunger={de="{scarlet}Eure Siedler haben nichts zu essen und verhungern!",en="{scarlet}Your settlers are starving to death!",fr="{scarlet}Vos colons meurent de faim!"},SettlerDiedFromIllness={de="{scarlet}Eure Siedler sterben an Krankheiten!",en="{scarlet}Your settlers succumb to the plague!",fr="{scarlet}Vos colons succombent à la peste!"}},Messages={BuildingMourning={de="Keine Baumaßnahmen möglich, solange Siedler trauern.",en="No construction work possible as long as settlers mourn.",fr="Aucun travail de construction possible tant que les colons pleurent."}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/SettlementSurvival_API")function AnimalPlagueActivate(bM)Lib.SettlementSurvival.Global.AnimalPlague.IsActive=bM==true end;API.AnimalPlagueActivate=AnimalPlagueActivate;function AnimalPlagueActivateForAI(bM)Lib.SettlementSurvival.Global.AnimalPlague.AffectAI=bM==true end;API.AnimalPlagueActivateForAI=AnimalPlagueActivateForAI;function AnimalInfectionActivateAutomatic(bM)Lib.SettlementSurvival.Global.AnimalPlague.AnimalsBecomeSick=bM==true end;API.AnimalInfectionActivateAutomatic=AnimalInfectionActivateAutomatic;function AnimalPlagueSetDeathInterval(kx)Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer = %d]],kx)end;API.AnimalPlagueSetDeathInterval=AnimalPlagueSetDeathInterval;function AnimalPlagueSetDeathChance(ky)Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance = %d]],ky)end;API.AnimalPlagueSetDeathChance=AnimalPlagueSetDeathChance;function AnimalPlagueSetInfectionInterval(kx)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer = %d]],kx)end;API.AnimalPlagueSetInfectionInterval=AnimalPlagueSetInfectionInterval;function AnimalPlagueSetInfectionChance(ky)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance = %d]],ky)end;API.AnimalPlagueSetInfectionChance=AnimalPlagueSetInfectionChance;function HotWeatherActivate(bM)Lib.SettlementSurvival.Global.HotWeather.IsActive=bM==true end;API.HotWeatherActivate=HotWeatherActivate;function HotWeatherActivateForAI(bM)Lib.SettlementSurvival.Global.HotWeather.AffectAI=bM==true end;API.HotWeatherActivateForAI=HotWeatherActivateForAI;function HotWeatherSetTemperature(kz)Lib.SettlementSurvival.Shared.HotWeather.Temperature=kz;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.Temperature = %d]],kz)end;API.HotWeatherSetTemperature=HotWeatherSetTemperature;function HotWeatherSetIgnitionChance(ky)Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance = %d]],ky)end;API.HotWeatherSetIgnitionChance=HotWeatherSetIgnitionChance;function ColdWeatherActivate(bM)Lib.SettlementSurvival.Global.ColdWeather.IsActive=bM==true end;API.ColdWeatherActivate=ColdWeatherActivate;function ColdWeatherActivateForAI(bM)Lib.SettlementSurvival.Global.ColdWeather.AffectAI=bM==true end;API.ColdWeatherActivateForAI=ColdWeatherActivateForAI;function ColdWeatherSetTemperature(kz)Lib.SettlementSurvival.Shared.ColdWeather.Temperature=kz;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.Temperature = %d]],kz)end;API.ColdWeatherSetTemperature=ColdWeatherSetTemperature;function ColdWeatherSetConsumptionInterval(kx)Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer = %d]],kx)end;API.ColdWeatherSetConsumptionInterval=ColdWeatherSetConsumptionInterval;function ColdWeatherSetInfectionChance(ky)Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance = %d]],ky)end;API.ColdWeatherSetInfectionChance=ColdWeatherSetInfectionChance;function FamineActivate(bM)Lib.SettlementSurvival.Global.Famine.IsActive=bM==true end;API.FamineActivate=FamineActivate;function FamineActivateForAI(bM)Lib.SettlementSurvival.Global.Famine.AffectAI=bM==true end;API.FamineActivateForAI=FamineActivateForAI;function FamineSetDeathInterval(kx)Lib.SettlementSurvival.Shared.Famine.DeathTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathTimer = %d]],kx)end;API.FamineSetDeathInterval=FamineSetDeathInterval;function FamineSetDeathChance(ky)Lib.SettlementSurvival.Shared.Famine.DeathChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathChance = %d]],ky)end;API.FamineSetDeathChance=FamineSetDeathChance;function NegligenceActivate(bM)Lib.SettlementSurvival.Global.Negligence.IsActive=bM==true end;API.NegligenceActivate=NegligenceActivate;function NegligenceActivateForAI(bM)Lib.SettlementSurvival.Global.Negligence.AffectAI=bM==true end;API.NegligenceActivateForAI=NegligenceActivateForAI;function NegligenceSetInfectionInterval(kx)Lib.SettlementSurvival.Shared.Negligence.InfectionTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionTimer = %d]],kx)end;API.NegligenceSetInfectionInterval=NegligenceSetInfectionInterval;function NegligenceSetInfectionChance(ky)Lib.SettlementSurvival.Shared.Negligence.InfectionChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionChance = %d]],ky)end;API.NegligenceSetInfectionChance=NegligenceSetInfectionChance;function PlagueActivate(bM)Lib.SettlementSurvival.Global.Plague.IsActive=bM==true end;API.PlagueActivate=PlagueActivate;function PlagueActivateForAI(bM)Lib.SettlementSurvival.Global.Plague.AffectAI=bM==true end;API.PlagueActivateForAI=PlagueActivateForAI;function PlagueSetDeathInterval(kx)Lib.SettlementSurvival.Shared.Plague.DeathTimer=kx;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathTimer = %d]],kx)end;API.PlagueSetDeathInterval=PlagueSetDeathInterval;function PlagueSetDeathChance(ky)Lib.SettlementSurvival.Shared.Plague.DeathChance=ky;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathChance = %d]],ky)end;API.PlagueSetDeathChance=PlagueSetDeathChance;Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Name="SettlementSurvival"Lib.SettlementSurvival.Global={AnimalPlague={AnimalsBecomeSick=false,IsActive=false,AffectAI=false},Famine={IsActive=false,AffectAI=false},ColdWeather={IsActive=false,AffectAI=false},HotWeather={IsActive=false,AffectAI=false},Negligence={IsActive=false,AffectAI=false},Plague={IsActive=false,AffectAI=false},SuspendedSettlers={}}Lib.SettlementSurvival.Local={SuspendedSettlers={}}Lib.SettlementSurvival.Shared={AnimalPlague={InfectionChance=6,InfectionTimer=60,DeathChance=12,DeathTimer=30},ColdWeather={ConsumptionFactor=0.01,ConsumptionTimer=30,Temperature=5,InfectionChance=12},HotWeather={IgnitionChance=5,IgnitionTimer=30,Temperature=30},Famine={DeathChance=6,DeathTimer=30},Negligence={InfectionChance=6,InfectionTimer=90},Plague={DeathChance=12,DeathTimer=30},SuspendedSettlers={MourningTime=5*60}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/city/SettlementSurvival_API")Lib.Require("module/city/SettlementSurvival_Text")Lib.Register("module/city/SettlementSurvival")function Lib.SettlementSurvival.Global:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")for n=1,8 do self.AnimalPlague[n]={}self.ColdWeather[n]={Consumption=0}self.Famine[n]={}self.Negligence[n]={}self.Plague[n]={}self.SuspendedSettlers[n]={}end;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()local kA=Logic.GetCurrentTurn()Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(kA)Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(kA)Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(kA)Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(kA)Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(kA)Lib.SettlementSurvival.Global:ControlAnimalInfections(kA)Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(kA)Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(kA)Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(kA)end)Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Global:OnSaveGameLoaded()self:RestoreSettlerSuspension()end;function Lib.SettlementSurvival.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.FireAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aw==Report.FireAlarmActivated_Internal then self:RestoreSettlerSuspension()elseif aw==Report.RepairAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aw==Report.ReRepairAlarmActivated_Internal then self:RestoreSettlerSuspension()end end;function Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local kC={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local kD={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local kE=Array_Append(kC,kD)for f=1,#kE do if not self.AnimalPlague[n][kE[f]]and Logic.IsFarmAnimalInPasture(kE[f])and Logic.IsFarmAnimalIll(kE[f])then self.AnimalPlague[n][kE[f]]={gu}end end;for kF,h in pairs(self.AnimalPlague[n])do if not IsExisting(kF)or not Logic.IsFarmAnimalInPasture(kF)or not Logic.IsFarmAnimalIll(kF)then self.AnimalPlague[n][kF]=nil end end;local kG=Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer;local kH=false;if gu%kG==0 then for kF,gk in pairs(self.AnimalPlague[n])do local kI=Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)kI=kI/2 end;if kI>=1 and math.random(1,100)<=math.min(kI,100)then SendReport(Report.AnimalDiedFromIllness,kF)SendReportToLocal(Report.AnimalDiedFromIllness,kF)SetHealth(kF,0)kH=true end end end;if kH then self:Print(n,Lib.SettlementSurvival.Text.Alarms.AnimalDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(kB)if not Lib.LifestockSystem or not Lib.LifestockSystem.Global.IsInstalled then if Logic.GetTime()%10==0 then local kJ=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(kJ)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_CattlePasture,A,B,900,1)if IsExisting(kK)then local hf=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hf-1)end end;local kL=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(kL)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_SheepPasture,A,B,900,1)if IsExisting(kK)then local hf=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hf-1)end end end end end;function Lib.SettlementSurvival.Global:ControlAnimalInfections(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.AnimalPlague.AnimalsBecomeSick then if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local kM=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer;if gu%kM==0 then local kC={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local kD={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local kE=Array_Append(kC,kD)local kI=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;for f=#kE,1,-1 do if Logic.IsFarmAnimalInPasture(kE[f])and not Logic.IsFarmAnimalIll(kE[f])then if math.random(1,100)<=kI then Logic.MakeFarmAnimalIll(kE[f])end end end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.HotWeather.IsActive and n>=1 and n<=8 then if self.HotWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()>=Lib.SettlementSurvival.Shared.HotWeather.Temperature then local kN=Lib.SettlementSurvival.Shared.HotWeather.IgnitionTimer;if gu%kN==0 then local kO={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local kP={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local kQ=Array_Append(kO,kP)local kR=false;for f=1,#kQ do if Logic.IsConstructionComplete(kQ[f])==1 and not Logic.IsBurning(kQ[f])then local kS=Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance;if math.random(1,100)<=kS then Logic.DEBUG_SetBuildingOnFire(kQ[f],50)kR=true end end end;if kR then self:Print(n,Lib.SettlementSurvival.Text.Alarms.BuildingBurning)end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.ColdWeather.IsActive and n>=1 and n<=8 then if self.ColdWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()<=Lib.SettlementSurvival.Shared.ColdWeather.Temperature then local kT=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer;if gu%kT==0 then local kU=0;local kO={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local kP={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local kQ=Array_Append(kO,kP)for f=1,#kQ do if Logic.IsConstructionComplete(kQ[f])==1 then local kV=0;for gk,kW in pairs({Logic.GetWorkersAndSpousesForBuilding(kQ[f])})do if not self:IsSettlerSuspended(kW)then kV=kV+1 end end;if Logic.IsNeedActive(kQ[f],Needs.Clothes)and Logic.GetNeedState(kQ[f],Needs.Clothes)>0.5 then kV=kV*0.5 end;kU=kU+kV end end;local kX=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionFactor*kU;local kY=GetPlayerResources(Goods.G_Wood,n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption+kX;if self.ColdWeather[n].Consumption>1 then local kZ=math.floor(kX)AddGood(Goods.G_Wood,-1*math.min(kZ,kY),n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption-kZ end;if kX>kY then local k_=Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance;for f=1,#kQ do if math.random(1,100)<=k_ then Logic.MakeBuildingIll(kQ[f])end end;self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerTemperature)end end end end end end;function Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.Negligence.IsActive and n>=1 and n<=8 then if self.Negligence.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local l0={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local l1={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}l1=Array_Append(l0,l1)for f=1,#l1 do if not self.Negligence[n][l1[f]]and Logic.GetEntityType(l1[f])~=Entities.U_Pharmacist and(self:IsSettlerDirty(l1[f])or self:IsSettlerBored(l1[f]))and not self:IsSettlerSuspended(l1[f])and not Logic.IsIll(l1[f])then self.Negligence[n][l1[f]]={gu}end end;for kW,h in pairs(self.Negligence[n])do if not self:IsSettlerBored(kW)and not self:IsSettlerDirty(kW)then self.Negligence[n][kW]=nil end end;local kM=Lib.SettlementSurvival.Shared.Negligence.InfectionTimer;local kH=false;if gu%kM==0 then for kW,h in pairs(self.Negligence[n])do if h[1]+kM<gu then local kI=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;if math.random(1,100)<=kI then if not self:IsSettlerCarryingHygiene(kW)and not self:IsSettlerCarryingBeer(kW)and not self:IsSettlerSuspended(kW)then Logic.MakeSettlerIll(kW)kH=true end end end end end;if kH then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerNegligence)end end end end;function Lib.SettlementSurvival.Global:IsSettlerDirty(k)local s=GetID(k)local hp=Logic.GetSettlersWorkBuilding(s)return Logic.IsNeedCritical(hp,Needs.Hygiene)end;function Lib.SettlementSurvival.Global:IsSettlerBored(k)local s=GetID(k)local hp=Logic.GetSettlersWorkBuilding(s)return Logic.IsNeedCritical(hp,Needs.Entertainment)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingHygiene(k)local s=GetID(k)local l2=Logic.GetCurrentTaskList(s)return l2 and l2:find("_HYGIENE")end;function Lib.SettlementSurvival.Global:IsSettlerCarryingBeer(k)local s=GetID(k)local l2=Logic.GetCurrentTaskList(s)return l2 and l2:find("_ENTERTAINMENT")end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.Famine.IsActive and n>=1 and n<=8 then if self.Famine.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local l0={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local l1={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}l1=Array_Append(l0,l1)for f=1,#l1 do if not self.Famine[n][l1[f]]and self:IsSettlerHungry(l1[f])and not self:IsSettlerSuspended(l1[f])then self.Famine[n][l1[f]]={gu}end end;for kW,h in pairs(self.Famine[n])do if not IsExisting(kW)or not self:IsSettlerHungry(kW)then self.Famine[n][kW]=nil end end;local kG=Lib.SettlementSurvival.Shared.Famine.DeathTimer;local kH=false;if gu%kG==0 then for kW,h in pairs(self.Famine[n])do if not self:IsSettlerCarryingFood(kW)and not self:IsSettlerSuspended(kW)then local kI=Lib.SettlementSurvival.Shared.Famine.DeathChance;if kI>=1 and math.random(1,100)<=math.ceil(kI)then SendReport(Report.SettlerDiedFromStarvation,kW)SendReportToLocal(Report.SettlerDiedFromStarvation,kW)self:SuspendSettler(kW,true)kH=true end end end end;if kH then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromHunger)end end end end;function Lib.SettlementSurvival.Global:IsSettlerHungry(k)local s=GetID(k)local hp=Logic.GetSettlersWorkBuilding(s)return Logic.IsNeedCritical(hp,Needs.Nutrition)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingFood(k)local s=GetID(k)local l2=Logic.GetCurrentTaskList(s)return l2 and(l2:find("_NUTRITION")or l2:find("_FOOD"))end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(kB)local gu=math.floor(Logic.GetTime())local n=kB%10;if self.Plague.IsActive and n>=1 and n<=8 then if self.Plague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local l0={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local l1={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}l1=Array_Append(l0,l1)for f=1,#l1 do if not self.Plague[n][l1[f]]and Logic.GetEntityType(l1[f])~=Entities.U_Pharmacist and Logic.IsIll(l1[f])and not self:IsSettlerSuspended(l1[f])then self.Plague[n][l1[f]]={gu}end end;for kW,h in pairs(self.Plague[n])do if not IsExisting(kW)or not Logic.IsIll(kW)then self.Plague[n][kW]=nil end end;local kG=Lib.SettlementSurvival.Shared.Plague.DeathTimer;local kH=false;if gu%kG==0 then for kW,h in pairs(self.Plague[n])do if not self:IsSettlerCarryingMedicine(kW)and not self:IsSettlerSuspended(kW)then local kI=Lib.SettlementSurvival.Shared.Plague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)kI=kI/2 end;if kI>=1 and math.random(1,100)<=math.ceil(kI)then SendReport(Report.SettlerDiedFromIllness,kW)SendReportToLocal(Report.SettlerDiedFromIllness,kW)self:SuspendSettler(kW,true)kH=true end end end end;if kH then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:IsSettlerCarryingMedicine(k)local s=GetID(k)local l2=Logic.GetCurrentTaskList(s)return l2 and l2:find("_MEDICINE")end;function Lib.SettlementSurvival.Global:ResumeSettler(k)local s=GetID(k)local n=Logic.EntityGetPlayer(s)local cO=Logic.GetStoreHouse(n)if cO~=0 then Logic.SetTaskList(s,TaskLists.TL_WAIT_THEN_WALK)Logic.SetVisible(s,true)if self.SuspendedSettlers[n][s]then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,s)self.SuspendedSettlers[n][s]=nil end end end;function Lib.SettlementSurvival.Global:SuspendSettler(k,l3)local s=GetID(k)local n=Logic.EntityGetPlayer(s)local cO=Logic.GetStoreHouse(n)if cO~=0 then local hp=Logic.GetSettlersWorkBuilding(s)local l4={Logic.GetWorkersAndSpousesForBuilding(hp)}local l5=false;for f=1,#l4 do if not self:IsSettlerSuspended(k)then l5=true;break end end;if l5==false then Logic.SetNeedState(s,Needs.Nutrition,1.0)Logic.SetNeedState(s,Needs.Entertainment,1.0)Logic.SetNeedState(s,Needs.Clothes,1.0)Logic.SetNeedState(s,Needs.Hygiene,1.0)Logic.SetNeedState(s,Needs.Medicine,1.0)end;local A,B,C=Logic.EntityGetPos(cO)Logic.DEBUG_SetSettlerPosition(s,A,B)Logic.SetVisible(s,false)Logic.SetTaskList(s,TaskLists.TL_NPC_IDLE)if not self.SuspendedSettlers[n][s]then local l6=l3 and Logic.GetTime()or-1;ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = {%d}",n,s,l6)self.SuspendedSettlers[n][s]={l6}end end end;function Lib.SettlementSurvival.Global:IsSettlerSuspended(k)local s=GetID(k)local n=Logic.EntityGetPlayer(s)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][s]~=nil end;function Lib.SettlementSurvival.Global:HasSuspendedInhabitants(k)local hp=GetID(k)local l4={Logic.GetWorkersAndSpousesForBuilding(hp)}for f=1,#l4 do if self:IsSettlerSuspended(l4[f])then return true end end;return false end;function Lib.SettlementSurvival.Global:RestoreSettlerSuspension()for n=1,8 do for g,h in pairs(self.SuspendedSettlers[n])do if not IsExisting(g)then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,g)self.SuspendedSettlers[n][g]=nil else self:SuspendSettler(g)end end end end;function Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(kB)local l7=Lib.SettlementSurvival.Shared.SuspendedSettlers.MourningTime;local gu=Logic.GetTime()local n=kB%10;if n>=1 and n<=8 then for g,h in pairs(self.SuspendedSettlers[n])do if h[1]>-1 and h[1]+l7<=gu then self:ResumeSettler(g)DestroyEntity(g)end end end end;function Lib.SettlementSurvival.Global:Print(aa,bl)local bS=ConvertPlaceholders(Localize(bl))ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            GUI.ClearNotes()
            GUI.AddNote("%s")
        end
    ]],aa,bS)end;function Lib.SettlementSurvival.Local:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")self:OverwriteAlarmButtons()self:OverwriteGameCallbacks()self:OverwriteJumpToWorker()self:OverwriteUpgradeButton()for n=1,8 do self.SuspendedSettlers[n]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Local:OnSaveGameLoaded()end;function Lib.SettlementSurvival.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementSurvival.Local:OverwriteJumpToWorker()GUI_BuildingInfo.JumpToWorkerClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local n=GUI.GetPlayerID()local l8=GUI.GetSelectedEntity()local l9=0;local la;if Logic.IsBuilding(l8)==1 then l9=l8;la=false else if Logic.IsWorker(l8)==1 or Logic.IsSpouse(l8)==true or Logic.GetEntityType(l8)==Entities.U_Priest then l9=Logic.GetSettlersWorkBuilding(l8)la=true end end;if l9~=0 then local lb={Logic.GetWorkersAndSpousesForBuilding(l9)}for f=#lb,1,-1 do local kW=lb[f]if Lib.SettlementSurvival.Local.SuspendedSettlers[n]then if Lib.SettlementSurvival.Local.SuspendedSettlers[n][kW]then table.remove(lb,f)end end end;local lc;if g_CloseUpView.Active==false and la==true then lc=l8 else local ld=1;for f=1,#lb do if lb[f]==g_LastSelectedInhabitant then ld=f+1;break end end;lc=lb[ld]if lc==0 then lc=lb[ld+1]end end;if lc==nil then local A,B=Logic.GetEntityPosition(l9)g_LastSelectedInhabitant=nil;ShowCloseUpView(0,A,B)GUI.SetSelectedEntity(l9)else GUI.SetSelectedEntity(lc)ShowCloseUpView(lc)g_LastSelectedInhabitant=lc end end end end;function Lib.SettlementSurvival.Local:IsSettlerSuspended(k)local s=GetID(k)local n=Logic.EntityGetPlayer(s)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][s]~=nil end;function Lib.SettlementSurvival.Local:HasSuspendedInhabitants(k)local hp=GetID(k)local l4={Logic.GetWorkersAndSpousesForBuilding(hp)}for f=1,#l4 do if self:IsSettlerSuspended(l4[f])then return true end end;return false end;function Lib.SettlementSurvival.Local:OverwriteGameCallbacks()self.Orig_GameCallback_Feedback_OnBuildingBurning=GameCallback_Feedback_OnBuildingBurning;GameCallback_Feedback_OnBuildingBurning=function(aa,ag)Lib.SettlementSurvival.Local.Orig_GameCallback_Feedback_OnBuildingBurning(aa,ag)SendReportToGlobal(Report.FireAlarmActivated_Internal,ag)end;self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(g0,bi)if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(g0)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(g0)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(g0,bi)end end;function Lib.SettlementSurvival.Local:OverwriteAlarmButtons()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopFireAlarmClicked;GUI_BuildingButtons.StartStopFireAlarmClicked=function()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival()local s=GUI.GetSelectedEntity()if Logic.IsFireAlarmActiveAtBuilding(s)==true then SendReportToGlobal(Report.FireAlarmActivated_Internal,s)else SendReportToGlobal(Report.FireAlarmDeactivated_Internal,s)end end;GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopRepairAlarmClicked;GUI_BuildingButtons.StartStopRepairAlarmClicked=function()GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival()local s=GUI.GetSelectedEntity()if Logic.IsRepairAlarmActiveAtBuilding(s)==true then SendReportToGlobal(Report.ReRepairAlarmActivated_Internal,s)else SendReportToGlobal(Report.RepairAlarmDeactivated_Internal,s)end end end;function Lib.SettlementSurvival.Local:OverwriteUpgradeButton()GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival=GUI_BuildingButtons.UpgradeClicked;GUI_BuildingButtons.UpgradeClicked=function()local hp=GUI.GetSelectedEntity()if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(hp)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(hp)return end;GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival()end end;RegisterModule(Lib.SettlementSurvival.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/BriefingSystem_API")function StartBriefing(le,y,aa)if GUI then return end;local n=aa;if not n and not Framework.IsNetworkGame()then n=1 end;assert(y~=nil)assert(aa~=nil)assert(type(le)=="table","Briefing must be a table!")assert(#le>0,"Briefing does not contain pages!")for f=1,#le do assert(type(le[f])~="table"or le[f].__Legit,"A page is not initalized!")end;if le.EnableSky==nil then le.EnableSky=true end;if le.EnableFoW==nil then le.EnableFoW=false end;if le.EnableGlobalImmortality==nil then le.EnableGlobalImmortality=true end;if le.EnableBorderPins==nil then le.EnableBorderPins=false end;if le.RestoreGameSpeed==nil then le.RestoreGameSpeed=true end;if le.RestoreCamera==nil then le.RestoreCamera=true end;Lib.BriefingSystem.Global:StartBriefing(y,n,le)end;API.StartBriefing=StartBriefing;function IsBriefingActive(aa)if not IsLocalScript()then return Lib.BriefingSystem.Global:GetCurrentBriefing(aa)~=nil end;return Lib.BriefingSystem.Local:GetCurrentBriefing(aa)~=nil end;API.IsBriefingActive=IsBriefingActive;function GetFramePosition(k,lf)local A,B,C=Logic.EntityGetPos(GetID(k))return A,B,C+(lf or 0)end;function GetFrameVector(lg,lh,li,lj)local am,an,ao=Logic.EntityGetPos(GetID(lg))local aq,ar,as=Logic.EntityGetPos(GetID(li))return am,an,ao+(lh or 0),aq,ar,as+(lj or 0)end;function AddBriefingPages(le)Lib.BriefingSystem.Global:CreateBriefingGetPage(le)Lib.BriefingSystem.Global:CreateBriefingAddPage(le)Lib.BriefingSystem.Global:CreateBriefingAddMCPage(le)Lib.BriefingSystem.Global:CreateBriefingAddRedirect(le)local AP=function(lk)local ll;if type(lk)=="table"then if lk.MC then ll=le:AddMCPage(lk)else ll=le:AddPage(lk)end else ll=le:AddRedirect(lk)end;return ll end;local ASP=function(...)le.PageAnimation=le.PageAnimation or{}local Name,i0,bS,N;local lm=false;local jy=function()end;local ln=false;if#arg==3 and type(arg[1])=="string"or#arg>=4 and type(arg[4])=="boolean"then Name=table.remove(arg,1)end;i0=table.remove(arg,1)bS=table.remove(arg,1)if#arg>0 then lm=table.remove(arg,1)==true end;if#arg>0 then N=table.remove(arg,1)end;if#arg>0 then jy=table.remove(arg,1)end;if#arg>0 then ln=not table.remove(arg,1)end;local lo;if N then lo=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if N and Logic.IsSettler(GetID(N))==1 then lo=Logic.GetEntityOrientation(GetID(N))+90 end end;return le:AddPage{Name=Name,Title=i0,Text=bS,Action=jy,Position=N,DisableSkipping=ln,DialogCamera=lm,Rotation=lo}end;return AP,ASP end;API.AddBriefingPages=AddBriefingPages;function AP(f2)assert(false)end;function ASP(...)assert(false)end;Lib.BriefingSystem=Lib.BriefingSystem or{}Lib.BriefingSystem.Name="BriefingSystem"Lib.BriefingSystem.Global={Briefing={},BriefingQueue={},BriefingCounter=0}Lib.BriefingSystem.Local={ParallaxWidgets={{"/EndScreen/EndScreen/BackGround","/EndScreen/EndScreen"},{"/InGame/Root/EndScreen/BlackBG","/InGame/Root/EndScreen"},{"/InGame/Root/EndScreen/BG","/InGame/Root/EndScreen"},{"/InGame/Root/BlackStartScreen/BG","/InGame/Root/BlackStartScreen"}},Briefing={}}Lib.BriefingSystem.Text={NextButton={de="Weiter",en="Forward",fr="Continuer"},PrevButton={de="Zurück",en="Previous",fr="Retour"},EndButton={de="Beenden",en="Close",fr="Quitter"}}CONST_BRIEFING={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/BriefingSystem_API")Lib.Register("module/information/BriefingSystem")CinematicEventTypes.Briefing=2;function Lib.BriefingSystem.Global:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")for f=1,8 do self.BriefingQueue[f]={}end;RequestHiResJob(function()Lib.BriefingSystem.Global:UpdateQueue()Lib.BriefingSystem.Global:BriefingExecutionController()end)Lib.BriefingSystem.Local=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Global:OnSaveGameLoaded()end;function Lib.BriefingSystem.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then elseif aw==Report.BriefingStarted then self:NextPage(arg[1])elseif aw==Report.BriefingEnded then SendReportToLocal(Report.BriefingEnded,arg[1],arg[2])elseif aw==Report.BriefingPageShown then SendReportToLocal(Report.BriefingPageShown,arg[1],arg[2])elseif aw==Report.BriefingOptionSelected then self:OnOptionSelected(arg[1],arg[2])elseif aw==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartBriefing(f)then local fi=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fi and fi[1]==CinematicEventTypes.Briefing then self:NextBriefing(f)end end end end;function Lib.BriefingSystem.Global:BriefingExecutionController()for f=1,8 do if self.Briefing[f]and not self.Briefing[f].DisplayIngameCutscene then local lp=self.Briefing[f].CurrentPage;local ll=self.Briefing[f][lp]if ll and not ll.MC and ll.Duration>0 then if ll.Started+ll.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.BriefingSystem.Global:CreateBriefingGetPage(le)le.GetPage=function(self,lq)local ae=Lib.BriefingSystem.Global:GetPageIDByName(le.PlayerID,lq)return Lib.BriefingSystem.Global.Briefing[le.PlayerID][ae]end end;function Lib.BriefingSystem.Global:CreateBriefingAddPage(le)le.AddPage=function(self,lk)self.Length=(self.Length or 0)+1;le.PageAnimation=le.PageAnimation or{}le.PageParallax=le.PageParallax or{}local lr="Page"..#self+1;if lk.Name then lr=lk.Name else lk.Name=lr end;lk.__Legit=true;lk.Title=Localize(lk.Title or"")lk.Text=Localize(lk.Text or"")if lk.BigBars==nil then lk.BigBars=true end;if lk.Position then if not lk.Angle then lk.Angle=CONST_BRIEFING.CAMERA_ANGLEDEFAULT;if lk.DialogCamera then lk.Angle=CONST_BRIEFING.DLGCAMERA_ANGLEDEFAULT end end;if not lk.Rotation then lk.Rotation=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if lk.DialogCamera then lk.Rotation=CONST_BRIEFING.DLGCAMERA_ROTATIONDEFAULT end end;if not lk.Zoom then lk.Zoom=CONST_BRIEFING.CAMERA_ZOOMDEFAULT;if lk.DialogCamera then lk.Zoom=CONST_BRIEFING.DLGCAMERA_ZOOMDEFAULT end end;local ls,lt,lu,lv;if lk.FlyTo then ls=lk.FlyTo.Position or ls;lt=lk.FlyTo.Rotation or lt;lu=lk.FlyTo.Zoom or lu;lv=lk.FlyTo.Angle or lv end;le.PageAnimation[lr]={Clear=true,{lk.Duration or 1,lk.Position,lk.Rotation,lk.Zoom,lk.Angle,ls,lt,lu,lv}}end;if not lk.FOV then if lk.DialogCamera then lk.FOV=CONST_BRIEFING.DLGCAMERA_FOVDEFAULT else lk.FOV=CONST_BRIEFING.CAMERA_FOVDEFAULT end end;if not lk.Duration then if not lk.Position then lk.DisableSkipping=false;lk.Duration=-1 else if lk.DisableSkipping==nil then lk.DisableSkipping=false end;lk.Duration=lk.Text:len()*CONST_BRIEFING.TIMER_PER_CHAR;lk.Duration=lk.Duration<6 and 6 or lk.Duration<6 end end;lk.GetSelected=function(self)return 0 end;table.insert(self,lk)return lk end end;function Lib.BriefingSystem.Global:CreateBriefingAddMCPage(le)le.AddMCPage=function(self,lk)local ll=self:AddPage(lk)ll.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;if ll.MC then for f=1,#ll.MC do ll.MC[f][1]=Localize(ll.MC[f][1])ll.MC[f].ID=ll.MC[f].ID or f end;ll.BigBars=true;ll.DisableSkipping=true;ll.Duration=-1 end;return ll end end;function Lib.BriefingSystem.Global:CreateBriefingAddRedirect(le)le.AddRedirect=function(self,K)self.Length=(self.Length or 0)+1;local ll=K==nil and-1 or K;table.insert(self,ll)return ll end end;function Lib.BriefingSystem.Global:StartBriefing(y,aa,f2)self.BriefingQueue[aa]=self.BriefingQueue[aa]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(aa,CinematicEventTypes.Briefing,y,f2)end;function Lib.BriefingSystem.Global:EndBriefing(aa)Logic.SetGlobalInvulnerability(0)local lw=self.Briefing[aa]SendReport(Report.BriefingEnded,aa,lw.Name)if lw.Finished then lw:Finished()end;FinishCinematicEvent(lw.Name,aa)self.Briefing[aa]=nil end;function Lib.BriefingSystem.Global:NextBriefing(aa)if self:CanStartBriefing(aa)then local lx=Lib.UIEffects.Global:PopCinematicEventFromQueue(aa)assert(lx[1]==CinematicEventTypes.Briefing)StartCinematicEvent(lx[2],aa)local lw=lx[3]lw.Name=lx[2]lw.PlayerID=aa;lw.CurrentPage=0;self.Briefing[aa]=lw;self:TransformAnimations(aa)self:TransformParallaxes(aa)if lw.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Briefing[aa].Starting then self.Briefing[aa]:Starting()end;SendReportToLocal(Report.BriefingStarted,aa,lw.Name,lw)SendReport(Report.BriefingStarted,aa,lw.Name)end end;function Lib.BriefingSystem.Global:TransformAnimations(aa)if self.Briefing[aa].PageAnimation then for g,h in pairs(self.Briefing[aa].PageAnimation)do local lp=self:GetPageIDByName(aa,g)if lp~=0 then self.Briefing[aa][lp].Animations={}self.Briefing[aa][lp].Animations.Repeat=h.Repeat==true;self.Briefing[aa][lp].Animations.Clear=h.Clear==true;for f=1,#h,1 do local jq={}jq.Interpolation=h[f].Interpolation;jq.Duration=h[f][1]or 2*60;if h[f][4]and type(h[f][4])~="table"then jq.Start={Position=type(h[f][2])~="table"and{h[f][2],0}or h[f][2],Rotation=h[f][3]or CONST_BRIEFING.CAMERA_ROTATIONDEFAULT,Zoom=h[f][4]or CONST_BRIEFING.CAMERA_ZOOMDEFAULT,Angle=h[f][5]or CONST_BRIEFING.CAMERA_ANGLEDEFAULT}local ly=h[f][6]or jq.Start.Position;jq.End={Position=type(ly)~="table"and{ly,0}or ly,Rotation=h[f][7]or jq.Start.Rotation,Zoom=h[f][8]or jq.Start.Zoom,Angle=h[f][9]or jq.Start.Angle}table.insert(self.Briefing[aa][lp].Animations,jq)else jq.AnimFrames={}for bu=2,#h[f]do table.insert(jq.AnimFrames,h[f][bu])end end;table.insert(self.Briefing[aa][lp].Animations,jq)end end end;self.Briefing[aa].PageAnimation=nil end end;function Lib.BriefingSystem.Global:TransformParallaxes(aa)if self.Briefing[aa].PageParallax then for g,h in pairs(self.Briefing[aa].PageParallax)do local lp=self:GetPageIDByName(aa,g)if lp~=0 then self.Briefing[aa][lp].Parallax={}self.Briefing[aa][lp].Parallax.Clear=h.Clear==true;for f=1,4,1 do if h[f]then local jq={}jq.Image=h[f][1]jq.Interpolation=h[f].Interpolation;jq.Duration=h[f][2]or 2*60;jq.AnimData={}for bu=3,#h[f]do table.insert(jq.AnimData,h[f][bu])end;self.Briefing[aa][lp].Parallax[f]=jq end end end end;self.Briefing[aa].PageParallax=nil end end;function Lib.BriefingSystem.Global:NextPage(aa)if self.Briefing[aa]==nil then return end;self.Briefing[aa].CurrentPage=self.Briefing[aa].CurrentPage+1;local lp=self.Briefing[aa].CurrentPage;if lp==-1 or lp==0 then self:EndBriefing(aa)return end;local ll=self.Briefing[aa][lp]if type(ll)=="table"then if lp<=#self.Briefing[aa]then self.Briefing[aa][lp].Started=Logic.GetTime()self.Briefing[aa][lp].Duration=ll.Duration or-1;if self.Briefing[aa][lp].Action then self.Briefing[aa][lp]:Action()end;self:DisplayPage(aa,lp)else self:EndBriefing(aa)end elseif type(ll)=="number"or type(ll)=="string"then local av=self:GetPageIDByName(aa,self.Briefing[aa][lp])self.Briefing[aa].CurrentPage=av-1;self:NextPage(aa)else self:EndBriefing(aa)end end;function Lib.BriefingSystem.Global:DisplayPage(aa,lz)if self.Briefing[aa]==nil then return end;local ll=self.Briefing[aa][lz]if type(ll)=="table"then local lp=self.Briefing[aa].CurrentPage;if ll.MC then for f=1,#ll.MC,1 do if type(ll.MC[f][3])=="function"then self.Briefing[aa][lp].MC[f].Visible=ll.MC[f][3](aa,lp,f)end end end end;SendReport(Report.BriefingPageShown,aa,lz)end;function Lib.BriefingSystem.Global:SkipButtonPressed(aa,lz)if not self.Briefing[aa]then return end;local lp=self.Briefing[aa].CurrentPage;if self.Briefing[aa][lp].OnForward then self.Briefing[aa][lp]:OnForward()end;self:NextPage(aa)end;function Lib.BriefingSystem.Global:OnOptionSelected(aa,lA)if self.Briefing[aa]==nil then return end;local lp=self.Briefing[aa].CurrentPage;if type(self.Briefing[aa][lp])~="table"then return end;local ll=self.Briefing[aa][lp]if ll.MC then local lB;for f=1,#ll.MC,1 do if ll.MC[f].ID==lA then lB=ll.MC[f]end end;if lB~=nil then local av=lB[2]if type(lB[2])=="function"then av=lB[2](aa,lp,lA)end;self.Briefing[aa][lp].MC.Selected=lB.ID;self.Briefing[aa].CurrentPage=self:GetPageIDByName(aa,av)-1;self:NextPage(aa)end end end;function Lib.BriefingSystem.Global:GetCurrentBriefing(aa)return self.Briefing[aa]end;function Lib.BriefingSystem.Global:GetCurrentBriefingPage(aa)if self.Briefing[aa]then local lp=self.Briefing[aa].CurrentPage;return self.Briefing[aa][lp]end end;function Lib.BriefingSystem.Global:GetPageIDByName(aa,y)if type(y)=="string"then if self.Briefing[aa]~=nil then for f=1,#self.Briefing[aa],1 do if type(self.Briefing[aa][f])=="table"and self.Briefing[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.BriefingSystem.Global:CanStartBriefing(aa)return self.Briefing[aa]==nil and not IsCinematicEventActive(aa)and self.LoadscreenClosed end;function Lib.BriefingSystem.Local:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")self:OverrideThroneRoomFunctions()Lib.BriefingSystem.Global=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Local:OnSaveGameLoaded()end;function Lib.BriefingSystem.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then elseif aw==Report.BriefingStarted then self:StartBriefing(arg[1],arg[2],arg[3])elseif aw==Report.BriefingEnded then self:EndBriefing(arg[1],arg[2])elseif aw==Report.BriefingPageShown then self:DisplayPage(arg[1],arg[2])elseif aw==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Local:StartBriefing(aa,lC,le)if GUI.GetPlayerID()~=aa then return end;self.Briefing[aa]=le;self.Briefing[aa].LastSkipButtonPressed=0;self.Briefing[aa].CurrentPage=0;local ds,dt=Camera.RTS_GetLookAtPosition()local lo=Camera.RTS_GetRotationAngle()local lD=Camera.RTS_GetZoomFactor()local lE=Game.GameTimeGetFactor(aa)self.Briefing[aa].Backup={Camera={ds,dt,lo,lD},Speed=lE}DeactivateNormalInterface(aa)DeactivateBorderScroll(aa)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,1)end;self:ActivateCinematicMode(aa)end;function Lib.BriefingSystem.Local:EndBriefing(aa,lC)if GUI.GetPlayerID()~=aa then return end;local lw=self.Briefing[aa]if lw.RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,lw.Backup.Speed)end;if lw.RestoreCamera then Camera.RTS_SetLookAtPosition(lw.Backup.Camera[1],lw.Backup.Camera[2])Camera.RTS_SetRotationAngle(lw.Backup.Camera[3])Camera.RTS_SetZoomFactor(lw.Backup.Camera[4])end;self:DeactivateCinematicMode(aa)ActivateNormalInterface(aa)ActivateBorderScroll(aa)Lib.UITools.Widget:UpdateHiddenWidgets()self.Briefing[aa]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.BriefingSystem.Local:DisplayPage(aa,lz)if GUI.GetPlayerID()~=aa then return end;self.Briefing[aa].AnimationQueue=self.Briefing[aa].AnimationQueue or{}self.Briefing[aa].ParallaxLayers=self.Briefing[aa].ParallaxLayers or{}self.Briefing[aa].CurrentPage=lz;if type(self.Briefing[aa][lz])=="table"then self.Briefing[aa][lz].Started=Logic.GetTime()self:SetPageFarClipPlane(aa,lz)self:DisplayPageBars(aa,lz)self:DisplayPageTitle(aa,lz)self:DisplayPageText(aa,lz)self:DisplayPageControls(aa,lz)self:DisplayPageAnimation(aa,lz)self:DisplayPageFader(aa,lz)self:DisplayPageParallaxes(aa,lz)if self.Briefing[aa][lz].MC then self:DisplayPageOptionsDialog(aa,lz)end end end;function Lib.BriefingSystem.Local:SetPageFarClipPlane(aa,lz)ResetRenderDistance()local ll=self.Briefing[aa][lz]if ll.FarClipPlane then SetRenderDistance(ll.FarClipPlane)end end;function Lib.BriefingSystem.Local:DisplayPageBars(aa,lz)local ll=self.Briefing[aa][lz]local lF=ll.BarOpacity~=nil and ll.BarOpacity or 1;local lG=255*lF;local lH=255*lF;local lI=ll.BigBars and 1 or 0;local lJ=ll.BigBars and 0 or 1;if lF==0 then lI=0;lJ=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",lI)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",lJ)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",lI)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",lJ)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,lG)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,lG)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,lH)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,lH)end;function Lib.BriefingSystem.Local:DisplayPageTitle(aa,lz)local ll=self.Briefing[aa][lz]local lK="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(lK,"")if ll.Title then local i0=ConvertPlaceholders(Localize(ll.Title))if i0:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then i0=XGUIEng.GetStringTableText(i0)end;if i0:sub(1,1)~="{"then i0="{@color:255,250,0,255}{center}"..i0 end;XGUIEng.SetText(lK,i0)end end;function Lib.BriefingSystem.Local:DisplayPageText(aa,lz)local ll=self.Briefing[aa][lz]local lL="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(lL,"")if ll.Text then local bS=ConvertPlaceholders(Localize(ll.Text))if bS:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bS=XGUIEng.GetStringTableText(bS)end;if bS:sub(1,1)~="{"then bS="{center}"..bS end;if not ll.BigBars then bS="{cr}{cr}{cr}"..bS end;XGUIEng.SetText(lL,bS)end end;function Lib.BriefingSystem.Local:DisplayPageControls(aa,lz)local ll=self.Briefing[aa][lz]local lM=1;lM=(ll.Duration==nil or ll.Duration==-1)and 1 or 0;if ll.DisableSkipping~=nil then lM=ll.DisableSkipping and 0 or 1 end;if ll.MC~=nil then lM=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",lM)end;function Lib.BriefingSystem.Local:DisplayPageAnimation(aa,lz)local ll=self.Briefing[aa][lz]if ll.Animations then if ll.Animations.Clear then self.Briefing[aa].CurrentAnimation=nil;self.Briefing[aa].AnimationQueue={}end;for f=1,#ll.Animations,1 do local lN=table.copy(ll.Animations[f])table.insert(self.Briefing[aa].AnimationQueue,lN)end end end;function Lib.BriefingSystem.Local:DisplayPageFader(aa,lz)local ll=self.Briefing[aa][lz]g_Fade.To=ll.FaderAlpha or 0;local lO=ll.FadeIn;if lO then FadeIn(lO)end;local lP=ll.FadeOut;if lP then self.Briefing[aa].FaderJob=RequestHiResJob(function(gB,lQ)if Logic.GetTimeMs()>gB-lQ*1000 then FadeOut(lQ)return true end end,Logic.GetTimeMs()+(ll.Duration or 0)*1000,lP)end end;function Lib.BriefingSystem.Local:DisplayPageParallaxes(aa,lz)local ll=self.Briefing[aa][lz]if ll.Parallax then if ll.Parallax.Clear then for f=1,#self.ParallaxWidgets do XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)end;self.Briefing[aa].ParallaxLayers={}end;for f=1,4,1 do if ll.Parallax[f]then local lN=table.copy(ll.Parallax[f])lN.Started=XGUIEng.GetSystemTime()self.Briefing[aa].ParallaxLayers[f]=lN end end end end;function Lib.BriefingSystem.Local:ControlParallaxes(aa)if self.Briefing[aa].ParallaxLayers then local gu=XGUIEng.GetSystemTime()for ca,aU in pairs(self.Briefing[aa].ParallaxLayers)do local is=self.ParallaxWidgets[ca][1]local fn={GUI.GetScreenSize()}local ki=math.min(math.lerp(aU.Started,gu,aU.Duration),1)if aU.Interpolation then ki=math.min(aU:Interpolation(gu),1)end;local lR=aU.Image;if type(lR)=="function"then lR=aU:Image(ki,aU.Started,gu,aU.Duration)end;if type(lR)=="table"then local lS=math.min(math.ceil(#lR*ki),#lR)lR=lR[lS]end;local es,eu,et,ev,lT=0,0,1,1,255;if aU.AnimData then local lU=#aU.AnimData;if aU.AnimData[3]and type(aU.AnimData[3])~="table"then es,eu,et,ev,lT=unpack(aU.AnimData)else if#aU.AnimData>=4 then local lV=math.floor(ki*(lU-3))+1;lV=math.min(lV,lU-3)es,eu,et,ev,lT=self:CubicParallaxInterpolation(aU.AnimData[lV],aU.AnimData[lV+1],aU.AnimData[lV+2],aU.AnimData[lV+3],ki)elseif#aU.AnimData>=2 then local lV=math.floor(ki*(lU-1))+1;lV=math.min(lV,lU-1)es,eu,et,ev,lT=self:LinearParallaxInterpolation(aU.AnimData[lV],aU.AnimData[lV+1],ki)end end end;if fn[1]/fn[2]<1.6 then es=es+es/0.125;et=et-et*0.125 end;XGUIEng.SetMaterialAlpha(is,1,lT or 255)XGUIEng.SetMaterialTexture(is,1,lR)XGUIEng.SetMaterialUV(is,1,es,eu,et,ev)end end end;function Lib.BriefingSystem.Local:DisplayPageOptionsDialog(aa,lz)local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local lW={GUI.GetScreenSize()}local ll=self.Briefing[aa][lz]local lX=XGUIEng.GetWidgetID(is.."/ListBox")self.Briefing[aa].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(is)}XGUIEng.ListBoxPopAll(lX)self.Briefing[aa].MCSelectionOptionsMap={}for f=1,#ll.MC,1 do if ll.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(lX,ll.MC[f][1])table.insert(self.Briefing[aa].MCSelectionOptionsMap,ll.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(lX,0)local lY={XGUIEng.GetWidgetScreenSize(is)}local lZ=math.ceil(lW[1]/2-lY[1]/2)local l_=math.ceil(lW[2]-(lY[2]-10))if ll.Text and ll.Text~=""then l_=math.ceil(lW[2]/2-lY[2]/2)end;XGUIEng.SetWidgetScreenPosition(is,lZ,l_)XGUIEng.PushPage(is,false)XGUIEng.ShowWidget(is,1)self.Briefing[aa].MCSelectionIsShown=true end;function Lib.BriefingSystem.Local:OnOptionSelected(aa)local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local N=self.Briefing[aa].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(is,N[1],N[2])XGUIEng.ShowWidget(is,0)XGUIEng.PopPage()local m0=XGUIEng.ListBoxGetSelectedIndex(is.."/ListBox")+1;local m1=self.Briefing[aa].MCSelectionOptionsMap[m0]SendReport(Report.BriefingOptionSelected,aa,m1)SendReportToGlobal(Report.BriefingOptionSelected,aa,m1)end;function Lib.BriefingSystem.Local:ThroneRoomCameraControl(aa,lk)if lk then self:ControlCameraAnimation(aa)local m2=type(lk)=="table"and lk.FOV or 42;local m3,m4,m5,m6,m7,m8=0,0,0,0,0,0;local m9=self.Briefing[aa].CurrentAnimation;if m9 and m9.AnimFrames then if#m9.AnimFrames>=4 then local ki=self:GetInterpolationFactor(aa)local lU=#m9.AnimFrames;local lV=math.floor(ki*(lU-3))+1;lV=math.min(lV,#m9.AnimFrames-3)m3,m4,m5,m6,m7,m8=self:CubicInterpolation(m9.AnimFrames[lV],m9.AnimFrames[lV+1],m9.AnimFrames[lV+2],m9.AnimFrames[lV+3],ki)elseif#m9.AnimFrames>=2 then local ki=self:GetInterpolationFactor(aa)local lU=#m9.AnimFrames;local lV=math.floor(ki*(lU-1))+1;lV=math.min(lV,#m9.AnimFrames-1)m3,m4,m5,m6,m7,m8=self:LinearInterpolation(m9.AnimFrames[lV],m9.AnimFrames[lV+1],ki)else m3,m4,m5,m6,m7,m8=unpack(m9.AnimFrames[1])end else m3,m4,m5=self:GetPagePosition(aa)m6,m7,m8=self:GetPageLookAt(aa)if m3 and not m6 then m6,m7,m8,m3,m4,m5,m2=self:GetCameraProperties(aa,m2)end end;Camera.ThroneRoom_SetPosition(m3,m4,m5)Camera.ThroneRoom_SetLookAt(m6,m7,m8)Camera.ThroneRoom_SetFOV(m2)self:ControlParallaxes(aa)if self.Briefing[aa].MCSelectionIsShown then local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(is)==0 then self.Briefing[aa].MCSelectionIsShown=false;self:OnOptionSelected(aa)end end;local ma=Localize(Lib.BriefingSystem.Text.NextButton)local lp=self.Briefing[aa].CurrentPage;if lp==#self.Briefing[aa]or self.Briefing[aa][lp+1]==-1 then ma=Localize(Lib.BriefingSystem.Text.EndButton)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..ma)end end;function Lib.BriefingSystem.Local:ControlCameraAnimation(aa)if self.Briefing[aa].CurrentAnimation then local gu=XGUIEng.GetSystemTime()local lN=self.Briefing[aa].CurrentAnimation;if gu>lN.Started+lN.Duration then if#self.Briefing[aa].AnimationQueue>0 then self.Briefing[aa].CurrentAnimation=nil end end end;if self.Briefing[aa].CurrentAnimation==nil then if self.Briefing[aa].AnimationQueue and#self.Briefing[aa].AnimationQueue>0 then local lp=self.Briefing[aa].CurrentPage;local ll=self.Briefing[aa][lp]local fi=table.remove(self.Briefing[aa].AnimationQueue,1)if ll and ll.Animations and ll.Animations.Repeat then table.insert(self.Briefing[aa].AnimationQueue,fi)end;fi.Started=XGUIEng.GetSystemTime()self.Briefing[aa].CurrentAnimation=fi end end end;function Lib.BriefingSystem.Local:GetPagePosition(aa)local A,B,C=0,0,0;local N,mb;if self.Briefing[aa].CurrentAnimation then N=self.Briefing[aa].CurrentAnimation.Start.Position;mb=self.Briefing[aa].CurrentAnimation.End;A,B,C=self:ConvertPosition(N)if mb then local mc,md,me=self:ConvertPosition(mb.Position)if mc and md and me then A=A+(mc-A)*self:GetInterpolationFactor(aa)B=B+(md-B)*self:GetInterpolationFactor(aa)C=C+(me-C)*self:GetInterpolationFactor(aa)end end end;return A,B,C end;function Lib.BriefingSystem.Local:GetPageLookAt(aa)local LookAt,mb;if self.Briefing[aa].CurrentAnimation then LookAt=self.Briefing[aa].CurrentAnimation.Start.LookAt;mb=self.Briefing[aa].CurrentAnimation.End end;local A,B,C=self:ConvertPosition(LookAt)if mb and A then local mc,md,me=self:ConvertPosition(mb.LookAt)if mc and md and me then A=A+(mc-A)*self:GetInterpolationFactor(aa)B=B+(md-B)*self:GetInterpolationFactor(aa)C=C+(me-C)*self:GetInterpolationFactor(aa)end end;return A,B,C end;function Lib.BriefingSystem.Local:ConvertPosition(x)local A,B,C;if x and type(x)=="table"then if x.X then A=x.X;B=x.Y;C=x.Z elseif x[3]then A=x[1]B=x[2]C=x[3]else A,B,C=Logic.EntityGetPos(GetID(x[1]))C=C+(x[2]or 0)end end;return A,B,C end;function Lib.BriefingSystem.Local:GetInterpolationFactor(aa)if self.Briefing[aa].CurrentAnimation then local gu=XGUIEng.GetSystemTime()if self.Briefing[aa].CurrentAnimation.Interpolation then return self.Briefing[aa].CurrentAnimation:Interpolation(gu)end;local ki=math.lerp(self.Briefing[aa].CurrentAnimation.Started,gu,self.Briefing[aa].CurrentAnimation.Duration)return math.min(ki,1)end;return 1 end;function Lib.BriefingSystem.Local:LinearInterpolation(D,E,mf)local N={PX=(1-mf)*D[1]+mf*E[1],PY=(1-mf)*D[2]+mf*E[2],PZ=(1-mf)*D[3]+mf*E[3]}local LookAt={LX=(1-mf)*D[4]+mf*E[4],LY=(1-mf)*D[5]+mf*E[5],LZ=(1-mf)*D[6]+mf*E[6]}return N.PX,N.PY,N.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:LinearParallaxInterpolation(mg,mh,mf)mf=math.max(0,math.min(1,mf))local mi={U0=(1-mf)*mg[1]+mf*mh[1],V0=(1-mf)*mg[2]+mf*mh[2],U1=(1-mf)*mg[3]+mf*mh[3],V1=(1-mf)*mg[4]+mf*mh[4],A=(1-mf)*mg[5]+mf*mh[5]}return mi.U0,mi.V0,mi.U1,mi.V1,mi.A end;function Lib.BriefingSystem.Local:CubicInterpolation(D,E,mj,mk,mf)local N={PX=0.5*(2*E[1]+(mj[1]-D[1])*mf+(2*D[1]-5*E[1]+4*mj[1]-mk[1])*mf^2+(3*(E[1]-mj[1])+mk[1]-D[1])*mf^3),PY=0.5*(2*E[2]+(mj[2]-D[2])*mf+(2*D[2]-5*E[2]+4*mj[2]-mk[2])*mf^2+(3*(E[2]-mj[2])+mk[2]-D[2])*mf^3),PZ=0.5*(2*E[3]+(mj[3]-D[3])*mf+(2*D[3]-5*E[3]+4*mj[3]-mk[3])*mf^2+(3*(E[3]-mj[3])+mk[3]-D[3])*mf^3)}local LookAt={LX=0.5*(2*E[1]+(mj[4]-D[4])*mf+(2*D[4]-5*E[4]+4*mj[4]-mk[4])*mf^2+(3*(E[4]-mj[4])+mk[4]-D[4])*mf^3),LY=0.5*(2*E[5]+(mj[5]-D[5])*mf+(2*D[5]-5*E[5]+4*mj[5]-mk[5])*mf^2+(3*(E[5]-mj[5])+mk[5]-D[5])*mf^3),LZ=0.5*(2*E[6]+(mj[6]-D[6])*mf+(2*D[6]-5*E[6]+4*mj[6]-mk[6])*mf^2+(3*(E[6]-mj[6])+mk[6]-D[6])*mf^3)}return N.PX,N.PY,N.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:CubicParallaxInterpolation(mg,mh,ml,mm,mf)mf=math.max(0,math.min(1,mf))local mi={U0=0.5*(2*mh[1]+(ml[1]-mg[1])*mf+(2*mg[1]-5*mh[1]+4*ml[1]-mm[1])*mf^2+(3*(mh[1]-ml[1])+mm[1]-mg[1])*mf^3),V0=0.5*(2*mh[2]+(ml[2]-mg[2])*mf+(2*mg[2]-5*mh[2]+4*ml[2]-mm[2])*mf^2+(3*(mh[2]-ml[2])+mm[2]-mg[2])*mf^3),U1=0.5*(2*mh[3]+(ml[3]-mg[3])*mf+(2*mg[3]-5*mh[3]+4*ml[3]-mm[3])*mf^2+(3*(mh[3]-ml[3])+mm[3]-mg[3])*mf^3),V1=0.5*(2*mh[4]+(ml[4]-mg[4])*mf+(2*mg[4]-5*mh[4]+4*ml[4]-mm[4])*mf^2+(3*(mh[4]-ml[4])+mm[4]-mg[4])*mf^3),A=0.5*(2*mh[5]+(ml[5]-mg[5])*mf+(2*mg[5]-5*mh[5]+4*ml[5]-mm[5])*mf^2+(3*(mh[5]-ml[5])+mm[5]-mg[5])*mf^3)}return mi.U0,mi.V0,mi.U1,mi.V1,mi.A end;function Lib.BriefingSystem.Local:GetCameraProperties(aa,mn)local mo,mb;if self.Briefing[aa].CurrentAnimation then mo=self.Briefing[aa].CurrentAnimation.Start;mb=self.Briefing[aa].CurrentAnimation.End end;local mp=mo.Position;local mq=mb and mb.Position or mo.Position;local mr=mo.Rotation;local ms=mb and mb.Rotation or mo.Rotation;local mt=mo.Angle;local mu=mb and mb.Angle or mo.Angle;local mv=mo.Zoom;local mw=mb and mb.Zoom or mo.Zoom;local mx=self:GetInterpolationFactor(aa)local my,mz,mA=self:ConvertPosition(mp)local mB,mC,mD=self:ConvertPosition(mq)local mE=my+(mB-my)*mx;local mF=mz+(mC-mz)*mx;local mG=mA+(mD-mA)*mx;local mH=mv+(mw-mv)*mx;local mI=mt+(mu-mt)*mx;local f9=mr+(ms-mr)*mx;local mJ=mH*math.cos(math.rad(mI))local mK=mE+math.cos(math.rad(f9-90))*mJ;local mL=mF+math.sin(math.rad(f9-90))*mJ;local mM=mG+mH*math.sin(math.rad(mI))return mE,mF,mG,mK,mL,mM,mn end;function Lib.BriefingSystem.Local:SkipButtonPressed(aa,lk)if not self.Briefing[aa]then return end;if self.Briefing[aa].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Briefing[aa].LastSkipButtonPressed=Logic.GetTimeMs()end end;function Lib.BriefingSystem.Local:GetCurrentBriefing(aa)return self.Briefing[aa]end;function Lib.BriefingSystem.Local:GetCurrentBriefingPage(aa)if self.Briefing[aa]then local lp=self.Briefing[aa].CurrentPage;return self.Briefing[aa][lp]end end;function Lib.BriefingSystem.Local:GetPageIDByName(aa,y)if type(y)=="string"then if self.Briefing[aa]~=nil then for f=1,#self.Briefing[aa],1 do if type(self.Briefing[aa][f])=="table"and self.Briefing[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.BriefingSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneRoomLeftClick=GameCallback_Camera_ThroneRoomLeftClick;GameCallback_Camera_ThroneRoomLeftClick=function(aa)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneRoomLeftClick(aa)if aa==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingLeftClick,aa)SendReport(Report.BriefingLeftClick,aa)end end;self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(aa)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(aa)if aa==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingSkipButtonPressed,aa)SendReport(Report.BriefingSkipButtonPressed,aa)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(aa)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(aa)if aa==GUI.GetPlayerID()then local lw=Lib.BriefingSystem.Local:GetCurrentBriefing(aa)if lw~=nil then Lib.BriefingSystem.Local:ThroneRoomCameraControl(aa,Lib.BriefingSystem.Local:GetCurrentBriefingPage(aa))end end end;GameCallback_Escape_Orig_BriefingSystem=GameCallback_Escape;GameCallback_Escape=function()if Lib.BriefingSystem.Local.Briefing[GUI.GetPlayerID()]then return end;GameCallback_Escape_Orig_BriefingSystem()end end;function Lib.BriefingSystem.Local:ActivateCinematicMode(aa)if self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local mN,mO=GUI.GetScreenSize()function EndScreen_ExitGame()end;function MissionFadeInEndScreen()end;for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],1)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],1)XGUIEng.PushPage(self.ParallaxWidgets[f][2],false)XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)XGUIEng.SetMaterialUV(self.ParallaxWidgets[f][1],1,0,0,1,1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo",false)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo/LeftFrame",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local A,B=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",A,65*mO/1080)XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Objectives",2,0,2000,20)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.SetText("/InGame/ThroneRoom/KnightInfo/Text"," ")XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Text",200,300,1000,10)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Briefing[aa].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Briefing[aa].EnableSky then Display.SetRenderSky(1)end;if not self.Briefing[aa].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.BriefingSystem.Local:DeactivateCinematicMode(aa)if not self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",1)for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],0)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],0)XGUIEng.PopPage()end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)ResetRenderDistance()end;RegisterModule(Lib.BriefingSystem.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/CutsceneSystem_API")function StartCutscene(mP,y,aa)if GUI then return end;local n=aa;if not n and not Framework.IsNetworkGame()then n=1 end;assert(y~=nil)assert(aa~=nil)assert(type(mP)=="table","Cutscene must be a table!")assert(#mP>0,"Cutscene does not contain pages!")for f=1,#mP do assert(type(mP[f])~="table"or mP[f].__Legit,"A page is not initialized!")end;if mP.EnableSky==nil then mP.EnableSky=true end;if mP.EnableFoW==nil then mP.EnableFoW=false end;if mP.EnableGlobalImmortality==nil then mP.EnableGlobalImmortality=true end;if mP.EnableBorderPins==nil then mP.EnableBorderPins=false end;Lib.CutsceneSystem.Global:StartCutscene(y,n,mP)end;API.StartCutscene=StartCutscene;function IsCutsceneActive(aa)if not IsLocalScript()then return Lib.CutsceneSystem.Global:GetCurrentCutscene(aa)~=nil end;return Lib.CutsceneSystem.Local:GetCurrentCutscene(aa)~=nil end;API.IsCutsceneActive=IsCutsceneActive;function AddCutscenePages(mP)Lib.CutsceneSystem.Global:CreateCutsceneGetPage(mP)Lib.CutsceneSystem.Global:CreateCutsceneAddPage(mP)local AP=function(lk)return mP:AddPage(lk)end;return AP end;API.AddCutscenePages=AddCutscenePages;function AP(f2)assert(false)end;Lib.CutsceneSystem=Lib.CutsceneSystem or{}Lib.CutsceneSystem.Name="CutsceneSystem"Lib.CutsceneSystem.Global={Cutscene={},CutsceneQueue={},CutsceneCounter=0}Lib.CutsceneSystem.Local={Cutscene={}}Lib.CutsceneSystem.Text={FastForwardActivate={de="Beschleunigen",en="Fast Forward",fr="Accélérer"},FastForwardDeactivate={de="Zurücksetzen",en="Normal Speed",fr="Réinitialiser"},FastFormardMessage={de="SCHNELLER VORLAUF",en="FAST FORWARD",fr="AVANCÉ RAPIDE"}}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/CutsceneSystem_API")Lib.Register("module/information/CutsceneSystem")CinematicEventTypes.Cutscene=3;function Lib.CutsceneSystem.Global:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")for f=1,8 do self.CutsceneQueue[f]={}end;RequestHiResJob(function()Lib.CutsceneSystem.Global:UpdateQueue()end)Lib.CutsceneSystem.Local=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Global:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then elseif aw==Report.CutsceneStarted then elseif aw==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aw==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aw==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aw==Report.CutsceneSkipButtonPressed then SendReportToLocal(Report.CutsceneSkipButtonPressed,arg[1])elseif aw==Report.CutscenePageShown then SendReportToLocal(Report.CutscenePageShown,arg[1],arg[2],arg[3])end end;function Lib.CutsceneSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartCutscene(f)then local fi=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fi and fi[1]==CinematicEventTypes.Cutscene then self:NextCutscene(f)end end end end;function Lib.CutsceneSystem.Global:CreateCutsceneGetPage(mP)mP.GetPage=function(self,aa,lq)local ae=Lib.CutsceneSystem.Global:GetPageIDByName(aa,lq)return Lib.CutsceneSystem.Global.Cutscene[aa][ae]end end;function Lib.CutsceneSystem.Global:CreateCutsceneAddPage(mP)mP.AddPage=function(self,lk)if type(lk)=="table"then lk.__Legit=true;lk.Title=Localize(lk.Title)if lk.Text then lk.Text=Localize(lk.Text)end;if lk.Lines then lk.Lines=Localize(lk.Lines)end;if not lk.Lines and not lk.Text then assert(false,"Missing Lines or Text attribute!")return end;if lk.BigBars==nil then lk.BigBars=false end end;table.insert(mP,lk)return lk end end;function Lib.CutsceneSystem.Global:StartCutscene(y,aa,f2)self.CutsceneQueue[aa]=self.CutsceneQueue[aa]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(aa,CinematicEventTypes.Cutscene,y,f2)end;function Lib.CutsceneSystem.Global:EndCutscene(aa)Logic.SetGlobalInvulnerability(0)SendReportToLocal(Report.CutsceneEnded,aa)if self.Cutscene[aa].Finished then self.Cutscene[aa]:Finished()end;FinishCinematicEvent(self.Cutscene[aa].Name,aa)self.Cutscene[aa]=nil end;function Lib.CutsceneSystem.Global:NextCutscene(aa)if self:CanStartCutscene(aa)then local mQ=Lib.UIEffects.Global:PopCinematicEventFromQueue(aa)assert(mQ[1]==CinematicEventTypes.Cutscene)StartCinematicEvent(mQ[2],aa)local mR=mQ[3]mR.Name=mQ[2]mR.PlayerID=aa;mR.BarOpacity=mR.BarOpacity or 1;mR.CurrentPage=0;self.Cutscene[aa]=mR;if mR.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Cutscene[aa].Starting then self.Cutscene[aa]:Starting()end;SendReportToLocal(Report.CutsceneStarted,aa,mR.Name,mR)SendReport(Report.CutsceneStarted,aa,mR.Name)end end;function Lib.CutsceneSystem.Global:StartCutsceneFlight(aa,lz,mS)if self.Cutscene[aa]==nil then return end;self.Cutscene[aa][lz].Duration=mS;if self.Cutscene[aa][lz].Action then self.Cutscene[aa][lz]:Action()end;SendReportToLocal(Report.CutsceneFlightStarted,aa,lz,mS)end;function Lib.CutsceneSystem.Global:EndCutsceneFlight(aa,lz)if self.Cutscene[aa]==nil then return end;SendReportToLocal(Report.CutsceneFlightEnded,aa,lz)end;function Lib.CutsceneSystem.Global:DisplayPage(aa,lz)if self.Cutscene[aa]==nil then return end;SendReportToLocal(Report.CutscenePageShown,aa,lz)end;function Lib.CutsceneSystem.Global:GetCurrentCutscene(aa)return self.Cutscene[aa]end;function Lib.CutsceneSystem.Global:GetCurrentCutscenePage(aa)if self.Cutscene[aa]then local lp=self.Cutscene[aa].CurrentPage;return self.Cutscene[aa][lp]end end;function Lib.CutsceneSystem.Global:GetPageIDByName(aa,y)if type(y)=="string"then if self.Cutscene[aa]~=nil then for f=1,#self.Cutscene[aa],1 do if type(self.Cutscene[aa][f])=="table"and self.Cutscene[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.CutsceneSystem.Global:CanStartCutscene(aa)return self.Cutscene[aa]==nil and not IsCinematicEventActive(aa)and self.LoadscreenClosed end;function Lib.CutsceneSystem.Local:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")self:OverrideThroneRoomFunctions()Lib.CutsceneSystem.Global=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Local:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then elseif aw==Report.CutsceneStarted then self:StartCutscene(arg[1],arg[2],arg[3])elseif aw==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aw==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aw==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aw==Report.CutsceneSkipButtonPressed then self:SkipButtonPressed(arg[1])elseif aw==Report.CutscenePageShown then end end;function Lib.CutsceneSystem.Local:StartCutscene(aa,mT,mP)if GUI.GetPlayerID()~=aa then return end;self.Cutscene[aa]=mP;self.Cutscene[aa].LastSkipButtonPressed=0;self.Cutscene[aa].CurrentPage=0;DeactivateNormalInterface(aa)DeactivateBorderScroll(aa)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,1)end;self:ActivateCinematicMode(aa)self:NextFlight(aa)end;function Lib.CutsceneSystem.Local:EndCutscene(aa)if GUI.GetPlayerID()~=aa then return end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,1)end;self:DeactivateCinematicMode(aa)ActivateNormalInterface(aa)ActivateBorderScroll(aa)Lib.UITools.Widget:UpdateHiddenWidgets()self.Cutscene[aa]=nil end;function Lib.CutsceneSystem.Local:NextFlight(aa)if self.Cutscene[aa]then self.Cutscene[aa].CurrentPage=self.Cutscene[aa].CurrentPage+1;local lp=self.Cutscene[aa].CurrentPage;if self.Cutscene[aa][lp]then local mU=self.Cutscene[aa][lp].Flight;if Camera.IsValidCutscene(mU)then if GUI.GetPlayerID()==aa then Camera.StartCutscene(mU)end else error("Lib.CutsceneSystem.Local:NextFlight: %s is an invalid flight!",tostring(mU))self:PropagateCutsceneEnded(aa)end else self:PropagateCutsceneEnded(aa)end end end;function Lib.CutsceneSystem.Local:PropagateCutsceneEnded(aa)if not self.Cutscene[aa]then return end;SendReportToGlobal(Report.CutsceneEnded,aa)end;function Lib.CutsceneSystem.Local:FlightStarted(mS)local n=GUI.GetPlayerID()if self.Cutscene[n]then local lp=self.Cutscene[n].CurrentPage;local ll=self.Cutscene[n][lp]if ll.FarClipPlane then SetRenderDistance(ll.FarClipPlane)end;SendReportToGlobal(Report.CutsceneFlightStarted,n,lp,mS)end end;CutsceneFlightStarted=function(mS)Lib.CutsceneSystem.Local:FlightStarted(mS)end;function Lib.CutsceneSystem.Local:StartCutsceneFlight(aa,lz,mS)if self.Cutscene[aa]==nil then return end;self:DisplayPage(aa,lz,mS)end;function Lib.CutsceneSystem.Local:FlightFinished()local n=GUI.GetPlayerID()if self.Cutscene[n]then local lp=self.Cutscene[n].CurrentPage;SendReportToGlobal(Report.CutsceneFlightEnded,n,lp)end end;CutsceneFlightFinished=function()Lib.CutsceneSystem.Local:FlightFinished()end;function Lib.CutsceneSystem.Local:EndCutsceneFlight(aa,lz)if self.Cutscene[aa]==nil then return end;self:NextFlight(aa)end;function Lib.CutsceneSystem.Local:DisplayPage(aa,lz,mS)if GUI.GetPlayerID()~=aa then return end;self.Cutscene[aa].AnimationQueue=self.Cutscene[aa].AnimationQueue or{}self.Cutscene[aa].CurrentPage=lz;if type(self.Cutscene[aa][lz])=="table"then self.Cutscene[aa][lz].Started=Logic.GetTime()self.Cutscene[aa][lz].Duration=mS;ResetRenderDistance()self:DisplayPageBars(aa,lz)self:DisplayPageTitle(aa,lz)self:DisplayPageText(aa,lz)self:DisplayPageControls(aa,lz)self:DisplayPageFader(aa,lz)SendReportToGlobal(Report.CutscenePageShown,aa,lz,mS)end end;function Lib.CutsceneSystem.Local:DisplayPageBars(aa,lz)local ll=self.Cutscene[aa][lz]local lF=ll.Opacity~=nil and ll.Opacity or 1;local lG=255*lF;local lH=255*lF;local lI=ll.BigBars and 1 or 0;local lJ=ll.BigBars and 0 or 1;if lF==0 then lI=0;lJ=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",lI)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",lJ)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",lI)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",lJ)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,lG)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,lG)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,lH)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,lH)end;function Lib.CutsceneSystem.Local:DisplayPageTitle(aa,lz)local ll=self.Cutscene[aa][lz]local lK="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(lK,"")if ll.Title then local i0=ConvertPlaceholders(Localize(ll.Title))if i0:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then i0=XGUIEng.GetStringTableText(i0)end;if i0:sub(1,1)~="{"then i0="{@color:255,250,0,255}{center}"..i0 end;XGUIEng.SetText(lK,i0)end end;function Lib.CutsceneSystem.Local:DisplayPageText(aa,lz)local ll=self.Cutscene[aa][lz]local lL="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(lL,"Bockwurst")if ll.Text then local bS=ConvertPlaceholders(Localize(ll.Text))if bS:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then bS=XGUIEng.GetStringTableText(bS)end;if bS:sub(1,1)~="{"then bS="{center}"..bS end;if not ll.BigBars then bS="{cr}{cr}{cr}"..bS end;XGUIEng.SetText(lL,bS)end end;function Lib.CutsceneSystem.Local:DisplayPageControls(aa,lz)local ll=self.Cutscene[aa][lz]local lM=1;if ll.DisableSkipping==true then self.Cutscene[aa].FastForward=false;Game.GameTimeSetFactor(aa,1)lM=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",lM)end;function Lib.CutsceneSystem.Local:DisplayPageFader(aa,lz)local ll=self.Cutscene[aa][lz]g_Fade.To=ll.FaderAlpha or 0;local lO=ll.FadeIn;if lO then FadeIn(lO)end;local lP=ll.FadeOut;if lP then self.Cutscene[aa].FaderJob=RequestHiResJob(function(gB,lQ)if Logic.GetTimeMs()>gB-lQ*1000 then FadeOut(lQ)return true end end,ll.Started*1000+ll.Duration*100,lP)end end;function Lib.CutsceneSystem.Local:ThroneRoomCameraControl(aa,lk)if lk then if lk.DisableSkipping then XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")return end;local ma=Localize(Lib.CutsceneSystem.Text.FastForwardActivate)if self.Cutscene[aa].FastForward then ma=Localize(Lib.CutsceneSystem.Text.FastForwardDeactivate)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..ma)if self.Cutscene[aa].FastForward then local mV=GetSecondsRealTime()if not self.Cutscene[aa].FastForwardRealTime then self.Cutscene[aa].FastForwardRealTime=mV end;if self.Cutscene[aa].FastForwardRealTime<mV then self.Cutscene[aa].FastForwardIndent=(self.Cutscene[aa].FastForwardIndent or 0)+1;if self.Cutscene[aa].FastForwardIndent>4 then self.Cutscene[aa].FastForwardIndent=1 end;self.Cutscene[aa].FastForwardRealTime=mV end;local bS="{cr}{cr}"..Localize(Lib.CutsceneSystem.Text.FastFormardMessage)local mW=string.rep("  ",self.Cutscene[aa].FastForwardIndent or 0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",bS..mW..". . .")else XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")end end end;function Lib.CutsceneSystem.Local:SkipButtonPressed(aa)if self.Cutscene[aa]==nil then return end;if self.Cutscene[aa].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Cutscene[aa].LastSkipButtonPressed=Logic.GetTimeMs()if not Framework.IsNetworkGame()then if self.Cutscene[aa].FastForward then self.Cutscene[aa].FastForward=false;Game.GameTimeSetFactor(aa,1)else self.Cutscene[aa].FastForward=true;Game.GameTimeSetFactor(aa,10)end end end end;function Lib.CutsceneSystem.Local:GetCurrentCutscene(aa)return self.Cutscene[aa]end;function Lib.CutsceneSystem.Local:GetCurrentCutscenePage(aa)if self.Cutscene[aa]then local lp=self.Cutscene[aa].CurrentPage;return self.Cutscene[aa][lp]end end;function Lib.CutsceneSystem.Local:GetPageIDByName(aa,y)if type(y)=="string"then if self.Cutscene[aa]~=nil then for f=1,#self.Cutscene[aa],1 do if type(self.Cutscene[aa][f])=="table"and self.Cutscene[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.CutsceneSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(aa)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(aa)if aa==GUI.GetPlayerID()then SendReportToGlobal(Report.CutsceneSkipButtonPressed,aa)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(aa)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(aa)if aa==GUI.GetPlayerID()then local mR=Lib.CutsceneSystem.Local:GetCurrentCutscene(aa)if mR~=nil then Lib.CutsceneSystem.Local:ThroneRoomCameraControl(aa,Lib.CutsceneSystem.Local:GetCurrentCutscenePage(aa))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.CutsceneSystem.Local.Cutscene[GUI.GetPlayerID()]then return end;Lib.CutsceneSystem.Local.Orig_GameCallback_Escape()end end;function Lib.CutsceneSystem.Local:ActivateCinematicMode(aa)if self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local mN,mO=GUI.GetScreenSize()XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Cutscene",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/LeftFrame",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local A,B=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",A,65*mO/1080)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Cutscene[aa].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Cutscene[aa].EnableSky then Display.SetRenderSky(1)end;if not self.Cutscene[aa].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=1;SetFaderAlpha(1)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.CutsceneSystem.Local:DeactivateCinematicMode(aa)if not self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")ResetRenderDistance()end;RegisterModule(Lib.CutsceneSystem.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/DialogSystem_API")function StartDialog(mX,y,aa)if GUI then return end;local n=aa;if not n and not Framework.IsNetworkGame()then n=1 end;assert(y~=nil)assert(aa~=nil)assert(type(mX)=="table","Dialog must be a table!")assert(#mX>0,"Dialog does not contain pages!")for f=1,#mX do assert(type(mX[f])~="table"or mX[f].__Legit,"Page is not initialized!")end;if mX.EnableSky==nil then mX.EnableSky=true end;if mX.EnableFoW==nil then mX.EnableFoW=false end;if mX.EnableGlobalImmortality==nil then mX.EnableGlobalImmortality=true end;if mX.EnableBorderPins==nil then mX.EnableBorderPins=false end;if mX.RestoreGameSpeed==nil then mX.RestoreGameSpeed=true end;if mX.RestoreCamera==nil then mX.RestoreCamera=true end;Lib.DialogSystem.Global:StartDialog(y,n,mX)end;API.StartDialog=StartDialog;function IsDialogActive(aa)if not IsLocalScript()then return Lib.DialogSystem.Global:GetCurrentDialog(aa)~=nil end;return Lib.DialogSystem.Local:GetCurrentDialog(aa)~=nil end;API.IsDialogActive=IsDialogActive;function AddDialogPages(mX)Lib.DialogSystem.Global:CreateDialogGetPage(mX)Lib.DialogSystem.Global:CreateDialogAddPage(mX)Lib.DialogSystem.Global:CreateDialogAddMCPage(mX)Lib.DialogSystem.Global:CreateDialogAddRedirect(mX)local AP=function(lk)local ll;if type(lk)=="table"then if lk.MC then ll=mX:AddMCPage(lk)else ll=mX:AddPage(lk)end else ll=mX:AddRedirect(lk)end;return ll end;local ASP=function(...)if type(arg[1])~="number"then Name=table.remove(arg,1)end;local mY=table.remove(arg,1)local N=table.remove(arg,1)local i0=table.remove(arg,1)local bS=table.remove(arg,1)local mZ=table.remove(arg,1)local jy;if type(arg[1])=="function"then jy=table.remove(arg,1)end;return mX:AddPage{Name=Name,Title=i0,Text=bS,Actor=mY,Target=N,DialogCamera=mZ==true,Action=jy}end;return AP,ASP end;API.AddDialogPages=AddDialogPages;function AP(f2)assert(false)end;function ASP(...)assert(false)end;Lib.DialogSystem=Lib.DialogSystem or{}Lib.DialogSystem.Name="DialogSystem"Lib.DialogSystem.Global={Dialog={},DialogQueue={},DialogCounter=0}Lib.DialogSystem.Local={Dialog={}}Lib.DialogSystem.Text={Continue={de="{cr}{cr}{azure}Weiter mit ESC",en="{cr}{cr}{azure}Continue with ESC",fr="{cr}{cr}{azure}Continuer avec ESC"}}CONST_DIALOG={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/DialogSystem_API")Lib.Register("module/information/DialogSystem")CinematicEventTypes.Dialog=5;function Lib.DialogSystem.Global:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")for f=1,8 do self.DialogQueue[f]={}end;RequestHiResJob(function()Lib.DialogSystem.Global:UpdateQueue()Lib.DialogSystem.Global:DialogExecutionController()end)Lib.DialogSystem.Local=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Global:OnSaveGameLoaded()end;function Lib.DialogSystem.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then self:SkipButtonPressed(arg[1])elseif aw==Report.DialogStarted then self:NextPage(arg[1])elseif aw==Report.DialogEnded then elseif aw==Report.DialogPageShown then elseif aw==Report.DialogOptionSelected then self:OnOptionSelected(arg[1],arg[2])end end;function Lib.DialogSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartDialog(f)then local fi=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fi and fi[1]==CinematicEventTypes.Dialog then self:NextDialog(f)end end end end;function Lib.DialogSystem.Global:DialogExecutionController()for f=1,8 do if self.Dialog[f]then local lp=self.Dialog[f].CurrentPage;local ll=self.Dialog[f][lp]if ll and not ll.MC and ll.Duration>0 and ll.AutoSkip then if ll.Started+ll.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.DialogSystem.Global:CreateDialogGetPage(mX)mX.GetPage=function(self,lq)local ae=Lib.DialogSystem.Global:GetPageIDByName(mX.PlayerID,lq)return Lib.DialogSystem.Global.Dialog[mX.PlayerID][ae]end end;function Lib.DialogSystem.Global:CreateDialogAddPage(mX)mX.AddPage=function(self,lk)self.Length=(self.Length or 0)+1;local lr="Page"..#self+1;if lk.Name then lr=lk.Name else lk.Name=lr end;lk.__Legit=true;lk.Text=Localize(lk.Text or"")lk.AutoSkip=false;if lk.Duration then if lk.Duration==-1 then lk.Duration=string.len(lk.Text or"")*CONST_DIALOG.TIMER_PER_CHAR;lk.Duration=lk.Duration<6 and 6 or lk.Duration<6 end;lk.AutoSkip=lk.Duration>0 end;if not lk.Rotation then lk.Rotation=CONST_DIALOG.CAMERA_ROTATIONDEFAULT;if lk.DialogCamera then lk.Rotation=CONST_DIALOG.DLGCAMERA_ROTATIONDEFAULT end;if lk.Position and type(lk.Position)~="table"then local ae=GetID(lk.Position)local O=Logic.GetEntityOrientation(ae)+90;lk.Rotation=O elseif lk.Target then local ae=GetID(lk.Target)local O=Logic.GetEntityOrientation(ae)+90;lk.Rotation=O end end;if not lk.Distance then lk.Distance=CONST_DIALOG.CAMERA_ZOOMDEFAULT;if lk.DialogCamera then lk.Distance=CONST_DIALOG.DLGCAMERA_ZOOMDEFAULT end end;if not lk.Angle then lk.Angle=CONST_DIALOG.CAMERA_ANGLEDEFAULT;if lk.DialogCamera then lk.Angle=CONST_DIALOG.DLGCAMERA_ANGLEDEFAULT end end;lk.GetSelected=function(self)return 0 end;table.insert(self,lk)return lk end end;function Lib.DialogSystem.Global:CreateDialogAddMCPage(mX)mX.AddMCPage=function(self,lk)local ll=self:AddPage(lk)if ll.MC then for f=1,#ll.MC do ll.MC[f][1]=Localize(ll.MC[f][1])ll.MC[f].ID=ll.MC[f].ID or f end;ll.AutoSkip=false;ll.Duration=-1 end;ll.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;return ll end end;function Lib.DialogSystem.Global:CreateDialogAddRedirect(mX)mX.AddRedirect=function(self,K)self.Length=(self.Length or 0)+1;local ll=K==nil and-1 or K;table.insert(self,ll)return ll end end;function Lib.DialogSystem.Global:StartDialog(y,aa,f2)self.DialogQueue[aa]=self.DialogQueue[aa]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(aa,CinematicEventTypes.Dialog,y,f2)end;function Lib.DialogSystem.Global:EndDialog(aa)Logic.SetGlobalInvulnerability(0)ExecuteLocal([[Lib.DialogSystem.Local:ResetTimerButtons(%d);
          Camera.RTS_FollowEntity(0);]],aa)SendReport(Report.DialogEnded,aa,self.Dialog[aa].Name)SendReportToLocal(Report.DialogEnded,aa,self.Dialog[aa].Name,self.Dialog[aa])if self.Dialog[aa].Finished then self.Dialog[aa]:Finished()end;FinishCinematicEvent(self.Dialog[aa].Name,aa)self.Dialog[aa]=nil end;function Lib.DialogSystem.Global:NextDialog(aa)if self:CanStartDialog(aa)then local m_=Lib.UIEffects.Global:PopCinematicEventFromQueue(aa)assert(m_[1]==CinematicEventTypes.Dialog)StartCinematicEvent(m_[2],aa)local mZ=m_[3]mZ.Name=m_[2]mZ.PlayerID=aa;mZ.LastSkipButtonPressed=0;mZ.CurrentPage=0;self.Dialog[aa]=mZ;if mZ.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Dialog[aa].Starting then self.Dialog[aa]:Starting()end;SendReportToLocal(Report.DialogStarted,aa,self.Dialog[aa].Name,self.Dialog[aa])SendReport(Report.DialogStarted,aa,self.Dialog[aa].Name)end end;function Lib.DialogSystem.Global:NextPage(aa)if self.Dialog[aa]==nil then return end;self.Dialog[aa].CurrentPage=self.Dialog[aa].CurrentPage+1;local lp=self.Dialog[aa].CurrentPage;if lp==-1 or lp==0 then self:EndDialog(aa)return end;local ll=self.Dialog[aa][lp]if type(ll)=="table"then if lp<=#self.Dialog[aa]then self.Dialog[aa][lp].Started=Logic.GetTime()self.Dialog[aa][lp].Duration=ll.Duration or-1;if self.Dialog[aa][lp].Action then self.Dialog[aa][lp]:Action()end;self:DisplayPage(aa,lp)else self:EndDialog(aa)end elseif type(ll)=="number"or type(ll)=="string"then local av=self:GetPageIDByName(aa,self.Dialog[aa][lp])self.Dialog[aa].CurrentPage=av-1;self:NextPage(aa)else self:EndDialog(aa)end end;function Lib.DialogSystem.Global:DisplayPage(aa,lz)if self.Dialog[aa]==nil then return end;local ll=self.Dialog[aa][lz]if type(ll)=="table"then local lp=self.Dialog[aa].CurrentPage;if ll.MC then for f=1,#ll.MC,1 do if type(ll.MC[f][3])=="function"then self.Dialog[aa][lp].MC[f].Visible=ll.MC[f][3](aa,lp,f)end end end end;SendReport(Report.DialogPageShown,aa,lz)SendReportToLocal(Report.DialogPageShown,aa,lz,ll)end;function Lib.DialogSystem.Global:SkipButtonPressed(aa,lz)if not self.Dialog[aa]then return end;if self.Dialog[aa].LastSkipButtonPressed+500>Logic.GetTimeMs()then return end;local lp=self.Dialog[aa].CurrentPage;if self.Dialog[aa][lp].AutoSkip or self.Dialog[aa][lp].MC then return end;if self.Dialog[aa][lp].OnForward then self.Dialog[aa][lp]:OnForward()end;self.Dialog[aa].LastSkipButtonPressed=Logic.GetTimeMs()self:NextPage(aa)end;function Lib.DialogSystem.Global:OnOptionSelected(aa,lA)if self.Dialog[aa]==nil then return end;local lp=self.Dialog[aa].CurrentPage;if type(self.Dialog[aa][lp])~="table"then return end;local ll=self.Dialog[aa][lp]if ll.MC then local lB;for f=1,#ll.MC,1 do if ll.MC[f].ID==lA then lB=ll.MC[f]end end;if lB~=nil then local av=lB[2]if type(lB[2])=="function"then av=lB[2](aa,lp,lA)end;self.Dialog[aa][lp].MC.Selected=lB.ID;self.Dialog[aa].CurrentPage=self:GetPageIDByName(aa,av)-1;self:NextPage(aa)end end end;function Lib.DialogSystem.Global:GetCurrentDialog(aa)return self.Dialog[aa]end;function Lib.DialogSystem.Global:GetCurrentDialogPage(aa)if self.Dialog[aa]then local lp=self.Dialog[aa].CurrentPage;return self.Dialog[aa][lp]end end;function Lib.DialogSystem.Global:GetPageIDByName(aa,y)if type(y)=="string"then if self.Dialog[aa]~=nil then for f=1,#self.Dialog[aa],1 do if type(self.Dialog[aa][f])=="table"and self.Dialog[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.DialogSystem.Global:CanStartDialog(aa)return self.Dialog[aa]==nil and not IsCinematicEventActive(aa)and self.LoadscreenClosed end;function Lib.DialogSystem.Local:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")self:OverrideThroneRoomFunctions()Lib.DialogSystem.Global=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Local:OnSaveGameLoaded()end;function Lib.DialogSystem.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.EscapePressed then elseif aw==Report.DialogStarted then self:StartDialog(arg[1],arg[2],arg[3])elseif aw==Report.DialogEnded then self:EndDialog(arg[1],arg[2],arg[3])elseif aw==Report.DialogPageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.DialogSystem.Local:StartDialog(aa,n0,mX)if GUI.GetPlayerID()~=aa then return end;self.Dialog[aa]=mX;self.Dialog[aa].CurrentPage=0;local ds,dt=Camera.RTS_GetLookAtPosition()local lo=Camera.RTS_GetRotationAngle()local lD=Camera.RTS_GetZoomFactor()local lE=Game.GameTimeGetFactor(aa)local n1,n2=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/AlignBottomLeft/SubTitles")self.Dialog[aa].Backup={SubTitles={n1,n2},Camera={ds,dt,lo,lD},Speed=lE}DeactivateNormalInterface(aa)DeactivateBorderScroll(aa)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,1)end;self:ActivateCinematicMode(aa)end;function Lib.DialogSystem.Local:EndDialog(aa,n0,mX)if GUI.GetPlayerID()~=aa then return end;if self.Dialog[aa].RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(aa,self.Dialog[aa].Backup.Speed)end;if self.Dialog[aa].RestoreCamera then Camera.RTS_SetLookAtPosition(self.Dialog[aa].Backup.Camera[1],self.Dialog[aa].Backup.Camera[2])Camera.RTS_SetRotationAngle(self.Dialog[aa].Backup.Camera[3])Camera.RTS_SetZoomFactor(self.Dialog[aa].Backup.Camera[4])end;self:DeactivateCinematicMode(aa)ActivateNormalInterface(aa)ActivateBorderScroll(aa)Lib.UITools.Widget:UpdateHiddenWidgets()self.Dialog[aa]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.DialogSystem.Local:DisplayPage(aa,lz,n3)if GUI.GetPlayerID()~=aa then return end;self.Dialog[aa][lz]=n3;self.Dialog[aa].CurrentPage=lz;if type(self.Dialog[aa][lz])=="table"then self.Dialog[aa][lz].Started=Logic.GetTime()self:DisplayPageFader(aa,lz)self:DisplayPagePosition(aa,lz)self:DisplayPageActor(aa,lz)self:DisplayPageTitle(aa,lz)self:DisplayPageText(aa,lz)if self.Dialog[aa][lz].MC then self:DisplayPageOptionsDialog(aa,lz)end end end;function Lib.DialogSystem.Local:DisplayPagePosition(aa,lz)local ll=self.Dialog[aa][lz]Camera.RTS_FollowEntity(0)if ll.Position then local N=ll.Position;if type(N)~="table"then N=GetPosition(ll.Position)end;Camera.RTS_SetLookAtPosition(N.X,N.Y)elseif ll.Target then Camera.RTS_FollowEntity(GetID(ll.Target))else assert(false)end;Camera.RTS_SetRotationAngle(ll.Rotation)Camera.RTS_SetZoomFactor(ll.Distance/18000)Camera.RTS_SetZoomAngle(ll.Angle)end;function Lib.DialogSystem.Local:DisplayPageFader(aa,lz)local ll=self.Dialog[aa][lz]g_Fade.To=ll.FaderAlpha or 0;local lO=ll.FadeIn;if lO then FadeIn(lO)end;local lP=ll.FadeOut;if lP then self.Dialog[aa].FaderJob=RequestHiResJob(function(gB,lQ)if Logic.GetTimeMs()>gB-lQ*1000 then FadeOut(lQ)return true end end,Logic.GetTimeMs()+(ll.Duration or 0)*1000,lP)end end;function Lib.DialogSystem.Local:DisplayPageActor(aa,lz)local n4="/InGame/Root/Normal/AlignBottomLeft/Message"XGUIEng.ShowWidget(n4,1)XGUIEng.ShowAllSubWidgets(n4,1)XGUIEng.ShowWidget(n4 .."/QuestLog",0)XGUIEng.ShowWidget(n4 .."/Update",0)local ll=self.Dialog[aa][lz]if not ll.Actor or ll.Actor==-1 then XGUIEng.ShowWidget(n4,0)return end;local n5=self:GetPageActor(aa,lz)self:DisplayActorPortrait(aa,n5)end;function Lib.DialogSystem.Local:GetPageActor(aa,lz)local n5=g_PlayerPortrait[aa]local ll=self.Dialog[aa][lz]if type(ll.Actor)=="string"then n5=ll.Actor elseif type(ll.Actor)=="number"then n5=g_PlayerPortrait[ll.Actor]end;if not Models["Heads_"..tostring(n5)]then n5="H_NPC_Generic_Trader"end;return n5 end;function Lib.DialogSystem.Local:DisplayPageTitle(aa,lz)local n4="/InGame/Root/Normal/AlignBottomLeft/Message"local ll=self.Dialog[aa][lz]if ll.Title then local i0=ConvertPlaceholders(Localize(ll.Title))if i0:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then i0=XGUIEng.GetStringTableText(i0)end;if i0:sub(1,1)~="{"then i0="{center}"..i0 end;XGUIEng.SetText(n4 .."/MessagePortrait/PlayerName",i0)XGUIEng.ShowWidget(n4 .."/MessagePortrait/PlayerName",1)else XGUIEng.ShowWidget(n4 .."/MessagePortrait/PlayerName",0)end end;function Lib.DialogSystem.Local:DisplayPageText(aa,lz)self:ResetSubtitlesPosition(aa)local ll=self.Dialog[aa][lz]local n6="/InGame/Root/Normal/AlignBottomLeft/SubTitles"if not ll or not ll.Text or ll.Text==""then XGUIEng.SetText(n6 .."/VoiceText1"," ")XGUIEng.ShowWidget(n6,0)return end;XGUIEng.ShowWidget(n6,1)XGUIEng.ShowWidget(n6 .."/Update",0)XGUIEng.ShowWidget(n6 .."/VoiceText1",1)XGUIEng.ShowWidget(n6 .."/BG",1)local bS=ConvertPlaceholders(Localize(ll.Text))local n7=""if not ll.AutoSkip and not ll.MC then n7=ConvertPlaceholders(Localize(Lib.DialogSystem.Text.Continue))end;XGUIEng.SetText(n6 .."/VoiceText1",bS..n7)self:SetSubtitlesPosition(aa,lz)end;function Lib.DialogSystem.Local:SetSubtitlesPosition(aa,lz)local ll=self.Dialog[aa][lz]local jN="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local eJ=XGUIEng.GetTextHeight(jN.."/VoiceText1",true)local eK,eL=XGUIEng.GetWidgetSize(jN.."/VoiceText1")local fK,fL=XGUIEng.GetWidgetLocalPosition(jN)if ll.Actor then XGUIEng.SetWidgetSize(jN.."/BG",eK+10,eJ+120)fL=675-eJ;XGUIEng.SetWidgetLocalPosition(jN,fK,fL)else XGUIEng.SetWidgetSize(jN.."/BG",eK+10,eJ+35)fL=1115-eJ;XGUIEng.SetWidgetLocalPosition(jN,46,fL)end end;function Lib.DialogSystem.Local:ResetSubtitlesPosition(aa)local N=self.Dialog[aa].Backup.SubTitles;local n8="/InGame/Root/Normal/AlignBottomLeft/SubTitles"XGUIEng.SetWidgetLocalPosition(n8,N[1],N[2])end;function Lib.DialogSystem.Local:ResetTimerButtons(aa)if GUI.GetPlayerID()~=aa then return end;if not g_Interaction.TimerQuests then return end;local n9="/InGame/Root/Normal/AlignTopLeft/QuestTimers/"for f=1,6 do local na=n9 ..f.."/TimerButton"local nb=g_Interaction.TimerQuests[f]if nb~=nil then local a_=Quests[nb]if g_Interaction.CurrentMessageQuestIndex==nb and not QuestLog.IsQuestLogShown()then g_Interaction.CurrentMessageQuestIndex=nil;g_VoiceMessageIsRunning=false;g_VoiceMessageEndTime=nil;XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget(QuestLog.Widget.Main,0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)XGUIEng.HighLightButton(na,0)end;if a_ then self:DisplayActorPortrait(a_.SendingPlayer)end end end end;function Lib.DialogSystem.Local:DisplayActorPortrait(aa,nc)local n4="/InGame/Root/Normal/AlignBottomLeft/Message"local n5=g_PlayerPortrait[aa]if nc then if not Models["Heads_"..tostring(nc)]then nc="H_NPC_Generic_Trader"end;n5=nc end;XGUIEng.ShowWidget(n4 .."/MessagePortrait",1)XGUIEng.ShowWidget(n4 .."/QuestObjectives",0)SetPortraitWithCameraSettings(n4 .."/MessagePortrait/3DPortraitFaceFX",n5)GUI.PortraitWidgetSetRegister(n4 .."/MessagePortrait/3DPortraitFaceFX","Mood_Friendly",1,2,0)GUI.PortraitWidgetSetRegister(n4 .."/MessagePortrait/3DPortraitFaceFX","Mood_Angry",1,2,0)end;function Lib.DialogSystem.Local:DisplayPageOptionsDialog(aa,lz)local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local lW={GUI.GetScreenSize()}local ll=self.Dialog[aa][lz]local lX=XGUIEng.GetWidgetID(is.."/ListBox")self.Dialog[aa].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(is)}XGUIEng.ListBoxPopAll(lX)self.Dialog[aa].MCSelectionOptionsMap={}for f=1,#ll.MC,1 do if ll.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(lX,ll.MC[f][1])table.insert(self.Dialog[aa].MCSelectionOptionsMap,ll.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(lX,0)local nd={XGUIEng.GetWidgetScreenSize(is)}local ne=math.ceil(lW[1]*0.05+nd[1]/2)local nf=math.ceil(lW[2]-(nd[2]+60*lW[2]/540))if not ll.Actor then ne=15*lW[1]/960;nf=math.ceil(lW[2]-(nd[2]+0*lW[2]/540))end;XGUIEng.SetWidgetScreenPosition(is,ne,nf)XGUIEng.PushPage(is,false)XGUIEng.ShowWidget(is,1)if not ll.Actor then local lL="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local ng,nh=XGUIEng.GetWidgetLocalPosition(lL)XGUIEng.SetWidgetLocalPosition(lL,ng,nh-220)end;self.Dialog[aa].MCSelectionIsShown=true end;function Lib.DialogSystem.Local:OnOptionSelected(aa)local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local N=self.Dialog[aa].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(is,N[1],N[2])XGUIEng.ShowWidget(is,0)XGUIEng.PopPage()local m0=XGUIEng.ListBoxGetSelectedIndex(is.."/ListBox")+1;local m1=self.Dialog[aa].MCSelectionOptionsMap[m0]SendReport(Report.DialogOptionSelected,aa,m1)SendReportToGlobal(Report.DialogOptionSelected,aa,m1)end;function Lib.DialogSystem.Local:ThroneRoomCameraControl(aa,lk)if lk then if self.Dialog[aa].MCSelectionIsShown then local is="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(is)==0 then self.Dialog[aa].MCSelectionIsShown=false;self:OnOptionSelected(aa)end end end end;function Lib.DialogSystem.Local:ConvertPosition(x)local N=x;if type(N)~="table"then N=GetPosition(x)end;return N.X,N.Y,N.Z end;function Lib.DialogSystem.Local:GetCurrentDialog(aa)return self.Dialog[aa]end;function Lib.DialogSystem.Local:GetCurrentDialogPage(aa)if self.Dialog[aa]then local lp=self.Dialog[aa].CurrentPage;return self.Dialog[aa][lp]end end;function Lib.DialogSystem.Local:GetPageIDByName(aa,y)if type(y)=="string"then if self.Dialog[aa]~=nil then for f=1,#self.Dialog[aa],1 do if type(self.Dialog[aa][f])=="table"and self.Dialog[aa][f].Name==y then return f end end end;return 0 end;return y end;function Lib.DialogSystem.Local:IsAnyCinematicEventActive(aa)for g,h in pairs(Lib.UIEffects.Local.CinematicEventStatus[aa])do if h==1 then return true end end;return false end;function Lib.DialogSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(aa)Lib.DialogSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(aa)if aa==GUI.GetPlayerID()then local mZ=Lib.DialogSystem.Local:GetCurrentDialog(aa)if mZ~=nil then Lib.DialogSystem.Local:ThroneRoomCameraControl(aa,Lib.DialogSystem.Local:GetCurrentDialogPage(aa))end end end end;function Lib.DialogSystem.Local:ActivateCinematicMode(aa)if self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main",1)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/Main",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Objectives"," ")self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Dialog[aa].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Dialog[aa].EnableSky then Display.SetRenderSky(1)end;if not self.Dialog[aa].EnableBorderPins then Display.SetRenderBorderPins(0)end;Display.SetUserOptionOcclusionEffect(0)Camera.SwitchCameraBehaviour(0)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.DialogSystem.Local:DeactivateCinematicMode(aa)if not self.CinematicActive or GUI.GetPlayerID()~=aa then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/SubTitles/VoiceText1"," ")XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)ResetRenderDistance()self:ResetSubtitlesPosition(aa)end;RegisterModule(Lib.DialogSystem.Name)Lib.Register("module/entity/Selection_Text")Lib.Selection=Lib.Selection or{}Lib.Selection.Text={Tooltips={KnightButton={Title={de="Ritter selektieren",en="Select Knight",fr="Sélectionner le chevalier"},Text={de="- Klick selektiert den Ritter {cr}- Doppelklick springt zum Ritter{cr}- STRG halten selektiert alle Ritter",en="- Click selects the knight {cr}- Double click jumps to knight{cr}- Press CTRL to select all knights",fr="- Clic sélectionne le chevalier {cr}- Double-clic saute au chevalier{cr}- Maintenir CTRL sélectionne tous les chevaliers"}},BattalionButton={Title={de="Militär selektieren",en="Select Units",fr="Sélectionner les unitées"},Text={de="- Selektiert alle Militäreinheiten {cr}- SHIFT halten um auch Diebe, Munitionswagen und Trebuchets auszuwählen",en="- Selects all military units {cr}- Press SHIFT to additionally select ammunition carts, thieves and trebuchets",fr="- Sélectionne toutes les unités militaires {cr}- Maintenir SHIFT pour sélectionner aussi les voleurs, les chariots de munitions et les trébuchets"}},ReleaseSoldiers={Title={de="Militär entlassen",en="Release military unit",fr="licencier l'unitées"},Text={de="- Eine Militäreinheit entlassen {cr}- Soldaten werden nacheinander entlassen",en="- Dismiss a military unit {cr}- Soldiers will be dismissed each after another",fr="- Licencier une unité militaire {cr}- Les soldats sont licenciés les uns après les autres"},Disabled={de="Kann nicht entlassen werden!",en="Releasing is impossible!",fr="Ne peut pas être licencié!"}},TrebuchetCart={Title={de="Trebuchetwagen",en="Trebuchet cart",fr="Chariot à trébuchet"},Text={de="- Kann einmalig zum Trebuchet ausgebaut werden",en="- Can uniquely be transmuted into a trebuchet",fr="- Peut être transformé une seule fois en trébuchet"}},Trebuchet={Title={de="Trebuchet",en="Trebuchet",fr="Trébuchet"},Text={de="- Kann über weite Strecken Gebäude angreifen {cr}- Kann Gebäude in Brand stecken {cr}- Trebuchet kann manuell zurückgeschickt werden",en="- Can perform long range attacks on buildings {cr}- Can set buildings on fire {cr}- The trebuchet can be manually send back to the city",fr="- Peut attaquer des bâtiments sur de longues distances {cr}- Peut mettre le feu à des bâtiments {cr}- Le trébuchet peut être renvoyé manuellement"}}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/Selection_API")function DisableReleaseThieves(bM)if not GUI then ExecuteLocal([[DisableReleaseThieves(%s)]],tostring(bM))return end;Lib.Selection.Local.ThiefRelease=not bM end;API.DisableReleaseThieves=DisableReleaseThieves;function DisableReleaseSiegeEngines(bM)if not GUI then ExecuteLocal([[DisableReleaseSiegeEngines(%s)]],tostring(bM))return end;Lib.Selection.Local.SiegeEngineRelease=not bM end;API.DisableReleaseSiegeEngines=DisableReleaseSiegeEngines;function DisableReleaseSoldiers(bM)if not GUI then ExecuteLocal([[DisableReleaseSoldiers(%s)]],tostring(bM))return end;Lib.Selection.Local.MilitaryRelease=not bM end;API.DisableReleaseSoldiers=DisableReleaseSoldiers;function IsEntitySelected(k,aa)if IsExisting(k)then local s=GetID(k)local n=aa or Logic.EntityGetPlayer(s)local ni;if not GUI then ni=Lib.Selection.Global.SelectedEntities[n]else ni={GUI.GetSelectedEntities()}end;for f=1,#ni,1 do if ni[f]==s then return true end end end;return false end;API.IsEntityInSelection=IsEntitySelected;function GetSelectedEntity(aa)local nj;if not GUI then nj=Lib.Selection.Global.SelectedEntities[aa][1]else nj=Lib.Selection.Local.SelectedEntities[aa][1]end;return nj or 0 end;API.GetSelectedEntity=GetSelectedEntity;function GetSelectedEntities(aa)local ni;if not GUI then ni=Lib.Selection.Global.SelectedEntities[aa]else ni=Lib.Selection.Local.SelectedEntities[aa]end;return ni end;API.GetSelectedEntities=GetSelectedEntities;Lib.Selection=Lib.Selection or{}Lib.Selection.Name="Selection"Lib.Selection.Global={TrebuchetIDToCart={},SelectedEntities={}}Lib.Selection.Local={SelectedEntities={},TrebuchetDisassemble=false,TrebuchetErect=false,ThiefRelease=false,SiegeEngineRelease=true,MilitaryRelease=true}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/entity/Selection_API")Lib.Require("module/entity/Selection_Text")Lib.Register("module/entity/Selection")function Lib.Selection.Global:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")for f=1,8 do self.SelectedEntities[f]={}end;Lib.Selection.Local=nil end;self.IsInstalled=true end;function Lib.Selection.Global:OnSaveGameLoaded()end;function Lib.Selection.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.ForceTrebuchetTasklist then Logic.SetTaskList(arg[1],arg[2])elseif aw==Report.ErectTrebuchet then Lib.Selection.Global:MilitaryErectTrebuchet(arg[1])elseif aw==Report.DisambleTrebuchet then Lib.Selection.Global:MilitaryDisambleTrebuchet(arg[1])elseif aw==Report.ExpelSettler then DestroyEntity(arg[1])elseif aw==Report.SelectionChanged then local n=table.remove(arg,1)Lib.Selection.Global.SelectedEntities[n]=arg end end;function Lib.Selection.Global:MilitaryDisambleTrebuchet(ag)local A,B,C=Logic.EntityGetPos(ag)local n=Logic.EntityGetPlayer(ag)if GameCallback_Lib_OnDisambleTrebuchet then GameCallback_Lib_OnDisambleTrebuchet(ag,n,A,B,C)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,A,B,0)Logic.SetEntityInvulnerabilityFlag(ag,1)Logic.SetEntitySelectableFlag(ag,0)Logic.SetVisible(ag,false)local nk=self.TrebuchetIDToCart[ag]if nk~=nil then Logic.SetEntityInvulnerabilityFlag(nk,0)Logic.SetEntitySelectableFlag(nk,1)Logic.SetVisible(nk,true)else nk=Logic.CreateEntity(Entities.U_SiegeEngineCart,A,B,0,n)self.TrebuchetIDToCart[ag]=nk end;Logic.DEBUG_SetSettlerPosition(nk,A,B)Logic.SetTaskList(nk,TaskLists.TL_NPC_IDLE)ExecuteLocal([[GUI.SelectEntity(%d)]],nk)end;function Lib.Selection.Global:MilitaryErectTrebuchet(ag)local A,B,C=Logic.EntityGetPos(ag)local n=Logic.EntityGetPlayer(ag)if GameCallback_Lib_OnErectTrebuchet then GameCallback_Lib_OnErectTrebuchet(ag,n,A,B,C)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,A,B,0)Logic.SetEntityInvulnerabilityFlag(ag,1)Logic.SetEntitySelectableFlag(ag,0)Logic.SetVisible(ag,false)local nl;for g,h in pairs(self.TrebuchetIDToCart)do if h==ag then nl=tonumber(g)end end;if nl==nil then nl=Logic.CreateEntity(Entities.U_Trebuchet,A,B,0,n)self.TrebuchetIDToCart[nl]=ag end;Logic.SetEntityInvulnerabilityFlag(nl,0)Logic.SetEntitySelectableFlag(nl,1)Logic.SetVisible(nl,true)Logic.DEBUG_SetSettlerPosition(nl,A,B)ExecuteLocal([[GUI.SelectEntity(%d)]],nl)end;function Lib.Selection.Local:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")if not(IsHistoryEdition()and IsMultiplayer())then self:OverrideSelection()self:OverwriteMilitaryCommands()self:OverwriteMilitaryErect()self:OverwriteMilitaryDisamble()self:OverwriteMultiselectIcon()self:OverwriteMilitaryDismount()self:OverwriteThiefDeliver()self:OverwriteSelectKnight()self:OverwriteSelectAllUnits()self:OverwriteNamesAndDescription()end;for f=1,8 do self.SelectedEntities[f]={}end;Lib.Selection.Global=nil end;self.IsInstalled=true end;function Lib.Selection.Local:OnSaveGameLoaded()end;function Lib.Selection.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Selection.Local:OverrideSelection()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.Selection.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.Selection.Local:OnSelectionCanged(b)end end;function Lib.Selection.Local:OverwriteMilitaryCommands()GUI_Military.StandGroundClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local ni={GUI.GetSelectedEntities()}for f=1,#ni do local nm=ni[f]local nn=Logic.GetEntityType(nm)GUI.SendCommandStationaryDefend(nm)if nn==Entities.U_Trebuchet then SendReportToGlobal(Report.ForceTrebuchetTasklist,nm,TaskLists.TL_NPC_IDLE)SendReport(Report.ForceTrebuchetTasklist,nm,TaskLists.TL_NPC_IDLE)end end end;GUI_Military.StandGroundUpdate=function()local no="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack"local ni={GUI.GetSelectedEntities()}SetIcon(no,{12,4})if#ni==1 then local aW=ni[1]local nn=Logic.GetEntityType(aW)if nn==Entities.U_Trebuchet then if Logic.GetAmmunitionAmount(aW)>0 then XGUIEng.ShowWidget(no,0)else XGUIEng.ShowWidget(no,1)end;SetIcon(no,{1,10})else XGUIEng.ShowWidget(no,1)end end end end;function Lib.Selection.Local:OverwriteMilitaryErect()GUI_Military.ErectClicked_Orig_Selection=GUI_Military.ErectClicked;GUI_Military.ErectClicked=function()GUI_Military.ErectClicked_Orig_Selection()local ni={GUI.GetSelectedEntities()}for f=1,#ni,1 do local cP=Logic.GetEntityType(ni[f])if cP==Entities.U_SiegeEngineCart then SendReportToGlobal(Report.ErectTrebuchet,ni[f])SendReport(Report.ErectTrebuchet,ni[f])end end end;GUI_Military.ErectUpdate_Orig_Selection=GUI_Military.ErectUpdate;GUI_Military.ErectUpdate=function()local hV=XGUIEng.GetCurrentWidgetID()local np=GUI.GetSelectedEntity()local cP=Logic.GetEntityType(np)if cP==Entities.U_SiegeEngineCart then local iC=Lib.Selection.Local.TrebuchetErect and 0 or 1;XGUIEng.DisableButton(hV,iC)SetIcon(hV,{12,6})else GUI_Military.ErectUpdate_Orig_Selection()end end;GUI_Military.ErectMouseOver_Orig_Selection=GUI_Military.ErectMouseOver;GUI_Military.ErectMouseOver=function()local np=GUI.GetSelectedEntity()local nq;if Logic.GetEntityType(np)==Entities.U_SiegeEngineCart then nq="ErectCatapult"else GUI_Military.ErectMouseOver_Orig_Selection()return end;GUI_Tooltip.TooltipNormal(nq,"Erect")end end;function Lib.Selection.Local:OverwriteMilitaryDisamble()GUI_Military.DisassembleClicked_Orig_Selection=GUI_Military.DisassembleClicked;GUI_Military.DisassembleClicked=function()GUI_Military.DisassembleClicked_Orig_Selection()local ni={GUI.GetSelectedEntities()}for f=1,#ni,1 do local cP=Logic.GetEntityType(ni[f])if cP==Entities.U_Trebuchet then SendReportToGlobal(Report.DisambleTrebuchet,ni[f])SendReport(Report.DisambleTrebuchet,ni[f])end end end;GUI_Military.DisassembleMouseOver_Orig_Selection=GUI_Military.DisassembleMouseOver;GUI_Military.DisassembleMouseOver=function()local nr=GUI.GetSelectedEntity()local ns;if Logic.IsSiegeEngineUnderConstruction(nr)==true then ns="Disassemble"else ns="DisassembleNoSoldiersAttached"if not Lib.Selection.Local.TrebuchetDisassemble then ns="Disassemble"end end;GUI_Tooltip.TooltipNormal(nil,ns)end;GUI_Military.DisassembleUpdate_Orig_Selection=GUI_Military.DisassembleUpdate;GUI_Military.DisassembleUpdate=function()local hV=XGUIEng.GetCurrentWidgetID()local nr=GUI.GetSelectedEntity()local cP=Logic.GetEntityType(nr)if cP==Entities.U_Trebuchet then local iC=Lib.Selection.Local.TrebuchetDisassemble and 0 or 1;XGUIEng.DisableButton(hV,iC)SetIcon(hV,{12,9})else GUI_Military.DisassembleUpdate_Orig_Selection()end end end;function Lib.Selection.Local:OnSelectionCanged(b)local n=GUI.GetPlayerID()local s=GUI.GetSelectedEntity()local cP=Logic.GetEntityType(s)local ni={GUI.GetSelectedEntities()}self.SelectedEntities[n]=ni;SendReportToGlobal(Report.SelectionChanged,n,unpack(ni))SendReport(Report.SelectionChanged,n,unpack(ni))if s~=nil then if cP==Entities.U_SiegeEngineCart then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngineCart",1)elseif cP==Entities.U_Trebuchet then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack",0)GUI_Military.StrengthUpdate()XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngine",1)end end end;function Lib.Selection.Local:OverwriteMultiselectIcon()GUI_MultiSelection.IconUpdate_Orig_Selection=GUI_MultiSelection.IconUpdate;GUI_MultiSelection.IconUpdate=function()local hV=XGUIEng.GetCurrentWidgetID()local nt=XGUIEng.GetWidgetsMotherID(hV)local nu=XGUIEng.GetWidgetNameByID(nt)local ca=nu+0;local nv=XGUIEng.GetWidgetPathByID(nt)local nw=nv.."/Health"local s=g_MultiSelection.EntityList[ca]local cP=Logic.GetEntityType(s)local nx=Logic.GetEntityHealth(s)local ny=Logic.GetEntityMaxHealth(s)if cP~=Entities.U_SiegeEngineCart and cP~=Entities.U_Trebuchet then GUI_MultiSelection.IconUpdate_Orig_Selection()return end;if Logic.IsEntityAlive(s)==false then XGUIEng.ShowWidget(nt,0)GUI_MultiSelection.CreateEX()return end;SetIcon(hV,g_TexturePositions.Entities[cP])nx=math.floor(nx/ny*100)if nx<50 then local nz=math.floor(2*255*nx/100)XGUIEng.SetMaterialColor(nw,0,255,nz,20,255)else local nA=2*255-math.floor(2*255*nx/100)XGUIEng.SetMaterialColor(nw,0,nA,255,20,255)end;XGUIEng.SetProgressBarValues(nw,nx,100)end;GUI_MultiSelection.IconMouseOver_Orig_Selection=GUI_MultiSelection.IconMouseOver;GUI_MultiSelection.IconMouseOver=function()local hV=XGUIEng.GetCurrentWidgetID()local nt=XGUIEng.GetWidgetsMotherID(hV)local nu=XGUIEng.GetWidgetNameByID(nt)local ca=tonumber(nu)local s=g_MultiSelection.EntityList[ca]local cP=Logic.GetEntityType(s)if cP~=Entities.U_SiegeEngineCart and cP~=Entities.U_Trebuchet then GUI_MultiSelection.IconMouseOver_Orig_Selection()return end;if cP==Entities.U_SiegeEngineCart then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.TrebuchetCart.Title),Localize(Lib.Selection.Text.Tooltips.TrebuchetCart.Text))elseif cP==Entities.U_Trebuchet then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.Trebuchet.Title),Localize(Lib.Selection.Text.Tooltips.Trebuchet.Text))end end end;function Lib.Selection.Local:OverwriteMilitaryDismount()GUI_Military.DismountClicked_Orig_Selection=GUI_Military.DismountClicked;GUI_Military.DismountClicked=function()local m0=GUI.GetSelectedEntity()local l=Logic.GetEntityType(m0)local nB=Logic.GetGuardedEntityID(m0)local nC=Logic.GetGuardianEntityID(m0)if nB~=0 and Logic.EntityGetPlayer(nB)~=GUI.GetPlayerID()then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsKnight(m0)or Logic.IsEntityInCategory(m0,EntityCategories.AttackableMerchant)==1 then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsLeader(m0)==1 and nB==0 then if Lib.Selection.Local.MilitaryRelease then Sound.FXPlay2DSound("ui\\menu_click")local at={Logic.GetSoldiersAttachedToLeader(m0)}SendReportToGlobal(Report.ExpelSettler,at[#at])SendReport(Report.ExpelSettler,at[#at])return end end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if Lib.Selection.Local.SiegeEngineRelease and nC==0 then Sound.FXPlay2DSound("ui\\menu_click")SendReportToGlobal(Report.ExpelSettler,m0)SendReport(Report.ExpelSettler,m0)else GUI_Military.DismountClicked_Orig_Selection()end end end;GUI_Military.DismountUpdate_Orig_Selection=GUI_Military.DismountUpdate;GUI_Military.DismountUpdate=function()local hV=XGUIEng.GetCurrentWidgetID()local m0=GUI.GetSelectedEntity()local l=Logic.GetEntityType(m0)local nB=Logic.GetGuardedEntityID(m0)local nC=Logic.GetGuardianEntityID(m0)SetIcon(hV,{12,1})if nB~=0 and Logic.EntityGetPlayer(nB)~=GUI.GetPlayerID()then XGUIEng.DisableButton(hV,0)GUI_Military.DismountUpdate_Orig_Selection()return end;if Logic.IsKnight(m0)or Logic.IsEntityInCategory(m0,EntityCategories.AttackableMerchant)==1 then XGUIEng.DisableButton(hV,0)GUI_Military.DismountUpdate_Orig_Selection()return end;SetIcon(hV,{14,12})if l==Entities.U_MilitaryLeader then if not Lib.Selection.Local.MilitaryRelease then XGUIEng.DisableButton(hV,1)else XGUIEng.DisableButton(hV,0)end;return end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if nC~=0 then SetIcon(hV,{12,1})XGUIEng.DisableButton(hV,0)else if not Lib.Selection.Local.SiegeEngineRelease then XGUIEng.DisableButton(hV,1)else XGUIEng.DisableButton(hV,0)end end end end end;function Lib.Selection.Local:OverwriteThiefDeliver()GUI_Thief.ThiefDeliverClicked_Orig_Selection=GUI_Thief.ThiefDeliverClicked;GUI_Thief.ThiefDeliverClicked=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverClicked_Orig_Selection()return end;Sound.FXPlay2DSound("ui\\menu_click")local nD=GUI.GetSelectedEntity()if nD==nil or Logic.GetEntityType(nD)~=Entities.U_Thief then return end;SendReportToGlobal(Report.ExpelSettler,nD)SendReport(Report.ExpelSettler,nD)end;GUI_Thief.ThiefDeliverMouseOver_Orig_Selection=GUI_Thief.ThiefDeliverMouseOver;GUI_Thief.ThiefDeliverMouseOver=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverMouseOver_Orig_Selection()return end;SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Disabled))end;GUI_Thief.ThiefDeliverUpdate_Orig_Selection=GUI_Thief.ThiefDeliverUpdate;GUI_Thief.ThiefDeliverUpdate=function()if not Lib.Selection.Local.ThiefRelease then GUI_Thief.ThiefDeliverUpdate_Orig_Selection()return end;local hV=XGUIEng.GetCurrentWidgetID()local nD=GUI.GetSelectedEntity()if nD==nil or Logic.GetEntityType(nD)~=Entities.U_Thief then XGUIEng.DisableButton(hV,1)else XGUIEng.DisableButton(hV,0)end;SetIcon(hV,{14,12})end end;function Lib.Selection.Local:OverwriteSelectKnight()GUI_Knight.JumpToButtonClicked=function()local n=GUI.GetPlayerID()local e1=Logic.GetKnightID(n)if e1>0 then g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}GUI.ClearSelection()if XGUIEng.IsModifierPressed(Keys.ModifierControl)then local nE={}Logic.GetKnights(n,nE)for f=1,#nE do GUI.SelectEntity(nE[f])end else GUI.SelectEntity(Logic.GetKnightID(n))if Framework.GetTimeMs()-g_Selection.LastClickTime<g_Selection.MaxDoubleClickTime then local ay=GetPosition(e1)Camera.RTS_SetLookAtPosition(ay.X,ay.Y)else Sound.FXPlay2DSound("ui\\mini_knight")end;g_Selection.LastClickTime=Framework.GetTimeMs()end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)else GUI.AddNote("Debug: You do not have a knight!")end end end;function Lib.Selection.Local:OverwriteSelectAllUnits()GUI_MultiSelection.SelectAllPlayerUnitsClicked=function()if XGUIEng.IsModifierPressed(Keys.ModifierShift)then Lib.Selection.Local:ExtendedLeaderSortOrder()else Lib.Selection.Local:NormalLeaderSortOrder()end;Sound.FXPlay2DSound("ui\\menu_click")GUI.ClearSelection()local n=GUI.GetPlayerID()for f=1,#LeaderSortOrder do local nF=GetPlayerEntities(n,LeaderSortOrder[f])for bu=1,#nF do GUI.SelectEntity(nF[bu])end end;local nG={}Logic.GetKnights(n,nG)for g=1,#nG do GUI.SelectEntity(nG[g])end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)end end;function Lib.Selection.Local:NormalLeaderSortOrder()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_MilitarySiegeTower;LeaderSortOrder[15]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[16]=Entities.U_CatapultCart;LeaderSortOrder[17]=Entities.U_SiegeTowerCart;LeaderSortOrder[18]=Entities.U_BatteringRamCart;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,2,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,2,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.Selection.Local:ExtendedLeaderSortOrder()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_Trebuchet;LeaderSortOrder[15]=Entities.U_MilitarySiegeTower;LeaderSortOrder[16]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[17]=Entities.U_CatapultCart;LeaderSortOrder[18]=Entities.U_SiegeTowerCart;LeaderSortOrder[19]=Entities.U_BatteringRamCart;LeaderSortOrder[20]=Entities.U_AmmunitionCart;LeaderSortOrder[21]=Entities.U_Thief;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,2,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,2,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.Selection.Local:OverwriteNamesAndDescription()GUI_Tooltip.SetNameAndDescription_Orig_Selection=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(nH,nI,nJ,nK,nL)local jN="/InGame/Root/Normal/AlignBottomRight"local hV=XGUIEng.GetCurrentWidgetID()if XGUIEng.GetWidgetID(jN.."/MapFrame/KnightButton")==hV then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.KnightButton.Title),Localize(Lib.Selection.Text.Tooltips.KnightButton.Text))return end;if XGUIEng.GetWidgetID(jN.."/MapFrame/BattalionButton")==hV then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.BattalionButton.Title),Localize(Lib.Selection.Text.Tooltips.BattalionButton.Text))return end;if XGUIEng.GetWidgetID(jN.."/DialogButtons/SiegeEngineCart/Dismount")==hV or XGUIEng.GetWidgetID(jN.."/DialogButtons/AmmunitionCart/Dismount")==hV or XGUIEng.GetWidgetID(jN.."/DialogButtons/Military/Dismount")==hV then local nj=GUI.GetSelectedEntity()if nj~=0 then if Logic.IsEntityInCategory(nj,EntityCategories.Military)==1 then local nM=Logic.GetGuardianEntityID(nj)local nN=Logic.GetGuardedEntityID(nj)if nM==0 and nN==0 then SetTooltipNormal(Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.Selection.Text.Tooltips.ReleaseSoldiers.Disabled))return end end end end;GUI_Tooltip.SetNameAndDescription_Orig_Selection(nH,nI,nJ,nK,nL)end end;RegisterModule(Lib.Selection.Name)Lib.Register("module/city/LifestockSystem_Text")Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Text={CattleStarved={de="Eure Kühe sind verhungert!",en="Your cows have starved to death!",fr="Tes vaches sont mortes de faim !"},SheepStarved={de="Eure Schafe sind verhungert!",en="Your sheep have starved to death!",fr="Vos moutons sont morts de faim!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/LifestockSystem_API")function SetCattleBreedingParameters(f2)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(f2)=="table","Malformed data passed!")local nO=f2.BasePrice or 300;local nP=f2.GrainCost or 10;local nQ=f2.GrainUpkeep or 1;local nR=f2.FeedingTimer or 0;local nS=f2.StarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.CattleBasePrice = %d]],nO)Lib.LifestockSystem.Global.CattleBasePrice=nO;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Cow] = %d]],nP)MerchantSystem.BasePrices[Goods.G_Cow]=nO;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainCost = %d]],nP)Lib.LifestockSystem.Global.CattleGrainCost=nP;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainUpkeep = %d]],nQ)Lib.LifestockSystem.Global.CattleGrainUpkeep=nQ;ExecuteLocal([[Lib.LifestockSystem.Global.CattleFeedingTimer = %d]],nR)Lib.LifestockSystem.Global.CattleFeedingTimer=nR;ExecuteLocal([[Lib.LifestockSystem.Global.CattleStarveChance = %d]],nS)Lib.LifestockSystem.Global.CattleStarveChance=nS end;API.SetCattleBreedingParameters=SetCattleBreedingParameters;function SetSheepBreedingParameters(f2)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(f2)=="table","Malformed data passed!")local nT=f2.SheepBasePrice or 300;local nU=f2.SheepGrainCost or 10;local nV=f2.SheepGrainUpkeep or 1;local nW=f2.SheepFeedingTimer or 0;local nX=f2.SheepStarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.SheepBasePrice = %d]],nT)Lib.LifestockSystem.Global.SheepBasePrice=nT;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Sheep] = %d]],nT)MerchantSystem.BasePrices[Goods.G_Sheep]=nT;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainCost = %d]],nU)Lib.LifestockSystem.Global.SheepGrainCost=nU;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainUpkeep = %d]],nV)Lib.LifestockSystem.Global.SheepGrainUpkeep=nV;ExecuteLocal([[Lib.LifestockSystem.Global.SheepFeedingTimer = %d]],nW)Lib.LifestockSystem.Global.SheepFeedingTimer=nW;ExecuteLocal([[Lib.LifestockSystem.Global.SheepStarveChance = %d]],nX)Lib.LifestockSystem.Global.SheepStarveChance=nX end;API.SetSheepBreedingParameters=SetSheepBreedingParameters;function RequireTitleToBreedCattle(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_Cattle)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Cattle,0)end end;API.RequireTitleToBreedCattle=RequireTitleToBreedCattle;function RequireTitleToBreedSheep(dY)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],dY)table.insert(NeedsAndRightsByKnightTitle[dY][4],1,Technologies.R_Sheep)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Sheep,0)end end;API.RequireTitleToBreedSheep=RequireTitleToBreedSheep;Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Name="LifestockSystem"Lib.LifestockSystem.Global={CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35}Lib.LifestockSystem.Local={BuyLock=false,CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleTitle="",CattleDescription="",CattleDisabled="",SheepTitle="",SheepDescription="",SheepDisabled=""}}Lib.LifestockSystem.Shared={TechnologyConfig={{"R_Cattle",{de="Kühe züchten",en="Breeding Cows",fr="Vaches reproductrices"},{3,16,0},0},{"R_Sheep",{de="Schafe züchten",en="Breeding Sheeps",fr="Moutons reproducteurs"},{4,1,0},0}}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/ui/UIBuilding")Lib.Require("module/faker/Technology")Lib.Require("module/promotion/Promotion")Lib.Require("module/city/LifestockSystem_API")Lib.Require("module/city/LifestockSystem_Text")Lib.Register("module/city/LifestockSystem")function Lib.LifestockSystem.Global:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()RequestJob(function()Lib.LifestockSystem.Global:ControlFeeding()Lib.LifestockSystem.Global:ControlDecay()end)Lib.LifestockSystem.Local=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Global:OnSaveGameLoaded()end;function Lib.LifestockSystem.Global:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.LanguageChanged then self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)elseif aw==Report.BreedAnimalClicked then Lib.LifestockSystem.Global:BuyAnimal(arg[1],arg[2],arg[3])end end;function Lib.LifestockSystem.Global:BuyAnimal(ce,aa,g0)local nY=ce=="Cattle"and Entities.A_X_Cow01 or Entities.A_X_Sheep01;local nZ=self[ce.."GrainCost"]if GetPlayerResources(Goods.G_Grain,aa)<nZ then return end;local A,B=Logic.GetBuildingApproachPosition(g0)local s=Logic.CreateEntity(nY,A,B,0,aa)AddGood(Goods.G_Grain,-1*nZ,aa)SendReport(Report[ce.."Bought"],aa,s,g0)SendReportToLocal(Report[ce.."Bought"],aa,s,g0)end;function Lib.LifestockSystem.Global:ControlFeeding()for n=1,8 do if Logic.PlayerGetIsHumanFlag(n)then local n_=self.CattleFeedingTimer;local o0={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}if n_>0 then local o1=math.max(n_*(1-0.03*#o0),15)if#o0>0 and Logic.GetTime()%math.floor(o1)==0 then local o2=self.CattleGrainUpkeep;local o3=GetPlayerResources(Goods.G_Grain,n)if o3<o2 then local o4=false;for g,h in pairs(o0)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_CattlePasture,A,B,750,1)if IsExisting(kK)and math.random(1,100)<=self.CattleStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.CattleStarved,n,h)SendReport(Report.CattleStarved,n,h)o4=true end end;if o4 then local bS=Localize(self.Text.CattleStarved)AddMessage(bS)end else AddGood(Goods.G_Grain,-1*o2,n)end end end;local o5=self.SheepFeedingTimer;local kC={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}if o5>0 then local o1=math.max(o5*(1-0.03*#kC),15)if#kC>0 and Logic.GetTime()%math.floor(o1)==0 then local o2=self.SheepGrainUpkeep;local o3=GetPlayerResources(Goods.G_Grain,n)if o3<o2 then local o4=false;for g,h in pairs(kC)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_CattlePasture,A,B,750,1)if IsExisting(kK)and math.random(1,100)<=self.SheepStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.SheepStarved,n,h)SendReport(Report.SheepStarved,n,h)end end;if o4 then local bS=Localize(self.Text.SheepStarved)AddMessage(bS)end else AddGood(Goods.G_Grain,-1*o2,n)end end end end end end;function Lib.LifestockSystem.Global:ControlDecay()if Logic.GetTime()%10==0 then local kJ=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(kJ)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_CattlePasture,A,B,900,1)if IsExisting(kK)then local hf=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hf-1)end end;local kL=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(kL)do local A,B,C=Logic.EntityGetPos(h)local gk,kK=Logic.GetEntitiesInArea(Entities.B_SheepPasture,A,B,900,1)if IsExisting(kK)then local hf=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hf-1)end end end end;function Lib.LifestockSystem.Local:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleTitle=XGUIEng.GetStringTableText("Names/A_X_Cow01")self.Text.CattleDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Cow")self.Text.CattleDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")self.Text.SheepTitle=XGUIEng.GetStringTableText("Names/A_X_Sheep01")self.Text.SheepDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Sheep")self.Text.SheepDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()self:InitBuyCowButton()self:InitBuySheepButton()Lib.LifestockSystem.Global=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Local:OnSaveGameLoaded()end;function Lib.LifestockSystem.Local:OnReportReceived(aw,...)if aw==Report.LoadingFinished then self.LoadscreenClosed=true elseif aw==Report.CattleBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end elseif aw==Report.SheepBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end end end;function Lib.LifestockSystem.Local:BuyAnimalAction(ce,dV,ag)local nZ=self[ce.."GrainCost"]local n=Logic.EntityGetPlayer(ag)if GetPlayerResources(Goods.G_Grain,n)<nZ then local bS=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")Message(bS)return end;self.BuyLock=true;SendReportToGlobal(Report.BreedAnimalClicked,ce,n,ag)SendReport(Report.BreedAnimalClicked,ce,n,ag)end;function Lib.LifestockSystem.Local:BuyAnimalTooltip(ce,dV,ag)local i0=self.Text[ce.."Title"]local bS=self.Text[ce.."Description"]local iC=""local nZ=self[ce.."GrainCost"]local n=Logic.EntityGetPlayer(ag)local o6=ce=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;if Logic.TechnologyGetState(n,o6)==0 then local bR=GUI_Tooltip.GetDisabledKeyForTechnologyType(o6)iC=GetStringText("UI_ButtonDisabled/"..bR)elseif XGUIEng.IsButtonDisabled(dV)==1 then iC=self.Text[ce.."Disabled"]end;SetTooltipCosts(i0,bS,iC,{Goods.G_Grain,nZ},true)end;function Lib.LifestockSystem.Local:BuyAnimalUpdate(ce,dV,ag)local n=Logic.EntityGetPlayer(ag)local o6=ce=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;local o7=Logic.GetEntityType(ag)local o8=Logic.TechnologyGetState(n,o6)local hU=ce=="Cattle"and{3,16}or{4,1}local o9=0;local oa=GetPlayerEntities(n,o7)local kE={Logic.GetPlayerEntitiesInCategory(n,EntityCategories[ce.."Pasture"])}if o8~=TechnologyStates.Unlocked and o8~=TechnologyStates.Researched or self.BuyLock or#oa*5<=#kE then hU=ce=="Cattle"and{4,2}or{4,3}o9=1 end;XGUIEng.DisableButton(dV,o9)SetIcon(dV,hU)end;function Lib.LifestockSystem.Local:InitBuyCowButton()local N={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_CattlePasture,N[1],N[2],function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalAction("Cattle",dV,ag)end,function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalTooltip("Cattle",dV,ag)end,function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalUpdate("Cattle",dV,ag)end)end;function Lib.LifestockSystem.Local:InitBuySheepButton()local N={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_SheepPasture,N[1],N[2],function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalAction("Sheep",dV,ag)end,function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalTooltip("Sheep",dV,ag)end,function(dV,ag)Lib.LifestockSystem.Local:BuyAnimalUpdate("Sheep",dV,ag)end)end;function Lib.LifestockSystem.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for bu=1,8 do Logic.TechnologySetState(bu,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.LifestockSystem.Name)ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local ob=g_QuestBehaviorTypes[f]if not _G["B_"..ob.Name].new then _G["B_"..ob.Name].new=function(self,...)local oc={...}local bz=table.copy(self)bz.i47ya_6aghw_frxil={}bz.v12ya_gg56h_al125={}for bu=1,#oc,1 do table.insert(bz.v12ya_gg56h_al125,oc[bu])if self.Parameter and self.Parameter[bu]~=nil then bz:AddParameter(bu-1,oc[bu])else table.insert(bz.i47ya_6aghw_frxil,oc[bu])end end;return bz end end end end;function RegisterBehavior(od)if GUI~=nil then return end;if type(od)~="table"or od.Name==nil then assert(false,"Behavior is invalid!")return end;if od.RequiresExtraNo and od.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..od.Name]then error(string.format("Behavior %s does not exist!",od.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==od.Name then return end end;table.insert(g_QuestBehaviorTypes,od)end;if not MapEditor and GUI then return end;function Reward_DEBUG(oe,dD,dE,dF,dG)return B_Reward_DEBUG:new(oe,dD,dE,dF,dG)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(b1)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(ce,of)if ce==0 then self.DisplayScriptErrors=ToBoolean(of)elseif ce==1 then self.CheckWhileRuntime=ToBoolean(of)elseif ce==2 then self.DevelopingCheats=ToBoolean(of)elseif ce==3 then self.DevelopingShell=ToBoolean(of)elseif ce==4 then self.UseQuestTrace=ToBoolean(of)end end;function B_Reward_DEBUG:CustomFunction(b1)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(ce)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local fy=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,fy,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(ce,of)if ce==0 then self.GoodTypeName=of elseif ce==1 then self.GoodAmount=of*1 elseif ce==2 then self.OverrideTarget=tonumber(of)elseif ce==3 then self.IgnoreCapture=ToBoolean(of)end end;function B_Goal_Deliver:GetCustomData(ce)local aU={}if ce==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(aU,g)end end;table.sort(aU)elseif ce==2 then table.insert(aU,"-")for f=1,8 do table.insert(aU,f)end elseif ce==3 then table.insert(aU,"true")table.insert(aU,"false")else assert(false)end;return aU end;function B_Goal_Deliver:GetMsgKey()local fy=Logic.GetGoodTypeID(self.GoodTypeName)local og=Logic.GetGoodCategoryForGoodType(fy)local oh={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if og then local bR=oh[og]if bR then return bR end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(b1)local oi=self:GetDiplomacyMapping()local aK=GetPlayerName(self.PlayerID)or""local bS=string.format(Localize(self.TextPattern),Localize(oi[self.DiplState]),aK)Lib.Core.Quest:ChangeCustomQuestCaptionText(bS,b1)end;function B_Goal_Diplomacy:CustomFunction(b1)self:ChangeCaption(b1)if self.Relation=="<="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.Relation=of elseif ce==2 then self.DiplState=DiplomacyStates[of]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(ce)if ce==1 then return{">=","<=","=="}elseif ce==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local oh={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local oj=GetPlayerCategoryType(self.PlayerID)if oj then local bR=oh[oj]if bR then return bR end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(ce,of)if ce==0 then self.TerritoryID=tonumber(of)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(of)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local oh={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local oj=GetPlayerCategoryType(self.PlayerID)if oj then local bR=oh[oj]if bR then return bR end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local av=Logic.GetHeadquarters(self.PlayerID)if not av or av==0 then av=Logic.GetStoreHouse(self.PlayerID)end;assert(av and av~=0)return{Objective.Steal,1,{av}}end;function B_Goal_StealInformation:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local oh={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local oj=GetPlayerCategoryType(self.PlayerID)if oj then local bR=oh[oj]if bR then return bR end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ae=GetID(self.ScriptName)if ae and ae~=0 then ae=Logic.GetEntityType(ae)if ae and ae~=0 then if Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(ce,of)if ce==0 then self.EntityName=of elseif ce==1 then self.Amount=of*1;self.DestroyTypeAmount=self.Amount elseif ce==2 then self.PlayerID=of*1 end end;function B_Goal_DestroyType:GetCustomData(ce)local aU={}if ce==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(aU,g)end end;table.sort(aU)elseif ce==2 then for f=0,8 do table.insert(aU,f)end else assert(false)end;return aU end;function B_Goal_DestroyType:GetMsgKey()local ae=self.EntityName;if Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(ce,of)if ce==0 then self.Entity1=of elseif ce==1 then self.Entity2=of elseif ce==2 then self.bRelSmallerThan=of=="<"elseif ce==3 then self.Distance=of*1 end end;function B_Goal_EntityDistance:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local al=GetID(self.Entity1)local ap=GetID(self.Entity2)local ok=Logic.CheckEntitiesDistance(al,ap,self.Distance)if self.bRelSmallerThan and ok or not self.bRelSmallerThan and not ok then return true end end;function B_Goal_EntityDistance:GetCustomData(ce)local aU={}if ce==2 then table.insert(aU,">")table.insert(aU,"<")else assert(false)end;return aU end;function B_Goal_EntityDistance:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then error(b1.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(ce,of)if ce==0 then self.Target=of elseif ce==1 then if of==nil or of==""then of=0 end;self.Distance=of*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(ce,of)if ce==0 then self.TerritoryID=tonumber(of)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(of)end elseif ce==1 then self.PlayerID=tonumber(of)*1 elseif ce==2 then self.Category=of elseif ce==3 then self.bRelSmallerThan=tostring(of)=="true"or tostring(of)=="<"elseif ce==4 then self.NumberOfUnits=of*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(b1)local cZ=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#cZ>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#cZ<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(e3,aa,fP)local cZ={}local ol={}if aa==-1 then for f=0,8 do local om=0;repeat ol={Logic.GetEntitiesOfCategoryInTerritory(e3,f,aa,om)}cZ=Array_Append(cZ,ol)om=om+#ol until#ol==0 end else local om=0;repeat ol={Logic.GetEntitiesOfCategoryInTerritory(e3,aa,fP,om)}cZ=Array_Append(cZ,ol)om=om+#ol until#ol==0 end;return cZ end;function B_Goal_UnitsOnTerritory:GetCustomData(ce)local aU={}if ce==1 then table.insert(aU,-1)for f=1,8 do table.insert(aU,f)end elseif ce==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(aU,g)end end;table.sort(aU)elseif ce==3 then table.insert(aU,">=")table.insert(aU,"<")else assert(false)end;return aU end;function B_Goal_UnitsOnTerritory:Debug(b1)local on={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(on,self.TerritoryID)then error(b1.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then error(b1.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then error(b1.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.BuffName=of;self.Buff=Buffs[of]end end;function B_Goal_ActivateBuff:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local oh=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then oh=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,oh)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(oh[self.BuffName])),b1)end;local hS=Logic.GetBuff(self.PlayerID,self.Buff)if hS and hS~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(ce)local aU={}if ce==1 then aU={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(aU,"Buff_Gems")table.insert(aU,"Buff_MusicalInstrument")table.insert(aU,"Buff_Olibanum")end;table.sort(aU)else assert(false)end;return aU end;function B_Goal_ActivateBuff:GetIcon()local oh={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then oh[Buffs.Buff_Gems]="Goods.G_Gems"oh[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"oh[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return oh[self.Buff]end;function B_Goal_ActivateBuff:Debug(b1)if not self.Buff then error(b1.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(ce,of)if ce==0 then self.Entity1=of elseif ce==1 then self.Entity2=of elseif ce==2 then self.bRoadsOnly=ToBoolean(of)end end;function B_Goal_BuildRoad:GetCustomData(ce)local aU;if ce==2 then aU={"true","false"}end;return aU end;function B_Goal_BuildRoad:Debug(b1)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then error(b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.EntityName1=of elseif ce==2 then self.EntityName2=of end end;function B_Goal_BuildWall:CustomFunction(b1)local oo=GetID(self.EntityName1)local op=GetID(self.EntityName2)if not IsExisting(oo)then return false end;if not IsExisting(op)then return false end;local A,B,C=Logic.EntityGetPos(oo)if Logic.IsBuilding(oo)==1 then A,B=Logic.GetBuildingApproachPosition(oo)end;local oq=Logic.GetPlayerSectorAtPosition(self.PlayerID,A,B)local A,B,C=Logic.EntityGetPos(op)if Logic.IsBuilding(op)==1 then A,B=Logic.GetBuildingApproachPosition(op)end;local os=Logic.GetPlayerSectorAtPosition(self.PlayerID,A,B)if oq~=os then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(b1)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then error(b1.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(b1.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(b1.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(ce,of)if ce==0 then self.TerritoryID=tonumber(of)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(of)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(ce,of)if ce==0 then self.TerritoriesToClaim=of*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(ce,of)if ce==0 then self.EntityName=of elseif ce==1 then self.Amount=of*1 elseif ce==2 then self.TerritoryID=tonumber(of)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(of)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local fy=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,fy,self.GoodAmount}end;function B_Goal_Produce:AddParameter(ce,of)if ce==0 then self.GoodTypeName=of elseif ce==1 then self.GoodAmount=of*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local fy=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,fy,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(ce,of)if ce==0 then self.GoodTypeName=of elseif ce==1 then self.GoodAmount=of*1 elseif ce==2 then self.bRelSmallerThan=of=="<"or tostring(of)=="true"end end;function B_Goal_GoodAmount:GetCustomData(ce)local aU={}if ce==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(aU,g)end end;table.sort(aU)elseif ce==2 then table.insert(aU,">=")table.insert(aU,"<")else assert(false)end;return aU end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.Need=of end end;function B_Goal_SatisfyNeed:GetMsgKey()local oh={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local bR=oh[Needs[self.Need]]if bR then return bR end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(ce,of)if ce==0 then self.SettlersAmount=of*1 elseif ce==1 then self.PlayerID=of*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(ce,of)if ce==0 then self.SpousesAmount=of*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.bRelSmallerThan=tostring(of)=="true"or tostring(of)=="<"elseif ce==2 then self.NumberOfUnits=of*1 end end;function B_Goal_SoldierCount:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local ot=tostring(self.bRelSmallerThan)local aK=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),aK,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[ot]),self.NumberOfUnits),b1)end;local ou=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and ou<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and ou>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(ce)local aU={}if ce==1 then table.insert(aU,">=")table.insert(aU,"<")else assert(false)end;return aU end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(b1)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then error(b1.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(ce,of)if ce==0 then self.KnightTitle=of end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(ce)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(ce,of)if ce==0 then self.PlayerID=tonumber(of)else assert(ce==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(of)end end;function B_Goal_Festivals:CustomFunction(b1)if not b1.QuestDescription or b1.QuestDescription==""then local aK=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),aK,self.NeededFestivals),b1)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local ov={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local ow=0;for g=2,#ov do local ox=ov[g]if Logic.GetIndexOnOutStockByGoodType(ox,Goods.G_Beer)~=-1 then local oy=Logic.GetAmountOnOutStockByGoodType(ox,Goods.G_Beer)ow=ow+oy end end;if not self.FestivalStarted and ow>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif ow==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then error(b1.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then error(b1.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Goal_Capture:GetMsgKey()local ae=GetID(self.ScriptName)if Logic.IsEntityAlive(ae)then ae=Logic.GetEntityType(ae)if ae and ae~=0 then if Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(ce,of)if ce==0 then self.EntityName=of elseif ce==1 then self.Amount=of*1 elseif ce==2 then self.PlayerID=of*1 end end;function B_Goal_CaptureType:GetCustomData(ce)local aU={}if ce==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(aU,g)end end;table.sort(aU)elseif ce==2 then for f=0,8 do table.insert(aU,f)end else assert(false)end;return aU end;function B_Goal_CaptureType:GetMsgKey()local ae=self.EntityName;if Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ae,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ae=GetID(self.ScriptName)if ae and ae~=0 then ae=Logic.GetEntityType(ae)if ae and ae~=0 then if Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.SpecialBuilding)==1 then local oh={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local oj=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if oj then local bR=oh[oj]if bR then return bR end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(ae,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(ce,of)if ce==0 then self.ScriptName=of elseif ce==1 then self.bRelSmallerThan=of=="<"elseif ce==2 then self.Amount=of*1 end end;function B_Goal_ResourceAmount:CustomFunction(b1)local ae=GetID(self.ScriptName)if ae and ae~=0 and Logic.GetResourceDoodadGoodType(ae)~=0 then local oz=Logic.GetResourceDoodadGoodAmount(ae)if self.bRelSmallerThan and oz<self.Amount or not self.bRelSmallerThan and oz>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(ce)local aU={}if ce==1 then table.insert(aU,">=")table.insert(aU,"<")else assert(false)end;return aU end;function B_Goal_ResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then error(b1.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(b1.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(ce,of)if ce==0 then self.FuncName=of end end;function B_Goal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Goal_MapScriptFunction:Debug(b1)if not self.FuncName then error(b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(ce,of)if ce==0 then self.VariableName=of elseif ce==1 then self.Relation=of elseif ce==2 then local oA=tonumber(of)self.Value=oA==nil and tostring(of)or oA end end;function B_Goal_CustomVariables:CustomFunction()local oB=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oC=self.Value;if type(self.Value)=="string"then oC=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if oB==oC then return true end elseif self.Relation=="~="then if oB==oC then return true end elseif self.Relation=="<"then if oB<oC then return true end elseif self.Relation=="<="then if oB<=oC then return true end elseif self.Relation==">="then if oB>=oC then return true end else if oB>oC then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(ce)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(b1)local oD={"==","~=","<=","<",">",">="}local oE={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(oD,self.Relation)then error(b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Goal_TributeDiplomacy(...)return B_Goal_TributeDiplomacy:new(...)end;B_Goal_TributeDiplomacy={Name="Goal_TributeDiplomacy",Description={en="Goal: AI requests periodical tribute for better Diplomacy",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer bessere Diplomatie. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour une meilleure diplomatie. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Time till next peyment in seconds",de="Zeit bis zur Forderung in Sekunden",fr="Temps jusqu'à la demande en secondes"},{ParameterType.Number,en="Time to pay tribute in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Custom,en="Restart if failed to pay",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeDiplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeDiplomacy:AddParameter(ce,of)if ce==0 then self.Amount=of*1 elseif ce==1 then self.PeriodLength=of*1 elseif ce==2 then self.TributTime=of*1 elseif ce==3 then self.StartMsg=of elseif ce==4 then self.SuccessMsg=of elseif ce==5 then self.FailureMsg=of elseif ce==6 then self.RestartAtFailure=ToBoolean(of)end end;function B_Goal_TributeDiplomacy:GetTributeQuest(b1)if not self.InternTributeQuest then local oF=CONST_LANGUAGE;local oG=self.StartMsg;if type(oG)=="table"then oG=oG[oF]end;local oH=self.SuccessMsg;if type(oH)=="table"then oH=oH[oF]end;local oI=self.FailureMsg;if type(oI)=="table"then oI=oI[oF]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bj,a_=QuestTemplate:New(b1.Identifier.."_TributeDiplomacyQuest_"..Lib.Core.Quest.QuestCounter,b1.SendingPlayer,b1.ReceivingPlayer,{{Objective.Deliver,{Goods.G_Gold,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,nil,nil,true,true,nil,oG,oH,oI)self.InternTributeQuest=a_ end end;function B_Goal_TributeDiplomacy:CheckTributeQuest(b1)if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Over and not self.RestartQuest then if self.InternTributeQuest.Result~=QuestResult.Success then SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.Enemy)if not self.RestartAtFailure then return false end else SetDiplomacyState(b1.ReceivingPlayer,b1.SendingPlayer,DiplomacyStates.TradeContact)end;self.RestartQuest=true;self.Time=Logic.GetTime()end end;function B_Goal_TributeDiplomacy:CheckTributePlayer(b1)local oJ=Logic.GetStoreHouse(b1.SendingPlayer)if oJ==0 or Logic.IsEntityDestroyed(oJ)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeDiplomacy:TributQuestRestarter(b1)if self.InternTributeQuest and self.Time and self.RestartQuest and Logic.GetTime()-self.Time>=self.PeriodLength then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)self.RestartQuest=nil end end;function B_Goal_TributeDiplomacy:CustomFunction(b1)self:GetTributeQuest(b1)if self:CheckTributeQuest(b1)==false then return false end;if self:CheckTributePlayer(b1)==true then return true end;self:TributQuestRestarter(b1)end;function B_Goal_TributeDiplomacy:Debug(b1)if self.Amount<0 then error(b1.Identifier..": "..self.Name..": Amount is negative!")return true end;if self.PeriodLength<self.TributTime then error(b1.Identifier..": "..self.Name..": TributTime too long!")return true end end;function B_Goal_TributeDiplomacy:Reset(b1)self.Time=nil;self.InternTributeQuest=nil;self.RestartQuest=nil end;function B_Goal_TributeDiplomacy:Interrupt(b1)if self.InternTributeQuest~=nil then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeDiplomacy:GetCustomData(ce)if ce==6 then return{"true","false"}end end;RegisterBehavior(B_Goal_TributeDiplomacy)function Goal_TributeClaim(...)return B_Goal_TributeClaim:new(...)end;B_Goal_TributeClaim={Name="Goal_TributeClaim",Description={en="Goal: AI requests periodical tribute for a specified territory. The quest sender is the demanding player.",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer ein Territorium. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour un territoire. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Good Type",de="Warentyp",fr="Type de biens"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Length of Period in seconds",de="Sekunden bis zur nächsten Forderung",fr="secondes jusqu'à la prochaine demande"},{ParameterType.Number,en="Time to pay Tribut in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Number,en="How often to pay (0 = forerver)",de="Anzahl der Tributquests (0 = unendlich)",fr="Nombre de quêtes de tribut (0 = infini)"},{ParameterType.Custom,en="Other Owner cancels the Quest",de="Anderer Spieler kann Quest beenden",fr="Un autre joueur peut terminer une quête"},{ParameterType.Custom,en="About if a rate is not payed",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeClaim:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeClaim:AddParameter(ce,of)if ce==0 then if type(of)=="string"then of=GetTerritoryIDByName(of)end;self.TerritoryID=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then self.GoodType=Goods[of or"G_Gold"]elseif ce==3 then self.Amount=of*1 elseif ce==4 then self.PeriodLength=of*1 elseif ce==5 then self.TributTime=of*1 elseif ce==6 then self.StartMsg=of elseif ce==7 then self.SuccessMsg=of elseif ce==8 then self.FailureMsg=of elseif ce==9 then self.HowOften=of*1 elseif ce==10 then self.OtherOwnerCancels=ToBoolean(of)elseif ce==11 then self.DontPayCancels=ToBoolean(of)end end;function B_Goal_TributeClaim:CureOutpost(b1)local oK=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(oK)and GetHealth(oK)<25 and Logic.IsBuildingBeingKnockedDown(oK)==false then while Logic.GetEntityHealth(oK)<Logic.GetEntityMaxHealth(oK)*0.6 do Logic.HealEntity(oK,1)end end end;function B_Goal_TributeClaim:RestartTributeQuest(b1)if self.InternTributeQuest then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)end end;function B_Goal_TributeClaim:CreateTributeQuest(b1)if not self.InternTributeQuest then local oF=CONST_LANGUAGE;local oG=self.StartMsg;if type(oG)=="table"then oG=oG[oF]end;local oH=self.SuccessMsg;if type(oH)=="table"then oH=oH[oF]end;local oI=self.FailureMsg;if type(oI)=="table"then oI=oI[oF]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local oL=function()self.Time=Logic.GetTime()end;local bj,a_=QuestTemplate:New(b1.Identifier.."_TributeClaimQuest"..Lib.Core.Quest.QuestCounter,self.PlayerID,b1.ReceivingPlayer,{{Objective.Deliver,{self.GoodType,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,oL,nil,true,true,nil,oG,oH,oI)self.InternTributeQuest=a_ end end;function B_Goal_TributeClaim:OnTributeFailed(b1)local oK=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(oK)then Logic.ChangeEntityPlayerID(oK,self.PlayerID)end;Logic.SetTerritoryPlayerID(self.TerritoryID,self.PlayerID)self.InternTributeQuest.State=false;self.Time=nil;if self.DontPayCancels then b1:Interrupt()end end;function B_Goal_TributeClaim:OnTributePaid(b1)local oK=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if self.InternTributeQuest.Result==QuestResult.Success then if Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if IsExisting(oK)then Logic.ChangeEntityPlayerID(oK,b1.ReceivingPlayer)end;Logic.SetTerritoryPlayerID(self.TerritoryID,b1.ReceivingPlayer)end end;if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then if self.HowOften and self.HowOften~=0 then self.TributeCounter=(self.TributeCounter or 0)+1;if self.TributeCounter>=self.HowOften then return false end end;self:RestartTributeQuest()self.Time=nil end end;function B_Goal_TributeClaim:CustomFunction(b1)self:CreateTributeQuest(b1)self:CureOutpost(b1)if Logic.GetTerritoryPlayerID(self.TerritoryID)==b1.ReceivingPlayer or Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if self.OtherOwner then self:RestartTributeQuest()self.OtherOwner=nil end;if self.InternTributeQuest.State==QuestState.Over then if self.InternTributeQuest.Result==QuestResult.Failure then self:OnTributeFailed(b1)else self:OnTributePaid(b1)end elseif self.InternTributeQuest.State==false then if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then self:RestartTributeQuest(b1)end end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)==0 and self.InternTributeQuest then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)~=self.PlayerID then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;if self.OtherOwnerCancels then b1:Interrupt()end;self.OtherOwner=true end;local oJ=Logic.GetStoreHouse(self.PlayerID)if oJ==0 or Logic.IsEntityDestroyed(oJ)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeClaim:Debug(b1)if self.TerritoryID==0 then error(b1.Identifier..": "..self.Name..": Unknown Territory")return true end;if not self.Quest and Logic.GetStoreHouse(self.PlayerID)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end;if self.Amount<0 then error(b1.Identifier..": "..self.Name..": Amount is negative")return true end;if self.PeriodLength<self.TributTime or self.PeriodLength<1 then error(b1.Identifier..": "..self.Name..": Period Length is wrong")return true end;if self.HowOften<0 then error(b1.Identifier..": "..self.Name..": HowOften is negative")return true end end;function B_Goal_TributeClaim:Reset(b1)self.InternTributeQuest=nil;self.Time=nil;self.OtherOwner=nil end;function B_Goal_TributeClaim:Interrupt(b1)if type(self.InternTributeQuest)=="table"then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeClaim:GetCustomData(ce)if ce==2 then local aU={}for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(aU,g)end end;table.sort(aU)return aU elseif ce==10 or ce==11 then return{"false","true"}end end;RegisterBehavior(B_Goal_TributeClaim)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(b1)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local aW=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[aW]and CONST_INITIALIZED_OBJECTS[aW]==b1.Identifier then error(b1.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(ce,of)if ce==0 then self.ScriptName=of elseif ce==1 then local oc=0;if of=="Always"or 1 then oc=1 end;self.UsingState=oc*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(b1)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(ce)if ce==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(b1)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local aW=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[aW]and CONST_INITIALIZED_OBJECTS[aW]==b1.Identifier then error(b1.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(b1)local mY=b1.SendingPlayer;local oM=b1.ReceivingPlayer;local State=GetDiplomacyState(oM,mY)if State>-2 then SetDiplomacyState(oM,mY,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(ce,of)if ce==0 then self.PlayerID1=of*1 elseif ce==1 then self.PlayerID2=of*1 elseif ce==2 then self.Relation=DiplomacyStates[of]end end;function B_Reprisal_Diplomacy:CustomFunction(b1)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(b1)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then error(b1.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then error(b1.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then error(b1.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Reprisal_DestroyEntity:CustomFunction(b1)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(b1)if not IsExisting(self.ScriptName)then warn(b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(ce,of)if ce==0 then self.EffectName=of end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then error(b1.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(ce,of)if ce==0 then self.ScriptName=of elseif ce==1 then self.NewType=of elseif ce==2 then self.PlayerID=tonumber(of)end end;function B_Reprisal_ReplaceEntity:CustomFunction(b1)local aW=GetID(self.ScriptName)local oN=self.PlayerID;if oN==Logic.EntityGetPlayer(aW)then oN=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],oN)end;function B_Reprisal_ReplaceEntity:GetCustomData(ce)local aU={}if ce==1 then for g,h in pairs(Entities)do local ah={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local oO=false;for f=1,#ah do if g:find(ah[f])then oO=true;break end end;if not oO then table.insert(aU,g)end end;table.sort(aU)elseif ce==2 then aU={"-","0","1","2","3","4","5","6","7","8"}end;return aU end;function B_Reprisal_ReplaceEntity:Debug(b1)if not Entities[self.NewType]then error(b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)then self.WarningPrinted=true;warn(b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(ce,of)if ce==0 then self.QuestName=of end end;function B_Reprisal_QuestRestart:CustomFunction(b1)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(ce,of)if ce==0 then self.QuestName=of end end;function B_Reprisal_QuestFailure:CustomFunction(b1)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(ce,of)if ce==0 then self.QuestName=of end end;function B_Reprisal_QuestSuccess:CustomFunction(b1)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(ce,of)if ce==0 then self.QuestName=of else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(b1)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(b1)if not IsValidQuest(self.QuestName)then error(b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(ce,of)if ce==0 then self.QuestName=of end end;function B_Reprisal_QuestInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)local a_=Quests[bj]if a_.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.InterruptEnded=ToBoolean(of)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(ce)local aU={}if ce==1 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reprisal_QuestForceInterrupt:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)local a_=Quests[bj]if self.InterruptEnded or a_.State~=QuestState.Over then a_:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(ce,of)if ce==0 then self.VariableName=of elseif ce==1 then self.Operator=of elseif ce==2 then local oA=tonumber(of)self.Value=oA==nil and tostring(of)or oA end end;function B_Reprisal_CustomVariables:CustomFunction()local oB=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oC=self.Value;if type(self.Value)=="string"then oC=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then oB=oC elseif self.Operator=="+"then oB=oB+oC elseif self.Operator=="-"then oB=oB-oC elseif self.Operator=="*"then oB=oB*oC elseif self.Operator=="/"then oB=oB/oC elseif self.Operator=="^"then oB=oB%oC end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,oB)end;function B_Reprisal_CustomVariables:GetCustomData(ce)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(b1)local oP={"=","+","-","*","/","^"}if not table.contains(oP,self.Operator)then error(b1.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then error(b1.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(ce,of)if ce==0 then self.FuncName=of end end;function B_Reprisal_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,b1)end;function B_Reprisal_MapScriptFunction:Debug(b1)if not self.FuncName then error(b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.LockType=of=="Lock"elseif ce==2 then self.Technology=of end end;function B_Reprisal_Technology:CustomFunction(b1)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(ce)local aU={}if ce==1 then aU[1]="Lock"aU[2]="UnLock"elseif ce==2 then for g,h in pairs(Technologies)do table.insert(aU,g)end end;return aU end;function B_Reprisal_Technology:Debug(b1)if not Technologies[self.Technology]then error(b1.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(ce,of)if ce==0 then self.ScriptName=of elseif ce==1 then self.Distance=of*1 elseif ce==2 then self.Waittime=of*1 elseif ce==3 then self.RewardType=of elseif ce==4 then self.RewardAmount=of*1 elseif ce==5 then self.FirstCostType=of elseif ce==6 then self.FirstCostAmount=of*1 elseif ce==7 then self.SecondCostType=of elseif ce==8 then self.SecondCostAmount=of*1 elseif ce==9 then local oc=nil;if of=="Always"or of==1 then oc=1 elseif of=="Never"or of==2 then oc=2 elseif of=="Knight only"or of==0 then oc=0 end;self.UsingState=oc end end;function B_Reward_ObjectInit:CustomFunction(b1)local aW=GetID(self.ScriptName)if aW==0 then return end;CONST_INITIALIZED_OBJECTS[aW]=b1.Identifier;Logic.InteractiveObjectClearCosts(aW)Logic.InteractiveObjectClearRewards(aW)Logic.InteractiveObjectSetInteractionDistance(aW,self.Distance)Logic.InteractiveObjectSetTimeToOpen(aW,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(aW,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(aW,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(aW,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(aW,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(aW,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(aW,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(aW,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(aW,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(aW,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(aW)table.insert(HiddenTreasures,aW)end;function B_Reward_ObjectInit:GetCustomData(ce)if ce==3 or ce==5 or ce==7 then local aU={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then aU[#aU+1]="G_Gems"aU[#aU+1]="G_MusicalInstrument"aU[#aU+1]="G_Olibanum"end;return aU elseif ce==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(b1)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then error(b1.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(b1.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then error(b1.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then error(b1.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then error(b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then error(b1.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then error(b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then error(b1.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then error(b1.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(b1)local mY=b1.SendingPlayer;local oM=b1.ReceivingPlayer;local State=GetDiplomacyState(oM,mY)if State<2 then SetDiplomacyState(oM,mY,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then of=of or 0;self.AmountOffer1=of*1 elseif ce==2 then self.Offer1=of elseif ce==3 then of=of or 0;self.AmountOffer2=of*1 elseif ce==4 then self.Offer2=of elseif ce==5 then of=of or 0;self.AmountOffer3=of*1 elseif ce==6 then self.Offer3=of elseif ce==7 then of=of or 0;self.AmountOffer4=of*1 elseif ce==8 then self.Offer4=of end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local oQ=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(oQ)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(oQ,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(oQ,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(oQ,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(ce)local oR={1,2,3,4,5,6,7,8}local dg={"1","2","3","4","5","6","7","8","9"}local kg={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(kg,"G_Gems")table.insert(kg,"G_Olibanum")table.insert(kg,"G_MusicalInstrument")table.insert(kg,"G_MilitaryBandit_Ranged_AS")table.insert(kg,"G_MilitaryBandit_Melee_AS")table.insert(kg,"U_MilitarySword_Khana")table.insert(kg,"U_MilitaryBow_Khana")end;if ce==0 then return oR elseif ce==1 or ce==3 or ce==5 or ce==7 then return dg elseif ce==2 or ce==4 or ce==6 or ce==8 then return kg end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(ce,of)if ce==0 then self.ScriptNameEntity=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then self.UnitKey=of elseif ce==3 then self.Orientation=of*1 elseif ce==4 then self.SoldierCount=of*1 elseif ce==5 then self.HideFromAI=ToBoolean(of)end end;function B_Reward_CreateBattalion:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local ay=GetPosition(self.ScriptNameEntity)local dw=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],ay.X,ay.Y,self.Orientation,self.PlayerID,self.SoldierCount)local oS=GetID(self.ScriptNameEntity)if Logic.IsBuilding(oS)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(dw,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dw,true)end end;function B_Reward_CreateBattalion:GetCustomData(ce)local aU={}if ce==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(aU,g)end end;table.sort(aU)elseif ce==5 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_CreateBattalion:Debug(b1)if not Entities[self.UnitKey]then error(b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then error(b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then error(b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(ce,of)if ce==0 then self.Amount=of*1 elseif ce==1 then self.ScriptNameEntity=of elseif ce==2 then self.PlayerID=of*1 elseif ce==3 then self.UnitKey=of elseif ce==4 then self.Orientation=of*1 elseif ce==5 then self.SoldierCount=of*1 elseif ce==6 then self.HideFromAI=ToBoolean(of)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local oT=GetID(self.ScriptNameEntity)local A,B,C=Logic.EntityGetPos(oT)if Logic.IsBuilding(oT)==1 then A,B=Logic.GetBuildingApproachPosition(oT)end;for f=1,self.Amount do local dw=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],A,B,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(dw,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dw,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(ce)local aU={}if ce==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(aU,g)end end;table.sort(aU)elseif ce==6 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_CreateSeveralBattalions:Debug(b1)if not Entities[self.UnitKey]then error(b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then error(b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then error(b1.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(ce,of)if ce==0 then self.EffectName=of elseif ce==1 then self.Type=EGL_Effects[of]elseif ce==2 then self.PlayerID=of*1 elseif ce==3 then self.Location=of elseif ce==4 then self.Orientation=of*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(b1)if Logic.IsEntityDestroyed(self.Location)then return end;local oU=assert(GetID(self.Location),b1.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local oV,oW=Logic.GetEntityPosition(oU)local aA=tonumber(self.Orientation)local oX=Logic.CreateEffectWithOrientation(self.Type,oV,oW,aA,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=oX end end;function B_Reward_CreateEffect:Debug(b1)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then error(b1.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then error(b1.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then error(b1.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then error(b1.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(ce)assert(ce==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local oY={}for g,h in pairs(EGL_Effects)do table.insert(oY,g)end;table.sort(oY)return oY end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(ce,of)if ce==0 then self.ScriptNameEntity=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then self.UnitKey=of elseif ce==3 then self.Orientation=of*1 elseif ce==4 then self.HideFromAI=ToBoolean(of)end end;function B_Reward_CreateEntity:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local ay=GetPosition(self.ScriptNameEntity)local dw;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then dw=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],ay.X,ay.Y,self.Orientation,self.PlayerID,1)local oZ,cl=Logic.GetSoldiersAttachedToLeader(dw)Logic.SetOrientation(cl,math.floor(self.Orientation+0.5))else dw=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],ay.X,ay.Y,self.Orientation,self.PlayerID)end;local oS=GetID(self.ScriptNameEntity)if Logic.IsBuilding(oS)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(dw,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dw,true)end end;function B_Reward_CreateEntity:GetCustomData(ce)local aU={}if ce==2 then for g,h in pairs(Entities)do local ah={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local oO=false;for f=1,#ah do if g:find(ah[f])then oO=true;break end end;if not oO then table.insert(aU,g)end end;table.sort(aU)elseif ce==4 or ce==5 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_CreateEntity:Debug(b1)if not Entities[self.UnitKey]then error(b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then error(b1.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(ce,of)if ce==0 then self.Amount=of*1 elseif ce==1 then self.ScriptNameEntity=of elseif ce==2 then self.PlayerID=of*1 elseif ce==3 then self.UnitKey=of elseif ce==4 then self.Orientation=of*1 elseif ce==5 then self.HideFromAI=ToBoolean(of)end end;function B_Reward_CreateSeveralEntities:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local ay=GetPosition(self.ScriptNameEntity)local dw;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then dw=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],ay.X,ay.Y,self.Orientation,self.PlayerID,1)local oZ,cl=Logic.GetSoldiersAttachedToLeader(dw)Logic.SetOrientation(cl,math.floor(self.Orientation+0.5))else dw=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],ay.X,ay.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(dw,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dw,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(ce)local aU={}if ce==3 then for g,h in pairs(Entities)do local ah={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local oO=false;for f=1,#ah do if g:find(ah[f])then oO=true;break end end;if not oO then table.insert(aU,g)end end;table.sort(aU)elseif ce==5 or ce==6 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_CreateSeveralEntities:Debug(b1)if not Entities[self.UnitKey]then error(b1.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then error(b1.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then error(b1.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(ce,of)if ce==0 then self.ScriptNameUnit=of elseif ce==1 then self.ScriptNameDest=of end end;function B_Reward_MoveSettler:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local o_=GetID(self.ScriptNameDest)local p0,p1=Logic.GetEntityPosition(o_)if Logic.IsBuilding(o_)==1 then p0,p1=Logic.GetBuildingApproachPosition(o_)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),p0,p1)end;function B_Reward_MoveSettler:Debug(b1)if not IsExisting(self.ScriptNameUnit)then error(b1.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then error(b1.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(b1)b1:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(b1.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(ce,of)if ce==0 then self.AIPlayerID=of*1 elseif ce==1 then self.Spawnpoint=of elseif ce==2 then self.TerritoryID=tonumber(of)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(of)end elseif ce==3 then self.NumSword=of*1 elseif ce==4 then self.NumBow=of*1 elseif ce==5 then self.NumCatapults=of*1 elseif ce==6 then self.NumSiegeTowers=of*1 elseif ce==7 then self.NumRams=of*1 elseif ce==8 then self.NumAmmoCarts=of*1 elseif ce==9 then if of=="Normal"or of==false then self.TroopType=false elseif of=="RedPrince"or of==true then self.TroopType=true elseif of=="Bandit"or of==2 then self.TroopType=2 elseif of=="Cultist"or of==3 then self.TroopType=3 else assert(false)end elseif ce==10 then self.ReuseTroops=ToBoolean(of)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(ce)local aU={}if ce==9 then table.insert(aU,"Normal")table.insert(aU,"RedPrince")table.insert(aU,"Bandit")if g_GameExtraNo>=1 then table.insert(aU,"Cultist")end elseif ce==10 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(b1)local p2=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if p2~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,p2,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(b1)if self.AIPlayerID<2 then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then error(b1.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then error(b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(b1.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then error(b1.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then error(b1.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then error(b1.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then error(b1.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(ce,of)if ce==0 then self.AIPlayerID=of*1 elseif ce==1 then self.Spawnpoint=of elseif ce==2 then self.TargetName=of elseif ce==3 then self.Radius=of*1 elseif ce==4 then self.NumSword=of*1 elseif ce==5 then self.NumBow=of*1 elseif ce==6 then if of=="Normal"or of==false then self.TroopType=false elseif of=="RedPrince"or of==true then self.TroopType=true elseif of=="Bandit"or of==2 then self.TroopType=2 elseif of=="Cultist"or of==3 then self.TroopType=3 else assert(false)end elseif ce==7 then self.ReuseTroops=ToBoolean(of)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(ce)local aU={}if ce==6 then table.insert(aU,"Normal")table.insert(aU,"RedPrince")table.insert(aU,"Bandit")if g_GameExtraNo>=1 then table.insert(aU,"Cultist")end elseif ce==7 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local p2=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,p2,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(b1)if self.AIPlayerID<2 then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then error(b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then error(b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then error(b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(ce,of)if ce==0 then self.AIPlayerID=of*1 elseif ce==1 then self.Spawnpoint=of elseif ce==2 then self.TargetName=of elseif ce==3 then self.Radius=of*1 elseif ce==4 then self.Time=of*1 elseif ce==5 then self.NumSword=of*1 elseif ce==6 then self.NumBow=of*1 elseif ce==7 then self.CaptureTradeCarts=ToBoolean(of)elseif ce==8 then if of=="Normal"or of==true then self.TroopType=false elseif of=="RedPrince"or of==false then self.TroopType=true elseif of=="Bandit"or of==2 then self.TroopType=2 elseif of=="Cultist"or of==3 then self.TroopType=3 else assert(false)end elseif ce==9 then self.ReuseTroops=ToBoolean(of)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(ce)local aU={}if ce==7 then table.insert(aU,"false")table.insert(aU,"true")elseif ce==8 then table.insert(aU,"Normal")table.insert(aU,"RedPrince")table.insert(aU,"Bandit")if g_GameExtraNo>=1 then table.insert(aU,"Cultist")end elseif ce==9 then table.insert(aU,"false")table.insert(aU,"true")else assert(false)end;return aU end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(b1)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local p2=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,p2,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(b1)if self.AIPlayerID<2 then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then error(b1.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then error(b1.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then error(b1.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then error(b1.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then error(b1.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then error(b1.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then error(b1.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(ce,of)if ce==0 then self.AIPlayerID=of*1 elseif ce==1 then local p3={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=p3[of]elseif ce==2 then self.Value=of*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(b1)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(ce)if ce==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(b1)if Logic.GetStoreHouse(self.AIPlayerID)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then error(b1.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then error(b1.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then error(b1.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then error(b1.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(ce,of)if ce==0 then self.AIPlayer=of*1 elseif ce==1 then self.Aggressiveness=tonumber(of)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local az=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)PlayerAIs[self.AIPlayer]=az;if self.Aggressiveness>=2 then az.ProfileLoop=AIProfile_Skirmish;az.Skirmish=az.Skirmish or{}az.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;az.Skirmish.Claim_MaxTime=az.Skirmish.Claim_MinTime*2 else az.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(b1)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(ce)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(ce,of)if ce==0 then self.AIPlayer=of*1 elseif ce==1 then self.Enemy=of*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local az=PlayerAIs[self.AIPlayer]if az and az.Skirmish then az.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(b1)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then error(b1.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(ce,of)if ce==0 then self.ScriptName=of elseif ce==1 then self.Amount=of*1 end end;function B_Reward_SetResourceAmount:CustomFunction(b1)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local s=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(s)==0 then return false end;Logic.SetResourceDoodadGoodAmount(s,self.Amount)end;function B_Reward_SetResourceAmount:Debug(b1)if not IsExisting(self.ScriptName)then error(b1.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then error(b1.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(ce,of)if ce==0 then self.GoodTypeName=of elseif ce==1 then self.GoodAmount=of*1 end end;function B_Reward_Resources:GetRewardTable()local fy=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,fy,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(ce,of)if ce==0 then self.ScriptNameEntity=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then self.UnitKey=of elseif ce==3 then self.GoodType=of elseif ce==4 then self.GoodAmount=of*1 elseif ce==5 then self.OverrideTargetPlayer=tonumber(of)elseif ce==6 then self.IgnoreReservation=ToBoolean(of)elseif ce==7 then self.ReplaceEntity=ToBoolean(of)end end;function B_Reward_SendCart:CustomFunction(b1)if not IsExisting(self.ScriptNameEntity)then return false end;local ae=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(ae,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(ae,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(ce)local aU={}if ce==2 then aU={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif ce==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(aU,g)end end;table.sort(aU)elseif ce==5 then table.insert(aU,"-")for f=1,8 do table.insert(aU,f)end elseif ce==6 then table.insert(aU,"false")table.insert(aU,"true")elseif ce==7 then table.insert(aU,"false")table.insert(aU,"true")end;return aU end;function B_Reward_SendCart:Debug(b1)if not IsExisting(self.ScriptNameEntity)then error(b1.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then error(b1.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then error(b1.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then error(b1.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then error(b1.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then error(b1.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(ce,of)if ce==0 then self.EntityName=of elseif ce==1 then self.Amount=of*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(ce,of)if ce==0 then self.Points=of end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(ce,of)if ce==0 then self.Scriptname=of else self.SoldiersType=of end end;function B_Reward_AI_MountOutpost:CustomFunction(b1)local p4=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),b1.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local p5=Logic.EntityGetPlayer(p4)local p6,p7=Logic.GetBuildingApproachPosition(p4)local p8=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],p6,p7,0,p5,0)AICore.HideEntityFromAI(p5,p8,true)Logic.CommandEntityToMountBuilding(p8,p4)end;function B_Reward_AI_MountOutpost:GetCustomData(ce)if ce==1 then local aU={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then aU[#aU+1]=g end end;return aU end end;function B_Reward_AI_MountOutpost:Debug(b1)if Logic.IsEntityDestroyed(self.Scriptname)then error(b1.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(ce,of)self.QuestName=of end;function B_Reward_QuestRestartForceActive:CustomFunction(b1)local bj,a_=self:ResetQuest(b1)if bj then a_:SetMsgKeyOverride()a_:SetIconOverride()a_:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(b1)if not Quests[GetQuestID(self.QuestName)]then error(b1.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(ce,of)if ce==0 then self.Building=of end end;function B_Reward_UpgradeBuilding:CustomFunction(b1)local p9=GetID(self.Building)if p9~=0 and Logic.IsBuilding(p9)==1 and Logic.IsBuildingUpgradable(p9,true)and Logic.IsBuildingUpgradable(p9,false)then Logic.UpgradeBuilding(p9)end end;function B_Reward_UpgradeBuilding:Debug(b1)local p9=GetID(self.Building)if not(p9~=0 and Logic.IsBuilding(p9)==1 and Logic.IsBuildingUpgradable(p9,true)and Logic.IsBuildingUpgradable(p9,false))then error(b1.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(ce,of)if ce==0 then self.Building=of elseif ce==1 then self.UpgradeLevel=tonumber(of)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local p9=Logic.GetEntityIDByName(self.Building)local pa=Logic.GetUpgradeLevel(p9)local pb=Logic.GetMaxUpgradeLevel(p9)if p9~=0 and Logic.IsBuilding(p9)==1 and(Logic.IsBuildingUpgradable(p9,true)or pb~=0 and pb==pa)then Logic.SetUpgradableBuildingState(p9,math.min(self.UpgradeLevel,pb),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(b1)local p9=Logic.GetEntityIDByName(self.Building)if not p9 or Logic.IsBuilding(p9)==0 then error(b1.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then error(b1.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(ce)if ce==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.DiplState=of end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.Need=of elseif ce==2 then self.WorkersOnStrike=of*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(b1)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then error(b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then error(b1.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then error(b1.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(ce,of)if ce==0 then self.ScriptName=of end end;function B_Trigger_OnResourceDepleted:CustomFunction(b1)local ae=GetID(self.ScriptName)return not ae or ae==0 or Logic.GetResourceDoodadGoodType(ae)==0 or Logic.GetResourceDoodadGoodAmount(ae)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(ce,of)if ce==0 then self.PlayerID=of*1 elseif ce==1 then self.GoodTypeName=of elseif ce==2 then self.GoodAmount=of*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(b1)local cO=Logic.GetStoreHouse(self.PlayerID)if cO==0 then return false end;local fy=Logic.GetGoodTypeID(self.GoodTypeName)local hf=Logic.GetAmountOnOutStockByGoodType(cO,fy)if hf>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(b1)if Logic.GetStoreHouse(self.PlayerID)==0 then error(b1.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then error(b1.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then error(b1.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.WaitTime=of~=nil and tonumber(of)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(b1)local bj=GetQuestID(self.QuestName)if bj~=nil then assert(type(bj)=="number")if Quests[bj].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(b1)end;function B_Trigger_OnQuestActiveWait:Reset(b1)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(ce,of)if ce==0 then self.QuestName=of;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.WaitTime=of~=nil and tonumber(of)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)if Quests[bj].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(ce,of)if ce==0 then self.QuestName=of;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(ce,of)if ce==0 then self.QuestName=of end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)if Quests[bj].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.WaitTime=of~=nil and tonumber(of)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)if Quests[bj].State==QuestState.Over and Quests[bj].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(ce,of)if ce==0 then self.QuestName=of;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.WaitTime=of~=nil and tonumber(of)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(b1)if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)if Quests[bj].State==QuestState.Over and Quests[bj].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(b1.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(ce,of)if ce==0 then self.QuestName=of;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(ce,of)if ce==0 then self.QuestName=of elseif ce==1 then self.WaitTime=of~=nil and tonumber(of)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bj=GetQuestID(self.QuestName)if Quests[bj].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(b1)if type(self.QuestName)~="string"then error(b1.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then error(b1.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(b1)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(b1)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(ce,of)if ce==0 then self.QuestName=of;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(ce,of)if ce==0 then self.VariableName=of elseif ce==1 then self.Relation=of elseif ce==2 then local oA=tonumber(of)oA=oA~=nil and oA or of;self.Value=oA end end;function B_Trigger_CustomVariables:CustomFunction()local oB=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local oC=self.Value;if type(self.Value)=="string"then oC=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return oB==oC elseif self.Relation~="~="then return oB~=oC elseif self.Relation==">"then return oB>oC elseif self.Relation==">="then return oB>=oC elseif self.Relation=="<="then return oB<=oC else return oB<oC end;return false end;function B_Trigger_CustomVariables:GetCustomData(ce)if ce==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(b1)local oD={"==","~=","<=","<",">",">="}local oE={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(b1.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(oD,self.Relation)then error(b1.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(ce,of)if ce==0 then self.Month=of*1 end end;function B_Trigger_OnMonth:CustomFunction(b1)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(ce)local aU={}if ce==0 then for f=1,12 do table.insert(aU,f)end else assert(false)end;return aU end;function B_Trigger_OnMonth:Debug(b1)if self.Month<1 or self.Month>12 then error(b1.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(b1)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(ce,of)if ce==0 then self.Time=of*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(b1)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(ce,of)self.QuestTable={}if ce==0 then self.Quest1=of elseif ce==1 then self.Quest2=of end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(b1)local pc=Quests[GetQuestID(self.Quest1)]local pd=Quests[GetQuestID(self.Quest2)]if pc.State==QuestState.Over and pc.Result==QuestResult.Failure or pd.State==QuestState.Over and pd.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(ce,of)self.QuestTable={}if ce==0 then self.Quest1=of elseif ce==1 then self.Quest2=of end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(b1)local pc=Quests[GetQuestID(self.Quest1)]local pd=Quests[GetQuestID(self.Quest2)]if pc.State==QuestState.Over and pc.Result==QuestResult.Success or pd.State==QuestState.Over and pd.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(b1)if self.Quest1==self.Quest2 then error(b1.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(b1.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(ce,of)if ce==0 then self.LeastAmount=tonumber(of)elseif ce==1 then self.QuestAmount=tonumber(of)elseif ce==2 then self.QuestName1=of elseif ce==3 then self.QuestName2=of elseif ce==4 then self.QuestName3=of elseif ce==5 then self.QuestName4=of elseif ce==6 then self.QuestName5=of end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local pe=0;for f=1,self.QuestAmount do local bj=GetQuestID(self["QuestName"..f])if IsValidQuest(bj)then if Quests[bj].Result==QuestResult.Success then pe=pe+1;if pe>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(b1)local pf=self.LeastAmount;local pg=self.QuestAmount;if pf<=0 or pf>5 then error(b1.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif pg<=0 or pg>5 then error(b1.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif pf>pg then error(b1.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,pg do if not IsValidQuest(self["QuestName"..f])then error(b1.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(ce)if ce==0 or ce==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(b1)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(ce,of)if ce==0 then self.FuncName=of end end;function B_Trigger_MapScriptFunction:CustomFunction(b1)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,b1)end;function B_Trigger_MapScriptFunction:Debug(b1)if not self.FuncName then error(b1.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then error(b1.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(ce,of)if ce==0 then self.EffectName=of end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(b1)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then error(b1.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)function Goal_NPC(ph,pi)return B_Goal_NPC:new(ph,pi)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(ce,of)if ce==0 then self.NPC=of elseif ce==1 then self.Hero=of;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(ce,of)if ce==0 then assert(of~=nil and of~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if of~=nil and of~=""then table.insert(self.ScriptNames,of)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,b1)local s=GetID(self.ScriptName)if s==0 then return end;CONST_INITIALIZED_OBJECTS[s]=b1.Identifier;local pj;if self.RewardType and self.RewardType~="-"then pj={Goods[self.RewardType],self.RewardAmount}end;local pk;if self.FirstCostType and self.FirstCostType~="-"then pk=pj or{}table.insert(pk,Goods[self.FirstCostType])table.insert(pk,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then pk=pj or{}table.insert(pk,Goods[self.SecondCostType])table.insert(pk,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=pj,Costs=pk}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function Reprisal_Briefing(y,le)return B_Reprisal_Briefing:new(y,le)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(ce,of)if ce==0 then self.BriefingName=of elseif ce==1 then self.Function=of end end;function B_Reprisal_Briefing:CustomFunction(b1)_G[self.Function](self.BriefingName,b1.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(b1)if self.BriefingName==nil or self.BriefingName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reprisal_Briefing)end;function Reward_Briefing(y,le)return B_Reward_Briefing:new(y,le)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reward_Briefing)end;function Trigger_Briefing(y,aa,bG)return B_Trigger_Briefing:new(y,aa,bG)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(ce,of)if ce==0 then self.BriefingName=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then of=of or 0;self.WaitTime=of*1 end end;function B_Trigger_Briefing:CustomFunction(b1)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(b1)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Trigger_Briefing)end;function Reprisal_Cutscene(y,mP)return B_Reprisal_Cutscene:new(y,mP)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(ce,of)if ce==0 then self.CutsceneName=of elseif ce==1 then self.Function=of end end;function B_Reprisal_Cutscene:CustomFunction(b1)_G[self.Function](self.CutsceneName,b1.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(b1)if self.CutsceneName==nil or self.CutsceneName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reprisal_Cutscene)end;function Reward_Cutscene(y,mP)return B_Reward_Cutscene:new(y,mP)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reward_Cutscene)end;function Trigger_Cutscene(y,aa,bG)return B_Trigger_Cutscene:new(y,aa,bG)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(ce,of)if ce==0 then self.CutsceneName=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then of=of or 0;self.WaitTime=of*1 end end;function B_Trigger_Cutscene:CustomFunction(b1)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(b1)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Trigger_Cutscene)end;function Reprisal_Dialog(y,mX)return B_Reprisal_Dialog:new(y,mX)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(ce,of)if ce==0 then self.DialogName=of elseif ce==1 then self.Function=of end end;function B_Reprisal_Dialog:CustomFunction(b1)_G[self.Function](self.DialogName,b1.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(b1)if self.DialogName==nil or self.DialogName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then error(b1.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reprisal_Dialog)end;function Reward_Dialog(y,mX)return B_Reward_Dialog:new(y,mX)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,b1)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reward_Dialog)end;function Trigger_Dialog(y,aa,bG)return B_Trigger_Dialog:new(y,aa,bG)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(ce,of)if ce==0 then self.DialogName=of elseif ce==1 then self.PlayerID=of*1 elseif ce==2 then of=of or 0;self.WaitTime=of*1 end end;function B_Trigger_Dialog:CustomFunction(b1)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(b1)if self.WaitTime<0 then error(string.format("%s: %s: Wait time must be 0 or greater!",b1.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then error(string.format("%s: %s: Player-ID must be between 1 and 8!",b1.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then error(string.format("%s: %s: Dialog name is invalid!",b1.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Trigger_Dialog)end
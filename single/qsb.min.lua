Lib={Loader={Paths={"script/"},Version="LIB 1.0.0",Root="libertica",IsLocalEnv=GUI~=nil,IsHistoryEdition=false,Sources={},Loaded={}}}if Framework and Network then local Name=Framework.GetCurrentMapName()table.insert(Lib.Loader.Paths,1,"maps/externalmap/"..Name.."/")Lib.Loader.IsHistoryEdition=Network.IsNATReady~=nil end;API={}QSB={}function Lib.Loader.PushPath(a)end;function Lib.Loader.Require(a)end;Lib.Require=Lib.Loader.Require;function Lib.Loader.Register(a)end;Lib.Register=Lib.Loader.Register;function Lib.Loader.LoadSourceFile(b,a)end;Lib.Register("comfort/CopyTable")function CopyTable(b,c)local d=c or{}assert(type(b)=="table","CopyTable: Source is nil!")assert(type(d)=="table")local e=0;for f=1,#b do e=e+1;if type(b[f])=="table"then table.insert(d,CopyTable(b[f]))else table.insert(d,b[f])end end;for g,h in pairs(b)do if type(g)=="number"then if g<=0 or g>e then if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end else if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end end;return d end;API.CopyTable=CopyTable;Lib.Register("comfort/GetCategoriesOfType")function GetCategoriesOfType(i)local j={}for g,h in pairs(EntityCategories)do if Logic.IsEntityTypeInCategory(i,h)==1 then table.insert(j,h)end end;return j end;Lib.Require("comfort/GetCategoriesOfType")Lib.Register("comfort/GetCategoriesOfEntity")function GetCategoriesOfEntity(k)local l=Logic.GetEntityType(k)return GetCategoriesOfType(l)end;Lib.Register("comfort/GetActivePlayers")function GetActivePlayers()local m={}for f=1,8 do if Network.IsNetworkSlotIDUsed(f)then local n=Logic.GetSlotPlayerID(f)if Logic.PlayerGetIsHumanFlag(n)and Logic.PlayerGetGameState(n)~=0 then table.insert(m,n)end end end;return m end;API.GetActivePlayers=GetActivePlayers;Lib.Require("comfort/GetActivePlayers")Lib.Register("comfort/GetDelayedPlayers")function GetDelayedPlayers()local m={}for g,h in pairs(GetActivePlayers())do if Network.IsWaitingForNetworkSlotID(API.GetPlayerSlotID(h))then table.insert(m,h)end end;return m end;API.GetDelayedPlayers=GetDelayedPlayers;Lib.Register("comfort/GetPlayerAtSlot")function GetPlayerAtSlot(o)if Network.IsNetworkSlotIDUsed(o)then local p=Logic.GetSlotPlayerID(o)if Logic.PlayerGetIsHumanFlag(p)then return p end end;return 0 end;API.GetSlotPlayerID=GetPlayerAtSlot;Lib.Register("comfort/SetPlayerName")CONST_PLAYER_NAMES={}function SetPlayerName(q,r)assert(type(q)=="number")assert(type(r)=="string")if not GUI then ExecuteLocal([[SetPlayerName(%d, "%s")]],q,r)return end;GUI_MissionStatistic.PlayerNames[q]=r;CONST_PLAYER_NAMES[q]=r end;API.SetPlayerName=SetPlayerName;Lib.Require("comfort/SetPlayerName")Lib.Register("comfort/GetPlayerName")GetPlayerName_OrigName=GetPlayerName;function GetPlayerName(q)local s=Logic.GetPlayerName(q)local t=CONST_PLAYER_NAMES[q]if t~=nil and t~=""then s=t end;local u=Framework.GetCurrentMapTypeAndCampaignName()local v=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),u)if v>0 then return s end;if u==1 or u==3 then local w,x,y=Framework.GetPlayerInfo(q)if s~=""then return s end;return w end end;API.GetPlayerName=GetPlayerName;Lib.Register("comfort/GetSoldiersOfGroup")function GetSoldiersOfGroup(z)local A={}local B=GetID(z)assert(B~=0,"Entity does not exist.")if Logic.IsLeader(B)==1 then local C={Logic.GetSoldiersAttachedToLeader(B)}for f=2,C[1]+1 do table.insert(A,C[f])end end;return A end;API.GetSoldiersOfGroup=GetSoldiersOfGroup;Lib.Register("comfort/IsLocalScript")function IsLocalScript()return GUI~=nil end;API.IsLocalScript=IsLocalScript;Lib.Register("comfort/KeyOf")function KeyOf(D,E)if E==nil then return false end;for g,h in pairs(E)do if h==D then return g end end end;API.KeyOf=KeyOf;Lib.Register("comfort/ToBoolean")function ToBoolean(F)if type(F)=="boolean"then return F end;if type(F)=="number"then return F==1 end;if string.find(string.lower(tostring(F)),"^[1tjy\\+].*$")then return true end;return false end;API.ToBoolean=ToBoolean;Lib.Register("comfort/DumpTable")function DumpTable(G,r)local H="{"if r then H=r.." = \n"..H end;Framework.WriteToLog(H)for g,h in pairs(G)do if type(h)=="table"then Framework.WriteToLog("["..g.."] = ")DumpTable(h)elseif type(h)=="string"then Framework.WriteToLog("["..g.."] = \""..h.."\"")else Framework.WriteToLog("["..g.."] = "..tostring(h))end end;Framework.WriteToLog("}")end;API.DumpTable=DumpTable;Lib.Register("comfort/GetPosition")function GetPosition(k)if not k then return{X=0,Y=0,Z=0}end;if type(k)=="table"and k.X and k.Y then k.Z=k.Z or 0;return k end;assert(IsExisting(k),"Entity does not exist.")local I,J,K=Logic.EntityGetPos(GetID(k))return{X=I,Y=J,Z=K}end;API.GetPosition=GetPosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetDistance")function GetDistance(L,M,N)if type(L)=="string"or type(L)=="number"then L=GetPosition(L)end;if type(M)=="string"or type(M)=="number"then M=GetPosition(M)end;assert(type(L)=="table","Invalid frist position.")assert(type(M)=="table","Invalid second position.")local O=L.X-M.X;local P=L.Y-M.Y;if N then return O^2+P^2 end;return math.sqrt(O^2+P^2)end;API.GetDistance=GetDistance;Lib.Register("comfort/IsMultiplayer")function IsMultiplayer()return Framework.IsNetworkGame()end;API.IsMultiplayer=IsMultiplayer;Lib.Register("comfort/IsValidPosition")function IsValidPosition(Q)if type(Q)=="table"then if Q.X~=nil and type(Q.X)=="number"and(Q.Y~=nil and type(Q.Y)=="number")then local R={Logic.WorldGetSize()}if not Q.Z or Q.Z>=0 then if Q.X<R[1]and Q.X>0 and Q.Y<R[2]and Q.Y>0 then return true end end end end;return false end;API.IsValidPosition=IsValidPosition;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetCirclePosition")function GetCirclePosition(S,T,U)if not IsValidPosition(S)and not IsExisting(S)then error(false,"Target does not exist or is invalid position!")end;local V=S;local W=0+(U or 0)if type(S)~="table"then local B=GetID(S)W=Logic.GetEntityOrientation(B)+(U or 0)V=GetPosition(B)end;local d={X=V.X+T*math.cos(math.rad(W)),Y=V.Y+T*math.sin(math.rad(W)),Z=V.Z}return d end;API.GetRelatiePos=GetCirclePosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetGeometricFocus")function GetGeometricFocus(...)local arg={...}local X={X=0,Y=0,Z=0}local Y=0;for f=1,#arg do local V=GetPosition(arg[f])if V then X.X=X.X+V.X;X.Y=X.Y+V.Y;X.Z=X.Z+(V.Z or 0)Y=Y+1 end end;return{X=X.X*1/Y,Y=X.Y*1/Y,Z=X.Z*1/Y}end;API.GetGeometricFocus=GetGeometricFocus;Lib.Register("comfort/GetSiegecartTypeByEngineType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_MilitaryBatteringRam]=Entities.U_BatteringRamCart,[Entities.U_MilitaryCatapult]=Entities.U_CatapultCart,[Entities.U_MilitarySiegeTower]=Entities.U_SiegeTowerCart}end;function GetSiegecartTypeByEngineType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Register("comfort/IsHistoryEdition")function IsHistoryEdition()return Network.IsNATReady~=nil end;API.IsHistoryEdition=IsHistoryEdition;Lib.Register("comfort/IsMultiplayerReady")function IsMultiplayerReady()return Framework.IsNetworkGame()and Network.SessionHaveAllPlayersFinishedLoading()==true end;API.IsMultiplayerReady=IsMultiplayerReady;Lib.Register("comfort/Round")function Round(Z,_)_=math.ceil(_ or 0)if _<=0 then return math.floor(Z+0.5)end;return tonumber(string.format("%.".._.."f",Z))end;API.Round=Round;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetAngleBetween")function GetAngleBetween(L,M)local a0=0;local a1=0;local a2=0;if type(L)=="string"or type(L)=="number"then L=GetPosition(GetID(L))end;if type(M)=="string"or type(M)=="number"then M=GetPosition(GetID(M))end;assert(L~=nil)assert(M~=nil)a0=L.X-M.X;a1=L.Y-M.Y;if a0==0 and a1==0 then return 0 end;a2=math.deg(math.asin(math.abs(a0)/math.sqrt(a0%2+a1%2)))if a0>=0 and a1>0 then a2=270-a2 elseif a0<0 and a1>0 then a2=270+a2 elseif a0<0 and a1<=0 then a2=90-a2 elseif a0>=0 and a1<=0 then a2=90+a2 end;return a2 end;API.GetAngleBetween=GetAngleBetween;Lib.Require("comfort/GetDistance")Lib.Register("comfort/GetClosestToTarget")function GetClosestToTarget(S,a3)local a4=0;local a5=Logic.WorldGetSize()^2;for f=1,#a3,1 do assert(type(a3[f])~="table","Invalid entity.")local a6=GetDistance(a3[f],S,true)if a6<a5 then a5=a6;a4=a3[f]end end;return a4 end;API.GetClosestToTarget=GetClosestToTarget;Lib.Register("comfort/GetHealth")function GetHealth(k)local B=GetID(k)if IsExisting(B)then local a7=Logic.GetEntityMaxHealth(B)local a8=Logic.GetEntityHealth(B)return a8/a7*100 end;return 0 end;API.GetHealth=GetHealth;Lib.Register("comfort/GetSiegeengineTypeByCartType")if Entities then CONST_CART_TO_ENGINE={[Entities.U_BatteringRamCart]=Entities.U_MilitaryBatteringRam,[Entities.U_CatapultCart]=Entities.U_MilitaryCatapult,[Entities.U_SiegeTowerCart]=Entities.U_MilitarySiegeTower}end;function GetSiegeengineTypeByCartType(i)return CONST_CART_TO_ENGINE[i]end;Lib.Require("comfort/GetAngleBetween")Lib.Register("comfort/IsInCone")function IsInCone(a9,aa,ab,ac)local ad=GetAngleBetween(aa,a9)local ae=ab-ac;local af=ab+ac;if ad>=ae and ad<=af then return true end;if(ad+180)%360>=(ae+180)%360 and(ad+180)%360<=(af+180)%360 then return true end;return false end;API.IsInCone=IsInCone;Lib.Register("comfort/SerializeTable")function SerializeTable(G)local ag="{"for g,h in pairs(G)do local ah=type(g)=="string"and g or"["..g.."]"if type(h)=="table"then ag=ag..ah.." = "..SerializeTable(h)..", "elseif type(h)=="number"then ag=ag..ah.." = "..h..", "elseif type(h)=="string"then ag=ag..ah.." = \""..h.."\", "elseif type(h)=="boolean"or type(h)=="nil"then ag=ag..ah.." = "..tostring(h)..", "else ag=ag..ah.." = \""..tostring(h).."\", "end end;ag=ag.."}"return ag end;API.SerializeTable=SerializeTable;Lib.Register("comfort/global/CreateCartByGoodType")function CreateCartByGoodType(q,a9,ai,aj,ak)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")aj=aj or 0;local al=0;local V=GetID(a9)assert(V~=0,"Entity does not exist.")local I,J,K=Logic.EntityGetPos(V)if Logic.IsBuilding(V)==1 then I,J=Logic.GetBuildingApproachPosition(V)aj=Logic.GetEntityOrientation(V)-90 end;local am=Logic.GetGoodCategoryForGoodType(ai)if am==GoodCategories.GC_Resource then al=Logic.CreateEntityOnUnblockedLand(Entities.U_ResourceMerchant,I,J,aj,q)elseif ai==Goods.G_Medicine then al=Logic.CreateEntityOnUnblockedLand(Entities.U_Medicus,I,J,aj,q)elseif ai==Goods.G_Gold or ai==Goods.G_None or ai==Goods.G_Information then if ak then al=Logic.CreateEntityOnUnblockedLand(ak,I,J,aj,q)else al=Logic.CreateEntityOnUnblockedLand(Entities.U_GoldCart,I,J,aj,q)end else al=Logic.CreateEntityOnUnblockedLand(Entities.U_Marketer,I,J,aj,q)end;return al end;API.CreateCartByGoodType=CreateCartByGoodType;Lib.Register("comfort/global/CreateEntityName")CreateEntityName_Sequence_ID=0;function CreateEntityName(an)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")if type(an)=="string"then return an else assert(type(an)=="number","Invalid entity ID.")local t=Logic.GetEntityName(an)if type(t)~="string"or t==""then CreateEntityName_Sequence_ID=CreateEntityName_Sequence_ID+1;t="AutomaticScriptName_"..CreateEntityName_Sequence_ID;Logic.SetEntityName(an,t)end;return t end end;API.CreateEntityName=CreateEntityName;Lib.Register("comfort/global/CreateStock")function CreateStock(q,ai)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local am=Logic.GetGoodCategoryForGoodType(ai)if am==GoodCategories.GC_Resource or ai==Goods.G_None then local ao=Logic.GetStoreHouse(q)local ap=Logic.GetHeadquarters(q)if ao~=0 and Logic.GetIndexOnInStockByGoodType(ao,ai)==-1 then if ai~=Goods.G_Gold or ai==Goods.G_Gold and ap==0 then Logic.AddGoodToStock(ao,ai,0,true,true)end end end end;API.CreateStock=CreateStock;Lib.Register("comfort/global/GetQuestID")function GetQuestID(r)if type(r)=="number"then return r end;for g,h in pairs(Quests)do if h and g>0 then if h.Identifier==r then return g end end end;return-1 end;API.GetQuestID=GetQuestID;Lib.Register("comfort/global/GetRandomSettlerType")CONST_RANDOM_SETTLER_TYPES={Male={Entities.U_BannerMaker,Entities.U_Baker,Entities.U_Barkeeper,Entities.U_Blacksmith,Entities.U_Butcher,Entities.U_BowArmourer,Entities.U_BowMaker,Entities.U_CandleMaker,Entities.U_Carpenter,Entities.U_DairyWorker,Entities.U_Pharmacist,Entities.U_Tanner,Entities.U_SmokeHouseWorker,Entities.U_Soapmaker,Entities.U_SwordSmith,Entities.U_Weaver},Female={Entities.U_BathWorker,Entities.U_SpouseS01,Entities.U_SpouseS02,Entities.U_SpouseS03,Entities.U_SpouseF01,Entities.U_SpouseF02,Entities.U_SpouseF03}}function GetRandomSettlerType()local aq=math.random(1,2)==1 and"Male"or"Female"local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES[aq])return CONST_RANDOM_SETTLER_TYPES[aq][l]end;API.GetRandomSettlerType=GetRandomSettlerType;function GetRandomMaleSettlerType()local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Male)return CONST_RANDOM_SETTLER_TYPES.Male[l]end;API.GetRandomMaleSettlerType=GetRandomMaleSettlerType;function GetRandomFemaleSettlerType()local l=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Female)return CONST_RANDOM_SETTLER_TYPES.Female[l]end;API.GetRandomFemaleSettlerType=GetRandomFemaleSettlerType;Lib.Require("comfort/global/GetQuestID")Lib.Register("comfort/global/IsValidQuest")function IsValidQuest(ar)return Quests[ar]~=nil or Quests[GetQuestID(ar)]~=nil end;API.IsValidQuest=IsValidQuest;Lib.Register("comfort/global/IsValidQuestName")CONST_REGEX_QUEST_NAME="^[A-Za-z0-9_ @ÄÖÜäöüß]+$"function IsValidQuestName(r)return string.find(r,CONST_REGEX_QUEST_NAME)~=nil end;API.IsValidQuestName=IsValidQuestName;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/LookAt")function LookAt(k,S)local as=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(as~=0,"Looking entity does not exist!")local at,au,av=Logic.EntityGetPos(as)local aw;local ax,ay,az;if type(S)=="table"then ax=S.X;ay=S.Y;az=S.Z else aw=GetID(S)assert(aw~=0,"Target entity does not exist!")ax,ay,az=Logic.EntityGetPos(aw)end;assert(IsValidPosition({X=at,Y=au,Z=av}),"Invalid looking position!")assert(IsValidPosition({X=ax,Y=ay,Z=az}),"Invalid target position!")Angle=math.deg(math.atan2(ay-au,ax-at))Angle=Angle<0 and Angle+360 or Angle;if Logic.IsLeader(as)==1 then local aA={Logic.GetSoldiersAttachedToLeader(as)}for f=2,aA[1]+1 do Logic.SetOrientation(aA[f],Angle)end end;Logic.SetOrientation(as,Angle)end;API.LookAt=LookAt;Lib.Register("comfort/global/Move")function Move(k,S,aB)local al=GetID(k)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(al~=0,"Moving entity does not exist!")local aC;if type(S)~="table"then local aw=GetID(S)local I,J,K=Logic.EntityGetPos(aw)aC={X=I,Y=J}else aC=S end;if aB then Logic.MoveEntity(al,aC.X,aC.Y)if Logic.IsSettler(al)==1 then Logic.SetTaskList(al,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(al,aC.X,aC.Y)end;StartSimpleJobEx(function(aD,S)if not IsExisting(aD)then return true end;if Logic.IsEntityMoving(aD)==false then if Logic.IsSettler(aD)==1 then Logic.SetTaskList(aD,TaskLists.TL_NPC_IDLE)end;return true end end,al,aC)end;API.Move=Move;Lib.Register("comfort/global/ReplaceEntity")function ReplaceEntity(k,i,aE)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local as=GetID(k)if as==0 then return 0 end;local aF=GetPosition(as)local aG=aE or Logic.EntityGetPlayer(as)local aH=Logic.GetEntityOrientation(as)local t=Logic.GetEntityName(as)DestroyEntity(as)local aw=Logic.CreateEntity(i,aF.X,aF.Y,aH,aG)Logic.SetEntityName(aw,t)if Logic.IsSettler(aw)==1 then Logic.SetTaskList(aw,TaskLists.TL_NPC_IDLE)end;return aw end;API.ReplaceEntity=ReplaceEntity;Lib.Require("comfort/global/CreateStock")Lib.Require("comfort/global/CreateCartByGoodType")Lib.Register("comfort/global/SendCart")function SendCart(a9,q,ai,aI,ak,aJ,aK)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local aL=GetID(a9)if not IsExisting(aL)then return 0 end;local W=Logic.GetEntityOrientation(aL)local aM=Logic.GetEntityName(aL)local al=CreateCartByGoodType(q,aL,ai,W,ak)assert(al~=0,"Cart was not created properly.")CreateStock(q,ai)Logic.HireMerchant(al,q,ai,aI,q,aJ)if aK and Logic.IsBuilding(aL)==0 then Logic.SetEntityName(al,aM)DestroyEntity(aL)end;return al end;API.SendCart=SendCart;Lib.Register("comfort/global/SetHealth")function SetHealth(k,aN)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(type(aN)=="number"and aN>=0)local B=GetID(k)assert(B~=0,"Entity does not exist.")assert(Logic.IsLeader(B)==0,"Can not be used on groups.")local a7=Logic.GetEntityMaxHealth(B)local a8=math.max(math.min(aN,a7),0)local aO=Logic.GetEntityHealth(B)local aP=math.ceil(a7*a8/100)if aP>aO then Logic.HealEntity(B,aP-aO)elseif aP<aO then Logic.HurtEntity(B,aO-aP)end end;API.SetHealth=SetHealth;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/global/SetPosition")function SetPosition(k,S)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local al=GetID(k)if not al then return end;local aC=GetPosition(S)assert(IsValidPosition(aC),"Invalid position.")for g,h in pairs(GetSoldiersOfGroup(al))do SetPosition(h,S)end;Logic.DEBUG_SetSettlerPosition(al,aC.X,aC.Y)end;API.SetPosition=SetPosition;Lib.Register("comfort/local/Test")Lib.Core=Lib.Core or{}Lib.Core.LuaExtension={}Lib.Require("comfort/CopyTable")Lib.Require("comfort/SerializeTable")Lib.Register("core/feature/Core_LuaExtension")function Lib.Core.LuaExtension:Initialize()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnSaveGameLoaded()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnReportReceived(aD,...)end;function Lib.Core.LuaExtension:OverrideTable()table.compare=function(aQ,aR,aS)assert(type(aQ)=="table")assert(type(aR)=="table")aS=aS or function(aQ,aR)return tostring(aQ)<tostring(aR)end;assert(type(aS)=="function")return aS(aQ,aR)end;table.equals=function(aQ,aR)assert(type(aQ)=="table")assert(type(aR)=="table")local aS=function(aQ,aR)return table.tostring(aQ)<table.tostring(aR)end;assert(type(aS)=="function")return aS(aQ,aR)end;table.contains=function(aT,aU)assert(type(aT)=="table")for g,h in pairs(aT)do if h==aU then return true end end;return false end;table.length=function(aT)return#aT end;table.size=function(aT)local aV=0;for g,h in pairs(aT)do if g~="n"or g=="n"and type(h)~="number"then aV=aV+1 end end;return aV end;table.isEmpty=function(aT)return table.size(aT)==0 end;table.copy=function(aQ,aR)aR=aR or{}assert(type(aQ)=="table")assert(type(aR)=="table")return CopyTable(aQ,aR)end;table.invert=function(aQ)assert(type(aQ)=="table")local aR={}for f=table.length(aQ),1,-1 do table.insert(aR,aQ[f])end;return aR end;table.push=function(aT,aU)assert(type(aT)=="table")table.insert(aT,1,aU)end;table.pop=function(aT)assert(type(aT)=="table")return table.remove(aT,1)end;table.tostring=function(aT)return SerializeTable(aT)end end;function Lib.Core.LuaExtension:OverrideString()string.contains=function(self,aW)return self:find(aW)~=nil end;string.indexOf=function(self,aW)return self:find(aW)end;string.slice=function(self,aX)aX=aX or"%s"local aT={}if self then for aY in self:gmatch("([^"..aX.."]+)")do table.insert(aT,aY)end end;return aT end;string.join=function(self,...)local aW=""local aZ={self,...}for f=1,#aZ do if type(aZ[f])=="table"then aW=aW..string.join(unpack(aZ[f]))else aW=aW..tostring(aZ[f])end end;return aW end;string.replace=function(self,a_,b0)local aW,aV=self:gsub(a_,b0,1)return aW end;string.replaceAll=function(self,a_,b0)local aW,aV=self:gsub(a_,b0)return aW end end;function Lib.Core.LuaExtension:OverrideMath()math.lerp=function(aW,aV,aU)local b1=(aV-aW)/aU;return b1>1 and 1 or b1 end;math.qmod=function(ad,b2)return ad-math.floor(ad/b2)*b2 end end;Lib.Core=Lib.Core or{}Lib.Core.Report={ScriptEventRegister={},ScriptEventListener={},ScriptCommandRegister={},ScriptCommandSequence=0}Report=Report or{}Command=Command or{}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_Report")function Lib.Core.Report:Initialize()if not IsLocalScript()then self:OverrideSoldierPayment()Lib.Core.Report:CreateScriptCommand("Cmd_SendReportToGlobal",function(aD,...)SendReport(aD,...)end)end end;function Lib.Core.Report:OnSaveGameLoaded()end;function Lib.Core.Report:OnReportReceived(aD,...)end;function Lib.Core.Report:OverrideSoldierPayment()GameCallback_SetSoldierPaymentLevel_Orig_Libertica=GameCallback_SetSoldierPaymentLevel;GameCallback_SetSoldierPaymentLevel=function(q,b3)if b3<=2 then return GameCallback_SetSoldierPaymentLevel_Orig_Libertica(q,b3)end;Lib.Core.Event:ProcessScriptCommand(q,b3)end end;function Lib.Core.Report:ProcessScriptCommand(q,aD)assert(aD and self.ScriptCommandRegister[aD],"Commands is invalid.")local s=Logic.GetPlayerName(q+4)local b4=self:DecodeScriptCommandParameters(s)self.ScriptCommandRegister[aD][2](unpack(b4))end;function Lib.Core.Report:CreateScriptCommand(r,b5)assert(not IsLocalScript(),"Commands must be created in global script.")self.ScriptCommandSequence=self.ScriptCommandSequence+1;local al=self.ScriptCommandSequence;local Name=r;if string.find(r,"^Cmd_")then Name=string.sub(r,5)end;self.ScriptCommandRegister[al]={Name,b5}ExecuteLocal([[
        local ID, Name = %d, "%s"
        Lib.Core.Report.ScriptCommandRegister[ID] = Name
        Command[Name] = ID
    ]],al,Name)end;function Lib.Core.Report:DecodeScriptCommandParameters(b6)local b4={}for g,h in pairs(string.slice(b6,"#"))do local b7=h;b7=b7:replaceAll("<<<HT>>>",'#')b7=b7:replaceAll("<<<QT>>>",'"')b7=b7:replaceAll("<<<ES>>>",'')if b7==nil then b7=nil elseif b7=="true"or b7=="false"then b7=b7=="true"elseif string.indexOf(b7,"{")==1 then local b8=string.slice(string.sub(b7,2,string.len(b7)-1),",")b7={}for f=1,#b8 do b7[f]=tonumber(b8[f])~=nil and tonumber(b8[f])or b8 end elseif tonumber(b7)~=nil then b7=tonumber(b7)end;table.insert(b4,b7)end;return b4 end;function Lib.Core.Report:SendScriptCommand(aD,...)assert(IsLocalScript(),"Commands must be send in local script.")assert(aD and self.ScriptCommandRegister[aD],"Command is invalid.")local n=GUI.GetPlayerID()local b9=n+4;local s=Logic.GetPlayerName(b9)local b4=self:EncodeScriptCommandParameters(...)GUI.SetPlayerName(b9,b4)if IsHistoryEdition()and IsMultiplayer()then GUI.SetSoldierPaymentLevel(aD)else ExecuteGlobal([[Lib.Core.Report:ProcessScriptCommand(%d, %d)]],n,aD)end;GUI.SetPlayerName(b9,s)GUI.SetSoldierPaymentLevel(PlayerSoldierPaymentLevel[n])end;function Lib.Core.Report:EncodeScriptCommandParameters(...)local ba=""for f=1,#arg do local bb=arg[f]if type(bb)=="string"then bb=bb:gsub('#',"<<<HT>>>")bb=bb:gsub('"',"<<<QT>>>")if bb:len()==0 then bb="<<<ES>>>"end elseif type(bb)=="table"then bb="{"..table.concat(bb,",").."}"end;if string.len(ba)>0 then ba=ba.."#"end;ba=ba..tostring(bb)end;return ba end;function Lib.Core.Report:CreateReport(r)assert(type(r)=="string","Report name must be a string.")for f=1,#self.ScriptEventRegister,1 do if self.ScriptEventRegister[f]==r then assert(false,"Report already exists")return 0 end end;local al=#self.ScriptEventRegister+1;self.ScriptEventRegister[al]=r;self.ScriptEventListener[al]={SequenceID=0}return al end;function Lib.Core.Report:SendReport(aD,...)assert(self.ScriptEventRegister[aD]~=nil,"Report type does not exist.")if GameCallback_Lib_OnEventReceived then GameCallback_Lib_OnEventReceived(aD,...)end;if self.ScriptEventListener[aD]then for g,h in pairs(self.ScriptEventListener[aD])do if tonumber(g)then h(...)end end end end;function Lib.Core.Report:CreateReportReceiver(bc,b5)assert(type(b5)=="function","Listener must be a function.")assert(self.ScriptEventRegister[bc]~=nil,"Event does not exist.")local bd=self.ScriptEventListener[bc]self.ScriptEventListener[bc].SequenceID=bd.SequenceID+1;self.ScriptEventListener[bc][bd.SequenceID]=b5;return bd.IDSequence end;function Lib.Core.Report:RemoveReportReceiver(bc,aD)assert(self.ScriptEventRegister[bc]~=nil,"Event does not exist.")self.ScriptEventListener[bc][aD]=nil end;function CreateReport(r)return Lib.Core.Report:CreateReport(r)end;API.CreateScriptEvent=CreateReport;function SendReport(aD,...)Lib.Core.Report:SendReport(aD,...)end;API.SendScriptEvent=SendReport;function SendReportToGlobal(aD,...)assert(IsLocalScript(),"Was called from global script.")Lib.Core.Report:SendScriptCommand(Command.SendReportToGlobal,aD,...)end;API.SendScriptEventToGlobal=SendReportToGlobal;function SendReportToLocal(aD,...)assert(not IsLocalScript(),"Was called from local script.")local arg={...}if#arg>0 then local bb=""for f=1,#arg do if f>1 then bb=bb..","end;if type(arg[f])=="string"then bb=bb.."\""..arg[f].."\""elseif type(arg[f])=="table"then bb=bb..table.tostring(arg[f])else bb=bb..tostring(arg[f])end end;ExecuteLocal([[SendReport(%d, %s)]],aD,bb)else ExecuteLocal([[SendReport(%d)]],aD)end end;API.SendScriptEventToLocal=SendReportToLocal;function CreateReportReceiver(bc,b5)return Lib.Core.Report:CreateReportReceiver(bc,b5)end;API.CreateScriptEventReceiver=CreateReportReceiver;function RemoveReportReceiver(bc,aD)Lib.Core.Report:RemoveReportReceiver(bc,aD)end;API.RemoveScriptEventReceiver=RemoveReportReceiver;Lib.Core=Lib.Core or{}Lib.Core.Quest={QuestCounter=0,Text={ActivateBuff={Pattern={de="BONUS AKTIVIEREN{cr}{cr}%s",en="ACTIVATE BUFF{cr}{cr}%s",fr="ACTIVER BONUS{cr}{cr}%s"},BuffsVanilla={["Buff_Spice"]={de="Salz",en="Salt",fr="Sel"},["Buff_Colour"]={de="Farben",en="Color",fr="Couleurs"},["Buff_Entertainers"]={de="Entertainer",en="Entertainer",fr="Artistes"},["Buff_FoodDiversity"]={de="Vielfältige Nahrung",en="Food diversity",fr="Diversité alimentaire"},["Buff_ClothesDiversity"]={de="Vielfältige Kleidung",en="Clothes diversity",fr="Diversité vestimentaire"},["Buff_HygieneDiversity"]={de="Vielfältige Reinigung",en="Hygiene diversity",fr="Diversité hygiénique"},["Buff_EntertainmentDiversity"]={de="Vielfältige Unterhaltung",en="Entertainment diversity",fr="Diversité des dievertissements"},["Buff_Sermon"]={de="Predigt",en="Sermon",fr="Sermon"},["Buff_Festival"]={de="Fest",en="Festival",fr="Festival"},["Buff_ExtraPayment"]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},["Buff_HighTaxes"]={de="Hohe Steuern",en="High taxes",fr="Hautes taxes"},["Buff_NoPayment"]={de="Kein Sold",en="No payment",fr="Aucun paiement"},["Buff_NoTaxes"]={de="Keine Steuern",en="No taxes",fr="Aucune taxes"}},BuffsEx1={["Buff_Gems"]={de="Edelsteine",en="Gems",fr="Gemmes"},["Buff_MusicalInstrument"]={de="Musikinstrumente",en="Musical instruments",fr="Instruments musicaux"},["Buff_Olibanum"]={de="Weihrauch",en="Olibanum",fr="Encens"}}},SoldierCount={Pattern={de="SOLDATENANZAHL {cr}Partei: %s{cr}{cr}%s %d",en="SOLDIER COUNT {cr}Faction: %s{cr}{cr}%s %d",fr="NOMBRE DE SOLDATS {cr}Faction: %s{cr}{cr}%s %d"},Relation={["true"]={de="Weniger als ",en="Less than ",fr="Moins de"},["false"]={de="Mindestens ",en="At least ",fr="Au moins"}}},Festivals={Pattern={de="FESTE FEIERN {cr}{cr}Partei: %s{cr}{cr}Anzahl: %d",en="HOLD PARTIES {cr}{cr}Faction: %s{cr}{cr}Amount: %d",fr="FESTIVITÉS {cr}{cr}Faction: %s{cr}{cr}Nombre : %d"}}}}CONST_EFFECT_NAME_TO_ID={}CONST_INITIALIZED_OBJECTS={}CONST_REFILL_AMOUNT={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/ToBoolean")Lib.Require("comfort/GetHealth")Lib.Require("comfort/CopyTable")Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/SendCart")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Quest")function SaveCustomVariable(r,Z)Lib.Core.Quest:SetCustomVariable(r,Z)end;function ObtainCustomVariable(r,be)local b7=Lib.CustomVariable[r]if not b7 and be then b7=be end;return b7 end;function Lib.Core.Quest:Initialize()Report.CustomValueChanged=CreateReport("Event_CustomValueChanged")Report.QuestFailure=CreateReport("Event_QuestFailure")Report.QuestInterrupt=CreateReport("Event_QuestInterrupt")Report.QuestReset=CreateReport("Event_QuestReset")Report.QuestSuccess=CreateReport("Event_QuestSuccess")Report.QuestTrigger=CreateReport("Event_QuestTrigger")if not IsLocalScript()then self:OverrideQuestSystemGlobal()self:OverrideQuestMarkers()self:OverwriteGeologistRefill()end;if IsLocalScript()then self:OverrideDisplayQuestObjective()end end;function Lib.Core.Quest:OnSaveGameLoaded()end;function Lib.Core.Quest:OnReportReceived(aD,...)end;function Lib.Core.Quest:OverrideQuestMarkers()QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then DestroyQuestMarker(self.Objectives[f].Data[2])end end end end;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then ShowQuestMarker(self.Objectives[f].Data[2])end end end end;function ShowQuestMarker(k)local bf=GetID(k)local I,J=Logic.GetEntityPosition(bf)local bg=EGL_Effects.E_Questmarker_low;if Logic.IsBuilding(bf)==1 then bg=EGL_Effects.E_Questmarker end;DestroyQuestMarker(k)Questmarkers[bf]=Logic.CreateEffect(bg,I,J,0)end;function DestroyQuestMarker(k)local bf=GetID(k)if Questmarkers[bf]~=nil then Logic.DestroyEffect(Questmarkers[bf])Questmarkers[bf]=nil end end end;function Lib.Core.Quest:OverrideDisplayQuestObjective()GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(bh,bi)local bj,bk=GUI_Interaction.GetPotentialSubQuestAndType(bh)if bk==Objective.Distance then if bj.Objectives[1].Data[1]==-65566 then bj.Objectives[1].Data[1]=Logic.GetKnightID(bj.ReceivingPlayer)end end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core(bh,bi)end end;function Lib.Core.Quest:IsQuestPositionReached(bl,bm)local bn=GetID(bm.Data[1])if bn==-65566 then bm.Data[1]=Logic.GetKnightID(bl.ReceivingPlayer)bn=bm.Data[1]end;local bo=GetID(bm.Data[2])bm.Data[3]=bm.Data[3]or 2500;if not(Logic.IsEntityDestroyed(bn)or Logic.IsEntityDestroyed(bo))then if Logic.GetDistanceBetweenEntities(bn,bo)<=bm.Data[3]then DestroyQuestMarker(bo)return true end else DestroyQuestMarker(bo)return false end end;function Lib.Core.Quest:OverwriteGeologistRefill()if Framework.GetGameExtraNo()>=1 then GameCallback_OnGeologistRefill_Orig_Lib_Core=GameCallback_OnGeologistRefill;GameCallback_OnGeologistRefill=function(q,bp,bq)GameCallback_OnGeologistRefill_Orig_Lib_Core(q,bp,bq)if CONST_REFILL_AMOUNT[bp]then local br=CONST_REFILL_AMOUNT[bp]local bs=br+math.random(1,math.floor(br*0.2+0.5))Logic.SetResourceDoodadGoodAmount(bp,bs)if bs>0 then if Logic.GetResourceDoodadGoodType(bp)==Goods.G_Iron then Logic.SetModel(bp,Models.Doodads_D_SE_ResourceIron)else Logic.SetModel(bp,Models.R_ResorceStone_Scaffold)end end end end end end;function Lib.Core.Quest:TriggerEntityKilledCallbacks(k,bt)local bu=GetID(k)local bv=GetID(bt or 0)if bv==0 or bu==0 or Logic.GetEntityHealth(bu)>0 then return end;local I,J,K=Logic.EntityGetPos(bu)local bw=Logic.EntityGetPlayer(bu)local bx=Logic.GetEntityType(bu)local by=Logic.EntityGetPlayer(bv)local bz=Logic.GetEntityType(bv)GameCallback_EntityKilled(bu,bw,bv,by,bx,bz)Logic.ExecuteInLuaLocalState(string.format("GameCallback_Feedback_EntityKilled(%d, %d, %d, %d,%d, %d, %f, %f)",bu,bw,bv,by,bx,bz,I,J))end;function Lib.Core.Quest:GetCustomVariable(r)return Lib.CustomVariable[r]end;function Lib.Core.Quest:SetCustomVariable(r,Z)self:UpdateCustomVariable(r,Z)local b7=tostring(Z)if type(Z)~="number"then b7=[["]]..b7 ..[["]]end;if not GUI then ExecuteLocal([[Lib.Core.Quest:UpdateCustomVariable("%s", %s)]],r,b7)end end;function Lib.Core.Quest:UpdateCustomVariable(r,Z)if Lib.CustomVariable[r]then local bA=Lib.CustomVariable[r]Lib.CustomVariable[r]=Z;SendReport(Report.CustomValueChanged,r,bA,Z)else Lib.CustomVariable[r]=Z;SendReport(Report.CustomValueChanged,r,nil,Z)end end;function InteractiveObjectActivate(bB,bC)bC=bC or 0;if GUI or not IsExisting(bB)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bB),f,bC)end end;API.InteractiveObjectActivate=InteractiveObjectActivate;function InteractiveObjectDeactivate(bB)if GUI or not IsExisting(bB)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bB),f,2)end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Lib.Core.Quest:OverrideQuestSystemGlobal()QuestTemplate.Trigger_Orig_QSB_Core=QuestTemplate.Trigger;QuestTemplate.Trigger=function(bl)QuestTemplate.Trigger_Orig_QSB_Core(bl)local bD=GetQuestID(bl.Identifier)for f=1,bl.Objectives[0]do if bl.Objectives[f].Type==Objective.Custom2 and bl.Objectives[f].Data[1].SetDescriptionOverwrite then local bE=bl.Objectives[f].Data[1]:SetDescriptionOverwrite(bl)Lib.Core.Quest:ChangeCustomQuestCaptionText(bE,bl)break end end;SendReport(Report.QuestTrigger,bD)SendReportToLocal(Report.QuestTrigger,bD)end;QuestTemplate.Interrupt_Orig_QSB_Core=QuestTemplate.Interrupt;QuestTemplate.Interrupt=function(bl)bl:Interrupt_Orig_QSB_Core()local bD=GetQuestID(bl.Identifier)for f=1,bl.Objectives[0]do if bl.Objectives[f].Type==Objective.Custom2 and bl.Objectives[f].Data[1].Interrupt then bl.Objectives[f].Data[1]:Interrupt(bl,f)end end;for f=1,bl.Triggers[0]do if bl.Triggers[f].Type==Triggers.Custom2 and bl.Triggers[f].Data[1].Interrupt then bl.Triggers[f].Data[1]:Interrupt(bl,f)end end;SendReport(Report.QuestInterrupt,bD)SendReportToLocal(Report.QuestInterrupt,bD)end;QuestTemplate.Fail_Orig_QSB_Core=QuestTemplate.Fail;QuestTemplate.Fail=function(bl)bl:Fail_Orig_QSB_Core()local bD=GetQuestID(bl.Identifier)SendReport(Report.QuestFailure,bD)SendReportToLocal(Report.QuestFailure,bD)end;QuestTemplate.Success_Orig_QSB_Core=QuestTemplate.Success;QuestTemplate.Success=function(bl)bl:Success_Orig_QSB_Core()local bD=GetQuestID(bl.Identifier)SendReport(Report.QuestSuccess,bD)SendReportToLocal(Report.QuestSuccess,bD)end end;function Lib.Core.Quest:ChangeCustomQuestCaptionText(bF,bl)if bl and bl.Visible then bl.QuestDescription=bF;ExecuteLocal([[
            XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/BGDeco",0)
            local identifier = "%s"
            for i=1, Quests[0] do
                if Quests[i].Identifier == identifier then
                    local text = Quests[i].QuestDescription
                    XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/Text", "%s")
                    break
                end
            end
        ]],bl.Identifier,bF)end end;function SetResourceAmount(k,bG,bH)if GUI or not IsExisting(k)then return end;assert(type(bG)=="number")assert(type(bH)=="number")local B=GetID(k)if IsExisting(B)and Logic.GetResourceDoodadGoodType(B)~=0 then if Logic.GetResourceDoodadGoodAmount(B)==0 then B=ReplaceEntity(B,Logic.GetEntityType(B))end;Logic.SetResourceDoodadGoodAmount(B,bG)CONST_REFILL_AMOUNT[B]=bH end end;function SetCustomBehaviorText(bI,bF)local bD=GetQuestID(bI)local bj=Quests[bD]assert(bj~=nil,"Quest '"..bI.."' not found!")Lib.Core.Quest:ChangeCustomQuestCaptionText(bF,bj)end;API.SetCustomBehaviorText=SetCustomBehaviorText;function RestartQuest(bI,bJ)local bD=GetQuestID(bI)local bj=Quests[bD]if bj then if not bJ then Logic.DEBUG_AddNote("restart quest "..bI)end;if bj.Objectives then local bK=bj.Objectives;for f=1,bK[0]do local bL=bK[f]bL.Completed=nil;local bM=bL.Type;if bM==Objective.Deliver then local bN=bL.Data;bN[3]=nil;bN[4]=nil;bN[5]=nil;bN[9]=nil elseif g_GameExtraNo and g_GameExtraNo>=1 and bM==Objective.Refill then bL.Data[2]=nil elseif bM==Objective.Protect or bM==Objective.Object then local bN=bL.Data;for bO=1,bN[0],1 do bN[-bO]=nil end elseif bM==Objective.DestroyEntities and bL.Data[1]==2 and bL.DestroyTypeAmount then bL.Data[3]=bL.DestroyTypeAmount elseif bM==Objective.DestroyEntities and bL.Data[1]==3 then bL.Data[4]=nil;bL.Data[5]=nil elseif bM==Objective.Distance then if bL.Data[1]==-65565 then bL.Data[4].NpcInstance=nil end elseif bM==Objective.Custom2 and bL.Data[1].Reset then bL.Data[1]:Reset(bj,f)end end end;local function bP(bQ,bR)local bj=bj;local bS=bj[bQ]if bS then for f=1,bS[0]do local bT=bS[f]if bT.Type==bR then local bU=bT.Data[1]if bU and bU.Reset then bU:Reset(bj,f)end end end end end;bP("Triggers",Triggers.Custom2)bP("Rewards",Reward.Custom)bP("Reprisals",Reprisal.Custom)bj.Result=nil;local bV=bj.State;bj.State=QuestState.NotTriggered;ExecuteLocal("LocalScriptCallback_OnQuestStatusChanged(%d)",bj.Index)if bV==QuestState.Over then bj.Job=Trigger.RequestTrigger(Events.LOGIC_EVENT_EVERY_SECOND,"","Quest_Loop",1,0,{bj.QueueID})end;SendReport(Report.QuestReset,bD)SendReportToLocal(Report.QuestReset,bD)end;return bD,bj end;API.RestartQuest=RestartQuest;function FailQuest(bI,bJ)local bD=GetQuestID(bI)local bj=Quests[bD]if bj then if not bJ then Logic.DEBUG_AddNote("fail quest "..bI)end;bj:RemoveQuestMarkers()bj:Fail()end end;API.FailQuest=FailQuest;function StartQuest(bI,bJ)local bD=GetQuestID(bI)local bj=Quests[bD]if bj then if not bJ then Logic.DEBUG_AddNote("start quest "..bI)end;bj:SetMsgKeyOverride()bj:SetIconOverride()bj:Trigger()end end;API.StartQuest=StartQuest;function StopQuest(bI,bJ)local bD=GetQuestID(bI)local bj=Quests[bD]if bj then if not bJ then Logic.DEBUG_AddNote("interrupt quest "..bI)end;bj:RemoveQuestMarkers()bj:Interrupt(-1)end end;API.StopQuest=StopQuest;function WinQuest(bI,bJ)local bD=GetQuestID(bI)local bj=Quests[bD]if bj then if not bJ then Logic.DEBUG_AddNote("win quest "..bI)end;bj:RemoveQuestMarkers()bj:Success()end end;API.WinQuest=WinQuest;Lib.Core=Lib.Core or{}Lib.Core.Job={EventJobMappingID=0,EventJobMapping={},EventJobs={},SecondsSinceGameStart=0,LastTimeStamp=0}Lib.Register("core/feature/Core_Job")function Lib.Core.Job:Initialize()self:StartJobs()end;function Lib.Core.Job:OnSaveGameLoaded()end;function Lib.Core.Job:OnReportReceived(aD,...)end;function Lib.Core.Job:StartJobs()self:CreateEventJob(Events.LOGIC_EVENT_EVERY_TURN,function()Lib.Core.Job:RealtimeController()end)end;function Lib.Core.Job:CreateEventJob(i,b5,...)self.EventJobMappingID=self.EventJobMappingID+1;local al=Trigger.RequestTrigger(i,"","LiberticaCore_Job_EventJobExecutor",1,{},{self.EventJobMappingID})self.EventJobs[al]={al,true,b5,arg}self.EventJobMapping[self.EventJobMappingID]=al;return al end;function Lib.Core.Job:EventJobExecutor(bW)local al=self.EventJobMapping[bW]if al and self.EventJobs[al]and self.EventJobs[al][2]then local bb=self.EventJobs[al][4]if self.EventJobs[al][3](unpack(bb))then self.EventJobs[al][2]=false end end end;function Lib.Core.Job:RealtimeController()if not self.LastTimeStamp then self.LastTimeStamp=math.floor(Framework.TimeGetTime())end;local bX=math.floor(Framework.TimeGetTime())if self.LastTimeStamp~=bX then self.LastTimeStamp=bX;self.SecondsSinceGameStart=self.SecondsSinceGameStart+1 end end;function LiberticaCore_Job_EventJobExecutor(bW)Lib.Core.Job:EventJobExecutor(bW)end;function RequestJobByEventType(bY,b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return Lib.Core.Job:CreateEventJob(bY,b5,...)end;API.StartJobByEventType=RequestJobByEventType;function RequestJob(b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,bZ,...)end;API.StartJob=RequestJob;StartSimpleJob=RequestJob;StartSimpleJobEx=RequestJob;function RequestHiResJob(b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,bZ,...)end;API.StartHiResJob=RequestHiResJob;StartSimpleHiResJob=RequestHiResJob;StartSimpleHiResJobEx=RequestHiResJob;function RequestDelay(b_,b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return RequestJob(function(c0,c1,c2,c3)if c0+c1<=Logic.GetTime()then c2(unpack(c3 or{}))return true end end,Logic.GetTime(),b_,b5,{...})end;API.StartDelay=RequestDelay;function RequestHiResDelay(b_,b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return RequestHiResJob(function(c0,c1,c2,c3)if c0+c1<=Logic.GetCurrentTurn()then c2(unpack(c3 or{}))return true end end,Logic.GetTime(),b_,b5,{...})end;API.StartHiResDelay=RequestHiResDelay;function RequestRealTimeDelay(b_,b5,...)local bZ=_G[b5]or b5;assert(type(bZ)=="function","Function does not exist!")return RequestHiResJob(function(c0,c1,c2,c3)if Lib.Core.Job.SecondsSinceGameStart>=c0+c1 then c2(unpack(c3 or{}))return true end end,Lib.Core.Job.SecondsSinceGameStart,b_,b5,{...})end;API.StartRealTimeDelay=RequestRealTimeDelay;function StopJob(c4)if Lib.Core.Job.EventJobs[c4]then Trigger.UnrequestTrigger(Lib.Core.Job.EventJobs[c4][1])Lib.Core.Job.EventJobs[c4]=nil;return end;EndJob(c4)end;API.EndJob=StopJob;function IsJobRunning(c4)if Lib.Core.Job.EventJobs[c4]then return Lib.Core.Job.EventJobs[c4][2]==true end;return JobIsRunning(c4)end;API.JobIsRunning=IsJobRunning;function ResumeJob(c4)if Lib.Core.Job.EventJobs[c4]then if Lib.Core.Job.EventJobs[c4][2]~=true then Lib.Core.Job.EventJobs[c4][2]=true end;return end;assert(false,"Failed to resume job.")end;API.ResumeJob=ResumeJob;function YieldJob(c4)if Lib.Core.Job.EventJobs[c4]then if Lib.Core.Job.EventJobs[c4][2]==true then Lib.Core.Job.EventJobs[c4][2]=false end;return end;assert(false,"Failed to yield job.")end;API.YieldJob=YieldJob;function GetSecondsRealTime()return Lib.Core.Job.SecondsSinceGameStart end;API.GetSecondsRealTime=GetSecondsRealTime;Lib.Core=Lib.Core or{}Lib.Core.Save={HistoryEditionQuickSave=false,SavingDisabled=false,LoadingDisabled=false}Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Save")function DisableAutoSave(c5)if not IsLocalScript()then Lib.Core.Save.HistoryEditionQuickSave=c5==true;ExecuteLocal([[Lib.Core.Save.HistoryEditionQuickSave = %s]],tostring(c5==true))end end;API.DisableAutoSave=DisableAutoSave;function DisableSaving(c5)Lib.Core.Save:DisableSaving(c5)end;API.DisableSaving=DisableSaving;function DisableLoading(c5)Lib.Core.Save:DisableLoading(c5)end;API.DisableLoading=DisableLoading;function Lib.Core.Save:Initialize()Report.SaveGameLoaded=CreateReport("Event_SaveGameLoaded")self:SetupQuicksaveKeyCallback()self:SetupQuicksaveKeyTrigger()end;function Lib.Core.Save:OnSaveGameLoaded()self:SetupQuicksaveKeyTrigger()self:UpdateLoadButtons()self:UpdateSaveButtons()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Save:OnReportReceived(aD,...)end;function Lib.Core.Save:SetupQuicksaveKeyTrigger()if IsLocalScript()then RequestHiResJob(function()Input.KeyBindDown(Keys.ModifierControl+Keys.S,"KeyBindings_SaveGame(true)",2,false)return true end)end end;function Lib.Core.Save:SetupQuicksaveKeyCallback()if IsLocalScript()then KeyBindings_SaveGame_Orig_Core=KeyBindings_SaveGame;KeyBindings_SaveGame=function(...)if Lib.Core.Save.SavingDisabled then return end;if not Lib.Core.Save.HistoryEditionQuickSave and not arg[1]then return end;KeyBindings_SaveGame_Orig_Core()end end end;function Lib.Core.Save:DisableSaving(c5)self.SavingDisabled=c5==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableSaving(%s)]],tostring(c5))else self:UpdateSaveButtons()end end;function Lib.Core.Save:UpdateSaveButtons()if IsLocalScript()then local c6=self.SavingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickSave",c6)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/SaveGame",c6)end end;function Lib.Core.Save:DisableLoading(c5)self.LoadingDisabled=c5==true;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableLoading(%s)]],tostring(c5))else self:UpdateLoadButtons()end end;function Lib.Core.Save:UpdateLoadButtons()if IsLocalScript()then local c6=self.LoadingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/LoadGame",c6)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickLoad",c6)end end;Lib.Core=Lib.Core or{}Lib.Core.Text={Languages={{"de","Deutsch","en"},{"en","English","en"},{"fr","Français","en"}},Colors={red="{@color:255,80,80,255}",blue="{@color:104,104,232,255}",yellow="{@color:255,255,80,255}",green="{@color:80,180,0,255}",white="{@color:255,255,255,255}",black="{@color:0,0,0,255}",grey="{@color:140,140,140,255}",azure="{@color:0,160,190,255}",orange="{@color:255,176,30,255}",amber="{@color:224,197,117,255}",violet="{@color:180,100,190,255}",pink="{@color:255,170,200,255}",scarlet="{@color:190,0,0,255}",magenta="{@color:190,0,89,255}",olive="{@color:74,120,0,255}",celeste="{@color:145,170,210,255}",tooltip="{@color:51,51,120,255}",none="{@color:none}"},StringTables={},Placeholders={Names={},EntityTypes={}}}CONST_LANGUAGE="de"Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Text")function Lib.Core.Text:Initialize()Report.LanguageChanged=CreateReport("Event_LanguageChanged")self:DetectLanguage()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnSaveGameLoaded()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnReportReceived(aD,...)end;function Lib.Core.Text:OverwriteGetStringTableText()XGUIEng.GetStringTableText_Orig_Core=XGUIEng.GetStringTableText;XGUIEng.GetStringTableText=function(c7)return Lib.Core.Text:GetStringTableOverwrite(c7)end end;function Lib.Core.Text:AddStringTableOverwrite(c8,bF)local f=string.find(c8,"/[^/]*$")local c9=c8:sub(1,f-1):lower()local ca=c8:sub(f+1):lower()self.StringTables[c9]=self.StringTables[c9]or{}self.StringTables[c9][ca]=bF end;function Lib.Core.Text:DeleteStringTableOverwrite(c8)local f=string.find(c8,"/[^/]*$")local c9=c8:sub(1,f-1):lower()local ca=c8:sub(f+1):lower()self.StringTables[c9]=self.StringTables[c9]or{}self.StringTables[c9][ca]=nil end;function Lib.Core.Text:GetStringTableOverwrite(c8)local f=string.find(c8,"/[^/]*$")local c9=c8:sub(1,f-1):lower()local ca=c8:sub(f+1):lower()self.StringTables[c9]=self.StringTables[c9]or{}if self.StringTables[c9][ca]then local cb=self.StringTables[c9][ca]if type(cb)=="string"and cb:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then cb=XGUIEng.GetStringTableText_Orig_Core(cb)end;return ConvertPlaceholders(Localize(cb))end;return XGUIEng.GetStringTableText_Orig_Core(c8)end;function Lib.Core.Text:DetectLanguage()local cc=Network.GetDesiredLanguage()if cc~="de"and cc~="fr"then cc="en"end;CONST_LANGUAGE=cc end;function Lib.Core.Text:ChangeSystemLanguage(q,cd,ce)local cf=CONST_LANGUAGE;local cg=ce;if cd==nil or cd==true then CONST_LANGUAGE=ce;ExecuteLocal([[CONST_LANGUAGE = "%s"]],ce)SendReport(Report.LanguageChanged,cf,cg)SendReportToLocal(Report.LanguageChanged,cf,cg)end end;function Lib.Core.Text:Localize(bF)local ch="ERROR_NO_TEXT"if type(bF)=="table"then if bF[CONST_LANGUAGE]then ch=bF[CONST_LANGUAGE]else for g,h in pairs(self.Languages)do if h[1]==CONST_LANGUAGE and h[3]and bF[h[3]]then ch=bF[h[3]]break end end end else ch=tostring(bF)end;return ch end;function Lib.Core.Text:ConvertPlaceholders(bF)if type(bF)=="string"then while true do local ci,cj,ck,cl,cm,cn,co,cp;if bF:find("{n:")then ci,cj,ck,cm,cn,co,cp=self:SplicePlaceholderText(bF,"{n:")cl=self.Placeholders.Names[cj]bF=ci..self:Localize(cl or"n:"..tostring(cj)..": not found")..ck elseif bF:find("{t:")then ci,cj,ck,cm,cn,co,cp=self:SplicePlaceholderText(bF,"{t:")cl=self.Placeholders.EntityTypes[cj]bF=ci..self:Localize(cl or"n:"..tostring(cj)..": not found")..ck elseif bF:find("{v:")then ci,cj,ck,cm,cn,co,cp=self:SplicePlaceholderText(bF,"{v:")cl=self:ReplaceValuePlaceholder(cj)bF=ci..self:Localize(cl or"v:"..tostring(cj)..": not found")..ck end;if cm==nil or cn==nil or co==nil or cp==nil then break end end;bF=self:ReplaceColorPlaceholders(bF)end;return bF end;function Lib.Core.Text:SplicePlaceholderText(bF,cq)local cm,cn=bF:find(cq)local co,cp=bF:find("}",cn)local ci=bF:sub(1,cm-1)local cj=bF:sub(cn+1,co-1)local ck=bF:sub(cp+1)return ci,cj,ck,cm,cn,co,cp end;function Lib.Core.Text:ReplaceColorPlaceholders(bF)for g,h in pairs(self.Colors)do bF=bF:gsub("{"..g.."}",h)end;return bF end;function Lib.Core.Text:ReplaceValuePlaceholder(bF)local cr=_G;local cs=string.slice(bF,"%.")for f=1,#cs do local ct=cs[f]local cu=tonumber(ct)if cu~=nil then ct=cu end;if not cr[ct]then return nil end;cr=cr[ct]end;return cr end;function Localize(bF)return Lib.Core.Text:Localize(bF)end;API.Localize=Localize;function ConvertPlaceholders(bF)return Lib.Core.Text:ConvertPlaceholders(bF)end;API.ConvertPlaceholders=ConvertPlaceholders;function AddNote(bF)bF=ConvertPlaceholders(Localize(bF))if not IsLocalScript()then Logic.DEBUG_AddNote(bF)return end;GUI.AddNote(bF)end;API.Note=AddNote;function AddStaticNote(bF)bF=ConvertPlaceholders(Localize(bF))if not IsLocalScript()then ExecuteLocal([[GUI.AddStaticNote("%s")]],bF)return end;GUI.AddStaticNote(bF)end;API.StaticNote=AddStaticNote;function AddMessage(bF,cv)bF=ConvertPlaceholders(Localize(bF))if not IsLocalScript()then ExecuteLocal([[AddMessage("%s", "%s")]],bF,cv or"")return end;bF=ConvertPlaceholders(Localize(bF))Message(bF,cv and cv~=""and cv:gsub("/","\\")or nil)end;function ClearNotes()if not IsLocalScript()then ExecuteLocal([[ClearNotes()]])return end;GUI.ClearNotes()end;API.ClearNotes=ClearNotes;function AddStringText(c8,bF)assert(IsLocalScript(),"Text can only be set in local script!")Lib.Core.Text:AddStringTableOverwrite(c8,bF)end;API.AddStringText=AddStringText;function DeleteStringText(c8)assert(IsLocalScript(),"Text can only be removed in local script!")Lib.Core.Text:DeleteStringTableOverwrite(c8)end;API.DeleteStringText=DeleteStringText;function GetStringText(c8)assert(IsLocalScript(),"Text can only be retrieved in local script!")return Lib.Core.Text:GetStringTableOverwrite(c8)end;API.GetStringText=GetStringText;function DefineLanguage(cw,r,cx,cy)assert(type(cw)=="string")assert(type(r)=="string")assert(type(cx)=="string")for g,h in pairs(Lib.Core.Text.Languages)do if h[1]==cw then return end end;cy=cy or#Lib.Core.Text.Languages+1;table.insert(Lib.Core.Text.Languages,cy,{cw,r,cx})ExecuteLocal([[
        table.insert(Lib.Core.Text.Languages, %d, {"%s", "%s", "%s"})
    ]],cy,cw,r,cx)end;Lib.Core=Lib.Core or{}Lib.Core.ScriptingValue={SV={Game="Vanilla",Vanilla={Destination={X=19,Y=20},Health=-41,Player=-71,Size=-45,Visible=-50,Selectable=-50,NPC=6},HistoryEdition={Destination={X=17,Y=18},Health=-38,Player=-68,Size=-42,Visible=-47,Selectable=-47,NPC=6}}}CONST_SCRIPTING_VALUES=Lib.Core.ScriptingValue.SV.Vanilla;Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_ScriptingValue")function Lib.Core.ScriptingValue:Initialize()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnSaveGameLoaded()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnReportReceived(aD,...)end;function Lib.Core.ScriptingValue:BitsInteger(cz)local aT={}while cz>0 do local cA=math.qmod(cz,2)table.insert(aT,1,cA)cz=(cz-cA)/2 end;table.remove(aT,1)return aT end;function Lib.Core.ScriptingValue:BitsFraction(cz,aT)for f=1,48 do cz=cz*2;if cz>=1 then table.insert(aT,1)cz=cz-1 else table.insert(aT,0)end;if cz==0 then return aT end end;return aT end;function Lib.Core.ScriptingValue:IntegerToFloat(cz)if cz==0 then return 0 end;local cB=1;if cz<0 then cz=2147483648+cz;cB=-1 end;local cC=math.qmod(cz,8388608)local cD=(cz-cC)/8388608;local cE=math.qmod(cD,256)local cF=cE-127;local cG=1;local cH=0.5;local cI=4194304;for f=23,0,-1 do if cC-cI>0 then cG=cG+cH;cC=cC-cI end;cI=cI/2;cH=cH/2 end;return cG*math.pow(2,cF)*cB end;function Lib.Core.ScriptingValue:FloatToInteger(cJ)if cJ==0 then return 0 end;local cK=false;if cJ<0 then cK=true;cJ=cJ*-1 end;local cL=0;local cM;local cF=0;if cJ>=1 then local cN=math.floor(cJ)local cO=cJ-cN;cM=self:BitsInteger(cN)cF=#cM;self:BitsFraction(cO,cM)else cM={}self:BitsFraction(cJ,cM)while cM[1]==0 do cF=cF-1;table.remove(cM,1)end;cF=cF-1;table.remove(cM,1)end;local cP=4194304;local cQ=1;for cR=cQ,23 do local cS=cM[cR]if not cS then break end;if cS==1 then cL=cL+cP end;cP=cP/2 end;cL=cL+(cF+127)*8388608;if cK then cL=cL-2147483648 end;return cL end;function GetEntityDestination(k)assert(IsExisting(k),"Entity does not exist.")local cT=GetFloat(k,CONST_SCRIPTING_VALUES.Destination.X)local cU=GetFloat(k,CONST_SCRIPTING_VALUES.Destination.Y)return{X=cT,Y=cU,Z=0}end;function GetEntityHealth(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Health)end;function SetEntityHealth(k,aN)assert(IsExisting(k),"Entity does not exist.")SetInteger(k,CONST_SCRIPTING_VALUES.Health,aN)end;function GetEntityNpc(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.NPC)>0 end;function GetEntityPlayer(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Player)end;function SetEntityPlayer(k,cV)assert(IsExisting(k),"Entity does not exist.")SetInteger(k,CONST_SCRIPTING_VALUES.Player,cV)end;function GetEntityScaling(k)assert(IsExisting(k),"Entity does not exist.")return GetFloat(k,CONST_SCRIPTING_VALUES.Size)end;function GetEntityScaling(k,cW)assert(IsExisting(k),"Entity does not exist.")SetFloat(k,CONST_SCRIPTING_VALUES.Size,cW)end;function IsEntityInvisible(k)assert(IsExisting(k),"Entity does not exist.")return GetInteger(k,CONST_SCRIPTING_VALUES.Visible)==793088 end;function IsEntityInaccessible(k)assert(IsExisting(k),"Entity does not exist.")return IsEntityInvisible(k)or GetInteger(k,CONST_SCRIPTING_VALUES.Visible)==799232 end;function GetInteger(k,cX)assert(IsExisting(k),"Entity does not exist.")local al=GetID(k)return Logic.GetEntityScriptingValue(al,cX)end;API.GetInteger=GetInteger;function GetFloat(k,cX)assert(IsExisting(k),"Entity does not exist.")local al=GetID(k)local b7=Logic.GetEntityScriptingValue(al,cX)return ConvertIntegerToFloat(b7)end;API.GetFloat=GetFloat;function SetInteger(k,cX,Z)assert(IsExisting(k),"Entity does not exist.")local al=GetID(k)Logic.SetEntityScriptingValue(al,cX,Z)end;API.SetInteger=SetInteger;function SetFloat(k,cX,Z)assert(IsExisting(k),"Entity does not exist.")local al=GetID(k)Logic.SetEntityScriptingValue(al,cX,ConvertFloatToInteger(Z))end;API.SetFloat=SetFloat;function ConvertIntegerToFloat(Z)return Lib.Core.ScriptingValue:IntegerToFloat(Z)end;API.ConvertIntegerToFloat=ConvertIntegerToFloat;function ConvertFloatToInteger(Z)return Lib.Core.ScriptingValue:FloatToInteger(Z)end;API.ConvertFloatToInteger=ConvertFloatToInteger;Lib.Core=Lib.Core or{}Lib.Core.Bugfix={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/GetDistance")Lib.Require("core/feature/Core_Text")Lib.Register("core/feature/Core_Bugfix")function Lib.Core.Bugfix:Initialize()if not IsLocalScript()then self:FixResourceSlotsInStorehouses()self:FixMiddleEuropeNpcBarracks()self:FixMerchantArrivedCheckpoints()self:FixDestroyAllPlayerUnits()self:FixBanditCampFireplace()end;if IsLocalScript()then self:FixInteractiveObjectClicked()self:FixBigCathedralName()self:FixClimateZoneForHouseMenu()self:FixAbilityInfoWhenHomeless()end end;function Lib.Core.Bugfix:OnSaveGameLoaded()end;function Lib.Core.Bugfix:OnReportReceived(aD,...)end;function Lib.Core.Bugfix:FixResourceSlotsInStorehouses()for f=1,8 do local cY=Logic.GetStoreHouse(f)if cY~=0 then Logic.AddGoodToStock(cY,Goods.G_Salt,0,true,true)Logic.AddGoodToStock(cY,Goods.G_Dye,0,true,true)end end end;function Lib.Core.Bugfix:FixMiddleEuropeNpcBarracks()GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,an)GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix(q,an)local cZ=Logic.GetEntityType(an)if cZ==Entities.B_NPC_Barracks_ME then Logic.RespawnResourceSetMaxSpawn(an,0.01)Logic.RespawnResourceSetMinSpawn(an,0.01)end end;for g,h in pairs(Logic.GetEntitiesOfType(Entities.B_NPC_Barracks_ME))do Logic.RespawnResourceSetMaxSpawn(h,0.01)Logic.RespawnResourceSetMinSpawn(h,0.01)end end;function Lib.Core.Bugfix:FixMerchantArrivedCheckpoints()function QuestTemplate:IsMerchantArrived(bL)if bL.Data[3]~=nil then if bL.Data[3]==1 then if bL.Data[5].ID~=nil then bL.Data[3]=bL.Data[5].ID;DeleteQuestMerchantWithID(bL.Data[3])if MapCallback_DeliverCartSpawned then MapCallback_DeliverCartSpawned(self,bL.Data[3],bL.Data[1])end end elseif Logic.IsEntityDestroyed(bL.Data[3])then DeleteQuestMerchantWithID(bL.Data[3])bL.Data[3]=nil;bL.Data[5].ID=nil else local aC=bL.Data[6]and bL.Data[6]or self.SendingPlayer;local c_=Logic.GetStoreHouse(aC)local d0=Logic.GetStoreHouse(aC)local d1=Logic.GetStoreHouse(aC)local d2=nil;if c_>0 then local I,J=Logic.GetBuildingApproachPosition(c_)d2=GetDistance(bL.Data[3],{X=I,Y=J})<1000 end;if d0>0 then local I,J=Logic.GetBuildingApproachPosition(d0)d2=d2 or GetDistance(bL.Data[3],{X=I,Y=J})<1000 end;if d1>0 then local I,J=Logic.GetBuildingApproachPosition(d1)d2=d2 or GetDistance(bL.Data[3],{X=I,Y=J})<1000 end;return d2 end end;return false end end;function Lib.Core.Bugfix:FixInteractiveObjectClicked()GUI_Interaction.InteractiveObjectClicked=function()local d3=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local d4=g_Interaction.ActiveObjectsOnScreen[d3]if d4==nil or not Logic.InteractiveObjectGetAvailability(d4)then return end;local n=GUI.GetPlayerID()local d5={Logic.InteractiveObjectGetEffectiveCosts(d4,n)}local d6=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")local d7=true;if d7 and d5~=nil and d5[1]~=nil then if d5[1]==Goods.G_Gold then d6=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if d5[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(d5[1])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")d7=false end;d7=d7 and GetPlayerGoodsInSettlement(d5[1],n,false)>=d5[2]end;if d7 and d5~=nil and d5[3]~=nil then if d5[3]==Goods.G_Gold then d6=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;if d5[3]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(d5[3])~=GoodCategories.GC_Resource then error("Only resources can be used as costs for objects!")d7=false end;d7=d7 and GetPlayerGoodsInSettlement(d5[3],n,false)>=d5[4]end;if not d7 then Message(d6)return end;if not GUI_Interaction.InteractionClickOverride or not GUI_Interaction.InteractionClickOverride(d4)then Sound.FXPlay2DSound("ui\\menu_click")end;if not GUI_Interaction.InteractionSpeechFeedbackOverride or not GUI_Interaction.InteractionSpeechFeedbackOverride(d4)then GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)end;if not Mission_Callback_OverrideObjectInteraction or not Mission_Callback_OverrideObjectInteraction(d4,n,d5)then GUI.ExecuteObjectInteraction(d4,n)end end end;function Lib.Core.Bugfix:FixDestroyAllPlayerUnits()QuestTemplate.IsObjectiveCompleted_Orig_Core_Bugfix=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,bL)local bM=bL.Type;if bL.Completed~=nil then return bL.Completed end;local bN=bL.Data;if bM==Objective.DestroyAllPlayerUnits then local d8=GetPlayerEntities(bN,0)local d9={}for f=#d8,1,-1 do local l=Logic.GetEntityType(d8[f])if Logic.IsEntityInCategory(d8[f],EntityCategories.AttackableBuilding)==0 or Logic.IsEntityInCategory(d8[f],EntityCategories.Wall)==0 then if Logic.IsConstructionComplete(d8[f])==0 then table.insert(d9,d8[f])end end;local da={Entities.XD_ScriptEntity,Entities.S_AIHomePosition,Entities.S_AIAreaDefinition}if table.contains(da,l)then table.insert(d9,d8[f])end end;if#d8==0 or#d8-#d9==0 then bL.Completed=true end elseif bM==Objective.Distance then bL.Completed=Lib.Core.Quest:IsQuestPositionReached(self,bL)else return self:IsObjectiveCompleted_Orig_Core_Bugfix(bL)end end end;function Lib.Core.Bugfix:FixBigCathedralName()AddStringText("Names/B_Cathedral_Big",{de="Dom",en="Cathedral",fr="Cathédrale"})end;if EntityCategories then Lib.Core.Bugfix.HouseMenuWidgetToCategory={["B_Castle_ME"]=EntityCategories.Headquarters,["B_Cathedral"]=EntityCategories.Cathedrals,["B_Cathedral_Big"]=EntityCategories.Cathedrals,["B_Outpost_ME"]=EntityCategories.Outpost}end;function Lib.Core.Bugfix:FixClimateZoneForHouseMenu()HouseMenuGetNextBuildingID=function(db)local dc;local dd=0;local de=false;local n=GUI.GetPlayerID()local df=Lib.Core.Bugfix.HouseMenuWidgetToCategory[db]db=GetClimateEntityName(db)if HouseMenu.Widget.CurrentBuilding~=db then HouseMenu.Widget.CurrentBuilding=db;HouseMenu.Widget.CurrentBuildingNumber=0 end;if df~=nil then dc={Logic.GetPlayerEntitiesInCategory(n,df)}else dc={Logic.GetBuildingsByPlayer(n)}end;for f=1,#dc do local cZ=Logic.GetEntityType(dc[f])local dg=Logic.GetEntityTypeName(cZ)if df~=nil or dg==db then dd=f;if dd>HouseMenu.Widget.CurrentBuildingNumber then HouseMenu.Widget.CurrentBuildingNumber=dd;de=true;break end end end;if dd~=0 then if not de then for f=1,#dc do local cZ=Logic.GetEntityType(dc[f])local dg=Logic.GetEntityTypeName(cZ)if df~=nil or dg==db then HouseMenu.Widget.CurrentBuildingNumber=f;break end end end;return dc[HouseMenu.Widget.CurrentBuildingNumber]end;return nil end;HouseMenuSetIconsPart=function(dh,di)local n=GUI.GetPlayerID()local dj={XGUIEng.ListSubWidgets(dh)}local dk={Logic.GetBuildingsByPlayer(n)}local db,df;for f=1,#dj do db=XGUIEng.GetWidgetNameByID(dj[f])df=Lib.Core.Bugfix.HouseMenuWidgetToCategory[db]local dl=Entities[db]local dm=dh.."/"..db.."/Button"SetIcon(dm,g_TexturePositions.Entities[dl])local dn=0;local dp;if df~=nil then dp={Logic.GetPlayerEntitiesInCategory(n,df)}dn=#dp else for bO=1,#dk do local cZ=Logic.GetEntityType(dk[bO])local dg=Logic.GetEntityTypeName(cZ)local dq=GetClimateEntityName(db)if dg==dq then dn=dn+1 end end end;XGUIEng.DisableButton(dm,dn==0 and 1 or 0)local dr=dh.."/"..db.."/Amount"XGUIEng.SetText(dr,"{center}"..dn)local ds=dh.."/"..db.."/Stop"UpdateStopOverlay(ds,db,dn)if db==HouseMenu.Widget.CurrentBuilding then UpdateStopOverlay(HouseMenu.Widget.CurrentStop,HouseMenu.Widget.CurrentBuilding,dn)end end;HouseMenu.Counter=HouseMenu.Counter+1;if di or HouseMenu.Counter%20==0 then for bO=1,#dj do local dt=XGUIEng.GetWidgetNameByID(dj[bO])local du=dh.."/"..dt.."/Button"dt=GetClimateEntityName(dt)XGUIEng.HighLightButton(du,dt==HouseMenu.Widget.CurrentBuilding and 1 or 0)end end end end;function Lib.Core.Bugfix:FixAbilityInfoWhenHomeless()StartKnightVoiceForActionSpecialAbility=function(dv,dw)local n=GUI.GetPlayerID()local c_=Logic.GetStoreHouse(n)local dx=Logic.GetEntityType(Logic.GetKnightID(n))if dv==dx and c_~=0 and ActionAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(n,"Hint_SpecialAbilityAction",false,n,dw)ActionAbilityIsExplained=true end end;StartKnightVoiceForPermanentSpecialAbility=function(dv)local n=GUI.GetPlayerID()local c_=Logic.GetStoreHouse(n)local dx=Logic.GetEntityType(Logic.GetKnightID(n))if dv==dx and c_~=0 and PermanentAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(n,"Hint_SpecialAbilityPermanetly",false,n)PermanentAbilityIsExplained=true end end end;function Lib.Core.Bugfix:FixBanditCampFireplace()g_Outlaws.ReplaceCampType={}g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace01]=Entities.D_X_Fireplace01_Expired;g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace02]=Entities.D_X_Fireplace02_Expired;ActivateFireplaceforBanditPack=function(dy)local dz=Logic.EntityGetPlayer(dy)if g_Outlaws.Players[dz][dy].CampFire==nil then local dA,dB=Logic.GetBuildingApproachPosition(dy)local dC,dD=Logic.GetEntityPosition(dy)local I=(dA-dC)*1.3+dA;local J=(dB-dD)*1.3+dB;local dE=Entities.D_X_Fireplace01;if Logic.IsEntityInCategory(dy,EntityCategories.Storehouse)==1 then dE=Entities.D_X_Fireplace02 end;g_Outlaws.Players[dz][dy].CampFireType=dE;local dF=g_Outlaws.Players[dz][dy].ExtinguishedFire;Logic.DestroyEntity(dF)local dG=Logic.CreateEntityOnUnblockedLand(dE,I,J,0,0)g_Outlaws.Players[dz][dy].CampFire=dG;g_Outlaws.Players[dz][dy].CampFirePos={X=I,Y=J}return true end;return false end;DisableFireplaceforBanditPack=function(dy)local dz=Logic.EntityGetPlayer(dy)if g_Outlaws.Players[dz][dy].CampFire~=nil then local I=g_Outlaws.Players[dz][dy].CampFirePos.X;local J=g_Outlaws.Players[dz][dy].CampFirePos.Y;local dF=g_Outlaws.Players[dz][dy].CampFire;Logic.DestroyEntity(dF)local dH=g_Outlaws.Players[dz][dy].CampFireType;local dE=g_Outlaws.ReplaceCampType[dH]local dG=Logic.CreateEntityOnUnblockedLand(dE,I,J,0,0)g_Outlaws.Players[dz][dy].ExtinguishedFire=dG;g_Outlaws.Players[dz][dy].CampFire=nil end end end;Lib.Core=Lib.Core or{}Lib.Core.Chat={DebugInput={}}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Chat")function Lib.Core.Chat:Initialize()Report.ChatOpened=CreateReport("Event_ChatOpened")Report.ChatClosed=CreateReport("Event_ChatClosed")for f=1,8 do self.DebugInput[f]={}end end;function Lib.Core.Chat:OnSaveGameLoaded()end;function Lib.Core.Chat:OnReportReceived(aD,...)end;function Lib.Core.Chat:ShowTextInput(q,dI)if Lib.IsHistoryEdition and Framework.IsNetworkGame()then return end;if not GUI then ExecuteLocal([[Lib.Core.Chat:ShowTextInput(%d, %s)]],q,tostring(dI==true))return end;q=q or GUI.GetPlayerID()self:PrepareInputVariable(q)self:ShowInputBox(q,dI==true)end;function Lib.Core.Chat:ShowInputBox(q,dJ)if GUI.GetPlayerID()~=q then return end;self.DebugInput[q]=dJ==true;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()Input.ChatMode()XGUIEng.SetText("/InGame/Root/Normal/ChatInput/ChatInput","")XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",1)XGUIEng.SetFocus("/InGame/Root/Normal/ChatInput/ChatInput")SendReportToGlobal(Report.ChatOpened,q)SendReport(Report.ChatOpened,q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;return true end)end;function Lib.Core.Chat:PrepareInputVariable(q)if not IsLocalScript()then return end;GUI_Chat.Abort_Orig_Core=GUI_Chat.Abort_Orig_Core or GUI_Chat.Abort;GUI_Chat.Confirm_Orig_Core=GUI_Chat.Confirm_Orig_Core or GUI_Chat.Confirm;GUI_Chat.Confirm=function()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",0)local dK=XGUIEng.GetText("/InGame/Root/Normal/ChatInput/ChatInput")local dL=Lib.Core.Chat.DebugInput[q]Lib.Core.Chat.ChatBoxInput=dK;Lib.Core.Chat:SendInputAsEvent(dK,dL)g_Chat.JustClosed=1;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;Input.GameMode()if dK:len()>0 and Framework.IsNetworkGame()and not dL then GUI.SendChatMessage(dK,q,g_Chat.CurrentMessageType,g_Chat.CurrentWhisperTarget)end end;if not Framework.IsNetworkGame()then GUI_Chat.Abort=function()end end end;function Lib.Core.Chat:SendInputAsEvent(bF,dJ)bF=bF==nil and""or bF;local n=GUI.GetPlayerID()SendReportToGlobal(Report.ChatClosed,bF or"<<<ES>>>",GUI.GetPlayerID(),dJ==true)SendReport(Report.ChatClosed,bF or"<<<ES>>>",GUI.GetPlayerID(),dJ==true)self.DebugInput[n]=false end;function ShowTextInput(q,dI)Lib.Core.Chat:ShowTextInput(q,dI)end;API.ShowTextInput=ShowTextInput;Lib.Core=Lib.Core or{}Lib.Core.Debug={DisplayScriptErrors=false,CheckAtRun=false,TraceQuests=false,DevelopingCheats=false,DevelopingShell=false}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Chat")Lib.Register("core/feature/Core_Debug")function Lib.Core.Debug:Initialize()Report.DebugChatConfirmed=CreateReport("Event_DebugChatConfirmed")Report.DebugConfigChanged=CreateReport("Event_DebugConfigChanged")if IsLocalScript()then self:InitializeQsbDebugHotkeys()CreateReportReceiver(Report.ChatClosed,function(...)Lib.Core.Debug:ProcessDebugInput(...)end)end end;function Lib.Core.Debug:OnSaveGameLoaded()if IsLocalScript()then self:InitializeDebugWidgets()self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnReportReceived(aD,...)end;function Lib.Core.Debug:ActivateDebugMode(dM,dN,dO,dP,dQ)if IsLocalScript()then return end;self.DisplayScriptErrors=dM==true;self.CheckAtRun=dN==true;self.DevelopingCheats=dO==true;self.DevelopingShell=dP==true;self.TraceQuests=dQ==true;SendReport(Report.DebugConfigChanged,self.DisplayScriptErrors,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)ExecuteLocal([[
            Lib.Core.Debug.DisplayScriptErrors = %s;
            Lib.Core.Debug.CheckAtRun          = %s;
            Lib.Core.Debug.DevelopingCheats    = %s;
            Lib.Core.Debug.DevelopingShell     = %s;
            Lib.Core.Debug.TraceQuests         = %s;

            SendReport(
                Report.DebugConfigChanged,
                Lib.Core.Debug.DisplayScriptErrors,
                Lib.Core.Debug.CheckAtRun,
                Lib.Core.Debug.DevelopingCheats,
                Lib.Core.Debug.DevelopingShell,
                Lib.Core.Debug.TraceQuests
            );
            Lib.Core.Debug:InitializeDebugWidgets();
        ]],tostring(self.DisplayScriptErrors),tostring(self.CheckAtRun),tostring(self.DevelopingCheats),tostring(self.DevelopingShell),tostring(self.TraceQuests))end;function Lib.Core.Debug:InitializeDebugWidgets()if Network.IsNATReady~=nil and Framework.IsNetworkGame()then return end;if self.DevelopingCheats then KeyBindings_EnableDebugMode(1)KeyBindings_EnableDebugMode(2)KeyBindings_EnableDebugMode(3)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClock=true else KeyBindings_EnableDebugMode(0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClock=false end end;function Lib.Core.Debug:InitializeQsbDebugHotkeys()if Framework.IsNetworkGame()then return end;Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.ModifierAlt+Keys.R,"Lib.Core.Debug:ProcessDebugShortcut('RestartMap')",30,false)Input.KeyBindDown(Keys.ModifierShift+Keys.OemPipe,"Lib.Core.Debug:ProcessDebugShortcut('Terminal')",30,false)end;function Lib.Core.Debug:ProcessDebugShortcut(i,dR)if self.DevelopingCheats then if i=="RestartMap"then Framework.RestartMap()elseif i=="Terminal"then ShowTextInput(GUI.GetPlayerID(),true)end end end;function Lib.Core.Debug:ProcessDebugInput(F,q,dS)if dS then if F:lower():find("^restartmap")then self:ProcessDebugShortcut("RestartMap")elseif F:lower():find("^clear")then GUI.ClearNotes()elseif F:lower():find("^version")then GUI.AddStaticNote("Version: "..Lib.Loader.Version)elseif F:find("^> ")then GUI.SendScriptCommand(F:sub(3),true)elseif F:find("^>> ")then GUI.SendScriptCommand(string.format("Logic.ExecuteInLuaLocalState(\"%s\")",F:sub(4)),true)elseif F:find("^< ")then GUI.SendScriptCommand(string.format([[Script.Load("%s")]],F:sub(3)))elseif F:find("^<< ")then Script.Load(F:sub(4))end end end;function Lib.Core.Debug:CommandTokenizer(F)local dT={}if F==nil then return dT end;local dU={F}local dV={}local aW,aU=string.find(F,"%s+&&%s+")if aW then dU={}while aW do local dW=string.sub(F,1,aW-1)table.insert(dU,dW)F=string.sub(F,aU+1)aW,aU=string.find(F,"%s+&&%s+")end;if string.len(F)>0 then table.insert(dU,F)end end;for f=1,#dU,1 do aW,aU=string.find(dU[f],"%s+&%s+")if aW then local dX=""while aW do local dW=string.sub(dU[f],1,aW-1)table.insert(dV,dX..dW)if string.find(dW," ")then dX=string.sub(dW,1,string.find(dW," ")-1).." "end;dU[f]=string.sub(dU[f],aU+1)aW,aU=string.find(dU[f],"%s+&%s+")end;if string.len(dU[f])>0 then table.insert(dV,dX..dU[f])end else table.insert(dV,dU[f])end end;for f=1,#dV,1 do local dY={}aW,aU=string.find(dV[f],"%s+")if aW then while aW do local dW=string.sub(dV[f],1,aW-1)table.insert(dY,dW)dV[f]=string.sub(dV[f],aU+1)aW,aU=string.find(dV[f],"%s+")end;table.insert(dY,dV[f])else table.insert(dY,dV[f])end;table.insert(dT,dY)end;return dT end;function ActivateDebugMode(dM,dN,dO,dP,dQ)Lib.Core.Debug:ActivateDebugMode(dM,dN,dO,dP,dQ)end;API.ActivateDebugMode=ActivateDebugMode;Lib.Core=Lib.Core or{}Lib.Core.ModuleList={}Lib.Core.Global={IsInstalled=false}Lib.Core.Local={IsInstalled=false}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Chat")Lib.Require("core/feature/Core_Debug")Lib.Require("core/feature/Core_LuaExtension")Lib.Require("core/feature/Core_Bugfix")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_ScriptingValue")Lib.Require("core/feature/Core_Text")Lib.Require("core/feature/Core_Job")Lib.Require("core/feature/Core_Save")Lib.Require("core/feature/Core_Quest")Lib.Register("core/Core")function log(bF,...)local cb=bF;if#arg>0 then cb=string.format(cb,unpack(arg))end;Framework.WriteToLog(cb)return cb end;function warn(dZ,bF,...)if not dZ then local d_="{@color:255,0,0,255}"local cb=d_..log(bF,unpack(arg))if GUI then GUI.AddNote(cb)else Logic.DEBUG_Addnote(cb)end;return cb end end;function error(dZ,bF,...)if not dZ then local cb=log(bF,unpack(arg))return assert(dZ,cb)end end;function debug(dZ,bF,...)if not dZ then local cb=log(bF,unpack(arg))if GUI then GUI.AddNote(cb)else Logic.DEBUG_Addnote(cb)end end end;function Lib.Core.Global:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local e0=GameCallback_Lib_GetExternFilesToLoad()for f=1,#e0 do Script.Load(e0[f])end end;for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Global and e1.Global.Initialize then e1.Global:Initialize()end end;self:OverrideOnSaveGameLoaded()self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()LoadBehaviors()Lib.Core.Local=nil end;self.IsInstalled=true end;function Lib.Core.Global:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Global and e1.Global.OnSaveGameLoaded then e1.Global:OnSaveGameLoaded()end end end;function Lib.Core.Global:OverrideOnSaveGameLoaded()Mission_OnSaveGameLoaded_Orig_Libertica=Mission_OnSaveGameLoaded;Mission_OnSaveGameLoaded=function()Lib.Core.Global:ExecuteLocal("Lib.Core.Local:OnSaveGameLoaded()")Lib.Core.Global:OnSaveGameLoaded()end end;function Lib.Core.Global:InitReportListener()GameCallback_Lib_OnEventReceived=function(aD,...)Lib.Core.LuaExtension:OnReportReceived(aD,...)Lib.Core.Report:OnReportReceived(aD,...)Lib.Core.Text:OnReportReceived(aD,...)Lib.Core.Job:OnReportReceived(aD,...)Lib.Core.ScriptingValue:OnReportReceived(aD,...)Lib.Core.Save:OnReportReceived(aD,...)Lib.Core.Quest:OnReportReceived(aD,...)Lib.Core.Chat:OnReportReceived(aD,...)Lib.Core.Debug:OnReportReceived(aD,...)Lib.Core.Bugfix:OnReportReceived(aD,...)if aD==Report.LoadingFinished then SendReportToLocal(Report.LoadingFinished,...)end;if aD==Report.EscapePressed then SendReportToLocal(Report.EscapePressed,...)end;for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Global and e1.Global.OnReportReceived then e1.Global:OnReportReceived(aD,...)end end;if aD==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Global:ExecuteLocal(e2,...)local e3=e2;if arg and#arg>0 then e3=e3:format(unpack(arg))end;Logic.ExecuteInLuaLocalState(e3)end;function Lib.Core.Global:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")end;function Lib.Core.Global:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")end;function Lib.Core.Local:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local e0=GameCallback_Lib_GetExternFilesToLoad()for f=1,#e0 do Script.Load(e0[f])end end;for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Local and e1.Local.Initialize then e1.Local:Initialize()end end;self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()Lib.Core.Global=nil end;self.IsInstalled=true end;function Lib.Core.Local:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Local and e1.Local.OnSaveGameLoaded then e1.Local:OnSaveGameLoaded()end end;self:SetEscapeKeyTrigger()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Local:InitReportListener()GameCallback_Lib_OnEventReceived=function(aD,...)Lib.Core.LuaExtension:OnReportReceived(aD,...)Lib.Core.Report:OnReportReceived(aD,...)Lib.Core.Text:OnReportReceived(aD,...)Lib.Core.Job:OnReportReceived(aD,...)Lib.Core.ScriptingValue:OnReportReceived(aD,...)Lib.Core.Save:OnReportReceived(aD,...)Lib.Core.Quest:OnReportReceived(aD,...)Lib.Core.Chat:OnReportReceived(aD,...)Lib.Core.Debug:OnReportReceived(aD,...)Lib.Core.Bugfix:OnReportReceived(aD,...)if aD==Report.LoadingFinished then XGUIEng.PopPage()end;for f=1,#Lib.Core.ModuleList do local e1=Lib[Lib.Core.ModuleList[f]]if e1.Local and e1.Local.OnReportReceived then e1.Local:OnReportReceived(aD,...)end end;if aD==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Local:ExecuteGlobal(e2,...)local e3=e2;assert(not(IsHistoryEdition()and IsMultiplayer()),"Script command is not allowed in history edition multiplayer.")if arg and#arg>0 then e3=e3:format(unpack(arg))end;GUI.SendScriptCommand(e3)end;function Lib.Core.Local:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")self:SetEscapeKeyTrigger()end;function Lib.Core.Local:SetEscapeKeyTrigger()Input.KeyBindDown(Keys.Escape,"SendReportToGlobal(Report.EscapePressed, GUI.GetPlayerID())",30,false)end;function Lib.Core.Local:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")self.LoadscreenWatchJobID=RequestHiResJob(function()if XGUIEng.IsWidgetShownEx("/LoadScreen/LoadScreen")==0 then SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())return true end end)HideLoadScreen_Orig_Core=HideLoadScreen;HideLoadScreen=function()HideLoadScreen_Orig_Core()XGUIEng.PushPage("/LoadScreen/LoadScreen",true)XGUIEng.ShowWidget("/LoadScreen/LoadScreen/ButtonStart",0)EndJob(Lib.Core.Local.LoadscreenWatchJobID)SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())end end;function PrepareLibrary()assert(not IsLocalScript(),"Must be called from global script!")Lib.Core.Global:Initialize()ExecuteLocal("Lib.Core.Local:Initialize()")end;function RegisterModule(r)assert(Lib[r],"Module '"..r.."' does not exist!")table.insert(Lib.Core.ModuleList,r)end;function ExecuteLocal(e2,...)assert(not IsLocalScript(),"Can not be used in local script.")Lib.Core.Global:ExecuteLocal(e2,...)end;function ExecuteGlobal(e2,...)assert(IsLocalScript(),"Can not be used in global script.")Lib.Core.Local:ExecuteGlobal(e2,...)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UITools_API")function ChangeIcon(e4,e5,e6,r)error(IsLocalScript(),"Can only be done in local script!")e5=e5 or{10,14}Lib.UITools.Widget:SetIcon(e4,e5,e6,r)end;API.SetIcon=ChangeIcon;function SetTooltipNormal(e7,bF,e8)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipNormal(e7,bF,e8)end;API.SetTooltipNormal=SetTooltipNormal;function SetTooltipCosts(e7,bF,e8,e9,ea)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipCosts(e7,bF,e8,e9,ea)end;API.SetTooltipCosts=SetTooltipCosts;function HideMinimap(c5)if not IsLocalScript()then ExecuteLocal("HideMinimap(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapOverlay",c5)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapTerrain",c5)end;API.HideMinimap=HideMinimap;function HideToggleMinimap(c5)if not IsLocalScript()then ExecuteLocal("HideToggleMinimap(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/MinimapButton",c5)end;API.HideToggleMinimap=HideToggleMinimap;function HideDiplomacyMenu(c5)if not IsLocalScript()then ExecuteLocal("HideDiplomacyMenu(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/DiplomacyMenuButton",c5)end;API.HideDiplomacyMenu=HideDiplomacyMenu;function HideProductionMenu(c5)if not IsLocalScript()then ExecuteLocal("HideProductionMenu(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/ProductionMenuButton",c5)end;API.HideProductionMenu=HideProductionMenu;function HideWeatherMenu(c5)if not IsLocalScript()then ExecuteLocal("HideWeatherMenu(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/WeatherMenuButton",c5)end;API.HideWeatherMenu=HideWeatherMenu;function HideBuyTerritory(c5)if not IsLocalScript()then ExecuteLocal("HideBuyTerritory(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory",c5)end;API.HideBuyTerritory=HideBuyTerritory;function HideKnightAbility(c5)if not IsLocalScript()then ExecuteLocal("HideKnightAbility(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbilityProgress",c5)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbility",c5)end;API.HideKnightAbility=HideKnightAbility;function HideKnightButton(c5)if not IsLocalScript()then ExecuteLocal("HideKnightButton(%s)",tostring(c5))Logic.SetEntitySelectableFlag("..KnightID..",c5 and 0 or 1)return end;local eb=Logic.GetKnightID(GUI.GetPlayerID())if c5 then GUI.DeselectEntity(eb)end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButtonProgress",c5)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButton",c5)end;API.HideKnightButton=HideKnightButton;function HideSelectionButton(c5)if not IsLocalScript()then ExecuteLocal("HideSelectionButton(%s)",tostring(c5))return end;HideKnightButton(c5)GUI.ClearSelection()Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/BattalionButton",c5)end;API.HideSelectionButton=HideSelectionButton;function HideBuildMenu(c5)if not IsLocalScript()then ExecuteLocal("HideBuildMenu(%s)",tostring(c5))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/BuildMenu",c5)end;API.HideBuildMenu=HideBuildMenu;function AddShortcutDescription(c8,ec)if not IsLocalScript()then return-1 end;g_KeyBindingsOptions.Descriptions=nil;for f=1,#Lib.UITools.Shortcut.HotkeyDescriptions do if Lib.UITools.Shortcut.HotkeyDescriptions[f][1]==c8 then return-1 end end;local al=#Lib.UITools.Shortcut.HotkeyDescriptions+1;table.insert(Lib.UITools.Shortcut.HotkeyDescriptions,{ID=al,c8,ec})return#Lib.UITools.Shortcut.HotkeyDescriptions end;API.AddShortcutDescription=AddShortcutDescription;function RemoveShortcutDescription(aD)if not IsLocalScript()then return end;g_KeyBindingsOptions.Descriptions=nil;for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h.ID==aD then Lib.UITools.Shortcut.HotkeyDescriptions[g]=nil end end end;API.RemoveShortcutDescription=RemoveShortcutDescription;function SpeedLimitActivate(c5)if IsLocalScript()or Framework.IsNetworkGame()then return end;return ExecuteLocal("Lib.UITools.Speed:ActivateSpeedLimit(%s)",tostring(c5))end;API.SpeedLimitActivate=SpeedLimitActivate;function GetTerritoryName(ed)local Name=Logic.GetTerritoryName(ed)local u=Framework.GetCurrentMapTypeAndCampaignName()if u==1 or u==3 then return Name end;local ee=Framework.GetCurrentMapName()local ef="Map_"..ee;local eg=string.gsub(Name," ","")eg=XGUIEng.GetStringTableText(ef.."/Territory_"..eg)if eg==""then eg=Name.."(key?)"end;return eg end;API.GetTerritoryName=GetTerritoryName;function GetPlayerName(q)local s=Logic.GetPlayerName(q)local t=CONST_PLAYER_NAMES[q]if t~=nil and t~=""then s=t end;local u=Framework.GetCurrentMapTypeAndCampaignName()local v=Framework.GetMultiplayerMapMode(Framework.GetCurrentMapName(),u)if v>0 then return s end;if u==1 or u==3 then local w,x,y=Framework.GetPlayerInfo(q)if s~=""then return s end;return w end;return s end;API.GetPlayerName=GetPlayerName;function SetPlayerName(q,r)assert(type(q)=="number")assert(type(r)=="string")if not IsLocalScript()then ExecuteLocal([[SetPlayerName(%d, "%s")]],q,r)return end;GUI_MissionStatistic.PlayerNames[q]=r;CONST_PLAYER_NAMES[q]=r end;API.SetPlayerName=SetPlayerName;function SetPlayerColor(q,eh,ei,ej)error(not IsLocalScript(),"Player color must be set from logic!")g_ColorIndex["ExtraColor1"]=g_ColorIndex["ExtraColor1"]or 16;g_ColorIndex["ExtraColor2"]=g_ColorIndex["ExtraColor2"]or 17;local ek=type(eh)=="string"and g_ColorIndex[eh]or eh;local el=ei or-1;local em=ej or-1;Logic.PlayerSetPlayerColor(q,ek,el,em)ExecuteLocal([[
        Display.UpdatePlayerColors()
        GUI.RebuildMinimapTerrain()
        GUI.RebuildMinimapTerritory()
    ]])end;API.SetPlayerColor=SetPlayerColor;function SetPlayerPortrait(q,en)error(q>=1 and q<=8,"Invalid player ID!")if not IsLocalScript()then local eo=en~=nil and"'"..en.."'"or"nil"ExecuteLocal("SetPlayerPortrait(%d, %s)",q,eo)return end;if en==nil then Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(q)elseif en~=nil and IsExisting(en)then Lib.UITools.Player:SetPlayerPortraitBySettler(q,en)else Lib.UITools.Player:SetPlayerPortraitByModelName(q,en)end end;API.SetPlayerPortrait=SetPlayerPortrait;Lib.Register("module/ui/UITools_Speed")Lib.UITools=Lib.UITools or{}Lib.UITools.Speed={SpeedLimit=1,Text={Message={NoSpeedUp={de="Die Spielgeschwindigkeit kann nicht erhöht werden!",en="The game speed can not be increased!",fr="La vitesse du jeu ne peut pas être augmentée!"}}}}function Lib.UITools.Speed:SetSpeedLimit(ep)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;ep=ep<1 and 1 or math.floor(ep)log("ModuleGuiControl: Setting speed limit to "..ep)self.SpeedLimit=ep end;function Lib.UITools.Speed:ActivateSpeedLimit(c5)if Framework.IsNetworkGame()then log("ModuleGuiControl: Detect network game. Aborting!")return end;self.UseSpeedLimit=c5==true;if c5 and Game.GameTimeGetFactor(GUI.GetPlayerID())>self.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..self.SpeedLimit)Game.GameTimeSetFactor(GUI.GetPlayerID(),self.SpeedLimit)g_GameSpeed=1 end end;function Lib.UITools.Speed:InitForbidSpeedUp()GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(eq)GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp(eq)if Lib.UITools.Speed.UseSpeedLimit==true then log("ModuleGuiControl: Checking speed limit.")if eq>Lib.UITools.Speed.SpeedLimit then log("ModuleGuiControl: Speed is capped at "..tostring(eq)..".")Game.GameTimeSetFactor(GUI.GetPlayerID(),Lib.UITools.Speed.SpeedLimit)g_GameSpeed=1;Message(Lib.UITools.Speed.Text.Message.NoSpeedUp)end end end end;Lib.Register("module/ui/UITools_Widget")Lib.UITools=Lib.UITools or{}Lib.UITools.Widget={HiddenWidgets={}}function Lib.UITools.Widget:DisplayInterfaceButton(er,es)self.HiddenWidgets[er]=es==true;XGUIEng.ShowWidget(er,es==true and 0 or 1)end;function Lib.UITools.Widget:UpdateHiddenWidgets()for g,h in pairs(self.HiddenWidgets)do XGUIEng.ShowWidget(g,0)end end;function Lib.UITools.Widget:OverrideMissionGoodCounter()StartMissionGoodOrEntityCounter=function(et,eu)local ev="/InGame/Root/Normal/MissionGoodOrEntityCounter/Icon"local ew="/InGame/Root/Normal/MissionGoodOrEntityCounter"if type(et[3])=="string"or et[3]>2 then Lib.UITools.Widget:SetIcon(ev,et,64,et[3])else SetIcon(ev,et)end;g_MissionGoodOrEntityCounterAmountToReach=eu;g_MissionGoodOrEntityCounterIcon=et;XGUIEng.ShowWidget(ew,1)end end;function Lib.UITools.Widget:OverrideUpdateClaimTerritory()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface=GUI_Knight.ClaimTerritoryUpdate;GUI_Knight.ClaimTerritoryUpdate=function()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface()local ca="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory"if Lib.UITools.Widget.HiddenWidgets[ca]==true then XGUIEng.ShowWidget(ca,0)return true end end end;function Lib.UITools.Widget:SetIcon(e4,e5,e6,r)e6=e6 or 64;e5[3]=e5[3]or 0;if r==nil then return SetIcon(e4,e5,e6)end;assert(e6==44 or e6==64 or e6==128)if e6==44 then r=r..".png"end;if e6==64 then r=r.."big.png"end;if e6==128 then r=r.."verybig.png"end;local ex,ey,ez,eA;ex=(e5[1]-1)*e6;ez=(e5[2]-1)*e6;ey=e5[1]*e6;eA=e5[2]*e6;State=1;if XGUIEng.IsButton(e4)==1 then State=7 end;XGUIEng.SetMaterialAlpha(e4,State,255)XGUIEng.SetMaterialTexture(e4,State,r)XGUIEng.SetMaterialUV(e4,State,ex,ez,ey,eA)end;function Lib.UITools.Widget:TooltipNormal(eB,eC,eD)if eB and eB:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eB=XGUIEng.GetStringTableText(eB)end;if eC and eC:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eC=XGUIEng.GetStringTableText(eC)end;eD=eD or""if eD and eD:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eD=XGUIEng.GetStringTableText(eD)end;local eE="/InGame/Root/Normal/TooltipNormal"local eF=XGUIEng.GetWidgetID(eE)local eG=XGUIEng.GetWidgetID(eE.."/FadeIn/Name")local eH=XGUIEng.GetWidgetID(eE.."/FadeIn/Text")local eI=XGUIEng.GetWidgetID(eE.."/FadeIn/BG")local eJ=XGUIEng.GetWidgetID(eE.."/FadeIn")local eK=XGUIEng.GetCurrentWidgetID()local eL=eB and eB or""local eM=eC and eC or""local eN=""if XGUIEng.IsButtonDisabled(eK)==1 and eD then eN=eN.."{cr}{@color:255,32,32,255}"..eD end;XGUIEng.SetText(eG,"{center}"..eL)XGUIEng.SetText(eH,eM..eN)local eO=XGUIEng.GetTextHeight(eH,true)local eP,eQ=XGUIEng.GetWidgetSize(eH)XGUIEng.SetWidgetSize(eH,eP,eO)GUI_Tooltip.ResizeBG(eI,eH)local eR={eI}GUI_Tooltip.SetPosition(eF,eR,eK)GUI_Tooltip.FadeInTooltip(eJ)end;function Lib.UITools.Widget:TooltipCosts(eB,eC,eD,eS,eT)eS=eS or{}local d5={}for f=1,4,1 do d5[f]=eS[f]end;if eB and eB:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eB=XGUIEng.GetStringTableText(eB)end;if eC and eC:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eC=XGUIEng.GetStringTableText(eC)end;if eD and eD:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then eD=XGUIEng.GetStringTableText(eD)end;local eE="/InGame/Root/Normal/TooltipBuy"local eF=XGUIEng.GetWidgetID(eE)local eG=XGUIEng.GetWidgetID(eE.."/FadeIn/Name")local eH=XGUIEng.GetWidgetID(eE.."/FadeIn/Text")local eI=XGUIEng.GetWidgetID(eE.."/FadeIn/BG")local eJ=XGUIEng.GetWidgetID(eE.."/FadeIn")local eU=XGUIEng.GetWidgetID(eE.."/Costs")local eK=XGUIEng.GetCurrentWidgetID()local eL=eB and eB or""local eM=eC and eC or""local eN=""if XGUIEng.IsButtonDisabled(eK)==1 and eD then eN=eN.."{cr}{@color:255,32,32,255}"..eD end;XGUIEng.SetText(eG,"{center}"..eL)XGUIEng.SetText(eH,eM..eN)local eO=XGUIEng.GetTextHeight(eH,true)local eP,eQ=XGUIEng.GetWidgetSize(eH)XGUIEng.SetWidgetSize(eH,eP,eO)GUI_Tooltip.ResizeBG(eI,eH)GUI_Tooltip.SetCosts(eU,d5,eT)local eR={eF,eU,eI}GUI_Tooltip.SetPosition(eF,eR,eK,nil,true)GUI_Tooltip.OrderTooltip(eR,eJ,eU,eK,eI)GUI_Tooltip.FadeInTooltip(eJ)end;Lib.Register("module/ui/UITools_Shortcut")Lib.UITools=Lib.UITools or{}Lib.UITools.Shortcut={HotkeyDescriptions={}}function Lib.UITools.Shortcut:OverrideRegisterHotkey()function g_KeyBindingsOptions:OnShow()if Game~=nil then XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",1)else XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",0)end;if g_KeyBindingsOptions.Descriptions==nil then g_KeyBindingsOptions.Descriptions={}DescRegister("MenuInGame")DescRegister("MenuDiplomacy")DescRegister("MenuProduction")DescRegister("MenuPromotion")DescRegister("MenuWeather")DescRegister("ToggleOutstockInformations")DescRegister("JumpMarketplace")DescRegister("JumpMinimapEvent")DescRegister("BuildingUpgrade")DescRegister("BuildLastPlaced")DescRegister("BuildStreet")DescRegister("BuildTrail")DescRegister("KnockDown")DescRegister("MilitaryAttack")DescRegister("MilitaryStandGround")DescRegister("MilitaryGroupAdd")DescRegister("MilitaryGroupSelect")DescRegister("MilitaryGroupStore")DescRegister("MilitaryToggleUnits")DescRegister("UnitSelect")DescRegister("UnitSelectToggle")DescRegister("UnitSelectSameType")DescRegister("StartChat")DescRegister("StopChat")DescRegister("QuickSave")DescRegister("QuickLoad")DescRegister("TogglePause")DescRegister("RotateBuilding")DescRegister("ExitGame")DescRegister("Screenshot")DescRegister("ResetCamera")DescRegister("CameraMove")DescRegister("CameraMoveMouse")DescRegister("CameraZoom")DescRegister("CameraZoomMouse")DescRegister("CameraRotate")for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h then h[1]=type(h[1])=="table"and Localize(h[1])or h[1]h[2]=type(h[2])=="table"and Localize(h[2])or h[2]table.insert(g_KeyBindingsOptions.Descriptions,1,h)end end end;XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ShortcutList)XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ActionList)for cu,bE in ipairs(g_KeyBindingsOptions.Descriptions)do XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ShortcutList,bE[1])XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ActionList,bE[2])end end end;Lib.Register("module/ui/UITools_Player")Lib.UITools=Lib.UITools or{}Lib.UITools.Player={}function Lib.UITools.Player:SetPlayerPortraitByPrimaryKnight(q)local eb=Logic.GetKnightID(q)local eV="H_NPC_Generic_Trader"if eb~=0 then local dx=Logic.GetEntityType(eb)local eW=Logic.GetEntityTypeName(dx)eV="H"..string.sub(eW,2,8).."_"..string.sub(eW,9)if not Models["Heads_"..eV]then eV="H_NPC_Generic_Trader"end end;g_PlayerPortrait[q]=eV end;function Lib.UITools.Player:SetPlayerPortraitBySettler(q,en)local eX={["U_KnightChivalry"]="H_Knight_Chivalry",["U_KnightHealing"]="H_Knight_Healing",["U_KnightPlunder"]="H_Knight_Plunder",["U_KnightRedPrince"]="H_Knight_RedPrince",["U_KnightSabatta"]="H_Knight_Sabatt",["U_KnightSong"]="H_Knight_Song",["U_KnightTrading"]="H_Knight_Trading",["U_KnightWisdom"]="H_Knight_Wisdom",["U_NPC_Amma_NE"]="H_NPC_Amma",["U_NPC_Castellan_ME"]="H_NPC_Castellan_ME",["U_NPC_Castellan_NA"]="H_NPC_Castellan_NA",["U_NPC_Castellan_NE"]="H_NPC_Castellan_NE",["U_NPC_Castellan_SE"]="H_NPC_Castellan_SE",["U_MilitaryBandit_Ranged_ME"]="H_NPC_Mercenary_ME",["U_MilitaryBandit_Melee_NA"]="H_NPC_Mercenary_NA",["U_MilitaryBandit_Melee_NE"]="H_NPC_Mercenary_NE",["U_MilitaryBandit_Melee_SE"]="H_NPC_Mercenary_SE",["U_NPC_Monk_ME"]="H_NPC_Monk_ME",["U_NPC_Monk_NA"]="H_NPC_Monk_NA",["U_NPC_Monk_NE"]="H_NPC_Monk_NE",["U_NPC_Monk_SE"]="H_NPC_Monk_SE",["U_NPC_Villager01_ME"]="H_NPC_Villager01_ME",["U_NPC_Villager01_NA"]="H_NPC_Villager01_NA",["U_NPC_Villager01_NE"]="H_NPC_Villager01_NE",["U_NPC_Villager01_SE"]="H_NPC_Villager01_SE"}if g_GameExtraNo>0 then eX["U_KnightPraphat"]="H_Knight_Praphat"eX["U_KnightSaraya"]="H_Knight_Saraya"eX["U_KnightKhana"]="H_Knight_Khana"eX["U_MilitaryBandit_Melee_AS"]="H_NPC_Mercenary_AS"eX["U_NPC_Castellan_AS"]="H_NPC_Castellan_AS"eX["U_NPC_Villager_AS"]="H_NPC_Villager_AS"eX["U_NPC_Monk_AS"]="H_NPC_Monk_AS"eX["U_NPC_Monk_Khana"]="H_NPC_Monk_Khana"end;local eV="H_NPC_Generic_Trader"local B=GetID(en)if B~=0 then local cZ=Logic.GetEntityType(B)local eY=Logic.GetEntityTypeName(cZ)eV=eX[eY]or"H_NPC_Generic_Trader"if not eV then eV="H_NPC_Generic_Trader"end end;g_PlayerPortrait[q]=eV end;function Lib.UITools.Player:SetPlayerPortraitByModelName(q,en)if not Models["Heads_"..tostring(en)]then en="H_NPC_Generic_Trader"end;g_PlayerPortrait[q]=en end;Lib.UITools=Lib.UITools or{}Lib.UITools.Name="UITools"Lib.UITools.Global={}Lib.UITools.Local={}CONST_PLAYER_NAMES={}Lib.Require("core/Core")Lib.Require("module/ui/UITools_Player")Lib.Require("module/ui/UITools_Shortcut")Lib.Require("module/ui/UITools_Widget")Lib.Require("module/ui/UITools_Speed")Lib.Require("module/ui/UITools_API")Lib.Register("module/ui/UITools")function Lib.UITools.Global:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Local=nil;Lib.UITools.Player=nil;Lib.UITools.Shortcut=nil;Lib.UITools.Speed=nil;Lib.UITools.Widget=nil end;self.IsInstalled=true end;function Lib.UITools.Global:OnSaveGameLoaded()end;function Lib.UITools.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.UpdateTexturePosition then g_TexturePositions=g_TexturePositions or{}g_TexturePositions[arg[1]]=g_TexturePositions[arg[1]]or{}g_TexturePositions[arg[1]][arg[2]]={arg[3],arg[4],arg[5]}end end;function Lib.UITools.Local:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Shortcut:OverrideRegisterHotkey()Lib.UITools.Widget:OverrideMissionGoodCounter()Lib.UITools.Widget:OverrideUpdateClaimTerritory()Lib.UITools.Speed:InitForbidSpeedUp()self:PostTexturePositionsToGlobal()self:OverrideAfterBuildingPlacement()Lib.UITools.Global=nil end;self.IsInstalled=true end;function Lib.UITools.Local:OnSaveGameLoaded()Lib.UITools.Widget:UpdateHiddenWidgets()end;function Lib.UITools.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UITools.Local:OverrideAfterBuildingPlacement()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools=GameCallback_GUI_AfterBuildingPlacement;GameCallback_GUI_AfterBuildingPlacement=function()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools()local I,J=GUI.Debug_GetMapPositionUnderMouse()RequestHiResJob(function()local eZ={Logic.GetPlayerEntitiesInArea(GUI.GetPlayerID(),0,I,J,50,16)}for f=2,eZ[1]+1 do if eZ[f]and eZ[f]~=0 and Logic.IsBuilding(eZ[f])==1 and Logic.IsConstructionComplete(eZ[f])==0 then SendReportToGlobal(Report.BuildingPlaced,eZ[f],Logic.EntityGetPlayer(eZ[f]))SendReport(Report.BuildingPlaced,eZ[f],Logic.EntityGetPlayer(eZ[f]))end end end,I,J)end end;function Lib.UITools.Local:PostTexturePositionsToGlobal()RequestJob(function()if Logic.GetTime()>1 then for g,h in pairs(g_TexturePositions)do for e_,f0 in pairs(h)do local I,J,K=f0[1]or 1,f0[2]or 1,f0[3]or 0;SendReportToGlobal(Report.UpdateTexturePosition,g,e_,I,J,K)end end;return true end end)end;RegisterModule(Lib.UITools.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIEffects_API")function ActivateColoredScreen(q,f1,f2,f3,f4)ActivateImageScreen(q,"",f1 or 0,f2 or 0,f3 or 0,f4 or 255)end;API.ActivateColoredScreen=ActivateColoredScreen;function DeactivateColoredScreen(q)DeactivateImageScreen(q)end;API.DeactivateColoredScreen=DeactivateColoredScreen;function ActivateImageScreen(q,f5,f1,f2,f3,f4)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal([[Lib.UIEffects.Local:InterfaceActivateImageBackground(%d, "%s", %d, %d, %d, %d)]],q,f5,f1~=nil and f1 or 255,f2~=nil and f2 or 255,f3~=nil and f3 or 255,f4~=nil and f4 or 255)return end;Lib.UIEffects.Local:InterfaceActivateImageBackground(q,f5,f1,f2,f3,f4)end;API.ActivateImageScreen=ActivateImageScreen;function DeactivateImageScreen(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateImageBackground(%d)",q)return end;Lib.UIEffects.Local:InterfaceDeactivateImageBackground(q)end;API.DeactivateImageScreen=DeactivateImageScreen;function ActivateNormalInterface(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceActivateNormalInterface(%d)",q)return end;Lib.UIEffects.Local:InterfaceActivateNormalInterface(q)end;API.ActivateNormalInterface=ActivateNormalInterface;function DeactivateNormalInterface(q)assert(q and q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(%d)",q)return end;Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(q)end;API.DeactivateNormalInterface=DeactivateNormalInterface;function StartCinematicEvent(r,q)assert(IsLocalScript()==false)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}local al=Lib.UIEffects.Global:ActivateCinematicEvent(q)Lib.UIEffects.CinematicEvents[q][r]=al end;API.StartCinematicEvent=StartCinematicEvent;function FinishCinematicEvent(r,q)assert(IsLocalScript()==false)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}if Lib.UIEffects.CinematicEvents[q][r]then Lib.UIEffects.Global:ConcludeCinematicEvent(Lib.UIEffects.CinematicEvents[q][r],q)end end;API.FinishCinematicEvent=FinishCinematicEvent;function GetCinematicEvent(f6,q)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}if type(f6)=="number"then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(f6)end;return Lib.UIEffects.Global:GetCinematicEventStatus(f6)end;if Lib.UIEffects.CinematicEvents[q][f6]then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[q][f6])end;return Lib.UIEffects.Global:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[q][f6])end;return CinematicEventState.NotTriggered end;API.GetCinematicEvent=GetCinematicEvent;function IsCinematicEventActive(q)assert(q and q>=1 and q<=8)Lib.UIEffects.CinematicEvents[q]=Lib.UIEffects.CinematicEvents[q]or{}for g,h in pairs(Lib.UIEffects.CinematicEvents[q])do if GetCinematicEvent(g,q)==CinematicEventState.Active then return true end end;return false end;API.IsCinematicEventActive=IsCinematicEventActive;function StartTypewriter(f7)if Framework.IsNetworkGame()~=true then f7.PlayerID=f7.PlayerID or 1 end;if f7.PlayerID==nil or(f7.PlayerID<1 or f7.PlayerID>8)then return end;f7.Text=Localize(f7.Text or"")f7.Callback=f7.Callback or function()end;f7.CharSpeed=f7.CharSpeed or 1;f7.Waittime=(f7.Waittime or 8)*10;f7.TargetEntity=GetID(f7.TargetEntity or 0)f7.Image=f7.Image or""f7.Color=f7.Color or{R=f7.Image and f7.Image~=""and 255 or 0,G=f7.Image and f7.Image~=""and 255 or 0,B=f7.Image and f7.Image~=""and 255 or 0,A=255}if f7.Opacity and f7.Opacity>=0 and f7.Opacity then f7.Color.A=math.floor(255*f7.Opacity+0.5)end;f7.Delay=15;f7.Index=0;return Lib.UIEffects.Global:StartTypewriter(f7)end;API.StartTypewriter=StartTypewriter;Lib.Register("module/settings/Camera_Text")Lib.Camera=Lib.Camera or{}Lib.Camera.Text={Shortcut={Hotkey={de="STRG + UMSCHALT + K",en="CTRL + SHIFT + K",fr="CTRL + SHIFT + K"},Description={de="Alternativen Zoom ein/aus",en="Alternative zoom on/off",fr="Zoom alternatif On/Off"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Camera_API")function SetRenderDistance(f8)if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:SetRenderDistance(%f)]],f8)return end;Lib.Camera.Local:SetRenderDistance(f8)end;function ResetRenderDistance()if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:ResetRenderDistance()]])return end;Lib.Camera.Local:ResetRenderDistance()end;function ActivateBorderScroll(q)q=q or-1;assert(q==-1 or q>=1 and q<=8)if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:ActivateBorderScroll(%d)",q)return end;Lib.Camera.Local:ActivateBorderScroll(q)end;API.ActivateBorderScroll=ActivateBorderScroll;function DeactivateBorderScroll(a9,q)q=q or-1;assert(q==-1 or q>=1 and q<=8)local f9;if a9 then f9=GetID(a9)end;if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:DeactivateBorderScroll(%d, %d)",q,f9 or 0)return end;Lib.Camera.Local:DeactivateBorderScroll(q,f9)end;API.DeactivateBorderScroll=DeactivateBorderScroll;function AllowExtendedZoom(c5,q)q=q or-1;if not GUI then ExecuteLocal([[API.AllowExtendedZoom(%s, %d)]],tostring(c5==true),q)return end;if q~=-1 and GUI.GetPlayerID()~=q then return end;Lib.Camera.Local.ExtendedZoomAllowed=c5==true;if c5==true then Lib.Camera.Local:DescribeExtendedZoomShortcut()else Lib.Camera.Local:RemoveExtendedZoomShortcut()Lib.Camera.Local:DeactivateExtendedZoom(q)end end;API.AllowExtendedZoom=AllowExtendedZoom;function FocusCameraOnKnight(q,fa,fb)FocusCameraOnEntity(Logic.GetKnightID(q),fa,fb)end;API.FocusCameraOnKnight=FocusCameraOnKnight;function FocusCameraOnEntity(k,fa,fb)if not GUI then local fc=type(k)~="string"and k or"'"..k.."'"ExecuteLocal([[API.FocusCameraOnEntity(%s, %f, %f)]],fc,fa,fb)return end;assert(type(fa)=="number","Rotation is wrong!")assert(type(fb)=="number","Zoom factor is wrong!")assert(IsExisting(k),"Entity does not exist!")Lib.Camera.Local:SetCameraToEntity(k,fa,fb)end;API.FocusCameraOnEntity=FocusCameraOnEntity;Lib.Camera=Lib.Camera or{}Lib.Camera.Name="Camera"Lib.Camera.Global={}Lib.Camera.Local={BorderScrollDeactivated=false,ExtendedZoomHotKeyID=0,ExtendedZoomAllowed=true}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("core/Core")Lib.Require("module/settings/Camera_API")Lib.Require("module/settings/Camera_Text")Lib.Register("module/settings/Camera")function Lib.Camera.Global:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")Lib.Camera.Local=nil end;self.IsInstalled=true end;function Lib.Camera.Global:OnSaveGameLoaded()end;function Lib.Camera.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Camera.Local:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")self:ResetRenderDistance()self:DescribeExtendedZoomShortcut()self:InitExtendedZoomHotkey()Lib.Camera.Global=nil end;self.IsInstalled=true end;function Lib.Camera.Local:OnSaveGameLoaded()end;function Lib.Camera.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.SaveGameLoaded then if self.ExtendedZoomActive then self:ActivateExtendedZoom(GUI.GetPlayerID())end;self:InitExtendedZoomHotkey()self:ResetRenderDistance()end end;function Lib.Camera.Local:SetRenderDistance(f8)Camera.Cutscene_SetFarClipPlane(f8,f8)Display.SetFarClipPlaneMinAndMax(f8,f8)end;function Lib.Camera.Local:ResetRenderDistance()Camera.Cutscene_SetFarClipPlane(CONST_FARCLIPPLANE)Display.SetFarClipPlaneMinAndMax(CONST_FARCLIPPLANE_DEFAULT,CONST_FARCLIPPLANE_DEFAULT)end;function Lib.Camera.Local:DeactivateBorderScroll(q,fd)if q~=-1 and q~=GUI.GetPlayerID()or self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=true;if fd then Camera.RTS_FollowEntity(fd)end;Camera.RTS_SetBorderScrollSize(0)Camera.RTS_SetZoomWheelSpeed(0)SendReportToGlobal(Report.BorderScrollLocked,q,fd or 0)SendReport(Report.BorderScrollLocked,q,fd or 0)end;function Lib.Camera.Local:ActivateBorderScroll(q)if q~=-1 and q~=GUI.GetPlayerID()or not self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=false;Camera.RTS_FollowEntity(0)Camera.RTS_SetBorderScrollSize(3.0)Camera.RTS_SetZoomWheelSpeed(4.2)SendReportToGlobal(Report.BorderScrollReset,q)SendReport(Report.BorderScrollReset,q)end;function Lib.Camera.Local:SetCameraToEntity(k,fa,fb)local aF=GetPosition(k)local fe=fa or-45;local ff=fb or 0.5;Camera.RTS_SetLookAtPosition(aF.X,aF.Y)Camera.RTS_SetRotationAngle(fe)Camera.RTS_SetZoomFactor(ff)end;function Lib.Camera.Local:DescribeExtendedZoomShortcut()self:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID==0 then self.ExtendedZoomHotKeyID=AddShortcutDescription(Localize(Lib.Camera.Text.Shortcut.Hotkey),Localize(Lib.Camera.Text.Shortcut.Description))end end;function Lib.Camera.Local:RemoveExtendedZoomShortcut()if self.ExtendedZoomHotKeyID~=0 then RemoveShortcutDescription(self.ExtendedZoomHotKeyID)self.ExtendedZoomHotKeyID=0 end end;function Lib.Camera.Local:InitExtendedZoomHotkey()Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.K,"Lib.Camera.Local:ToggleExtendedZoom(GUI.GetPlayerID())",2)end;function Lib.Camera.Local:ToggleExtendedZoom(q)if self.ExtendedZoomAllowed then if self.ExtendedZoomActive then self:DeactivateExtendedZoom(q)else self:ActivateExtendedZoom(q)end end end;function Lib.Camera.Local:ActivateExtendedZoom(q)if q~=-1 and q~=GUI.GetPlayerID()then return end;if not self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomDeactivated,q)end;self.ExtendedZoomActive=true;Camera.RTS_SetZoomFactorMax(0.870001)Camera.RTS_SetZoomFactor(0.870000)Camera.RTS_SetZoomFactorMin(0.099999)SendReportToGlobal(Report.ExtendedZoomDeactivated,q)end;function Lib.Camera.Local:DeactivateExtendedZoom(q)if q~=-1 and q~=GUI.GetPlayerID()then return end;if self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomActivated,q)end;self.ExtendedZoomActive=false;Camera.RTS_SetZoomFactor(0.500000)Camera.RTS_SetZoomFactorMax(0.500001)Camera.RTS_SetZoomFactorMin(0.099999)end;RegisterModule(Lib.Camera.Name)Lib.UIEffects=Lib.UIEffects or{}Lib.UIEffects.Name="UIEffects"Lib.UIEffects.CinematicEvents={}Lib.UIEffects.Global={CinematicEventID=0,CinematicEventStatus={},CinematicEventQueue={},TypewriterEventData={},TypewriterEventCounter=0}Lib.UIEffects.Local={CinematicEventStatus={},ChatOptionsWasShown=false,MessageLogWasShown=false,PauseScreenShown=false,NormalModeHidden=false}CinematicEventTypes={}CinematicEventState={NotTriggered=0,Active=1,Concluded=2}Lib.Require("core/Core")Lib.Require("module/settings/Camera")Lib.Require("module/ui/UIEffects_API")Lib.Register("module/ui/UIEffects")function Lib.UIEffects.Global:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}self.CinematicEventQueue[f]={}end;RequestHiResJob(function()Lib.UIEffects.Global:ControlTypewriter()end)Lib.UIEffects.Local=nil end;self.IsInstalled=true end;function Lib.UIEffects.Global:OnSaveGameLoaded()end;function Lib.UIEffects.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1;DeactivateImageScreen(arg[2])ActivateNormalInterface(arg[2])elseif aD==Report.CinematicConcluded then if self.CinematicEventStatus[arg[2]][arg[1]]then self.CinematicEventStatus[arg[2]][arg[1]]=2 end;if#self.CinematicEventQueue[arg[2]]>0 then ActivateImageScreen(arg[2],"",0,0,0,255)DeactivateNormalInterface(arg[2])end end end;function Lib.UIEffects.Global:PushCinematicEventToQueue(q,i,r,f7)table.insert(self.CinematicEventQueue[q],{i,r,f7})end;function Lib.UIEffects.Global:LookUpCinematicInQueue(q)if#self.CinematicEventQueue[q]>0 then return self.CinematicEventQueue[q][1]end end;function Lib.UIEffects.Global:PopCinematicEventFromQueue(q)if#self.CinematicEventQueue[q]>0 then return table.remove(self.CinematicEventQueue[q],1)end end;function Lib.UIEffects.Global:GetNewCinematicEventID()self.CinematicEventID=self.CinematicEventID+1;return self.CinematicEventID end;function Lib.UIEffects.Global:GetCinematicEventStatus(fg)for f=1,8 do if self.CinematicEventStatus[f][fg]then return self.CinematicEventStatus[f][fg]end end;return 0 end;function Lib.UIEffects.Global:ActivateCinematicEvent(q)local al=self:GetNewCinematicEventID()SendReport(Report.CinematicActivated,al,q)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicActivated, %d, %d);
          if GUI.GetPlayerID() == %d then
            Lib.UIEffects.Local.SavingWasDisabled = Lib.Core.Save.SavingDisabled == true;
            DisableSaving(true);
          end]],al,q,q))return al end;function Lib.UIEffects.Global:ConcludeCinematicEvent(aD,q)SendReport(Report.CinematicConcluded,aD,q)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicConcluded, %d, %d);
          if GUI.GetPlayerID() == %d then
            if not Lib.UIEffects.Local.SavingWasDisabled then
                DisableSaving(false);
            end
            Lib.UIEffects.Local.SavingWasDisabled = false;
          end]],aD,q,q))end;function Lib.UIEffects.Global:StartTypewriter(f7)self.TypewriterEventCounter=self.TypewriterEventCounter+1;local fh="CinematicEvent_Typewriter"..self.TypewriterEventCounter;f7.Name=fh;if not self.LoadscreenClosed or IsCinematicEventActive(f7.PlayerID)then Lib.UIEffects.Global:PushCinematicEventToQueue(f7.PlayerID,CinematicEventTypes.Typewriter,fh,f7)return f7.Name end;return self:PlayTypewriter(f7)end;function Lib.UIEffects.Global:PlayTypewriter(f7)local al=StartCinematicEvent(f7.Name,f7.PlayerID)f7.ID=al;f7.TextTokens=self:TokenizeText(f7)self.TypewriterEventData[f7.PlayerID]=f7;ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            ActivateImageScreen(GUI.GetPlayerID(), "%s", %d, %d, %d, %d)
            DeactivateNormalInterface(GUI.GetPlayerID())
            DeactivateBorderScroll(GUI.GetPlayerID(), %d)
            Input.CutsceneMode()
            GUI.ClearNotes()
        end
        ]],f7.PlayerID,f7.Image,f7.Color.R or 0,f7.Color.G or 0,f7.Color.B or 0,f7.Color.A or 255,f7.TargetEntity)SendReport(Report.TypewriterStarted,f7.PlayerID,f7.Name)SendReportToLocal(Report.TypewriterStarted,f7.PlayerID,f7.Name)return f7.Name end;function Lib.UIEffects.Global:FinishTypewriter(q)if self.TypewriterEventData[q]then local fi=table.copy(self.TypewriterEventData[q])local fj=self.TypewriterEventData[q].PlayerID;ExecuteLocal([[
            if GUI.GetPlayerID() == %d then
                ResetRenderDistance()
                DeactivateImageScreen(GUI.GetPlayerID())
                ActivateNormalInterface(GUI.GetPlayerID())
                ActivateBorderScroll(GUI.GetPlayerID())
                if ModuleGuiControl then
                    Lib.UITools.Widget:UpdateHiddenWidgets()
                end
                Input.GameMode()
                GUI.ClearNotes()
            end
        ]],q)SendReport(Report.TypewriterEnded,fj,fi.Name)SendReportToLocal(Report.TypewriterEnded,fj,fi.Name)self.TypewriterEventData[q]:Callback()FinishCinematicEvent(fi.Name,fj)self.TypewriterEventData[q]=nil end end;function Lib.UIEffects.Global:TokenizeText(f7)local fk={}local fl={}local cb=ConvertPlaceholders(Localize(f7.Text))cb=cb:gsub("%s+"," ")while true do local cm,cn=cb:find("{")local co,cp=cb:find("}")if not cm or not co then table.insert(fl,cb)break end;if cm>1 then table.insert(fl,cb:sub(1,cm-1))end;table.insert(fl,cb:sub(cm,cp))cb=cb:sub(cp+1)end;local fm=false;for f=1,#fl,1 do if fl[f]:find("{")then local cu=#fk;if fm then fk[cu]=fk[cu]..fl[f]else table.insert(fk,cu+1,fl[f])end;fm=true else local cu=1;while cu<=#fl[f]do if string.byte(fl[f]:sub(cu,cu))==195 then table.insert(fk,fl[f]:sub(cu,cu+1))cu=cu+1 else table.insert(fk,fl[f]:sub(cu,cu))end;cu=cu+1 end;fm=false end end;return fk end;function Lib.UIEffects.Global:ControlTypewriter()for f=1,8 do if self.LoadscreenClosed and not IsCinematicEventActive(f)then local fn=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fn and fn[1]==CinematicEventTypes.Typewriter then local bd=Lib.UIEffects.Global:PopCinematicEventFromQueue(f)self:PlayTypewriter(bd[3])end end end;for g,h in pairs(self.TypewriterEventData)do if self.TypewriterEventData[g].Delay>0 then self.TypewriterEventData[g].Delay=self.TypewriterEventData[g].Delay-1;ExecuteLocal([[if GUI.GetPlayerID() == %d then GUI.ClearNotes() end]],self.TypewriterEventData[g].PlayerID)end;if self.TypewriterEventData[g].Delay==0 then self.TypewriterEventData[g].Index=h.Index+h.CharSpeed;if h.Index>#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Index=#self.TypewriterEventData[g].TextTokens end;local cu=math.floor(h.Index+0.5)local cb=""for f=1,cu,1 do cb=cb..self.TypewriterEventData[g].TextTokens[f]end;ExecuteLocal([[
                if GUI.GetPlayerID() == %d then
                    GUI.ClearNotes()
                    GUI.AddNote("%s")
                end
                ]],self.TypewriterEventData[g].PlayerID,cb)if cu==#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Waittime=h.Waittime-1;if h.Waittime<=0 then self:FinishTypewriter(g)end end end end end;function Lib.UIEffects.Local:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}end;self:OverrideInterfaceUpdateForCinematicMode()self:OverrideInterfaceThroneroomForCinematicMode()Lib.UIEffects.Global=nil end;self.IsInstalled=true end;function Lib.UIEffects.Local:OnSaveGameLoaded()end;function Lib.UIEffects.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1 elseif aD==Report.CinematicConcluded then for f=1,8 do if self.CinematicEventStatus[f][arg[1]]then self.CinematicEventStatus[f][arg[1]]=2 end end end end;function Lib.UIEffects.Local:GetCinematicEventStatus(fg)for f=1,8 do if self.CinematicEventStatus[f][fg]then return self.CinematicEventStatus[f][fg]end end;return 0 end;function Lib.UIEffects.Local:OverrideInterfaceUpdateForCinematicMode()GameCallback_GameSpeedChanged_Orig_UIEffects=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(eq)if not Lib.UIEffects.Local.PauseScreenShown then GameCallback_GameSpeedChanged_Orig_UIEffects(eq)end end;MissionTimerUpdate_Orig_UIEffects=MissionTimerUpdate;MissionTimerUpdate=function()MissionTimerUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)end end;MissionGoodOrEntityCounterUpdate_Orig_UIEffects=MissionGoodOrEntityCounterUpdate;MissionGoodOrEntityCounterUpdate=function()MissionGoodOrEntityCounterUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)end end;MerchantButtonsUpdater_Orig_UIEffects=GUI_Merchant.ButtonsUpdater;GUI_Merchant.ButtonsUpdater=function()MerchantButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)end end;if GUI_Tradepost then TradepostButtonsUpdater_Orig_UIEffects=GUI_Tradepost.ButtonsUpdater;GUI_Tradepost.ButtonsUpdater=function()TradepostButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end end end end;function Lib.UIEffects.Local:OverrideInterfaceThroneroomForCinematicMode()GameCallback_Camera_StartButtonPressed=function(q)end;OnStartButtonPressed=function()GameCallback_Camera_StartButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_BackButtonPressed=function(q)end;OnBackButtonPressed=function()GameCallback_Camera_BackButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_SkipButtonPressed=function(q)end;OnSkipButtonPressed=function()GameCallback_Camera_SkipButtonPressed(GUI.GetPlayerID())end;GameCallback_Camera_ThroneRoomLeftClick=function(q)end;ThroneRoomLeftClick=function()GameCallback_Camera_ThroneRoomLeftClick(GUI.GetPlayerID())end;GameCallback_Camera_ThroneroomCameraControl=function(q)end;ThroneRoomCameraControl=function()GameCallback_Camera_ThroneroomCameraControl(GUI.GetPlayerID())end end;function Lib.UIEffects.Local:InterfaceActivateImageBackground(q,fo,fp,_G,fq,fr)if q~=GUI.GetPlayerID()or self.PauseScreenShown then return end;self.PauseScreenShown=true;XGUIEng.PushPage("/InGame/Root/Normal/PauseScreen",false)XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",1)if fo and fo~=""then local fs={GUI.GetScreenSize()}local ex,ez,ey,eA=0,0,1,1;if fs[1]/fs[2]<1.6 then ex=ex+ex/0.125;ey=ey-ey*0.125 end;XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,fo)XGUIEng.SetMaterialUV("/InGame/Root/Normal/PauseScreen",0,ex,ez,ey,eA)end;XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,fp,_G,fq,fr)SendReportToGlobal(Report.ImageScreenShown,q)SendReport(Report.ImageScreenShown,q)end;function Lib.UIEffects.Local:InterfaceDeactivateImageBackground(q)if q~=GUI.GetPlayerID()or not self.PauseScreenShown then return end;self.PauseScreenShown=false;XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",0)XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,"")XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,40,40,40,180)XGUIEng.PopPage()SendReportToGlobal(Report.ImageScreenHidden,q)SendReport(Report.ImageScreenHidden,q)end;function Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(q)if GUI.GetPlayerID()~=q or self.NormalModeHidden then return end;self.NormalModeHidden=true;XGUIEng.PushPage("/InGame/Root/Normal/NotesWindow",false)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",0)XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)HideOtherMenus()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/AlignTopLeft/GameClock")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClockWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/ChatOptions/Background")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)self.ChatOptionsWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/MessageLog/Name")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)self.MessageLogWasShown=true end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end;SendReportToGlobal(Report.GameInterfaceHidden,GUI.GetPlayerID())SendReport(Report.GameInterfaceHidden,GUI.GetPlayerID())end;function Lib.UIEffects.Local:InterfaceActivateNormalInterface(q)if GUI.GetPlayerID()~=q or not self.NormalModeHidden then return end;self.NormalModeHidden=false;XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",1)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",1)XGUIEng.PopPage()if g_MissionTimerEndTime then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",1)end;if g_MissionGoodOrEntityCounterAmountToReach then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",1)end;if self.GameClockWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClockWasShown=false end;if self.ChatOptionsWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.ChatOptionsWasShown=false end;if self.MessageLogWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)self.MessageLogWasShown=false end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",1)end;SendReportToGlobal(Report.GameInterfaceShown,GUI.GetPlayerID())SendReport(Report.GameInterfaceShown,GUI.GetPlayerID())end;RegisterModule(Lib.UIEffects.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_API")function AddBuildingButtonAtPosition(ft,fu,fv,fw,fx)return Lib.UIBuilding.Local:AddButtonBinding(0,ft,fu,fv,fw,fx)end;API.AddBuildingButtonAtPosition=AddBuildingButtonAtPosition;function AddBuildingButton(fv,fw,fx)return AddBuildingButtonAtPosition(nil,nil,fv,fw,fx)end;API.AddBuildingButton=AddBuildingButton;function AddBuildingButtonByTypeAtPosition(i,ft,fu,fv,fw,fx)return Lib.UIBuilding.Local:AddButtonBinding(i,ft,fu,fv,fw,fx)end;API.AddBuildingButtonByTypeAtPosition=AddBuildingButtonByTypeAtPosition;function AddBuildingButtonByType(i,fv,fw,fx)return AddBuildingButtonByTypeAtPosition(i,nil,nil,fv,fw,fx)end;API.AddBuildingButtonByType=AddBuildingButtonByType;function AddBuildingButtonByEntityAtPosition(bB,ft,fu,fv,fw,fx)return Lib.UIBuilding.Local:AddButtonBinding(bB,ft,fu,fv,fw,fx)end;API.AddBuildingButtonByEntityAtPosition=AddBuildingButtonByEntityAtPosition;function AddBuildingButtonByEntity(bB,fv,fw,fx)return AddBuildingButtonByEntityAtPosition(bB,nil,nil,fv,fw,fx)end;API.AddBuildingButtonByEntity=AddBuildingButtonByEntity;function DropBuildingButton(aD)Lib.UIBuilding.Local:RemoveButtonBinding(0,aD)end;API.DropBuildingButton=DropBuildingButton;function DropBuildingButtonFromType(i,aD)Lib.UIBuilding.Local:RemoveButtonBinding(i,aD)end;API.DropBuildingButtonFromType=DropBuildingButtonFromType;function DropBuildingButtonFromEntity(bB,aD)Lib.UIBuilding.Local:RemoveButtonBinding(bB,aD)end;API.DropBuildingButtonFromEntity=DropBuildingButtonFromEntity;Lib.UIBuilding=Lib.UIBuilding or{}Lib.UIBuilding.Name="UIBuilding"Lib.UIBuilding.CinematicEvents={}Lib.UIBuilding.Global={}Lib.UIBuilding.Local={BuildingButtons={BindingCounter=0,Bindings={},Configuration={["BuyAmmunitionCart"]={TypeExclusion="^B_.*StoreHouse",OriginalPosition=nil,Bind=nil},["BuyBattallion"]={TypeExclusion="^B_[CB]a[sr][tr][la][ec]",OriginalPosition=nil,Bind=nil},["PlaceField"]={TypeExclusion="^B_.*[BFH][aei][erv][kme]",OriginalPosition=nil,Bind=nil},["StartFestival"]={TypeExclusion="^B_Marketplace",OriginalPosition=nil,Bind=nil},["StartTheatrePlay"]={TypeExclusion="^B_Theatre",OriginalPosition=nil,Bind=nil},["UpgradeTurret"]={TypeExclusion="^B_WallTurret",OriginalPosition=nil,Bind=nil},["BuyBatteringRamCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuyCatapultCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuySiegeTowerCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil}}}}Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding_API")Lib.Register("module/ui/UIBuilding")function Lib.UIBuilding.Global:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")end;self.IsInstalled=true end;function Lib.UIBuilding.Global:OnSaveGameLoaded()end;function Lib.UIBuilding.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.StartUpgradeClicked then SendReportToLocal(aD,unpack(arg))elseif aD==Report.CancelUpgradeClicked then SendReportToLocal(aD,unpack(arg))elseif aD==Report.FestivalClicked then SendReportToLocal(aD,unpack(arg))elseif aD==Report.SermonClicked then SendReportToLocal(aD,unpack(arg))elseif aD==Report.TheatrePlayClicked then SendReportToLocal(aD,unpack(arg))end end;function Lib.UIBuilding.Local:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self:InitBackupPositions()self:OverrideOnSelectionChanged()self:OverrideBuyAmmunitionCart()self:OverrideBuyBattalion()self:OverrideBuySiegeEngineCart()self:OverridePlaceField()self:OverrideStartFestival()self:OverrideStartTheatrePlay()self:OverrideUpgradeTurret()self:OverrideUpgradeBuilding()self:OverrideStartSermon()end;self.IsInstalled=true end;function Lib.UIBuilding.Local:OnSaveGameLoaded()end;function Lib.UIBuilding.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UIBuilding.Local:OverrideOnSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.UIBuilding.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.UIBuilding.Local:UnbindButtons()Lib.UIBuilding.Local:BindButtons(GUI.GetSelectedEntity())end end;function Lib.UIBuilding.Local:OverrideBuyAmmunitionCart()self.Orig_BuyAmmunitionCartClicked=GUI_BuildingButtons.BuyAmmunitionCartClicked;GUI_BuildingButtons.BuyAmmunitionCartClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartClicked()end;dm.Action(fy,B)end;Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate=GUI_BuildingButtons.BuyAmmunitionCartUpdate;GUI_BuildingButtons.BuyAmmunitionCartUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then SetIcon(fy,{10,4})XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideBuyBattalion()self.Orig_BuyBattalionClicked=GUI_BuildingButtons.BuyBattalionClicked;GUI_BuildingButtons.BuyBattalionClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_BuyBattalionClicked()end;dm.Action(fy,B)end;self.Orig_BuyBattalionMouseOver=GUI_BuildingButtons.BuyBattalionMouseOver;GUI_BuildingButtons.BuyBattalionMouseOver=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm;if Lib.UIBuilding.Local.BuildingButtons.Configuration[db]then dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind end;if not dm then return Lib.UIBuilding.Local.Orig_BuyBattalionMouseOver()end;dm.Tooltip(fy,B)end;self.Orig_BuyBattalionUpdate=GUI_BuildingButtons.BuyBattalionUpdate;GUI_BuildingButtons.BuyBattalionUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_BuyBattalionUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverridePlaceField()self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_PlaceFieldClicked()end;dm.Action(fy,B)end;self.Orig_PlaceFieldMouseOver=GUI_BuildingButtons.PlaceFieldMouseOver;GUI_BuildingButtons.PlaceFieldMouseOver=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_PlaceFieldMouseOver()end;dm.Tooltip(fy,B)end;self.Orig_PlaceFieldUpdate=GUI_BuildingButtons.PlaceFieldUpdate;GUI_BuildingButtons.PlaceFieldUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_PlaceFieldUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideStartFestival()self.Orig_StartKnightsPromotionCelebration=StartKnightsPromotionCelebration;StartKnightsPromotionCelebration=function(q,fz,fA)Lib.UIBuilding.Local.Orig_StartKnightsPromotionCelebration(q,fz,fA)SendReportToGlobal(Report.FestivalClicked,q,1)end;GUI_BuildingButtons.StartFestivalClicked=function(fB)local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then local n=GUI.GetPlayerID()local d5={Logic.GetFestivalCost(n,fB)}local fC,d6=AreCostsAffordable(d5)if B~=Logic.GetMarketplace(n)then return end;if fC==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartFestival(n,fB)StartEventMusic(MusicSystem.EventFestivalMusic,n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightSong)GUI.AddBuff(Buffs.Buff_Festival)SendReportToGlobal(Report.FestivalClicked,n,0)else Message(d6)end;return end;dm.Action(fy,B)end;self.Orig_StartFestivalMouseOver=GUI_BuildingButtons.StartFestivalMouseOver;GUI_BuildingButtons.StartFestivalMouseOver=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_StartFestivalMouseOver()end;dm.Tooltip(fy,B)end;self.Orig_StartFestivalUpdate=GUI_BuildingButtons.StartFestivalUpdate;GUI_BuildingButtons.StartFestivalUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then SetIcon(fy,{4,15})XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_StartFestivalUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideStartTheatrePlay()GUI_BuildingButtons.StartTheatrePlayClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then local n=GUI.GetPlayerID()local fD=Logic.GetGoodTypeOnOutStockByIndex(B,0)local dr=Logic.GetMaxAmountOnStock(B)local d5={fD,dr}local fC,d6=AreCostsAffordable(d5)if Logic.CanStartTheatrePlay(B)==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartTheatrePlay(B)SendReportToGlobal(Report.TheatrePlayClicked,n)elseif fC==false then Message(d6)end;return end;dm.Action(fy,B)end;self.Orig_StartTheatrePlayMouseOver=GUI_BuildingButtons.StartTheatrePlayMouseOver;GUI_BuildingButtons.StartTheatrePlayMouseOver=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_StartTheatrePlayMouseOver()end;dm.Tooltip(fy,B)end;self.Orig_StartTheatrePlayUpdate=GUI_BuildingButtons.StartTheatrePlayUpdate;GUI_BuildingButtons.StartTheatrePlayUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then SetIcon(fy,{16,2})XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_StartTheatrePlayUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeTurret()self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_UpgradeTurretClicked()end;dm.Action(fy,B)end;self.Orig_UpgradeTurretMouseOver=GUI_BuildingButtons.UpgradeTurretMouseOver;GUI_BuildingButtons.UpgradeTurretMouseOver=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then return Lib.UIBuilding.Local.Orig_UpgradeTurretMouseOver()end;dm.Tooltip(fy,B)end;self.Orig_UpgradeTurretUpdate=GUI_BuildingButtons.UpgradeTurretUpdate;GUI_BuildingButtons.UpgradeTurretUpdate=function()local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind;if not dm then XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_UpgradeTurretUpdate()end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideBuySiegeEngineCart()self.Orig_BuySiegeEngineCartClicked=GUI_BuildingButtons.BuySiegeEngineCartClicked;GUI_BuildingButtons.BuySiegeEngineCartClicked=function(fE)local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm;if db=="BuyCatapultCart"or db=="BuySiegeTowerCart"or db=="BuyBatteringRamCart"then dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind end;if not dm then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartClicked(fE)end;dm.Action(fy,B)end;self.Orig_BuySiegeEngineCartMouseOver=GUI_BuildingButtons.BuySiegeEngineCartMouseOver;GUI_BuildingButtons.BuySiegeEngineCartMouseOver=function(fE,fF)local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm;if db=="BuyCatapultCart"or db=="BuySiegeTowerCart"or db=="BuyBatteringRamCart"then dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind end;if not dm then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartMouseOver(fE,fF)end;dm.Tooltip(fy,B)end;self.Orig_BuySiegeEngineCartUpdate=GUI_BuildingButtons.BuySiegeEngineCartUpdate;GUI_BuildingButtons.BuySiegeEngineCartUpdate=function(fE)local fy=XGUIEng.GetCurrentWidgetID()local db=XGUIEng.GetWidgetNameByID(fy)local B=GUI.GetSelectedEntity()local dm;if db=="BuyCatapultCart"or db=="BuySiegeTowerCart"or db=="BuyBatteringRamCart"then dm=Lib.UIBuilding.Local.BuildingButtons.Configuration[db].Bind end;if not dm then if db=="BuyBatteringRamCart"then SetIcon(fy,{9,2})elseif db=="BuySiegeTowerCart"then SetIcon(fy,{9,3})elseif db=="BuyCatapultCart"then SetIcon(fy,{9,1})end;XGUIEng.ShowWidget(fy,1)XGUIEng.DisableButton(fy,0)return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartUpdate(fE)end;dm.Update(fy,B)end end;function Lib.UIBuilding.Local:OverrideUpgradeBuilding()GUI_BuildingButtons.UpgradeClicked=function()local fy=XGUIEng.GetCurrentWidgetID()local B=GUI.GetSelectedEntity()if Logic.CanCancelUpgradeBuilding(B)then Sound.FXPlay2DSound("ui\\menu_click")GUI.CancelBuildingUpgrade(B)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/BuildingButtons",1)SendReportToGlobal(Report.CancelUpgradeClickede,B,GUI.GetPlayerID())return end;local d5=GUI_BuildingButtons.GetUpgradeCosts()local fC,d6=AreCostsAffordable(d5)if fC==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.UpgradeBuilding(B,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightWisdom)if fy~=0 then SaveButtonPressed(fy)end;SendReportToGlobal(Report.StartUpgradeClicked,B,GUI.GetPlayerID())else Message(d6)end end end;function Lib.UIBuilding.Local:OverrideStartSermon()function GUI_BuildingButtons.StartSermonClicked()local n=GUI.GetPlayerID()if Logic.CanSermonBeActivated(n)then GUI.ActivateSermon(n)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightHealing)GUI.AddBuff(Buffs.Buff_Sermon)local fG=Logic.GetCathedral(n)local I,J=Logic.GetEntityPosition(fG)local K=0;Sound.FXPlay3DSound("buildings\\building_start_sermon",I,J,K)SendReportToGlobal(Report.SermonClicked,GUI.GetPlayerID())end end end;function Lib.UIBuilding.Local:InitBackupPositions()for g,h in pairs(self.BuildingButtons.Configuration)do local I,J=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g)self.BuildingButtons.Configuration[g].OriginalPosition={I,J}end end;function Lib.UIBuilding.Local:GetButtonsForOverwrite(aD,aI)local fH={}local l=Logic.GetEntityType(aD)local fI=Logic.GetEntityTypeName(l)for g,h in pairs(self.BuildingButtons.Configuration)do if#fH==aI then break end;if not fI:find(h.TypeExclusion)then table.insert(fH,g)end end;assert(#fH==aI)table.sort(fH)return fH end;function Lib.UIBuilding.Local:AddButtonBinding(i,ft,fu,fJ,fK,fL)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;if#self.BuildingButtons.Bindings[i]<6 then self.BuildingButtons.BindingCounter=self.BuildingButtons.BindingCounter+1;table.insert(self.BuildingButtons.Bindings[i],{ID=self.BuildingButtons.BindingCounter,Position={ft,fu},Action=fJ,Tooltip=fK,Update=fL})return self.BuildingButtons.BindingCounter end;return 0 end;function Lib.UIBuilding.Local:RemoveButtonBinding(i,aD)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;for f=#self.BuildingButtons.Bindings[i],1,-1 do if self.BuildingButtons.Bindings[i][f].ID==aD then table.remove(self.BuildingButtons.Bindings[i],f)end end end;function Lib.UIBuilding.Local:BindButtons(aD)if aD==nil or aD==0 or Logic.IsBuilding(aD)==0 and not Logic.IsWall(aD)then return self:UnbindButtons()end;local Name=Logic.GetEntityName(aD)local l=Logic.GetEntityType(aD)local fM=self:GetButtonsForOverwrite(aD,6)local fN={}if self.BuildingButtons.Bindings[Name]and#self.BuildingButtons.Bindings[Name]>0 then for f=1,#self.BuildingButtons.Bindings[Name]do table.insert(fN,self.BuildingButtons.Bindings[Name][f])end end;if self.BuildingButtons.Bindings[l]and#self.BuildingButtons.Bindings[l]>0 then for f=1,#self.BuildingButtons.Bindings[l]do table.insert(fN,self.BuildingButtons.Bindings[l][f])end end;if self.BuildingButtons.Bindings[0]and#self.BuildingButtons.Bindings[0]>0 then for f=1,#self.BuildingButtons.Bindings[0]do table.insert(fN,self.BuildingButtons.Bindings[0][f])end end;for f=1,#fN do if f>6 then break end;local fO=fM[f]self.BuildingButtons.Configuration[fO].Bind=fN[f]XGUIEng.ShowWidget("/InGame/Root/Normal/BuildingButtons/"..fO,1)XGUIEng.DisableButton("/InGame/Root/Normal/BuildingButtons/"..fO,0)local cT=fN[f].Position[1]local cU=fN[f].Position[2]if not cT or not cU then local fP={15,296}cT=fP[1]+64*(f-1)cU=fP[2]end;XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..fO,cT,cU)end end;function Lib.UIBuilding.Local:UnbindButtons()for g,h in pairs(self.BuildingButtons.Configuration)do local V=self.BuildingButtons.Configuration[g].OriginalPosition;if V then XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g,V[1],V[2])end;self.BuildingButtons.Configuration[g].Bind=nil end end;RegisterModule(Lib.UIBuilding.Name)Lib.Register("module/city/Construction_Text")Lib.Construction=Lib.Construction or{}Lib.Construction.Text={NoKnockdown={de="Das kann nicht abgerissen werden!",en="This cannot be demolished!",fr="Cela ne peut pas être démoli!"},NoRoad={de="Straßen sind hier nicht möglich!",en="Roads are not possible here!",fr="Les routes ne sont pas possibles ici!"},NoWall={de="Befästigungen sind hier nicht möglich!",en="Ramparts are not possible here!",fr="Les confirmations ne sont pas possibles ici!"},NoWallGate={de="Ein anderes Torhaus ist zu nah!",en="Another gatehouse is too close!",fr="Une autre guérite est trop proche!"},NoBallista={de="Zu nahe an anderem Mauerkatapult!",en="To close to another ballista!",fr="A rapprocher d'une autre baliste!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/Construction_API")function CustomRuleConstructBuilding(q,fQ,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructBuilding(q,fQ,unpack(arg))end;API.CustomRuleConstructBuilding=CustomRuleConstructBuilding;function CustomRuleConstructRoad(q,fQ,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructRoad(q,fQ,unpack(arg))end;API.CustomRuleConstructRoad=CustomRuleConstructRoad;function CustomRuleConstructWall(q,fQ,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructWall(q,fQ,unpack(arg))end;API.CustomRuleConstructWall=CustomRuleConstructWall;function CustomRuleKnockdownBuilding(q,fQ,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleKnockdownBuilding(q,fQ,unpack(arg))end;API.CustomRuleKnockdownBuilding=CustomRuleKnockdownBuilding;function WhitelistConstructTypeInArea(q,i,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInArea(q,i,ft,fu,fR)end;API.WhitelistConstructTypeInArea=WhitelistConstructTypeInArea;function WhitelistConstructCategoryInArea(q,fS,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInArea(q,fS,ft,fu,fR)end;API.WhitelistConstructCategoryInArea=WhitelistConstructCategoryInArea;function WhitelistConstructTypeInTerritory(q,i,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInTerritory(q,i,fT)end;API.WhitelistConstructTypeInTerritory=WhitelistConstructTypeInTerritory;function WhitelistConstructCategoryInTerritory(q,fS,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInTerritory(q,fS,fT)end;API.WhitelistConstructCategoryInTerritory=WhitelistConstructCategoryInTerritory;function BlacklistConstructTypeInArea(q,i,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInArea(q,i,ft,fu,fR)end;API.BlacklistConstructTypeInArea=BlacklistConstructTypeInArea;function BlacklistConstructCategoryInArea(q,fS,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInArea(q,fS,ft,fu,fR)end;API.BlacklistConstructCategoryInArea=BlacklistConstructCategoryInArea;function BlacklistConstructTypeInTerritory(q,i,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInTerritory(q,i,fT)end;API.BlacklistConstructTypeInTerritory=BlacklistConstructTypeInTerritory;function BlacklistConstructCategoryInTerritory(q,fS,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInTerritory(q,fS,fT)end;API.BlacklistConstructCategoryInTerritory=BlacklistConstructCategoryInTerritory;function WhitelistConstructRoadInArea(q,fU,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInArea(q,fU,ft,fu,fR)end;API.WhitelistConstructRoadInArea=WhitelistConstructRoadInArea;function WhitelistConstructWallInArea(q,fV,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInArea(q,fV,ft,fu,fR)end;API.WhitelistConstructWallInArea=WhitelistConstructWallInArea;function WhitelistConstructRoadInTerritory(q,fU,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInTerritory(q,fU,fT)end;API.WhitelistConstructRoadInTerritory=WhitelistConstructRoadInTerritory;function WhitelistConstructWallInTerritory(q,fV,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInTerritory(q,fV,fT)end;API.WhitelistConstructWallInTerritory=WhitelistConstructWallInTerritory;function BlacklistConstructRoadInArea(q,fU,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInArea(q,fU,ft,fu,fR)end;API.BlacklistConstructRoadInArea=BlacklistConstructRoadInArea;function BlacklistConstructWallInArea(q,fV,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInArea(q,fV,ft,fu,fR)end;API.BlacklistConstructWallInArea=BlacklistConstructWallInArea;function BlacklistConstructRoadInTerritory(q,fU,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInTerritory(q,fU,fT)end;API.BlacklistConstructRoadInTerritory=BlacklistConstructRoadInTerritory;function BlacklistConstructWallInTerritory(q,fV,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInTerritory(q,fV,fT)end;API.BlacklistConstructWallInTerritory=BlacklistConstructWallInTerritory;function WhitelistKnockdownTypeInArea(q,i,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInArea(q,i,ft,fu,fR)end;API.WhitelistKnockdownTypeInArea=WhitelistKnockdownTypeInArea;function WhitelistKnockdownCategoryInArea(q,fS,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInArea(q,fS,ft,fu,fR)end;API.WhitelistKnockdownCategoryInArea=WhitelistKnockdownCategoryInArea;function WhitelistKnockdownTypeInTerritory(q,i,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(q,i,fT)end;API.WhitelistKnockdownTypeInTerritory=WhitelistKnockdownTypeInTerritory;function WhitelistKnockdownCategoryInTerritory(q,fS,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(q,fS,fT)end;API.WhitelistKnockdownCategoryInTerritory=WhitelistKnockdownCategoryInTerritory;function BlacklistKnockdownTypeInArea(q,i,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInArea(q,i,ft,fu,fR)end;API.BlacklistKnockdownTypeInArea=BlacklistKnockdownTypeInArea;function BlacklistKnockdownCategoryInArea(q,fS,ft,fu,fR)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInArea(q,fS,ft,fu,fR)end;API.BlacklistKnockdownCategoryInArea=BlacklistKnockdownCategoryInArea;function BlacklistKnockdownTypeInTerritory(q,i,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(q,i,fT)end;API.BlacklistKnockdownTypeInTerritory=BlacklistKnockdownTypeInTerritory;function BlacklistKnockdownCategoryInTerritory(q,fS,fT)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(q,fS,fT)end;API.BlacklistKnockdownCategoryInTerritory=BlacklistKnockdownCategoryInTerritory;Lib.Construction=Lib.Construction or{}Lib.Construction.Name="Construction"Lib.Construction.Global={Construction={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Construction.Local={Construction={Restriction={BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={LastSelectedBuildingType=0,LastSelectedRoadType=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Require("comfort/GetCategoriesOfType")Lib.Require("comfort/GetDistance")Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/city/Construction_API")Lib.Require("module/city/Construction_Text")Lib.Register("module/city/Construction")function Lib.Construction.Global:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;Lib.Construction.Local=nil end;self.IsInstalled=true end;function Lib.Construction.Global:OnSaveGameLoaded()end;function Lib.Construction.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Global:WhitelistConstructTypeInArea(q,i,ft,fu,fR)return self:ListConstructArea("BuildingAreaWhitelist",q,i,nil,ft,fu,fR)end;function Lib.Construction.Global:WhitelistConstructCategoryInArea(q,fS,ft,fu,fR)return self:ListConstructArea("BuildingCateWhitelist",q,nil,fS,ft,fu,fR)end;function Lib.Construction.Global:WhitelistConstructTypeInTerritory(q,i,fT)return self:ListConstructTerritory("BuildingTerritoryWhitelist",q,i,nil,fT)end;function Lib.Construction.Global:WhitelistConstructCategoryInTerritory(q,fS,fT)return self:ListConstructTerritory("BuildingTerritoryWhitelist",q,nil,fS,fT)end;function Lib.Construction.Global:BlacklistConstructTypeInArea(q,i,ft,fu,fR)return self:ListConstructArea("BuildingAreaBlacklist",q,i,nil,ft,fu,fR)end;function Lib.Construction.Global:BlacklistConstructCategoryInArea(q,fS,ft,fu,fR)return self:ListConstructArea("BuildingAreaBlacklist",q,nil,fS,ft,fu,fR)end;function Lib.Construction.Global:BlacklistConstructTypeInTerritory(q,i,fT)return self:ListConstructTerritory("BuildingTerritoryBlacklist",q,i,nil,fT)end;function Lib.Construction.Global:BlacklistConstructCategoryInTerritory(q,fS,fT)return self:ListConstructTerritory("BuildingTerritoryBlacklist",q,nil,fS,fT)end;function Lib.Construction.Global:WhitelistConstructRoadInArea(q,fU,ft,fu,fR)return self:ListConstructArea("RoadAreaWhitelist",q,fU,nil,ft,fu,fR)end;function Lib.Construction.Global:WhitelistConstructWallInArea(q,fV,ft,fu,fR)return self:ListConstructArea("WallAreaWhitelist",q,fV,nil,ft,fu,fR)end;function Lib.Construction.Global:WhitelistConstructRoadInTerritory(q,fU,fT)return self:ListConstructTerritory("RoadTerritoryWhitelist",q,fU,nil,fT)end;function Lib.Construction.Global:WhitelistConstructWallInTerritory(q,fV,fT)return self:ListConstructTerritory("WallTerritoryWhitelist",q,fV,nil,fT)end;function Lib.Construction.Global:BlacklistConstructRoadInArea(q,fU,ft,fu,fR)return self:ListConstructArea("RoadAreaBlacklist",q,fU,nil,ft,fu,fR)end;function Lib.Construction.Global:BlacklistConstructWallInArea(q,fV,ft,fu,fR)return self:ListConstructArea("WallAreaBlacklist",q,fV,nil,ft,fu,fR)end;function Lib.Construction.Global:BlacklistConstructRoadInTerritory(q,fU,fT)return self:ListConstructTerritory("RoadTerritoryBlacklist",q,fU,nil,fT)end;function Lib.Construction.Global:BlacklistConstructWallInTerritory(q,fV,fT)return self:ListConstructTerritory("WallTerritoryBlacklist",q,fV,nil,fT)end;function Lib.Construction.Global:CustomRuleConstructBuilding(q,fQ,...)return self:ListConstructCustom("BuildingCustomRule",q,fQ,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructRoad(q,fQ,...)return self:ListConstructCustom("RoadCustomRule",q,fQ,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructWall(q,fQ,...)return self:ListConstructCustom("WallCustomRule",q,fQ,unpack(arg))end;function Lib.Construction.Global:ListConstructArea(a3,q,i,fS,ft,fu,fR)local al=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a3][q],{ID=al,Category=fS,Type=i,Center={X=ft,Y=fu},Area=fR})self:MirrorConstructionRestrictionsToLocalScript()return al end;function Lib.Construction.Global:ListConstructTerritory(a3,q,i,fS,fT)local al=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a3][q],{ID=al,Category=fS,Type=i,Territory=fT})self:MirrorConstructionRestrictionsToLocalScript()return al end;function Lib.Construction.Global:ListConstructCustom(a3,q,fW,...)local al=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a3][q],{ID=al,Function=fW,Arguments=arg})self:MirrorConstructionRestrictionsToLocalScript()return al end;function Lib.Construction.Global:GetNewRestrictionID()self.Construction.Restriction.Index=self.Construction.Restriction.Index+1;local cu=self.Construction.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Construction.Restriction.Index = %d]],cu)return cu end;function Lib.Construction.Global:MirrorConstructionRestrictionsToLocalScript()local fX=table.tostring(self.Construction.Restriction)ExecuteLocal([[Lib.Construction.Local.Construction.Restriction = %s]],fX)end;function Lib.Construction.Global:WhitelistKnockdownTypeInArea(q,i,ft,fu,fR)return self:ListKnockdownArea("BuildingAreaWhitelist",q,i,nil,ft,fu,fR)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInArea(q,fS,ft,fu,fR)return self:ListKnockdownArea("BuildingAreaWhitelist",q,nil,fS,ft,fu,fR)end;function Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(q,i,fT)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",q,i,nil,fT)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(q,fS,fT)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",q,nil,fS,fT)end;function Lib.Construction.Global:BlacklistKnockdownTypeInArea(q,i,ft,fu,fR)return self:ListKnockdownArea("BuildingAreaBlacklist",q,i,nil,ft,fu,fR)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInArea(q,fS,ft,fu,fR)return self:ListKnockdownArea("BuildingAreaBlacklist",q,nil,fS,ft,fu,fR)end;function Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(q,i,fT)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",q,i,nil,fT)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(q,fS,fT)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",q,nil,fS,fT)end;function Lib.Construction.Global:CustomRuleKnockdownBuilding(q,fQ,...)return self:ListKnockdownCustom("BuildingCustomRule",q,fQ,unpack(arg))end;function Lib.Construction.Global:ListKnockdownArea(a3,q,i,fS,ft,fu,fR)local al=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a3][q],{ID=al,Category=fS,Type=i,Center={X=ft,Y=fu},Area=fR})self:MirrorKnockdownRestrictionsToLocalScript()return al end;function Lib.Construction.Global:ListKnockdownTerritory(a3,q,i,fS,fT)local al=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a3][q],{ID=al,Category=fS,Type=i,Territory=fT})self:MirrorKnockdownRestrictionsToLocalScript()return al end;function Lib.Construction.Global:ListKnockdownCustom(a3,q,fW,...)local al=self:GetNewRestrictionID()table.insert(self.Knockdown.Restriction[a3][q],{ID=al,Function=fW,Arguments=arg})self:MirrorKnockdownRestrictionsToLocalScript()return al end;function Lib.Construction.Global:GetNewProtectionID()self.Knockdown.Restriction.Index=self.Knockdown.Restriction.Index+1;local cu=self.Knockdown.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction.Index = %d]],cu)return cu end;function Lib.Construction.Global:MirrorKnockdownRestrictionsToLocalScript()local fX=table.tostring(self.Knockdown.Restriction)ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction = %s]],fX)end;function Lib.Construction.Global:IsConstructionAllowed(q,i,ft,fu)local fY=Logic.GetTerritoryAtPosition(ft,fu)local j=GetCategoriesOfType(i)local fZ=self.Construction.Restriction.BuildingTerritoryWhitelist[q]if#fZ>0 then for g,h in pairs(fZ)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==fY then return true end end;return false end;local f_=self.Construction.Restriction.BuildingAreaWhitelist[q]if#f_>0 then for g,h in pairs(f_)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=ft,Y=fu},h.Center)<=h.Area then return true end end;return false end;local g0=self.Construction.Restriction.BuildingTerritoryBlacklist[q]for g,h in pairs(g0)do if(h.Type==i or table.contains(j,h.Category))and h.Territory==fY then return false end end;local g1=self.Construction.Restriction.BuildingAreaBlacklist[q]for g,h in pairs(g1)do if(h.Type==i or table.contains(j,h.Category))and h.Center and GetDistance({X=ft,Y=fu},h.Center)<=h.Area then return false end end;local g2=self.Construction.Restriction.BuildingCustomRule[q]for g,h in pairs(g2)do if _G[h.Function]and not _G[h.Function](q,i,ft,fu,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Global:OverwriteGameCallbacks()self.Orig_GameCallback_CanPlayerPlaceBuilding=GameCallback_CanPlayerPlaceBuilding;GameCallback_CanPlayerPlaceBuilding=function(q,i,ft,fu)if Lib.Construction.Global:IsConstructionAllowed(q,i,ft,fu)then return Lib.Construction.Global.Orig_GameCallback_CanPlayerPlaceBuilding(q,i,ft,fu)end;return false end end;function Lib.Construction.Local:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;self:OverrideBuildButtonClicked()self:OverridePlacementUpdate()Lib.Construction.Global=nil end;self.IsInstalled=true end;function Lib.Construction.Local:OnSaveGameLoaded()end;function Lib.Construction.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Local:IsKnockdownAllowed(q,an,bC)local l=Logic.GetEntityType(an)local I,J,K=Logic.EntityGetPos(an)local fY=GetTerritoryUnderEntity(an)local j=GetCategoriesOfType(l)local fZ=self.Knockdown.Restriction.BuildingTerritoryWhitelist[q]if#fZ>0 then for g,h in pairs(fZ)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==fY then return true end end;return false end;local f_=self.Knockdown.Restriction.BuildingAreaWhitelist[q]if#f_>0 then for g,h in pairs(f_)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return true end end;return false end;local g0=self.Knockdown.Restriction.BuildingTerritoryBlacklist[q]for g,h in pairs(g0)do if(h.Type==l or table.contains(j,h.Category))and h.Territory==fY then return false end end;local g1=self.Knockdown.Restriction.BuildingAreaBlacklist[q]for g,h in pairs(g1)do if(h.Type==l or table.contains(j,h.Category))and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return false end end;local g2=self.Knockdown.Restriction.BuildingCustomRule[q]for g,h in pairs(g2)do if _G[h.Function]and not _G[h.Function](q,an,I,J,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Local:OverwriteGameCallbacks()self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(g3,bC)local n=Logic.EntityGetPlayer(g3)if not Lib.Construction.Local:IsKnockdownAllowed(n,g3,bC)then Message(Localize(Lib.Construction.Text.NoKnockdown))GUI.CancelBuildingKnockDown(g3)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(g3,bC)end end;function Lib.Construction.Local:OverrideBuildButtonClicked()self.Orig_BuildClicked=GUI_Construction.BuildClicked;GUI_Construction.BuildClicked=function(g4)Lib.Construction.Local.LastSelectedBuildingType=g4;Lib.Construction.Local.Orig_BuildClicked(g4)end;self.Orig_BuildStreetClicked=GUI_Construction.BuildStreetClicked;GUI_Construction.BuildStreetClicked=function(g5)g5=g5~=nil and g5 or false;Lib.Construction.Local.LastSelectedRoadType=g5;Lib.Construction.Local.Orig_BuildStreetClicked(g5)end;self.Orig_BuildWallClicked=GUI_Construction.BuildWallClicked;GUI_Construction.BuildWallClicked=function(g4)if g4==nil then g4=GetUpgradeCategoryForClimatezone("WallSegment")end;Lib.Construction.Local.LastSelectedBuildingType=g4;Lib.Construction.Local.Orig_BuildWallClicked(g4)end;self.Orig_BuildWallGateClicked=GUI_Construction.BuildWallGateClicked;GUI_Construction.BuildWallGateClicked=function(g4)if g4==nil then g4=GetUpgradeCategoryForClimatezone("WallGate")end;Lib.Construction.Local.LastSelectedBuildingType=g4;Lib.Construction.Local.Orig_BuildWallGateClicked(g4)end;self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local cZ=Logic.GetEntityType(GUI.GetSelectedEntity())Lib.Construction.Local.LastSelectedBuildingType=cZ;Lib.Construction.Local.Orig_PlaceFieldClicked()end end;function Lib.Construction.Local:OverridePlacementUpdate()self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged=GameCallBack_GUI_ConstructWallSegmentCountChanged;GameCallBack_GUI_ConstructWallSegmentCountChanged=function(g6,g7)self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged(g6,g7)Lib.Construction.Local:CancleConstructWallState(GUI.GetPlayerID(),g6,g7)end;self.Orig_GameCallBack_GUI_BuildRoadCostChanged=GameCallBack_GUI_BuildRoadCostChanged;GameCallBack_GUI_BuildRoadCostChanged=function(g8)self.Orig_GameCallBack_GUI_BuildRoadCostChanged(g8)Lib.Construction.Local:CancleConstructRoad(GUI.GetPlayerID(),g8)end;self.Orig_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()Lib.Construction.Local:CancleWallGatesToCloseToEachother(GUI.GetPlayerID())Lib.Construction.Local.Orig_PlacementUpdate()end;self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local B=GUI.GetSelectedEntity()local n=Logic.EntityGetPlayer(B)local I,J,K=Logic.EntityGetPos(B)if Lib.Construction.Local:AreOtherBallistasToCloseToPosition(n,I,J,2500)then Message(Localize(Lib.Construction.Text.NoBallista))return end;Lib.Construction.Local.Orig_UpgradeTurretClicked()end end;function Lib.Construction.Local:AreOtherBallistasToCloseToPosition(q,g9,ga,gb)local gc,gd=Logic.GetPlayerEntitiesInArea(q,Entities.U_MilitaryBallista_BuildingSite,g9,ga,gb,1)local ge,gf=Logic.GetPlayerEntitiesInArea(q,Entities.U_MilitaryBallista,g9,ga,gb,1)return gc>0 or ge>0 end;function Lib.Construction.Local:CancleConstructWallState(q,g6,g7)local gg=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType~=1 then local d5={Logic.GetCostForWall(g6,g7,StartTurretX,StartTurretY,EndTurretX,EndTurretY)}if gg==2 and d5[1]and d5[2]>0 then local I,J=GUI.Debug_GetMapPositionUnderMouse()local fY=Logic.GetTerritoryAtPosition(I or 1,J or 1)local gh=self.LastSelectedBuildingType;local gi,l=Logic.GetBuildingTypesInUpgradeCategory(gh)local gj=Logic.IsEntityTypeInCategory(l,EntityCategories.Wall)==1;local fZ=self.Construction.Restriction.WallTerritoryWhitelist[q]if gj and#fZ>0 then for g,h in pairs(fZ)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==fY then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==fY then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local f_=self.Construction.Restriction.WallAreaWhitelist[q]if gj and#f_>0 then for g,h in pairs(fZ)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local g0=self.Construction.Restriction.WallTerritoryBlacklist[q]if gj then for g,h in pairs(g0)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Territory==fY then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Territory==fY then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local g1=self.Construction.Restriction.WallAreaBlacklist[q]if gj then for g,h in pairs(g1)do if h.Type==true then if string.find(Logic.GetEntityTypeName(l),"B_Wall")and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end else if(l==Entities.B_PalisadeSegment or l==Entities.B_PalisadeGate)and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local g2=self.Construction.Restriction.WallCustomRule[q]for g,h in pairs(g2)do local gk=string.find(Logic.GetEntityTypeName(l),"B_Wall")~=nil;if _G[h.Function]and not _G[h.Function](q,gk,I,J,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleConstructRoad(q,g8)local gg=GUI.GetCurrentStateID()local I,J=GUI.Debug_GetMapPositionUnderMouse()local fY=Logic.GetTerritoryAtPosition(I or 1,J or 1)if g_Construction.CurrentPlacementType==1 then if gg==5 and g8>0 then local gl=not self.LastSelectedRoadType;local fZ=self.Construction.Restriction.RoadTerritoryWhitelist[q]if#fZ>0 then for g,h in pairs(fZ)do if h.Type==gl and h.Territory==fY then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local f_=self.Construction.Restriction.RoadAreaWhitelist[q]if#f_>0 then for g,h in pairs(f_)do if h.Type==gl and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local g0=self.Construction.Restriction.RoadTerritoryBlacklist[q]for g,h in pairs(g0)do if h.Type==gl and h.Territory==fY then self:CancelState(g_Construction.CurrentPlacementType)return end end;local g1=self.Construction.Restriction.RoadAreaBlacklist[q]for g,h in pairs(g1)do if h.Type==gl and h.Center and GetDistance({X=I,Y=J},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end;local g2=self.Construction.Restriction.RoadCustomRule[q]for g,h in pairs(g2)do if _G[h.Function]and not _G[h.Function](q,gl,I,J,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancleWallGatesToCloseToEachother(q)local gg=GUI.GetCurrentStateID()if gg==3 then local gm=Lib.Construction.Local.LastSelectedBuildingType;local gn,l=Logic.GetBuildingTypesInUpgradeCategory(gm)local go=l==Entities.B_PalisadeGate and 1200 or 2350;local I,J=GUI.Debug_GetMapPositionUnderMouse()local gi,al=Logic.GetPlayerEntitiesInArea(q,l,I,J,go,1)if gi>0 then self:CancelState(-1)end end end;function Lib.Construction.Local:CancelState(gp)local cb=Lib.Construction.Text.NoWall;if gp==1 then cb=Lib.Construction.Text.NoRoad elseif gp==-1 then cb=Lib.Construction.Text.NoWallGate end;Message(Localize(cb))GUI.CancelState()end;RegisterModule(Lib.Construction.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/NPC_API")function NpcCompose(f7)error(not IsLocalScript(),"NPC manipulated in local script.")error(type(f7)=="table","NPC must be a table.")error(f7.Name~=nil,"NPC needs a script name.")error(IsExisting(f7.Name),"Entity does not exist.")local gq=Lib.NPC.Global:GetNpc(f7.Name)error(gq==nil or not gq.Active,"NPC already active.")error(not f7.Type or(f7.Type>=1 or f7.Type<=4),"NPC type is invalid.")return Lib.NPC.Global:CreateNpc(f7)end;API.NpcCompose=NpcCompose;function NpcDispose(f7)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f7.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(f7.Name)==nil,"NPC must first be composed.")Lib.NPC.Global:DestroyNpc(f7)end;API.NpcDispose=NpcDispose;function NpcUpdate(f7)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f7.Name),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(f7.Name)~=nil,"NPC must first be composed.")Lib.NPC.Global:UpdateNpc(f7)end;API.NpcUpdate=NpcUpdate;function NpcIsActive(f7)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f7.Name),"Entity does not exist.")local gr=Lib.NPC.Global:GetNpc(f7.Name)error(gr~=nil,"NPC was not found.")if gr.Active==true then return GetInteger(f7.Name,CONST_SCRIPTING_VALUES.NPC)==6 end;return false end;API.NpcIsActive=NpcIsActive;function NpcTalkedTo(f7,gs,q)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(f7.Name),"Entity does not exist.")local gr=Lib.NPC.Global:GetNpc(f7.Name)error(gr~=nil,"NPC was not found.")local gt=gr.TalkedTo~=nil and gr.TalkedTo~=0;if gs and gt then gt=gr.TalkedTo==GetID(gs)end;if q and gt then gt=Logic.EntityGetPlayer(gr.TalkedTo)==q end;return gt end;API.NpcTalkedTo=NpcTalkedTo;Lib.NPC=Lib.NPC or{}Lib.NPC.Name="NPC"Lib.NPC.Global={Interactions={},NPC={},UseMarker=true}Lib.NPC.Local={}Lib.NPC.Text={StartConversation={de="Gespräch beginnen",en="Start conversation",fr="Commencer la conversation"}}CONST_LAST_NPC_INTERACTED=0;CONST_LAST_HERO_INTERACTED=0;Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/global/LookAt")Lib.Require("core/Core")Lib.Require("module/entity/NPC_API")Lib.Register("module/entity/NPC")function Lib.NPC.Global:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()RequestHiResJob(function()if Logic.GetTime()>1 then Lib.NPC.Global:InteractionTriggerController()end end)RequestJob(function()Lib.NPC.Global:InteractableMarkerController()end)Lib.NPC.Local=nil end;self.IsInstalled=true end;function Lib.NPC.Global:OnSaveGameLoaded()end;function Lib.NPC.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]self.Interactions[arg[1]]=self.Interactions[arg[1]]or{}if self.Interactions[arg[1]][arg[2]]then if Logic.GetCurrentTurn()<=self.Interactions[arg[1]][arg[2]]+5 then return end end;self.Interactions[arg[1]][arg[2]]=Logic.GetCurrentTurn()self:PerformNpcInteraction(arg[3])end end;function Lib.NPC.Global:CreateNpc(f7)self.NPC[f7.Name]={Name=f7.Name,Active=true,Type=f7.Type or 1,Player=f7.Player or{1,2,3,4,5,6,7,8},WrongPlayerAction=f7.WrongPlayerAction,Hero=f7.Hero,WrongHeroAction=f7.WrongHeroAction,Distance=f7.Distance or 350,Condition=f7.Condition,Callback=f7.Callback,UseMarker=self.UseMarker==true,MarkerID=0}self:UpdateNpc(f7)return self.NPC[f7.Name]end;function Lib.NPC.Global:DestroyNpc(f7)f7.Active=false;self:UpdateNpc(f7)self:DestroyMarker(f7.Name)self.NPC[f7.Name]=nil end;function Lib.NPC.Global:GetNpc(bB)return self.NPC[bB]end;function Lib.NPC.Global:UpdateNpc(f7)if not IsExisting(f7.Name)then return end;if not self.NPC[f7.Name]then local B=GetID(f7.Name)Logic.SetOnScreenInformation(B,0)return end;for g,h in pairs(f7)do self.NPC[f7.Name][g]=h end;self:CreateMarker(f7.Name)if self.NPC[f7.Name].Active then local B=GetID(f7.Name)Logic.SetOnScreenInformation(B,self.NPC[f7.Name].Type)else local B=GetID(f7.Name)Logic.SetOnScreenInformation(B,0)end end;function Lib.NPC.Global:PerformNpcInteraction(q)local aM=Logic.GetEntityName(CONST_LAST_NPC_INTERACTED)if self.NPC[aM]then local bd=self.NPC[aM]self:RotateActorsToEachother(q)self:AdjustHeroTalkingDistance(bd.Distance)if not self:InteractionIsAppropriatePlayer(aM,q,CONST_LAST_HERO_INTERACTED)then return end;bd.TalkedTo=CONST_LAST_HERO_INTERACTED;if not self:InteractionIsAppropriateHero(aM)then return end;if bd.Condition==nil or bd:Condition(q,CONST_LAST_HERO_INTERACTED)then bd.Active=false;if bd.Callback then bd:Callback(q,CONST_LAST_HERO_INTERACTED)end else bd.TalkedTo=0 end;self:UpdateNpc(bd)end end;function Lib.NPC.Global:InteractionIsAppropriatePlayer(bB,q,gu)local gv=true;if self.NPC[bB]then local bd=self.NPC[bB]if bd.Player~=nil then if type(bd.Player)=="table"then gv=table.contains(bd.Player,q)else gv=bd.Player==q end;if not gv then local gw=(bd.WrongHeroTick or 0)+1;local gx=Logic.GetTime()if bd.WrongPlayerAction and gw<gx then self.NPC[bB].LastWongPlayerTick=gx;bd:WrongPlayerAction(q)end end end end;return gv end;function Lib.NPC.Global:InteractionIsAppropriateHero(bB)local gv=true;if self.NPC[bB]then local bd=self.NPC[bB]if bd.Hero~=nil then if type(bd.Hero)=="table"then gv=table.contains(bd.Hero,Logic.GetEntityName(CONST_LAST_HERO_INTERACTED))end;gv=bd.Hero==Logic.GetEntityName(CONST_LAST_HERO_INTERACTED)if not gv then local gw=(bd.WrongHeroTick or 0)+1;local gx=Logic.GetTime()if bd.WrongHeroAction and gw<gx then self.NPC[bB].WrongHeroTick=gx;bd:WrongHeroAction(CONST_LAST_HERO_INTERACTED)end end end end;return gv end;function Lib.NPC.Global:GetEntityMovementTarget(an)local cT=GetFloat(an,CONST_SCRIPTING_VALUES.Destination.X)local cU=GetFloat(an,CONST_SCRIPTING_VALUES.Destination.Y)return{X=cT,Y=cU}end;function Lib.NPC.Global:RotateActorsToEachother(q)local gy={}Logic.GetKnights(q,gy)for g,h in pairs(gy)do local aC=self:GetEntityMovementTarget(h)local I,J,K=Logic.EntityGetPos(CONST_LAST_NPC_INTERACTED)if math.floor(aC.X)==math.floor(I)and math.floor(aC.Y)==math.floor(J)then I,J,K=Logic.EntityGetPos(h)Logic.MoveEntity(h,I,J)LookAt(h,CONST_LAST_NPC_INTERACTED)end end;LookAt(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)LookAt(CONST_LAST_NPC_INTERACTED,CONST_LAST_HERO_INTERACTED)end;function Lib.NPC.Global:AdjustHeroTalkingDistance(T)local gz=T*GetFloat(CONST_LAST_NPC_INTERACTED,CONST_SCRIPTING_VALUES.Size)if GetDistance(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)<=gz*0.7 then local W=Logic.GetEntityOrientation(CONST_LAST_NPC_INTERACTED)local at,au,av=Logic.EntityGetPos(CONST_LAST_HERO_INTERACTED)local ax=at+gz*0.5*math.cos(math.rad(W))local ay=au+gz*0.5*math.sin(math.rad(W))local al=Logic.CreateEntityOnUnblockedLand(Entities.XD_ScriptEntity,ax,ay,0,0)local gA,gB,gC=Logic.EntityGetPos(al)Logic.MoveSettler(CONST_LAST_HERO_INTERACTED,gA,gB)RequestHiResJob(function(gu,gD,gE)if Logic.GetTime()>gE+0.5 and Logic.IsEntityMoving(gu)==false then LookAt(gu,gD)LookAt(gD,gu)return true end end,CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED,Logic.GetTime())end end;function Lib.NPC.Global:OverrideQuestFunctions()GameCallback_OnNPCInteraction_Orig_NPC=GameCallback_OnNPCInteraction;GameCallback_OnNPCInteraction=function(an,q,gF)GameCallback_OnNPCInteraction_Orig_NPC(an,q,gF)local gG=gF or Lib.NPC.Global:GetClosestKnight(an,q)SendReport(Report.NpcInteraction,an,gG,q)SendReportToLocal(Report.NpcInteraction,an,gG,q)end;QuestTemplate.RemoveQuestMarkers_Orig_NPC=QuestTemplate.RemoveQuestMarkers;QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)else if self.Objectives[f].Data[4]then NpcDispose(self.Objectives[f].Data[4].NpcInstance)self.Objectives[f].Data[4].NpcInstance=nil end end else QuestTemplate.RemoveQuestMarkers_Orig_NPC(self)end end end;QuestTemplate.ShowQuestMarkers_Orig_NPC=QuestTemplate.ShowQuestMarkers;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[1]~=-65565 then QuestTemplate.ShowQuestMarkers_Orig_NPC(self)else if not self.Objectives[f].Data[4].NpcInstance then self.Objectives[f].Data[4].NpcInstance=NpcCompose{Name=self.Objectives[f].Data[3],Hero=self.Objectives[f].Data[2],Player=self.ReceivingPlayer}end end end end end;QuestTemplate.IsObjectiveCompleted_Orig_NPC=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,bL)local bM=bL.Type;local bN=bL.Data;if bL.Completed~=nil then return bL.Completed end;if bM~=Objective.Distance then return self:IsObjectiveCompleted_Orig_NPC(bL)else if bN[1]==-65565 then error(IsExisting(bN[3]),bN[3].." is dead! :(")if NpcTalkedTo(bN[4].NpcInstance,bN[2],self.ReceivingPlayer)then bL.Completed=true end else return self:IsObjectiveCompleted_Orig_NPC(bL)end end end end;function Lib.NPC.Global:GetClosestKnight(an,q)local gH={}Logic.GetKnights(q,gH)return GetClosestToTarget(an,gH)end;function Lib.NPC.Global:ToggleMarkerUsage(c5)self.UseMarker=c5==true;for g,h in pairs(self.NPC)do self.NPC[g].UseMarker=c5==true;self:HideMarker(g)end end;function Lib.NPC.Global:CreateMarker(bB)if self.NPC[bB]then local I,J,K=Logic.EntityGetPos(GetID(bB))local gI=Logic.CreateEntity(Entities.XD_ScriptEntity,I,J,0,0)DestroyEntity(self.NPC[bB].MarkerID)self.NPC[bB].MarkerID=gI;self:HideMarker(bB)end end;function Lib.NPC.Global:DestroyMarker(bB)if self.NPC[bB]then DestroyEntity(self.NPC[bB].MarkerID)self.NPC[bB].MarkerID=0 end end;function Lib.NPC.Global:HideMarker(bB)if self.NPC[bB]then if IsExisting(self.NPC[bB].MarkerID)then Logic.SetModel(self.NPC[bB].MarkerID,Models.Effects_E_NullFX)Logic.SetVisible(self.NPC[bB].MarkerID,false)end end end;function Lib.NPC.Global:ShowMarker(bB)if self.NPC[bB]then if self.NPC[bB].UseMarker==true and IsExisting(self.NPC[bB].MarkerID)then local fs=GetFloat(bB,CONST_SCRIPTING_VALUES.Size)SetFloat(self.NPC[bB].MarkerID,CONST_SCRIPTING_VALUES.Size,fs)Logic.SetModel(self.NPC[bB].MarkerID,Models.Effects_E_Wealth)Logic.SetVisible(self.NPC[bB].MarkerID,true)end end end;function Lib.NPC.Global:GetEntityMovingTarget(an)local I=GetFloat(an,CONST_SCRIPTING_VALUES.Destination.X)local J=GetFloat(an,CONST_SCRIPTING_VALUES.Destination.Y)return{X=I,Y=J}end;function Lib.NPC.Global:InteractionTriggerController()for n=1,8,1 do local gJ={}Logic.GetKnights(n,gJ)for f=1,#gJ,1 do if Logic.GetCurrentTaskList(gJ[f])=="TL_NPC_INTERACTION"then for g,h in pairs(self.NPC)do if h.Distance>=350 then local aC=self:GetEntityMovementTarget(gJ[f])local ax,ay=Logic.EntityGetPos(GetID(g))if math.floor(aC.X)==math.floor(ax)and math.floor(aC.Y)==math.floor(ay)then if IsExisting(g)and IsNear(gJ[f],g,h.Distance)then GameCallback_OnNPCInteraction(GetID(g),n,gJ[f])return end end end end end end end end;function Lib.NPC.Global:InteractableMarkerController()for g,h in pairs(self.NPC)do if h.Active then if h.UseMarker and IsExisting(h.MarkerID)and GetInteger(h.MarkerID,CONST_SCRIPTING_VALUES.Visible)==801280 then self:HideMarker(g)else self:ShowMarker(g)end;local at,au,av=Logic.EntityGetPos(h.MarkerID)local ax,ay,az=Logic.EntityGetPos(GetID(g))if math.abs(at-ax)>20 or math.abs(au-ay)>20 then Logic.DEBUG_SetPosition(h.MarkerID,ax,ay)end end end end;function Lib.NPC.Local:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()Lib.NPC.Global=nil end;self.IsInstalled=true end;function Lib.NPC.Local:OnSaveGameLoaded()end;function Lib.NPC.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]end end;function Lib.NPC.Local:OverrideQuestFunctions()GUI_Interaction.DisplayQuestObjective_Orig_NPC=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(bh,bi)local gK=tonumber(bh)if gK then bh=gK end;local bj,bk=GUI_Interaction.GetPotentialSubQuestAndType(bh)local gL="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gM;local gN;g_CurrentDisplayedQuestID=bh;if bk==Objective.Distance then gM=gL.."/List"gN=Wrapped_GetStringTableText(bh,"UI_Texts/QuestInteraction")local gO={}assert(bj~=nil)if bj.Objectives[1].Data[1]==-65565 then gM=gL.."/Distance"gN=Wrapped_GetStringTableText(bh,"UI_Texts/QuestMoveHere")SetIcon(gM.."/QuestTypeIcon",{7,10})local gP=GetID(bj.Objectives[1].Data[2])local gQ=Logic.GetEntityType(gP)local gR=g_TexturePositions.Entities[gQ]if not gR then gR={7,9}end;SetIcon(gM.."/IconMover",gR)local gS=GetID(bj.Objectives[1].Data[3])local gT=Logic.GetEntityType(gS)local gU=g_TexturePositions.Entities[gT]if not gU then gU={14,10}end;local ev=gM.."/IconTarget"local gV=gM.."/TargetPlayerColor"SetIcon(ev,gU)XGUIEng.SetMaterialColor(gV,0,255,255,255,0)SetIcon(gM.."/QuestTypeIcon",{16,12})local gW=Lib.NPC.Text.StartConversation;gN=Localize(gW)XGUIEng.SetText(gM.."/Caption","{center}"..gN)XGUIEng.ShowWidget(gM,1)else GUI_Interaction.DisplayQuestObjective_Orig_NPC(bh,bi)end else GUI_Interaction.DisplayQuestObjective_Orig_NPC(bh,bi)end end;GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC=GUI_Interaction.GetEntitiesOrTerritoryListForQuest;GUI_Interaction.GetEntitiesOrTerritoryListForQuest=function(bl,gX)local gY={}local gZ=true;if gX==Objective.Distance then if bl.Objectives[1].Data[1]==-65565 then local g_=GetID(bl.Objectives[1].Data[3])table.insert(gY,g_)else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(bl,gX)end else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(bl,gX)end;return gY,gZ end end;RegisterModule(Lib.NPC.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Sound_API")function StartEventPlaylist(h0,q)q=q or 1;if not GUI then ExecuteLocal("StartEventPlaylist('%s', %d)",h0,q)return end;if q==GUI.GetPlayerID()then Sound.MusicStartEventPlaylist(h0)end end;API.StartEventPlaylist=StartEventPlaylist;function StopEventPlaylist(h0,q)q=q or 1;if not GUI then ExecuteLocal("StopEventPlaylist('%s', %d)",h0,q)return end;if q==GUI.GetPlayerID()then Sound.MusicStopEventPlaylist(h0)end end;API.StopEventPlaylist=StopEventPlaylist;function Play2DSound(cv,q)q=q or 1;if not GUI then ExecuteLocal([[Play2DSound("%s", %d)]],cv,q)return end;if q==GUI.GetPlayerID()then Sound.FXPlay2DSound(cv:gsub("/","\\"))end end;API.Play2DSound=Play2DSound;function Play3DSound(cv,ft,fu,h1,q)q=q or 1;ft=ft or 1;fu=fu or 1;h1=h1 or 0;if not GUI then ExecuteLocal([[Play3DSound("%s", %f, %f, %d)]],cv,ft,fu,q)return end;if q==GUI.GetPlayerID()then Sound.FXPlay3DSound(cv:gsub("/","\\"),ft,fu,h1)end end;API.Play3DSound=Play3DSound;function SoundSetVolume(h2)h2=h2<0 and 0 or math.floor(h2)if not GUI then ExecuteLocal("SoundSetVolume(%d)",h2)return end;Lib.Sound.Local:AdjustSound(h2,nil,nil,nil,nil)end;API.SoundSetVolume=SoundSetVolume;function SoundSetMusicVolume(h2)h2=h2<0 and 0 or math.floor(h2)if not GUI then ExecuteLocal("SoundSetMusicVolume(%d)",h2)return end;Lib.Sound.Local:AdjustSound(nil,h2,nil,nil,nil)end;API.SoundSetMusicVolume=SoundSetMusicVolume;function SoundSetVoiceVolume(h2)h2=h2<0 and 0 or math.floor(h2)if not GUI then ExecuteLocal("SoundSetVoiceVolume(%d)",h2)return end;Lib.Sound.Local:AdjustSound(nil,nil,h2,nil,nil)end;API.SoundSetVoiceVolume=SoundSetVoiceVolume;function SoundSetAtmoVolume(h2)h2=h2<0 and 0 or math.floor(h2)if not GUI then ExecuteLocal("SoundSetAtmoVolume(%d)",h2)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,h2,nil)end;API.SoundSetAtmoVolume=SoundSetAtmoVolume;function SoundSetUIVolume(h2)h2=h2<0 and 0 or math.floor(h2)if not GUI then ExecuteLocal("SoundSetUIVolume(%d)",h2)return end;Lib.Sound.Local:AdjustSound(nil,nil,nil,nil,h2)end;API.SoundSetUIVolume=SoundSetUIVolume;function SoundSave()if not GUI then Logic.ExecuteInLuaLocalState("SoundSave()")return end;Lib.Sound.Local:SaveSound()end;API.SoundSave=SoundSave;function SoundRestore()if not GUI then ExecuteLocal("SoundRestore()")return end;Lib.Sound.Local:RestoreSound()end;API.SoundRestore=SoundRestore;function PlayVoice(h3)if not GUI then ExecuteLocal([[PlayVoice("%s")]],h3)return end;StopVoice()Sound.PlayVoice("ImportantStuff",h3)end;API.PlayVoice=PlayVoice;function StopVoice()if not GUI then ExecuteLocal("StopVoice()")return end;Sound.StopVoice("ImportantStuff")end;API.StopVoice=StopVoice;function RequestAlternateSound()if not GUI then ExecuteLocal("RequestAlternateSound()")return end;Lib.Sound.Local:RequestAlternateSound()end;API.RequestAlternateSound=RequestAlternateSound;Lib.Register("module/settings/Sound_Text")Lib.Sound=Lib.Sound or{}Lib.Sound.Text={Request={Title={de="Lautstärke ändern",en="Alternate Volume",fr="Modifier le volume"},Text={de="Während des Spiels kann die Lautstärke durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the sound volume might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, le volume sonore peut être modifié temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/Requester_API")function TextWindow(h4,h5,q)q=q or 1;h4=Localize(h4)h5=Localize(h5)if not GUI then ExecuteLocal([[API.TextWindow("%s", "%s", %d)]],h4,h5,q)return end;Lib.Requester.Local:ShowTextWindow{PlayerID=q,Caption=h4,Content=h5}end;API.TextWindow=TextWindow;function DialogInfoBox(q,e7,bF,fv)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then fv=bF;bF=e7;e7=q;q=GUI.GetPlayerID()end;if type(e7)=="table"then e7=Localize(e7)end;if type(bF)=="table"then bF=Localize(bF)end;Lib.Requester.Local:OpenDialog(q,e7,bF,fv)end;API.DialogInfoBox=DialogInfoBox;function DialogRequestBox(q,e7,bF,fv,h6)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then h6=fv;fv=bF;bF=e7;e7=q;q=GUI.GetPlayerID()end;if type(e7)=="table"then e7=Localize(e7)end;if type(bF)=="table"then bF=Localize(bF)end;Lib.Requester.Local:OpenRequesterDialog(q,e7,bF,fv,h6)end;API.DialogRequestBox=DialogRequestBox;function DialogSelectBox(q,e7,bF,fv,a3)assert(IsLocalScript(),"Can not be used in global script.")if type(q)~="number"then a3=fv;fv=bF;bF=e7;e7=q;q=GUI.GetPlayerID()end;if type(e7)=="table"then e7=Localize(e7)end;if type(bF)=="table"then bF=Localize(bF)end;bF=bF.."{cr}"Lib.Requester.Local:OpenSelectionDialog(q,e7,bF,fv,a3)end;API.DialogSelectBox=DialogSelectBox;function DialogLanguageSelection(q)q=q or 0;if not GUI then ExecuteLocal([[DialogLanguageSelection(%d)]],q)return end;local h7=q;local n=GUI.GetPlayerID()local h8=h7==0 or h7==n;if h7~=0 and GUI.GetPlayerID()~=h7 then return end;local h9={}for f=1,#Lib.Core.Text.Languages do table.insert(h9,Lib.Core.Text.Languages[f][2])end;local ha=function(hb)SendReportToGlobal(Report.LanguageSelectionClosed,n,h8,Lib.Core.Text.Languages[hb][1])SendReport(Report.LanguageSelectionClosed,n,h8,Lib.Core.Text.Languages[hb][1])end;DialogSelectBox(n,Localize(Lib.Requester.Shared.Text.ChooseLanguage.Title),Localize(Lib.Requester.Shared.Text.ChooseLanguage.Text),ha,h9)end;API.DialogLanguageSelection=DialogLanguageSelection;Lib.Requester=Lib.Requester or{}Lib.Requester.Name="Requester"Lib.Requester.Global={}Lib.Requester.Local={Chat={Data={},History={},Visible={},Widgets={}},Requester={ActionFunction=nil,ActionRequester=nil,Next=nil,Queue={}}}Lib.Requester.Shared={Text={ChooseLanguage={Title={de="Wählt die Sprache",en="Chose your Tongue",fr="Sélectionnez la langue"},Text={de="Wählt aus der Liste die Sprache aus, in die Handlungstexte übersetzt werden sollen.",en="Choose from the list below which language story texts shall be presented to you.",fr="Sélectionne dans la liste la langue dans laquelle les textes narratifs doivent être traduits."}}}}Lib.Require("core/core")Lib.Require("module/information/Requester_API")Lib.Register("module/information/Requester")function Lib.Requester.Global:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")Lib.Requester.Local=nil end;self.IsInstalled=true end;function Lib.Requester.Global:OnSaveGameLoaded()end;function Lib.Requester.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.LanguageSelectionClosed then Lib.Core.Text:ChangeSystemLanguage(arg[1],arg[2],arg[3])end end;function Lib.Requester.Local:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")for f=1,8 do self.Chat.Data[f]={}self.Chat.History[f]={}self.Chat.Visible[f]=false;self.Chat.Widgets[f]={}end;self:OverrideChatLog()self:DialogOverwriteOriginal()self:DialogAltF4Hotkey()Lib.Requester.Global=nil end;self.IsInstalled=true end;function Lib.Requester.Local:OnSaveGameLoaded()end;function Lib.Requester.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.SaveGameLoaded then self:DialogAltF4Hotkey()end end;function Lib.Requester.Local:DialogAltF4Hotkey()StartSimpleJobEx(function()if Lib.Requester.Local.LoadscreenClosed then Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"Lib.Requester.Local:DialogAltF4Action()",2,false)return true end end)end;function Lib.Requester.Local:DialogAltF4Action()Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"",30,false)self:OpenRequesterDialog(GUI.GetPlayerID(),XGUIEng.GetStringTableText("UI_Texts/MainMenuExitGame_center"),XGUIEng.GetStringTableText("UI_Texts/ConfirmQuitCurrentGame"),function(hc)if hc then Framework.ExitGame()end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;Lib.Requester.Local:DialogAltF4Hotkey()end)end;function Lib.Requester.Local:Callback(q)if self.Requester.ActionFunction then self.Requester.ActionFunction(CustomGame.Knight+1,q)end;self:OnDialogClosed()end;function Lib.Requester.Local:CallbackRequester(hd,q)if self.Requester.ActionRequester then self.Requester.ActionRequester(hd,q)end;self:OnDialogClosed()end;function Lib.Requester.Local:OnDialogClosed()if not self.SavingWasDisabled then DisableSaving(false)end;if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),1)end;self.SavingWasDisabled=false;self.DialogWindowShown=false;self:DialogQueueStartNext()end;function Lib.Requester.Local:DialogQueueStartNext()self.Requester.Next=table.remove(self.Requester.Queue,1)RequestHiResJob(function()local he=Lib.Requester.Local.Requester.Next;if he and he[1]and he[2]then local hf=he[1]Lib.Requester.Local[hf](Lib.Requester.Local,unpack(he[2]))Lib.Requester.Local.Requester.Next=nil end;return true end)end;function Lib.Requester.Local:DialogQueuePush(hg,hh)local he={hg,hh}table.insert(self.Requester.Queue,he)end;function Lib.Requester.Local:OpenDialog(q,e7,bF,fv)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(e7)=="string")assert(type(bF)=="string")if not IsMultiplayer()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;e7="{center}"..Lib.Core.Text:ConvertPlaceholders(e7)bF=Lib.Core.Text:ConvertPlaceholders(bF)if string.len(bF)<35 then bF=bF.."{cr}"end;g_MapAndHeroPreview.SelectKnight=function(hi)end;XGUIEng.ShowAllSubWidgets("/InGame/Dialog/BG",1)XGUIEng.ShowWidget("/InGame/Dialog/Backdrop",0)XGUIEng.ShowWidget(RequesterDialog,1)XGUIEng.ShowWidget(RequesterDialog_Yes,0)XGUIEng.ShowWidget(RequesterDialog_No,0)XGUIEng.ShowWidget(RequesterDialog_Ok,1)if type(fv)=="function"then self.Requester.ActionFunction=fv;local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,ha)else self.Requester.ActionFunction=nil;local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,ha)end;XGUIEng.SetText(RequesterDialog_Message,"{center}"..bF)XGUIEng.SetText(RequesterDialog_Title,e7)XGUIEng.SetText(RequesterDialog_Title.."White",e7)XGUIEng.PushPage(RequesterDialog,false)if Lib.Core.Save.SavingDisabled then self.SavingWasDisabled=true end;DisableSaving(true)self.DialogWindowShown=true else self:DialogQueuePush("OpenDialog",{q,e7,bF,fv})end end;function Lib.Requester.Local:OpenRequesterDialog(q,e7,bF,fv,h6)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(e7)=="string")assert(type(bF)=="string")e7="{center}"..e7;self:OpenDialog(q,e7,bF,fv)XGUIEng.ShowWidget(RequesterDialog_Yes,1)XGUIEng.ShowWidget(RequesterDialog_No,1)XGUIEng.ShowWidget(RequesterDialog_Ok,0)if h6 then XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Ok_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/Cancel_center"))else XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Yes_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/No_center"))end;self.Requester.ActionRequester=nil;if fv then assert(type(fv)=="function")self.Requester.ActionRequester=fv end;local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, true, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Yes,ha)local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, false, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_No,ha)else self:DialogQueuePush("OpenRequesterDialog",{q,e7,bF,fv,h6})end end;function Lib.Requester.Local:OpenSelectionDialog(q,e7,bF,fv,a3)if GUI.GetPlayerID()~=q then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then self:OpenDialog(q,e7,bF,fv)local hj=XGUIEng.GetWidgetID(CustomGame.Widget.KnightsList)XGUIEng.ListBoxPopAll(hj)for f=1,#a3 do XGUIEng.ListBoxPushItem(hj,a3[f])end;XGUIEng.ListBoxSetSelectedIndex(hj,0)CustomGame.Knight=0;local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; if not Framework.IsNetworkGame() then Game.GameTimeSetFactor(GUI.GetPlayerID(), 1) end"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; XGUIEng.PopPage()"ha=ha.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,ha)local hk="/InGame/Singleplayer/CustomGame/ContainerSelection/"XGUIEng.SetText(hk.."HeroComboBoxMain/HeroComboBox","")if a3[1]then XGUIEng.SetText(hk.."HeroComboBoxMain/HeroComboBox",a3[1])end;XGUIEng.PushPage(hk.."HeroComboBoxContainer",false)XGUIEng.PushPage(hk.."HeroComboBoxMain",false)XGUIEng.ShowWidget(hk.."HeroComboBoxContainer",0)local hl={GUI.GetScreenSize()}local at,au=XGUIEng.GetWidgetScreenPosition(RequesterDialog_Ok)XGUIEng.SetWidgetScreenPosition(hk.."HeroComboBoxMain",at-25,au-90*hl[2]/1080)XGUIEng.SetWidgetScreenPosition(hk.."HeroComboBoxContainer",at-25,au-20*hl[2]/1080)else self:DialogQueuePush("OpenSelectionDialog",{q,e7,bF,fv,a3})end end;function Lib.Requester.Local:DialogOverwriteOriginal()OpenDialog_Orig_Windows=OpenDialog;OpenDialog=function(hm,e7,hn)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; XGUIEng.PopPage()"OpenDialog_Orig_Windows(e7,hm)end end;OpenRequesterDialog_Orig_Windows=OpenRequesterDialog;OpenRequesterDialog=function(hm,e7,ho,h6,hp)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_Yes,ha)local ha="XGUIEng.ShowWidget(RequesterDialog, 0)"ha=ha.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_No,ha)OpenRequesterDialog_Orig_Windows(hm,e7,ho,h6,hp)end end end;function Lib.Requester.Local:ShowTextWindow(f7)f7.PlayerID=f7.PlayerID or 1;f7.Button=f7.Button or{}local n=GUI.GetPlayerID()if f7.PlayerID~=n then return end;if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 then self:UpdateChatLogText(f7)return end;self.Chat.Data[n]=f7;self:CloseTextWindow(n)self:AlterChatLog()XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",f7.Content)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}"..f7.Caption)if f7.DisableClose then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/Exit",0)end;self:ShouldShowSlider(f7.Content)XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)end;function Lib.Requester.Local:CloseTextWindow(q)assert(q~=nil)local n=GUI.GetPlayerID()if q~=n then return end;GUI_Chat.CloseChatMenu()end;function Lib.Requester.Local:UpdateChatLogText(f7)XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",f7.Content)end;function Lib.Requester.Local:AlterChatLog()local n=GUI.GetPlayerID()if self.Chat.Visible[n]then return end;self.Chat.Visible[n]=true;self.Chat.History[n]=table.copy(g_Chat.ChatHistory)g_Chat.ChatHistory={}self:AlterChatLogDisplay()end;function Lib.Requester.Local:RestoreChatLog()local n=GUI.GetPlayerID()if not self.Chat.Visible[n]then return end;self.Chat.Visible[n]=false;g_Chat.ChatHistory={}for f=1,#self.Chat.History[n]do GUI_Chat.ChatlogAddMessage(self.Chat.History[n][f])end;self:RestoreChatLogDisplay()self.Chat.History[n]={}self.Chat.Widgets[n]={}self.Chat.Data[n]={}end;function Lib.Requester.Local:UpdateToggleWhisperTarget()local n=GUI.GetPlayerID()local hq="/InGame/Root/Normal/ChatOptions/"if not self.Chat.Data[n]or not self.Chat.Data[n].Button or not self.Chat.Data[n].Button.Action then XGUIEng.ShowWidget(hq.."ToggleWhisperTarget",0)return end;local hr=self.Chat.Data[n].Button.Text;XGUIEng.SetText(hq.."ToggleWhisperTarget","{center}"..hr)end;function Lib.Requester.Local:ShouldShowSlider(bF)local hs=string.len(bF)local ht=1;local hu=0;while true do local aW,aU=string.find(bF,"{cr}",ht)if not aU then break end;if aU-ht<=58 then hs=hs+58-(aU-ht)end;ht=aU+1 end;if hs+hu*55>1000 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/ChatLogSlider",1)end end;function Lib.Requester.Local:OverrideChatLog()GUI_Chat.ChatlogAddMessage_Orig_Requester=GUI_Chat.ChatlogAddMessage;GUI_Chat.ChatlogAddMessage=function(hm)local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ChatlogAddMessage_Orig_Requester(hm)return end;table.insert(Lib.Requester.Local.Chat.History[n],hm)end;GUI_Chat.DisplayChatLog_Orig_Requester=GUI_Chat.DisplayChatLog;GUI_Chat.DisplayChatLog=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.DisplayChatLog_Orig_Requester()end end;GUI_Chat.CloseChatMenu_Orig_Requester=GUI_Chat.CloseChatMenu;GUI_Chat.CloseChatMenu=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CloseChatMenu_Orig_Requester()return end;Lib.Requester.Local:RestoreChatLog()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)end;GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester=GUI_Chat.ToggleWhisperTargetUpdate;GUI_Chat.ToggleWhisperTargetUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTargetUpdate_Orig_Requester()return end;Lib.Requester.Local:UpdateToggleWhisperTarget()end;GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester=GUI_Chat.CheckboxMessageTypeWhisperUpdate;GUI_Chat.CheckboxMessageTypeWhisperUpdate=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.CheckboxMessageTypeWhisperUpdate_Orig_Requester()return end end;GUI_Chat.ToggleWhisperTarget_Orig_Requester=GUI_Chat.ToggleWhisperTarget;GUI_Chat.ToggleWhisperTarget=function()local n=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[n]then GUI_Chat.ToggleWhisperTarget_Orig_Requester()return end;if Lib.Requester.Local.Chat.Data[n].Button.Action then local bd=Lib.Requester.Local.Chat.Data[n]Lib.Requester.Local.Chat.Data[n].Button.Action(bd)end end end;function Lib.Requester.Local:AlterChatLogDisplay()local n=GUI.GetPlayerID()local hv,hw,I,J;local hx;local hq="/InGame/Root/Normal/ChatOptions/"I,J=XGUIEng.GetWidgetLocalPosition(hq.."ToggleWhisperTarget")hv,hw=XGUIEng.GetWidgetSize(hq.."ToggleWhisperTarget")self.Chat.Widgets[n]["ToggleWhisperTarget"]={X=I,Y=J,W=hv,H=hw}hx=self.Chat.Widgets[n]["ToggleWhisperTarget"]I,J=XGUIEng.GetWidgetLocalPosition(hq.."ChatLog")hv,hw=XGUIEng.GetWidgetSize(hq.."ChatLog")self.Chat.Widgets[n]["ChatLog"]={X=I,Y=J,W=hv,H=hw}hx=self.Chat.Widgets[n]["ChatLog"]I,J=XGUIEng.GetWidgetLocalPosition(hq.."ChatLogSlider")hv,hw=XGUIEng.GetWidgetSize(hq.."ChatLogSlider")self.Chat.Widgets[n]["ChatLogSlider"]={X=I,Y=J,W=hv,H=hw}hx=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.ShowWidget(hq.."ChatModeAllPlayers",0)XGUIEng.ShowWidget(hq.."ChatModeTeam",0)XGUIEng.ShowWidget(hq.."ChatModeWhisper",0)XGUIEng.ShowWidget(hq.."ChatChooseModeCaption",0)XGUIEng.ShowWidget(hq.."Background/TitleBig",1)XGUIEng.ShowWidget(hq.."Background/TitleBig/Info",0)XGUIEng.ShowWidget(hq.."ChatLogCaption",0)XGUIEng.ShowWidget(hq.."BGChoose",0)XGUIEng.ShowWidget(hq.."BGChatLog",0)XGUIEng.ShowWidget(hq.."ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/BG",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Close",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Slider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Text",0)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}Test")XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog",15,90)XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog/Name",0,0)XGUIEng.SetTextColor("/InGame/Root/Normal/MessageLog/Name",51,51,121,255)XGUIEng.SetWidgetSize(hq.."ChatLogSlider",46,600)XGUIEng.SetWidgetLocalPosition(hq.."ChatLogSlider",780,130)XGUIEng.SetWidgetSize(hq.."Background/DialogBG/1 (2)/2",150,400)XGUIEng.SetWidgetPositionAndSize(hq.."Background/DialogBG/1 (2)/3",400,500,350,400)XGUIEng.SetWidgetLocalPosition(hq.."ToggleWhisperTarget",280,760)XGUIEng.SetWidgetLocalPosition(hq.."ChatLog",140,150)XGUIEng.SetWidgetSize(hq.."ChatLog",640,560)end;function Lib.Requester.Local:RestoreChatLogDisplay()local n=GUI.GetPlayerID()local hx;local hq="/InGame/Root/Normal/ChatOptions/"hx=self.Chat.Widgets[n]["ToggleWhisperTarget"]XGUIEng.SetWidgetLocalPosition(hq.."ToggleWhisperTarget",hx.X,hx.Y)XGUIEng.SetWidgetSize(hq.."ToggleWhisperTarget",hx.W,hx.H)hx=self.Chat.Widgets[n]["ChatLog"]XGUIEng.SetWidgetLocalPosition(hq.."ChatLog",hx.X,hx.Y)XGUIEng.SetWidgetSize(hq.."ChatLog",hx.W,hx.H)hx=self.Chat.Widgets[n]["ChatLogSlider"]XGUIEng.SetWidgetLocalPosition(hq.."ChatLogSlider",hx.X,hx.Y)XGUIEng.SetWidgetSize(hq.."ChatLogSlider",hx.W,hx.H)XGUIEng.ShowWidget(hq.."ChatModeAllPlayers",1)XGUIEng.ShowWidget(hq.."ChatModeTeam",1)XGUIEng.ShowWidget(hq.."ChatModeWhisper",1)XGUIEng.ShowWidget(hq.."ChatChooseModeCaption",1)XGUIEng.ShowWidget(hq.."Background/TitleBig",1)XGUIEng.ShowWidget(hq.."Background/TitleBig/Info",1)XGUIEng.ShowWidget(hq.."ChatLogCaption",1)XGUIEng.ShowWidget(hq.."BGChoose",1)XGUIEng.ShowWidget(hq.."BGChatLog",1)XGUIEng.ShowWidget(hq.."ChatLogSlider",1)XGUIEng.ShowWidget(hq.."ToggleWhisperTarget",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)end;RegisterModule(Lib.Requester.Name)Lib.Sound=Lib.Sound or{}Lib.Sound.Name="Sound"Lib.Sound.Global={}Lib.Sound.Local={Config={DoAlternateSound=true},SoundBackup={}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/information/Requester")Lib.Require("module/settings/Sound_Text")Lib.Require("module/settings/Sound_API")Lib.Register("module/settings/Sound")function Lib.Sound.Global:Initialize()if not self.IsInstalled then Lib.Sound.Local=nil end;self.IsInstalled=true end;function Lib.Sound.Global:OnSaveGameLoaded()end;function Lib.Sound.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:Initialize()if not self.IsInstalled then Lib.Sound.Global=nil end;self.IsInstalled=true end;function Lib.Sound.Local:OnSaveGameLoaded()end;function Lib.Sound.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:RequestAlternateSound()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.Sound.Text.Request.Title,Lib.Sound.Text.Request.Text,function(hc)Lib.Sound.Local.Config.DoAlternateSound=hc==true end,false)end;function Lib.Sound.Local:AdjustSound(hy,hz,hA,hB,hC)if not self.Config.DoAlternateSound then return end;self:SaveSound()if hy then Sound.SetGlobalVolume(hy)end;if hz then Sound.SetMusicVolume(hz)end;if hA then Sound.SetSpeechVolume(hA)end;if hB then Sound.SetFXSoundpointVolume(hB)Sound.SetFXAtmoVolume(hB)end;if hC then Sound.Set2DFXVolume(hC)Sound.SetFXVolume(hC)end end;function Lib.Sound.Local:SaveSound()if not self.SoundBackup.Saved then self.SoundBackup.Saved=true;self.SoundBackup.FXSP=Sound.GetFXSoundpointVolume()self.SoundBackup.FXAtmo=Sound.GetFXAtmoVolume()self.SoundBackup.FXVol=Sound.GetFXVolume()self.SoundBackup.Sound=Sound.GetGlobalVolume()self.SoundBackup.Music=Sound.GetMusicVolume()self.SoundBackup.Voice=Sound.GetSpeechVolume()self.SoundBackup.UI=Sound.Get2DFXVolume()end end;function Lib.Sound.Local:RestoreSound()if self.SoundBackup.Saved then Sound.SetFXSoundpointVolume(self.SoundBackup.FXSP)Sound.SetFXAtmoVolume(self.SoundBackup.FXAtmo)Sound.SetFXVolume(self.SoundBackup.FXVol)Sound.SetGlobalVolume(self.SoundBackup.Sound)Sound.SetMusicVolume(self.SoundBackup.Music)Sound.SetSpeechVolume(self.SoundBackup.Voice)Sound.Set2DFXVolume(self.SoundBackup.UI)self.SoundBackup={}end end;RegisterModule(Lib.Sound.Name)Lib.Register("module/city/Promotion_Requirements")InitKnightTitleTablesOverwrite=function()KnightTitles={}KnightTitles.Knight=0;KnightTitles.Mayor=1;KnightTitles.Baron=2;KnightTitles.Earl=3;KnightTitles.Marquees=4;KnightTitles.Duke=5;KnightTitles.Archduke=6;NeedsAndRightsByKnightTitle={}NeedsAndRightsByKnightTitle[KnightTitles.Knight]={ActivateNeedForPlayer,{Needs.Nutrition,Needs.Medicine},ActivateRightForPlayer,{Technologies.R_Gathering,Technologies.R_Woodcutter,Technologies.R_StoneQuarry,Technologies.R_HuntersHut,Technologies.R_FishingHut,Technologies.R_CattleFarm,Technologies.R_GrainFarm,Technologies.R_SheepFarm,Technologies.R_IronMine,Technologies.R_Beekeeper,Technologies.R_HerbGatherer,Technologies.R_Nutrition,Technologies.R_Bakery,Technologies.R_Dairy,Technologies.R_Butcher,Technologies.R_SmokeHouse,Technologies.R_Clothes,Technologies.R_Tanner,Technologies.R_Weaver,Technologies.R_Construction,Technologies.R_Trail,Technologies.R_KnockDown,Technologies.R_Sermon}}NeedsAndRightsByKnightTitle[KnightTitles.Mayor]={ActivateNeedForPlayer,{Needs.Clothes},ActivateRightForPlayer,{Technologies.R_Military,Technologies.R_MilitarySword,Technologies.R_Thieves,Technologies.R_Hygiene,Technologies.R_Soapmaker,Technologies.R_BroomMaker,Technologies.R_SpecialEdition,Technologies.R_SpecialEdition_Pavilion,Technologies.R_SpecialEdition_StatueFamily},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Baron]={ActivateNeedForPlayer,{Needs.Hygiene},ActivateRightForPlayer,{Technologies.R_SiegeEngineWorkshop,Technologies.R_BatteringRam,Technologies.R_Pallisade,Technologies.R_Medicine,Technologies.R_Entertainment,Technologies.R_Tavern,Technologies.R_Street,Technologies.R_Festival,Technologies.R_SpecialEdition_Column},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Earl]={ActivateNeedForPlayer,{Needs.Entertainment,Needs.Prosperity},ActivateRightForPlayer,{Technologies.R_MilitaryBow,Technologies.R_Baths,Technologies.R_Prosperity,Technologies.R_Taxes,Technologies.R_SpecialEdition_StatueSettler},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Marquees]={ActivateNeedForPlayer,{Needs.Wealth},ActivateRightForPlayer,{Technologies.R_Theater,Technologies.R_Wealth,Technologies.R_BannerMaker,Technologies.R_SiegeTower,Technologies.R_Wall,Technologies.R_Ballista,Technologies.R_AmmunitionCart,Technologies.R_SpecialEdition_StatueProduction},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Duke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Catapult,Technologies.R_Carpenter,Technologies.R_CandleMaker,Technologies.R_Blacksmith,Technologies.R_SpecialEdition_StatueDario},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Archduke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Victory},StartKnightsPromotionCelebration}if Framework.GetGameExtraNo()>=1 then local hD=4;table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][hD],Technologies.R_Cistern)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][hD],Technologies.R_Beautification_Brazier)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][hD],Technologies.R_Beautification_Shrine)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][hD],Technologies.R_Beautification_Pillar)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][hD],Technologies.R_Beautification_StoneBench)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][hD],Technologies.R_Beautification_Sundial)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Marquees][hD],Technologies.R_Beautification_Vase)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Duke][hD],Technologies.R_Beautification_VictoryColumn)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Archduke][hD],Technologies.R_Beautification_TriumphalArch)end;KnightTitleRequirements={}KnightTitleRequirements[KnightTitles.Mayor]={}KnightTitleRequirements[KnightTitles.Mayor].Headquarters=1;KnightTitleRequirements[KnightTitles.Mayor].Settlers=10;KnightTitleRequirements[KnightTitles.Mayor].Products={{GoodCategories.GC_Clothes,6}}KnightTitleRequirements[KnightTitles.Baron]={}KnightTitleRequirements[KnightTitles.Baron].Settlers=30;KnightTitleRequirements[KnightTitles.Baron].Headquarters=1;KnightTitleRequirements[KnightTitles.Baron].Storehouse=1;KnightTitleRequirements[KnightTitles.Baron].Cathedrals=1;KnightTitleRequirements[KnightTitles.Baron].Products={{GoodCategories.GC_Hygiene,12}}KnightTitleRequirements[KnightTitles.Earl]={}KnightTitleRequirements[KnightTitles.Earl].Settlers=50;KnightTitleRequirements[KnightTitles.Earl].Headquarters=2;KnightTitleRequirements[KnightTitles.Earl].Goods={{Goods.G_Beer,18}}KnightTitleRequirements[KnightTitles.Marquees]={}KnightTitleRequirements[KnightTitles.Marquees].Settlers=70;KnightTitleRequirements[KnightTitles.Marquees].Headquarters=2;KnightTitleRequirements[KnightTitles.Marquees].Storehouse=2;KnightTitleRequirements[KnightTitles.Marquees].Cathedrals=2;KnightTitleRequirements[KnightTitles.Marquees].RichBuildings=20;KnightTitleRequirements[KnightTitles.Duke]={}KnightTitleRequirements[KnightTitles.Duke].Settlers=90;KnightTitleRequirements[KnightTitles.Duke].Storehouse=2;KnightTitleRequirements[KnightTitles.Duke].Cathedrals=2;KnightTitleRequirements[KnightTitles.Duke].Headquarters=3;KnightTitleRequirements[KnightTitles.Duke].DecoratedBuildings={{Goods.G_Banner,9}}KnightTitleRequirements[KnightTitles.Archduke]={}KnightTitleRequirements[KnightTitles.Archduke].Settlers=150;KnightTitleRequirements[KnightTitles.Archduke].Storehouse=3;KnightTitleRequirements[KnightTitles.Archduke].Cathedrals=3;KnightTitleRequirements[KnightTitles.Archduke].Headquarters=3;KnightTitleRequirements[KnightTitles.Archduke].RichBuildings=30;KnightTitleRequirements[KnightTitles.Archduke].FullDecoratedBuildings=30;CreateTechnologyKnightTitleTable()end;Lib.Register("module/city/Promotion_Helper")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Helper={}Lib.Promotion.Helper.OverwritePromotionHelper=function()DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist;DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist;DoesNeededNumberOfGoodTypesForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist;DoNeededNumberOfConsumedGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist;DoNumberOfProductsInCategoryExist=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist;DoNeededDiversityBuffForKnightTitleExist=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist;DoCustomFunctionForKnightTitleSucceed=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed;DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist;DoNeededSpecialBuildingUpgradeForKnightTitleExist=Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist;DoesNeededCityReputationForKnightTitleExist=Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist;DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist;DoNeededNumberOfRichBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist;DoNeededNumberOfGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist;DoesNeededNumberOfSettlersForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist;CanKnightBePromoted=Lib.Promotion.Helper.CanKnightBePromoted;VictroryBecauseOfTitle=Lib.Promotion.Helper.VictroryBecauseOfTitle end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].Category==nil then return end;if hF then local hG=KnightTitleRequirements[hE].Category[hF][1]local hH=KnightTitleRequirements[hE].Category[hF][2]local hI=0;if hG==EntityCategories.Spouse then hI=Logic.GetNumberOfSpouses(q)else local dk={Logic.GetPlayerEntitiesInCategory(q,hG)}for f=1,#dk do if Logic.IsBuilding(dk[f])==1 then if Logic.IsConstructionComplete(dk[f])==1 then hI=hI+1 end else hI=hI+1 end end end;if hI>=hH then return true,hI,hH end;return false,hI,hH else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Category do hJ,hK,hL=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].Entities==nil then return end;if hF then local cZ=KnightTitleRequirements[hE].Entities[hF][1]local hH=KnightTitleRequirements[hE].Entities[hF][2]local dk=GetPlayerEntities(q,cZ)local hI=0;for f=1,#dk do if Logic.IsBuilding(dk[f])==1 then if Logic.IsConstructionComplete(dk[f])==1 then hI=hI+1 end else hI=hI+1 end end;if hI>=hH then return true,hI,hH end;return false,hI,hH else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Entities do hJ,hK,hL=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].Goods==nil then return end;if hF then local fD=KnightTitleRequirements[hE].Goods[hF][1]local hH=KnightTitleRequirements[hE].Goods[hF][2]local hI=GetPlayerGoodsInSettlement(fD,q,true)if hI>=hH then return true,hI,hH end;return false,hI,hH else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Goods do hJ,hK,hL=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].Consume==nil then return end;if hF then CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}local fD=KnightTitleRequirements[hE].Consume[hF][1]local hM=CONST_CONSUMED_GOODS_COUNTER[q][fD]or 0;local hN=KnightTitleRequirements[hE].Consume[hF][2]if hM>=hN then return true,hM,hN else return false,hM,hN end else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Consume do hJ,hK,hL=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist(q,hE,f)if hJ==false then return false,hK,hL end end;return true,hK,hL end end;Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist=function(q,hE,hF)if KnightTitleRequirements[hE].Products==nil then return end;if hF then local hM=0;local hO=KnightTitleRequirements[hE].Products[hF][2]local hP=KnightTitleRequirements[hE].Products[hF][1]local hQ={Logic.GetGoodTypesInGoodCategory(hP)}for f=1,#hQ do hM=hM+GetPlayerGoodsInSettlement(hQ[f],q,true)end;return hM>=hO,hM,hO else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Products do hJ,hK,hL=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].Buff==nil then return end;if hF then local hR=KnightTitleRequirements[hE].Buff[hF]if Logic.GetBuff(q,hR)and Logic.GetBuff(q,hR)~=0 then return true end;return false else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Buff do hJ,hK,hL=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed=function(q,hE,hF)if KnightTitleRequirements[hE].Custom==nil then return end;if hF then return KnightTitleRequirements[hE].Custom[hF][1](q,hE,hF)else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].Custom do hJ,hK,hL=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=function(q,hE,hF)if KnightTitleRequirements[hE].DecoratedBuildings==nil then return end;if hF then local hS={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local hT=KnightTitleRequirements[hE].DecoratedBuildings[hF][1]local hU=KnightTitleRequirements[hE].DecoratedBuildings[hF][2]local hV=0;for f=1,#hS do local hW=hS[f]local hX=Logic.GetBuildingWealthGoodState(hW,hT)if hX>0 then hV=hV+1 end end;if hV>=hU then return true,hV,hU else return false,hV,hU end else local hJ,hK,hL;for f=1,#KnightTitleRequirements[hE].DecoratedBuildings do hJ,hK,hL=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(q,hE,f)if hJ==false then return hJ,hK,hL end end;return hJ end end;Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist=function(q,hE,hY)local hZ;local h_;if hY==EntityCategories.Headquarters then hZ=Logic.GetHeadquarters(q)h_="Headquarters"elseif hY==EntityCategories.Storehouse then hZ=Logic.GetStoreHouse(q)h_="Storehouse"elseif hY==EntityCategories.Cathedrals then hZ=Logic.GetCathedral(q)h_="Cathedrals"else return end;if KnightTitleRequirements[hE][h_]==nil then return end;local i0=KnightTitleRequirements[hE][h_]if hZ~=nil then local i1=Logic.GetUpgradeLevel(hZ)if i1>=i0 then return true,i1,i0 else return false,i1,i0 end else return false,0,i0 end end;Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist=function(q,hE)if KnightTitleRequirements[hE].Reputation==nil then return end;local hH=KnightTitleRequirements[hE].Reputation;if not hH then return end;local hI=math.floor(Logic.GetCityReputation(q)*100+0.5)if hI>=hH then return true,hI,hH end;return false,hI,hH end;Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=function(q,hE)if KnightTitleRequirements[hE].FullDecoratedBuildings==nil then return end;local hS={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local hU=KnightTitleRequirements[hE].FullDecoratedBuildings;local hV=0;for f=1,#hS do local hW=hS[f]local i2=0;if Logic.GetBuildingWealthGoodState(hW,Goods.G_Banner)>0 then i2=i2+1 end;if Logic.GetBuildingWealthGoodState(hW,Goods.G_Sign)>0 then i2=i2+1 end;if Logic.GetBuildingWealthGoodState(hW,Goods.G_Candle)>0 then i2=i2+1 end;if Logic.GetBuildingWealthGoodState(hW,Goods.G_Ornament)>0 then i2=i2+1 end;if i2>=4 then hV=hV+1 end end;if hV>=hU then return true,hV,hU else return false,hV,hU end end;Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist=function(q,hE)if KnightTitleRequirements[hE].RichBuildings==nil then return end;local i3=Logic.GetNumberOfProsperBuildings(q,1)local i4=KnightTitleRequirements[hE].RichBuildings;if i4==-1 then i4=Logic.GetNumberOfPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)i4=i4-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_Barracks)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_BarracksArchers)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(q,Entities.B_SiegeEngineWorkshop)end;if i3>=i4 then return true,i3,i4 else return false,i3,i4 end end;Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist=function(q,hE)if KnightTitleRequirements[hE].Good==nil then return end;local hG=KnightTitleRequirements[hE].Good[1]local i5={Logic.GetPlayerEntitiesInCategory(q,hG)}local hM=0;for f=1,#i5 do local B=i5[f]local cZ=Logic.GetEntityType(B)if cZ~=Entities.B_TableBeer and cZ~=Entities.B_Marketslot and Logic.IsEntityTypeInCategory(cZ,EntityCategories.Marketplace)==0 and Logic.IsKnight(B)==false then local i6=Logic.GetAmountOnOutStockByIndex(B,0)hM=hM+i6 end end;local hN=KnightTitleRequirements[hE].Good[2]if hM>=hN then return true,hM,hN else return false,hM,hN end end;Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist=function(q,hE)if KnightTitleRequirements[hE].Settlers==nil then return end;local i7=KnightTitleRequirements[hE].Settlers;if i7~=nil then local i8=Logic.GetNumberOfEmployedWorkers(q)if i8>=i7 then return true,i8,i7 else return false,i8,i7 end end end;Lib.Promotion.Helper.CanKnightBePromoted=function(q,hE)if hE==nil then hE=Logic.GetKnightTitle(q)+1 end;if Logic.CanStartFestival(q,1)==true then if KnightTitleRequirements[hE]~=nil and DoesNeededNumberOfSettlersForKnightTitleExist(q,hE)~=false and DoNeededNumberOfGoodsForKnightTitleExist(q,hE)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,hE,EntityCategories.Headquarters)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,hE,EntityCategories.Storehouse)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,hE,EntityCategories.Cathedrals)~=false and DoNeededNumberOfRichBuildingsForKnightTitleExist(q,hE)~=false and DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(q,hE)~=false and DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(q,hE)~=false and DoesNeededCityReputationForKnightTitleExist(q,hE)~=false and DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(q,hE)~=false and DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(q,hE)~=false and DoesNeededNumberOfGoodTypesForKnightTitleExist(q,hE)~=false and DoNeededDiversityBuffForKnightTitleExist(q,hE)~=false and DoCustomFunctionForKnightTitleSucceed(q,hE)~=false and DoNeededNumberOfConsumedGoodsForKnightTitleExist(q,hE)~=false and DoNumberOfProductsInCategoryExist(q,hE)~=false then return true end end;return false end;Lib.Promotion.Helper.VictroryBecauseOfTitle=function()QuestTemplate:TerminateEventsAndStuff()Victory(g_VictoryAndDefeatType.VictoryMissionComplete)end;Lib.Register("module/city/Promotion_Config")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Config={}function Lib.Promotion.Config:InitAddonText()if Framework.GetGameExtraNo()~=0 then Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Gems]={de="Edelsteine beschaffen",en="Obtain gems",fr="Se procurer des Gemmes"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Olibanum]={de="Weihrauch beschaffen",en="Obtain olibanum",fr="Se procurer de l'encens"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_MusicalInstrument]={de="Muskinstrumente beschaffen",en="Obtain instruments",fr="Se procurer des instruments de musique"}end end;function Lib.Promotion.Config:InitTexturePositions()g_TexturePositions.EntityCategories[EntityCategories.GC_Food_Supplier]={1,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Clothes_Supplier]={1,2}g_TexturePositions.EntityCategories[EntityCategories.GC_Hygiene_Supplier]={16,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Entertainment_Supplier]={1,4}g_TexturePositions.EntityCategories[EntityCategories.GC_Luxury_Supplier]={16,3}g_TexturePositions.EntityCategories[EntityCategories.GC_Weapon_Supplier]={1,7}g_TexturePositions.EntityCategories[EntityCategories.GC_Medicine_Supplier]={2,10}g_TexturePositions.EntityCategories[EntityCategories.Outpost]={12,3}g_TexturePositions.EntityCategories[EntityCategories.Spouse]={5,15}g_TexturePositions.EntityCategories[EntityCategories.CattlePasture]={3,16}g_TexturePositions.EntityCategories[EntityCategories.SheepPasture]={4,1}g_TexturePositions.EntityCategories[EntityCategories.Soldier]={7,12}g_TexturePositions.EntityCategories[EntityCategories.GrainField]={14,2}g_TexturePositions.EntityCategories[EntityCategories.BeeHive]={2,1}g_TexturePositions.EntityCategories[EntityCategories.OuterRimBuilding]={3,4}g_TexturePositions.EntityCategories[EntityCategories.CityBuilding]={8,1}g_TexturePositions.EntityCategories[EntityCategories.Leader]={7,11}g_TexturePositions.EntityCategories[EntityCategories.Range]={9,8}g_TexturePositions.EntityCategories[EntityCategories.Melee]={9,7}g_TexturePositions.EntityCategories[EntityCategories.SiegeEngine]={2,15}g_TexturePositions.Entities[Entities.B_Beehive]={2,1}g_TexturePositions.Entities[Entities.B_Cathedral_Big]={3,12}g_TexturePositions.Entities[Entities.B_CattlePasture]={3,16}g_TexturePositions.Entities[Entities.B_GrainField_ME]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NA]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NE]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_SE]={1,13}g_TexturePositions.Entities[Entities.U_MilitaryBallista]={10,5}g_TexturePositions.Entities[Entities.B_Outpost]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_ME]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NA]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NE]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_SE]={12,3}g_TexturePositions.Entities[Entities.B_SheepPasture]={4,1}g_TexturePositions.Entities[Entities.U_SiegeEngineCart]={9,4}g_TexturePositions.Entities[Entities.U_Trebuchet]={9,1}g_TexturePositions.Needs[Needs.Medicine]={2,10}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_1]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_2]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_3]={4,7}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_1]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_2]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_3]={4,5}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_1]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_2]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_3]={4,6}g_TexturePositions.Buffs=g_TexturePositions.Buffs or{}g_TexturePositions.Buffs[Buffs.Buff_ClothesDiversity]={1,2}g_TexturePositions.Buffs[Buffs.Buff_EntertainmentDiversity]={1,4}g_TexturePositions.Buffs[Buffs.Buff_FoodDiversity]={1,1}g_TexturePositions.Buffs[Buffs.Buff_HygieneDiversity]={1,3}g_TexturePositions.Buffs[Buffs.Buff_Colour]={5,11}g_TexturePositions.Buffs[Buffs.Buff_Entertainers]={5,12}g_TexturePositions.Buffs[Buffs.Buff_ExtraPayment]={1,8}g_TexturePositions.Buffs[Buffs.Buff_Sermon]={4,14}g_TexturePositions.Buffs[Buffs.Buff_Spice]={5,10}g_TexturePositions.Buffs[Buffs.Buff_NoTaxes]={1,6}g_TexturePositions.GoodCategories=g_TexturePositions.GoodCategories or{}g_TexturePositions.GoodCategories[GoodCategories.GC_Ammunition]={10,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Animal]={4,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Clothes]={1,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Document]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Entertainment]={1,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Food]={1,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Gold]={1,8}g_TexturePositions.GoodCategories[GoodCategories.GC_Hygiene]={16,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Luxury]={16,3}g_TexturePositions.GoodCategories[GoodCategories.GC_Medicine]={2,10}g_TexturePositions.GoodCategories[GoodCategories.GC_None]={15,16}g_TexturePositions.GoodCategories[GoodCategories.GC_RawFood]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_RawMedicine]={2,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Research]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Resource]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Tools]={4,12}g_TexturePositions.GoodCategories[GoodCategories.GC_Water]={1,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Weapon]={8,5}end;function Lib.Promotion.Config:InitTexturePositionsAddon()if Framework.GetGameExtraNo()~=0 then g_TexturePositions.Entities[Entities.B_GrainField_AS]={1,13}g_TexturePositions.Entities[Entities.B_Outpost_AS]={12,3}g_TexturePositions.Buffs[Buffs.Buff_Gems]={1,1,1}g_TexturePositions.Buffs[Buffs.Buff_MusicalInstrument]={1,3,1}g_TexturePositions.Buffs[Buffs.Buff_Olibanum]={1,2,1}end end;Lib.Promotion.Config.RequirementWidgets={[1]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Settlers",[2]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Goods",[3]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/RichBuildings",[4]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Castle",[5]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Storehouse",[6]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Cathedral"}if GoodCategories then Lib.Promotion.Config.GoodCategoryNames={[GoodCategories.GC_Ammunition]={de="Munition",en="Ammunition",fr="Munition"},[GoodCategories.GC_Animal]={de="Nutztiere",en="Livestock",fr="Animaux d'élevage"},[GoodCategories.GC_Clothes]={de="Kleidung",en="Clothes",fr="Vêtements"},[GoodCategories.GC_Document]={de="Dokumente",en="Documents",fr="Documents"},[GoodCategories.GC_Entertainment]={de="Unterhaltung",en="Entertainment",fr="Divertissement"},[GoodCategories.GC_Food]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_Gold]={de="Gold",en="Gold",fr="Or"},[GoodCategories.GC_Hygiene]={de="Hygieneartikel",en="Hygiene",fr="Hygiène"},[GoodCategories.GC_Luxury]={de="Dekoration",en="Decoration",fr="Décoration"},[GoodCategories.GC_Medicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_None]={de="Nichts",en="None",fr="Rien"},[GoodCategories.GC_RawFood]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_RawMedicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_Research]={de="Forschung",en="Research",fr="Recherche"},[GoodCategories.GC_Resource]={de="Rohstoffe",en="Resource",fr="Ressources"},[GoodCategories.GC_Tools]={de="Werkzeug",en="Tools",fr="Outils"},[GoodCategories.GC_Water]={de="Wasser",en="Water",fr="Eau"},[GoodCategories.GC_Weapon]={de="Waffen",en="Weapon",fr="Armes"}}end;if Buffs then Lib.Promotion.Config.BuffTypeNames={[Buffs.Buff_ClothesDiversity]={de="Vielfältige Kleidung",en="Clothes variety",fr="Diversité vestimentaire"},[Buffs.Buff_Colour]={de="Farben beschaffen",en="Obtain color",fr="Se procurer des couleurs"},[Buffs.Buff_Entertainers]={de="Gaukler anheuern",en="Hire entertainer",fr="Engager des saltimbanques"},[Buffs.Buff_EntertainmentDiversity]={de="Vielfältige Unterhaltung",en="Entertainment variety",fr="Diversité des divertissements"},[Buffs.Buff_ExtraPayment]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},[Buffs.Buff_Festival]={de="Fest veranstalten",en="Hold Festival",fr="Organiser une fête"},[Buffs.Buff_FoodDiversity]={de="Vielfältige Nahrung",en="Food variety",fr="Diversité alimentaire"},[Buffs.Buff_HygieneDiversity]={de="Vielfältige Hygiene",en="Hygiene variety",fr="Diversité hygiénique"},[Buffs.Buff_NoTaxes]={de="Steuerbefreiung",en="No taxes",fr="Exonération fiscale"},[Buffs.Buff_Sermon]={de="Pregigt abhalten",en="Hold sermon",fr="Tenir des prêches"},[Buffs.Buff_Spice]={de="Salz beschaffen",en="Obtain salt",fr="Se procurer du sel"}}end;Lib.Promotion.Config.Description={Settlers={Title={de="Benötigte Siedler",en="Needed settlers",fr="Settlers nécessaires"},Text={de="- Benötigte Menge an Siedlern",en="- Needed number of settlers",fr="- Quantité de settlers nécessaire"}},RichBuildings={Title={de="Reiche Häuser",en="Rich city buildings",fr="Bâtiments riches"},Text={de="- Menge an reichen Stadtgebäuden",en="- Needed amount of rich city buildings",fr="- Quantité de bâtiments de la ville riches"}},Goods={Title={de="Waren lagern",en="Store Goods",fr="Entreposer des marchandises"},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},FullDecoratedBuildings={Title={de="Dekorierte Häuser",en="Decorated City buildings",fr="Bâtiments décorés"},Text={de="- Menge an voll dekorierten Gebäuden",en="- Amount of full decoraded city buildings",fr="- Quantité de bâtiments entièrement décorés"}},DecoratedBuildings={Title={de="Dekoration",en="Decoration",fr="Décoration"},Text={de="- Menge an Dekorationsgütern in der Siedlung",en="- Amount of decoration goods in settlement",fr="- Quantité de biens de décoration dans la ville"}},Headquarters={Title={de="Burgstufe",en="Castle level",fr="Niveau du château"},Text={de="- Benötigte Ausbauten der Burg",en="- Needed castle upgrades",fr="- Améliorations nécessaires du château"}},Storehouse={Title={de="Lagerhausstufe",en="Storehouse level",fr="Niveau de l'entrepôt"},Text={de="- Benötigte Ausbauten des Lagerhauses",en="- Needed storehouse upgrades",fr="- Améliorations nécessaires de l'entrepôt"}},Cathedrals={Title={de="Kirchenstufe",en="Cathedral level",fr="Niveau de la cathédrale"},Text={de="- Benötigte Ausbauten der Kirche",en="- Needed cathedral upgrades",fr="- Améliorations nécessaires de la cathédrale"}},Reputation={Title={de="Ruf der Stadt",en="City reputation",fr="Réputation de la ville"},Text={de="- Benötigter Ruf der Stadt",en="- Needed city reputation",fr="- Réputation de la ville nécessaire"}},EntityCategoryDefault={Title={de="",en="",fr=""},Text={de="- Benötigte Anzahl",en="- Needed amount",fr="- Nombre requis"}},Cattle={Title={de="Kühe",en="Cattle",fr="Vaches"},Text={de="- Benötigte Menge an Kühen",en="- Needed amount of cattle",fr="- Quantité de vaches nécessaire"}},Sheep={Title={de="Schafe",en="Sheeps",fr="Moutons"},Text={de="- Benötigte Menge an Schafen",en="- Needed amount of sheeps",fr="- Quantité de moutons nécessaire"}},Outposts={Title={de="Territorien",en="Territories",fr="Territoires"},Text={de="- Zu erobernde Territorien",en="- Territories to claim",fr="- Territoires à conquérir"}},CityBuilding={Title={de="Stadtgebäude",en="City buildings",fr="Bâtiment de la ville"},Text={de="- Menge benötigter Stadtgebäude",en="- Needed amount of city buildings",fr="- Quantité de bâtiments urbains nécessaires"}},OuterRimBuilding={Title={de="Rohstoffgebäude",en="Gatherer",fr="Cueilleur"},Text={de="- Menge benötigter Rohstoffgebäude",en="- Needed amount of gatherer",fr="- Quantité de bâtiments de matières premières nécessaires"}},FarmerBuilding={Title={de="Farmeinrichtungen",en="Farming structure",fr="Installations de la ferme"},Text={de="- Menge benötigter Nutzfläche",en="- Needed amount of farming structure",fr="- Quantité de surface utile nécessaire"}},Consume={Title={de="",en="",fr=""},Text={de="- Durch Siedler zu konsumierende Menge",en="- Amount to be consumed by the settlers",fr="- Quantité à consommer par les settlers"}},Products={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},Buff={Title={de="Bonus aktivieren",en="Activate Buff",fr="Activer bonus"},Text={de="- Aktiviere diesen Bonus auf den Ruf der Stadt",en="- Raise the city reputatition with this buff",fr="- Active ce bonus sur la réputation de la ville"}},Leader={Title={de="Batalione",en="Battalions",fr="Battalions"},Text={de="- Menge an Batalionen unterhalten",en="- Battalions you need under your command",fr="- Maintenir une quantité de bataillons"}},Soldiers={Title={de="Soldaten",en="Soldiers",fr="Soldats"},Text={de="- Menge an Streitkräften unterhalten",en="- Soldiers you need under your command",fr="- Maintenir une quantité de forces armées"}},Worker={Title={de="Arbeiter",en="Workers",fr="Travailleurs"},Text={de="- Menge an arbeitender Bevölkerung",en="- Workers you need under your reign",fr="- Quantité de population au travail"}},Entities={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed Amount",fr="- Quantité nécessaire"}},Buildings={Title={de="Gebäude",en="Buildings",fr="Bâtiments"},Text={de="- Gesamtmenge an Gebäuden",en="- Amount of buildings",fr="- Total des bâtiments"}},Weapons={Title={de="Waffen",en="Weapons",fr="Armes"},Text={de="- Benötigte Menge an Waffen",en="- Needed amount of weapons",fr="- Quantité d'armes nécessaire"}},HeavyWeapons={Title={de="Belagerungsgeräte",en="Siege Engines",fr="Matériel de siège"},Text={de="- Benötigte Menge an Belagerungsgeräten",en="- Needed amount of siege engine",fr="- Quantité de matériel de siège nécessaire"}},Spouse={Title={de="Ehefrauen",en="Spouses",fr="Épouses"},Text={de="- Benötigte Anzahl Ehefrauen in der Stadt",en="- Needed amount of spouses in your city",fr="- Nombre d'épouses nécessaires dans la ville"}}}Lib.Register("module/city/Promotion_API")Lib.Require("comfort/IsLocalScript")Lib.Register("module/faker/Technology_API")function AddCustomTechnology(c8,r,et)Lib.Technology.Shared:AddCustomTechnology(c8,r,et)end;API.AddCustomTechnology=AddCustomTechnology;Lib.Technology=Lib.Technology or{}Lib.Technology.Name="Technology"Lib.Technology.Global={}Lib.Technology.Local={}Lib.Technology.Shared={CustomTechnologySequence=0,CustomTechnologies={}}CONST_TECHNOLOGY_TO_INDEX={}Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/faker/Technology_API")Lib.Register("module/faker/Technology")function Lib.Technology.Global:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Local=nil end;self.IsInstalled=true end;function Lib.Technology.Global:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Local:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Global=nil end;self.IsInstalled=true end;function Lib.Technology.Local:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Shared:AddCustomTechnology(c8,r,et)if Technologies[c8]then return end;self.CustomTechnologySequence=self.CustomTechnologySequence+1;local i9={c8,self.CustomTechnologySequence,et,{},r}table.insert(self.CustomTechnologies,i9)Technologies[c8]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[c8]]=#self.CustomTechnologies;CONST_TECHNOLOGY_TO_INDEX[c8]=#self.CustomTechnologies;if IsLocalScript()then AddStringText("UI_ObjectNames/"..c8,r)g_TexturePositions.Technologies[Technologies[c8]]=et else for f=1,8 do Logic.TechnologySetState(f,Technologies[c8],0)end end end;function Lib.Technology.Shared:IsCustomTechnology(ia)return ia>=1000 and CONST_TECHNOLOGY_TO_INDEX[ia]~=nil end;function Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared.Orig_Logic_TechnologyGetState=Logic.TechnologyGetState;Logic.TechnologyGetState=function(q,ia)return Lib.Technology.Shared:GetTechnologyState(q,ia)end;if not IsLocalScript()then Lib.Technology.Shared.Orig_Logic_TechnologySetState=Logic.TechnologySetState;Logic.TechnologySetState=function(q,ia,bC)Lib.Technology.Shared:SetTechnologyState(q,ia,bC)end end end;function Lib.Technology.Shared:InitNewTechnologies()self.CustomTechnologySequence=0;for g,h in pairs(Technologies)do if self.CustomTechnologySequence<h then self.CustomTechnologySequence=h end end;self.CustomTechnologySequence=self.CustomTechnologySequence+1000-self.CustomTechnologySequence;for f=1,#self.CustomTechnologies do self.CustomTechnologySequence=self.CustomTechnologySequence+1;self.CustomTechnologies[f][2]=self.CustomTechnologySequence;local bd=self.CustomTechnologies[f]Technologies[bd[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[bd[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[bd[1]]=f;if IsLocalScript()then AddStringText("UI_ObjectNames/"..bd[1],bd[4])g_TexturePositions.Technologies[Technologies[bd[1]]]=bd[3]end end end;function Lib.Technology.Shared:RestoreNewTechnologies()for f=1,#self.CustomTechnologies do local bd=self.CustomTechnologies[f]Technologies[bd[1]]=bd[2]CONST_TECHNOLOGY_TO_INDEX[Technologies[bd[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[bd[1]]=f end end;function Lib.Technology.Shared:GetTechnologyState(q,ia)if ia and self:IsCustomTechnology(ia)then local cu=CONST_TECHNOLOGY_TO_INDEX[ia]if self.CustomTechnologies[cu]then return self.CustomTechnologies[cu][4][q]or TechnologyStates.Locked end end;return self.Orig_Logic_TechnologyGetState(q,ia)end;function Lib.Technology.Shared:SetTechnologyState(q,ia,bC)if ia and self:IsCustomTechnology(ia)then local cu=CONST_TECHNOLOGY_TO_INDEX[ia]if self.CustomTechnologies[cu]then self.CustomTechnologies[cu][4][q]=bC;RequestHiResDelay(1,ExecuteLocal,[[Lib.Technology.Shared.CustomTechnologies[%d][4][%d] = %d]],cu,q,bC)return end end;self.Orig_Logic_TechnologySetState(q,ia,bC)end;RegisterModule(Lib.Technology.Name)Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Name="Promotion"Lib.Promotion.Global={TechnologiesToResearch={}}Lib.Promotion.Local={}Lib.Promotion.Shared={TechnologyConfig={{"R_MilitarySword","UI_ObjectNames/BuySwordfighters",{9,7,0},0},{"R_MilitaryBow","UI_ObjectNames/BuyBowmen",{9,8,0},0}}}CONST_REQUIREMENT_TOOLTIP_TYPE={}CONST_CONSUMED_GOODS_COUNTER={}Lib.Require("core/Core")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UITools")Lib.Require("module/city/Promotion_API")Lib.Require("module/city/Promotion_Config")Lib.Require("module/city/Promotion_Helper")Lib.Require("module/city/Promotion_Requirements")Lib.Register("module/city/Promotion")function Lib.Promotion.Global:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:OverrideKnightTitleChanged()self:OverwriteConsumedGoods()self:InitRelatedTechnologies()Lib.Promotion.Local=nil end;self.IsInstalled=true end;function Lib.Promotion.Global:OnSaveGameLoaded()end;function Lib.Promotion.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()for f=1,8 do ActivateNeedsAndRightsForPlayerByKnightTitle(f,0)end;self.LoadscreenClosed=true elseif aD==Report.KnightTitleChanged then self:UnlockRelatedTechnologies(arg[1],arg[2])local ib=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=ib or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aD==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Global:RegisterConsumedGoods(q,ic)CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}CONST_CONSUMED_GOODS_COUNTER[q][ic]=CONST_CONSUMED_GOODS_COUNTER[q][ic]or 0;CONST_CONSUMED_GOODS_COUNTER[q][ic]=CONST_CONSUMED_GOODS_COUNTER[q][ic]+1 end;function Lib.Promotion.Global:OverrideKnightTitleChanged()GameCallback_KnightTitleChanged_Orig_Promo=GameCallback_KnightTitleChanged;GameCallback_KnightTitleChanged=function(q,id)GameCallback_KnightTitleChanged_Orig_Promo(q,id)SendReport(Report.KnightTitleChanged,q,id)SendReportToLocal(Report.KnightTitleChanged,q,id)end end;function Lib.Promotion.Global:OverwriteConsumedGoods()GameCallback_ConsumeGood_Orig_Promo=GameCallback_ConsumeGood;GameCallback_ConsumeGood=function(ie,ic,ig)GameCallback_ConsumeGood_Orig_Promo(ie,ic,ig)SendReport(Report.GoodsConsumed,ie,ic,ig)SendReportToLocal(Report.GoodsConsumed,ie,ic,ig)end end;function Lib.Promotion.Global:InitRelatedTechnologies()self.TechnologiesToResearch[Technologies.R_MilitaryBow]={Technologies.R_BarracksArchers,Technologies.R_BowMaker}self.TechnologiesToResearch[Technologies.R_MilitarySword]={Technologies.R_Barracks,Technologies.R_SwordSmith}end;function Lib.Promotion.Global:UnlockRelatedTechnologies(q,id)if NeedsAndRightsByKnightTitle[id]then for g,h in pairs(NeedsAndRightsByKnightTitle[id][4])do if self.TechnologiesToResearch[h]then for gn,i9 in pairs(self.TechnologiesToResearch[h])do if Logic.TechnologyGetState(q,i9)==0 or Logic.TechnologyGetState(q,i9)==2 then Logic.TechnologySetState(q,i9,3)end end end end end end;function Lib.Promotion.Local:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()self:InitTexturePositions()self:OverwriteUpdateRequirements()self:OverwriteTooltips()Lib.Promotion.Global=nil end;self.IsInstalled=true end;function Lib.Promotion.Local:OnSaveGameLoaded()end;function Lib.Promotion.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()self.LoadscreenClosed=true elseif aD==Report.KnightTitleChanged then local ib=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=ib or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aD==Report.GoodsConsumed then local n=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(n,arg[2])end end;function Lib.Promotion.Local:RegisterConsumedGoods(q,ic)CONST_CONSUMED_GOODS_COUNTER[q]=CONST_CONSUMED_GOODS_COUNTER[q]or{}CONST_CONSUMED_GOODS_COUNTER[q][ic]=CONST_CONSUMED_GOODS_COUNTER[q][ic]or 0;CONST_CONSUMED_GOODS_COUNTER[q][ic]=CONST_CONSUMED_GOODS_COUNTER[q][ic]+1 end;function Lib.Promotion.Local:InitTexturePositions()Lib.Promotion.Config:InitTexturePositions()Lib.Promotion.Config:InitTexturePositionsAddon()end;function Lib.Promotion.Local:OverwriteUpdateRequirements()GUI_Knight.UpdateRequirements=function()local ih=Lib.Promotion.Config.RequirementWidgets;local ii=1;local n=GUI.GetPlayerID()local ij=Logic.GetKnightTitle(n)local ik=ij+1;local eb=Logic.GetKnightID(n)local dx=Logic.GetEntityType(eb)XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitle","{center}"..GUI_Knight.GetTitleNameByTitleID(dx,ik))XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitleWhite","{center}"..GUI_Knight.GetTitleNameByTitleID(dx,ik))if KnightTitleRequirements[ik].Settlers~=nil then ChangeIcon(ih[ii].."/Icon",{5,16})local il,im,hH=DoesNeededNumberOfSettlersForKnightTitleExist(n,ik)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Settlers"ii=ii+1 end;if KnightTitleRequirements[ik].RichBuildings~=nil then ChangeIcon(ih[ii].."/Icon",{8,4})local il,im,hH=DoNeededNumberOfRichBuildingsForKnightTitleExist(n,ik)if hH==-1 then hH=Logic.GetNumberOfPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)end;XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="RichBuildings"ii=ii+1 end;if KnightTitleRequirements[ik].Headquarters~=nil then ChangeIcon(ih[ii].."/Icon",{4,7})local il,im,hH=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,ik,EntityCategories.Headquarters)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im+1 .."/"..hH+1)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Headquarters"ii=ii+1 end;if KnightTitleRequirements[ik].Storehouse~=nil then ChangeIcon(ih[ii].."/Icon",{4,6})local il,im,hH=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,ik,EntityCategories.Storehouse)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im+1 .."/"..hH+1)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Storehouse"ii=ii+1 end;if KnightTitleRequirements[ik].Cathedrals~=nil then ChangeIcon(ih[ii].."/Icon",{4,5})local il,im,hH=DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,ik,EntityCategories.Cathedrals)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im+1 .."/"..hH+1)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Cathedrals"ii=ii+1 end;if KnightTitleRequirements[ik].FullDecoratedBuildings~=nil then local il,im,hH=DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(n,ik)local hG=KnightTitleRequirements[ik].FullDecoratedBuildings;ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Needs[Needs.Wealth])XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="FullDecoratedBuildings"ii=ii+1 end;if KnightTitleRequirements[ik].Reputation~=nil then ChangeIcon(ih[ii].."/Icon",{5,14})local il,im,hH=DoesNeededCityReputationForKnightTitleExist(n,ik)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Reputation"ii=ii+1 end;if KnightTitleRequirements[ik].Goods~=nil then for f=1,#KnightTitleRequirements[ik].Goods do local fD=KnightTitleRequirements[ik].Goods[f][1]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Goods[fD])local il,im,hH=DoesNeededNumberOfGoodTypesForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Goods"..f;ii=ii+1 end end;if KnightTitleRequirements[ik].Category~=nil then for f=1,#KnightTitleRequirements[ik].Category do local df=KnightTitleRequirements[ik].Category[f][1]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.EntityCategories[df])local il,im,hH=DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)local i5={Logic.GetEntityTypesInCategory(df)}if Logic.IsEntityTypeInCategory(i5[1],EntityCategories.GC_Weapon_Supplier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Weapons"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.SiegeEngine)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="HeavyWeapons"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.Spouse)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Spouse"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.Worker)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Worker"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.Soldier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Soldiers"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.Leader)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Leader"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.Outpost)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Outposts"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.CattlePasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Cattle"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.SheepPasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Sheep"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.CityBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="CityBuilding"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.OuterRimBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="OuterRimBuilding"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.GrainField)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.BeeHive)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(i5[1],EntityCategories.AttackableBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Buildings"..f else CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="EntityCategoryDefault"..f end;ii=ii+1 end end;if KnightTitleRequirements[ik].Entities~=nil then for f=1,#KnightTitleRequirements[ik].Entities do local cZ=KnightTitleRequirements[ik].Entities[f][1]local eY=Logic.GetEntityTypeName(cZ)ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Entities[cZ])local il,im,hH=DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)local io="Entities"..f;if eY=="B_Beehive"or eY:find("GrainField")or eY:find("Pasture")then io="FarmerBuilding"..f end;CONST_REQUIREMENT_TOOLTIP_TYPE[ii]=io;ii=ii+1 end end;if KnightTitleRequirements[ik].Consume~=nil then for f=1,#KnightTitleRequirements[ik].Consume do local fD=KnightTitleRequirements[ik].Consume[f][1]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Goods[fD])local il,im,hH=DoNeededNumberOfConsumedGoodsForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Consume"..f;ii=ii+1 end end;if KnightTitleRequirements[ik].Products~=nil then for f=1,#KnightTitleRequirements[ik].Products do local ip=KnightTitleRequirements[ik].Products[f][1]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.GoodCategories[ip])local il,im,hH=DoNumberOfProductsInCategoryExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Products"..f;ii=ii+1 end end;if KnightTitleRequirements[ik].Buff~=nil then for f=1,#KnightTitleRequirements[ik].Buff do local iq=KnightTitleRequirements[ik].Buff[f]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Buffs[iq])local il=DoNeededDiversityBuffForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","")if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Buff"..f;ii=ii+1 end end;if KnightTitleRequirements[ik].Custom~=nil then for f=1,#KnightTitleRequirements[ik].Custom do local ir;local is=table.copy(KnightTitleRequirements[ik].Custom[f][2])if type(is[3])=="string"then ir=is[3]is[3]=0 end;ChangeIcon(ih[ii].."/Icon",is,nil,ir)local il,im,hH=DoCustomFunctionForKnightTitleSucceed(n,ik,f)if im and hH then XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)else XGUIEng.SetText(ih[ii].."/Amount","")end;if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="Custom"..f;ii=ii+1 end end;if KnightTitleRequirements[ik].DecoratedBuildings~=nil then for f=1,#KnightTitleRequirements[ik].DecoratedBuildings do local fD=KnightTitleRequirements[ik].DecoratedBuildings[f][1]ChangeIcon(ih[ii].."/Icon",g_TexturePositions.Goods[fD])local il,im,hH=DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(n,ik,f)XGUIEng.SetText(ih[ii].."/Amount","{center}"..im.."/"..hH)if il then XGUIEng.ShowWidget(ih[ii].."/Done",1)else XGUIEng.ShowWidget(ih[ii].."/Done",0)end;XGUIEng.ShowWidget(ih[ii],1)CONST_REQUIREMENT_TOOLTIP_TYPE[ii]="DecoratedBuildings"..f;ii=ii+1 end end;for f=ii,6 do XGUIEng.ShowWidget(ih[f],0)end end end;function Lib.Promotion.Local:OverwriteTooltips()GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(...)local it=XGUIEng.GetCurrentWidgetID()for g,h in pairs(Lib.Promotion.Config.RequirementWidgets)do if h.."/Icon"==XGUIEng.GetWidgetPathByID(it)then local ah=CONST_REQUIREMENT_TOOLTIP_TYPE[g]local cz=tonumber(string.sub(ah,string.len(ah)))if cz~=nil then ah=string.sub(ah,1,string.len(ah)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(ah,cz)return end end;GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements(...)end;GUI_Knight.RewardTooltip=function(iu)Lib.Promotion.Local:RewardTooltipWrapped(iu)end;GUI_Knight.RequiredGoodTooltip=function()local ah=CONST_REQUIREMENT_TOOLTIP_TYPE[2]local cz=tonumber(string.sub(ah,string.len(ah)))if cz~=nil then ah=string.sub(ah,1,string.len(ah)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(ah,cz)end;Lib.Promotion.Config:InitAddonText()end;function Lib.Promotion.Local:RewardTooltipWrapped(hF)local iv=GUI_Knight.NextRightsForTitle[hF]local iw=GetNameOfKeyInTable(Technologies,iv)local Name=string.gsub(iw,"R_","")local ix=""local ca="B_"..Name;if GetStringText("UI_ObjectNames/"..ca)==""then ca="U_"..Name end;if GetStringText("UI_ObjectNames/"..ca)==""then ca="Start"..Name end;if GetStringText("UI_ObjectNames/"..ca)==""then ca="R_"..Name end;ix=GetStringText("UI_ObjectNames/"..ca)SetTooltipNormal(Localize(ix),"")end;function Lib.Promotion.Local:RequirementTooltipWrapped(c7,hF)local n=GUI.GetPlayerID()local iy=Logic.GetKnightTitle(n)local iz=""local cb=""if c7=="Consume"or c7=="Goods"or c7=="DecoratedBuildings"then local fD=KnightTitleRequirements[iy+1][c7][hF][1]local iA=Logic.GetGoodTypeName(fD)local iB=GetStringText("UI_ObjectNames/"..iA)if iB==nil then iB="Goods."..iA end;iz=iB;cb=Lib.Promotion.Config.Description[c7].Text elseif c7=="Products"then local iC=Lib.Promotion.Config.GoodCategoryNames;local df=KnightTitleRequirements[iy+1][c7][hF][1]local iD=Localize(iC[df])if iD==nil then iD="ERROR: Name missng!"end;iz=iD;cb=Lib.Promotion.Config.Description[c7].Text elseif c7=="Entities"then local cZ=KnightTitleRequirements[iy+1][c7][hF][1]local eY=Logic.GetEntityTypeName(cZ)local dg=GetStringText("Names/"..eY)if dg==nil then dg="Entities."..eY end;iz=dg;cb=Lib.Promotion.Config.Description[c7].Text elseif c7=="Custom"then local iE=KnightTitleRequirements[iy+1].Custom[hF]iz=iE[3]cb=iE[4]elseif c7=="Buff"then local iF=Lib.Promotion.Config.BuffTypeNames;local iG=KnightTitleRequirements[iy+1][c7][hF]local iH=Localize(iF[iG])if iH==nil then iH="ERROR: Name missng!"end;iz=iH;cb=Lib.Promotion.Config.Description[c7].Text else iz=Lib.Promotion.Config.Description[c7].Title;cb=Lib.Promotion.Config.Description[c7].Text end;SetTooltipNormal(Localize(iz),Localize(cb),nil)end;InitKnightTitleTables=function()NeedsAndRightsByKnightTitle={}KnightTitleRequirements={}end;function Lib.Promotion.Shared:UpdateInvisibleTechnologies()if not IsLocalScript()then return end;if TechnologiesNotShownForKnightTitle==nil then TechnologiesNotShownForKnightTitle={}TechnologiesNotShownForKnightTitle[Technologies.R_Nutrition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Clothes]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Hygiene]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Entertainment]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Wealth]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Prosperity]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Military]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Column]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Pavilion]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueDario]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueFamily]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueProduction]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueSettler]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Victory]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Barracks]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BarracksArchers]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BowMaker]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SwordSmith]=true end;if g_GameExtraNo>0 and Technologies.R_CallGeologist then TechnologiesNotShownForKnightTitle[Technologies.R_CallGeologist]=true end end;function Lib.Promotion.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])end end end end;RegisterModule(Lib.Promotion.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IO_API")function SetupObject(ec)if GUI then return end;return Lib.IO.Global:CreateObject(ec)end;API.CreateObject=SetupObject;function DisposeObject(bB)if GUI or not CONST_IO[bB]then return end;Lib.IO.Global:DestroyObject(bB)end;API.DisposeObject=DisposeObject;function ResetObject(bB)if GUI or not CONST_IO[bB]then return end;Lib.IO.Global:ResetObject(bB)InteractiveObjectDeactivate(bB)end;API.ResetObject=ResetObject;function InteractiveObjectAddCustomName(c8,bF)local iI=Entities[c8]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectSetQuestName("%s", %s)]],c8,type(bF)=="table"and table.tostring(bF)or"\""..bF.."\"")return end;AddStringText(iI..c8,bF)end;API.InteractiveObjectSetQuestName=InteractiveObjectAddCustomName;function InteractiveObjectDeleteCustomName(c8)local iI=Entities[c8]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectDeleteCustomName("%s")]],c8)return end;DeleteStringText(iI..c8)end;API.InteractiveObjectUnsetQuestName=InteractiveObjectDeleteCustomName;function AllowActivateIronMines(q,iJ)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillIronMine,iJ and 3 or 1)end;API.AllowActivateIronMines=AllowActivateIronMines;function RequireTitleToRefilIronMines(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillIronMine)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_RefillIronMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillIronMine,0)end end;API.RequireTitleToRefilIronMines=RequireTitleToRefilIronMines;function AllowActivateStoneMines(q,iJ)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillStoneMine,iJ and 3 or 1)end;API.AllowActivateStoneMines=AllowActivateStoneMines;function RequireTitleToRefilStoneMines(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillStoneMine)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_RefillStoneMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillStoneMine,0)end end;API.RequireTitleToRefilStoneMines=RequireTitleToRefilStoneMines;function AllowActivateCisterns(q,iJ)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_RefillCistern,iJ and 3 or 1)end;API.AllowActivateCisterns=AllowActivateCisterns;function RequireTitleToRefilCisterns(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillCistern)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_RefillCistern)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillCisternMine,0)end end;API.RequireTitleToRefilCisterns=RequireTitleToRefilCisterns;function AllowActivateTradepost(q,iJ)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(q,Technologies.R_Tradepost,iJ and 3 or 1)end;API.AllowActivateTradepost=AllowActivateTradepost;function RequireTitleToBuildTradeposts(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Tradepost)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_Tradepost)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Tradepost,0)end end;API.RequireTitleToBuildTradeposts=RequireTitleToBuildTradeposts;InteractiveObjectActivate=function(bB,bC,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[bB]then local iK=CONST_IO[bB].Slave or bB;if CONST_IO[bB].Slave then CONST_IO_SLAVE_STATE[iK]=1;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 1]],iK))end;Lib.IO.Global:SetObjectState(iK,bC,unpack(arg))CONST_IO[bB].IsActive=true;ExecuteLocal([[CONST_IO["%s"].IsActive = true]],bB)else Lib.IO.Global:SetObjectState(bB,bC,unpack(arg))end end end;API.InteractiveObjectActivate=InteractiveObjectActivate;InteractiveObjectDeactivate=function(bB,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[bB]then local iK=CONST_IO[bB].Slave or bB;if CONST_IO[bB].Slave then CONST_IO_SLAVE_STATE[iK]=0;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 0]],iK))end;Lib.IO.Global:SetObjectState(iK,2,unpack(arg))CONST_IO[bB].IsActive=false;ExecuteLocal([[CONST_IO["%s"].IsActive = false]],bB)else Lib.IO.Global:SetObjectState(bB,2,unpack(arg))end end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;Lib.IO=Lib.IO or{}Lib.IO.Name="IO"Lib.IO.Global={SlaveSequence=0}Lib.IO.Local={Data={}}Lib.IO.Shared={TechnologyConfig={{"R_CallGeologist",{de="Geologen rufen",en="Order geologist",fr="Ordre géologue"},{8,1,1},1},{"R_RefillIronMine",{de="Eisenmine auffüllen",en="Refill mine",fr="Recharger le mien"},{8,2,1},1},{"R_RefillStoneMine",{de="Steinbruch auffüllen",en="Refill quarry",fr="Carrière de recharge"},{8,3,1},1},{"R_RefillCistern",{de="Brunnen auffüllen",en="Refill well",fr="Bien remplir"},{8,4,1},1},{"R_Tradepost",{de="Handelsposten bauen",en="Build Tradepost",fr="Route commerciale"},{3,1,1},1}}}CONST_IO={}CONST_IO_SLAVE_TO_MASTER={}CONST_IO_SLAVE_STATE={}CONST_IO_LAST_OBJECT=0;CONST_IO_LAST_HERO=0;Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/faker/Technology")Lib.Require("module/io/IO_API")Lib.Register("module/io/IO")function Lib.IO.Global:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideObjectInteraction()self:StartObjectDestructionController()self:StartObjectConditionController()Lib.IO.Local=nil end;self.IsInstalled=true end;function Lib.IO.Global:OnSaveGameLoaded()end;function Lib.IO.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ObjectInteraction then self:OnObjectInteraction(arg[1],arg[2],arg[3])elseif aD==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end end end;function Lib.IO.Global:OnObjectInteraction(bB,gF,q)CONST_IO_LAST_OBJECT=GetID(bB)CONST_IO_LAST_HERO=gF;if CONST_IO_SLAVE_TO_MASTER[bB]then bB=CONST_IO_SLAVE_TO_MASTER[bB]end;if CONST_IO[bB]then CONST_IO[bB].IsUsed=true;ExecuteLocal([[
            local ScriptName = "%s"
            if CONST_IO[ScriptName] then
                CONST_IO[ScriptName].IsUsed = true
            end
        ]],bB)if CONST_IO[bB].Replacement then ReplaceEntity(bB,CONST_IO[bB].Replacement)end;if CONST_IO[bB].Action then CONST_IO[bB]:Action(q,gF)end end end;function Lib.IO.Global:CreateObject(ec)local al=GetID(ec.Name)if al==0 then return end;self:DestroyObject(ec.Name)local fI=Logic.GetEntityTypeName(Logic.GetEntityType(al))if fI and not fI:find("^I_X_")then self:CreateSlaveObject(ec)end;ec.IsActive=true;ec.IsUsed=false;ec.Player=ec.Player or{1,2,3,4,5,6,7,8}ec.State=ec.State or 0;ec.Waittime=ec.Waittime or 5;ec.Distance=ec.Distance or 1000;CONST_IO[ec.Name]=ec;ExecuteLocal([[CONST_IO["%s"] = %s]],ec.Name,table.tostring(CONST_IO[ec.Name]))self:SetupObject(ec)return ec end;function Lib.IO.Global:DestroyObject(bB)if not CONST_IO[bB]then return end;if CONST_IO[bB].Slave then CONST_IO_SLAVE_TO_MASTER[CONST_IO[bB].Slave]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],CONST_IO[bB].Slave)CONST_IO_SLAVE_STATE[CONST_IO[bB].Slave]=nil;DestroyEntity(CONST_IO[bB].Slave)end;self:SetObjectState(bB,2)SendReport(Report.ObjectDelete,bB)SendReportToLocal(Report.ObjectDelete,bB)ExecuteLocal([[CONST_IO["%s"] = nil]],bB)CONST_IO[bB]=nil end;function Lib.IO.Global:CreateSlaveObject(iL)local Name;for g,h in pairs(CONST_IO_SLAVE_TO_MASTER)do if h==iL.Name and IsExisting(g)then Name=g end end;if Name==nil then self.SlaveSequence=self.SlaveSequence+1;Name="LIB_IO_SlaveObject_"..self.SlaveSequence end;local iM=GetID(Name)if not IsExisting(Name)then local I,J,K=Logic.EntityGetPos(GetID(iL.Name))iM=Logic.CreateEntity(Entities.I_X_DragonBoatWreckage,I,J,0,0)Logic.SetModel(iM,Models.Effects_E_Mosquitos)Logic.SetEntityName(iM,Name)CONST_IO_SLAVE_TO_MASTER[Name]=iL.Name;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = "%s"]],Name,iL.Name)iL.Slave=Name end;CONST_IO_SLAVE_STATE[Name]=1;return iM end;function Lib.IO.Global:SetupObject(iL)local al=GetID(iL.Slave and iL.Slave or iL.Name)Logic.InteractiveObjectClearCosts(al)Logic.InteractiveObjectClearRewards(al)Logic.InteractiveObjectSetInteractionDistance(al,iL.Distance)Logic.InteractiveObjectSetTimeToOpen(al,iL.Waittime)local iN=iL.RewardResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetRewardResourceCartType(al,iN)local iO=iL.RewardGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetRewardGoldCartType(al,iO)local iP=iL.CostResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetCostResourceCartType(al,iP)local iQ=iL.CostGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetCostGoldCartType(al,iQ)if iL.Reward then Logic.InteractiveObjectAddRewards(al,iL.Reward[1],iL.Reward[2])end;if iL.Costs and iL.Costs[1]then Logic.InteractiveObjectAddCosts(al,iL.Costs[1],iL.Costs[2])end;if iL.Costs and iL.Costs[3]then Logic.InteractiveObjectAddCosts(al,iL.Costs[3],iL.Costs[4])end;table.insert(HiddenTreasures,al)InteractiveObjectActivate(Logic.GetEntityName(al),iL.State or 0)end;function Lib.IO.Global:ResetObject(bB)local al=GetID(CONST_IO[bB].Slave and CONST_IO[bB].Slave or bB)RemoveInteractiveObjectFromOpenedList(al)table.insert(HiddenTreasures,al)Logic.InteractiveObjectSetAvailability(al,true)self:SetObjectState(al,CONST_IO[bB].State or 0)CONST_IO[bB].IsUsed=false;CONST_IO[bB].IsActive=true;SendReport(Report.ObjectReset,bB)SendReportToLocal(Report.ObjectReset,bB)end;function Lib.IO.Global:SetObjectState(bB,bC,...)arg=(not arg or#arg==0)and{1,2,3,4,5,6,7,8}or arg;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(bB),f,2)end;for f=1,#arg,1 do Logic.InteractiveObjectSetPlayerState(GetID(bB),arg[f],bC)end;Logic.InteractiveObjectSetAvailability(GetID(bB),bC~=2)end;function Lib.IO.Global:OverrideObjectInteraction()GameCallback_OnObjectInteraction=function(an,q)OnInteractiveObjectOpened(an,q)OnTreasureFound(an,q)local aM=Logic.GetEntityName(an)if CONST_IO_SLAVE_TO_MASTER[aM]then aM=CONST_IO_SLAVE_TO_MASTER[aM]end;local gH={}Logic.GetKnights(q,gH)local eb=GetClosestToTarget(an,gH)SendReport(Report.ObjectInteraction,aM,eb,q)SendReportToLocal(Report.ObjectInteraction,aM,eb,q)end;QuestTemplate.AreObjectsActivated=function(self,iR)for f=1,iR[0]do if not iR[-f]then iR[-f]=GetID(iR[f])end;local dg=Logic.GetEntityName(iR[-f])if CONST_IO_SLAVE_TO_MASTER[dg]then dg=CONST_IO_SLAVE_TO_MASTER[dg]end;if CONST_IO[dg]then if CONST_IO[dg].IsUsed~=true then return false end elseif Logic.IsInteractiveObject(iR[-f])then if not IsInteractiveObjectOpen(iR[-f])then return false end end end;return true end end;function Lib.IO.Global:ProcessChatInput(bF)local dT=Lib.Core.Debug:CommandTokenizer(bF)for f=1,#dT,1 do if dT[f][1]=="enableobject"then local State=dT[f][3]and tonumber(dT[f][3])or nil;local n=dT[f][4]and tonumber(dT[f][4])or nil;error(IsExisting(dT[f][2]),"object "..dT[f][2].." does not exist!")InteractiveObjectActivate(dT[f][2],State,n)log("activated object "..dT[f][2]..".")elseif dT[f][1]=="disableobject"then local n=dT[f][3]and tonumber(dT[f][3])or nil;error(IsExisting(dT[f][2]),"object "..dT[f][2].." does not exist!")InteractiveObjectDeactivate(dT[f][2],n)log("deactivated object "..dT[f][2]..".")elseif dT[f][1]=="initobject"then error(IsExisting(dT[f][2]),"object "..dT[f][2].." does not exist!")API.SetupObject({Name=dT[f][2],Waittime=0,State=0})log("quick initalization of object "..dT[f][2]..".")end end end;function Lib.IO.Global:StartObjectDestructionController()RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local iS=Event.GetEntityID()local iK=Logic.GetEntityName(iS)local iT=CONST_IO_SLAVE_TO_MASTER[iK]if iK and iT then local iU=CONST_IO[iT]if not iU then return end;log("slave "..iK.." of master "..iT.." has been deleted!")log("try to create new slave...")CONST_IO_SLAVE_TO_MASTER[iK]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],iK)local iM=Lib.IO.Global:CreateSlaveObject(iU)error(IsExisting(iM),"failed to create slave!")Lib.IO.Global:SetupObject(iU)if iU.IsUsed==true or CONST_IO_SLAVE_STATE[iK]and CONST_IO_SLAVE_STATE[iK]==0 then InteractiveObjectDeactivate(iU.Slave)end;log("new slave created for master "..iT..".")end end)end;function Lib.IO.Global:StartObjectConditionController()RequestHiResJob(function()for g,h in pairs(CONST_IO)do if h and not h.IsUsed and h.IsActive then CONST_IO[g].IsFullfilled=true;if CONST_IO[g].Condition then local iV=h:Condition()CONST_IO[g].IsFullfilled=iV end;ExecuteLocal([[
                    local ScriptName = "%s"
                    if CONST_IO[ScriptName] then
                        CONST_IO[ScriptName].IsFullfilled = %s
                    end
                ]],g,tostring(CONST_IO[g].IsFullfilled))end end end)end;function Lib.IO.Local:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Lib.IO.Shared:CreateTechnologies()self:OverrideGameFunctions()Lib.IO.Global=nil end;self.IsInstalled=true end;function Lib.IO.Local:OnSaveGameLoaded()end;function Lib.IO.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ObjectReset then if CONST_IO[arg[1]]then CONST_IO[arg[1]].IsUsed=false end elseif aD==Report.ObjectInteraction then CONST_IO_LAST_OBJECT=GetID(arg[1])CONST_IO_LAST_HERO=arg[2]end end;function Lib.IO.Local:OverrideGameFunctions()g_CurrentDisplayedQuestID=0;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO=GUI_Interaction.InteractiveObjectClicked;GUI_Interaction.InteractiveObjectClicked=function()local f=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local B=g_Interaction.ActiveObjectsOnScreen[f]local n=GUI.GetPlayerID()if not B then return end;local aM=Logic.GetEntityName(B)if CONST_IO_SLAVE_TO_MASTER[aM]then aM=CONST_IO_SLAVE_TO_MASTER[aM]end;if CONST_IO[aM]then if not CONST_IO[aM].IsFullfilled then local cb=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")if CONST_IO[aM].ConditionInfo then cb=ConvertPlaceholders(Localize(CONST_IO[aM].ConditionInfo))end;Message(cb)return end;if type(CONST_IO[aM].Costs)=="table"and#CONST_IO[aM].Costs~=0 then local cY=Logic.GetStoreHouse(n)local ap=Logic.GetHeadquarters(n)if cY==nil or cY==0 or ap==nil or ap==0 then GUI.AddNote("DEBUG: Player needs special buildings when using activation costs!")return end end end;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO()if not Framework.IsNetworkGame()then local gH={}Logic.GetKnights(n,gH)local eb=GetClosestToTarget(B,gH)SendReportToGlobal(Report.ObjectClicked,aM,eb,n)SendReport(Report.ObjectClicked,aM,eb,n)end end;GUI_Interaction.InteractiveObjectUpdate=function()if g_Interaction.ActiveObjects==nil then return end;local n=GUI.GetPlayerID()for f=1,#g_Interaction.ActiveObjects do local d4=g_Interaction.ActiveObjects[f]local iW=d4;local aM=Logic.GetEntityName(d4)if CONST_IO_SLAVE_TO_MASTER[aM]then iW=GetID(CONST_IO_SLAVE_TO_MASTER[aM])end;local cT,cU=GUI.GetEntityInfoScreenPosition(iW)local iX,iY=GUI.GetScreenSize()if cT~=0 and cU~=0 and cT>-50 and cU>-50 and cT<iX+50 and cU<iY+50 then if not table.contains(g_Interaction.ActiveObjectsOnScreen,d4)then table.insert(g_Interaction.ActiveObjectsOnScreen,d4)end else for f=1,#g_Interaction.ActiveObjectsOnScreen do if g_Interaction.ActiveObjectsOnScreen[f]==d4 then table.remove(g_Interaction.ActiveObjectsOnScreen,f)end end end end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local hx="/InGame/Root/Normal/InteractiveObjects/"..f;if XGUIEng.IsWidgetExisting(hx)==1 then local d4=g_Interaction.ActiveObjectsOnScreen[f]local iW=d4;local aM=Logic.GetEntityName(d4)if CONST_IO_SLAVE_TO_MASTER[aM]then iW=GetID(CONST_IO_SLAVE_TO_MASTER[aM])aM=Logic.GetEntityName(iW)end;local cZ=Logic.GetEntityType(d4)local eY=Logic.GetEntityTypeName(cZ)local cT,cU=GUI.GetEntityInfoScreenPosition(iW)local iZ={XGUIEng.GetWidgetScreenSize(hx)}XGUIEng.SetWidgetScreenPosition(hx,cT-iZ[1]/2,cU-iZ[2]/2)local i_={Logic.InteractiveObjectGetCosts(d4)}local j0={Logic.InteractiveObjectGetEffectiveCosts(d4,n)}local j1=Logic.InteractiveObjectGetAvailability(d4)local j2=Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(d4,n)local j3=false;if i_[1]~=nil and j0[1]==nil and j1==true then j3=true end;if j2==false then j3=true end;if Logic.GetTime()>1 and g_GameExtraNo>0 then if j3==false and string.find(eY,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j3=true end end;if j3==false and string.find(eY,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j3=true end end;if j3==false and(string.find(eY,"B_Cistern")or string.find(eY,"B_Well"))then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j3=true end end;if j3==false and string.find(eY,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then j3=true end end end;if j3==false then if CONST_IO[aM]and type(CONST_IO[aM].Player)=="table"then j3=not self:IsAvailableForGuiPlayer(aM)elseif CONST_IO[aM]and type(CONST_IO[aM].Player)=="number"then j3=CONST_IO[aM].Player~=n end end;if j3==true then XGUIEng.DisableButton(hx,1)else XGUIEng.DisableButton(hx,0)end;if GUI_Interaction.InteractiveObjectUpdateEx1~=nil then GUI_Interaction.InteractiveObjectUpdateEx1(hx,cZ)end;XGUIEng.ShowWidget(hx,1)end end;for f=#g_Interaction.ActiveObjectsOnScreen+1,2 do local hx="/InGame/Root/Normal/InteractiveObjects/"..f;XGUIEng.ShowWidget(hx,0)end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local hx="/InGame/Root/Normal/InteractiveObjects/"..f;local d4=g_Interaction.ActiveObjectsOnScreen[f]local aM=Logic.GetEntityName(d4)if CONST_IO_SLAVE_TO_MASTER[aM]then aM=CONST_IO_SLAVE_TO_MASTER[aM]end;if CONST_IO[aM]and CONST_IO[aM].Texture then local ir;local ad=CONST_IO[aM].Texture[1]or 14;local b2=CONST_IO[aM].Texture[2]or 10;local aV=CONST_IO[aM].Texture[3]or 0;if type(aV)=="string"then ir=aV;aV=0 end;ChangeIcon(hx,{ad,b2,aV},nil,ir)end end end;GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO=GUI_Interaction.InteractiveObjectMouseOver;GUI_Interaction.InteractiveObjectMouseOver=function()local n=GUI.GetPlayerID()local fy=XGUIEng.GetCurrentWidgetID()local d3=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local d4=g_Interaction.ActiveObjectsOnScreen[d3]local cZ=Logic.GetEntityType(d4)local eY=Logic.GetEntityTypeName(cZ)if tonumber(Logic.GetEntityName(d4))~=nil and string.find(eY,"^I_X_")then GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO()return end;local j4=false;local j5=false;if g_GameExtraNo>0 then j4=string.find(eY,"^R_Stone")~=nil or string.find(eY,"^R_Iron")~=nil or string.find(eY,"^B_Cistern")~=nil or string.find(eY,"^B_Well")~=nil;j5=string.find(eY,"^I_X_Trade")~=nil end;local j6;local ca="InteractiveObjectAvailable"if Logic.InteractiveObjectGetAvailability(d4)==false then ca="InteractiveObjectNotAvailable"elseif Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(d4,n)==false then j6="InteractiveObjectAvailableReward"elseif XGUIEng.IsButtonDisabled(fy)==1 then j6="UpgradeOutpost"if g_GameExtraNo>0 then if string.find(eY,"R_StoneMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j6=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillStoneMine)or j6 end end;if string.find(eY,"R_IronMine")then if Logic.TechnologyGetState(n,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j6=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillIronMine)or j6 end end;if string.find(eY,"B_Cistern")or string.find(eY,"B_Well")then if Logic.TechnologyGetState(n,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(n,Technologies.R_CallGeologist)~=TechnologyStates.Researched then j6=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillCistern)or j6 end end;if string.find(eY,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(n,Technologies.R_Tradepost)~=TechnologyStates.Researched then j6=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_Tradepost)or j6 end end end end;local iz="UI_ObjectNames/"..ca;local cb="UI_ObjectDescription/"..ca;local j7=j6~=nil and"UI_ButtonDisabled/"..j6 or nil;if j4 then iz="UI_ObjectNames/InteractiveObjectGeologist"end;if j5 then iz="UI_ObjectNames/InteractiveObjectTradepost"end;local j8=false;local d5={Logic.InteractiveObjectGetEffectiveCosts(d4,n)}if d5 and d5[1]and d5[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(d5[1])~=GoodCategories.GC_Resource then j8=true end;local aM=Logic.GetEntityName(d4)if CONST_IO_SLAVE_TO_MASTER[aM]then aM=CONST_IO_SLAVE_TO_MASTER[aM]end;if CONST_IO[aM]and CONST_IO[aM].IsUsed~=true then ca="InteractiveObjectAvailable"if CONST_IO[aM]and type(CONST_IO[aM].Player)=="table"and not self:IsAvailableForGuiPlayer(aM)or CONST_IO[aM]and type(CONST_IO[aM].Player)=="number"and CONST_IO[aM].Player~=n or Logic.InteractiveObjectGetAvailability(d4)==false then ca="InteractiveObjectNotAvailable"end;iz=ConvertPlaceholders(Localize(CONST_IO[aM].Title or iz))if iz and iz:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then iz=XGUIEng.GetStringTableText(iz)end;cb=ConvertPlaceholders(Localize(CONST_IO[aM].Text or cb))if cb and cb:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then cb=XGUIEng.GetStringTableText(cb)end;j7=CONST_IO[aM].DisabledText or j7;if j7 then j7=ConvertPlaceholders(Localize(j7))if j7 and j7:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then j7=XGUIEng.GetStringTableText(j7)end end;d5=CONST_IO[aM].Costs;if d5 and d5[1]and d5[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(d5[1])~=GoodCategories.GC_Resource then j8=true end end;SetTooltipCosts(iz,cb,j7,d5,j8)end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(bh,bi)local gK=tonumber(bh)if gK then bh=gK end;local bj,bk=GUI_Interaction.GetPotentialSubQuestAndType(bh)local gL="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local gM;local gN;g_CurrentDisplayedQuestID=bh;if bk==Objective.Object then gM=gL.."/List"gN=Wrapped_GetStringTableText(bh,"UI_Texts/QuestInteraction")local gO={}assert(bj~=nil)for f=1,bj.Objectives[1].Data[0]do local j9;if Logic.IsEntityDestroyed(bj.Objectives[1].Data[f])then j9=g_Interaction.SavedQuestEntityTypes[bh][f]else j9=Logic.GetEntityType(GetID(bj.Objectives[1].Data[f]))end;local ja=Logic.GetEntityName(bj.Objectives[1].Data[f])local jb=""if j9~=nil and j9~=0 then local jc=Logic.GetEntityTypeName(j9)jb=Wrapped_GetStringTableText(bh,"Names/"..jc)or GetStringText("Names/"..jc)if jb==""then jb=Wrapped_GetStringTableText(bh,"UI_ObjectNames/"..jc)or GetStringText("UI_ObjectNames/"..jc)end;if jb==nil then jb="Debug: ObjectName missing for "..jc end end;table.insert(gO,Localize(ConvertPlaceholders(jb)))end;for f=1,4 do local ag=gO[f]if ag==nil then ag=""end;XGUIEng.SetText(gM.."/Entry"..f,"{center}"..ag)end;SetIcon(gM.."/QuestTypeIcon",{14,10})XGUIEng.SetText(gM.."/Caption","{center}"..gN)XGUIEng.ShowWidget(gM,1)else GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO(bh,bi)end end end;function Lib.IO.Local:IsAvailableForGuiPlayer(bB)local n=GUI.GetPlayerID()if CONST_IO[bB]and type(CONST_IO[bB].Player)=="table"then for f=1,8 do if CONST_IO[bB].Player[f]and CONST_IO[bB].Player[f]==n then return true end end;return false end;return true end;function Lib.IO.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for bO=1,8 do Logic.TechnologySetState(bO,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.IO.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOChest_API")function CreateRandomChest(r,ic,jd,je,dZ,fv)if IsLocalScript()then return end;if not fv then fv=dZ;dZ=nil end;assert(IsExisting(r),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,ic)~=nil,"Good type is invalid!")assert(type(jd)=="number"and jd>=1,"Minimum is to low!")je=je or jd;assert(type(je)=="number"or je>=1,"Maximum is to low!")assert(je>=jd,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(r,ic,jd,je,false,false,dZ,fv)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomChest(r,ic,jd,je,dZ,fv)if IsLocalScript()then return end;if not fv then fv=dZ;dZ=nil end;assert(IsExisting(r),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,ic)~=nil,"Good type is invalid!")assert(type(jd)=="number"and jd>=1,"Minimum is to low!")je=je or jd;assert(type(je)=="number"or je>=1,"Maximum is to low!")assert(je>=jd,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(r,ic,jd,je,false,true,dZ,fv)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomGoldChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomGoldChest(r)end;API.CreateRandomGoldChest=CreateRandomGoldChest;function CreateRandomResourceChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomResourceChest(r)end;API.CreateRandomResourceChest=CreateRandomResourceChest;function CreateRandomLuxuryChest(r)if IsLocalScript()then return end;assert(IsExisting(r),"Entity does not exist!")Lib.IOChest.Global:CreateRandomLuxuryChest(r)end;API.CreateRandomLuxuryChest=CreateRandomLuxuryChest;Lib.IOChest=Lib.IOChest or{}Lib.IOChest.Name="IOChest"Lib.IOChest.Global={}Lib.IOChest.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOChest_API")Lib.Register("module/io/IOChest")function Lib.IOChest.Global:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Lib.IOChest.Local=nil end;self.IsInstalled=true end;function Lib.IOChest.Global:OnSaveGameLoaded()end;function Lib.IOChest.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif aD==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then self:ResetIOChest(arg[1])end elseif aD==Report.ObjectDelete then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then end end end;function Lib.IOChest.Global:ProcessChatInput(bF)local dT=Lib.Core.Debug:CommandTokenizer(bF)for f=1,#dT,1 do if dT[f][1]=="spawncow"then if not IsExisting(dT[f][2])then CreateRandomGoldChest(dT[f][2])end elseif dT[f][1]=="spawnsheep"then if not IsExisting(dT[f][2])then CreateRandomResourceChest(dT[f][2])end elseif dT[f][1]=="luxurychest"then if not IsExisting(dT[f][2])then CreateRandomLuxuryChest(dT[f][2])end end end end;function Lib.IOChest.Global:CreateRandomChest(r,ic,jd,je,jf,jg,dZ,fv)jd=math.floor(jd~=nil and jd>0 and jd or 1)je=math.floor(je~=nil and je>1 and je or 2)assert(ic~=nil,"CreateRandomChest: Good does not exist!")assert(jd<=je,"CreateRandomChest: min amount must be smaller or equal than max amount!")log("Creating chest (%s, %s, %d, %d, %s, %s)",r,Logic.GetGoodTypeName(ic),jd,je,tostring(jf==true),tostring(jg==true))if not jg then local bf=ReplaceEntity(r,Entities.XD_ScriptEntity,0)Logic.SetModel(bf,Models.Doodads_D_X_ChestClose)Logic.SetVisible(bf,true)end;local hM=jd;if jd<je then hM=math.random(jd,je)end;local jh;local ji;if not jf then ji={ic,hM}else jh={ic,hM}end;SetupObject{Name=r,IsInteractiveChest=true,Reward=ji,DirectReward=jh,Texture={1,6},Distance=jg and 1200 or 650,Waittime=0,State=0,DoNotChangeModel=jg==true,ActivationCondition=dZ,ActivationAction=fv,Condition=function(f7)if f7.ActivationCondition then return f7.ActivationCondition(f7)end;return true end,Action=function(f7,gF,q)if not f7.DoNotChangeModel then Logic.SetModel(GetID(f7.Name),Models.Doodads_D_X_ChestOpenEmpty)end;if f7.DirectReward then AddGood(f7.DirectReward[1],f7.DirectReward[2],q)end;if f7.ActivationAction then f7.ActivationAction(f7,gF,q)end;SendReport(Report.InteractiveTreasureActivated,f7.Name,gF,q)SendReportToLocal(Report.InteractiveTreasureActivated,f7.Name,gF,q)end}end;function Lib.IOChest.Global:ResetIOChest(bB)if not CONST_IO[bB].DoNotChangeModel then local B=ReplaceEntity(bB,Entities.XD_ScriptEntity,0)Logic.SetModel(B,Models.Doodads_D_X_ChestClose)Logic.SetVisible(B,true)end end;function Lib.IOChest.Global:CreateRandomGoldChest(r)self:CreateRandomChest(r,Goods.G_Gold,300,600,false)end;function Lib.IOChest.Global:CreateRandomResourceChest(r)local jj={Goods.G_Iron,Goods.G_Stone,Goods.G_Wood,Goods.G_Wool,Goods.G_Carcass,Goods.G_Herb,Goods.G_Honeycomb,Goods.G_Milk,Goods.G_RawFish,Goods.G_Grain}local jk=jj[math.random(1,#jj)]self:CreateRandomChest(r,jk,30,60,false)end;function Lib.IOChest.Global:CreateRandomLuxuryChest(r)local jl={Goods.G_Salt,Goods.G_Dye}if g_GameExtraNo>=1 then table.insert(jl,Goods.G_Gems)table.insert(jl,Goods.G_MusicalInstrument)table.insert(jl,Goods.G_Olibanum)end;local jk=jl[math.random(1,#jl)]self:CreateRandomChest(r,jk,50,100,false)end;function Lib.IOChest.Local:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")self:CreateDefaultObjectNames()Lib.IOChest.Global=nil end;self.IsInstalled=true end;function Lib.IOChest.Local:OnSaveGameLoaded()end;function Lib.IOChest.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.IOChest.Local:CreateDefaultObjectNames()AddStringText("UI_ObjectNames/D_X_ChestClosed",{de="Verschlossene Schatztruhe",en="Closed Treasure Chest",fr="Coffre au trésor fermé"})AddStringText("UI_ObjectNames/D_X_ChestOpenEmpty",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen01",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen02",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen03",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen04",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})end;RegisterModule(Lib.IOChest.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOMine_API")function CreateIOIronMine(f7)local d5={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(f7)Lib.IOMine.Global:CreateIOMine(f7.Scriptname,Entities.R_IronMine,f7.Title,f7.Text,f7.Costs or d5,f7.ResourceAmount,f7.RefillAmount,f7.ConstructionCondition,f7.ConditionInfo,f7.ConstructionAction)end;API.CreateIOIronMine=CreateIOIronMine;function CreateIOStoneMine(f7)local d5={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(f7)Lib.IOMine.Global:CreateIOMine(f7.Scriptname,Entities.R_StoneMine,f7.Title,f7.Text,f7.Costs or d5,f7.ResourceAmount,f7.RefillAmount,f7.ConstructionCondition,f7.ConditionInfo,f7.ConstructionAction)end;API.CreateIOStoneMine=CreateIOStoneMine;function CheckIOMineParameter(f7)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(f7.Scriptname),"API.CreateIOIronMine: Scriptname '%s' does not exist!",tostring(f7.Scriptname))local d5={Goods.G_Gold,500,Goods.G_Wood,20}if f7.Costs then if f7.Costs[1]then error(GetNameOfKeyInTable(Goods,f7.Costs[1]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(f7.Costs[1]))error(f7.Costs[2]and(type(f7.Costs[2])=="number"or f7.Costs[2]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end;if f7.Costs[3]then error(GetNameOfKeyInTable(Goods,f7.Costs[3]),"API.CreateIOIronMine: First cost type '%s' is wrong!",tostring(f7.Costs[3]))error(f7.Costs[4]and(type(f7.Costs[4])=="number"or f7.Costs[4]<1),"API.CreateIOIronMine: First cost amount must be above 0!")end end end;Lib.IOMine=Lib.IOMine or{}Lib.IOMine.Name="IOMine"Lib.IOMine.Global={Mines={}}Lib.IOMine.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOMine_API")Lib.Register("module/io/IOMine")function Lib.IOMine.Global:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Local=nil end;self.IsInstalled=true end;function Lib.IOMine.Global:OnSaveGameLoaded()end;function Lib.IOMine.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveMine then self:ResetIOMine(arg[1],CONST_IO[arg[1]].Type)end elseif aD==Report.ObjectDelete then if CONST_IO[arg[1]].IsInteractiveMine and CONST_IO[arg[1]].Type then ReplaceEntity(arg[1],CONST_IO[arg[1]].Type)end end end;function Lib.IOMine.Global:CreateIOMine(a9,i,e7,bF,e9,jm,bH,dZ,jn,fv)local jo=self:ResetIOMine(a9,i)local is={14,10}local jp;if i==Entities.R_IronMine then jp="Names/R_IronMine"is={14,10}end;if i==Entities.R_StoneMine then jp="Names/R_StoneMine"is={14,10}end;SetupObject{Name=a9,IsInteractiveMine=true,Title=e7 or jp,Text=bF,Texture=is,Type=i,ResourceAmount=jm or 250,RefillAmount=bH or 75,Costs=e9,InvisibleBlocker=jo,Distance=1200,Waittime=0,ConditionInfo=jn,AdditionalCondition=dZ,AdditionalAction=fv,Condition=function(f7)if f7.AdditionalCondition then return f7:AdditionalCondition(f7)end;return true end,Action=function(f7,gF,q)local al=ReplaceEntity(f7.Name,f7.Type)SetResourceAmount(al,f7.ResourceAmount,f7.RefillAmount)DestroyEntity(f7.InvisibleBlocker)SendReport(Report.InteractiveMineErected,f7.Name,gF,q)SendReportToLocal(Report.InteractiveMineErected,f7.Name,gF,q)if f7.AdditionalAction then f7.AdditionalAction(f7,gF,q)end end}end;function Lib.IOMine.Global:ResetIOMine(bB,i)if CONST_IO[bB]then DestroyEntity(CONST_IO[bB].InvisibleBlocker)end;local B=ReplaceEntity(bB,Entities.XD_ScriptEntity)local jq=Models.Doodads_D_SE_ResourceIron_Wrecked;if i==Entities.R_StoneMine then jq=Models.R_SE_ResorceStone_10 end;Logic.SetVisible(B,true)Logic.SetModel(B,jq)local I,J,K=Logic.EntityGetPos(B)local jo=Logic.CreateEntity(Entities.D_ME_Rock_Set01_B_07,I,J,0,0)Logic.SetVisible(jo,false)if CONST_IO[bB]then CONST_IO[bB].InvisibleBlocker=jo end;return jo end;function Lib.IOMine.Local:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Global=nil end;self.IsInstalled=true end;function Lib.IOMine.Local:OnSaveGameLoaded()end;function Lib.IOMine.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOMine.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntityEvent_API")function SearchEntities(q,jr)if jr==nil then jr=false end;local js=function(aD)if q and Logic.EntityGetPlayer(aD)~=q then return false end;if jr then if(Logic.IsBuilding(aD)or Logic.IsWall(aD))and Logic.IsConstructionComplete(aD)==0 then return false end;local l=Logic.GetEntityType(aD)local fI=Logic.GetEntityType(l)if fI and(string.find(fI,"^S_")or string.find(fI,"^XD_"))then return false end end;return true end;return CommenceEntitySearch(js)end;API.SearchEntities=SearchEntities;function SearchEntitiesOfTypeInArea(fR,a9,i,q)return SearchEntitiesInArea(fR,a9,q,i,nil)end;API.SearchEntitiesOfTypeInArea=SearchEntitiesOfTypeInArea;function SearchEntitiesOfCategoryInArea(fR,a9,fS,q)return SearchEntitiesInArea(fR,a9,q,nil,fS)end;API.SearchEntitiesOfCategoryInArea=SearchEntitiesOfCategoryInArea;function SearchEntitiesOfTypeInTerritory(fT,i,q)return SearchEntitiesInTerritory(fT,q,i,nil)end;API.SearchEntitiesOfTypeInTerritory=SearchEntitiesOfTypeInTerritory;function SearchEntitiesOfCategoryInTerritory(fT,fS,q)return SearchEntitiesInTerritory(fT,q,nil,fS)end;API.SearchEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;API.GetEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;function SearchEntitiesByScriptname(ej)local js=function(aD)local aM=Logic.GetEntityName(aD)if not string.find(aM,ej)then return false end;return true end;return Lib.EntityEvent.Shared:IterateOverEntities(js)end;API.SearchEntitiesByScriptname=SearchEntitiesByScriptname;function CommenceEntitySearch(jt)jt=jt or function(aD)return true end;return Lib.EntityEvent.Shared:IterateOverEntities(jt)end;API.CommenceEntitySearch=CommenceEntitySearch;function ThiefDisableStorehouseEffect(c5)Lib.EntityEvent.Global.DisableThiefStorehouseHeist=c5==true end;API.ThiefDisableStorehouseEffect=ThiefDisableStorehouseEffect;function ThiefDisableCathedralEffect(c5)Lib.EntityEvent.Global.DisableThiefCathedralSabotage=c5==true end;API.ThiefDisableCathedralEffect=ThiefDisableCathedralEffect;function ThiefDisableCisternEffect(c5)Lib.EntityEvent.Global.DisableThiefCisternSabotage=c5==true end;API.ThiefDisableCisternEffect=ThiefDisableCisternEffect;function SearchEntitiesInArea(fR,a9,q,i,fS)local V=a9;if type(V)~="table"then V=GetPosition(V)end;local js=function(aD)if q and Logic.EntityGetPlayer(aD)~=q then return false end;if i and Logic.GetEntityType(aD)~=i then return false end;if fS and Logic.IsEntityInCategory(aD,fS)==0 then return false end;if GetDistance(aD,V)>fR then return false end;return true end;return CommenceEntitySearch(js)end;API.SearchEntitiesInArea=SearchEntitiesInArea;function SearchEntitiesInTerritory(fT,q,i,fS)local js=function(aD)if q and Logic.EntityGetPlayer(aD)~=q then return false end;if i and Logic.GetEntityType(aD)~=i then return false end;if fS and Logic.IsEntityInCategory(aD,fS)==0 then return false end;if fT and GetTerritoryUnderEntity(aD)~=fT then return false end;return true end;return CommenceEntitySearch(js)end;API.SearchEntitiesInTerritory=SearchEntitiesInTerritory;function GetEntitiesOfCategoriesInTerritories(q,fS,fT)local a_=type(q)=="table"and q or{q}local aV=type(fS)=="table"and fS or{fS}local aT=type(fT)=="table"and fT or{fT}local d8={}for f=1,#a_,1 do for bO=1,#aV,1 do for g=1,#aT,1 do local ju=SearchEntitiesOfCategoryInTerritory(aT[g],aV[bO],a_[f])d8=Array_Append(d8,ju)end end end;return d8 end;API.GetEntitiesOfCategoriesInTerritories=GetEntitiesOfCategoriesInTerritories;Lib.EntityEvent=Lib.EntityEvent or{}Lib.EntityEvent.Name="EntityEvent"Lib.EntityEvent.Global={JobID={},RegisteredEntities={},MineAmounts={},AttackedEntities={},DisableThiefStorehouseHeist=false,DisableThiefCathedralSabotage=false,DisableThiefCisternSabotage=false,StaticSpawnerTypes={"B_NPC_BanditsHQ_ME","B_NPC_BanditsHQ_NA","B_NPC_BanditsHQ_NE","B_NPC_BanditsHQ_SE","B_NPC_BanditsHutBig_ME","B_NPC_BanditsHutBig_NA","B_NPC_BanditsHutBig_NE","B_NPC_BanditsHutBig_SE","B_NPC_BanditsHutSmall_ME","B_NPC_BanditsHutSmall_NA","B_NPC_BanditsHutSmall_NE","B_NPC_BanditsHutSmall_SE","B_NPC_Barracks_ME","B_NPC_Barracks_NA","B_NPC_Barracks_NE","B_NPC_Barracks_SE","B_NPC_BanditsHQ_AS","B_NPC_BanditsHutBig_AS","B_NPC_BanditsHutSmall_AS","B_NPC_Barracks_AS"},DynamicSpawnerTypes={"S_AxisDeer_AS","S_Deer_ME","S_FallowDeer_SE","S_Gazelle_NA","S_Herbs","S_Moose_NE","S_RawFish","S_Reindeer_NE","S_WildBoar","S_Zebra_NA"}}Lib.EntityEvent.Local={}Lib.EntityEvent.Shared={}Lib.Require("comfort/GetDistance")Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent_API")Lib.Register("module/entity/EntityEvent")function Lib.EntityEvent.Global:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")self:StartTriggers()self:OverrideCallback()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnSaveGameLoaded()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnReportReceived(aD,...)if aD==Report.LoadscreenClosed then self.LoadscreenClosed=true elseif aD==Report.EntityHurt then self.AttackedEntities[arg[1]]={arg[3],100}end end;function Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()for g,h in pairs(self.AttackedEntities)do self.AttackedEntities[g][2]=h[2]-1;if h[2]<=0 then self.AttackedEntities[g]=nil else if IsExisting(g)and IsExisting(h[1])and Logic.IsKnight(g)then if Logic.KnightGetResurrectionProgress(g)~=1 then local jv=Logic.EntityGetPlayer(g)local jw=Logic.EntityGetPlayer(h[1])self:TriggerEntityKilledEvent(g,jv,h[1],jw)self.AttackedEntities[g]=nil end end end end end;function Lib.EntityEvent.Global:OverrideCallback()GameCallback_SettlerSpawned_Orig_QSB_EntityCore=GameCallback_SettlerSpawned;GameCallback_SettlerSpawned=function(q,an)GameCallback_SettlerSpawned_Orig_QSB_EntityCore(q,an)Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(q,an)end;GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,an)GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore(q,an)Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(q,an)end;GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore=GameCallback_FarmAnimalChangedPlayerID;GameCallback_FarmAnimalChangedPlayerID=function(q,jx,jy)GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore(q,jx,jy)local jz=Logic.EntityGetPlayer(jy)local jA=Logic.EntityGetPlayer(jx)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(jy,jz,jx,jA)end;GameCallback_EntityCaptured_Orig_QSB_EntityCore=GameCallback_EntityCaptured;GameCallback_EntityCaptured=function(jy,jB,jx,jC)GameCallback_EntityCaptured_Orig_QSB_EntityCore(jy,jB,jx,jC)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(jy,jB,jx,jC)end;GameCallback_CartFreed_Orig_QSB_EntityCore=GameCallback_CartFreed;GameCallback_CartFreed=function(jy,jB,jx,jC)GameCallback_CartFreed_Orig_QSB_EntityCore(jy,jB,jx,jC)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(jy,jB,jx,jC)end;GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore=GameCallback_OnThiefDeliverEarnings;GameCallback_OnThiefDeliverEarnings=function(jD,jE,g3,jF)GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore(jD,jE,g3,jF)local jG=Logic.EntityGetPlayer(g3)Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(jE,jD,g3,jG,jF)end;GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore=GameCallback_OnThiefStealBuilding;GameCallback_OnThiefStealBuilding=function(jE,jD,g3,jH)Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(jE,jD,g3,jH)end;GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore=GameCallback_OnBuildingUpgradeFinished;GameCallback_OnBuildingUpgradeFinished=function(q,an,jI)GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore(q,an,jI)Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(q,an,jI)end;GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore=GameCallback_OnUpgradeLevelCollapsed;GameCallback_OnUpgradeLevelCollapsed=function(q,g3,jI)GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore(q,g3,jI)Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(q,g3,jI)end end;function Lib.EntityEvent.Global:OverrideLogic()self.Logic_ChangeEntityPlayerID=Logic.ChangeEntityPlayerID;Logic.ChangeEntityPlayerID=function(...)local dF={arg[1]}local jz=Logic.EntityGetPlayer(arg[1])local dG={self.Logic_ChangeEntityPlayerID(unpack(arg))}local jA=Logic.EntityGetPlayer(dG[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(dF,jz,dG,jA)return dG end;self.Logic_ChangeSettlerPlayerID=Logic.ChangeSettlerPlayerID;Logic.ChangeSettlerPlayerID=function(...)local dF={arg[1]}local jz=Logic.EntityGetPlayer(arg[1])local jJ={Logic.GetSoldiersAttachedToLeader(arg[1])}if jJ[1]and jJ[1]>0 then for f=2,jJ[1]+1 do table.insert(dF,jJ[f])end end;local dG={self.Logic_ChangeSettlerPlayerID(unpack(arg))}local jK={Logic.GetSoldiersAttachedToLeader(dG[1])}if jK[1]and jK[1]>0 then for f=2,jK[1]+1 do table.insert(dG,jK[f])end end;local jA=Logic.EntityGetPlayer(dG[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(dF,jz,dG,jA)return dG[1]end end;function Lib.EntityEvent.Global:StartTriggers()self.JobID.EveryTurn=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()if Logic.GetCurrentTurn()>0 then Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()Lib.EntityEvent.Global:CheckOnSpawnerEntities()end end)self.JobID.EverySecond=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,function()local jL={Entities.R_IronMine,Entities.R_StoneMine}for f=1,#jL do local jM=Logic.GetEntitiesOfType(jL[f])for bO=1,#jM do local bA=self.MineAmounts[jM[bO]]local jN=Logic.GetResourceDoodadGoodAmount(jM[bO])if bA and jN and bA~=jN then local l=Logic.GetResourceDoodadGoodType(jM[bO])SendReport(Report.EntityResourceChanged,jM[bO],l,bA,jN)SendReportToLocal(Report.EntityResourceChanged,jM[bO],l,bA,jN)end;self.MineAmounts[jM[bO]]=jN end end end)self.JobID.EntityDestroyed=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local jO=Event.GetEntityID()local jv=Logic.EntityGetPlayer(jO)Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(jO,jv)if Lib.EntityEvent.Global.AttackedEntities[jO]~=nil then local jP=Lib.EntityEvent.Global.AttackedEntities[jO][1]local jw=Logic.EntityGetPlayer(jP)Lib.EntityEvent.Global.AttackedEntities[jO]=nil;Lib.EntityEvent.Global:TriggerEntityKilledEvent(jO,jv,jP,jw)end end)self.JobID.EveryHurn=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_HURT_ENTITY,function()local jO=Event.GetEntityID1()local jv=Logic.EntityGetPlayer(jO)local jP=Event.GetEntityID2()local jw=Logic.EntityGetPlayer(jP)SendReport(Report.EntityHurt,jO,jv,jP,jw)SendReportToLocal(Report.EntityHurt,jO,jv,jP,jw)end)end;function Lib.EntityEvent.Global:CheckOnSpawnerEntities()local jQ={}for f=1,#self.DynamicSpawnerTypes do if Entities[self.DynamicSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.DynamicSpawnerTypes[f]]))do table.insert(jQ,h)end end end end;for f=1,#self.StaticSpawnerTypes do if Entities[self.StaticSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.StaticSpawnerTypes[f]]))do table.insert(jQ,h)end end end end;for f=1,#jQ do for g,h in pairs{Logic.GetSpawnedEntities(jQ[f])}do if not self.RegisteredEntities[h]then self:TriggerEntitySpawnedEvent(h,jQ[f])self.RegisteredEntities[h]=jQ[f]end end end end;function Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(jR,jS,jT,jU)jR=type(jR)~="table"and{jR}or jR;jT=type(jT)~="table"and{jT}or jT;assert(#jR==#jT,"Sums of entities with changed owner does not add up!")for f=1,#jR do SendReport(Report.EntityOwnerChanged,jR[f],jS,jT[f],jU)SendReportToLocal(Report.EntityOwnerChanged,jR[f],jS,jT[f],jU)end end;function Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(jE,jD,g3,jH,jF)SendReport(Report.ThiefDeliverEarnings,jE,jD,g3,jH,jF)SendReportToLocal(Report.ThiefDeliverEarnings,jE,jD,g3,jH,jF)end;function Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(jE,jD,g3,jH)local d1=Logic.GetHeadquarters(jH)local fG=Logic.GetCathedral(jH)local c_=Logic.GetStoreHouse(jH)local jV=Logic.IsEntityInCategory(c_,EntityCategories.VillageStorehouse)==1;local jW=Logic.GetEntityType(g3)if c_==g3 and(not jV or d1==0)then if not self.DisableThiefStorehouseHeist then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(jE,jD,g3,jH)end end;if fG==g3 then if not self.DisableThiefCathedralSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(jE,jD,g3,jH)end end;if Framework.GetGameExtraNo()>0 and jW==Entities.B_Cistern then if not self.DisableThiefCisternSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(jE,jD,g3,jH)end end;SendReport(Report.ThiefInfiltratedBuilding,jE,jD,g3,jH)SendReportToLocal(Report.ThiefInfiltratedBuilding,jE,jD,g3,jH)end;function Lib.EntityEvent.Global:TriggerEntitySpawnedEvent(an,jX)local n=Logic.EntityGetPlayer(an)SendReport(Report.EntitySpawned,an,n,jX)SendReportToLocal(Report.EntitySpawned,an,n,jX)end;function Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(q,an)SendReport(Report.SettlerAttracted,an,q)SendReportToLocal(Report.SettlerAttracted,an,q)end;function Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(an,q)SendReport(Report.EntityDestroyed,an,q)SendReportToLocal(Report.EntityDestroyed,an,q)end;function Lib.EntityEvent.Global:TriggerEntityKilledEvent(jY,jZ,j_,k0)SendReport(Report.EntityKilled,jY,jZ,j_,k0)SendReportToLocal(Report.EntityKilled,jY,jZ,j_,k0)end;function Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(q,an)SendReport(Report.BuildingConstructed,an,q)SendReportToLocal(Report.BuildingConstructed,an,q)end;function Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(q,an,jI)SendReport(Report.BuildingUpgraded,an,q,jI)SendReportToLocal(Report.BuildingUpgraded,an,q,jI)end;function Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(q,an,jI)SendReport(Report.BuildingUpgradeCollapsed,an,q,jI)SendReportToLocal(Report.BuildingUpgradeCollapsed,an,q,jI)end;function Lib.EntityEvent.Local:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")end;function Lib.EntityEvent.Local:OnEvent(aD,...)if aD==Report.LoadscreenClosed then self.LoadscreenClosed=true end end;function Lib.EntityEvent.Shared:IterateOverEntities(jt,k1)k1=k1 or Entities;local k2={}for gn,h in pairs(k1)do local k3=Logic.GetEntitiesOfType(h)for f=1,#k3 do if jt(k3[f])then table.insert(k2,k3[f])end end end;return k2 end;RegisterModule(Lib.EntityEvent.Name)Lib.Register("module/entity/EntitySelection_Text")Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Text={Tooltips={KnightButton={Title={de="Ritter selektieren",en="Select Knight",fr="Sélectionner le chevalier"},Text={de="- Klick selektiert den Ritter {cr}- Doppelklick springt zum Ritter{cr}- UMSCH halten selektiert alle Ritter",en="- Click selects the knight {cr}- Double click jumps to knight{cr}- Press SHIFT to select all knights",fr="- Clic sélectionne le chevalier {cr}- Double-clic saute au chevalier{cr}- Maintenir SHIFT sélectionne tous les chevaliers"}},BattalionButton={Title={de="Militär selektieren",en="Select Units",fr="Sélectionner les unitées"},Text={de="- Selektiert alle Einheiten {cr}- UMSCH halten selektiert Militär {cr}- ALT halten selektiert Kriegsmaschinen {cr}- STRG halten selektiert Diebe",en="- Selects all units {cr}- Holding SHIFT selects military {cr}- Holding ALT selects siege engines {cr}- Holding CTRL selects thieves",fr="- Sélectionne toutes les unités {cr}- Maintenir SHIFT sélectionne les militaires {cr}- Maintenir ALT sélectionne les machines de guerre {cr}- Maintenir CTRL sélectionne les voleurs"}},ReleaseSoldiers={Title={de="Militär entlassen",en="Release military unit",fr="licencier l'unitées"},Text={de="- Eine Militäreinheit entlassen {cr}- Soldaten werden nacheinander entlassen",en="- Dismiss a military unit {cr}- Soldiers will be dismissed each after another",fr="- Licencier une unité militaire {cr}- Les soldats sont licenciés les uns après les autres"},Disabled={de="Kann nicht entlassen werden!",en="Releasing is impossible!",fr="Ne peut pas être licencié!"}},TrebuchetCart={Title={de="Trebuchetwagen",en="Trebuchet cart",fr="Chariot à trébuchet"},Text={de="- Kann einmalig zum Trebuchet ausgebaut werden",en="- Can uniquely be transmuted into a trebuchet",fr="- Peut être transformé une seule fois en trébuchet"}},Trebuchet={Title={de="Trebuchet",en="Trebuchet",fr="Trébuchet"},Text={de="- Kann über weite Strecken Gebäude angreifen {cr}- Kann Gebäude in Brand stecken {cr}- Trebuchet kann manuell zurückgeschickt werden",en="- Can perform long range attacks on buildings {cr}- Can set buildings on fire {cr}- The trebuchet can be manually send back to the city",fr="- Peut attaquer des bâtiments sur de longues distances {cr}- Peut mettre le feu à des bâtiments {cr}- Le trébuchet peut être renvoyé manuellement"}}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntitySelection_API")function DisableReleaseThieves(c5)if not GUI then ExecuteLocal([[DisableReleaseThieves(%s)]],tostring(c5))return end;Lib.EntitySelection.Local.ThiefRelease=not c5 end;API.DisableReleaseThieves=DisableReleaseThieves;function DisableReleaseSiegeEngines(c5)if not GUI then ExecuteLocal([[DisableReleaseSiegeEngines(%s)]],tostring(c5))return end;Lib.EntitySelection.Local.SiegeEngineRelease=not c5 end;API.DisableReleaseSiegeEngines=DisableReleaseSiegeEngines;function DisableReleaseSoldiers(c5)if not GUI then ExecuteLocal([[DisableReleaseSoldiers(%s)]],tostring(c5))return end;Lib.EntitySelection.Local.MilitaryRelease=not c5 end;API.DisableReleaseSoldiers=DisableReleaseSoldiers;function IsEntitySelected(k,q)if IsExisting(k)then local B=GetID(k)local n=q or Logic.EntityGetPlayer(B)local k4;if not GUI then k4=Lib.EntitySelection.Global.SelectedEntities[n]else k4={GUI.GetSelectedEntities()}end;for f=1,#k4,1 do if k4[f]==B then return true end end end;return false end;API.IsEntityInSelection=IsEntitySelected;function GetSelectedEntity(q)local k5;if not GUI then k5=Lib.EntitySelection.Global.SelectedEntities[q][1]else k5=Lib.EntitySelection.Local.SelectedEntities[q][1]end;return k5 or 0 end;API.GetSelectedEntity=GetSelectedEntity;function GetSelectedEntities(q)local k4;if not GUI then k4=Lib.EntitySelection.Global.SelectedEntities[q]else k4=Lib.EntitySelection.Local.SelectedEntities[q]end;return k4 end;API.GetSelectedEntities=GetSelectedEntities;Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Name="EntitySelection"Lib.EntitySelection.Global={TrebuchetIDToCart={},SelectedEntities={}}Lib.EntitySelection.Local={SelectedEntities={},TrebuchetDisassemble=false,TrebuchetErect=false,ThiefRelease=false,SiegeEngineRelease=true,MilitaryRelease=true}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/entity/EntitySelection_API")Lib.Require("module/entity/EntitySelection_Text")Lib.Register("module/entity/EntitySelection")function Lib.EntitySelection.Global:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")for f=1,8 do self.SelectedEntities[f]={}end;Lib.EntitySelection.Local=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Global:OnSaveGameLoaded()end;function Lib.EntitySelection.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ForceTrebuchetTasklist then Logic.SetTaskList(arg[1],arg[2])elseif aD==Report.ErectTrebuchet then Lib.EntitySelection.Global:MilitaryErectTrebuchet(arg[1])elseif aD==Report.DisambleTrebuchet then Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(arg[1])elseif aD==Report.ExpelSettler then DestroyEntity(arg[1])elseif aD==Report.SelectionChanged then local n=table.remove(arg,1)Lib.EntitySelection.Global.SelectedEntities[n]=arg end end;function Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(an)local I,J,K=Logic.EntityGetPos(an)local n=Logic.EntityGetPlayer(an)if GameCallback_Lib_OnDisambleTrebuchet then GameCallback_Lib_OnDisambleTrebuchet(an,n,I,J,K)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,I,J,0)Logic.SetEntityInvulnerabilityFlag(an,1)Logic.SetEntitySelectableFlag(an,0)Logic.SetVisible(an,false)local k6=self.TrebuchetIDToCart[an]if k6~=nil then Logic.SetEntityInvulnerabilityFlag(k6,0)Logic.SetEntitySelectableFlag(k6,1)Logic.SetVisible(k6,true)else k6=Logic.CreateEntity(Entities.U_SiegeEngineCart,I,J,0,n)self.TrebuchetIDToCart[an]=k6 end;Logic.DEBUG_SetSettlerPosition(k6,I,J)Logic.SetTaskList(k6,TaskLists.TL_NPC_IDLE)ExecuteLocal([[GUI.SelectEntity(%d)]],k6)end;function Lib.EntitySelection.Global:MilitaryErectTrebuchet(an)local I,J,K=Logic.EntityGetPos(an)local n=Logic.EntityGetPlayer(an)if GameCallback_Lib_OnErectTrebuchet then GameCallback_Lib_OnErectTrebuchet(an,n,I,J,K)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,I,J,0)Logic.SetEntityInvulnerabilityFlag(an,1)Logic.SetEntitySelectableFlag(an,0)Logic.SetVisible(an,false)local k7;for g,h in pairs(self.TrebuchetIDToCart)do if h==an then k7=tonumber(g)end end;if k7==nil then k7=Logic.CreateEntity(Entities.U_Trebuchet,I,J,0,n)self.TrebuchetIDToCart[k7]=an end;Logic.SetEntityInvulnerabilityFlag(k7,0)Logic.SetEntitySelectableFlag(k7,1)Logic.SetVisible(k7,true)Logic.DEBUG_SetSettlerPosition(k7,I,J)ExecuteLocal([[GUI.SelectEntity(%d)]],k7)end;function Lib.EntitySelection.Local:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.SelectionChanged=CreateReport("Event_SelectionChanged")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")if not(IsHistoryEdition()and IsMultiplayer())then self:OverrideSelection()self:OverwriteMilitaryCommands()self:OverwriteMilitaryErect()self:OverwriteMilitaryDisamble()self:OverwriteMultiselectIcon()self:OverwriteMilitaryDismount()self:OverwriteThiefDeliver()self:OverwriteSelectKnight()self:OverwriteSelectAllUnits()self:OverwriteNamesAndDescription()end;for f=1,8 do self.SelectedEntities[f]={}end;Lib.EntitySelection.Global=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Local:OnSaveGameLoaded()end;function Lib.EntitySelection.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.EntitySelection.Local:OverrideSelection()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.EntitySelection.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.EntitySelection.Local:OnSelectionCanged(b)end end;function Lib.EntitySelection.Local:OverwriteMilitaryCommands()GUI_Military.StandGroundClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local k4={GUI.GetSelectedEntities()}for f=1,#k4 do local k8=k4[f]local k9=Logic.GetEntityType(k8)GUI.SendCommandStationaryDefend(k8)if k9==Entities.U_Trebuchet then SendReportToGlobal(Report.ForceTrebuchetTasklist,k8,TaskLists.TL_NPC_IDLE)SendReport(Report.ForceTrebuchetTasklist,k8,TaskLists.TL_NPC_IDLE)end end end;GUI_Military.StandGroundUpdate=function()local ka="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack"local k4={GUI.GetSelectedEntities()}SetIcon(ka,{12,4})if#k4==1 then local bf=k4[1]local k9=Logic.GetEntityType(bf)if k9==Entities.U_Trebuchet then if Logic.GetAmmunitionAmount(bf)>0 then XGUIEng.ShowWidget(ka,0)else XGUIEng.ShowWidget(ka,1)end;SetIcon(ka,{1,10})else XGUIEng.ShowWidget(ka,1)end end end end;function Lib.EntitySelection.Local:OverwriteMilitaryErect()GUI_Military.ErectClicked_Orig_Selection=GUI_Military.ErectClicked;GUI_Military.ErectClicked=function()GUI_Military.ErectClicked_Orig_Selection()local k4={GUI.GetSelectedEntities()}for f=1,#k4,1 do local cZ=Logic.GetEntityType(k4[f])if cZ==Entities.U_SiegeEngineCart then SendReportToGlobal(Report.ErectTrebuchet,k4[f])SendReport(Report.ErectTrebuchet,k4[f])end end end;GUI_Military.ErectUpdate_Orig_Selection=GUI_Military.ErectUpdate;GUI_Military.ErectUpdate=function()local it=XGUIEng.GetCurrentWidgetID()local kb=GUI.GetSelectedEntity()local cZ=Logic.GetEntityType(kb)if cZ==Entities.U_SiegeEngineCart then local j7=Lib.EntitySelection.Local.TrebuchetErect and 0 or 1;XGUIEng.DisableButton(it,j7)SetIcon(it,{12,6})else GUI_Military.ErectUpdate_Orig_Selection()end end;GUI_Military.ErectMouseOver_Orig_Selection=GUI_Military.ErectMouseOver;GUI_Military.ErectMouseOver=function()local kb=GUI.GetSelectedEntity()local kc;if Logic.GetEntityType(kb)==Entities.U_SiegeEngineCart then kc="ErectCatapult"else GUI_Military.ErectMouseOver_Orig_Selection()return end;GUI_Tooltip.TooltipNormal(kc,"Erect")end end;function Lib.EntitySelection.Local:OverwriteMilitaryDisamble()GUI_Military.DisassembleClicked_Orig_Selection=GUI_Military.DisassembleClicked;GUI_Military.DisassembleClicked=function()GUI_Military.DisassembleClicked_Orig_Selection()local k4={GUI.GetSelectedEntities()}for f=1,#k4,1 do local cZ=Logic.GetEntityType(k4[f])if cZ==Entities.U_Trebuchet then SendReportToGlobal(Report.DisambleTrebuchet,k4[f])SendReport(Report.DisambleTrebuchet,k4[f])end end end;GUI_Military.DisassembleMouseOver_Orig_Selection=GUI_Military.DisassembleMouseOver;GUI_Military.DisassembleMouseOver=function()local kd=GUI.GetSelectedEntity()local ke;if Logic.IsSiegeEngineUnderConstruction(kd)==true then ke="Disassemble"else ke="DisassembleNoSoldiersAttached"if not Lib.EntitySelection.Local.TrebuchetDisassemble then ke="Disassemble"end end;GUI_Tooltip.TooltipNormal(nil,ke)end;GUI_Military.DisassembleUpdate_Orig_Selection=GUI_Military.DisassembleUpdate;GUI_Military.DisassembleUpdate=function()local it=XGUIEng.GetCurrentWidgetID()local kd=GUI.GetSelectedEntity()local cZ=Logic.GetEntityType(kd)if cZ==Entities.U_Trebuchet then local j7=Lib.EntitySelection.Local.TrebuchetDisassemble and 0 or 1;XGUIEng.DisableButton(it,j7)SetIcon(it,{12,9})else GUI_Military.DisassembleUpdate_Orig_Selection()end end end;function Lib.EntitySelection.Local:OnSelectionCanged(b)local n=GUI.GetPlayerID()local B=GUI.GetSelectedEntity()local cZ=Logic.GetEntityType(B)local k4={GUI.GetSelectedEntities()}self.SelectedEntities[n]=k4;SendReportToGlobal(Report.SelectionChanged,n,unpack(k4))SendReport(Report.SelectionChanged,n,unpack(k4))if B~=nil then if cZ==Entities.U_SiegeEngineCart then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngineCart",1)elseif cZ==Entities.U_Trebuchet then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack",0)GUI_Military.StrengthUpdate()XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngine",1)end end end;function Lib.EntitySelection.Local:OverwriteMultiselectIcon()GUI_MultiSelection.IconUpdate_Orig_Selection=GUI_MultiSelection.IconUpdate;GUI_MultiSelection.IconUpdate=function()local it=XGUIEng.GetCurrentWidgetID()local kf=XGUIEng.GetWidgetsMotherID(it)local kg=XGUIEng.GetWidgetNameByID(kf)local cu=kg+0;local kh=XGUIEng.GetWidgetPathByID(kf)local ki=kh.."/Health"local B=g_MultiSelection.EntityList[cu]local cZ=Logic.GetEntityType(B)local kj=Logic.GetEntityHealth(B)local kk=Logic.GetEntityMaxHealth(B)if cZ~=Entities.U_SiegeEngineCart and cZ~=Entities.U_Trebuchet then GUI_MultiSelection.IconUpdate_Orig_Selection()return end;if Logic.IsEntityAlive(B)==false then XGUIEng.ShowWidget(kf,0)GUI_MultiSelection.CreateEX()return end;SetIcon(it,g_TexturePositions.Entities[cZ])kj=math.floor(kj/kk*100)if kj<50 then local kl=math.floor(2*255*kj/100)XGUIEng.SetMaterialColor(ki,0,255,kl,20,255)else local km=2*255-math.floor(2*255*kj/100)XGUIEng.SetMaterialColor(ki,0,km,255,20,255)end;XGUIEng.SetProgressBarValues(ki,kj,100)end;GUI_MultiSelection.IconMouseOver_Orig_Selection=GUI_MultiSelection.IconMouseOver;GUI_MultiSelection.IconMouseOver=function()local it=XGUIEng.GetCurrentWidgetID()local kf=XGUIEng.GetWidgetsMotherID(it)local kg=XGUIEng.GetWidgetNameByID(kf)local cu=tonumber(kg)local B=g_MultiSelection.EntityList[cu]local cZ=Logic.GetEntityType(B)if cZ~=Entities.U_SiegeEngineCart and cZ~=Entities.U_Trebuchet then GUI_MultiSelection.IconMouseOver_Orig_Selection()return end;if cZ==Entities.U_SiegeEngineCart then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Title),Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Text))elseif cZ==Entities.U_Trebuchet then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Title),Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Text))end end end;function Lib.EntitySelection.Local:OverwriteMilitaryDismount()GUI_Military.DismountClicked_Orig_Selection=GUI_Military.DismountClicked;GUI_Military.DismountClicked=function()local kn=GUI.GetSelectedEntity()local l=Logic.GetEntityType(kn)local ko=Logic.GetGuardedEntityID(kn)local kp=Logic.GetGuardianEntityID(kn)if ko~=0 and Logic.EntityGetPlayer(ko)~=GUI.GetPlayerID()then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsKnight(kn)or Logic.IsEntityInCategory(kn,EntityCategories.AttackableMerchant)==1 then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsLeader(kn)==1 and ko==0 then if Lib.EntitySelection.Local.MilitaryRelease then Sound.FXPlay2DSound("ui\\menu_click")local aA={Logic.GetSoldiersAttachedToLeader(kn)}SendReportToGlobal(Report.ExpelSettler,aA[#aA])SendReport(Report.ExpelSettler,aA[#aA])return end end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if Lib.EntitySelection.Local.SiegeEngineRelease and kp==0 then Sound.FXPlay2DSound("ui\\menu_click")SendReportToGlobal(Report.ExpelSettler,kn)SendReport(Report.ExpelSettler,kn)else GUI_Military.DismountClicked_Orig_Selection()end end end;GUI_Military.DismountUpdate_Orig_Selection=GUI_Military.DismountUpdate;GUI_Military.DismountUpdate=function()local it=XGUIEng.GetCurrentWidgetID()local kn=GUI.GetSelectedEntity()local l=Logic.GetEntityType(kn)local ko=Logic.GetGuardedEntityID(kn)local kp=Logic.GetGuardianEntityID(kn)SetIcon(it,{12,1})if ko~=0 and Logic.EntityGetPlayer(ko)~=GUI.GetPlayerID()then XGUIEng.DisableButton(it,0)GUI_Military.DismountUpdate_Orig_Selection()return end;if Logic.IsKnight(kn)or Logic.IsEntityInCategory(kn,EntityCategories.AttackableMerchant)==1 then XGUIEng.DisableButton(it,0)GUI_Military.DismountUpdate_Orig_Selection()return end;SetIcon(it,{14,12})if l==Entities.U_MilitaryLeader then if not Lib.EntitySelection.Local.MilitaryRelease then XGUIEng.DisableButton(it,1)else XGUIEng.DisableButton(it,0)end;return end;if l==Entities.U_AmmunitionCart or l==Entities.U_BatteringRamCart or l==Entities.U_CatapultCart or l==Entities.U_SiegeTowerCart or l==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or l==Entities.U_MilitarySiegeTower then if kp~=0 then SetIcon(it,{12,1})XGUIEng.DisableButton(it,0)else if not Lib.EntitySelection.Local.SiegeEngineRelease then XGUIEng.DisableButton(it,1)else XGUIEng.DisableButton(it,0)end end end end end;function Lib.EntitySelection.Local:OverwriteThiefDeliver()GUI_Thief.ThiefDeliverClicked_Orig_Selection=GUI_Thief.ThiefDeliverClicked;GUI_Thief.ThiefDeliverClicked=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverClicked_Orig_Selection()return end;Sound.FXPlay2DSound("ui\\menu_click")local kq=GUI.GetSelectedEntity()if kq==nil or Logic.GetEntityType(kq)~=Entities.U_Thief then return end;SendReportToGlobal(Report.ExpelSettler,kq)SendReport(Report.ExpelSettler,kq)end;GUI_Thief.ThiefDeliverMouseOver_Orig_Selection=GUI_Thief.ThiefDeliverMouseOver;GUI_Thief.ThiefDeliverMouseOver=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverMouseOver_Orig_Selection()return end;SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))end;GUI_Thief.ThiefDeliverUpdate_Orig_Selection=GUI_Thief.ThiefDeliverUpdate;GUI_Thief.ThiefDeliverUpdate=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverUpdate_Orig_Selection()return end;local it=XGUIEng.GetCurrentWidgetID()local kq=GUI.GetSelectedEntity()if kq==nil or Logic.GetEntityType(kq)~=Entities.U_Thief then XGUIEng.DisableButton(it,1)else XGUIEng.DisableButton(it,0)end;SetIcon(it,{14,12})end end;function Lib.EntitySelection.Local:OverwriteSelectKnight()GUI_Knight.JumpToButtonClicked=function()local n=GUI.GetPlayerID()local eb=Logic.GetKnightID(n)if eb>0 then g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}GUI.ClearSelection()if XGUIEng.IsModifierPressed(Keys.ModifierShift)then local kr={}Logic.GetKnights(n,kr)for f=1,#kr do GUI.SelectEntity(kr[f])end else GUI.SelectEntity(Logic.GetKnightID(n))if Framework.GetTimeMs()-g_Selection.LastClickTime<g_Selection.MaxDoubleClickTime then local aF=GetPosition(eb)Camera.RTS_SetLookAtPosition(aF.X,aF.Y)else Sound.FXPlay2DSound("ui\\mini_knight")end;g_Selection.LastClickTime=Framework.GetTimeMs()end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)else GUI.AddNote("Debug: You do not have a knight!")end end end;function Lib.EntitySelection.Local:OverwriteSelectAllUnits()GUI_MultiSelection.SelectAllPlayerUnitsClicked=function()local ks=XGUIEng.IsModifierPressed(Keys.ModifierAlt)local kt=XGUIEng.IsModifierPressed(Keys.ModifierControl)local ku=XGUIEng.IsModifierPressed(Keys.ModifierShift)if not ks and not kt and not ku then Lib.EntitySelection.Local:SortOrderFullSelection()end;if ks and not kt and not ku then Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()end;if not ks and kt and not ku then Lib.EntitySelection.Local:SortOrderThievesOnly()end;if not ks and not kt and ku then Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()end;Sound.FXPlay2DSound("ui\\menu_click")GUI.ClearSelection()local n=GUI.GetPlayerID()for f=1,#LeaderSortOrder do local kv=GetPlayerEntities(n,LeaderSortOrder[f])for bO=1,#kv do GUI.SelectEntity(kv[bO])end end;if not ks and not kt and not ku or not ks and not kt and ku then local kw={}Logic.GetKnights(n,kw)for g=1,#kw do GUI.SelectEntity(kw[g])end end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)end end;function Lib.EntitySelection.Local:SortOrderFullSelection()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_Trebuchet;LeaderSortOrder[15]=Entities.U_MilitarySiegeTower;LeaderSortOrder[16]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[17]=Entities.U_CatapultCart;LeaderSortOrder[18]=Entities.U_SiegeTowerCart;LeaderSortOrder[19]=Entities.U_BatteringRamCart;LeaderSortOrder[20]=Entities.U_AmmunitionCart;LeaderSortOrder[21]=Entities.U_Thief;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end end;function Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitaryCatapult;LeaderSortOrder[2]=Entities.U_Trebuchet;LeaderSortOrder[3]=Entities.U_MilitarySiegeTower;LeaderSortOrder[4]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[5]=Entities.U_CatapultCart;LeaderSortOrder[6]=Entities.U_SiegeTowerCart;LeaderSortOrder[7]=Entities.U_BatteringRamCart;LeaderSortOrder[8]=Entities.U_AmmunitionCart;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderThievesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_Thief end;function Lib.EntitySelection.Local:OverwriteNamesAndDescription()GUI_Tooltip.SetNameAndDescription_Orig_Selection=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(kx,ky,kz,kA,kB)local hq="/InGame/Root/Normal/AlignBottomRight"local it=XGUIEng.GetCurrentWidgetID()if XGUIEng.GetWidgetID(hq.."/MapFrame/KnightButton")==it then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Text))return end;if XGUIEng.GetWidgetID(hq.."/MapFrame/BattalionButton")==it then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Text))return end;if XGUIEng.GetWidgetID(hq.."/DialogButtons/SiegeEngineCart/Dismount")==it or XGUIEng.GetWidgetID(hq.."/DialogButtons/AmmunitionCart/Dismount")==it or XGUIEng.GetWidgetID(hq.."/DialogButtons/Military/Dismount")==it then local k5=GUI.GetSelectedEntity()if k5~=0 then if Logic.IsEntityInCategory(k5,EntityCategories.Military)==1 then local kC=Logic.GetGuardianEntityID(k5)local kD=Logic.GetGuardedEntityID(k5)if kC==0 and kD==0 then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))return end end end end;GUI_Tooltip.SetNameAndDescription_Orig_Selection(kx,ky,kz,kA,kB)end end;RegisterModule(Lib.EntitySelection.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/balancing/Damage_API")function SetEntityTypeDamage(i,kE,...)Lib.Damage.Global:SetEntityTypeDamage(i,kE,...)end;API.SetEntityTypeDamage=SetEntityTypeDamage;function SetEntityNameDamage(r,kE,...)Lib.Damage.Global:SetEntityNameDamage(r,kE,...)end;API.SetEntityNameDamage=SetEntityNameDamage;function SetEntityTypeArmor(i,kF)Lib.Damage.Global:SetEntityTypeArmor(i,kF)end;API.SetEntityTypeArmor=SetEntityTypeArmor;function SetEntityNameArmor(r,kF)Lib.Damage.Global:SetEntityNameArmor(r,kF)end;API.SetEntityNameArmor=SetEntityNameArmor;function SetTerritoryBonus(q,kG)Lib.Damage.Global:SetTerritoryBonus(q,kG)end;API.SetTerritoryBonus=SetTerritoryBonus;function SetHeightModifier(q,kG)Lib.Damage.Global:SetHeightModifier(q,kG)end;API.SetHeightModifier=SetHeightModifier;function IsInvulnerable(k)return Lib.Damage.Global:IsInvulnerable(k)end;API.IsInvulnerable=IsInvulnerable;Lib.Damage=Lib.Damage or{}Lib.Damage.Name="Damage"Lib.Damage.Global={InvulnerableList={},EntityTypeDamage={},EntityNameDamage={},EntityTypeArmor={},EntityNameArmor={},TerritoryBonus={},HeightModifier={}}Lib.Damage.Local={}Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent")Lib.Require("module/balancing/Damage_API")Lib.Register("module/balancing/Damage")function Lib.Damage.Global:Initialize()if not self.IsInstalled then for n=0,8 do self.TerritoryBonus[n]=-0.25;self.HeightModifier[n]=1 end;self:OverwriteVulnerabilityFunctions()self:InitEntityBaseDamage()Lib.Damage.Local=nil end;self.IsInstalled=true end;function Lib.Damage.Global:OnSaveGameLoaded()end;function Lib.Damage.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EntityDestroyed then self.InvulnerableList[arg[1]]=nil elseif aD==Report.EntityHurt then self:OnEntityHurtEntity(arg[1],arg[2],arg[3],arg[4])end end;function Lib.Damage.Global:SetEntityTypeDamage(i,kE,...)assert(type(kE)=="number")local j={...}self.EntityTypeDamage[i]=self.EntityTypeDamage[i]or{}if#j==0 then self.EntityTypeDamage[i][0]=kE;return end;for f=1,#j do self.EntityTypeDamage[i][j[f]]=kE end end;function Lib.Damage.Global:SetEntityNameDamage(r,kE,...)assert(type(kE)=="number")local j={...}self.EntityNameDamage[r]=self.EntityNameDamage[r]or{}if#j==0 then self.EntityNameDamage[r][0]=kE;return end;for f=1,#j do self.EntityNameDamage[r][j[f]]=kE end end;function Lib.Damage.Global:SetEntityTypeArmor(i,kF)assert(type(kF)=="number")self.EntityTypeArmor[i]=kF end;function Lib.Damage.Global:SetEntityNameArmor(r,kF)assert(type(kF)=="number")self.EntityNameArmor[r]=kF end;function Lib.Damage.Global:SetTerritoryBonus(q,kG)assert(type(kG)=="number")self.TerritoryBonus[q]=kG or 1 end;function Lib.Damage.Global:SetHeightModifier(q,kG)assert(type(kG)=="number")self.HeightModifier[q]=kG or 1 end;function Lib.Damage.Global:IsInvulnerable(k)return self.InvulnerableList[GetID(k)]~=nil end;function Lib.Damage.Global:InitEntityBaseDamage()self:SetEntityTypeDamage(Entities.U_MilitaryBow,20)self:SetEntityTypeDamage(Entities.U_MilitaryBow,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,20)self:SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitarySword,30)self:SetEntityTypeDamage(Entities.U_MilitarySword,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,30)self:SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,30)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,20)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,30)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,20)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,30)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,20)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,30)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,20)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBallista,50)self:SetEntityTypeDamage(Entities.U_MilitaryBallista,10,EntityCategories.CityWallGate)self:SetEntityTypeDamage(Entities.U_MilitaryCatapult,50)self:SetEntityTypeDamage(Entities.U_MilitaryCatapult,10,EntityCategories.CityWallGate)self:SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,120)self:SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,120,EntityCategories.CityWallSegment)self:SetEntityTypeDamage(Entities.U_MilitarySiegeTower,0)self:SetEntityTypeDamage(Entities.U_MilitaryTrap,800)self:SetEntityTypeDamage(Entities.A_ME_Bear,120)self:SetEntityTypeDamage(Entities.A_ME_Bear_black,120)self:SetEntityTypeDamage(Entities.A_ME_Wolf,20)self:SetEntityTypeDamage(Entities.A_NA_Lion_Female,40)self:SetEntityTypeDamage(Entities.A_NA_Lion_Male,40)self:SetEntityTypeDamage(Entities.A_NE_PolarBear,120)if g_GameExtraNo==0 then return end;self:SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,20)self:SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitarySword_Khana,30)self:SetEntityTypeDamage(Entities.U_MilitarySword_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,30)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,20)self:SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)self:SetEntityTypeDamage(Entities.A_AS_BearBlack,120)self:SetEntityTypeDamage(Entities.A_AS_Tiger,40)end;function Lib.Damage.Global:OverwriteVulnerabilityFunctions()MakeInvulnerable=function(k)if IsExisting(k)then local al=GetID(k)Lib.Damage.Global.InvulnerableList[al]=nil;Logic.SetEntityInvulnerabilityFlag(al,1)end end;MakeVulnerable=function(k)if IsExisting(k)then local al=GetID(k)Lib.Damage.Global.InvulnerableList[al]=true;Logic.SetEntityInvulnerabilityFlag(al,0)end end end;function Lib.Damage.Global:OnEntityHurtEntity(jY,jZ,j_,k0)local kH=self:GetTrueEntityID(jY)local kI=self:GetTrueEntityID(j_)if kH==0 or kI==0 then return end;Logic.SetEntityInvulnerabilityFlag(kI,1)if self.InvulnerableList[kI]then return end;local kJ=Logic.GetTerritoryBonus(kH)*self.TerritoryBonus[jZ]local kK=Logic.GetHeightDamageModifier(kH)*self.HeightModifier[jZ]local kL=Logic.GetEntityType(kH)local kM=Logic.GetEntityType(kI)local kN=Logic.GetEntityName(kI)local kO=Logic.GetPlayerMorale(jZ)local kP=self:GetEntityBaseDamage(kL,kM)local kQ=0;if self.EntityTypeArmor[kM]then kQ=self.EntityTypeArmor[kM]end;if self.EntityNameArmor[kN]then kQ=self.EntityNameArmor[kN]end;kP=kP*(math.max(kO,0.5)+kJ)*kK;if Logic.GetCurrentTaskList(kH)=="TL_BATTLE_BOW_CLOSECOMBAT"then kP=kP*0.2 end;kP=math.abs(math.max(1,math.ceil(kP-kQ)))if GameCallback_Lib_CalculateBattleDamage~=nil then kP=GameCallback_Lib_CalculateBattleDamage(kH,jZ,kI,k0,kP)end;local a8=Logic.GetEntityHealth(kI)kP=math.min(a8,kP)Logic.SetEntityInvulnerabilityFlag(kI,0)Logic.HurtEntity(kI,kP)if a8>kP then Logic.SetEntityInvulnerabilityFlag(kI,1)end end;function Lib.Damage.Global:GetEntityBaseDamage(kR,kS)if self.EntityNameDamage[kR]then for df,kP in pairs(self.EntityNameDamage[kR])do if df>0 and Logic.IsEntityTypeInCategory(kS,df)==1 then return kP end end;return self.EntityNameDamage[kR][0]or 25 end;if self.EntityTypeDamage[kR]then for df,kP in pairs(self.EntityTypeDamage[kR])do if df>0 and Logic.IsEntityTypeInCategory(kS,df)==1 then return kP end end;return self.EntityTypeDamage[kR][0]or 25 end;return 25 end;function Lib.Damage.Global:GetTrueEntityID(an)if Logic.IsLeader(an)==1 then local aA={Logic.GetSoldiersAttachedToLeader(an)}for f=2,aA[1]+1 do if Logic.GetEntityHealth(aA[f])>0 then return aA[f]end end;return 0 end;if Logic.GetEntityHealth(an)==0 then return 0 end;return an end;function Lib.Damage.Local:Initialize()if not self.IsInstalled then Lib.Damage.Global=nil end;self.IsInstalled=true end;function Lib.Damage.Local:OnSaveGameLoaded()end;function Lib.Damage.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.Damage.Name)Lib.Register("module/quest/Quest_API")function SetupQuest(f7)if GUI then return end;error(not f7.Name or not Quests[GetQuestID(f7.Name)],"SetupQuest: A quest named '%s' already exists!",tostring(f7.Name))return Lib.Quest.Global:CreateSimpleQuest(f7)end;API.CreateQuest=SetupQuest;function SetupNestedQuest(f7)if GUI or type(f7)~="table"then return end;error(f7.Segments~=nil and#f7.Segments~=0,"SetupNestedQuest: Segmented quest '%s' is missing it's segments!",tostring(f7.Name))return Lib.Quest.Global:CreateNestedQuest(f7)end;API.CreateNestedQuest=SetupNestedQuest;function AddDisableTriggerCondition(b5)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTriggerConditions,b5)end;API.AddDisableTriggerCondition=AddDisableTriggerCondition;function AddDisableTimerCondition(b5)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTimerConditions,b5)end;API.AddDisableTimerCondition=AddDisableTimerCondition;function AddDisableDecisionCondition(b5)if GUI then return end;table.insert(Lib.Quest.Global.ExternalDecisionConditions,b5)end;API.AddDisableDecisionCondition=AddDisableDecisionCondition;Lib.Quest=Lib.Quest or{}Lib.Quest.Name="Quest"Lib.Quest.Global={ExternalTriggerConditions={},ExternalTimerConditions={},ExternalDecisionConditions={},SegmentsOfQuest={}}Lib.Quest.Local={}SegmentResult={Success=1,Failure=2,Ignore=3}Lib.Require("comfort/global/GetQuestID")Lib.Require("comfort/global/IsValidQuest")Lib.Require("comfort/global/IsValidQuestName")Lib.Require("core/core")Lib.Require("module/quest/Quest_API")Lib.Register("module/quest/Quest")function Lib.Quest.Global:Initialize()if not self.IsInstalled then Quest_Loop=self.QuestLoop;self:OverrideKernelQuestApi()Lib.Quest.Local=nil end;self.IsInstalled=true end;function Lib.Quest.Global:OnSaveGameLoaded()end;function Lib.Quest.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ChatClosed then end end;function Lib.Quest.Global:CreateNestedQuest(f7)if not f7.Segments then return end;table.insert(f7,Goal_MapScriptFunction(self:GetCheckQuestSegmentsInlineGoal(),f7.Name))local Name=self:CreateSimpleQuest(f7)if Name~=nil then Quests[GetQuestID(Name)].Visible=false;self.SegmentsOfQuest[Name]={}for f=1,#f7.Segments,1 do self:CreateSegmentForSegmentedQuest(f7.Segments[f],Name,f)end end;return Name end;function Lib.Quest.Global:CreateSegmentForSegmentedQuest(f7,kT,cy)local Name=f7.Name or kT.."@Segment"..cy;local kU=Quests[GetQuestID(kT)]local kV={Name=Name,Segments=f7.Segments,Result=f7.Result or SegmentResult.Success,Sender=f7.Sender or kU.SendingPlayer,Receiver=f7.Receiver or kU.ReceivingPlayer,Time=f7.Time,Suggestion=f7.Suggestion,Success=f7.Success,Failure=f7.Failure,Description=f7.Description,Loop=f7.Loop,Callback=f7.Callback}for f=1,#f7 do table.insert(kV,f7[f])end;table.insert(kV,Trigger_OnQuestActive(kT,0))if kV.Segments then self:CreateNestedQuest(kV)else self:CreateSimpleQuest(kV)end;table.insert(self.SegmentsOfQuest[kT],kV)end;function Lib.Quest.Global:GetCheckQuestSegmentsInlineGoal()return function(bI)local kW=true;local kX=Lib.Quest.Global.SegmentsOfQuest[bI]for f=1,#kX,1 do local kY=Quests[GetQuestID(kX[f].Name)]if not kY then return false end;if kY.State==QuestState.Over and kY.Result~=QuestResult.Interrupted then if kX[f].Result==SegmentResult.Success and kY.Result~=QuestResult.Success then Lib.Quest.Global:AbortAllQuestSegments(bI)return false end;if kX[f].Result==SegmentResult.Failure and kY.Result~=QuestResult.Failure then Lib.Quest.Global:AbortAllQuestSegments(bI)return false end end;if kY.State~=QuestState.Over then kW=false end end;if kW then return true end end end;function Lib.Quest.Global:AbortAllQuestSegments(bI)for f=1,#self.SegmentsOfQuest[bI],1 do local kZ=self.SegmentsOfQuest[bI][f].Name;if IsValidQuest(bI)and Quests[GetQuestID(kZ)].State~=QuestState.Over then StopQuest(kZ,true)end end end;function Lib.Quest.Global:CreateSimpleQuest(f7)if not f7.Name then AutomaticQuestNameCounter=(AutomaticQuestNameCounter or 0)+1;f7.Name=string.format("AutoNamed_Quest_%d",AutomaticQuestNameCounter)end;error(IsValidQuestName(f7.Name),"Quest '%s': invalid questname! Contains forbidden characters!",tostring(f7.Name))local k_={f7.Name,f7.Sender~=nil and f7.Sender or 1,f7.Receiver~=nil and f7.Receiver or 1,{},{},f7.Time~=nil and f7.Time or 0,{},{},f7.Callback,f7.Loop,f7.Visible==true or f7.Suggestion~=nil,f7.EndMessage==true or(f7.Failure~=nil or f7.Success~=nil),ConvertPlaceholders(type(f7.Description)=="table"and Localize(f7.Description)or f7.Description),ConvertPlaceholders(type(f7.Suggestion)=="table"and Localize(f7.Suggestion)or f7.Suggestion),ConvertPlaceholders(type(f7.Success)=="table"and Localize(f7.Success)or f7.Success),ConvertPlaceholders(type(f7.Failure)=="table"and Localize(f7.Failure)or f7.Failure)}if not self:QuestValidateQuestData(k_)then DumpTable(k_,"Quest")error(false,"ModuleQuest: Failed to vaidate quest data. Table has been copied to log.")end;for g,h in pairs(f7)do if tonumber(g)~=nil then if type(h)=="table"then if h.GetGoalTable then table.insert(k_[4],h:GetGoalTable())local l0=#k_[4]k_[4][l0].Context=h;k_[4][l0].FuncOverrideIcon=k_[4][l0].Context.GetIcon;k_[4][l0].FuncOverrideMsgKey=k_[4][l0].Context.GetMsgKey elseif h.GetReprisalTable then table.insert(k_[8],h:GetReprisalTable())elseif h.GetRewardTable then table.insert(k_[7],h:GetRewardTable())else table.insert(k_[5],h:GetTriggerTable())end end end end;if#k_[4]==0 then table.insert(k_[4],{Objective.Dummy})end;if#k_[5]==0 then table.insert(k_[5],{Triggers.Time,0})end;if k_[11]then table.insert(k_[5],self:GetFreeSpaceInlineTrigger())end;local bD,bj=QuestTemplate:New(unpack(k_,1,16))bj.MsgTableOverride=f7.MSGKeyOverwrite;bj.IconOverride=f7.IconOverwrite;bj.QuestInfo=f7.InfoText;bj.Arguments=f7.Arguments~=nil and table.copy(f7.Arguments)or{}return f7.Name,Quests[0]end;function Lib.Quest.Global:QuestValidateQuestData(f7)return type(f7[1])=="string"and IsValidQuestName(f7[1])and Quests[GetQuestID(f7[1])]==nil and(type(f7[2])=="number"and f7[2]>=1 and f7[2]<=8)and(type(f7[3])=="number"and f7[3]>=1 and f7[3]<=8)and(type(f7[6])=="number"and f7[6]>=0)and(f7[9]~=nil and type(f7[9])=="function"or f7[9]==nil)and(f7[10]~=nil and type(f7[10])=="function"or f7[10]==nil)and type(f7[11])=="boolean"and type(f7[12])=="boolean"and(f7[13]~=nil and type(f7[13])=="string"or f7[13]==nil)and(f7[14]~=nil and type(f7[14])=="string"or f7[14]==nil)and(f7[15]~=nil and type(f7[15])=="string"or f7[15]==nil)and(f7[16]~=nil and type(f7[16])=="string"or f7[16]==nil)end;function Lib.Quest.Global:GetFreeSpaceInlineTrigger()return{Triggers.Custom2,{{},function(f7,bl)local l1=0;if Quests[0]>0 then for f=1,Quests[0],1 do if Quests[f].State==QuestState.Active and Quests[f].Visible==true then l1=l1+1 end end end;return l1<6 end}}end;function Lib.Quest.Global:OverrideKernelQuestApi()FailQuest_Orig_ModuleQuest=FailQuest;FailQuest=function(bI,bJ)if Lib.Quest.Global.SegmentsOfQuest[bI]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bI])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then FailQuest_Orig_ModuleQuest(h.Name,true)end end end;FailQuest_Orig_ModuleQuest(bI,bJ)end;RestartQuest_Orig_ModuleQuest=RestartQuest;RestartQuest=function(bI,bJ)if Lib.Quest.Global.SegmentsOfQuest[bI]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bI])do if IsValidQuest(h.Name)then StopQuest_Orig_ModuleQuest(h.Name,true)RestartQuest_Orig_ModuleQuest(h.Name,true)end end end;RestartQuest_Orig_ModuleQuest(bI,bJ)end;StartQuest_Orig_ModuleQuest=StartQuest;StartQuest=function(bI,bJ)if Lib.Quest.Global.SegmentsOfQuest[bI]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bI])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StartQuest_Orig_ModuleQuest(h.Name,true)end end end;StartQuest_Orig_ModuleQuest(bI,bJ)end;StopQuest_Orig_ModuleQuest=StopQuest;StopQuest=function(bI,bJ)if Lib.Quest.Global.SegmentsOfQuest[bI]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bI])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;StopQuest_Orig_ModuleQuest(bI,bJ)end;WinQuest_Orig_ModuleQuest=WinQuest;WinQuest=function(bI,bJ)if Lib.Quest.Global.SegmentsOfQuest[bI]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[bI])do if IsValidQuest(h.Name)and Quests[GetQuestID(h.Name)].State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;WinQuest_Orig_ModuleQuest(bI,bJ)end end;function Lib.Quest.Global.QuestLoop(l2)local self=JobQueue_GetParameter(l2)if self.LoopCallback~=nil then self:LoopCallback()end;if self.State==QuestState.NotTriggered then local l3=true;for f=1,#Lib.Quest.Global.ExternalTriggerConditions,1 do if not Lib.Quest.Global.ExternalTriggerConditions[f](self.ReceivingPlayer,self)then l3=false;break end end;if l3 then for f=1,self.Triggers[0]do local cb=Lib.Quest.Global:SerializeBehavior(self.Triggers[f],Triggers.Custom2,4)if cb then log("Quest '"..self.Identifier.."' "..cb,true)end;l3=l3 and self:IsTriggerActive(self.Triggers[f])end end;if l3 then self:SetMsgKeyOverride()self:SetIconOverride()self:Trigger()end elseif self.State==QuestState.Active then for f=1,#Lib.Quest.Global.ExternalTimerConditions,1 do if not Lib.Quest.Global.ExternalTimerConditions[f](self.ReceivingPlayer,self)then self.StartTime=self.StartTime+1;break end end;local l4=true;for f=1,#Lib.Quest.Global.ExternalDecisionConditions,1 do if not Lib.Quest.Global.ExternalDecisionConditions[f](self.ReceivingPlayer,self)then l4=false;break end end;if l4 then local l5=true;local l6=false;for f=1,self.Objectives[0]do local cb=Lib.Quest.Global:SerializeBehavior(self.Objectives[f],Objective.Custom2,1)if cb then log("Quest '"..self.Identifier.."' "..cb,true)end;local l7=self:IsObjectiveCompleted(self.Objectives[f])if self.Objectives[f].Type==Objective.Deliver and l7==nil then if self.Objectives[f].Data[4]==nil then self.Objectives[f].Data[4]=0 end;if self.Objectives[f].Data[3]~=nil then self.Objectives[f].Data[4]=self.Objectives[f].Data[4]+1 end;local l8=self.StartTime;local l9=self.Duration;local la=self.Objectives[f].Data[4]local lb=self.StartTime+self.Duration-self.Objectives[f].Data[4]if self.Duration>0 and self.StartTime+self.Duration+self.Objectives[f].Data[4]<Logic.GetTime()then l7=false end else if self.Duration>0 and self.StartTime+self.Duration<Logic.GetTime()then if l7==nil and(self.Objectives[f].Type==Objective.Protect or self.Objectives[f].Type==Objective.Dummy or self.Objectives[f].Type==Objective.NoChange)then l7=true elseif l7==nil or self.Objectives[f].Type==Objective.DummyFail then l7=false end end end;l5=l7==true and l5;l6=l7==false or l6 end;if l5 then self:Success()elseif l6 then self:Fail()end end else if self.IsEventQuest==true then Logic.ExecuteInLuaLocalState("StopEventMusic(nil, "..self.ReceivingPlayer..")")end;if self.Result==QuestResult.Success then for f=1,self.Rewards[0]do local cb=Lib.Quest.Global:SerializeBehavior(self.Rewards[f],Reward.Custom,3)if cb then log("Quest '"..self.Identifier.."' "..cb,true)end;self:AddReward(self.Rewards[f])end elseif self.Result==QuestResult.Failure then for f=1,self.Reprisals[0]do local cb=Lib.Quest.Global:SerializeBehavior(self.Reprisals[f],Reprisal.Custom,3)if cb then log("Quest '"..self.Identifier.."' "..cb,true)end;self:AddReprisal(self.Reprisals[f])end end;if self.EndCallback~=nil then self:EndCallback()end;return true end end;function Lib.Quest.Global:SerializeBehavior(f7,lc,ld)local le="Objective"local lf=Objective;if ld==2 then le="Reprisal"lf=Reprisal elseif ld==3 then le="Reward"lf=Reward elseif ld==4 then le="Trigger"lf=Triggers end;local lg="Running {"local lh=GetNameOfKeyInTable(lf,f7.Type)if f7.Type==lc then local li=f7.Data[1].FuncName;lg=lg..le.."."..lh..""if li==nil then return else lg=lg..", "..tostring(li)end;if f7.Data and f7.Data[1].i47ya_6aghw_frxil and#f7.Data[1].i47ya_6aghw_frxil>0 then for bO=1,#f7.Data[1].i47ya_6aghw_frxil,1 do lg=lg..", ("..type(f7.Data[1].i47ya_6aghw_frxil[bO])..") "..tostring(f7.Data[1].i47ya_6aghw_frxil[bO])end end else lg=lg..le.."."..lh..""if f7.Data then if type(f7.Data)=="table"then for bO=1,#f7.Data do lg=lg..", ("..type(f7.Data[bO])..") "..tostring(f7.Data[bO])end else lg=lg..", ("..type(f7.Data)..") "..tostring(f7.Data)end end end;lg=lg.."}"return lg end;function Lib.Quest.Global:FindQuestNames(ej,lj)local lk=FindQuestsByName(ej,lj)if#lk==0 then return{}end;local ll={}for f=1,#lk,1 do table.insert(ll,lk[f].Identifier)end;return ll end;function Lib.Quest.Global:ProcessChatInput(bF,q,lm)if lm then local dT=Lib.Core.Debug:CommandTokenizer(bF)for f=1,#dT,1 do if dT[f][1]=="fail"or dT[f][1]=="start"or dT[f][1]=="restart"or dT[f][1]=="stop"or dT[f][1]=="win"then local lk=self:FindQuestNames(dT[f][2],true)error(#lk==1,"Unable to find quest containing '"..dT[f][2].."'")if dT[f][1]=="fail"then FailQuest(lk[1])log("fail quest '"..lk[1].."'")elseif dT[f][1]=="restart"then RestartQuest(lk[1])log("restart quest '"..lk[1].."'")elseif dT[f][1]=="start"then StartQuest(lk[1])log("trigger quest '"..lk[1].."'")elseif dT[f][1]=="stop"then StopQuest(lk[1])log("interrupt quest '"..lk[1].."'")elseif dT[f][1]=="win"then WinQuest(lk[1])log("win quest '"..lk[1].."'")end end end end end;function Lib.Quest.Local:Initialize()if not self.IsInstalled then Lib.Quest.Global=nil end;self.IsInstalled=true end;function Lib.Quest.Local:OnSaveGameLoaded()end;function Lib.Quest.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2],arg[3])end end;function Lib.Quest.Local:ProcessChatInput(bF,q,lm)if not lm or GUI.GetPlayerID()~=q then return end;ExecuteGlobal([[Lib.Quest.Global:ProcessChatInput("%s", %d, %s)]],bF,q,tostring(lm==true))end;RegisterModule(Lib.Quest.Name)Lib.Register("module/quest/QuestBehavior_API")Lib.QuestBehavior=Lib.QuestBehavior or{}Lib.QuestBehavior.Name="QuestBehavior"Lib.QuestBehavior.Global={VictoryWithPartyEntities={},SoldierKillsCounter={}}Lib.QuestBehavior.Local={}Lib.Require("comfort/GetPlayerName")Lib.Require("comfort/global/GetRandomSettlerType")Lib.Require("comfort/global/LookAt")Lib.Require("comfort/ToBoolean")Lib.Require("core/core")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestBehavior_API")Lib.Register("module/quest/QuestBehavior")function Lib.QuestBehavior.Global:Initialize()if not self.IsInstalled then for n=0,8 do self.SoldierKillsCounter[n]={}end;self:OverrideIsObjectiveCompleted()self:OverrideOnQuestTriggered()Lib.QuestBehavior.Local=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Global:OnSaveGameLoaded()end;function Lib.QuestBehavior.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.ThiefInfiltratedBuilding then self:OnThiefInfiltratedBuilding(arg[1],arg[2],arg[3],arg[4])elseif aD==Report.ThiefDeliverEarnings then self:OnThiefDeliverEarnings(arg[1],arg[2],arg[3],arg[4],arg[5])elseif aD==Report.EntityKilled then self:OnEntityKilled(arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestBehavior.Global:OverrideOnQuestTriggered()QuestTemplate.Trigger_Orig_QSB_NewBehaviors=QuestTemplate.Trigger;QuestTemplate.Trigger=function(self)for b2=1,#self.Objectives,1 do if self.Objectives[b2]then if self.Objectives[b2].Type==Objective.DestroyEntities and self.Objectives[b2].Data[1]==3 then if self.Objectives[b2].Data[5]~=true then local ln=self.Objectives[b2].Data[2][0]local lo=self.Objectives[b2].Data[3]for f=1,ln,1 do local al=GetID(self.Objectives[b2].Data[2][f])local lp={Logic.GetSpawnedEntities(al)}for bO=1,#lp,1 do DestroyEntity(lp[bO])end end;while lo>0 do for f=1,ln,1 do if lo<1 then break end;local al=GetID(self.Objectives[b2].Data[2][f])Logic.RespawnResourceEntity_Spawn(al)lo=lo-1 end end;local lq=Logic.GetSpawnedEntities(self.Objectives[b2].Data[2][1])if not self.Objectives[b2].Data[6]then self.Objectives[b2].Data[6]={7,12}if Logic.IsEntityInCategory(lq,EntityCategories.AttackableAnimal)==1 then self.Objectives[b2].Data[6]={13,8}end end;self.Objectives[b2].Data[5]=true end end end end;self:Trigger_Orig_QSB_NewBehaviors()end end;function Lib.QuestBehavior.Global:OverrideIsObjectiveCompleted()QuestTemplate.IsObjectiveCompleted_Orig_QSB_NewBehaviors=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,bL)local bM=bL.Type;if bL.Completed~=nil then if bM==Objective.DestroyEntities and bL.Data[1]==3 then bL.Data[5]=nil end;return bL.Completed end;if bM==Objective.DestroyEntities then if bL.Data[1]==3 then bL.Completed=self:AreSpawnedQuestEntitiesDestroyed(bL)else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(bL)end else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(bL)end end;QuestTemplate.AreSpawnedQuestEntitiesDestroyed=function(self,bm)if bm.Data[1]==3 then local lr={}for f=1,bm.Data[2][0],1 do local al=GetID(bm.Data[2][f])lr=Array_Append(lr,{Logic.GetSpawnedEntities(al)})end;if#lr==0 then return true end end end end;function Lib.QuestBehavior.Global:GetPossibleModels()local bd={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(bd,g)end end;table.insert(bd,"Effects_Dust01")table.insert(bd,"Effects_E_DestructionSmoke")table.insert(bd,"Effects_E_DustLarge")table.insert(bd,"Effects_E_DustSmall")table.insert(bd,"Effects_E_Firebreath")table.insert(bd,"Effects_E_Fireworks01")table.insert(bd,"Effects_E_Flies01")table.insert(bd,"Effects_E_Grasshopper03")table.insert(bd,"Effects_E_HealingFX")table.insert(bd,"Effects_E_Knight_Chivalry_Aura")table.insert(bd,"Effects_E_Knight_Plunder_Aura")table.insert(bd,"Effects_E_Knight_Song_Aura")table.insert(bd,"Effects_E_Knight_Trader_Aura")table.insert(bd,"Effects_E_Knight_Wisdom_Aura")table.insert(bd,"Effects_E_KnightFight")table.insert(bd,"Effects_E_NA_BlowingSand01")table.insert(bd,"Effects_E_NE_BlowingSnow01")table.insert(bd,"Effects_E_Oillamp")table.insert(bd,"Effects_E_SickBuilding")table.insert(bd,"Effects_E_Splash")table.insert(bd,"Effects_E_Torch")table.insert(bd,"Effects_Fire01")table.insert(bd,"Effects_FX_Lantern")table.insert(bd,"Effects_FX_SmokeBIG")table.insert(bd,"Effects_XF_BuildingSmoke")table.insert(bd,"Effects_XF_BuildingSmokeLarge")table.insert(bd,"Effects_XF_BuildingSmokeMedium")table.insert(bd,"Effects_XF_HouseFire")table.insert(bd,"Effects_XF_HouseFireLo")table.insert(bd,"Effects_XF_HouseFireMedium")table.insert(bd,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(bd,"Effects_E_KhanaTemple_Fire")table.insert(bd,"Effects_E_Knight_Saraya_Aura")end;table.sort(bd)return bd end;function Lib.QuestBehavior.Global:OnThiefInfiltratedBuilding(jE,q,g3,jH)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==q then for bO=1,Quests[f].Objectives[0]do if Quests[f].Objectives[bO].Type==Objective.Custom2 then if Quests[f].Objectives[bO].Data[1].Name=="Goal_SpyOnBuilding"then if GetID(Quests[f].Objectives[bO].Data[1].Building)==g3 then Quests[f].Objectives[bO].Data[1].Infiltrated=true;if Quests[f].Objectives[bO].Data[1].Delete then DestroyEntity(jE)end end elseif Quests[f].Objectives[bO].Data[1].Name=="Goal_StealFromBuilding"then local ls;local lt=Logic.GetEntityType(g3)==Entities.B_Cistern;local lu=Logic.IsEntityInCategory(g3,EntityCategories.Cathedrals)==1;local lv=Logic.GetEntityType(g3)==Entities.B_StoreHouse;if lv or lu or lt then Quests[f].Objectives[bO].Data[1].SuccessfullyStohlen=true else for g=1,#Quests[f].Objectives[bO].Data[1].RobberList do local lw=Quests[f].Objectives[bO].Data[1].RobberList[g]if lw[1]==g3 and lw[2]==jE then ls=true;break end end end;if not ls then table.insert(Quests[f].Objectives[bO].Data[1].RobberList,{g3,jE})end end end end end end end;function Lib.QuestBehavior.Global:OnThiefDeliverEarnings(jE,q,g3,jH,lx)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==q then for bO=1,Quests[f].Objectives[0]do if Quests[f].Objectives[bO].Type==Objective.Custom2 then if Quests[f].Objectives[bO].Data[1].Name=="Goal_StealFromBuilding"then for g=1,#Quests[f].Objectives[bO].Data[1].RobberList do local lw=Quests[f].Objectives[bO].Data[1].RobberList[g]if lw[1]==GetID(Quests[f].Objectives[bO].Data[1].Building)and lw[2]==jE then Quests[f].Objectives[bO].Data[1].SuccessfullyStohlen=true;break end end elseif Quests[f].Objectives[bO].Data[1].Name=="Goal_StealGold"then local ly=Quests[f].Objectives[bO].Data[1]if ly.Target==-1 or ly.Target==jH then Quests[f].Objectives[bO].Data[1].StohlenGold=Quests[f].Objectives[bO].Data[1].StohlenGold+lx;if ly.Printout then AddNote(string.format("%d/%d %s",ly.StohlenGold,ly.Amount,Localize({de="Talern gestohlen",en="gold stolen"})))end end end end end end end end;function Lib.QuestBehavior.Global:OnEntityKilled(lz,lA,lB,lC)if lA~=0 and lC~=0 then self.SoldierKillsCounter[lC][lA]=self.SoldierKillsCounter[lC][lA]or 0;if Logic.IsEntityInCategory(lz,EntityCategories.Soldier)==1 then self.SoldierKillsCounter[lC][lA]=self.SoldierKillsCounter[lC][lA]+1 end end end;function Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(jZ,k0)return self.SoldierKillsCounter[jZ][k0]or 0 end;function Lib.QuestBehavior.Local:Initialize()if not self.IsInstalled then Lib.QuestBehavior.Global=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Local:OnSaveGameLoaded()end;function Lib.QuestBehavior.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.QuestBehavior.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/quest/QuestJornal_API")function ShowJournalForQuest(bl,c5)assert(not IsLocalScript(),"Can not be used in local script!")local bj=Quests[GetQuestID(bl)]if bj then bj.QuestNotes=c5==true end end;function AllowNotesForQuest(bl,c5)assert(not IsLocalScript(),"Can not be used in local script!")local bj=Quests[GetQuestID(bl)]if bj then Lib.QuestJornal.Global.CustomInputAllowed[bl]=c5==true end end;function CreateJournalEntry(bF)assert(not IsLocalScript(),"Can not be used in local script!")bF=bF:gsub("{@[A-Za-z0-9:,]+}","")bF=bF:gsub("{[A-Za-z0-9_]+}","")return Lib.QuestJornal.Global:CreateJournalEntry(bF,0,false)end;function AlterJournalEntry(aD,bF)assert(not IsLocalScript(),"Can not be used in local script!")bF=bF:gsub("{@[A-Za-z0-9:,]+}","")bF=bF:gsub("{[A-Za-z0-9_]+}","")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:UpdateJournalEntry(aD,bF,he.Rank,he.AlwaysVisible,he.Deleted)end end;function HighlightJournalEntry(aD,lD)assert(not IsLocalScript(),"Can not be used in local script!")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:UpdateJournalEntry(aD,he[1],lD==true and 1 or 0,he.AlwaysVisible,he.Deleted)end end;function DeleteJournalEntry(aD)assert(not IsLocalScript(),"Can not be used in local script!")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:UpdateJournalEntry(aD,he[1],he.Rank,he.AlwaysVisible,true)end end;function RestoreJournalEntry(aD)assert(not IsLocalScript(),"Can not be used in local script!")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:UpdateJournalEntry(aD,he[1],he.Rank,he.AlwaysVisible,false)end end;function AddJournalEntryToQuest(aD,bl)assert(not IsLocalScript(),"Can not be used in local script!")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aD,bl,true)end end;function RemoveJournalEntryFromQuest(aD,bl)assert(not IsLocalScript(),"Can not be used in local script!")local he=Lib.QuestJornal.Global:GetJournalEntry(aD)if he then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aD,bl,false)end end;Lib.QuestJornal=Lib.QuestJornal or{}Lib.QuestJornal.Name="QuestJornal"Lib.QuestJornal.Global={Journal={ID=0},CustomInputAllowed={},InputShown={},TextColor="{tooltip}"}Lib.QuestJornal.Local={NextButton="/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/TutorialNextButton",NextButtonIcon={16,10}}Lib.QuestJornal.Text={Next={de="Tagebuch anzeigen",en="Show Journal",fr="Afficher le journal"},Title={de="Tagebuch",en="Journal",fr="Journal"},Note={de="Notiz",en="Note",fr="Note"}}Lib.Require("core/core")Lib.Require("module/information/Requester")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestJornal_API")Lib.Register("module/quest/QuestJornal")function Lib.QuestJornal.Global:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")Lib.QuestJornal.Local=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Global:OnSaveGameLoaded()end;function Lib.QuestJornal.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.TutorialNextClicked then self:DisplayJournal(arg[1],arg[2])elseif aD==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2])elseif aD==Report.QuestJournalPlayerNote then self.InputShown[arg[1]]=arg[2]SendReportToLocal(Report.QuestJournalPlayerNote,arg[1],arg[2],arg[3]==true)elseif aD==Report.QuestJournalDisplayed then SendReportToLocal(Report.QuestJournalDisplayed,arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestJornal.Global:DisplayJournal(bI,q)local lE=self.CustomInputAllowed[bI]==true;local lF=self:FormatJournalEntry(bI,q)SendReport(Report.QuestJournalDisplayed,q,bI,lF,lE)end;function Lib.QuestJornal.Global:CreateJournalEntry(bF,lG,lH)self.Journal.ID=self.Journal.ID+1;table.insert(self.Journal,{ID=self.Journal.ID,AlwaysVisible=lH==true,Quests={},Rank=lG,bF})return self.Journal.ID end;function Lib.QuestJornal.Global:GetJournalEntry(aD)for f=1,#self.Journal do if self.Journal[f].ID==aD then return self.Journal[f]end end end;function Lib.QuestJornal.Global:UpdateJournalEntry(aD,bF,lG,lH,lI)for f=1,#self.Journal do if self.Journal[f].ID==aD then self.Journal[f].AlwaysVisible=lH==true;self.Journal[f].Deleted=lI==true;self.Journal[f].Rank=lG;self.Journal[f][1]=self.Journal[f][1]or bF end end end;function Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aD,bl,c5)for f=1,#self.Journal do if self.Journal[f].ID==aD then self.Journal[f].Quests[bl]=c5==true end end end;function Lib.QuestJornal.Global:FormatJournalEntry(bI,q)local bj=Quests[GetQuestID(bI)]if bj and bj.QuestNotes and bj.ReceivingPlayer==q then local lJ=self:GetJournalEntriesSorted()local lK=false;local lL=false;local lg=""local d_=""for f=1,#lJ,1 do if lJ[f].AlwaysVisible or lJ[f].Quests[bI]then if not lJ[f].Deleted then local cb=ConvertPlaceholders(Localize(lJ[f][1]))if lJ[f].Rank==1 then cb="{scarlet}"..cb..self.TextColor;lK=true end;if lJ[f].Rank==0 then if lK then lK=false;cb="{cr}----------{cr}{cr}"..cb end;lL=true end;if lJ[f].Rank==-1 then if lL then lL=false;d_="{violet}"cb="{cr}----------{cr}{cr}"..cb end;cb=d_..cb..self.TextColor end;lg=lg..(lg~=""and"{cr}"or"")..cb end end end;return lg end end;function Lib.QuestJornal.Global:GetJournalEntriesSorted()local lJ={}for f=1,#self.Journal,1 do table.insert(lJ,self.Journal[f])end;table.sort(lJ,function(ad,b2)return ad.Rank>b2.Rank end)return lJ end;function Lib.QuestJornal.Global:ProcessChatInput(bF,q)if self.InputShown[q]then if bF and bF~=""then local lM=self.InputShown[q]local lE=self.CustomInputAllowed[lM]==true;local al=self:CreateJournalEntry(bF,-1,false)self:AssociateJournalEntryWithQuest(al,lM,true)local lF=self:FormatJournalEntry(lM,q)SendReport(Report.QuestJournalDisplayed,q,lM,lF,lE)end;self.InputShown[q]=nil end end;function Lib.QuestJornal.Local:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")self:OverrideUpdateVoiceMessage()self:OverrideTutorialNext()self:OverrideStringKeys()self:OverrideTimerButtons()Lib.QuestJornal.Global=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Local:OnSaveGameLoaded()end;function Lib.QuestJornal.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.QuestJournalPlayerNote then if arg[1]==GUI.GetPlayerID()and arg[3]then ShowTextInput(arg[1],false)end elseif aD==Report.QuestJournalDisplayed then if arg[1]==GUI.GetPlayerID()then self:DisplayQuestJournal(arg[2],arg[1],arg[3],arg[4])end end end;function Lib.QuestJornal.Local:DisplayQuestJournal(bI,q,lN,F)if lN and GUI.GetPlayerID()==q then local iz=Localize(Lib.QuestJornal.Text.Title)local bd={PlayerID=q,Caption=iz,Content=ConvertPlaceholders(lN),QuestName=bI}if F then bd.Button={Text=Localize{de="Notiz",en="Note",fr="Note"},Action=function(f7)SendReportToGlobal(Report.QuestJournalPlayerNote,f7.PlayerID,f7.QuestName,F)end}end;Lib.Requester.Local:ShowTextWindow(bd)end end;function Lib.QuestJornal.Local:OverrideUpdateVoiceMessage()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal=GUI_Interaction.UpdateVoiceMessage;GUI_Interaction.UpdateVoiceMessage=function()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal()if not QuestLog.IsQuestLogShown()then if Lib.QuestJornal.Local:IsShowingJournalButton(g_Interaction.CurrentMessageQuestIndex)then XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,1)SetIcon(Lib.QuestJornal.Local.NextButton,Lib.QuestJornal.Local.NextButtonIcon)else XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,0)end end end end;function Lib.QuestJornal.Local:IsShowingJournalButton(aD)if not g_Interaction.CurrentMessageQuestIndex then return false end;local bj=Quests[aD]if type(bj)=="table"and bj.QuestNotes then return true end;return false end;function Lib.QuestJornal.Local:OverrideTimerButtons()GUI_Interaction.TimerButtonClicked_Orig_QuestJornal=GUI_Interaction.TimerButtonClicked;GUI_Interaction.TimerButtonClicked=function()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 and XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions/ToggleWhisperTarget")==1 then return end;GUI_Interaction.TimerButtonClicked_Orig_QuestJornal()end end;function Lib.QuestJornal.Local:OverrideTutorialNext()GUI_Interaction.TutorialNext_Orig_QuestJornal=GUI_Interaction.TutorialNext;GUI_Interaction.TutorialNext=function()if g_Interaction.CurrentMessageQuestIndex then local bD=g_Interaction.CurrentMessageQuestIndex;local bj=Quests[bD]SendReportToGlobal(Report.TutorialNextClicked,bj.Identifier,GUI.GetPlayerID())SendReport(Report.TutorialNextClicked,bj.Identifier,GUI.GetPlayerID())end end end;function Lib.QuestJornal.Local:OverrideStringKeys()AddStringText("UI_ObjectNames/TutorialNextButton",Lib.QuestJornal.Text.Next)end;RegisterModule(Lib.QuestJornal.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Warehouse_API")function CreateWarehouse(f7)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:CreateWarehouse(f7)end;API.CreateWarehouse=CreateWarehouse;function CreateWarehouseOffer(r,aI,lO,lP,lQ,lR,lS)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Warehouse.Global:CreateOffer(r,aI,lO,lP,lQ,lR,lS)end;API.CreateWarehouseOffer=CreateWarehouseOffer;function RemoveWarehouseOffer(r,aD)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:RemoveOffer(r,aD)end;API.RemoveWarehouseOffer=RemoveWarehouseOffer;function DeactivateWarehouseOffer(r,aD,lT)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:ActivateOffer(r,aD,not lT)end;API.DeactivateWarehouseOffer=DeactivateWarehouseOffer;function GetWarehouseInflation(q,lO)if IsLocalScript()then return Lib.Warehouse.Local:GetInflation(q,lO)end;return Lib.Warehouse.Global:GetInflation(q,lO)end;API.GetWarehouseInflation=GetWarehouseInflation;function SetWarehouseInflation(q,lO,lU)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.Global:SetInflation(q,lO,lU)end;API.SetWarehouseInflation=SetWarehouseInflation;function GetWarehouseOfferByID(r,aD)if IsLocalScript()then return Lib.Warehouse.Local:GetOfferByID(r,aD)end;return Lib.Warehouse.Global:GetOfferByID(r,aD)end;API.GetWarehouseOfferByID=GetWarehouseOfferByID;function GetActivWarehouseOffers(r,lV)if IsLocalScript()then return Lib.Warehouse.Local:GetActivOffers(r,lV)end;return Lib.Warehouse.Global:GetActivOffers(r,lV)end;API.GetActivWarehouseOffers=GetActivWarehouseOffers;Lib.Warehouse=Lib.Warehouse or{}Lib.Warehouse.Name="Warehouse"Lib.Warehouse.CinematicEvents={}Lib.Warehouse.Global={OfferSequence=0,Warehouses={Job=0},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Local={Warehouses={},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Text={OfferTitle={{de="Keine Angebote",en="No Offers"},{de="%d %s kaufen%s",en="Purchase %d %s%s"},{de="%s anheuern",en="Hire %s"},{de="%s anheuern%s",en="Hire %s%s"},{de="%s kaufen%s",en="Purchase %s%s"}}}Lib.Require("comfort/GetSiegeengineTypeByCartType")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/KeyOf")Lib.Require("comfort/global/ReplaceEntity")Lib.Require("comfort/global/SendCart")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/io/IO")Lib.Require("module/ui/UIBuilding")Lib.Require("module/trade/Warehouse_API")Lib.Register("module/trade/Warehouse")function Lib.Warehouse.Global:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")self:OverwriteGameCallbacks()for f=1,8 do self.Inflation.Players[f]={}end;self.Warehouses.Job=RequestJob(function()Lib.Warehouse.Global:ControlWarehouse()end)Lib.Warehouse.Local=nil end;self.IsInstalled=true end;function Lib.Warehouse.Global:OnSaveGameLoaded()end;function Lib.Warehouse.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.WarehouseOfferClicked then self:PerformTrade(unpack(arg))SendReportToLocal(aD,unpack(arg))end end;function Lib.Warehouse.Global:CreateWarehouse(f7)local lW={ScriptName=f7.ScriptName,BuildingName=f7.ScriptName.."_Post",Costs=f7.Costs,Offers={}}table.insert(self.Warehouses,lW)local al=GetID(f7.ScriptName)local I,J,K=Logic.EntityGetPos(al)local W=Logic.GetEntityOrientation(al)local n=Logic.EntityGetPlayer(al)local l=Logic.GetEntityType(al)DestroyEntity(lW.ScriptName)local gd=Logic.CreateEntity(Entities.I_X_TradePostConstructionSite,I,J,W,n)Logic.SetEntityName(gd,lW.ScriptName)if l==Entities.B_TradePost then gd=ReplaceEntity(gd,Entities.XD_ScriptEntity)local hW=Logic.CreateEntity(Entities.B_TradePost,I,J,W,n)Logic.SetEntityName(hW,lW.BuildingName)end;if f7.Costs then Logic.InteractiveObjectClearCosts(GetID(lW.ScriptName))if f7.Costs[1]then Logic.InteractiveObjectAddCosts(GetID(lW.ScriptName),f7.Costs[1],f7.Costs[2])end;if f7.Costs[3]then Logic.InteractiveObjectAddCosts(GetID(lW.ScriptName),f7.Costs[3],f7.Costs[4])end end;for f=1,#f7.Offers do if f7.Offers[f]then self:CreateOffer(lW.ScriptName,f7.Offers[f].Amount,f7.Offers[f].GoodType,f7.Offers[f].GoodAmount,f7.Offers[f].PaymentType,f7.Offers[f].BasePrice,f7.Offers[f].Refresh)end end;ExecuteLocal([[Lib.Warehouse.Local:InitTradeButtons("%s")]],lW.BuildingName)end;function Lib.Warehouse.Global:GetIndex(r)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==r then return f end end;return 0 end;function Lib.Warehouse.Global:CreateOffer(r,aI,ai,jF,lQ,lR,lS)local cu=self:GetIndex(r)if cu~=0 then local dr=aI or 1;if KeyOf(ai,Goods)==nil and KeyOf(ai,Entities)~=nil and Logic.IsEntityTypeInCategory(ai,EntityCategories.Military)==0 then dr=1 end;self.OfferSequence=self.OfferSequence+1;local al=self.OfferSequence;table.insert(self.Warehouses[cu].Offers,{ID=al,BuyLock=false,Active=true,Current=dr,Amount=dr,Timer=lS or 3*60,Refresh=lS or 3*60,GoodType=ai,GoodAmount=jF or 9,PaymentType=lQ or Goods.G_Gold,BasePrice=lR or 3})return al end;return 0 end;function Lib.Warehouse.Global:RemoveOffer(r,aD)local cu=self:GetIndex(r)if cu~=0 then for f=#self.Warehouses[cu].Offers,1,-1 do if self.Warehouses[cu].Offers[f].ID==aD then table.remove(self.Warehouses[cu].Offers,f)break end end end end;function Lib.Warehouse.Global:ActivateOffer(r,aD,lX)local cu=self:GetIndex(r)if cu~=0 then for f=#self.Warehouses[cu].Offers,1,-1 do if self.Warehouses[cu].Offers[f].ID==aD then self.Warehouses[cu].Offers[f].Active=lX==true;break end end end end;function Lib.Warehouse.Global:GetOfferByID(r,aD)local lY,lZ;local cu=self:GetIndex(r)if cu~=0 then for f=#self.Warehouses[cu].Offers,1,-1 do if self.Warehouses[cu].Offers[f].ID==aD then lY=self.Warehouses[cu].Offers[f]lZ=f end end end;return lY,lZ end;function Lib.Warehouse.Global:GetActivOffers(r,lV)local l_={}local cu=self:GetIndex(r)if cu~=0 then for f=1,#self.Warehouses[cu].Offers do if(not lV or#l_<6)and self.Warehouses[cu].Offers[f].Active then table.insert(l_,self.Warehouses[cu].Offers[f].ID)end end end;return l_ end;function Lib.Warehouse.Global:ChangeOfferAmount(r,aD,aI)local cu=self:GetIndex(r)if cu~=0 then for f=#self.Warehouses[cu].Offers,1,-1 do if self.Warehouses[cu].Offers[f].ID==aD then local m0=self.Warehouses[cu].Offers[aD].Amount;self.Warehouses[cu].Offers[aD].Current=math.min(aI,m0)break end end end end;function Lib.Warehouse.Global:GetInflation(q,ai)return self.Inflation.Players[q][ai]or 1.0 end;function Lib.Warehouse.Global:SetInflation(q,ai,lU)self.Inflation.Players[q][ai]=lU or 1.0;ExecuteLocal([[Lib.Warehouse.Local.Inflation.Players[%d][%d] = %f]],q,ai,lU or 1.0)end;function Lib.Warehouse.Global:CalculateInflation(q,ai)local m1=(self.Inflation.Players[q][ai]or 1.0)+self.Inflation.Inc;m1=math.max(self.Inflation.Min,m1)m1=math.min(m1,self.Inflation.Max)return m1 end;function Lib.Warehouse.Global:PerformTrade(q,bB,lU,m2,m3,jF,m4,lR)if KeyOf(m3,Goods)~=nil then SendCart(bB.."_Post",q,m3,jF)elseif KeyOf(m3,Entities)~=nil then if Logic.IsEntityTypeInCategory(m3,EntityCategories.Military)==1 then local I,J=Logic.GetBuildingApproachPosition(GetID(bB.."_Post"))local W=Logic.GetEntityOrientation(GetID(bB.."_Post"))-90;local al=Logic.CreateBattalionOnUnblockedLand(m3,I,J,W,q)Logic.MoveSettler(al,I,J,-1)else local I,J=Logic.GetBuildingApproachPosition(GetID(bB.."_Post"))Logic.HireEntertainer(m3,q,I,J)end end;local m5=math.floor(lR*lU+0.5)AddGood(m4,-1*m5,q)ExecuteLocal([[GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 1, 1}, g_TexturePositions.Goods[%d])]],-1*m5,m4)self:UpdateOnPurchase(q,bB,m2)SendReport(Report.WarehouseOfferBought,q,bB,m3,jF,m4,m5)SendReportToLocal(Report.WarehouseOfferBought,q,bB,m3,jF,m4,m5)end;function Lib.Warehouse.Global:UpdateOnPurchase(q,bB,m2)local cu=self:GetIndex(bB)if cu~=0 then local lY=self.Warehouses[cu].Offers[m2]self.Warehouses[cu].Offers[m2].Current=lY.Current-1;local m6=self:CalculateInflation(q,lY.GoodType)self:SetInflation(q,lY.GoodType,m6)end end;function Lib.Warehouse.Global:OverwriteGameCallbacks()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(q,an)Lib.Warehouse.Global.Orig_GameCallback_OnBuildingConstructionComplete(q,an)if Logic.GetEntityType(an)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostConstructed(an)end end;self.Orig_GameCallback_BuildingDestroyed=GameCallback_BuildingDestroyed;GameCallback_BuildingDestroyed=function(an,q,m7)Lib.Warehouse.Global.Orig_GameCallback_BuildingDestroyed(an,q,m7)if Logic.GetEntityType(an)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostDestroyed(q,an)end end end;function Lib.Warehouse.Global:OnTradepostConstructed(an)local I,J,K=Logic.EntityGetPos(an)local gi,gd=Logic.GetEntitiesInArea(Entities.I_X_TradePostConstructionSite,I,J,100,1)if gd~=0 then local aM=Logic.GetEntityName(gd)local cu=self:GetIndex(aM)if cu~=0 then Logic.SetEntityName(an,self.Warehouses[cu].BuildingName)end end end;function Lib.Warehouse.Global:OnTradepostDestroyed(q,an)local I,J,K=Logic.EntityGetPos(an)local W=Logic.GetEntityOrientation(an)local aM=Logic.GetEntityName(an)local cu=aM and self:GetIndex(aM:sub(1,aM:len()-5))or 0;if cu~=0 then local bd=self.Warehouses[cu]local al=ReplaceEntity(bd.ScriptName,Entities.I_X_TradePostConstructionSite)for f=1,8 do Logic.InteractiveObjectSetPlayerState(al,f,1)end end end;function Lib.Warehouse.Global:ControlWarehouse()for f=1,#self.Warehouses do if self.Warehouses[f]then for bO=1,#self.Warehouses[f].Offers do local lY=self.Warehouses[f].Offers[bO]if lY.Active and lY.Refresh>0 then if self.Warehouses[f].Offers[bO].Current<lY.Amount then self.Warehouses[f].Offers[bO].Timer=lY.Timer-1;if lY.Timer==0 then self.Warehouses[f].Offers[bO].Current=lY.Current+1;self.Warehouses[f].Offers[bO].Timer=lY.Refresh end end end end end end;local fX=table.tostring(self.Warehouses)ExecuteLocal([[Lib.Warehouse.Local.Warehouses = %s]],fX)end;function Lib.Warehouse.Local:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")for f=1,8 do self.Inflation.Players[f]={}end;Lib.Warehouse.Global=nil end;self.IsInstalled=true end;function Lib.Warehouse.Local:OnSaveGameLoaded()end;function Lib.Warehouse.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.WarehouseOfferClicked then if GUI.GetPlayerID()==arg[2]then local cu=self:GetIndex(arg[2])if self.Warehouses[cu]then self.Warehouses[cu].Offers[arg[4]].BuyLock=false end end end end;function Lib.Warehouse.Local:GetIndex(r)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==r then return f end end;return 0 end;function Lib.Warehouse.Local:GetPrice(q,ai,lR)return math.floor((self.Inflation.Players[q][ai]or 1.0)*lR+0.5)end;function Lib.Warehouse.Local:GetInflation(q,ai)return self.Inflation.Players[q][ai]or 1.0 end;function Lib.Warehouse.Local:GetOfferByID(r,aD)local lY,lZ;local cu=self:GetIndex(r)if cu~=0 then for f=#self.Warehouses[cu].Offers,1,-1 do if self.Warehouses[cu].Offers[f].ID==aD then lY=self.Warehouses[cu].Offers[f]lZ=f end end end;return lY,lZ end;function Lib.Warehouse.Local:GetActivOffers(r,lV)local l_={}local cu=self:GetIndex(r)if cu~=0 then for f=1,#self.Warehouses[cu].Offers do if(not lV or#l_<6)and self.Warehouses[cu].Offers[f].Active then table.insert(l_,self.Warehouses[cu].Offers[f].ID)end end end;return l_ end;function Lib.Warehouse.Local:InitTradeButtons(bB)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(1,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(1,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(1,e4,an)end)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(2,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(2,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(2,e4,an)end)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(3,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(3,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(3,e4,an)end)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(4,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(4,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(4,e4,an)end)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(5,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(5,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(5,e4,an)end)AddBuildingButtonByEntity(bB,function(e4,an)Lib.Warehouse.Local:WarehouseButtonAction(6,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonTooltip(6,e4,an)end,function(e4,an)Lib.Warehouse.Local:WarehouseButtonUpdate(6,e4,an)end)end;function Lib.Warehouse.Local:WarehouseButtonAction(iu,e4,an)local n=GUI.GetPlayerID()local aM=Logic.GetEntityName(an)local aW,aU=string.find(aM,"_Post")aM=string.sub(aM,1,aW-1)local cu=self:GetIndex(aM)if cu==0 then return end;local l_=self:GetActivOffers(aM)local bd,lZ=self:GetOfferByID(aM,l_[iu])if not bd then return end;if bd.BuyLock then return end;local m8=self:GetPrice(n,bd.GoodType,bd.BasePrice)local m6=self:GetInflation(n,bd.GoodType)if GetPlayerGoodsInSettlement(bd.PaymentType,n)<m8 then return end;self.Warehouses[cu].Offers[lZ].BuyLock=true;SendReportToGlobal(Report.WarehouseOfferClicked,n,aM,m6,lZ,bd.GoodType,bd.GoodAmount,bd.PaymentType,bd.BasePrice)end;function Lib.Warehouse.Local:WarehouseButtonTooltip(iu,e4,an)local n=GUI.GetPlayerID()local aM=Logic.GetEntityName(an)local aW,aU=string.find(aM,"_Post")aM=string.sub(aM,1,aW-1)if XGUIEng.IsButtonDisabled(e4)==1 then SetTooltipCosts(ConvertPlaceholders(Localize(Lib.Warehouse.Text.OfferTitle[1])),"")return end;local cu=self:GetIndex(aM)if cu==0 then return end;local l_=self:GetActivOffers(aM)local bd,lZ=self:GetOfferByID(aM,l_[iu])if not bd then return end;local m8=self:GetPrice(n,bd.GoodType,bd.BasePrice)local m9=true;local ma=""local mb=""local iA=Logic.GetGoodTypeName(bd.GoodType)local eY=Logic.GetEntityTypeName(bd.GoodType)local mc=GetSiegeengineTypeByCartType(bd.GoodType)if iA~=nil and iA~=""then ma=GetStringText("UI_ObjectNames/"..iA)mb=GetStringText("UI_ObjectDescription/"..iA)else ma=GetStringText("UI_ObjectNames/HireEntertainer")mb=GetStringText("UI_ObjectDescription/HireEntertainer")if Logic.IsEntityTypeInCategory(bd.GoodType,EntityCategories.Soldier)==1 then ma=GetStringText("UI_ObjectNames/HireMercenaries")mb=GetStringText("UI_ObjectDescription/HireMercenaries")elseif mc or Logic.IsEntityTypeInCategory(bd.GoodType,EntityCategories.SiegeEngine)==1 then ma=GetStringText("Names/"..eY)local md=Logic.GetEntityTypeName(mc)mb=GetStringText("UI_ObjectDescription/Abilities_"..md)end end;local me=""if bd.Amount>1 then me=string.format(" (%d/%d)",bd.Current,bd.Amount)end;local mf=""if KeyOf(bd.GoodType,Goods)~=nil then mf=string.format(Localize(Lib.Warehouse.Text.OfferTitle[2]),bd.GoodAmount,ma,me)elseif KeyOf(bd.GoodType,Entities)~=nil then if Logic.IsEntityTypeInCategory(bd.GoodType,EntityCategories.Military)==1 then mf=string.format(Localize(Lib.Warehouse.Text.OfferTitle[4]),ma,me)elseif mc or Logic.IsEntityTypeInCategory(bd.GoodType,EntityCategories.SiegeEngine)==1 then mf=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),ma,me)else mf=string.format(Localize(Lib.Warehouse.Text.OfferTitle[3]),ma)end end;SetTooltipCosts(mf,mb,nil,{bd.PaymentType,m8},m9)end;function Lib.Warehouse.Local:WarehouseButtonUpdate(iu,e4,an)local aM=Logic.GetEntityName(an)local aW,aU=string.find(aM,"_Post")aM=string.sub(aM,1,aW-1)local cu=self:GetIndex(aM)if cu==0 then XGUIEng.ShowWidget(e4,0)return end;local l_=self:GetActivOffers(aM)local bd,lZ=self:GetOfferByID(aM,l_[iu])if not bd or not bd.Active then XGUIEng.ShowWidget(e4,0)return end;if not bd.BuyLock and bd.Current>0 then XGUIEng.DisableButton(e4,0)else XGUIEng.DisableButton(e4,1)end;local jk=bd.GoodType;local is=g_TexturePositions.Goods[jk]or g_TexturePositions.Entities[jk]ChangeIcon(e4,is)end;RegisterModule(Lib.Warehouse.Name)Lib.Register("module/mode/SettlementSurvival_Text")Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Text={Alarms={AnimalDiedFromIllness={de="{scarlet}Eure Nutztiere sterben an Krankheiten!",en="{scarlet}Your farm animals succumb to the plague!",fr="{scarlet}Vos animaux de ferme succombent à la peste!"},BuildingBurning={de="{scarlet}Brände wüten in Eurer Stadt!",en="{scarlet}Fires are raging in your city!",fr="{scarlet}Les incendies font rage dans votre ville !"},SettlerTemperature={de="{scarlet}Eure Siedler haben kein Feuerholz und frieren!",en="{scarlet}Your settlers lack of firewood to warm themselves!",fr="{scarlet}Vos colons manquent de bois de chauffage pour se réchauffer!"},SettlerNegligence={de="{scarlet}Eure Siedler verwahrlosen und werden krank!",en="{scarlet}Your settlers are neglected and getting sick!",fr="{scarlet}Vos colons sont négligés et tombent malades!"},SettlerDiedFromHunger={de="{scarlet}Eure Siedler haben nichts zu essen und verhungern!",en="{scarlet}Your settlers are starving to death!",fr="{scarlet}Vos colons meurent de faim!"},SettlerDiedFromIllness={de="{scarlet}Eure Siedler sterben an Krankheiten!",en="{scarlet}Your settlers succumb to the plague!",fr="{scarlet}Vos colons succombent à la peste!"}},Messages={BuildingMourning={de="Keine Baumaßnahmen möglich, solange Siedler trauern.",en="No construction work possible as long as settlers mourn.",fr="Aucun travail de construction possible tant que les colons pleurent."}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/mode/SettlementSurvival_API")function AnimalPlagueActivate(c5)Lib.SettlementSurvival.Global.AnimalPlague.IsActive=c5==true end;API.AnimalPlagueActivate=AnimalPlagueActivate;function AnimalPlagueActivateForAI(c5)Lib.SettlementSurvival.Global.AnimalPlague.AffectAI=c5==true end;API.AnimalPlagueActivateForAI=AnimalPlagueActivateForAI;function AnimalInfectionActivateAutomatic(c5)Lib.SettlementSurvival.Global.AnimalPlague.AnimalsBecomeSick=c5==true end;API.AnimalInfectionActivateAutomatic=AnimalInfectionActivateAutomatic;function AnimalPlagueSetDeathInterval(mg)Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer = %d]],mg)end;API.AnimalPlagueSetDeathInterval=AnimalPlagueSetDeathInterval;function AnimalPlagueSetDeathChance(mh)Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance = %d]],mh)end;API.AnimalPlagueSetDeathChance=AnimalPlagueSetDeathChance;function AnimalPlagueSetInfectionInterval(mg)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer = %d]],mg)end;API.AnimalPlagueSetInfectionInterval=AnimalPlagueSetInfectionInterval;function AnimalPlagueSetInfectionChance(mh)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance = %d]],mh)end;API.AnimalPlagueSetInfectionChance=AnimalPlagueSetInfectionChance;function HotWeatherActivate(c5)Lib.SettlementSurvival.Global.HotWeather.IsActive=c5==true end;API.HotWeatherActivate=HotWeatherActivate;function HotWeatherActivateForAI(c5)Lib.SettlementSurvival.Global.HotWeather.AffectAI=c5==true end;API.HotWeatherActivateForAI=HotWeatherActivateForAI;function HotWeatherSetTemperature(mi)Lib.SettlementSurvival.Shared.HotWeather.Temperature=mi;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.Temperature = %d]],mi)end;API.HotWeatherSetTemperature=HotWeatherSetTemperature;function HotWeatherSetIgnitionChance(mh)Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance = %d]],mh)end;API.HotWeatherSetIgnitionChance=HotWeatherSetIgnitionChance;function ColdWeatherActivate(c5)Lib.SettlementSurvival.Global.ColdWeather.IsActive=c5==true end;API.ColdWeatherActivate=ColdWeatherActivate;function ColdWeatherActivateForAI(c5)Lib.SettlementSurvival.Global.ColdWeather.AffectAI=c5==true end;API.ColdWeatherActivateForAI=ColdWeatherActivateForAI;function ColdWeatherSetTemperature(mi)Lib.SettlementSurvival.Shared.ColdWeather.Temperature=mi;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.Temperature = %d]],mi)end;API.ColdWeatherSetTemperature=ColdWeatherSetTemperature;function ColdWeatherSetConsumptionInterval(mg)Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer = %d]],mg)end;API.ColdWeatherSetConsumptionInterval=ColdWeatherSetConsumptionInterval;function ColdWeatherSetInfectionChance(mh)Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance = %d]],mh)end;API.ColdWeatherSetInfectionChance=ColdWeatherSetInfectionChance;function FamineActivate(c5)Lib.SettlementSurvival.Global.Famine.IsActive=c5==true end;API.FamineActivate=FamineActivate;function FamineActivateForAI(c5)Lib.SettlementSurvival.Global.Famine.AffectAI=c5==true end;API.FamineActivateForAI=FamineActivateForAI;function FamineSetDeathInterval(mg)Lib.SettlementSurvival.Shared.Famine.DeathTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathTimer = %d]],mg)end;API.FamineSetDeathInterval=FamineSetDeathInterval;function FamineSetDeathChance(mh)Lib.SettlementSurvival.Shared.Famine.DeathChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathChance = %d]],mh)end;API.FamineSetDeathChance=FamineSetDeathChance;function NegligenceActivate(c5)Lib.SettlementSurvival.Global.Negligence.IsActive=c5==true end;API.NegligenceActivate=NegligenceActivate;function NegligenceActivateForAI(c5)Lib.SettlementSurvival.Global.Negligence.AffectAI=c5==true end;API.NegligenceActivateForAI=NegligenceActivateForAI;function NegligenceSetInfectionInterval(mg)Lib.SettlementSurvival.Shared.Negligence.InfectionTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionTimer = %d]],mg)end;API.NegligenceSetInfectionInterval=NegligenceSetInfectionInterval;function NegligenceSetInfectionChance(mh)Lib.SettlementSurvival.Shared.Negligence.InfectionChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionChance = %d]],mh)end;API.NegligenceSetInfectionChance=NegligenceSetInfectionChance;function PlagueActivate(c5)Lib.SettlementSurvival.Global.Plague.IsActive=c5==true end;API.PlagueActivate=PlagueActivate;function PlagueActivateForAI(c5)Lib.SettlementSurvival.Global.Plague.AffectAI=c5==true end;API.PlagueActivateForAI=PlagueActivateForAI;function PlagueSetDeathInterval(mg)Lib.SettlementSurvival.Shared.Plague.DeathTimer=mg;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathTimer = %d]],mg)end;API.PlagueSetDeathInterval=PlagueSetDeathInterval;function PlagueSetDeathChance(mh)Lib.SettlementSurvival.Shared.Plague.DeathChance=mh;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathChance = %d]],mh)end;API.PlagueSetDeathChance=PlagueSetDeathChance;Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Name="SettlementSurvival"Lib.SettlementSurvival.Global={AnimalPlague={AnimalsBecomeSick=false,IsActive=false,AffectAI=false},Famine={IsActive=false,AffectAI=false},ColdWeather={IsActive=false,AffectAI=false},HotWeather={IsActive=false,AffectAI=false},Negligence={IsActive=false,AffectAI=false},Plague={IsActive=false,AffectAI=false},SuspendedSettlers={}}Lib.SettlementSurvival.Local={SuspendedSettlers={}}Lib.SettlementSurvival.Shared={AnimalPlague={InfectionChance=6,InfectionTimer=60,DeathChance=12,DeathTimer=30},ColdWeather={ConsumptionFactor=0.01,ConsumptionTimer=30,Temperature=5,InfectionChance=12},HotWeather={IgnitionChance=5,IgnitionTimer=30,Temperature=30},Famine={DeathChance=6,DeathTimer=30},Negligence={InfectionChance=6,InfectionTimer=90},Plague={DeathChance=12,DeathTimer=30},SuspendedSettlers={MourningTime=5*60}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/mode/SettlementSurvival_API")Lib.Require("module/mode/SettlementSurvival_Text")Lib.Register("module/mode/SettlementSurvival")function Lib.SettlementSurvival.Global:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")for n=1,8 do self.AnimalPlague[n]={}self.ColdWeather[n]={Consumption=0}self.Famine[n]={}self.Negligence[n]={}self.Plague[n]={}self.SuspendedSettlers[n]={}end;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()local mj=Logic.GetCurrentTurn()Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(mj)Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(mj)Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(mj)Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(mj)Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(mj)Lib.SettlementSurvival.Global:ControlAnimalInfections(mj)Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(mj)Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(mj)Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(mj)end)self:OverwriteNeeds()Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Global:OnSaveGameLoaded()self:RestoreSettlerSuspension()end;function Lib.SettlementSurvival.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.FireAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aD==Report.FireAlarmActivated_Internal then self:RestoreSettlerSuspension()elseif aD==Report.RepairAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aD==Report.ReRepairAlarmActivated_Internal then self:RestoreSettlerSuspension()end end;function Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local ml={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local mm={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local mn=Array_Append(ml,mm)for f=1,#mn do if not self.AnimalPlague[n][mn[f]]and Logic.IsFarmAnimalInPasture(mn[f])and Logic.IsFarmAnimalIll(mn[f])then self.AnimalPlague[n][mn[f]]={gx}end end;for mo,h in pairs(self.AnimalPlague[n])do if not IsExisting(mo)or not Logic.IsFarmAnimalInPasture(mo)or not Logic.IsFarmAnimalIll(mo)then self.AnimalPlague[n][mo]=nil end end;local mp=Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer;local mq=false;if gx%mp==0 then for mo,gn in pairs(self.AnimalPlague[n])do local mr=Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)mr=mr/2 end;if mr>=1 and math.random(1,100)<=math.min(mr,100)then SendReport(Report.AnimalDiedFromIllness,mo)SendReportToLocal(Report.AnimalDiedFromIllness,mo)SetHealth(mo,0)mq=true end end end;if mq then self:Print(n,Lib.SettlementSurvival.Text.Alarms.AnimalDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(mk)if not Lib.LifestockSystem or not Lib.LifestockSystem.Global.IsInstalled then if Logic.GetTime()%10==0 then local ms=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(ms)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,900,1)if IsExisting(mt)then local hM=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hM-1)end end;local mu=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(mu)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_SheepPasture,I,J,900,1)if IsExisting(mt)then local hM=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hM-1)end end end end end;function Lib.SettlementSurvival.Global:ControlAnimalInfections(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.AnimalPlague.AnimalsBecomeSick then if self.AnimalPlague.IsActive and n>=1 and n<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local mv=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer;if gx%mv==0 then local ml={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}local mm={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}local mn=Array_Append(ml,mm)local mr=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;for f=#mn,1,-1 do if Logic.IsFarmAnimalInPasture(mn[f])and not Logic.IsFarmAnimalIll(mn[f])then if math.random(1,100)<=mr then Logic.MakeFarmAnimalIll(mn[f])end end end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.HotWeather.IsActive and n>=1 and n<=8 then if self.HotWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()>=Lib.SettlementSurvival.Shared.HotWeather.Temperature then local mw=Lib.SettlementSurvival.Shared.HotWeather.IgnitionTimer;if gx%mw==0 then local mx={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local my={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local mz=Array_Append(mx,my)local mA=false;for f=1,#mz do if Logic.IsConstructionComplete(mz[f])==1 and not Logic.IsBurning(mz[f])then local mB=Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance;if math.random(1,100)<=mB then Logic.DEBUG_SetBuildingOnFire(mz[f],50)mA=true end end end;if mA then self:Print(n,Lib.SettlementSurvival.Text.Alarms.BuildingBurning)end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.ColdWeather.IsActive and n>=1 and n<=8 then if self.ColdWeather.AffectAI or Logic.PlayerGetIsHumanFlag(n)then if Logic.GetCurrentTemperature()<=Lib.SettlementSurvival.Shared.ColdWeather.Temperature then local mC=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer;if gx%mC==0 then local mD=0;local mx={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}local my={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local mz=Array_Append(mx,my)for f=1,#mz do if Logic.IsConstructionComplete(mz[f])==1 then local mE=0;for gn,mF in pairs({Logic.GetWorkersAndSpousesForBuilding(mz[f])})do if not self:IsSettlerSuspended(mF)then mE=mE+1 end end;if Logic.IsNeedActive(mz[f],Needs.Clothes)and Logic.GetNeedState(mz[f],Needs.Clothes)>0.5 then mE=mE*0.5 end;mD=mD+mE end end;local mG=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionFactor*mD;local mH=GetPlayerResources(Goods.G_Wood,n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption+mG;if self.ColdWeather[n].Consumption>1 then local mI=math.floor(mG)AddGood(Goods.G_Wood,-1*math.min(mI,mH),n)self.ColdWeather[n].Consumption=self.ColdWeather[n].Consumption-mI end;if mG>mH then local mJ=Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance;for f=1,#mz do if math.random(1,100)<=mJ then Logic.MakeBuildingIll(mz[f])end end;self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerTemperature)end end end end end end;function Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.Negligence.IsActive and n>=1 and n<=8 then if self.Negligence.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local mK={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local mL={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}mL=Array_Append(mK,mL)for f=1,#mL do if not self.Negligence[n][mL[f]]and Logic.GetEntityType(mL[f])~=Entities.U_Pharmacist and(self:IsSettlerDirty(mL[f])or self:IsSettlerBored(mL[f]))and not self:IsSettlerSuspended(mL[f])and not Logic.IsIll(mL[f])then self.Negligence[n][mL[f]]={gx}end end;for mF,h in pairs(self.Negligence[n])do if not self:IsSettlerBored(mF)and not self:IsSettlerDirty(mF)then self.Negligence[n][mF]=nil end end;local mv=Lib.SettlementSurvival.Shared.Negligence.InfectionTimer;local mq=false;if gx%mv==0 then for mF,h in pairs(self.Negligence[n])do if h[1]+mv<gx then local mr=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;if math.random(1,100)<=mr then if not self:IsSettlerCarryingHygiene(mF)and not self:IsSettlerCarryingBeer(mF)and not self:IsSettlerSuspended(mF)then Logic.MakeSettlerIll(mF)mq=true end end end end end;if mq then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerNegligence)end end end end;function Lib.SettlementSurvival.Global:IsSettlerDirty(k)local B=GetID(k)local hW=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(hW,Needs.Hygiene)end;function Lib.SettlementSurvival.Global:IsSettlerBored(k)local B=GetID(k)local hW=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(hW,Needs.Entertainment)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingHygiene(k)local B=GetID(k)local mM=Logic.GetCurrentTaskList(B)return mM and mM:find("_HYGIENE")end;function Lib.SettlementSurvival.Global:IsSettlerCarryingBeer(k)local B=GetID(k)local mM=Logic.GetCurrentTaskList(B)return mM and mM:find("_ENTERTAINMENT")end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.Famine.IsActive and n>=1 and n<=8 then if self.Famine.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local mK={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local mL={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}mL=Array_Append(mK,mL)for f=1,#mL do if not self.Famine[n][mL[f]]and self:IsSettlerHungry(mL[f])and not self:IsSettlerSuspended(mL[f])then self.Famine[n][mL[f]]={gx}end end;for mF,h in pairs(self.Famine[n])do if not IsExisting(mF)or not self:IsSettlerHungry(mF)then self.Famine[n][mF]=nil end end;local mp=Lib.SettlementSurvival.Shared.Famine.DeathTimer;local mq=false;if gx%mp==0 then for mF,h in pairs(self.Famine[n])do if not self:IsSettlerCarryingFood(mF)and not self:IsSettlerSuspended(mF)then local mr=Lib.SettlementSurvival.Shared.Famine.DeathChance;if mr>=1 and math.random(1,100)<=math.ceil(mr)then SendReport(Report.SettlerDiedFromStarvation,mF)SendReportToLocal(Report.SettlerDiedFromStarvation,mF)self:SuspendSettler(mF,true)mq=true end end end end;if mq then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromHunger)end end end end;function Lib.SettlementSurvival.Global:IsSettlerHungry(k)local B=GetID(k)local hW=Logic.GetSettlersWorkBuilding(B)return Logic.IsNeedCritical(hW,Needs.Nutrition)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingFood(k)local B=GetID(k)local mM=Logic.GetCurrentTaskList(B)return mM and(mM:find("_NUTRITION")or mM:find("_FOOD"))end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(mk)local gx=math.floor(Logic.GetTime())local n=mk%10;if self.Plague.IsActive and n>=1 and n<=8 then if self.Plague.AffectAI or Logic.PlayerGetIsHumanFlag(n)then local mK={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Spouse)}local mL={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Worker)}mL=Array_Append(mK,mL)for f=1,#mL do if not self.Plague[n][mL[f]]and Logic.GetEntityType(mL[f])~=Entities.U_Pharmacist and Logic.IsIll(mL[f])and not self:IsSettlerSuspended(mL[f])then self.Plague[n][mL[f]]={gx}end end;for mF,h in pairs(self.Plague[n])do if not IsExisting(mF)or not Logic.IsIll(mF)then self.Plague[n][mF]=nil end end;local mp=Lib.SettlementSurvival.Shared.Plague.DeathTimer;local mq=false;if gx%mp==0 then for mF,h in pairs(self.Plague[n])do if not self:IsSettlerCarryingMedicine(mF)and not self:IsSettlerSuspended(mF)then local mr=Lib.SettlementSurvival.Shared.Plague.DeathChance;if GetPlayerResources(Goods.G_Herb,n)>10 then AddGood(Goods.G_Herb,-1,n)mr=mr/2 end;if mr>=1 and math.random(1,100)<=math.ceil(mr)then SendReport(Report.SettlerDiedFromIllness,mF)SendReportToLocal(Report.SettlerDiedFromIllness,mF)self:SuspendSettler(mF,true)mq=true end end end end;if mq then self:Print(n,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:IsSettlerCarryingMedicine(k)local B=GetID(k)local mM=Logic.GetCurrentTaskList(B)return mM and mM:find("_MEDICINE")end;function Lib.SettlementSurvival.Global:ResumeSettler(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)local cY=Logic.GetStoreHouse(n)if cY~=0 then Logic.SetTaskList(B,TaskLists.TL_WAIT_THEN_WALK)Logic.SetVisible(B,true)if self.SuspendedSettlers[n][B]then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,B)self.SuspendedSettlers[n][B]=nil end end end;function Lib.SettlementSurvival.Global:SuspendSettler(k,mN)local B=GetID(k)local n=Logic.EntityGetPlayer(B)local cY=Logic.GetStoreHouse(n)if cY~=0 then local hW=Logic.GetSettlersWorkBuilding(B)local mO={Logic.GetWorkersAndSpousesForBuilding(hW)}local mP=false;for f=1,#mO do if not self:IsSettlerSuspended(k)then mP=true;break end end;if mP==false then Logic.SetNeedState(B,Needs.Nutrition,1.0)Logic.SetNeedState(B,Needs.Entertainment,1.0)Logic.SetNeedState(B,Needs.Clothes,1.0)Logic.SetNeedState(B,Needs.Hygiene,1.0)Logic.SetNeedState(B,Needs.Medicine,1.0)end;local I,J,K=Logic.EntityGetPos(cY)Logic.DEBUG_SetSettlerPosition(B,I,J)Logic.SetVisible(B,false)Logic.SetTaskList(B,TaskLists.TL_NPC_IDLE)if not self.SuspendedSettlers[n][B]then local mQ=mN and Logic.GetTime()or-1;ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = {%d}",n,B,mQ)self.SuspendedSettlers[n][B]={mQ}end end end;function Lib.SettlementSurvival.Global:IsSettlerSuspended(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][B]~=nil end;function Lib.SettlementSurvival.Global:HasSuspendedInhabitants(k)local hW=GetID(k)local mO={Logic.GetWorkersAndSpousesForBuilding(hW)}for f=1,#mO do if self:IsSettlerSuspended(mO[f])then return true end end;return false end;function Lib.SettlementSurvival.Global:RestoreSettlerSuspension()for n=1,8 do for g,h in pairs(self.SuspendedSettlers[n])do if not IsExisting(g)then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",n,g)self.SuspendedSettlers[n][g]=nil else self:SuspendSettler(g)end end end end;function Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(mk)local mR=Lib.SettlementSurvival.Shared.SuspendedSettlers.MourningTime;local gx=Logic.GetTime()local n=mk%10;if n>=1 and n<=8 then for g,h in pairs(self.SuspendedSettlers[n])do if h[1]>-1 and h[1]+mR<=gx then self:ResumeSettler(g)DestroyEntity(g)end end end end;function Lib.SettlementSurvival.Global:OverwriteNeeds()ActivateNeedsForBuilding=function(q,an)for mS,gn in pairs(PlayerActiveNeeds[q])do if Logic.IsEntityInCategory(an,EntityCategories.OuterRimBuilding)==1 then if mS==Needs.Nutrition or mS==Needs.Clothes or mS==Needs.Medicine then Logic.SetNeedActive(an,mS,true)end end;if Logic.IsEntityInCategory(an,EntityCategories.CityBuilding)==1 then Logic.SetNeedActive(an,mS,true)end end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end;ActivateNeedForPlayer=function(q,mT)if mT==nil then return end;for g=1,#mT do local mS=mT[g]PlayerActiveNeeds[q][mS]=true;local dk={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}if mS==Needs.Nutrition or mS==Needs.Clothes or mS==Needs.Medicine then local mU={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}for bO=1,#mU do local hW=mU[bO]table.insert(dk,hW)end end;for f=1,#dk do local hW=dk[f]Logic.SetNeedActive(hW,mS,true)end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end end end;function Lib.SettlementSurvival.Global:Print(q,bF)local cb=ConvertPlaceholders(Localize(bF))ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            GUI.ClearNotes()
            GUI.AddNote("%s")
        end
    ]],q,cb)end;function Lib.SettlementSurvival.Local:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")self:OverrideSelectionChanged()self:OverwriteAlarmButtons()self:OverwriteGameCallbacks()self:OverwriteJumpToWorker()self:OverwriteUpgradeButton()for n=1,8 do self.SuspendedSettlers[n]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Local:OnSaveGameLoaded()end;function Lib.SettlementSurvival.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementSurvival.Local:OverwriteJumpToWorker()GUI_BuildingInfo.JumpToWorkerClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local n=GUI.GetPlayerID()local mV=GUI.GetSelectedEntity()local mW=0;local mX;if Logic.IsBuilding(mV)==1 then mW=mV;mX=false else if Logic.IsWorker(mV)==1 or Logic.IsSpouse(mV)==true or Logic.GetEntityType(mV)==Entities.U_Priest then mW=Logic.GetSettlersWorkBuilding(mV)mX=true end end;if mW~=0 then local mY={Logic.GetWorkersAndSpousesForBuilding(mW)}for f=#mY,1,-1 do local mF=mY[f]if Lib.SettlementSurvival.Local.SuspendedSettlers[n]then if Lib.SettlementSurvival.Local.SuspendedSettlers[n][mF]then table.remove(mY,f)end end end;local mZ;if g_CloseUpView.Active==false and mX==true then mZ=mV else local m_=1;for f=1,#mY do if mY[f]==g_LastSelectedInhabitant then m_=f+1;break end end;mZ=mY[m_]if mZ==0 then mZ=mY[m_+1]end end;if mZ==nil then local I,J=Logic.GetEntityPosition(mW)g_LastSelectedInhabitant=nil;ShowCloseUpView(0,I,J)GUI.SetSelectedEntity(mW)else GUI.SetSelectedEntity(mZ)ShowCloseUpView(mZ)g_LastSelectedInhabitant=mZ end end end end;function Lib.SettlementSurvival.Local:IsSettlerSuspended(k)local B=GetID(k)local n=Logic.EntityGetPlayer(B)return self.SuspendedSettlers[n]and self.SuspendedSettlers[n][B]~=nil end;function Lib.SettlementSurvival.Local:HasSuspendedInhabitants(k)local hW=GetID(k)local mO={Logic.GetWorkersAndSpousesForBuilding(hW)}for f=1,#mO do if self:IsSettlerSuspended(mO[f])then return true end end;return false end;function Lib.SettlementSurvival.Local:OverwriteGameCallbacks()self.Orig_GameCallback_Feedback_OnBuildingBurning=GameCallback_Feedback_OnBuildingBurning;GameCallback_Feedback_OnBuildingBurning=function(q,an)Lib.SettlementSurvival.Local.Orig_GameCallback_Feedback_OnBuildingBurning(q,an)SendReportToGlobal(Report.FireAlarmActivated_Internal,an)end;self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(g3,bC)if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(g3)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(g3)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(g3,bC)end end;function Lib.SettlementSurvival.Local:OverwriteAlarmButtons()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopFireAlarmClicked;GUI_BuildingButtons.StartStopFireAlarmClicked=function()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsFireAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.FireAlarmActivated_Internal,B)else SendReportToGlobal(Report.FireAlarmDeactivated_Internal,B)end end;GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopRepairAlarmClicked;GUI_BuildingButtons.StartStopRepairAlarmClicked=function()GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival()local B=GUI.GetSelectedEntity()if Logic.IsRepairAlarmActiveAtBuilding(B)==true then SendReportToGlobal(Report.ReRepairAlarmActivated_Internal,B)else SendReportToGlobal(Report.RepairAlarmDeactivated_Internal,B)end end end;function Lib.SettlementSurvival.Local:OverwriteUpgradeButton()GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival=GUI_BuildingButtons.UpgradeClicked;GUI_BuildingButtons.UpgradeClicked=function()local hW=GUI.GetSelectedEntity()if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(hW)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(hW)return end;GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival()end end;function Lib.SettlementSurvival.Local:OverrideSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.SettlementSurvival.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.SettlementSurvival.Local:OnBuildingSelected()end end;function Lib.SettlementSurvival.Local:OnBuildingSelected()local B=GUI.GetSelectedEntity()if Logic.IsEntityInCategory(B,EntityCategories.OuterRimBuilding)==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",1)end end;RegisterModule(Lib.SettlementSurvival.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/BriefingSystem_API")function StartBriefing(n0,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(n0)=="table","Briefing must be a table!")assert(#n0>0,"Briefing does not contain pages!")for f=1,#n0 do assert(type(n0[f])~="table"or n0[f].__Legit,"A page is not initalized!")end;if n0.EnableSky==nil then n0.EnableSky=true end;if n0.EnableFoW==nil then n0.EnableFoW=false end;if n0.EnableGlobalImmortality==nil then n0.EnableGlobalImmortality=true end;if n0.EnableBorderPins==nil then n0.EnableBorderPins=false end;if n0.RestoreGameSpeed==nil then n0.RestoreGameSpeed=true end;if n0.RestoreCamera==nil then n0.RestoreCamera=true end;Lib.BriefingSystem.Global:StartBriefing(r,n,n0)end;API.StartBriefing=StartBriefing;function RequestBriefingAlternateGraphics()if not GUI then ExecuteLocal("RequestBriefingAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestBriefingAlternateGraphics=RequestBriefingAlternateGraphics;function IsBriefingActive(q)if not IsLocalScript()then return Lib.BriefingSystem.Global:GetCurrentBriefing(q)~=nil end;return Lib.BriefingSystem.Local:GetCurrentBriefing(q)~=nil end;API.IsBriefingActive=IsBriefingActive;function GetFramePosition(k,n1)local I,J,K=Logic.EntityGetPos(GetID(k))return I,J,K+(n1 or 0)end;function GetFrameVector(n2,n3,n4,n5)local at,au,av=Logic.EntityGetPos(GetID(n2))local ax,ay,az=Logic.EntityGetPos(GetID(n4))return at,au,av+(n3 or 0),ax,ay,az+(n5 or 0)end;function AddBriefingPages(n0)Lib.BriefingSystem.Global:CreateBriefingGetPage(n0)Lib.BriefingSystem.Global:CreateBriefingAddPage(n0)Lib.BriefingSystem.Global:CreateBriefingAddMCPage(n0)Lib.BriefingSystem.Global:CreateBriefingAddRedirect(n0)local AP=function(n6)local n7;if type(n6)=="table"then if n6.MC then n7=n0:AddMCPage(n6)else n7=n0:AddPage(n6)end else n7=n0:AddRedirect(n6)end;return n7 end;local ASP=function(...)n0.PageAnimation=n0.PageAnimation or{}local Name,iz,cb,V;local n8=false;local ha=function()end;local n9=false;if#arg==3 and type(arg[1])=="string"or#arg>=4 and type(arg[4])=="boolean"then Name=table.remove(arg,1)end;iz=table.remove(arg,1)cb=table.remove(arg,1)if#arg>0 then n8=table.remove(arg,1)==true end;if#arg>0 then V=table.remove(arg,1)end;if#arg>0 then ha=table.remove(arg,1)end;if#arg>0 then n9=not table.remove(arg,1)end;local na;if V then na=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if V and Logic.IsSettler(GetID(V))==1 then na=Logic.GetEntityOrientation(GetID(V))+90 end end;return n0:AddPage{Name=Name,Title=iz,Text=cb,Action=ha,Position=V,DisableSkipping=n9,DialogCamera=n8,Rotation=na}end;return AP,ASP end;API.AddBriefingPages=AddBriefingPages;function AP(f7)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/BriefingSystem_Text")Lib.BriefingSystem.Text={NextButton={de="Weiter",en="Forward",fr="Continuer"},PrevButton={de="Zurück",en="Previous",fr="Retour"},EndButton={de="Beenden",en="Close",fr="Quitter"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.BriefingSystem=Lib.BriefingSystem or{}Lib.BriefingSystem.Name="BriefingSystem"Lib.BriefingSystem.Global={Briefing={},BriefingQueue={},BriefingCounter=0}Lib.BriefingSystem.Local={Config={DoAlternateGraphics=true},ParallaxWidgets={{"/EndScreen/EndScreen/BackGround","/EndScreen/EndScreen"},{"/InGame/Root/EndScreen/BlackBG","/InGame/Root/EndScreen"},{"/InGame/Root/EndScreen/BG","/InGame/Root/EndScreen"},{"/InGame/Root/BlackStartScreen/BG","/InGame/Root/BlackStartScreen"}},Briefing={}}CONST_BRIEFING={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/BriefingSystem_Text")Lib.Require("module/information/BriefingSystem_API")Lib.Register("module/information/BriefingSystem")CinematicEventTypes.Briefing=2;function Lib.BriefingSystem.Global:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")for f=1,8 do self.BriefingQueue[f]={}end;RequestHiResJob(function()Lib.BriefingSystem.Global:UpdateQueue()Lib.BriefingSystem.Global:BriefingExecutionController()end)Lib.BriefingSystem.Local=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Global:OnSaveGameLoaded()end;function Lib.BriefingSystem.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then elseif aD==Report.BriefingStarted then self:NextPage(arg[1])elseif aD==Report.BriefingEnded then SendReportToLocal(Report.BriefingEnded,arg[1],arg[2])elseif aD==Report.BriefingPageShown then SendReportToLocal(Report.BriefingPageShown,arg[1],arg[2])elseif aD==Report.BriefingOptionSelected then self:OnOptionSelected(arg[1],arg[2])elseif aD==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartBriefing(f)then local fn=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fn and fn[1]==CinematicEventTypes.Briefing then self:NextBriefing(f)end end end end;function Lib.BriefingSystem.Global:BriefingExecutionController()for f=1,8 do if self.Briefing[f]and not self.Briefing[f].DisplayIngameCutscene then local nb=self.Briefing[f].CurrentPage;local n7=self.Briefing[f][nb]if n7 and not n7.MC and n7.Duration>0 then if n7.Started+n7.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.BriefingSystem.Global:CreateBriefingGetPage(n0)n0.GetPage=function(self,nc)local al=Lib.BriefingSystem.Global:GetPageIDByName(n0.PlayerID,nc)return Lib.BriefingSystem.Global.Briefing[n0.PlayerID][al]end end;function Lib.BriefingSystem.Global:CreateBriefingAddPage(n0)n0.AddPage=function(self,n6)self.Length=(self.Length or 0)+1;n0.PageAnimation=n0.PageAnimation or{}n0.PageParallax=n0.PageParallax or{}local nd="Page"..#self+1;if n6.Name then nd=n6.Name else n6.Name=nd end;n6.__Legit=true;n6.Title=Localize(n6.Title or"")n6.Text=Localize(n6.Text or"")if n6.BigBars==nil then n6.BigBars=true end;if n6.Position then if not n6.Angle then n6.Angle=CONST_BRIEFING.CAMERA_ANGLEDEFAULT;if n6.DialogCamera then n6.Angle=CONST_BRIEFING.DLGCAMERA_ANGLEDEFAULT end end;if not n6.Rotation then n6.Rotation=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if n6.DialogCamera then n6.Rotation=CONST_BRIEFING.DLGCAMERA_ROTATIONDEFAULT end end;if not n6.Zoom then n6.Zoom=CONST_BRIEFING.CAMERA_ZOOMDEFAULT;if n6.DialogCamera then n6.Zoom=CONST_BRIEFING.DLGCAMERA_ZOOMDEFAULT end end;local ne,nf,ng,nh;if n6.FlyTo then ne=n6.FlyTo.Position or ne;nf=n6.FlyTo.Rotation or nf;ng=n6.FlyTo.Zoom or ng;nh=n6.FlyTo.Angle or nh end;n0.PageAnimation[nd]={Clear=true,{n6.Duration or 1,n6.Position,n6.Rotation,n6.Zoom,n6.Angle,ne,nf,ng,nh}}end;if not n6.FOV then if n6.DialogCamera then n6.FOV=CONST_BRIEFING.DLGCAMERA_FOVDEFAULT else n6.FOV=CONST_BRIEFING.CAMERA_FOVDEFAULT end end;if not n6.Duration then if not n6.Position then n6.DisableSkipping=false;n6.Duration=-1 else if n6.DisableSkipping==nil then n6.DisableSkipping=false end;n6.Duration=n6.Text:len()*CONST_BRIEFING.TIMER_PER_CHAR;n6.Duration=n6.Duration<6 and 6 or n6.Duration<6 end end;n6.GetSelected=function(self)return 0 end;table.insert(self,n6)return n6 end end;function Lib.BriefingSystem.Global:CreateBriefingAddMCPage(n0)n0.AddMCPage=function(self,n6)local n7=self:AddPage(n6)n7.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;if n7.MC then for f=1,#n7.MC do n7.MC[f][1]=Localize(n7.MC[f][1])n7.MC[f].ID=n7.MC[f].ID or f end;n7.BigBars=true;n7.DisableSkipping=true;n7.Duration=-1 end;return n7 end end;function Lib.BriefingSystem.Global:CreateBriefingAddRedirect(n0)n0.AddRedirect=function(self,S)self.Length=(self.Length or 0)+1;local n7=S==nil and-1 or S;table.insert(self,n7)return n7 end end;function Lib.BriefingSystem.Global:StartBriefing(r,q,f7)self.BriefingQueue[q]=self.BriefingQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Briefing,r,f7)end;function Lib.BriefingSystem.Global:EndBriefing(q)Logic.SetGlobalInvulnerability(0)local ni=self.Briefing[q]SendReport(Report.BriefingEnded,q,ni.Name)if ni.Finished then ni:Finished()end;FinishCinematicEvent(ni.Name,q)self.Briefing[q]=nil end;function Lib.BriefingSystem.Global:NextBriefing(q)if self:CanStartBriefing(q)then local nj=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(nj[1]==CinematicEventTypes.Briefing)StartCinematicEvent(nj[2],q)local ni=nj[3]ni.Name=nj[2]ni.PlayerID=q;ni.CurrentPage=0;self.Briefing[q]=ni;self:TransformAnimations(q)self:TransformParallaxes(q)if ni.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Briefing[q].Starting then self.Briefing[q]:Starting()end;SendReportToLocal(Report.BriefingStarted,q,ni.Name,ni)SendReport(Report.BriefingStarted,q,ni.Name)end end;function Lib.BriefingSystem.Global:TransformAnimations(q)if self.Briefing[q].PageAnimation then for g,h in pairs(self.Briefing[q].PageAnimation)do local nb=self:GetPageIDByName(q,g)if nb~=0 then self.Briefing[q][nb].Animations={}self.Briefing[q][nb].Animations.Repeat=h.Repeat==true;self.Briefing[q][nb].Animations.Clear=h.Clear==true;for f=1,#h,1 do local he={}he.Interpolation=h[f].Interpolation;he.Duration=h[f][1]or 2*60;if h[f][4]and type(h[f][4])~="table"then he.Start={Position=type(h[f][2])~="table"and{h[f][2],0}or h[f][2],Rotation=h[f][3]or CONST_BRIEFING.CAMERA_ROTATIONDEFAULT,Zoom=h[f][4]or CONST_BRIEFING.CAMERA_ZOOMDEFAULT,Angle=h[f][5]or CONST_BRIEFING.CAMERA_ANGLEDEFAULT}local nk=h[f][6]or he.Start.Position;he.End={Position=type(nk)~="table"and{nk,0}or nk,Rotation=h[f][7]or he.Start.Rotation,Zoom=h[f][8]or he.Start.Zoom,Angle=h[f][9]or he.Start.Angle}table.insert(self.Briefing[q][nb].Animations,he)else he.AnimFrames={}for bO=2,#h[f]do table.insert(he.AnimFrames,h[f][bO])end end;table.insert(self.Briefing[q][nb].Animations,he)end end end;self.Briefing[q].PageAnimation=nil end end;function Lib.BriefingSystem.Global:TransformParallaxes(q)if self.Briefing[q].PageParallax then for g,h in pairs(self.Briefing[q].PageParallax)do local nb=self:GetPageIDByName(q,g)if nb~=0 then self.Briefing[q][nb].Parallax={}self.Briefing[q][nb].Parallax.Clear=h.Clear==true;for f=1,4,1 do if h[f]then local he={}he.Image=h[f][1]he.Interpolation=h[f].Interpolation;he.Duration=h[f][2]or 2*60;he.AnimData={}for bO=3,#h[f]do table.insert(he.AnimData,h[f][bO])end;self.Briefing[q][nb].Parallax[f]=he end end end end;self.Briefing[q].PageParallax=nil end end;function Lib.BriefingSystem.Global:NextPage(q)if self.Briefing[q]==nil then return end;self.Briefing[q].CurrentPage=self.Briefing[q].CurrentPage+1;local nb=self.Briefing[q].CurrentPage;if nb==-1 or nb==0 then self:EndBriefing(q)return end;local n7=self.Briefing[q][nb]if type(n7)=="table"then if nb<=#self.Briefing[q]then self.Briefing[q][nb].Started=Logic.GetTime()self.Briefing[q][nb].Duration=n7.Duration or-1;if self.Briefing[q][nb].Action then self.Briefing[q][nb]:Action()end;self:DisplayPage(q,nb)else self:EndBriefing(q)end elseif type(n7)=="number"or type(n7)=="string"then local aC=self:GetPageIDByName(q,self.Briefing[q][nb])self.Briefing[q].CurrentPage=aC-1;self:NextPage(q)else self:EndBriefing(q)end end;function Lib.BriefingSystem.Global:DisplayPage(q,nl)if self.Briefing[q]==nil then return end;local n7=self.Briefing[q][nl]if type(n7)=="table"then local nb=self.Briefing[q].CurrentPage;if n7.MC then for f=1,#n7.MC,1 do if type(n7.MC[f][3])=="function"then self.Briefing[q][nb].MC[f].Visible=n7.MC[f][3](q,nb,f)end end end end;SendReport(Report.BriefingPageShown,q,nl)end;function Lib.BriefingSystem.Global:SkipButtonPressed(q,nl)if not self.Briefing[q]then return end;local nb=self.Briefing[q].CurrentPage;if self.Briefing[q][nb].OnForward then self.Briefing[q][nb]:OnForward()end;self:NextPage(q)end;function Lib.BriefingSystem.Global:OnOptionSelected(q,nm)if self.Briefing[q]==nil then return end;local nb=self.Briefing[q].CurrentPage;if type(self.Briefing[q][nb])~="table"then return end;local n7=self.Briefing[q][nb]if n7.MC then local nn;for f=1,#n7.MC,1 do if n7.MC[f].ID==nm then nn=n7.MC[f]end end;if nn~=nil then local aC=nn[2]if type(nn[2])=="function"then aC=nn[2](q,nb,nm)end;self.Briefing[q][nb].MC.Selected=nn.ID;self.Briefing[q].CurrentPage=self:GetPageIDByName(q,aC)-1;self:NextPage(q)end end end;function Lib.BriefingSystem.Global:GetCurrentBriefing(q)return self.Briefing[q]end;function Lib.BriefingSystem.Global:GetCurrentBriefingPage(q)if self.Briefing[q]then local nb=self.Briefing[q].CurrentPage;return self.Briefing[q][nb]end end;function Lib.BriefingSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Briefing[q]~=nil then for f=1,#self.Briefing[q],1 do if type(self.Briefing[q][f])=="table"and self.Briefing[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.BriefingSystem.Global:CanStartBriefing(q)return self.Briefing[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.BriefingSystem.Local:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")self:OverrideThroneRoomFunctions()Lib.BriefingSystem.Global=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Local:OnSaveGameLoaded()end;function Lib.BriefingSystem.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then elseif aD==Report.BriefingStarted then self:StartBriefing(arg[1],arg[2],arg[3])elseif aD==Report.BriefingEnded then self:EndBriefing(arg[1],arg[2])elseif aD==Report.BriefingPageShown then self:DisplayPage(arg[1],arg[2])elseif aD==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Local:StartBriefing(q,no,n0)if GUI.GetPlayerID()~=q then return end;self.Briefing[q]=n0;self.Briefing[q].LastSkipButtonPressed=0;self.Briefing[q].CurrentPage=0;local dC,dD=Camera.RTS_GetLookAtPosition()local na=Camera.RTS_GetRotationAngle()local np=Camera.RTS_GetZoomFactor()local nq=Game.GameTimeGetFactor(q)self.Briefing[q].Backup={Camera={dC,dD,na,np},Speed=nq}DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)end;function Lib.BriefingSystem.Local:EndBriefing(q,no)if GUI.GetPlayerID()~=q then return end;local ni=self.Briefing[q]if ni.RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,ni.Backup.Speed)end;if ni.RestoreCamera then Camera.RTS_SetLookAtPosition(ni.Backup.Camera[1],ni.Backup.Camera[2])Camera.RTS_SetRotationAngle(ni.Backup.Camera[3])Camera.RTS_SetZoomFactor(ni.Backup.Camera[4])end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Briefing[q]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.BriefingSystem.Local:DisplayPage(q,nl)if GUI.GetPlayerID()~=q then return end;self.Briefing[q].AnimationQueue=self.Briefing[q].AnimationQueue or{}self.Briefing[q].ParallaxLayers=self.Briefing[q].ParallaxLayers or{}self.Briefing[q].CurrentPage=nl;if type(self.Briefing[q][nl])=="table"then self.Briefing[q][nl].Started=Logic.GetTime()self:SetPageFarClipPlane(q,nl)self:DisplayPageBars(q,nl)self:DisplayPageTitle(q,nl)self:DisplayPageText(q,nl)self:DisplayPageControls(q,nl)self:DisplayPageAnimation(q,nl)self:DisplayPageFader(q,nl)self:DisplayPageParallaxes(q,nl)if self.Briefing[q][nl].MC then self:DisplayPageOptionsDialog(q,nl)end end end;function Lib.BriefingSystem.Local:SetPageFarClipPlane(q,nl)ResetRenderDistance()local n7=self.Briefing[q][nl]if n7.FarClipPlane then SetRenderDistance(n7.FarClipPlane)end end;function Lib.BriefingSystem.Local:DisplayPageBars(q,nl)local n7=self.Briefing[q][nl]local nr=n7.BarOpacity~=nil and n7.BarOpacity or 1;local ns=255*nr;local nt=255*nr;local nu=n7.BigBars and 1 or 0;local nv=n7.BigBars and 0 or 1;if nr==0 then nu=0;nv=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",nu)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",nv)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",nu)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",nv)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,ns)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,ns)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,nt)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,nt)end;function Lib.BriefingSystem.Local:DisplayPageTitle(q,nl)local n7=self.Briefing[q][nl]local nw="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(nw,"")if n7.Title then local iz=ConvertPlaceholders(Localize(n7.Title))if iz:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then iz=XGUIEng.GetStringTableText(iz)end;if iz:sub(1,1)~="{"then iz="{@color:255,250,0,255}{center}"..iz end;XGUIEng.SetText(nw,iz)end end;function Lib.BriefingSystem.Local:DisplayPageText(q,nl)local n7=self.Briefing[q][nl]local nx="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(nx,"")if n7.Text then local cb=ConvertPlaceholders(Localize(n7.Text))if cb:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then cb=XGUIEng.GetStringTableText(cb)end;if cb:sub(1,1)~="{"then cb="{center}"..cb end;if not n7.BigBars then cb="{cr}{cr}{cr}"..cb end;XGUIEng.SetText(nx,cb)end end;function Lib.BriefingSystem.Local:DisplayPageControls(q,nl)local n7=self.Briefing[q][nl]local ny=1;ny=(n7.Duration==nil or n7.Duration==-1)and 1 or 0;if n7.DisableSkipping~=nil then ny=n7.DisableSkipping and 0 or 1 end;if n7.MC~=nil then ny=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",ny)end;function Lib.BriefingSystem.Local:DisplayPageAnimation(q,nl)local n7=self.Briefing[q][nl]if n7.Animations then if n7.Animations.Clear then self.Briefing[q].CurrentAnimation=nil;self.Briefing[q].AnimationQueue={}end;for f=1,#n7.Animations,1 do local nz=table.copy(n7.Animations[f])table.insert(self.Briefing[q].AnimationQueue,nz)end end end;function Lib.BriefingSystem.Local:DisplayPageFader(q,nl)local n7=self.Briefing[q][nl]g_Fade.To=n7.FaderAlpha or 0;local nA=n7.FadeIn;if nA then FadeIn(nA)end;local nB=n7.FadeOut;if nB then self.Briefing[q].FaderJob=RequestHiResJob(function(gE,nC)if Logic.GetTimeMs()>gE-nC*1000 then FadeOut(nC)return true end end,Logic.GetTimeMs()+(n7.Duration or 0)*1000,nB)end end;function Lib.BriefingSystem.Local:DisplayPageParallaxes(q,nl)local n7=self.Briefing[q][nl]if n7.Parallax then if n7.Parallax.Clear then for f=1,#self.ParallaxWidgets do XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)end;self.Briefing[q].ParallaxLayers={}end;for f=1,4,1 do if n7.Parallax[f]then local nz=table.copy(n7.Parallax[f])nz.Started=XGUIEng.GetSystemTime()self.Briefing[q].ParallaxLayers[f]=nz end end end end;function Lib.BriefingSystem.Local:ControlParallaxes(q)if self.Briefing[q].ParallaxLayers then local gx=XGUIEng.GetSystemTime()for cu,bd in pairs(self.Briefing[q].ParallaxLayers)do local hx=self.ParallaxWidgets[cu][1]local fs={GUI.GetScreenSize()}local m1=math.min(math.lerp(bd.Started,gx,bd.Duration),1)if bd.Interpolation then m1=math.min(bd:Interpolation(gx),1)end;local nD=bd.Image;if type(nD)=="function"then nD=bd:Image(m1,bd.Started,gx,bd.Duration)end;if type(nD)=="table"then local nE=math.min(math.ceil(#nD*m1),#nD)nD=nD[nE]end;local ex,ez,ey,eA,nF=0,0,1,1,255;if bd.AnimData then local nG=#bd.AnimData;if bd.AnimData[3]and type(bd.AnimData[3])~="table"then ex,ez,ey,eA,nF=unpack(bd.AnimData)else if#bd.AnimData>=4 then local nH=math.floor(m1*(nG-3))+1;nH=math.min(nH,nG-3)ex,ez,ey,eA,nF=self:CubicParallaxInterpolation(bd.AnimData[nH],bd.AnimData[nH+1],bd.AnimData[nH+2],bd.AnimData[nH+3],m1)elseif#bd.AnimData>=2 then local nH=math.floor(m1*(nG-1))+1;nH=math.min(nH,nG-1)ex,ez,ey,eA,nF=self:LinearParallaxInterpolation(bd.AnimData[nH],bd.AnimData[nH+1],m1)end end end;if fs[1]/fs[2]<1.6 then ex=ex+ex/0.125;ey=ey-ey*0.125 end;XGUIEng.SetMaterialAlpha(hx,1,nF or 255)XGUIEng.SetMaterialTexture(hx,1,nD)XGUIEng.SetMaterialUV(hx,1,ex,ez,ey,eA)end end end;function Lib.BriefingSystem.Local:DisplayPageOptionsDialog(q,nl)local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local nI={GUI.GetScreenSize()}local n7=self.Briefing[q][nl]local nJ=XGUIEng.GetWidgetID(hx.."/ListBox")self.Briefing[q].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(hx)}XGUIEng.ListBoxPopAll(nJ)self.Briefing[q].MCSelectionOptionsMap={}for f=1,#n7.MC,1 do if n7.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(nJ,n7.MC[f][1])table.insert(self.Briefing[q].MCSelectionOptionsMap,n7.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(nJ,0)local nK={XGUIEng.GetWidgetScreenSize(hx)}local nL=math.ceil(nI[1]/2-nK[1]/2)local nM=math.ceil(nI[2]-(nK[2]-10))if n7.Text and n7.Text~=""then nM=math.ceil(nI[2]/2-nK[2]/2)end;XGUIEng.SetWidgetScreenPosition(hx,nL,nM)XGUIEng.PushPage(hx,false)XGUIEng.ShowWidget(hx,1)self.Briefing[q].MCSelectionIsShown=true end;function Lib.BriefingSystem.Local:OnOptionSelected(q)local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local V=self.Briefing[q].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(hx,V[1],V[2])XGUIEng.ShowWidget(hx,0)XGUIEng.PopPage()local kn=XGUIEng.ListBoxGetSelectedIndex(hx.."/ListBox")+1;local nN=self.Briefing[q].MCSelectionOptionsMap[kn]SendReport(Report.BriefingOptionSelected,q,nN)SendReportToGlobal(Report.BriefingOptionSelected,q,nN)end;function Lib.BriefingSystem.Local:ThroneRoomCameraControl(q,n6)if n6 then self:ControlCameraAnimation(q)local nO=type(n6)=="table"and n6.FOV or 42;local nP,nQ,nR,nS,nT,nU=0,0,0,0,0,0;local nV=self.Briefing[q].CurrentAnimation;if nV and nV.AnimFrames then if#nV.AnimFrames>=4 then local m1=self:GetInterpolationFactor(q)local nG=#nV.AnimFrames;local nH=math.floor(m1*(nG-3))+1;nH=math.min(nH,#nV.AnimFrames-3)nP,nQ,nR,nS,nT,nU=self:CubicInterpolation(nV.AnimFrames[nH],nV.AnimFrames[nH+1],nV.AnimFrames[nH+2],nV.AnimFrames[nH+3],m1)elseif#nV.AnimFrames>=2 then local m1=self:GetInterpolationFactor(q)local nG=#nV.AnimFrames;local nH=math.floor(m1*(nG-1))+1;nH=math.min(nH,#nV.AnimFrames-1)nP,nQ,nR,nS,nT,nU=self:LinearInterpolation(nV.AnimFrames[nH],nV.AnimFrames[nH+1],m1)else nP,nQ,nR,nS,nT,nU=unpack(nV.AnimFrames[1])end else nP,nQ,nR=self:GetPagePosition(q)nS,nT,nU=self:GetPageLookAt(q)if nP and not nS then nS,nT,nU,nP,nQ,nR,nO=self:GetCameraProperties(q,nO)end end;Camera.ThroneRoom_SetPosition(nP,nQ,nR)Camera.ThroneRoom_SetLookAt(nS,nT,nU)Camera.ThroneRoom_SetFOV(nO)self:ControlParallaxes(q)if self.Briefing[q].MCSelectionIsShown then local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(hx)==0 then self.Briefing[q].MCSelectionIsShown=false;self:OnOptionSelected(q)end end;local nW=Localize(Lib.BriefingSystem.Text.NextButton)local nb=self.Briefing[q].CurrentPage;if nb==#self.Briefing[q]or self.Briefing[q][nb+1]==-1 then nW=Localize(Lib.BriefingSystem.Text.EndButton)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..nW)end end;function Lib.BriefingSystem.Local:ControlCameraAnimation(q)if self.Briefing[q].CurrentAnimation then local gx=XGUIEng.GetSystemTime()local nz=self.Briefing[q].CurrentAnimation;if gx>nz.Started+nz.Duration then if#self.Briefing[q].AnimationQueue>0 then self.Briefing[q].CurrentAnimation=nil end end end;if self.Briefing[q].CurrentAnimation==nil then if self.Briefing[q].AnimationQueue and#self.Briefing[q].AnimationQueue>0 then local nb=self.Briefing[q].CurrentPage;local n7=self.Briefing[q][nb]local fn=table.remove(self.Briefing[q].AnimationQueue,1)if n7 and n7.Animations and n7.Animations.Repeat then table.insert(self.Briefing[q].AnimationQueue,fn)end;fn.Started=XGUIEng.GetSystemTime()self.Briefing[q].CurrentAnimation=fn end end end;function Lib.BriefingSystem.Local:GetPagePosition(q)local I,J,K=0,0,0;local V,nX;if self.Briefing[q].CurrentAnimation then V=self.Briefing[q].CurrentAnimation.Start.Position;nX=self.Briefing[q].CurrentAnimation.End;I,J,K=self:ConvertPosition(V)if nX then local nY,nZ,n_=self:ConvertPosition(nX.Position)if nY and nZ and n_ then I=I+(nY-I)*self:GetInterpolationFactor(q)J=J+(nZ-J)*self:GetInterpolationFactor(q)K=K+(n_-K)*self:GetInterpolationFactor(q)end end end;return I,J,K end;function Lib.BriefingSystem.Local:GetPageLookAt(q)local LookAt,nX;if self.Briefing[q].CurrentAnimation then LookAt=self.Briefing[q].CurrentAnimation.Start.LookAt;nX=self.Briefing[q].CurrentAnimation.End end;local I,J,K=self:ConvertPosition(LookAt)if nX and I then local nY,nZ,n_=self:ConvertPosition(nX.LookAt)if nY and nZ and n_ then I=I+(nY-I)*self:GetInterpolationFactor(q)J=J+(nZ-J)*self:GetInterpolationFactor(q)K=K+(n_-K)*self:GetInterpolationFactor(q)end end;return I,J,K end;function Lib.BriefingSystem.Local:ConvertPosition(G)local I,J,K;if G and type(G)=="table"then if G.X then I=G.X;J=G.Y;K=G.Z elseif G[3]then I=G[1]J=G[2]K=G[3]else I,J,K=Logic.EntityGetPos(GetID(G[1]))K=K+(G[2]or 0)end end;return I,J,K end;function Lib.BriefingSystem.Local:GetInterpolationFactor(q)if self.Briefing[q].CurrentAnimation then local gx=XGUIEng.GetSystemTime()if self.Briefing[q].CurrentAnimation.Interpolation then return self.Briefing[q].CurrentAnimation:Interpolation(gx)end;local m1=math.lerp(self.Briefing[q].CurrentAnimation.Started,gx,self.Briefing[q].CurrentAnimation.Duration)return math.min(m1,1)end;return 1 end;function Lib.BriefingSystem.Local:LinearInterpolation(L,M,o0)local V={PX=(1-o0)*L[1]+o0*M[1],PY=(1-o0)*L[2]+o0*M[2],PZ=(1-o0)*L[3]+o0*M[3]}local LookAt={LX=(1-o0)*L[4]+o0*M[4],LY=(1-o0)*L[5]+o0*M[5],LZ=(1-o0)*L[6]+o0*M[6]}return V.PX,V.PY,V.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:LinearParallaxInterpolation(o1,o2,o0)o0=math.max(0,math.min(1,o0))local o3={U0=(1-o0)*o1[1]+o0*o2[1],V0=(1-o0)*o1[2]+o0*o2[2],U1=(1-o0)*o1[3]+o0*o2[3],V1=(1-o0)*o1[4]+o0*o2[4],A=(1-o0)*o1[5]+o0*o2[5]}return o3.U0,o3.V0,o3.U1,o3.V1,o3.A end;function Lib.BriefingSystem.Local:CubicInterpolation(L,M,o4,o5,o0)local V={PX=0.5*(2*M[1]+(o4[1]-L[1])*o0+(2*L[1]-5*M[1]+4*o4[1]-o5[1])*o0^2+(3*(M[1]-o4[1])+o5[1]-L[1])*o0^3),PY=0.5*(2*M[2]+(o4[2]-L[2])*o0+(2*L[2]-5*M[2]+4*o4[2]-o5[2])*o0^2+(3*(M[2]-o4[2])+o5[2]-L[2])*o0^3),PZ=0.5*(2*M[3]+(o4[3]-L[3])*o0+(2*L[3]-5*M[3]+4*o4[3]-o5[3])*o0^2+(3*(M[3]-o4[3])+o5[3]-L[3])*o0^3)}local LookAt={LX=0.5*(2*M[1]+(o4[4]-L[4])*o0+(2*L[4]-5*M[4]+4*o4[4]-o5[4])*o0^2+(3*(M[4]-o4[4])+o5[4]-L[4])*o0^3),LY=0.5*(2*M[5]+(o4[5]-L[5])*o0+(2*L[5]-5*M[5]+4*o4[5]-o5[5])*o0^2+(3*(M[5]-o4[5])+o5[5]-L[5])*o0^3),LZ=0.5*(2*M[6]+(o4[6]-L[6])*o0+(2*L[6]-5*M[6]+4*o4[6]-o5[6])*o0^2+(3*(M[6]-o4[6])+o5[6]-L[6])*o0^3)}return V.PX,V.PY,V.PZ,LookAt.LX,LookAt.LY,LookAt.LZ end;function Lib.BriefingSystem.Local:CubicParallaxInterpolation(o1,o2,o6,o7,o0)o0=math.max(0,math.min(1,o0))local o3={U0=0.5*(2*o2[1]+(o6[1]-o1[1])*o0+(2*o1[1]-5*o2[1]+4*o6[1]-o7[1])*o0^2+(3*(o2[1]-o6[1])+o7[1]-o1[1])*o0^3),V0=0.5*(2*o2[2]+(o6[2]-o1[2])*o0+(2*o1[2]-5*o2[2]+4*o6[2]-o7[2])*o0^2+(3*(o2[2]-o6[2])+o7[2]-o1[2])*o0^3),U1=0.5*(2*o2[3]+(o6[3]-o1[3])*o0+(2*o1[3]-5*o2[3]+4*o6[3]-o7[3])*o0^2+(3*(o2[3]-o6[3])+o7[3]-o1[3])*o0^3),V1=0.5*(2*o2[4]+(o6[4]-o1[4])*o0+(2*o1[4]-5*o2[4]+4*o6[4]-o7[4])*o0^2+(3*(o2[4]-o6[4])+o7[4]-o1[4])*o0^3),A=0.5*(2*o2[5]+(o6[5]-o1[5])*o0+(2*o1[5]-5*o2[5]+4*o6[5]-o7[5])*o0^2+(3*(o2[5]-o6[5])+o7[5]-o1[5])*o0^3)}return o3.U0,o3.V0,o3.U1,o3.V1,o3.A end;function Lib.BriefingSystem.Local:GetCameraProperties(q,o8)local o9,nX;if self.Briefing[q].CurrentAnimation then o9=self.Briefing[q].CurrentAnimation.Start;nX=self.Briefing[q].CurrentAnimation.End end;local oa=o9.Position;local ob=nX and nX.Position or o9.Position;local oc=o9.Rotation;local od=nX and nX.Rotation or o9.Rotation;local oe=o9.Angle;local of=nX and nX.Angle or o9.Angle;local og=o9.Zoom;local oh=nX and nX.Zoom or o9.Zoom;local oi=self:GetInterpolationFactor(q)local oj,ok,ol=self:ConvertPosition(oa)local om,on,oo=self:ConvertPosition(ob)local op=oj+(om-oj)*oi;local oq=ok+(on-ok)*oi;local os=ol+(oo-ol)*oi;local ot=og+(oh-og)*oi;local ou=oe+(of-oe)*oi;local fe=oc+(od-oc)*oi;local ov=ot*math.cos(math.rad(ou))local ow=op+math.cos(math.rad(fe-90))*ov;local ox=oq+math.sin(math.rad(fe-90))*ov;local oy=os+ot*math.sin(math.rad(ou))return op,oq,os,ow,ox,oy,o8 end;function Lib.BriefingSystem.Local:SkipButtonPressed(q,n6)if not self.Briefing[q]then return end;if self.Briefing[q].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Briefing[q].LastSkipButtonPressed=Logic.GetTimeMs()end end;function Lib.BriefingSystem.Local:GetCurrentBriefing(q)return self.Briefing[q]end;function Lib.BriefingSystem.Local:GetCurrentBriefingPage(q)if self.Briefing[q]then local nb=self.Briefing[q].CurrentPage;return self.Briefing[q][nb]end end;function Lib.BriefingSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Briefing[q]~=nil then for f=1,#self.Briefing[q],1 do if type(self.Briefing[q][f])=="table"and self.Briefing[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.BriefingSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneRoomLeftClick=GameCallback_Camera_ThroneRoomLeftClick;GameCallback_Camera_ThroneRoomLeftClick=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneRoomLeftClick(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingLeftClick,q)SendReport(Report.BriefingLeftClick,q)end end;self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingSkipButtonPressed,q)SendReport(Report.BriefingSkipButtonPressed,q)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.BriefingSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local ni=Lib.BriefingSystem.Local:GetCurrentBriefing(q)if ni~=nil then Lib.BriefingSystem.Local:ThroneRoomCameraControl(q,Lib.BriefingSystem.Local:GetCurrentBriefingPage(q))end end end;GameCallback_Escape_Orig_BriefingSystem=GameCallback_Escape;GameCallback_Escape=function()if Lib.BriefingSystem.Local.Briefing[GUI.GetPlayerID()]then return end;GameCallback_Escape_Orig_BriefingSystem()end end;function Lib.BriefingSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local oz,oA=GUI.GetScreenSize()function EndScreen_ExitGame()end;function MissionFadeInEndScreen()end;for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],1)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],1)XGUIEng.PushPage(self.ParallaxWidgets[f][2],false)XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)XGUIEng.SetMaterialUV(self.ParallaxWidgets[f][1],1,0,0,1,1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo",false)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoom/KnightInfo/LeftFrame",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local I,J=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",I,65*oA/1080)XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Objectives",2,0,2000,20)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.SetText("/InGame/ThroneRoom/KnightInfo/Text"," ")XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Text",200,300,1000,10)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Briefing[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Briefing[q].EnableSky then Display.SetRenderSky(1)end;if not self.Briefing[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.BriefingSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",1)for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],0)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],0)XGUIEng.PopPage()end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)ResetRenderDistance()end;function Lib.BriefingSystem.Local:IsChangingGraphicsPermited()return self.Config.DoAlternateGraphics==true end;function Lib.BriefingSystem.Local:RequestAlternateGraphics()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.BriefingSystem.Text.Request.Title,Lib.BriefingSystem.Text.Request.Text,function(hc)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=hc==true end,false)end;RegisterModule(Lib.BriefingSystem.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/CutsceneSystem_API")function StartCutscene(oB,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(oB)=="table","Cutscene must be a table!")assert(#oB>0,"Cutscene does not contain pages!")for f=1,#oB do assert(type(oB[f])~="table"or oB[f].__Legit,"A page is not initialized!")end;if oB.EnableSky==nil then oB.EnableSky=true end;if oB.EnableFoW==nil then oB.EnableFoW=false end;if oB.EnableGlobalImmortality==nil then oB.EnableGlobalImmortality=true end;if oB.EnableBorderPins==nil then oB.EnableBorderPins=false end;Lib.CutsceneSystem.Global:StartCutscene(r,n,oB)end;API.StartCutscene=StartCutscene;function RequestCutsceneAlternateGraphics()if not GUI then ExecuteLocal("RequestCutsceneAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestCutsceneAlternateGraphics=RequestCutsceneAlternateGraphics;function IsCutsceneActive(q)if not IsLocalScript()then return Lib.CutsceneSystem.Global:GetCurrentCutscene(q)~=nil end;return Lib.CutsceneSystem.Local:GetCurrentCutscene(q)~=nil end;API.IsCutsceneActive=IsCutsceneActive;function AddCutscenePages(oB)Lib.CutsceneSystem.Global:CreateCutsceneGetPage(oB)Lib.CutsceneSystem.Global:CreateCutsceneAddPage(oB)local AP=function(n6)return oB:AddPage(n6)end;return AP end;API.AddCutscenePages=AddCutscenePages;function AP(f7)assert(false)end;Lib.Register("module/information/CutsceneSystem_Text")Lib.CutsceneSystem.Text={FastForwardActivate={de="Beschleunigen",en="Fast Forward",fr="Accélérer"},FastForwardDeactivate={de="Zurücksetzen",en="Normal Speed",fr="Réinitialiser"},FastFormardMessage={de="SCHNELLER VORLAUF",en="FAST FORWARD",fr="AVANCÉ RAPIDE"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.CutsceneSystem=Lib.CutsceneSystem or{}Lib.CutsceneSystem.Name="CutsceneSystem"Lib.CutsceneSystem.Global={Cutscene={},CutsceneQueue={},CutsceneCounter=0}Lib.CutsceneSystem.Local={Config={DoAlternateGraphics=true},Cutscene={}}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/CutsceneSystem_Text")Lib.Require("module/information/CutsceneSystem_API")Lib.Register("module/information/CutsceneSystem")CinematicEventTypes.Cutscene=3;function Lib.CutsceneSystem.Global:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")for f=1,8 do self.CutsceneQueue[f]={}end;RequestHiResJob(function()Lib.CutsceneSystem.Global:UpdateQueue()end)Lib.CutsceneSystem.Local=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Global:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then elseif aD==Report.CutsceneStarted then elseif aD==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aD==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aD==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aD==Report.CutsceneSkipButtonPressed then SendReportToLocal(Report.CutsceneSkipButtonPressed,arg[1])elseif aD==Report.CutscenePageShown then SendReportToLocal(Report.CutscenePageShown,arg[1],arg[2],arg[3])end end;function Lib.CutsceneSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartCutscene(f)then local fn=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fn and fn[1]==CinematicEventTypes.Cutscene then self:NextCutscene(f)end end end end;function Lib.CutsceneSystem.Global:CreateCutsceneGetPage(oB)oB.GetPage=function(self,q,nc)local al=Lib.CutsceneSystem.Global:GetPageIDByName(q,nc)return Lib.CutsceneSystem.Global.Cutscene[q][al]end end;function Lib.CutsceneSystem.Global:CreateCutsceneAddPage(oB)oB.AddPage=function(self,n6)if type(n6)=="table"then n6.__Legit=true;n6.Title=Localize(n6.Title)if n6.Text then n6.Text=Localize(n6.Text)end;if n6.Lines then n6.Lines=Localize(n6.Lines)end;if not n6.Lines and not n6.Text then assert(false,"Missing Lines or Text attribute!")return end;if n6.BigBars==nil then n6.BigBars=false end end;table.insert(oB,n6)return n6 end end;function Lib.CutsceneSystem.Global:StartCutscene(r,q,f7)self.CutsceneQueue[q]=self.CutsceneQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Cutscene,r,f7)end;function Lib.CutsceneSystem.Global:EndCutscene(q)Logic.SetGlobalInvulnerability(0)SendReportToLocal(Report.CutsceneEnded,q)if self.Cutscene[q].Finished then self.Cutscene[q]:Finished()end;FinishCinematicEvent(self.Cutscene[q].Name,q)self.Cutscene[q]=nil end;function Lib.CutsceneSystem.Global:NextCutscene(q)if self:CanStartCutscene(q)then local oC=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(oC[1]==CinematicEventTypes.Cutscene)StartCinematicEvent(oC[2],q)local oD=oC[3]oD.Name=oC[2]oD.PlayerID=q;oD.BarOpacity=oD.BarOpacity or 1;oD.CurrentPage=0;self.Cutscene[q]=oD;if oD.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Cutscene[q].Starting then self.Cutscene[q]:Starting()end;SendReportToLocal(Report.CutsceneStarted,q,oD.Name,oD)SendReport(Report.CutsceneStarted,q,oD.Name)end end;function Lib.CutsceneSystem.Global:StartCutsceneFlight(q,nl,oE)if self.Cutscene[q]==nil then return end;self.Cutscene[q][nl].Duration=oE;if self.Cutscene[q][nl].Action then self.Cutscene[q][nl]:Action()end;SendReportToLocal(Report.CutsceneFlightStarted,q,nl,oE)end;function Lib.CutsceneSystem.Global:EndCutsceneFlight(q,nl)if self.Cutscene[q]==nil then return end;SendReportToLocal(Report.CutsceneFlightEnded,q,nl)end;function Lib.CutsceneSystem.Global:DisplayPage(q,nl)if self.Cutscene[q]==nil then return end;SendReportToLocal(Report.CutscenePageShown,q,nl)end;function Lib.CutsceneSystem.Global:GetCurrentCutscene(q)return self.Cutscene[q]end;function Lib.CutsceneSystem.Global:GetCurrentCutscenePage(q)if self.Cutscene[q]then local nb=self.Cutscene[q].CurrentPage;return self.Cutscene[q][nb]end end;function Lib.CutsceneSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Cutscene[q]~=nil then for f=1,#self.Cutscene[q],1 do if type(self.Cutscene[q][f])=="table"and self.Cutscene[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.CutsceneSystem.Global:CanStartCutscene(q)return self.Cutscene[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.CutsceneSystem.Local:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")self:OverrideThroneRoomFunctions()Lib.CutsceneSystem.Global=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Local:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then elseif aD==Report.CutsceneStarted then self:StartCutscene(arg[1],arg[2],arg[3])elseif aD==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aD==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aD==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aD==Report.CutsceneSkipButtonPressed then self:SkipButtonPressed(arg[1])elseif aD==Report.CutscenePageShown then end end;function Lib.CutsceneSystem.Local:StartCutscene(q,oF,oB)if GUI.GetPlayerID()~=q then return end;self.Cutscene[q]=oB;self.Cutscene[q].LastSkipButtonPressed=0;self.Cutscene[q].CurrentPage=0;DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)self:NextFlight(q)end;function Lib.CutsceneSystem.Local:EndCutscene(q)if GUI.GetPlayerID()~=q then return end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Cutscene[q]=nil end;function Lib.CutsceneSystem.Local:NextFlight(q)if self.Cutscene[q]then self.Cutscene[q].CurrentPage=self.Cutscene[q].CurrentPage+1;local nb=self.Cutscene[q].CurrentPage;if self.Cutscene[q][nb]then local oG=self.Cutscene[q][nb].Flight;if Camera.IsValidCutscene(oG)then if GUI.GetPlayerID()==q then Camera.StartCutscene(oG)end else error("Lib.CutsceneSystem.Local:NextFlight: %s is an invalid flight!",tostring(oG))self:PropagateCutsceneEnded(q)end else self:PropagateCutsceneEnded(q)end end end;function Lib.CutsceneSystem.Local:PropagateCutsceneEnded(q)if not self.Cutscene[q]then return end;SendReportToGlobal(Report.CutsceneEnded,q)end;function Lib.CutsceneSystem.Local:FlightStarted(oE)local n=GUI.GetPlayerID()if self.Cutscene[n]then local nb=self.Cutscene[n].CurrentPage;local n7=self.Cutscene[n][nb]if n7.FarClipPlane then SetRenderDistance(n7.FarClipPlane)end;SendReportToGlobal(Report.CutsceneFlightStarted,n,nb,oE)end end;CutsceneFlightStarted=function(oE)Lib.CutsceneSystem.Local:FlightStarted(oE)end;function Lib.CutsceneSystem.Local:StartCutsceneFlight(q,nl,oE)if self.Cutscene[q]==nil then return end;self:DisplayPage(q,nl,oE)end;function Lib.CutsceneSystem.Local:FlightFinished()local n=GUI.GetPlayerID()if self.Cutscene[n]then local nb=self.Cutscene[n].CurrentPage;SendReportToGlobal(Report.CutsceneFlightEnded,n,nb)end end;CutsceneFlightFinished=function()Lib.CutsceneSystem.Local:FlightFinished()end;function Lib.CutsceneSystem.Local:EndCutsceneFlight(q,nl)if self.Cutscene[q]==nil then return end;self:NextFlight(q)end;function Lib.CutsceneSystem.Local:DisplayPage(q,nl,oE)if GUI.GetPlayerID()~=q then return end;self.Cutscene[q].AnimationQueue=self.Cutscene[q].AnimationQueue or{}self.Cutscene[q].CurrentPage=nl;if type(self.Cutscene[q][nl])=="table"then self.Cutscene[q][nl].Started=Logic.GetTime()self.Cutscene[q][nl].Duration=oE;ResetRenderDistance()self:DisplayPageBars(q,nl)self:DisplayPageTitle(q,nl)self:DisplayPageText(q,nl)self:DisplayPageControls(q,nl)self:DisplayPageFader(q,nl)SendReportToGlobal(Report.CutscenePageShown,q,nl,oE)end end;function Lib.CutsceneSystem.Local:DisplayPageBars(q,nl)local n7=self.Cutscene[q][nl]local nr=n7.Opacity~=nil and n7.Opacity or 1;local ns=255*nr;local nt=255*nr;local nu=n7.BigBars and 1 or 0;local nv=n7.BigBars and 0 or 1;if nr==0 then nu=0;nv=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",nu)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",nv)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",nu)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",nv)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,ns)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,ns)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,nt)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,nt)end;function Lib.CutsceneSystem.Local:DisplayPageTitle(q,nl)local n7=self.Cutscene[q][nl]local nw="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(nw,"")if n7.Title then local iz=ConvertPlaceholders(Localize(n7.Title))if iz:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then iz=XGUIEng.GetStringTableText(iz)end;if iz:sub(1,1)~="{"then iz="{@color:255,250,0,255}{center}"..iz end;XGUIEng.SetText(nw,iz)end end;function Lib.CutsceneSystem.Local:DisplayPageText(q,nl)local n7=self.Cutscene[q][nl]local nx="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(nx,"Bockwurst")if n7.Text then local cb=ConvertPlaceholders(Localize(n7.Text))if cb:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then cb=XGUIEng.GetStringTableText(cb)end;if cb:sub(1,1)~="{"then cb="{center}"..cb end;if not n7.BigBars then cb="{cr}{cr}{cr}"..cb end;XGUIEng.SetText(nx,cb)end end;function Lib.CutsceneSystem.Local:DisplayPageControls(q,nl)local n7=self.Cutscene[q][nl]local ny=1;if n7.DisableSkipping==true then self.Cutscene[q].FastForward=false;Game.GameTimeSetFactor(q,1)ny=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",ny)end;function Lib.CutsceneSystem.Local:DisplayPageFader(q,nl)local n7=self.Cutscene[q][nl]g_Fade.To=n7.FaderAlpha or 0;local nA=n7.FadeIn;if nA then FadeIn(nA)end;local nB=n7.FadeOut;if nB then self.Cutscene[q].FaderJob=RequestHiResJob(function(gE,nC)if Logic.GetTimeMs()>gE-nC*1000 then FadeOut(nC)return true end end,n7.Started*1000+n7.Duration*100,nB)end end;function Lib.CutsceneSystem.Local:ThroneRoomCameraControl(q,n6)if n6 then if n6.DisableSkipping then XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")return end;local nW=Localize(Lib.CutsceneSystem.Text.FastForwardActivate)if self.Cutscene[q].FastForward then nW=Localize(Lib.CutsceneSystem.Text.FastForwardDeactivate)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..nW)if self.Cutscene[q].FastForward then local oH=GetSecondsRealTime()if not self.Cutscene[q].FastForwardRealTime then self.Cutscene[q].FastForwardRealTime=oH end;if self.Cutscene[q].FastForwardRealTime<oH then self.Cutscene[q].FastForwardIndent=(self.Cutscene[q].FastForwardIndent or 0)+1;if self.Cutscene[q].FastForwardIndent>4 then self.Cutscene[q].FastForwardIndent=1 end;self.Cutscene[q].FastForwardRealTime=oH end;local cb="{cr}{cr}"..Localize(Lib.CutsceneSystem.Text.FastFormardMessage)local oI=string.rep("  ",self.Cutscene[q].FastForwardIndent or 0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",cb..oI..". . .")else XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")end end end;function Lib.CutsceneSystem.Local:SkipButtonPressed(q)if self.Cutscene[q]==nil then return end;if self.Cutscene[q].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Cutscene[q].LastSkipButtonPressed=Logic.GetTimeMs()if not Framework.IsNetworkGame()then if self.Cutscene[q].FastForward then self.Cutscene[q].FastForward=false;Game.GameTimeSetFactor(q,1)else self.Cutscene[q].FastForward=true;Game.GameTimeSetFactor(q,10)end end end end;function Lib.CutsceneSystem.Local:GetCurrentCutscene(q)return self.Cutscene[q]end;function Lib.CutsceneSystem.Local:GetCurrentCutscenePage(q)if self.Cutscene[q]then local nb=self.Cutscene[q].CurrentPage;return self.Cutscene[q][nb]end end;function Lib.CutsceneSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Cutscene[q]~=nil then for f=1,#self.Cutscene[q],1 do if type(self.Cutscene[q][f])=="table"and self.Cutscene[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.CutsceneSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_SkipButtonPressed=GameCallback_Camera_SkipButtonPressed;GameCallback_Camera_SkipButtonPressed=function(q)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_SkipButtonPressed(q)if q==GUI.GetPlayerID()then SendReportToGlobal(Report.CutsceneSkipButtonPressed,q)end end;self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.CutsceneSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local oD=Lib.CutsceneSystem.Local:GetCurrentCutscene(q)if oD~=nil then Lib.CutsceneSystem.Local:ThroneRoomCameraControl(q,Lib.CutsceneSystem.Local:GetCurrentCutscenePage(q))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.CutsceneSystem.Local.Cutscene[GUI.GetPlayerID()]then return end;Lib.CutsceneSystem.Local.Orig_GameCallback_Escape()end end;function Lib.CutsceneSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local oz,oA=GUI.GetScreenSize()XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Cutscene",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/LeftFrame",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local I,J=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",I,65*oA/1080)self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Cutscene[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Cutscene[q].EnableSky then Display.SetRenderSky(1)end;if not self.Cutscene[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=1;SetFaderAlpha(1)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.CutsceneSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")ResetRenderDistance()end;function Lib.CutsceneSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.CutsceneSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.CutsceneSystem.Text.Request.Title,Lib.CutsceneSystem.Text.Request.Text,function(hc)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=hc==true end,false)end;RegisterModule(Lib.CutsceneSystem.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/DialogSystem_API")function StartDialog(oJ,r,q)if GUI then return end;local n=q;if not n and not Framework.IsNetworkGame()then n=1 end;assert(r~=nil)assert(q~=nil)assert(type(oJ)=="table","Dialog must be a table!")assert(#oJ>0,"Dialog does not contain pages!")for f=1,#oJ do assert(type(oJ[f])~="table"or oJ[f].__Legit,"Page is not initialized!")end;if oJ.EnableSky==nil then oJ.EnableSky=true end;if oJ.EnableFoW==nil then oJ.EnableFoW=false end;if oJ.EnableGlobalImmortality==nil then oJ.EnableGlobalImmortality=true end;if oJ.EnableBorderPins==nil then oJ.EnableBorderPins=false end;if oJ.RestoreGameSpeed==nil then oJ.RestoreGameSpeed=true end;if oJ.RestoreCamera==nil then oJ.RestoreCamera=true end;Lib.DialogSystem.Global:StartDialog(r,n,oJ)end;API.StartDialog=StartDialog;function RequestDialogAlternateGraphics()if not GUI then ExecuteLocal("RequestDialogAlternateGraphics()")return end;Lib.DialogSystem.Local:RequestAlternateGraphics()end;API.RequestDialogAlternateGraphics=RequestDialogAlternateGraphics;function IsDialogActive(q)if not IsLocalScript()then return Lib.DialogSystem.Global:GetCurrentDialog(q)~=nil end;return Lib.DialogSystem.Local:GetCurrentDialog(q)~=nil end;API.IsDialogActive=IsDialogActive;function AddDialogPages(oJ)Lib.DialogSystem.Global:CreateDialogGetPage(oJ)Lib.DialogSystem.Global:CreateDialogAddPage(oJ)Lib.DialogSystem.Global:CreateDialogAddMCPage(oJ)Lib.DialogSystem.Global:CreateDialogAddRedirect(oJ)local AP=function(n6)local n7;if type(n6)=="table"then if n6.MC then n7=oJ:AddMCPage(n6)else n7=oJ:AddPage(n6)end else n7=oJ:AddRedirect(n6)end;return n7 end;local ASP=function(...)if type(arg[1])~="number"then Name=table.remove(arg,1)end;local oK=table.remove(arg,1)local V=table.remove(arg,1)local iz=table.remove(arg,1)local cb=table.remove(arg,1)local oL=table.remove(arg,1)local ha;if type(arg[1])=="function"then ha=table.remove(arg,1)end;return oJ:AddPage{Name=Name,Title=iz,Text=cb,Actor=oK,Target=V,DialogCamera=oL==true,Action=ha}end;return AP,ASP end;API.AddDialogPages=AddDialogPages;function AP(f7)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/DialogSystem_Text")Lib.DialogSystem.Text={Continue={de="{cr}{cr}{azure}Weiter mit ESC",en="{cr}{cr}{azure}Continue with ESC",fr="{cr}{cr}{azure}Continuer avec ESC"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.DialogSystem=Lib.DialogSystem or{}Lib.DialogSystem.Name="DialogSystem"Lib.DialogSystem.Global={Dialog={},DialogQueue={},DialogCounter=0}Lib.DialogSystem.Local={Config={DoAlternateGraphics=true},Dialog={}}CONST_DIALOG={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/DialogSystem_Text")Lib.Require("module/information/DialogSystem_API")Lib.Register("module/information/DialogSystem")CinematicEventTypes.Dialog=5;function Lib.DialogSystem.Global:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")for f=1,8 do self.DialogQueue[f]={}end;RequestHiResJob(function()Lib.DialogSystem.Global:UpdateQueue()Lib.DialogSystem.Global:DialogExecutionController()end)Lib.DialogSystem.Local=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Global:OnSaveGameLoaded()end;function Lib.DialogSystem.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then self:SkipButtonPressed(arg[1])elseif aD==Report.DialogStarted then self:NextPage(arg[1])elseif aD==Report.DialogEnded then elseif aD==Report.DialogPageShown then elseif aD==Report.DialogOptionSelected then self:OnOptionSelected(arg[1],arg[2])end end;function Lib.DialogSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartDialog(f)then local fn=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if fn and fn[1]==CinematicEventTypes.Dialog then self:NextDialog(f)end end end end;function Lib.DialogSystem.Global:DialogExecutionController()for f=1,8 do if self.Dialog[f]then local nb=self.Dialog[f].CurrentPage;local n7=self.Dialog[f][nb]if n7 and not n7.MC and n7.Duration>0 and n7.AutoSkip then if n7.Started+n7.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.DialogSystem.Global:CreateDialogGetPage(oJ)oJ.GetPage=function(self,nc)local al=Lib.DialogSystem.Global:GetPageIDByName(oJ.PlayerID,nc)return Lib.DialogSystem.Global.Dialog[oJ.PlayerID][al]end end;function Lib.DialogSystem.Global:CreateDialogAddPage(oJ)oJ.AddPage=function(self,n6)self.Length=(self.Length or 0)+1;local nd="Page"..#self+1;if n6.Name then nd=n6.Name else n6.Name=nd end;n6.__Legit=true;n6.Text=Localize(n6.Text or"")n6.AutoSkip=false;if n6.Duration then if n6.Duration==-1 then n6.Duration=string.len(n6.Text or"")*CONST_DIALOG.TIMER_PER_CHAR;n6.Duration=n6.Duration<6 and 6 or n6.Duration<6 end;n6.AutoSkip=n6.Duration>0 end;if not n6.Rotation then n6.Rotation=CONST_DIALOG.CAMERA_ROTATIONDEFAULT;if n6.DialogCamera then n6.Rotation=CONST_DIALOG.DLGCAMERA_ROTATIONDEFAULT end;if n6.Position and type(n6.Position)~="table"then local al=GetID(n6.Position)local W=Logic.GetEntityOrientation(al)+90;n6.Rotation=W elseif n6.Target then local al=GetID(n6.Target)local W=Logic.GetEntityOrientation(al)+90;n6.Rotation=W end end;if not n6.Distance then n6.Distance=CONST_DIALOG.CAMERA_ZOOMDEFAULT;if n6.DialogCamera then n6.Distance=CONST_DIALOG.DLGCAMERA_ZOOMDEFAULT end end;if not n6.Angle then n6.Angle=CONST_DIALOG.CAMERA_ANGLEDEFAULT;if n6.DialogCamera then n6.Angle=CONST_DIALOG.DLGCAMERA_ANGLEDEFAULT end end;n6.GetSelected=function(self)return 0 end;table.insert(self,n6)return n6 end end;function Lib.DialogSystem.Global:CreateDialogAddMCPage(oJ)oJ.AddMCPage=function(self,n6)local n7=self:AddPage(n6)if n7.MC then for f=1,#n7.MC do n7.MC[f][1]=Localize(n7.MC[f][1])n7.MC[f].ID=n7.MC[f].ID or f end;n7.AutoSkip=false;n7.Duration=-1 end;n7.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;return n7 end end;function Lib.DialogSystem.Global:CreateDialogAddRedirect(oJ)oJ.AddRedirect=function(self,S)self.Length=(self.Length or 0)+1;local n7=S==nil and-1 or S;table.insert(self,n7)return n7 end end;function Lib.DialogSystem.Global:StartDialog(r,q,f7)self.DialogQueue[q]=self.DialogQueue[q]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(q,CinematicEventTypes.Dialog,r,f7)end;function Lib.DialogSystem.Global:EndDialog(q)Logic.SetGlobalInvulnerability(0)ExecuteLocal([[Lib.DialogSystem.Local:ResetTimerButtons(%d);
          Camera.RTS_FollowEntity(0);]],q)SendReport(Report.DialogEnded,q,self.Dialog[q].Name)SendReportToLocal(Report.DialogEnded,q,self.Dialog[q].Name,self.Dialog[q])if self.Dialog[q].Finished then self.Dialog[q]:Finished()end;FinishCinematicEvent(self.Dialog[q].Name,q)self.Dialog[q]=nil end;function Lib.DialogSystem.Global:NextDialog(q)if self:CanStartDialog(q)then local oM=Lib.UIEffects.Global:PopCinematicEventFromQueue(q)assert(oM[1]==CinematicEventTypes.Dialog)StartCinematicEvent(oM[2],q)local oL=oM[3]oL.Name=oM[2]oL.PlayerID=q;oL.LastSkipButtonPressed=0;oL.CurrentPage=0;self.Dialog[q]=oL;if oL.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Dialog[q].Starting then self.Dialog[q]:Starting()end;SendReportToLocal(Report.DialogStarted,q,self.Dialog[q].Name,self.Dialog[q])SendReport(Report.DialogStarted,q,self.Dialog[q].Name)end end;function Lib.DialogSystem.Global:NextPage(q)if self.Dialog[q]==nil then return end;self.Dialog[q].CurrentPage=self.Dialog[q].CurrentPage+1;local nb=self.Dialog[q].CurrentPage;if nb==-1 or nb==0 then self:EndDialog(q)return end;local n7=self.Dialog[q][nb]if type(n7)=="table"then if nb<=#self.Dialog[q]then self.Dialog[q][nb].Started=Logic.GetTime()self.Dialog[q][nb].Duration=n7.Duration or-1;if self.Dialog[q][nb].Action then self.Dialog[q][nb]:Action()end;self:DisplayPage(q,nb)else self:EndDialog(q)end elseif type(n7)=="number"or type(n7)=="string"then local aC=self:GetPageIDByName(q,self.Dialog[q][nb])self.Dialog[q].CurrentPage=aC-1;self:NextPage(q)else self:EndDialog(q)end end;function Lib.DialogSystem.Global:DisplayPage(q,nl)if self.Dialog[q]==nil then return end;local n7=self.Dialog[q][nl]if type(n7)=="table"then local nb=self.Dialog[q].CurrentPage;if n7.MC then for f=1,#n7.MC,1 do if type(n7.MC[f][3])=="function"then self.Dialog[q][nb].MC[f].Visible=n7.MC[f][3](q,nb,f)end end end end;SendReport(Report.DialogPageShown,q,nl)SendReportToLocal(Report.DialogPageShown,q,nl,n7)end;function Lib.DialogSystem.Global:SkipButtonPressed(q,nl)if not self.Dialog[q]then return end;if self.Dialog[q].LastSkipButtonPressed+500>Logic.GetTimeMs()then return end;local nb=self.Dialog[q].CurrentPage;if self.Dialog[q][nb].AutoSkip or self.Dialog[q][nb].MC then return end;if self.Dialog[q][nb].OnForward then self.Dialog[q][nb]:OnForward()end;self.Dialog[q].LastSkipButtonPressed=Logic.GetTimeMs()self:NextPage(q)end;function Lib.DialogSystem.Global:OnOptionSelected(q,nm)if self.Dialog[q]==nil then return end;local nb=self.Dialog[q].CurrentPage;if type(self.Dialog[q][nb])~="table"then return end;local n7=self.Dialog[q][nb]if n7.MC then local nn;for f=1,#n7.MC,1 do if n7.MC[f].ID==nm then nn=n7.MC[f]end end;if nn~=nil then local aC=nn[2]if type(nn[2])=="function"then aC=nn[2](q,nb,nm)end;self.Dialog[q][nb].MC.Selected=nn.ID;self.Dialog[q].CurrentPage=self:GetPageIDByName(q,aC)-1;self:NextPage(q)end end end;function Lib.DialogSystem.Global:GetCurrentDialog(q)return self.Dialog[q]end;function Lib.DialogSystem.Global:GetCurrentDialogPage(q)if self.Dialog[q]then local nb=self.Dialog[q].CurrentPage;return self.Dialog[q][nb]end end;function Lib.DialogSystem.Global:GetPageIDByName(q,r)if type(r)=="string"then if self.Dialog[q]~=nil then for f=1,#self.Dialog[q],1 do if type(self.Dialog[q][f])=="table"and self.Dialog[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.DialogSystem.Global:CanStartDialog(q)return self.Dialog[q]==nil and not IsCinematicEventActive(q)and self.LoadscreenClosed end;function Lib.DialogSystem.Local:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")self:OverrideThroneRoomFunctions()Lib.DialogSystem.Global=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Local:OnSaveGameLoaded()end;function Lib.DialogSystem.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.EscapePressed then elseif aD==Report.DialogStarted then self:StartDialog(arg[1],arg[2],arg[3])elseif aD==Report.DialogEnded then self:EndDialog(arg[1],arg[2],arg[3])elseif aD==Report.DialogPageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.DialogSystem.Local:StartDialog(q,oN,oJ)if GUI.GetPlayerID()~=q then return end;self.Dialog[q]=oJ;self.Dialog[q].CurrentPage=0;local dC,dD=Camera.RTS_GetLookAtPosition()local na=Camera.RTS_GetRotationAngle()local np=Camera.RTS_GetZoomFactor()local nq=Game.GameTimeGetFactor(q)local oO,oP=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/AlignBottomLeft/SubTitles")self.Dialog[q].Backup={SubTitles={oO,oP},Camera={dC,dD,na,np},Speed=nq}DeactivateNormalInterface(q)DeactivateBorderScroll(q)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,1)end;self:ActivateCinematicMode(q)end;function Lib.DialogSystem.Local:EndDialog(q,oN,oJ)if GUI.GetPlayerID()~=q then return end;if self.Dialog[q].RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,self.Dialog[q].Backup.Speed)end;if self.Dialog[q].RestoreCamera then Camera.RTS_SetLookAtPosition(self.Dialog[q].Backup.Camera[1],self.Dialog[q].Backup.Camera[2])Camera.RTS_SetRotationAngle(self.Dialog[q].Backup.Camera[3])Camera.RTS_SetZoomFactor(self.Dialog[q].Backup.Camera[4])end;self:DeactivateCinematicMode(q)ActivateNormalInterface(q)ActivateBorderScroll(q)Lib.UITools.Widget:UpdateHiddenWidgets()self.Dialog[q]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.DialogSystem.Local:DisplayPage(q,nl,oQ)if GUI.GetPlayerID()~=q then return end;self.Dialog[q][nl]=oQ;self.Dialog[q].CurrentPage=nl;if type(self.Dialog[q][nl])=="table"then self.Dialog[q][nl].Started=Logic.GetTime()self:DisplayPageFader(q,nl)self:DisplayPagePosition(q,nl)self:DisplayPageActor(q,nl)self:DisplayPageTitle(q,nl)self:DisplayPageText(q,nl)if self.Dialog[q][nl].MC then self:DisplayPageOptionsDialog(q,nl)end end end;function Lib.DialogSystem.Local:DisplayPagePosition(q,nl)local n7=self.Dialog[q][nl]Camera.RTS_FollowEntity(0)if n7.Position then local V=n7.Position;if type(V)~="table"then V=GetPosition(n7.Position)end;Camera.RTS_SetLookAtPosition(V.X,V.Y)elseif n7.Target then Camera.RTS_FollowEntity(GetID(n7.Target))else assert(false)end;Camera.RTS_SetRotationAngle(n7.Rotation)Camera.RTS_SetZoomFactor(n7.Distance/18000)Camera.RTS_SetZoomAngle(n7.Angle)end;function Lib.DialogSystem.Local:DisplayPageFader(q,nl)local n7=self.Dialog[q][nl]g_Fade.To=n7.FaderAlpha or 0;local nA=n7.FadeIn;if nA then FadeIn(nA)end;local nB=n7.FadeOut;if nB then self.Dialog[q].FaderJob=RequestHiResJob(function(gE,nC)if Logic.GetTimeMs()>gE-nC*1000 then FadeOut(nC)return true end end,Logic.GetTimeMs()+(n7.Duration or 0)*1000,nB)end end;function Lib.DialogSystem.Local:DisplayPageActor(q,nl)local oR="/InGame/Root/Normal/AlignBottomLeft/Message"XGUIEng.ShowWidget(oR,1)XGUIEng.ShowAllSubWidgets(oR,1)XGUIEng.ShowWidget(oR.."/QuestLog",0)XGUIEng.ShowWidget(oR.."/Update",0)local n7=self.Dialog[q][nl]if not n7.Actor or n7.Actor==-1 then XGUIEng.ShowWidget(oR,0)return end;local oS=self:GetPageActor(q,nl)self:DisplayActorPortrait(q,oS)end;function Lib.DialogSystem.Local:GetPageActor(q,nl)local oS=g_PlayerPortrait[q]local n7=self.Dialog[q][nl]if type(n7.Actor)=="string"then oS=n7.Actor elseif type(n7.Actor)=="number"then oS=g_PlayerPortrait[n7.Actor]end;if not Models["Heads_"..tostring(oS)]then oS="H_NPC_Generic_Trader"end;return oS end;function Lib.DialogSystem.Local:DisplayPageTitle(q,nl)local oR="/InGame/Root/Normal/AlignBottomLeft/Message"local n7=self.Dialog[q][nl]if n7.Title then local iz=ConvertPlaceholders(Localize(n7.Title))if iz:find("^[A-Za-Z0-9_]+/[A-Za-Z0-9_]+$")then iz=XGUIEng.GetStringTableText(iz)end;if iz:sub(1,1)~="{"then iz="{center}"..iz end;XGUIEng.SetText(oR.."/MessagePortrait/PlayerName",iz)XGUIEng.ShowWidget(oR.."/MessagePortrait/PlayerName",1)else XGUIEng.ShowWidget(oR.."/MessagePortrait/PlayerName",0)end end;function Lib.DialogSystem.Local:DisplayPageText(q,nl)self:ResetSubtitlesPosition(q)local n7=self.Dialog[q][nl]local oT="/InGame/Root/Normal/AlignBottomLeft/SubTitles"if not n7 or not n7.Text or n7.Text==""then XGUIEng.SetText(oT.."/VoiceText1"," ")XGUIEng.ShowWidget(oT,0)return end;XGUIEng.ShowWidget(oT,1)XGUIEng.ShowWidget(oT.."/Update",0)XGUIEng.ShowWidget(oT.."/VoiceText1",1)XGUIEng.ShowWidget(oT.."/BG",1)local cb=ConvertPlaceholders(Localize(n7.Text))local oU=""if not n7.AutoSkip and not n7.MC then oU=ConvertPlaceholders(Localize(Lib.DialogSystem.Text.Continue))end;XGUIEng.SetText(oT.."/VoiceText1",cb..oU)self:SetSubtitlesPosition(q,nl)end;function Lib.DialogSystem.Local:SetSubtitlesPosition(q,nl)local n7=self.Dialog[q][nl]local hq="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local eO=XGUIEng.GetTextHeight(hq.."/VoiceText1",true)local eP,eQ=XGUIEng.GetWidgetSize(hq.."/VoiceText1")local cT,cU=XGUIEng.GetWidgetLocalPosition(hq)if n7.Actor then XGUIEng.SetWidgetSize(hq.."/BG",eP+10,eO+120)cU=675-eO;XGUIEng.SetWidgetLocalPosition(hq,cT,cU)else XGUIEng.SetWidgetSize(hq.."/BG",eP+10,eO+35)cU=1115-eO;XGUIEng.SetWidgetLocalPosition(hq,46,cU)end end;function Lib.DialogSystem.Local:ResetSubtitlesPosition(q)local V=self.Dialog[q].Backup.SubTitles;local oV="/InGame/Root/Normal/AlignBottomLeft/SubTitles"XGUIEng.SetWidgetLocalPosition(oV,V[1],V[2])end;function Lib.DialogSystem.Local:ResetTimerButtons(q)if GUI.GetPlayerID()~=q then return end;if not g_Interaction.TimerQuests then return end;local oW="/InGame/Root/Normal/AlignTopLeft/QuestTimers/"for f=1,6 do local oX=oW..f.."/TimerButton"local oY=g_Interaction.TimerQuests[f]if oY~=nil then local bj=Quests[oY]if g_Interaction.CurrentMessageQuestIndex==oY and not QuestLog.IsQuestLogShown()then g_Interaction.CurrentMessageQuestIndex=nil;g_VoiceMessageIsRunning=false;g_VoiceMessageEndTime=nil;XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget(QuestLog.Widget.Main,0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)XGUIEng.HighLightButton(oX,0)end;if bj then self:DisplayActorPortrait(bj.SendingPlayer)end end end end;function Lib.DialogSystem.Local:DisplayActorPortrait(q,oZ)local oR="/InGame/Root/Normal/AlignBottomLeft/Message"local oS=g_PlayerPortrait[q]if oZ then if not Models["Heads_"..tostring(oZ)]then oZ="H_NPC_Generic_Trader"end;oS=oZ end;XGUIEng.ShowWidget(oR.."/MessagePortrait",1)XGUIEng.ShowWidget(oR.."/QuestObjectives",0)SetPortraitWithCameraSettings(oR.."/MessagePortrait/3DPortraitFaceFX",oS)GUI.PortraitWidgetSetRegister(oR.."/MessagePortrait/3DPortraitFaceFX","Mood_Friendly",1,2,0)GUI.PortraitWidgetSetRegister(oR.."/MessagePortrait/3DPortraitFaceFX","Mood_Angry",1,2,0)end;function Lib.DialogSystem.Local:DisplayPageOptionsDialog(q,nl)local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local nI={GUI.GetScreenSize()}local n7=self.Dialog[q][nl]local nJ=XGUIEng.GetWidgetID(hx.."/ListBox")self.Dialog[q].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(hx)}XGUIEng.ListBoxPopAll(nJ)self.Dialog[q].MCSelectionOptionsMap={}for f=1,#n7.MC,1 do if n7.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(nJ,n7.MC[f][1])table.insert(self.Dialog[q].MCSelectionOptionsMap,n7.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(nJ,0)local o_={XGUIEng.GetWidgetScreenSize(hx)}local p0=math.ceil(nI[1]*0.05+o_[1]/2)local p1=math.ceil(nI[2]-(o_[2]+60*nI[2]/540))if not n7.Actor then p0=15*nI[1]/960;p1=math.ceil(nI[2]-(o_[2]+0*nI[2]/540))end;XGUIEng.SetWidgetScreenPosition(hx,p0,p1)XGUIEng.PushPage(hx,false)XGUIEng.ShowWidget(hx,1)if not n7.Actor then local nx="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local p2,p3=XGUIEng.GetWidgetLocalPosition(nx)XGUIEng.SetWidgetLocalPosition(nx,p2,p3-220)end;self.Dialog[q].MCSelectionIsShown=true end;function Lib.DialogSystem.Local:OnOptionSelected(q)local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local V=self.Dialog[q].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(hx,V[1],V[2])XGUIEng.ShowWidget(hx,0)XGUIEng.PopPage()local kn=XGUIEng.ListBoxGetSelectedIndex(hx.."/ListBox")+1;local nN=self.Dialog[q].MCSelectionOptionsMap[kn]SendReport(Report.DialogOptionSelected,q,nN)SendReportToGlobal(Report.DialogOptionSelected,q,nN)end;function Lib.DialogSystem.Local:ThroneRoomCameraControl(q,n6)if n6 then if self.Dialog[q].MCSelectionIsShown then local hx="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(hx)==0 then self.Dialog[q].MCSelectionIsShown=false;self:OnOptionSelected(q)end end end end;function Lib.DialogSystem.Local:ConvertPosition(G)local V=G;if type(V)~="table"then V=GetPosition(G)end;return V.X,V.Y,V.Z end;function Lib.DialogSystem.Local:GetCurrentDialog(q)return self.Dialog[q]end;function Lib.DialogSystem.Local:GetCurrentDialogPage(q)if self.Dialog[q]then local nb=self.Dialog[q].CurrentPage;return self.Dialog[q][nb]end end;function Lib.DialogSystem.Local:GetPageIDByName(q,r)if type(r)=="string"then if self.Dialog[q]~=nil then for f=1,#self.Dialog[q],1 do if type(self.Dialog[q][f])=="table"and self.Dialog[q][f].Name==r then return f end end end;return 0 end;return r end;function Lib.DialogSystem.Local:IsAnyCinematicEventActive(q)for g,h in pairs(Lib.UIEffects.Local.CinematicEventStatus[q])do if h==1 then return true end end;return false end;function Lib.DialogSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Camera_ThroneroomCameraControl=GameCallback_Camera_ThroneroomCameraControl;GameCallback_Camera_ThroneroomCameraControl=function(q)Lib.DialogSystem.Local.Orig_GameCallback_Camera_ThroneroomCameraControl(q)if q==GUI.GetPlayerID()then local oL=Lib.DialogSystem.Local:GetCurrentDialog(q)if oL~=nil then Lib.DialogSystem.Local:ThroneRoomCameraControl(q,Lib.DialogSystem.Local:GetCurrentDialogPage(q))end end end end;function Lib.DialogSystem.Local:ActivateCinematicMode(q)if self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main",1)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/Main",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Objectives"," ")self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Dialog[q].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Dialog[q].EnableSky then Display.SetRenderSky(1)end;if not self.Dialog[q].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(0)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.DialogSystem.Local:DeactivateCinematicMode(q)if not self.CinematicActive or GUI.GetPlayerID()~=q then return end;self.CinematicActive=false;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/SubTitles/VoiceText1"," ")XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)ResetRenderDistance()self:ResetSubtitlesPosition(q)end;function Lib.DialogSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.DialogSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.DialogSystem.Text.Request.Title,Lib.DialogSystem.Text.Request.Text,function(hc)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=hc==true end,false)end;RegisterModule(Lib.DialogSystem.Name)Lib.Register("module/city/LifestockSystem_Text")Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Text={CattleStarved={de="Eure Kühe sind verhungert!",en="Your cows have starved to death!",fr="Tes vaches sont mortes de faim !"},SheepStarved={de="Eure Schafe sind verhungert!",en="Your sheep have starved to death!",fr="Vos moutons sont morts de faim!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/LifestockSystem_API")function SetCattleBreedingParameters(f7)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(f7)=="table","Malformed data passed!")local p4=f7.BasePrice or 300;local p5=f7.GrainCost or 10;local p6=f7.GrainUpkeep or 1;local p7=f7.FeedingTimer or 0;local p8=f7.StarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.CattleBasePrice = %d]],p4)Lib.LifestockSystem.Global.CattleBasePrice=p4;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Cow] = %d]],p5)MerchantSystem.BasePrices[Goods.G_Cow]=p4;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainCost = %d]],p5)Lib.LifestockSystem.Global.CattleGrainCost=p5;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainUpkeep = %d]],p6)Lib.LifestockSystem.Global.CattleGrainUpkeep=p6;ExecuteLocal([[Lib.LifestockSystem.Global.CattleFeedingTimer = %d]],p7)Lib.LifestockSystem.Global.CattleFeedingTimer=p7;ExecuteLocal([[Lib.LifestockSystem.Global.CattleStarveChance = %d]],p8)Lib.LifestockSystem.Global.CattleStarveChance=p8 end;API.SetCattleBreedingParameters=SetCattleBreedingParameters;function SetSheepBreedingParameters(f7)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(f7)=="table","Malformed data passed!")local p9=f7.SheepBasePrice or 300;local pa=f7.SheepGrainCost or 10;local pb=f7.SheepGrainUpkeep or 1;local pc=f7.SheepFeedingTimer or 0;local pd=f7.SheepStarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.SheepBasePrice = %d]],p9)Lib.LifestockSystem.Global.SheepBasePrice=p9;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Sheep] = %d]],p9)MerchantSystem.BasePrices[Goods.G_Sheep]=p9;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainCost = %d]],pa)Lib.LifestockSystem.Global.SheepGrainCost=pa;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainUpkeep = %d]],pb)Lib.LifestockSystem.Global.SheepGrainUpkeep=pb;ExecuteLocal([[Lib.LifestockSystem.Global.SheepFeedingTimer = %d]],pc)Lib.LifestockSystem.Global.SheepFeedingTimer=pc;ExecuteLocal([[Lib.LifestockSystem.Global.SheepStarveChance = %d]],pd)Lib.LifestockSystem.Global.SheepStarveChance=pd end;API.SetSheepBreedingParameters=SetSheepBreedingParameters;function RequireTitleToBreedCattle(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_Cattle)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Cattle,0)end end;API.RequireTitleToBreedCattle=RequireTitleToBreedCattle;function RequireTitleToBreedSheep(e7)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],e7)table.insert(NeedsAndRightsByKnightTitle[e7][4],1,Technologies.R_Sheep)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Sheep,0)end end;API.RequireTitleToBreedSheep=RequireTitleToBreedSheep;Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Name="LifestockSystem"Lib.LifestockSystem.Global={CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleStaved="",SheepStarved=""}}Lib.LifestockSystem.Local={BuyLock=false,CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleTitle="",CattleDescription="",CattleDisabled="",SheepTitle="",SheepDescription="",SheepDisabled=""}}Lib.LifestockSystem.Shared={TechnologyConfig={{"R_Cattle",{de="Kühe züchten",en="Breeding Cows",fr="Vaches reproductrices"},{3,16,0},0},{"R_Sheep",{de="Schafe züchten",en="Breeding Sheeps",fr="Moutons reproducteurs"},{4,1,0},0}}}Lib.Require("comfort/global/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/ui/UIBuilding")Lib.Require("module/faker/Technology")Lib.Require("module/city/Promotion")Lib.Require("module/city/LifestockSystem_API")Lib.Require("module/city/LifestockSystem_Text")Lib.Register("module/city/LifestockSystem")function Lib.LifestockSystem.Global:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()RequestJob(function()Lib.LifestockSystem.Global:ControlFeeding()Lib.LifestockSystem.Global:ControlDecay()end)Lib.LifestockSystem.Local=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Global:OnSaveGameLoaded()end;function Lib.LifestockSystem.Global:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.LanguageChanged then self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)elseif aD==Report.BreedAnimalClicked then Lib.LifestockSystem.Global:BuyAnimal(arg[1],arg[2],arg[3])end end;function Lib.LifestockSystem.Global:BuyAnimal(cy,q,g3)local pe=cy=="Cattle"and Entities.A_X_Cow01 or Entities.A_X_Sheep01;local pf=self[cy.."GrainCost"]if GetPlayerResources(Goods.G_Grain,q)<pf then return end;local I,J=Logic.GetBuildingApproachPosition(g3)local B=Logic.CreateEntity(pe,I,J,0,q)AddGood(Goods.G_Grain,-1*pf,q)SendReport(Report[cy.."Bought"],q,B,g3)SendReportToLocal(Report[cy.."Bought"],q,B,g3)end;function Lib.LifestockSystem.Global:ControlFeeding()for n=1,8 do if Logic.PlayerGetIsHumanFlag(n)then local pg=self.CattleFeedingTimer;local ph={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CattlePasture)}if pg>0 then local pi=math.max(pg*(1-0.03*#ph),15)if#ph>0 and Logic.GetTime()%math.floor(pi)==0 then local pj=self.CattleGrainUpkeep;local pk=GetPlayerResources(Goods.G_Grain,n)if pk<pj then local pl=false;for g,h in pairs(ph)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,750,1)if IsExisting(mt)and math.random(1,100)<=self.CattleStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.CattleStarved,n,h)SendReport(Report.CattleStarved,n,h)pl=true end end;if pl then local cb=Localize(self.Text.CattleStarved)AddMessage(cb)end else AddGood(Goods.G_Grain,-1*pj,n)end end end;local pm=self.SheepFeedingTimer;local ml={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.SheepPasture)}if pm>0 then local pi=math.max(pm*(1-0.03*#ml),15)if#ml>0 and Logic.GetTime()%math.floor(pi)==0 then local pj=self.SheepGrainUpkeep;local pk=GetPlayerResources(Goods.G_Grain,n)if pk<pj then local pl=false;for g,h in pairs(ml)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,750,1)if IsExisting(mt)and math.random(1,100)<=self.SheepStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.SheepStarved,n,h)SendReport(Report.SheepStarved,n,h)end end;if pl then local cb=Localize(self.Text.SheepStarved)AddMessage(cb)end else AddGood(Goods.G_Grain,-1*pj,n)end end end end end end;function Lib.LifestockSystem.Global:ControlDecay()if Logic.GetTime()%10==0 then local ms=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(ms)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_CattlePasture,I,J,900,1)if IsExisting(mt)then local hM=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hM-1)end end;local mu=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(mu)do local I,J,K=Logic.EntityGetPos(h)local gn,mt=Logic.GetEntitiesInArea(Entities.B_SheepPasture,I,J,900,1)if IsExisting(mt)then local hM=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,hM-1)end end end end;function Lib.LifestockSystem.Local:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleTitle=XGUIEng.GetStringTableText("Names/A_X_Cow01")self.Text.CattleDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Cow")self.Text.CattleDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")self.Text.SheepTitle=XGUIEng.GetStringTableText("Names/A_X_Sheep01")self.Text.SheepDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Sheep")self.Text.SheepDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")MerchantSystem.BasePricesOrigModuleLifestockBreeding={}MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigModuleLifestockBreeding[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()self:InitBuyCowButton()self:InitBuySheepButton()Lib.LifestockSystem.Global=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Local:OnSaveGameLoaded()end;function Lib.LifestockSystem.Local:OnReportReceived(aD,...)if aD==Report.LoadingFinished then self.LoadscreenClosed=true elseif aD==Report.CattleBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end elseif aD==Report.SheepBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end end end;function Lib.LifestockSystem.Local:BuyAnimalAction(cy,e4,an)local pf=self[cy.."GrainCost"]local n=Logic.EntityGetPlayer(an)if GetPlayerResources(Goods.G_Grain,n)<pf then local cb=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")Message(cb)return end;self.BuyLock=true;SendReportToGlobal(Report.BreedAnimalClicked,cy,n,an)SendReport(Report.BreedAnimalClicked,cy,n,an)end;function Lib.LifestockSystem.Local:BuyAnimalTooltip(cy,e4,an)local iz=self.Text[cy.."Title"]local cb=self.Text[cy.."Description"]local j7=""local pf=self[cy.."GrainCost"]local n=Logic.EntityGetPlayer(an)local pn=cy=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;if Logic.TechnologyGetState(n,pn)==0 then local ca=GUI_Tooltip.GetDisabledKeyForTechnologyType(pn)j7=GetStringText("UI_ButtonDisabled/"..ca)elseif XGUIEng.IsButtonDisabled(e4)==1 then j7=self.Text[cy.."Disabled"]end;SetTooltipCosts(iz,cb,j7,{Goods.G_Grain,pf},true)end;function Lib.LifestockSystem.Local:BuyAnimalUpdate(cy,e4,an)local n=Logic.EntityGetPlayer(an)local pn=cy=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;local po=Logic.GetEntityType(an)local pp=Logic.TechnologyGetState(n,pn)local is=cy=="Cattle"and{3,16}or{4,1}local pq=0;local pr=GetPlayerEntities(n,po)local mn={Logic.GetPlayerEntitiesInCategory(n,EntityCategories[cy.."Pasture"])}if pp~=TechnologyStates.Unlocked and pp~=TechnologyStates.Researched or self.BuyLock or#pr*5<=#mn then is=cy=="Cattle"and{4,2}or{4,3}pq=1 end;XGUIEng.DisableButton(e4,pq)SetIcon(e4,is)end;function Lib.LifestockSystem.Local:InitBuyCowButton()local V={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_CattlePasture,V[1],V[2],function(e4,an)Lib.LifestockSystem.Local:BuyAnimalAction("Cattle",e4,an)end,function(e4,an)Lib.LifestockSystem.Local:BuyAnimalTooltip("Cattle",e4,an)end,function(e4,an)Lib.LifestockSystem.Local:BuyAnimalUpdate("Cattle",e4,an)end)end;function Lib.LifestockSystem.Local:InitBuySheepButton()local V={XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/BuyCatapultCart")}AddBuildingButtonByTypeAtPosition(Entities.B_SheepPasture,V[1],V[2],function(e4,an)Lib.LifestockSystem.Local:BuyAnimalAction("Sheep",e4,an)end,function(e4,an)Lib.LifestockSystem.Local:BuyAnimalTooltip("Sheep",e4,an)end,function(e4,an)Lib.LifestockSystem.Local:BuyAnimalUpdate("Sheep",e4,an)end)end;function Lib.LifestockSystem.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for bO=1,8 do Logic.TechnologySetState(bO,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.LifestockSystem.Name)ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local ps=g_QuestBehaviorTypes[f]if not _G["B_"..ps.Name].new then _G["B_"..ps.Name].new=function(self,...)local pt={...}local bT=table.copy(self)bT.i47ya_6aghw_frxil={}bT.v12ya_gg56h_al125={}for bO=1,#pt,1 do table.insert(bT.v12ya_gg56h_al125,pt[bO])if self.Parameter and self.Parameter[bO]~=nil then bT:AddParameter(bO-1,pt[bO])else table.insert(bT.i47ya_6aghw_frxil,pt[bO])end end;return bT end end end end;function RegisterBehavior(pu)if GUI~=nil then return end;if type(pu)~="table"or pu.Name==nil then assert(false,"Behavior is invalid!")return end;if pu.RequiresExtraNo and pu.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..pu.Name]then error(string.format("Behavior %s does not exist!",pu.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==pu.Name then return end end;table.insert(g_QuestBehaviorTypes,pu)end;if not MapEditor and GUI then return end;function Reward_DEBUG(pv,dN,dO,dP,dQ)return B_Reward_DEBUG:new(pv,dN,dO,dP,dQ)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(bl)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(cy,pw)if cy==0 then self.DisplayScriptErrors=ToBoolean(pw)elseif cy==1 then self.CheckWhileRuntime=ToBoolean(pw)elseif cy==2 then self.DevelopingCheats=ToBoolean(pw)elseif cy==3 then self.DevelopingShell=ToBoolean(pw)elseif cy==4 then self.UseQuestTrace=ToBoolean(pw)end end;function B_Reward_DEBUG:CustomFunction(bl)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(cy)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local fD=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,fD,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(cy,pw)if cy==0 then self.GoodTypeName=pw elseif cy==1 then self.GoodAmount=pw*1 elseif cy==2 then self.OverrideTarget=tonumber(pw)elseif cy==3 then self.IgnoreCapture=ToBoolean(pw)end end;function B_Goal_Deliver:GetCustomData(cy)local bd={}if cy==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bd,g)end end;table.sort(bd)elseif cy==2 then table.insert(bd,"-")for f=1,8 do table.insert(bd,f)end elseif cy==3 then table.insert(bd,"true")table.insert(bd,"false")else assert(false)end;return bd end;function B_Goal_Deliver:GetMsgKey()local fD=Logic.GetGoodTypeID(self.GoodTypeName)local px=Logic.GetGoodCategoryForGoodType(fD)local py={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if px then local ca=py[px]if ca then return ca end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(bl)local pz=self:GetDiplomacyMapping()local s=GetPlayerName(self.PlayerID)or""local cb=string.format(Localize(self.TextPattern),Localize(pz[self.DiplState]),s)Lib.Core.Quest:ChangeCustomQuestCaptionText(cb,bl)end;function B_Goal_Diplomacy:CustomFunction(bl)self:ChangeCaption(bl)if self.Relation=="<="then if GetDiplomacyState(bl.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(bl.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(bl.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.Relation=pw elseif cy==2 then self.DiplState=DiplomacyStates[pw]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(cy)if cy==1 then return{">=","<=","=="}elseif cy==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local py={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local pA=GetPlayerCategoryType(self.PlayerID)if pA then local ca=py[pA]if ca then return ca end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(cy,pw)if cy==0 then self.TerritoryID=tonumber(pw)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(pw)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local py={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local pA=GetPlayerCategoryType(self.PlayerID)if pA then local ca=py[pA]if ca then return ca end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local aC=Logic.GetHeadquarters(self.PlayerID)if not aC or aC==0 then aC=Logic.GetStoreHouse(self.PlayerID)end;assert(aC and aC~=0)return{Objective.Steal,1,{aC}}end;function B_Goal_StealInformation:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local py={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local pA=GetPlayerCategoryType(self.PlayerID)if pA then local ca=py[pA]if ca then return ca end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local al=GetID(self.ScriptName)if al and al~=0 then al=Logic.GetEntityType(al)if al and al~=0 then if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(cy,pw)if cy==0 then self.EntityName=pw elseif cy==1 then self.Amount=pw*1;self.DestroyTypeAmount=self.Amount elseif cy==2 then self.PlayerID=pw*1 end end;function B_Goal_DestroyType:GetCustomData(cy)local bd={}if cy==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(bd,g)end end;table.sort(bd)elseif cy==2 then for f=0,8 do table.insert(bd,f)end else assert(false)end;return bd end;function B_Goal_DestroyType:GetMsgKey()local al=self.EntityName;if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(cy,pw)if cy==0 then self.Entity1=pw elseif cy==1 then self.Entity2=pw elseif cy==2 then self.bRelSmallerThan=pw=="<"elseif cy==3 then self.Distance=pw*1 end end;function B_Goal_EntityDistance:CustomFunction(bl)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local as=GetID(self.Entity1)local aw=GetID(self.Entity2)local pB=Logic.CheckEntitiesDistance(as,aw,self.Distance)if self.bRelSmallerThan and pB or not self.bRelSmallerThan and not pB then return true end end;function B_Goal_EntityDistance:GetCustomData(cy)local bd={}if cy==2 then table.insert(bd,">")table.insert(bd,"<")else assert(false)end;return bd end;function B_Goal_EntityDistance:Debug(bl)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bl.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(cy,pw)if cy==0 then self.Target=pw elseif cy==1 then if pw==nil or pw==""then pw=0 end;self.Distance=pw*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(cy,pw)if cy==0 then self.TerritoryID=tonumber(pw)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(pw)end elseif cy==1 then self.PlayerID=tonumber(pw)*1 elseif cy==2 then self.Category=pw elseif cy==3 then self.bRelSmallerThan=tostring(pw)=="true"or tostring(pw)=="<"elseif cy==4 then self.NumberOfUnits=pw*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(bl)local d8=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#d8>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#d8<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(ed,q,fS)local d8={}local ju={}if q==-1 then for f=0,8 do local pC=0;repeat ju={Logic.GetEntitiesOfCategoryInTerritory(ed,f,q,pC)}d8=Array_Append(d8,ju)pC=pC+#ju until#ju==0 end else local pC=0;repeat ju={Logic.GetEntitiesOfCategoryInTerritory(ed,q,fS,pC)}d8=Array_Append(d8,ju)pC=pC+#ju until#ju==0 end;return d8 end;function B_Goal_UnitsOnTerritory:GetCustomData(cy)local bd={}if cy==1 then table.insert(bd,-1)for f=1,8 do table.insert(bd,f)end elseif cy==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(bd,g)end end;table.sort(bd)elseif cy==3 then table.insert(bd,">=")table.insert(bd,"<")else assert(false)end;return bd end;function B_Goal_UnitsOnTerritory:Debug(bl)local pD={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(pD,self.TerritoryID)then debug(false,bl.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bl.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.BuffName=pw;self.Buff=Buffs[pw]end end;function B_Goal_ActivateBuff:CustomFunction(bl)if not bl.QuestDescription or bl.QuestDescription==""then local py=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then py=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,py)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(py[self.BuffName])),bl)end;local iq=Logic.GetBuff(self.PlayerID,self.Buff)if iq and iq~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(cy)local bd={}if cy==1 then bd={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(bd,"Buff_Gems")table.insert(bd,"Buff_MusicalInstrument")table.insert(bd,"Buff_Olibanum")end;table.sort(bd)else assert(false)end;return bd end;function B_Goal_ActivateBuff:GetIcon()local py={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then py[Buffs.Buff_Gems]="Goods.G_Gems"py[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"py[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return py[self.Buff]end;function B_Goal_ActivateBuff:Debug(bl)if not self.Buff then debug(false,bl.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(cy,pw)if cy==0 then self.Entity1=pw elseif cy==1 then self.Entity2=pw elseif cy==2 then self.bRoadsOnly=ToBoolean(pw)end end;function B_Goal_BuildRoad:GetCustomData(cy)local bd;if cy==2 then bd={"true","false"}end;return bd end;function B_Goal_BuildRoad:Debug(bl)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bl.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.EntityName1=pw elseif cy==2 then self.EntityName2=pw end end;function B_Goal_BuildWall:CustomFunction(bl)local pE=GetID(self.EntityName1)local pF=GetID(self.EntityName2)if not IsExisting(pE)then return false end;if not IsExisting(pF)then return false end;local I,J,K=Logic.EntityGetPos(pE)if Logic.IsBuilding(pE)==1 then I,J=Logic.GetBuildingApproachPosition(pE)end;local pG=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)local I,J,K=Logic.EntityGetPos(pF)if Logic.IsBuilding(pF)==1 then I,J=Logic.GetBuildingApproachPosition(pF)end;local pH=Logic.GetPlayerSectorAtPosition(self.PlayerID,I,J)if pG~=pH then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(bl)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then debug(false,bl.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(bl.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(false,bl.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(cy,pw)if cy==0 then self.TerritoryID=tonumber(pw)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(pw)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(cy,pw)if cy==0 then self.TerritoriesToClaim=pw*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(cy,pw)if cy==0 then self.EntityName=pw elseif cy==1 then self.Amount=pw*1 elseif cy==2 then self.TerritoryID=tonumber(pw)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(pw)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local fD=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,fD,self.GoodAmount}end;function B_Goal_Produce:AddParameter(cy,pw)if cy==0 then self.GoodTypeName=pw elseif cy==1 then self.GoodAmount=pw*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local fD=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,fD,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(cy,pw)if cy==0 then self.GoodTypeName=pw elseif cy==1 then self.GoodAmount=pw*1 elseif cy==2 then self.bRelSmallerThan=pw=="<"or tostring(pw)=="true"end end;function B_Goal_GoodAmount:GetCustomData(cy)local bd={}if cy==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bd,g)end end;table.sort(bd)elseif cy==2 then table.insert(bd,">=")table.insert(bd,"<")else assert(false)end;return bd end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.Need=pw end end;function B_Goal_SatisfyNeed:GetMsgKey()local py={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local ca=py[Needs[self.Need]]if ca then return ca end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(cy,pw)if cy==0 then self.SettlersAmount=pw*1 elseif cy==1 then self.PlayerID=pw*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(cy,pw)if cy==0 then self.SpousesAmount=pw*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.bRelSmallerThan=tostring(pw)=="true"or tostring(pw)=="<"elseif cy==2 then self.NumberOfUnits=pw*1 end end;function B_Goal_SoldierCount:CustomFunction(bl)if not bl.QuestDescription or bl.QuestDescription==""then local pI=tostring(self.bRelSmallerThan)local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),s,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[pI]),self.NumberOfUnits),bl)end;local pJ=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and pJ<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and pJ>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(cy)local bd={}if cy==1 then table.insert(bd,">=")table.insert(bd,"<")else assert(false)end;return bd end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(bl)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bl.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(cy,pw)if cy==0 then self.KnightTitle=pw end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(cy)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(cy,pw)if cy==0 then self.PlayerID=tonumber(pw)else assert(cy==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(pw)end end;function B_Goal_Festivals:CustomFunction(bl)if not bl.QuestDescription or bl.QuestDescription==""then local s=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),s,self.NeededFestivals),bl)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local pK={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local pL=0;for g=2,#pK do local pM=pK[g]if Logic.GetIndexOnOutStockByGoodType(pM,Goods.G_Beer)~=-1 then local pN=Logic.GetAmountOnOutStockByGoodType(pM,Goods.G_Beer)pL=pL+pN end end;if not self.FestivalStarted and pL>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif pL==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(bl)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then debug(false,bl.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Goal_Capture:GetMsgKey()local al=GetID(self.ScriptName)if Logic.IsEntityAlive(al)then al=Logic.GetEntityType(al)if al and al~=0 then if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(cy,pw)if cy==0 then self.EntityName=pw elseif cy==1 then self.Amount=pw*1 elseif cy==2 then self.PlayerID=pw*1 end end;function B_Goal_CaptureType:GetCustomData(cy)local bd={}if cy==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(bd,g)end end;table.sort(bd)elseif cy==2 then for f=0,8 do table.insert(bd,f)end else assert(false)end;return bd end;function B_Goal_CaptureType:GetMsgKey()local al=self.EntityName;if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(al,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local al=GetID(self.ScriptName)if al and al~=0 then al=Logic.GetEntityType(al)if al and al~=0 then if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.SpecialBuilding)==1 then local py={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local pA=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if pA then local ca=py[pA]if ca then return ca end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then self.bRelSmallerThan=pw=="<"elseif cy==2 then self.Amount=pw*1 end end;function B_Goal_ResourceAmount:CustomFunction(bl)local al=GetID(self.ScriptName)if al and al~=0 and Logic.GetResourceDoodadGoodType(al)~=0 then local pO=Logic.GetResourceDoodadGoodAmount(al)if self.bRelSmallerThan and pO<self.Amount or not self.bRelSmallerThan and pO>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(cy)local bd={}if cy==1 then table.insert(bd,">=")table.insert(bd,"<")else assert(false)end;return bd end;function B_Goal_ResourceAmount:Debug(bl)if not IsExisting(self.ScriptName)then debug(false,bl.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(cy,pw)if cy==0 then self.FuncName=pw end end;function B_Goal_MapScriptFunction:CustomFunction(bl)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bl)end;function B_Goal_MapScriptFunction:Debug(bl)if not self.FuncName then debug(false,bl.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bl.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(cy,pw)if cy==0 then self.VariableName=pw elseif cy==1 then self.Relation=pw elseif cy==2 then local pP=tonumber(pw)self.Value=pP==nil and tostring(pw)or pP end end;function B_Goal_CustomVariables:CustomFunction()local pQ=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local pR=self.Value;if type(self.Value)=="string"then pR=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if pQ==pR then return true end elseif self.Relation=="~="then if pQ==pR then return true end elseif self.Relation=="<"then if pQ<pR then return true end elseif self.Relation=="<="then if pQ<=pR then return true end elseif self.Relation==">="then if pQ>=pR then return true end else if pQ>pR then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(cy)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(bl)local pS={"==","~=","<=","<",">",">="}local pT={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bl.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(pS,self.Relation)then debug(false,bl.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Goal_TributeDiplomacy(...)return B_Goal_TributeDiplomacy:new(...)end;B_Goal_TributeDiplomacy={Name="Goal_TributeDiplomacy",Description={en="Goal: AI requests periodical tribute for better Diplomacy",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer bessere Diplomatie. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour une meilleure diplomatie. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Time till next peyment in seconds",de="Zeit bis zur Forderung in Sekunden",fr="Temps jusqu'à la demande en secondes"},{ParameterType.Number,en="Time to pay tribute in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Custom,en="Restart if failed to pay",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeDiplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeDiplomacy:AddParameter(cy,pw)if cy==0 then self.Amount=pw*1 elseif cy==1 then self.PeriodLength=pw*1 elseif cy==2 then self.TributTime=pw*1 elseif cy==3 then self.StartMsg=pw elseif cy==4 then self.SuccessMsg=pw elseif cy==5 then self.FailureMsg=pw elseif cy==6 then self.RestartAtFailure=ToBoolean(pw)end end;function B_Goal_TributeDiplomacy:GetTributeQuest(bl)if not self.InternTributeQuest then local pU=CONST_LANGUAGE;local pV=self.StartMsg;if type(pV)=="table"then pV=pV[pU]end;local pW=self.SuccessMsg;if type(pW)=="table"then pW=pW[pU]end;local pX=self.FailureMsg;if type(pX)=="table"then pX=pX[pU]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local bD,bj=QuestTemplate:New(bl.Identifier.."_TributeDiplomacyQuest_"..Lib.Core.Quest.QuestCounter,bl.SendingPlayer,bl.ReceivingPlayer,{{Objective.Deliver,{Goods.G_Gold,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,nil,nil,true,true,nil,pV,pW,pX)self.InternTributeQuest=bj end end;function B_Goal_TributeDiplomacy:CheckTributeQuest(bl)if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Over and not self.RestartQuest then if self.InternTributeQuest.Result~=QuestResult.Success then SetDiplomacyState(bl.ReceivingPlayer,bl.SendingPlayer,DiplomacyStates.Enemy)if not self.RestartAtFailure then return false end else SetDiplomacyState(bl.ReceivingPlayer,bl.SendingPlayer,DiplomacyStates.TradeContact)end;self.RestartQuest=true;self.Time=Logic.GetTime()end end;function B_Goal_TributeDiplomacy:CheckTributePlayer(bl)local pY=Logic.GetStoreHouse(bl.SendingPlayer)if pY==0 or Logic.IsEntityDestroyed(pY)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeDiplomacy:TributQuestRestarter(bl)if self.InternTributeQuest and self.Time and self.RestartQuest and Logic.GetTime()-self.Time>=self.PeriodLength then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)self.RestartQuest=nil end end;function B_Goal_TributeDiplomacy:CustomFunction(bl)self:GetTributeQuest(bl)if self:CheckTributeQuest(bl)==false then return false end;if self:CheckTributePlayer(bl)==true then return true end;self:TributQuestRestarter(bl)end;function B_Goal_TributeDiplomacy:Debug(bl)if self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": Amount is negative!")return true end;if self.PeriodLength<self.TributTime then debug(false,bl.Identifier..": "..self.Name..": TributTime too long!")return true end end;function B_Goal_TributeDiplomacy:Reset(bl)self.Time=nil;self.InternTributeQuest=nil;self.RestartQuest=nil end;function B_Goal_TributeDiplomacy:Interrupt(bl)if self.InternTributeQuest~=nil then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeDiplomacy:GetCustomData(cy)if cy==6 then return{"true","false"}end end;RegisterBehavior(B_Goal_TributeDiplomacy)function Goal_TributeClaim(...)return B_Goal_TributeClaim:new(...)end;B_Goal_TributeClaim={Name="Goal_TributeClaim",Description={en="Goal: AI requests periodical tribute for a specified territory. The quest sender is the demanding player.",de="Ziel: Die KI fordert einen regelmässigen Tribut fuer ein Territorium. Der Questgeber ist der fordernde Spieler.",fr="Objectif: L'IA demande un tribut régulier pour un territoire. Le donneur de quête est le joueur qui exige."},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Good Type",de="Warentyp",fr="Type de biens"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Number,en="Length of Period in seconds",de="Sekunden bis zur nächsten Forderung",fr="secondes jusqu'à la prochaine demande"},{ParameterType.Number,en="Time to pay Tribut in seconds",de="Zeit bis zur Zahlung in Sekunden",fr="Délai avant paiement en secondes"},{ParameterType.Default,en="Start Message for TributQuest",de="Startnachricht der Tributquest",fr="Message de début de quête de tribut"},{ParameterType.Default,en="Success Message for TributQuest",de="Erfolgsnachricht der Tributquest",fr="Message de réussite de la quête de tribut"},{ParameterType.Default,en="Failure Message for TributQuest",de="Niederlagenachricht der Tributquest",fr="Message de défaite de la quête de tribut"},{ParameterType.Number,en="How often to pay (0 = forerver)",de="Anzahl der Tributquests (0 = unendlich)",fr="Nombre de quêtes de tribut (0 = infini)"},{ParameterType.Custom,en="Other Owner cancels the Quest",de="Anderer Spieler kann Quest beenden",fr="Un autre joueur peut terminer une quête"},{ParameterType.Custom,en="About if a rate is not payed",de="Nicht-bezahlen beendet die Quest",fr="Ne pas payer met fin à la quête"}}}function B_Goal_TributeClaim:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_TributeClaim:AddParameter(cy,pw)if cy==0 then if type(pw)=="string"then pw=GetTerritoryIDByName(pw)end;self.TerritoryID=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then self.GoodType=Goods[pw or"G_Gold"]elseif cy==3 then self.Amount=pw*1 elseif cy==4 then self.PeriodLength=pw*1 elseif cy==5 then self.TributTime=pw*1 elseif cy==6 then self.StartMsg=pw elseif cy==7 then self.SuccessMsg=pw elseif cy==8 then self.FailureMsg=pw elseif cy==9 then self.HowOften=pw*1 elseif cy==10 then self.OtherOwnerCancels=ToBoolean(pw)elseif cy==11 then self.DontPayCancels=ToBoolean(pw)end end;function B_Goal_TributeClaim:CureOutpost(bl)local pZ=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(pZ)and GetHealth(pZ)<25 and Logic.IsBuildingBeingKnockedDown(pZ)==false then while Logic.GetEntityHealth(pZ)<Logic.GetEntityMaxHealth(pZ)*0.6 do Logic.HealEntity(pZ,1)end end end;function B_Goal_TributeClaim:RestartTributeQuest(bl)if self.InternTributeQuest then self.InternTributeQuest.Objectives[1].Completed=nil;self.InternTributeQuest.Objectives[1].Data[3]=nil;self.InternTributeQuest.Objectives[1].Data[4]=nil;self.InternTributeQuest.Objectives[1].Data[5]=nil;self.InternTributeQuest.Result=nil;self.InternTributeQuest.State=QuestState.NotTriggered;Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..self.InternTributeQuest.Index..")")StartSimpleJobEx(_G[QuestTemplate.Loop],self.InternTributeQuest.QueueID)end end;function B_Goal_TributeClaim:CreateTributeQuest(bl)if not self.InternTributeQuest then local pU=CONST_LANGUAGE;local pV=self.StartMsg;if type(pV)=="table"then pV=pV[pU]end;local pW=self.SuccessMsg;if type(pW)=="table"then pW=pW[pU]end;local pX=self.FailureMsg;if type(pX)=="table"then pX=pX[pU]end;Lib.Core.Quest.QuestCounter=Lib.Core.Quest.QuestCounter+1;local p_=function()self.Time=Logic.GetTime()end;local bD,bj=QuestTemplate:New(bl.Identifier.."_TributeClaimQuest"..Lib.Core.Quest.QuestCounter,self.PlayerID,bl.ReceivingPlayer,{{Objective.Deliver,{self.GoodType,self.Amount}}},{{Triggers.Time,0}},self.TributTime,nil,nil,p_,nil,true,true,nil,pV,pW,pX)self.InternTributeQuest=bj end end;function B_Goal_TributeClaim:OnTributeFailed(bl)local pZ=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if IsExisting(pZ)then Logic.ChangeEntityPlayerID(pZ,self.PlayerID)end;Logic.SetTerritoryPlayerID(self.TerritoryID,self.PlayerID)self.InternTributeQuest.State=false;self.Time=nil;if self.DontPayCancels then bl:Interrupt()end end;function B_Goal_TributeClaim:OnTributePaid(bl)local pZ=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if self.InternTributeQuest.Result==QuestResult.Success then if Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if IsExisting(pZ)then Logic.ChangeEntityPlayerID(pZ,bl.ReceivingPlayer)end;Logic.SetTerritoryPlayerID(self.TerritoryID,bl.ReceivingPlayer)end end;if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then if self.HowOften and self.HowOften~=0 then self.TributeCounter=(self.TributeCounter or 0)+1;if self.TributeCounter>=self.HowOften then return false end end;self:RestartTributeQuest()self.Time=nil end end;function B_Goal_TributeClaim:CustomFunction(bl)self:CreateTributeQuest(bl)self:CureOutpost(bl)if Logic.GetTerritoryPlayerID(self.TerritoryID)==bl.ReceivingPlayer or Logic.GetTerritoryPlayerID(self.TerritoryID)==self.PlayerID then if self.OtherOwner then self:RestartTributeQuest()self.OtherOwner=nil end;if self.InternTributeQuest.State==QuestState.Over then if self.InternTributeQuest.Result==QuestResult.Failure then self:OnTributeFailed(bl)else self:OnTributePaid(bl)end elseif self.InternTributeQuest.State==false then if self.Time and Logic.GetTime()>=self.Time+self.PeriodLength then self:RestartTributeQuest(bl)end end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)==0 and self.InternTributeQuest then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end elseif Logic.GetTerritoryPlayerID(self.TerritoryID)~=self.PlayerID then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;if self.OtherOwnerCancels then bl:Interrupt()end;self.OtherOwner=true end;local pY=Logic.GetStoreHouse(self.PlayerID)if pY==0 or Logic.IsEntityDestroyed(pY)then if self.InternTributeQuest and self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end;return true end end;function B_Goal_TributeClaim:Debug(bl)if self.TerritoryID==0 then debug(false,bl.Identifier..": "..self.Name..": Unknown Territory")return true end;if not self.Quest and Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end;if self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": Amount is negative")return true end;if self.PeriodLength<self.TributTime or self.PeriodLength<1 then debug(false,bl.Identifier..": "..self.Name..": Period Length is wrong")return true end;if self.HowOften<0 then debug(false,bl.Identifier..": "..self.Name..": HowOften is negative")return true end end;function B_Goal_TributeClaim:Reset(bl)self.InternTributeQuest=nil;self.Time=nil;self.OtherOwner=nil end;function B_Goal_TributeClaim:Interrupt(bl)if type(self.InternTributeQuest)=="table"then if self.InternTributeQuest.State==QuestState.Active then self.InternTributeQuest:Interrupt()end end end;function B_Goal_TributeClaim:GetCustomData(cy)if cy==2 then local bd={}for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bd,g)end end;table.sort(bd)return bd elseif cy==10 or cy==11 then return{"false","true"}end end;RegisterBehavior(B_Goal_TributeClaim)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(bl)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(bl)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,bl.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bf=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bf]and CONST_INITIALIZED_OBJECTS[bf]==bl.Identifier then debug(false,bl.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then local pt=0;if pw=="Always"or 1 then pt=1 end;self.UsingState=pt*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(bl)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(cy)if cy==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(bl)if not Logic.IsInteractiveObject(GetID(self.ScriptName))then warn(false,bl.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bf=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bf]and CONST_INITIALIZED_OBJECTS[bf]==bl.Identifier then debug(false,bl.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(bl)local oK=bl.SendingPlayer;local q0=bl.ReceivingPlayer;local State=GetDiplomacyState(q0,oK)if State>-2 then SetDiplomacyState(q0,oK,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(cy,pw)if cy==0 then self.PlayerID1=pw*1 elseif cy==1 then self.PlayerID2=pw*1 elseif cy==2 then self.Relation=DiplomacyStates[pw]end end;function B_Reprisal_Diplomacy:CustomFunction(bl)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(bl)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then debug(false,bl.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then debug(false,bl.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then debug(false,bl.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Reprisal_DestroyEntity:CustomFunction(bl)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(bl)if not IsExisting(self.ScriptName)then warn(false,bl.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(cy,pw)if cy==0 then self.EffectName=pw end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(bl)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(bl)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bl.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then self.NewType=pw elseif cy==2 then self.PlayerID=tonumber(pw)end end;function B_Reprisal_ReplaceEntity:CustomFunction(bl)local bf=GetID(self.ScriptName)local q1=self.PlayerID;if q1==Logic.EntityGetPlayer(bf)then q1=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],q1)end;function B_Reprisal_ReplaceEntity:GetCustomData(cy)local bd={}if cy==1 then for g,h in pairs(Entities)do local t={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local ls=false;for f=1,#t do if g:find(t[f])then ls=true;break end end;if not ls then table.insert(bd,g)end end;table.sort(bd)elseif cy==2 then bd={"-","0","1","2","3","4","5","6","7","8"}end;return bd end;function B_Reprisal_ReplaceEntity:Debug(bl)if not Entities[self.NewType]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)then self.WarningPrinted=true;warn(false,bl.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(cy,pw)if cy==0 then self.QuestName=pw end end;function B_Reprisal_QuestRestart:CustomFunction(bl)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(cy,pw)if cy==0 then self.QuestName=pw end end;function B_Reprisal_QuestFailure:CustomFunction(bl)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(cy,pw)if cy==0 then self.QuestName=pw end end;function B_Reprisal_QuestSuccess:CustomFunction(bl)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(cy,pw)if cy==0 then self.QuestName=pw else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(bl)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(bl)if not IsValidQuest(self.QuestName)then debug(false,bl.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(cy,pw)if cy==0 then self.QuestName=pw end end;function B_Reprisal_QuestInterrupt:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)local bj=Quests[bD]if bj.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.InterruptEnded=ToBoolean(pw)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(cy)local bd={}if cy==1 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reprisal_QuestForceInterrupt:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)local bj=Quests[bD]if self.InterruptEnded or bj.State~=QuestState.Over then bj:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(cy,pw)if cy==0 then self.VariableName=pw elseif cy==1 then self.Operator=pw elseif cy==2 then local pP=tonumber(pw)self.Value=pP==nil and tostring(pw)or pP end end;function B_Reprisal_CustomVariables:CustomFunction()local pQ=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local pR=self.Value;if type(self.Value)=="string"then pR=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then pQ=pR elseif self.Operator=="+"then pQ=pQ+pR elseif self.Operator=="-"then pQ=pQ-pR elseif self.Operator=="*"then pQ=pQ*pR elseif self.Operator=="/"then pQ=pQ/pR elseif self.Operator=="^"then pQ=pQ%pR end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,pQ)end;function B_Reprisal_CustomVariables:GetCustomData(cy)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(bl)local q2={"=","+","-","*","/","^"}if not table.contains(q2,self.Operator)then debug(false,bl.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then debug(false,bl.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(cy,pw)if cy==0 then self.FuncName=pw end end;function B_Reprisal_MapScriptFunction:CustomFunction(bl)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,bl)end;function B_Reprisal_MapScriptFunction:Debug(bl)if not self.FuncName then debug(false,bl.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bl.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.LockType=pw=="Lock"elseif cy==2 then self.Technology=pw end end;function B_Reprisal_Technology:CustomFunction(bl)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(cy)local bd={}if cy==1 then bd[1]="Lock"bd[2]="UnLock"elseif cy==2 then for g,h in pairs(Technologies)do table.insert(bd,g)end end;return bd end;function B_Reprisal_Technology:Debug(bl)if not Technologies[self.Technology]then debug(false,bl.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then self.Distance=pw*1 elseif cy==2 then self.Waittime=pw*1 elseif cy==3 then self.RewardType=pw elseif cy==4 then self.RewardAmount=pw*1 elseif cy==5 then self.FirstCostType=pw elseif cy==6 then self.FirstCostAmount=pw*1 elseif cy==7 then self.SecondCostType=pw elseif cy==8 then self.SecondCostAmount=pw*1 elseif cy==9 then local pt=nil;if pw=="Always"or pw==1 then pt=1 elseif pw=="Never"or pw==2 then pt=2 elseif pw=="Knight only"or pw==0 then pt=0 end;self.UsingState=pt end end;function B_Reward_ObjectInit:CustomFunction(bl)local bf=GetID(self.ScriptName)if bf==0 then return end;CONST_INITIALIZED_OBJECTS[bf]=bl.Identifier;Logic.InteractiveObjectClearCosts(bf)Logic.InteractiveObjectClearRewards(bf)Logic.InteractiveObjectSetInteractionDistance(bf,self.Distance)Logic.InteractiveObjectSetTimeToOpen(bf,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(bf,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(bf,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(bf,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(bf,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(bf,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(bf,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(bf,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(bf,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(bf,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(bf)table.insert(HiddenTreasures,bf)end;function B_Reward_ObjectInit:GetCustomData(cy)if cy==3 or cy==5 or cy==7 then local bd={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then bd[#bd+1]="G_Gems"bd[#bd+1]="G_MusicalInstrument"bd[#bd+1]="G_Olibanum"end;return bd elseif cy==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(bl)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then debug(false,bl.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(false,bl.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then debug(false,bl.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then debug(false,bl.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then debug(false,bl.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then debug(false,bl.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then debug(false,bl.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then debug(false,bl.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then debug(false,bl.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(bl)local oK=bl.SendingPlayer;local q0=bl.ReceivingPlayer;local State=GetDiplomacyState(q0,oK)if State<2 then SetDiplomacyState(q0,oK,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradePost(...)return B_Reward_TradePost:new(...)end;B_Reward_TradePost={Name="B_Reward_TradePost",Description={en="Sets options for a Tradepost and deactivates it.",de="Stellt einen Handelsposten ein und deaktiviert ihn.",fr=""},Parameter={{ParameterType.ScriptName,en="ScriptName",de="ScriptName"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID"},{ParameterType.Custom,en="Type of good to pay 1",de="Resourcentyp Bezahlung 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 1",de="Resourcentyp Angebot 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource"},{ParameterType.Custom,en="Type of good to pay 2",de="Resourcentyp Bezahlung 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 2",de="Resourcentyp Angebot 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 3",de="Resourcentyp Bezahlung 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 3",de="Resourcentyp Angebot 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 4",de="Resourcentyp Bezahlung 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 4",de="Resourcentyp Angebot 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""}}}function B_Reward_TradePost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_TradePost:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==3 then self.PayType1=pw elseif cy==4 then self.PayAmount1=pw*1 elseif cy==5 then self.OfferType1=pw elseif cy==6 then self.OfferAmount1=pw*1 elseif cy==7 then self.PayType2=pw elseif cy==8 then self.PayAmount2=pw*1 elseif cy==9 then self.OfferType2=pw elseif cy==10 then self.OfferAmount2=pw*1 elseif cy==11 then self.PayType3=pw elseif cy==12 then self.PayAmount3=pw*1 elseif cy==13 then self.OfferType3=pw elseif cy==14 then self.OfferAmount3=pw*1 elseif cy==15 then self.PayType4=pw elseif cy==16 then self.PayAmount4=pw*1 elseif cy==17 then self.OfferType4=pw elseif cy==18 then self.OfferAmount4=pw*1 end end;function B_Reward_TradePost:CustomFunction(bl)local q3=0;for f=1,4 do if self["PayAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]and self["OfferAmount"..f]>0 then q3=f else break end end;debug(IsExisting(self.ScriptName),bl.Identifier..": Error in "..self.Name..": CustomFunction: Tradepost is missing")local q4=GetID(self.ScriptName)if q3>0 then Logic.TradePost_SetTradePartnerGenerateGoodsFlag(q4,true)Logic.TradePost_SetTradePartnerPlayerID(q4,self.PlayerID)for f=1,q3 do for bO=1,q3 do Logic.TradePost_SetTradeDefinition(q4,bO-1,Goods[self["PayType"..bO]],self["PayAmount"..bO],Goods[self["OfferType"..bO]],self["OfferAmount"..bO])end end;Logic.TradePost_SetActiveTradeSlot(q4,0)Logic.InteractiveObjectSetAvailability(q4,false)for n=1,8 do Logic.InteractiveObjectSetPlayerState(q4,n,2)end end end;function B_Reward_TradePost:DEBUG(bl)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..":  Error in "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif not IsExisting(self.ScriptName)then debug(false,bl.Identifier..":  Error in "..self.Name..": No TradePost found")return true end;for f=1,4 do if self["PayAmount"..f]and self["OfferAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]>0 and(not Goods[self["PayType"..f]]or not Goods[self["OfferType"..f]])then debug(false,bl.Identifier..":  Error in "..self.Name..": Offer type or pay type in Slot "..f.." is wrong")return true end end end;function B_Reward_TradePost:GetCustomData(q5)if q5>=2 and q5<=16 and q5%2==0 then return{"G_Carcass","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Milk","G_RawFish","G_Stone","G_Wood","G_Wool","G_Salt","G_Dye","G_Olibanum","G_Gems","G_MusicalInstrument"}end end;if g_GameExtraNo and g_GameExtraNo>=1 then RegisterBehavior(B_Reward_TradePost)end;function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then pw=pw or 0;self.AmountOffer1=pw*1 elseif cy==2 then self.Offer1=pw elseif cy==3 then pw=pw or 0;self.AmountOffer2=pw*1 elseif cy==4 then self.Offer2=pw elseif cy==5 then pw=pw or 0;self.AmountOffer3=pw*1 elseif cy==6 then self.Offer3=pw elseif cy==7 then pw=pw or 0;self.AmountOffer4=pw*1 elseif cy==8 then self.Offer4=pw end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local q6=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(q6)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(q6,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(q6,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(q6,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(bl)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(cy)local q7={1,2,3,4,5,6,7,8}local dr={"1","2","3","4","5","6","7","8","9"}local l_={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(l_,"G_Gems")table.insert(l_,"G_Olibanum")table.insert(l_,"G_MusicalInstrument")table.insert(l_,"G_MilitaryBandit_Ranged_AS")table.insert(l_,"G_MilitaryBandit_Melee_AS")table.insert(l_,"U_MilitarySword_Khana")table.insert(l_,"U_MilitaryBow_Khana")end;if cy==0 then return q7 elseif cy==1 or cy==3 or cy==5 or cy==7 then return dr elseif cy==2 or cy==4 or cy==6 or cy==8 then return l_ end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(cy,pw)if cy==0 then self.ScriptNameEntity=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then self.UnitKey=pw elseif cy==3 then self.Orientation=pw*1 elseif cy==4 then self.SoldierCount=pw*1 elseif cy==5 then self.HideFromAI=ToBoolean(pw)end end;function B_Reward_CreateBattalion:CustomFunction(bl)if not IsExisting(self.ScriptNameEntity)then return false end;local aF=GetPosition(self.ScriptNameEntity)local dG=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aF.X,aF.Y,self.Orientation,self.PlayerID,self.SoldierCount)local q8=GetID(self.ScriptNameEntity)if Logic.IsBuilding(q8)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(dG,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dG,true)end end;function B_Reward_CreateBattalion:GetCustomData(cy)local bd={}if cy==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bd,g)end end;table.sort(bd)elseif cy==5 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_CreateBattalion:Debug(bl)if not Entities[self.UnitKey]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bl.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bl.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(cy,pw)if cy==0 then self.Amount=pw*1 elseif cy==1 then self.ScriptNameEntity=pw elseif cy==2 then self.PlayerID=pw*1 elseif cy==3 then self.UnitKey=pw elseif cy==4 then self.Orientation=pw*1 elseif cy==5 then self.SoldierCount=pw*1 elseif cy==6 then self.HideFromAI=ToBoolean(pw)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(bl)if not IsExisting(self.ScriptNameEntity)then return false end;local q9=GetID(self.ScriptNameEntity)local I,J,K=Logic.EntityGetPos(q9)if Logic.IsBuilding(q9)==1 then I,J=Logic.GetBuildingApproachPosition(q9)end;for f=1,self.Amount do local dG=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],I,J,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(dG,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dG,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(cy)local bd={}if cy==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bd,g)end end;table.sort(bd)elseif cy==6 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_CreateSeveralBattalions:Debug(bl)if not Entities[self.UnitKey]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bl.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bl.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(cy,pw)if cy==0 then self.EffectName=pw elseif cy==1 then self.Type=EGL_Effects[pw]elseif cy==2 then self.PlayerID=pw*1 elseif cy==3 then self.Location=pw elseif cy==4 then self.Orientation=pw*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(bl)if Logic.IsEntityDestroyed(self.Location)then return end;local qa=assert(GetID(self.Location),bl.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local qb,qc=Logic.GetEntityPosition(qa)local aH=tonumber(self.Orientation)local qd=Logic.CreateEffectWithOrientation(self.Type,qb,qc,aH,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=qd end end;function B_Reward_CreateEffect:Debug(bl)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then debug(false,bl.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then debug(false,bl.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then debug(false,bl.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then debug(false,bl.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(cy)assert(cy==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local qe={}for g,h in pairs(EGL_Effects)do table.insert(qe,g)end;table.sort(qe)return qe end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(cy,pw)if cy==0 then self.ScriptNameEntity=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then self.UnitKey=pw elseif cy==3 then self.Orientation=pw*1 elseif cy==4 then self.HideFromAI=ToBoolean(pw)end end;function B_Reward_CreateEntity:CustomFunction(bl)if not IsExisting(self.ScriptNameEntity)then return false end;local aF=GetPosition(self.ScriptNameEntity)local dG;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then dG=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aF.X,aF.Y,self.Orientation,self.PlayerID,1)local qf,aW=Logic.GetSoldiersAttachedToLeader(dG)Logic.SetOrientation(aW,math.floor(self.Orientation+0.5))else dG=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aF.X,aF.Y,self.Orientation,self.PlayerID)end;local q8=GetID(self.ScriptNameEntity)if Logic.IsBuilding(q8)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(dG,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dG,true)end end;function B_Reward_CreateEntity:GetCustomData(cy)local bd={}if cy==2 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local ls=false;for f=1,#t do if g:find(t[f])then ls=true;break end end;if not ls then table.insert(bd,g)end end;table.sort(bd)elseif cy==4 or cy==5 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_CreateEntity:Debug(bl)if not Entities[self.UnitKey]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then debug(false,bl.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(cy,pw)if cy==0 then self.Amount=pw*1 elseif cy==1 then self.ScriptNameEntity=pw elseif cy==2 then self.PlayerID=pw*1 elseif cy==3 then self.UnitKey=pw elseif cy==4 then self.Orientation=pw*1 elseif cy==5 then self.HideFromAI=ToBoolean(pw)end end;function B_Reward_CreateSeveralEntities:CustomFunction(bl)if not IsExisting(self.ScriptNameEntity)then return false end;local aF=GetPosition(self.ScriptNameEntity)local dG;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then dG=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aF.X,aF.Y,self.Orientation,self.PlayerID,1)local qf,aW=Logic.GetSoldiersAttachedToLeader(dG)Logic.SetOrientation(aW,math.floor(self.Orientation+0.5))else dG=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aF.X,aF.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(dG,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,dG,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(cy)local bd={}if cy==3 then for g,h in pairs(Entities)do local t={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local ls=false;for f=1,#t do if g:find(t[f])then ls=true;break end end;if not ls then table.insert(bd,g)end end;table.sort(bd)elseif cy==5 or cy==6 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_CreateSeveralEntities:Debug(bl)if not Entities[self.UnitKey]then debug(false,bl.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then debug(false,bl.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(cy,pw)if cy==0 then self.ScriptNameUnit=pw elseif cy==1 then self.ScriptNameDest=pw end end;function B_Reward_MoveSettler:CustomFunction(bl)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local qg=GetID(self.ScriptNameDest)local qh,qi=Logic.GetEntityPosition(qg)if Logic.IsBuilding(qg)==1 then qh,qi=Logic.GetBuildingApproachPosition(qg)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),qh,qi)end;function B_Reward_MoveSettler:Debug(bl)if not IsExisting(self.ScriptNameUnit)then debug(false,bl.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then debug(false,bl.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(bl)bl:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(bl.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(cy,pw)if cy==0 then self.AIPlayerID=pw*1 elseif cy==1 then self.Spawnpoint=pw elseif cy==2 then self.TerritoryID=tonumber(pw)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(pw)end elseif cy==3 then self.NumSword=pw*1 elseif cy==4 then self.NumBow=pw*1 elseif cy==5 then self.NumCatapults=pw*1 elseif cy==6 then self.NumSiegeTowers=pw*1 elseif cy==7 then self.NumRams=pw*1 elseif cy==8 then self.NumAmmoCarts=pw*1 elseif cy==9 then if pw=="Normal"or pw==false then self.TroopType=false elseif pw=="RedPrince"or pw==true then self.TroopType=true elseif pw=="Bandit"or pw==2 then self.TroopType=2 elseif pw=="Cultist"or pw==3 then self.TroopType=3 else assert(false)end elseif cy==10 then self.ReuseTroops=ToBoolean(pw)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(cy)local bd={}if cy==9 then table.insert(bd,"Normal")table.insert(bd,"RedPrince")table.insert(bd,"Bandit")if g_GameExtraNo>=1 then table.insert(bd,"Cultist")end elseif cy==10 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(bl)local kI=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if kI~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,kI,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(bl)if self.AIPlayerID<2 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bl.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then debug(false,bl.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bl.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then debug(false,bl.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then debug(false,bl.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then debug(false,bl.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then debug(false,bl.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(cy,pw)if cy==0 then self.AIPlayerID=pw*1 elseif cy==1 then self.Spawnpoint=pw elseif cy==2 then self.TargetName=pw elseif cy==3 then self.Radius=pw*1 elseif cy==4 then self.NumSword=pw*1 elseif cy==5 then self.NumBow=pw*1 elseif cy==6 then if pw=="Normal"or pw==false then self.TroopType=false elseif pw=="RedPrince"or pw==true then self.TroopType=true elseif pw=="Bandit"or pw==2 then self.TroopType=2 elseif pw=="Cultist"or pw==3 then self.TroopType=3 else assert(false)end elseif cy==7 then self.ReuseTroops=ToBoolean(pw)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(cy)local bd={}if cy==6 then table.insert(bd,"Normal")table.insert(bd,"RedPrince")table.insert(bd,"Bandit")if g_GameExtraNo>=1 then table.insert(bd,"Cultist")end elseif cy==7 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(bl)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local kI=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,kI,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(bl)if self.AIPlayerID<2 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bl.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bl.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bl.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bl.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(cy,pw)if cy==0 then self.AIPlayerID=pw*1 elseif cy==1 then self.Spawnpoint=pw elseif cy==2 then self.TargetName=pw elseif cy==3 then self.Radius=pw*1 elseif cy==4 then self.Time=pw*1 elseif cy==5 then self.NumSword=pw*1 elseif cy==6 then self.NumBow=pw*1 elseif cy==7 then self.CaptureTradeCarts=ToBoolean(pw)elseif cy==8 then if pw=="Normal"or pw==true then self.TroopType=false elseif pw=="RedPrince"or pw==false then self.TroopType=true elseif pw=="Bandit"or pw==2 then self.TroopType=2 elseif pw=="Cultist"or pw==3 then self.TroopType=3 else assert(false)end elseif cy==9 then self.ReuseTroops=ToBoolean(pw)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(cy)local bd={}if cy==7 then table.insert(bd,"false")table.insert(bd,"true")elseif cy==8 then table.insert(bd,"Normal")table.insert(bd,"RedPrince")table.insert(bd,"Bandit")if g_GameExtraNo>=1 then table.insert(bd,"Cultist")end elseif cy==9 then table.insert(bd,"false")table.insert(bd,"true")else assert(false)end;return bd end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(bl)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local kI=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,kI,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(bl)if self.AIPlayerID<2 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bl.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bl.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bl.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then debug(false,bl.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bl.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bl.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(cy,pw)if cy==0 then self.AIPlayerID=pw*1 elseif cy==1 then local qj={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=qj[pw]elseif cy==2 then self.Value=pw*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(bl)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(cy)if cy==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(bl)if Logic.GetStoreHouse(self.AIPlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then debug(false,bl.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then debug(false,bl.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then debug(false,bl.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then debug(false,bl.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(cy,pw)if cy==0 then self.AIPlayer=pw*1 elseif cy==1 then self.Aggressiveness=tonumber(pw)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local aG=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)assert(aG~=nil)PlayerAIs[self.AIPlayer]=aG;if self.Aggressiveness>=2 then aG.ProfileLoop=AIProfile_Skirmish;aG.Skirmish=aG.Skirmish or{}aG.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;aG.Skirmish.Claim_MaxTime=aG.Skirmish.Claim_MinTime*2 else aG.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(bl)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(cy)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(cy,pw)if cy==0 then self.AIPlayer=pw*1 elseif cy==1 then self.Enemy=pw*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local aG=PlayerAIs[self.AIPlayer]if aG and aG.Skirmish then aG.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(bl)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then debug(false,bl.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw elseif cy==1 then self.Amount=pw*1 end end;function B_Reward_SetResourceAmount:CustomFunction(bl)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local B=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(B)==0 then return false end;Logic.SetResourceDoodadGoodAmount(B,self.Amount)end;function B_Reward_SetResourceAmount:Debug(bl)if not IsExisting(self.ScriptName)then debug(false,bl.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then debug(false,bl.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(cy,pw)if cy==0 then self.GoodTypeName=pw elseif cy==1 then self.GoodAmount=pw*1 end end;function B_Reward_Resources:GetRewardTable()local fD=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,fD,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(cy,pw)if cy==0 then self.ScriptNameEntity=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then self.UnitKey=pw elseif cy==3 then self.GoodType=pw elseif cy==4 then self.GoodAmount=pw*1 elseif cy==5 then self.OverrideTargetPlayer=tonumber(pw)elseif cy==6 then self.IgnoreReservation=ToBoolean(pw)elseif cy==7 then self.ReplaceEntity=ToBoolean(pw)end end;function B_Reward_SendCart:CustomFunction(bl)if not IsExisting(self.ScriptNameEntity)then return false end;local al=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(al,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(al,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(cy)local bd={}if cy==2 then bd={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif cy==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bd,g)end end;table.sort(bd)elseif cy==5 then table.insert(bd,"-")for f=1,8 do table.insert(bd,f)end elseif cy==6 then table.insert(bd,"false")table.insert(bd,"true")elseif cy==7 then table.insert(bd,"false")table.insert(bd,"true")end;return bd end;function B_Reward_SendCart:Debug(bl)if not IsExisting(self.ScriptNameEntity)then debug(false,bl.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bl.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then debug(false,bl.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then debug(false,bl.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then debug(false,bl.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then debug(false,bl.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(cy,pw)if cy==0 then self.EntityName=pw elseif cy==1 then self.Amount=pw*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(cy,pw)if cy==0 then self.Points=pw end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(cy,pw)if cy==0 then self.Scriptname=pw else self.SoldiersType=pw end end;function B_Reward_AI_MountOutpost:CustomFunction(bl)local qk=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),bl.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local ql=Logic.EntityGetPlayer(qk)local qm,qn=Logic.GetBuildingApproachPosition(qk)local qo=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],qm,qn,0,ql,0)AICore.HideEntityFromAI(ql,qo,true)Logic.CommandEntityToMountBuilding(qo,qk)end;function B_Reward_AI_MountOutpost:GetCustomData(cy)if cy==1 then local bd={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then bd[#bd+1]=g end end;return bd end end;function B_Reward_AI_MountOutpost:Debug(bl)if Logic.IsEntityDestroyed(self.Scriptname)then debug(false,bl.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(cy,pw)self.QuestName=pw end;function B_Reward_QuestRestartForceActive:CustomFunction(bl)local bD,bj=self:ResetQuest(bl)if bD then bj:SetMsgKeyOverride()bj:SetIconOverride()bj:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(bl)if not Quests[GetQuestID(self.QuestName)]then debug(false,bl.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(cy,pw)if cy==0 then self.Building=pw end end;function B_Reward_UpgradeBuilding:CustomFunction(bl)local qp=GetID(self.Building)if qp~=0 and Logic.IsBuilding(qp)==1 and Logic.IsBuildingUpgradable(qp,true)and Logic.IsBuildingUpgradable(qp,false)then Logic.UpgradeBuilding(qp)end end;function B_Reward_UpgradeBuilding:Debug(bl)local qp=GetID(self.Building)if not(qp~=0 and Logic.IsBuilding(qp)==1 and Logic.IsBuildingUpgradable(qp,true)and Logic.IsBuildingUpgradable(qp,false))then debug(false,bl.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(cy,pw)if cy==0 then self.Building=pw elseif cy==1 then self.UpgradeLevel=tonumber(pw)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local qp=Logic.GetEntityIDByName(self.Building)local qq=Logic.GetUpgradeLevel(qp)local qr=Logic.GetMaxUpgradeLevel(qp)if qp~=0 and Logic.IsBuilding(qp)==1 and(Logic.IsBuildingUpgradable(qp,true)or qr~=0 and qr==qq)then Logic.SetUpgradableBuildingState(qp,math.min(self.UpgradeLevel,qr),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(bl)local qp=Logic.GetEntityIDByName(self.Building)if not qp or Logic.IsBuilding(qp)==0 then debug(false,bl.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then debug(false,bl.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(cy)if cy==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.DiplState=pw end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.Need=pw elseif cy==2 then self.WorkersOnStrike=pw*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(bl)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(bl)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then debug(false,bl.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then debug(false,bl.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(cy,pw)if cy==0 then self.ScriptName=pw end end;function B_Trigger_OnResourceDepleted:CustomFunction(bl)local al=GetID(self.ScriptName)return not al or al==0 or Logic.GetResourceDoodadGoodType(al)==0 or Logic.GetResourceDoodadGoodAmount(al)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(cy,pw)if cy==0 then self.PlayerID=pw*1 elseif cy==1 then self.GoodTypeName=pw elseif cy==2 then self.GoodAmount=pw*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(bl)local cY=Logic.GetStoreHouse(self.PlayerID)if cY==0 then return false end;local fD=Logic.GetGoodTypeID(self.GoodTypeName)local hM=Logic.GetAmountOnOutStockByGoodType(cY,fD)if hM>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(bl)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bl.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then debug(false,bl.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then debug(false,bl.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.WaitTime=pw~=nil and tonumber(pw)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(bl)local bD=GetQuestID(self.QuestName)if bD~=nil then assert(type(bD)=="number")if Quests[bD].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bl.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(bl)end;function B_Trigger_OnQuestActiveWait:Reset(bl)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(cy,pw)if cy==0 then self.QuestName=pw;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.WaitTime=pw~=nil and tonumber(pw)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)if Quests[bD].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bl.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(bl)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(bl)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(cy,pw)if cy==0 then self.QuestName=pw;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(cy,pw)if cy==0 then self.QuestName=pw end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)if Quests[bD].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.WaitTime=pw~=nil and tonumber(pw)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)if Quests[bD].State==QuestState.Over and Quests[bD].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bl.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(bl)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(bl)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(cy,pw)if cy==0 then self.QuestName=pw;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.WaitTime=pw~=nil and tonumber(pw)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(bl)if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)if Quests[bD].State==QuestState.Over and Quests[bD].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bl.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(bl)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(bl)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(cy,pw)if cy==0 then self.QuestName=pw;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(cy,pw)if cy==0 then self.QuestName=pw elseif cy==1 then self.WaitTime=pw~=nil and tonumber(pw)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bD=GetQuestID(self.QuestName)if Quests[bD].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(bl)if type(self.QuestName)~="string"then debug(false,bl.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bl.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(bl)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(bl)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(cy,pw)if cy==0 then self.QuestName=pw;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(cy,pw)if cy==0 then self.VariableName=pw elseif cy==1 then self.Relation=pw elseif cy==2 then local pP=tonumber(pw)pP=pP~=nil and pP or pw;self.Value=pP end end;function B_Trigger_CustomVariables:CustomFunction()local pQ=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local pR=self.Value;if type(self.Value)=="string"then pR=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return pQ==pR elseif self.Relation~="~="then return pQ~=pR elseif self.Relation==">"then return pQ>pR elseif self.Relation==">="then return pQ>=pR elseif self.Relation=="<="then return pQ<=pR else return pQ<pR end;return false end;function B_Trigger_CustomVariables:GetCustomData(cy)if cy==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(bl)local pS={"==","~=","<=","<",">",">="}local pT={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bl.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(pS,self.Relation)then debug(false,bl.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(cy,pw)if cy==0 then self.Month=pw*1 end end;function B_Trigger_OnMonth:CustomFunction(bl)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(cy)local bd={}if cy==0 then for f=1,12 do table.insert(bd,f)end else assert(false)end;return bd end;function B_Trigger_OnMonth:Debug(bl)if self.Month<1 or self.Month>12 then debug(false,bl.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(bl)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(cy,pw)if cy==0 then self.Time=pw*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(bl)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(cy,pw)self.QuestTable={}if cy==0 then self.Quest1=pw elseif cy==1 then self.Quest2=pw end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(bl)local qs=Quests[GetQuestID(self.Quest1)]local qt=Quests[GetQuestID(self.Quest2)]if qs.State==QuestState.Over and qs.Result==QuestResult.Failure or qt.State==QuestState.Over and qt.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(bl)if self.Quest1==self.Quest2 then debug(false,bl.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bl.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bl.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(cy,pw)self.QuestTable={}if cy==0 then self.Quest1=pw elseif cy==1 then self.Quest2=pw end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(bl)local qs=Quests[GetQuestID(self.Quest1)]local qt=Quests[GetQuestID(self.Quest2)]if qs.State==QuestState.Over and qs.Result==QuestResult.Success or qt.State==QuestState.Over and qt.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(bl)if self.Quest1==self.Quest2 then debug(false,bl.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bl.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bl.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(cy,pw)if cy==0 then self.LeastAmount=tonumber(pw)elseif cy==1 then self.QuestAmount=tonumber(pw)elseif cy==2 then self.QuestName1=pw elseif cy==3 then self.QuestName2=pw elseif cy==4 then self.QuestName3=pw elseif cy==5 then self.QuestName4=pw elseif cy==6 then self.QuestName5=pw end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local qu=0;for f=1,self.QuestAmount do local bD=GetQuestID(self["QuestName"..f])if IsValidQuest(bD)then if Quests[bD].Result==QuestResult.Success then qu=qu+1;if qu>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(bl)local qv=self.LeastAmount;local qw=self.QuestAmount;if qv<=0 or qv>5 then debug(false,bl.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif qw<=0 or qw>5 then debug(false,bl.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif qv>qw then debug(false,bl.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,qw do if not IsValidQuest(self["QuestName"..f])then debug(false,bl.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(cy)if cy==0 or cy==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(bl)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(cy,pw)if cy==0 then self.FuncName=pw end end;function B_Trigger_MapScriptFunction:CustomFunction(bl)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bl)end;function B_Trigger_MapScriptFunction:Debug(bl)if not self.FuncName then debug(false,bl.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bl.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(cy,pw)if cy==0 then self.EffectName=pw end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(bl)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bl.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)function Goal_NPC(qx,qy)return B_Goal_NPC:new(qx,qy)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(cy,pw)if cy==0 then self.NPC=pw elseif cy==1 then self.Hero=pw;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(cy,pw)if cy==0 then assert(pw~=nil and pw~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if pw~=nil and pw~=""then table.insert(self.ScriptNames,pw)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,bl)local B=GetID(self.ScriptName)if B==0 then return end;CONST_INITIALIZED_OBJECTS[B]=bl.Identifier;local qz;if self.RewardType and self.RewardType~="-"then qz={Goods[self.RewardType],self.RewardAmount}end;local qA;if self.FirstCostType and self.FirstCostType~="-"then qA=qz or{}table.insert(qA,Goods[self.FirstCostType])table.insert(qA,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then qA=qz or{}table.insert(qA,Goods[self.SecondCostType])table.insert(qA,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=qz,Costs=qA}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function Goal_WinQuest(...)return B_Goal_WinQuest:new(...)end;B_Goal_WinQuest={Name="Goal_WinQuest",Description={en="Goal: The player has to win a given quest.",de="Ziel: Der Spieler muss eine angegebene Quest erfolgreich abschliessen.",fr="Objectif: Le joueur doit réussir une quête indiquée."},Parameter={{ParameterType.QuestName,en="Quest Name",de="Questname",fr="Nom de la quête"}}}function B_Goal_WinQuest:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_WinQuest:AddParameter(cy,pw)if cy==0 then self.Quest=pw end end;function B_Goal_WinQuest:CustomFunction(bl)local qB=Quests[GetQuestID(self.Quest)]if qB then if qB.Result==QuestResult.Failure then return false end;if qB.Result==QuestResult.Success then return true end end;return nil end;function B_Goal_WinQuest:Debug(bl)if Quests[GetQuestID(self.Quest)]==nil then error(bl.Identifier..": "..self.Name..": Quest '"..self.Quest.."' does not exist!")return true end;return false end;RegisterBehavior(B_Goal_WinQuest)function Trigger_OnAtLeastXOfYQuestsFailed(...)return B_Trigger_OnAtLeastXOfYQuestsFailed:new(...)end;B_Trigger_OnAtLeastXOfYQuestsFailed={Name="Trigger_OnAtLeastXOfYQuestsFailed",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests fehlgeschlagen sind.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont échoué."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsFailed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsFailed:AddParameter(cy,pw)if cy==0 then self.LeastAmount=tonumber(pw)elseif cy==1 then self.QuestAmount=tonumber(pw)elseif cy==2 then self.QuestName1=pw elseif cy==3 then self.QuestName2=pw elseif cy==4 then self.QuestName3=pw elseif cy==5 then self.QuestName4=pw elseif cy==6 then self.QuestName5=pw end end;function B_Trigger_OnAtLeastXOfYQuestsFailed:CustomFunction()local qu=0;for f=1,self.QuestAmount do local bD=GetQuestID(self["QuestName"..f])if IsValidQuest(bD)then if Quests[bD].Result==QuestResult.Failure then qu=qu+1;if qu>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:Debug(bl)local qv=self.LeastAmount;local qw=self.QuestAmount;if qv<=0 or qv>5 then error(bl.Identifier..":"..self.Name..": LeastAmount is wrong")return true elseif qw<=0 or qw>5 then error(bl.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif qv>qw then error(bl.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,qw do if not IsValidQuest(self["QuestName"..f])then error(bl.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:GetCustomData(cy)if cy==0 or cy==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsFailed)function Trigger_OnExactOneQuestIsWon(...)return B_Trigger_OnExactOneQuestIsWon:new(...)end;B_Trigger_OnExactOneQuestIsWon={Name="Trigger_OnExactOneQuestIsWon",Description={en="Trigger: if one of two given quests has been finished successfully, but NOT both.",de="Auslöser: wenn eine von zwei angegebenen Quests (aber NICHT beide) erfolgreich abgeschlossen wurde.",fr="Déclencheur: lorsque l'une des deux quêtes indiquées (mais PAS les deux) a été accomplie avec succès."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsWon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsWon:AddParameter(cy,pw)self.QuestTable={}if cy==0 then self.Quest1=pw elseif cy==1 then self.Quest2=pw end end;function B_Trigger_OnExactOneQuestIsWon:CustomFunction(bl)local qs=Quests[GetQuestID(self.Quest1)]local qt=Quests[GetQuestID(self.Quest2)]if qt and qs then local qC=qs.State==QuestState.Over and qs.Result==QuestResult.Success;local qD=qt.State==QuestState.Over and qt.Result==QuestResult.Success;if qC and not qD or not qC and qD then return true end end;return false end;function B_Trigger_OnExactOneQuestIsWon:Debug(bl)if self.Quest1==self.Quest2 then error(bl.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bl.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bl.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsWon)function Trigger_OnExactOneQuestIsLost(...)return B_Trigger_OnExactOneQuestIsLost:new(...)end;B_Trigger_OnExactOneQuestIsLost={Name="Trigger_OnExactOneQuestIsLost",Description={en="Trigger: If one of two given quests has been lost, but NOT both.",de="Auslöser: Wenn einer von zwei angegebenen Quests (aber NICHT beide) fehlschlägt.",fr="Déclencheur: Si l'une des deux quêtes indiquées (mais PAS les deux) échoue."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsLost:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsLost:AddParameter(cy,pw)self.QuestTable={}if cy==0 then self.Quest1=pw elseif cy==1 then self.Quest2=pw end end;function B_Trigger_OnExactOneQuestIsLost:CustomFunction(bl)local qs=Quests[GetQuestID(self.Quest1)]local qt=Quests[GetQuestID(self.Quest2)]if qt and qs then local qC=qs.State==QuestState.Over and qs.Result==QuestResult.Failure;local qD=qt.State==QuestState.Over and qt.Result==QuestResult.Failure;if qC and not qD or not qC and qD then return true end end;return false end;function B_Trigger_OnExactOneQuestIsLost:Debug(bl)if self.Quest1==self.Quest2 then error(bl.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bl.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bl.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsLost)function Goal_MoveToPosition(...)return B_Goal_MoveToPosition:new(...)end;B_Goal_MoveToPosition={Name="Goal_MoveToPosition",Description={en="Goal: A entity have to moved as close as the distance to another entity. The target can be marked with a static marker.",de="Ziel: Ein Entity muss sich einer anderen bis auf eine bestimmte Distanz nähern. Die Lupe wird angezeigt, das Ziel kann markiert werden.",fr="Objectif: une entité doit s'approcher d'une autre à une distance donnée. La loupe est affichée, la cible peut être marquée."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Custom,en="Marker",de="Ziel markieren",fr="Marquer la cible"}}}function B_Goal_MoveToPosition:GetGoalTable()return{Objective.Distance,self.Entity,self.Target,self.Distance,self.Marker}end;function B_Goal_MoveToPosition:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Target=pw elseif cy==2 then self.Distance=pw*1 elseif cy==3 then self.Marker=ToBoolean(pw)end end;function B_Goal_MoveToPosition:GetCustomData(cy)local bd={}if cy==3 then bd={"true","false"}end;return bd end;RegisterBehavior(B_Goal_MoveToPosition)function Goal_AmmunitionAmount(...)return B_Goal_AmmunitionAmount:new(...)end;B_Goal_AmmunitionAmount={Name="Goal_AmmunitionAmount",Description={en="Goal: Reach a smaller or bigger value than the given amount of ammunition in a war machine.",de="Ziel: Über- oder unterschreite die angegebene Anzahl Munition in einem Kriegsgerät.",fr="Objectif : Dépasser ou ne pas dépasser le nombre de munitions indiqué dans un engin de guerre."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_AmmunitionAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_AmmunitionAmount:AddParameter(cy,pw)if cy==0 then self.Scriptname=pw elseif cy==1 then self.bRelSmallerThan=tostring(pw)=="true"or pw=="<"elseif cy==2 then self.Amount=pw*1 end end;function B_Goal_AmmunitionAmount:CustomFunction()local B=GetID(self.Scriptname)if not IsExisting(B)then return false end;local pO=Logic.GetAmmunitionAmount(B)if self.bRelSmallerThan and pO<self.Amount or not self.bRelSmallerThan and pO>=self.Amount then return true end;return nil end;function B_Goal_AmmunitionAmount:Debug(bl)if self.Amount<0 then error(bl.Identifier..": "..self.Name..": Amount is negative")return true end end;function B_Goal_AmmunitionAmount:GetCustomData(cy)if cy==1 then return{"<",">="}end end;RegisterBehavior(B_Goal_AmmunitionAmount)function Goal_CityReputation(...)return B_Goal_CityReputation:new(...)end;B_Goal_CityReputation={Name="Goal_CityReputation",Description={en="Goal: The reputation of the quest receivers city must at least reach the desired hight.",de="Ziel: Der Ruf der Stadt des Empfängers muss mindestens so hoch sein, wie angegeben.",fr="Objectif: la réputation de la ville du receveur doit être au moins aussi élevée que celle indiquée."},Parameter={{ParameterType.Number,en="City reputation",de="Ruf der Stadt",fr="Réputation de la ville"}},Text={de="RUF DER STADT{cr}{cr}Hebe den Ruf der Stadt durch weise Herrschaft an!{cr}Benötigter Ruf: %d",en="CITY REPUTATION{cr}{cr}Raise your reputation by fair rulership!{cr}Needed reputation: %d",fr="RÉPUTATION DE LA VILLE{cr}{cr} Augmente la réputation de la ville en la gouvernant sagement!{cr}Réputation requise : %d"}}function B_Goal_CityReputation:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CityReputation:AddParameter(cy,pw)if cy==0 then self.Reputation=pw*1 end end;function B_Goal_CityReputation:CustomFunction(bl)self:SetCaption(bl)local qE=Logic.GetCityReputation(bl.ReceivingPlayer)*100;if qE>=self.Reputation then return true end end;function B_Goal_CityReputation:SetCaption(bl)if not bl.QuestDescription or bl.QuestDescription==""then local cb=string.format(Localize(self.Text),self.Reputation)Lib.Core.Quest:ChangeCustomQuestCaptionText(cb.."%",bl)end end;function B_Goal_CityReputation:GetIcon()return{5,14}end;function B_Goal_CityReputation:Debug(bl)if type(self.Reputation)~="number"or self.Reputation<0 or self.Reputation>100 then error(bl.Identifier..": "..self.Name..": Reputation must be between 0 and 100!")return true end;return false end;RegisterBehavior(B_Goal_CityReputation)function Goal_DestroySpawnedEntities(...)return B_Goal_DestroySpawnedEntities:new(...)end;B_Goal_DestroySpawnedEntities={Name="Goal_DestroySpawnedEntities",Description={en="Goal: Destroy all entities spawned at the spawnpoint.",de="Ziel: Zerstöre alle Entitäten, die bei dem Spawnpoint erzeugt wurde.",fr="Objectif: Détruire toutes les entités créées au point d'apparition."},Parameter={{ParameterType.ScriptName,en="Spawnpoint",de="Spawnpoint",fr="Point d'émergence"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Custom,en="Name is prefixed",de="Name ist Präfix",fr="Le nom est un préfixe"}}}function B_Goal_DestroySpawnedEntities:GetGoalTable()if self.Prefixed then local bb=table.remove(self.SpawnPoint)local f=1;while IsExisting(bb..f)do table.insert(self.SpawnPoint,bb..f)f=f+1 end;assert(#self.SpawnPoint>0,"No spawnpoints found!")end;return{Objective.DestroyEntities,3,self.SpawnPoint,self.Amount}end;function B_Goal_DestroySpawnedEntities:AddParameter(cy,pw)if cy==0 then self.SpawnPoint={pw}elseif cy==1 then self.Amount=pw*1 elseif cy==2 then pw=pw or"false"self.Prefixed=ToBoolean(pw)end end;function B_Goal_DestroySpawnedEntities:GetMsgKey()local al=GetID(self.SpawnPoint[1])if al~=0 then local fI=Logic.GetEntityTypeName(Logic.GetEntityType(al))if Logic.IsEntityTypeInCategory(al,EntityCategories.AttackableBuilding)==1 then return"Quest_Destroy_Leader"elseif fI:find("Bear")or fI:find("Lion")or fI:find("Tiger")or fI:find("Wolf")then return"Quest_DestroyEntities_Predators"elseif fI:find("Military")or fI:find("Cart")then return"Quest_DestroyEntities_Unit"end end;return"Quest_DestroyEntities"end;function B_Goal_DestroySpawnedEntities:GetCustomData(cy)if cy==2 then return{"false","true"}end end;RegisterBehavior(B_Goal_DestroySpawnedEntities)function Goal_StealGold(...)return B_Goal_StealGold:new(...)end;B_Goal_StealGold={Name="Goal_StealGold",Description={en="Goal: Steal an explicit amount of gold from a players or any players city buildings.",de="Ziel: Diebe sollen eine bestimmte Menge Gold aus feindlichen Stadtgebäuden stehlen.",fr="Objectif: les voleurs doivent dérober une certaine quantité d'or dans les bâtiments urbains ennemis."},Parameter={{ParameterType.Number,en="Amount on Gold",de="Zu stehlende Menge",fr="Quantité à voler"},{ParameterType.Custom,en="Target player",de="Spieler von dem gestohlen wird",fr="Joueur à qui l'on vole"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Print progress",de="Fortschritt ausgeben",fr="Afficher les progrès"}}}function B_Goal_StealGold:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealGold:AddParameter(cy,pw)if cy==0 then self.Amount=pw*1 elseif cy==1 then local n=tonumber(pw)or-1;self.Target=n*1 elseif cy==2 then pw=pw or"false"self.CheatEarnings=ToBoolean(pw)elseif cy==3 then pw=pw or"true"self.Printout=ToBoolean(pw)end;self.StohlenGold=0 end;function B_Goal_StealGold:GetCustomData(cy)if cy==1 then return{"-",1,2,3,4,5,6,7,8}elseif cy==2 then return{"true","false"}end end;function B_Goal_StealGold:SetDescriptionOverwrite(bl)local qF=Localize({de=" anderen Spielern ",en=" different parties ",fr=" d'autres joueurs "})if self.Target~=-1 then qF=GetPlayerName(self.Target)if qF==nil or qF==""then qF=" PLAYER_NAME_MISSING "end end;if self.CheatEarnings then local qG={self.Target}if self.Target==-1 then qG={1,2,3,4,5,6,7,8}end;for f=1,#qG,1 do if f~=bl.ReceivingPlayer and Logic.GetStoreHouse(f)~=0 then local hS={Logic.GetPlayerEntitiesInCategory(f,EntityCategories.CityBuilding)}for bO=1,#hS,1 do local qH=Logic.GetBuildingProductEarnings(hS[bO])if qH<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(hS[bO],qH+1)end end end end end;local pL=self.Amount-self.StohlenGold;pL=pL>0 and pL or 0;local eM={de="Gold von %s stehlen {cr}{cr}Aus Stadtgebäuden zu stehlende Goldmenge: %d",en="Steal gold from %s {cr}{cr}Amount on gold to steal from city buildings: %d",fr="Voler l'or de %s {cr}{cr}Quantité d'or à voler dans les bâtiments de la ville : %d"}return"{center}"..string.format(Localize(eM),qF,pL)end;function B_Goal_StealGold:CustomFunction(bl)Lib.Core.Quest:ChangeCustomQuestCaptionText(self:SetDescriptionOverwrite(bl),bl)if self.StohlenGold>=self.Amount then return true end;return nil end;function B_Goal_StealGold:GetIcon()return{5,13}end;function B_Goal_StealGold:Debug(bl)if tonumber(self.Amount)==nil and self.Amount<0 then error(bl.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;function B_Goal_StealGold:Reset(bl)self.StohlenGold=0 end;RegisterBehavior(B_Goal_StealGold)function Goal_StealFromBuilding(...)return B_Goal_StealFromBuilding:new(...)end;B_Goal_StealFromBuilding={Name="Goal_StealFromBuilding",Description={en="Goal: The player has to steal from a building. Not a castle and not a village storehouse!",de="Ziel: Der Spieler muss ein bestimmtes Gebäude bestehlen. Dies darf keine Burg und kein Dorflagerhaus sein!",fr="Objectif: Le joueur doit voler un bâtiment spécifique. Il ne peut s'agir ni d'un château ni d'un entrepôt de village !"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"}}}function B_Goal_StealFromBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealFromBuilding:AddParameter(cy,pw)if cy==0 then self.Building=pw elseif cy==1 then pw=pw or"false"self.CheatEarnings=ToBoolean(pw)end;self.RobberList={}end;function B_Goal_StealFromBuilding:GetCustomData(cy)if cy==1 then return{"true","false"}end end;function B_Goal_StealFromBuilding:SetDescriptionOverwrite(bl)local lu=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Cathedrals)==1;local lv=Logic.GetEntityType(GetID(self.Building))==Entities.B_StoreHouse;local lt=Logic.GetEntityType(GetID(self.Building))==Entities.B_Cistern;local eM;if lu then eM={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert die markierte Kirche.",en="Sabotage {cr}{cr} Send a thief to sabotage the marked chapel.",fr="Sabotage {cr}{cr} Envoyez un voleur pour saboter la chapelle marquée."}elseif lv then eM={de="Lagerhaus bestehlen {cr}{cr} Sendet einen Dieb in das markierte Lagerhaus.",en="Steal from storehouse {cr}{cr} Steal from the marked storehouse.",fr="Voler un entrepôt {cr}{cr} Envoie un voleur dans l'entrepôt marqué."}elseif lt then eM={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert den markierten Brunnen.",en="Sabotage {cr}{cr} Send a thief and break the marked well of the enemy.",fr="Sabotage {cr}{cr} Envoie un voleur et sabote le puits marqué."}else eM={de="Gebäude bestehlen {cr}{cr} Sendet einen Dieb und bestehlt das markierte Gebäude.",en="Steal from building {cr}{cr} Send a thief to steal from the marked building.",fr="Voler un bâtiment {cr}{cr} Envoie un voleur et vole le bâtiment marqué."}end;return"{center}"..Localize(eM)end;function B_Goal_StealFromBuilding:CustomFunction(bl)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aF=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aF.X,aF.Y,0)end;if self.CheatEarnings then local hW=GetID(self.Building)local qH=Logic.GetBuildingProductEarnings(hW)if Logic.IsEntityInCategory(hW,EntityCategories.CityBuilding)==1 and qH<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(hW,qH+1)end end;if self.SuccessfullyStohlen then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_StealFromBuilding:GetIcon()return{5,13}end;function B_Goal_StealFromBuilding:Debug(bl)local qI=Logic.GetEntityTypeName(Logic.GetEntityType(GetID(self.Building)))local qJ=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Headquarters)==1;if Logic.IsBuilding(GetID(self.Building))==0 then error(bl.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bl.Identifier..": "..self.Name..": target is destroyed :(")return true elseif string.find(qI,"B_NPC_BanditsHQ")or string.find(qI,"B_NPC_Cloister")or string.find(qI,"B_NPC_StoreHouse")then error(bl.Identifier..": "..self.Name..": village storehouses are not allowed!")return true elseif qJ then error(bl.Identifier..": "..self.Name..": use Goal_StealInformation for headquarters!")return true end;return false end;function B_Goal_StealFromBuilding:Reset(bl)self.SuccessfullyStohlen=false;self.RobberList={}self.Marker=nil end;function B_Goal_StealFromBuilding:Interrupt(bl)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_StealFromBuilding)function Goal_SpyOnBuilding(...)return B_Goal_SpyOnBuilding:new(...)end;B_Goal_SpyOnBuilding={Name="Goal_SpyOnBuilding",IconOverwrite={5,13},Description={en="Goal: Infiltrate a building with a thief. A thief must be able to steal from the target building.",de="Ziel: Infiltriere ein Gebäude mit einem Dieb. Nur mit Gebaueden möglich, die bestohlen werden koennen.",fr="Objectif: Infiltrer un bâtiment avec un voleur. Seulement possible avec des bâtiments qui peuvent être volés."},Parameter={{ParameterType.ScriptName,en="Target Building",de="Zielgebäude",fr="Bâtiment cible"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Destroy Thief",de="Dieb löschen",fr="Supprimer le voleur"}}}function B_Goal_SpyOnBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SpyOnBuilding:AddParameter(cy,pw)if cy==0 then self.Building=pw elseif cy==1 then pw=pw or"false"self.CheatEarnings=ToBoolean(pw)elseif cy==2 then pw=pw or"true"self.Delete=ToBoolean(pw)end end;function B_Goal_SpyOnBuilding:GetCustomData(cy)if cy==1 then return{"true","false"}end end;function B_Goal_SpyOnBuilding:SetDescriptionOverwrite(bl)if not bl.QuestDescription then local eM={de="Gebäude infriltrieren {cr}{cr}Spioniere das markierte Gebäude mit einem Dieb aus!",en="Infiltrate building {cr}{cr}Spy on the highlighted buildings with a thief!",fr="Infiltrer un bâtiment {cr}{cr}Espionner le bâtiment marqué avec un voleur!"}return Localize(eM)else return bl.QuestDescription end end;function B_Goal_SpyOnBuilding:CustomFunction(bl)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aF=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aF.X,aF.Y,0)end;if self.CheatEarnings then local hW=GetID(self.Building)if Logic.IsEntityInCategory(hW,EntityCategories.CityBuilding)==1 and Logic.GetBuildingEarnings(hW)<5 then Logic.SetBuildingEarnings(hW,5)end end;if self.Infiltrated then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_SpyOnBuilding:GetIcon()return self.IconOverwrite end;function B_Goal_SpyOnBuilding:Debug(bl)if Logic.IsBuilding(GetID(self.Building))==0 then error(bl.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bl.Identifier..": "..self.Name..": target is destroyed :(")return true end;return false end;function B_Goal_SpyOnBuilding:Reset(bl)self.Infiltrated=false;self.Marker=nil end;function B_Goal_SpyOnBuilding:Interrupt(bl)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_SpyOnBuilding)function Goal_DestroySoldiers(...)return B_Goal_DestroySoldiers:new(...)end;B_Goal_DestroySoldiers={Name="Goal_DestroySoldiers",Description={en="Goal: Destroy a given amount of enemy soldiers",de="Ziel: Zerstöre eine Anzahl gegnerischer Soldaten",fr="Objectif: Détruire un certain nombre de soldats ennemis"},Parameter={{ParameterType.PlayerID,en="Attacking Player",de="Angreifer",fr="Attaquant"},{ParameterType.PlayerID,en="Defending Player",de="Verteidiger",fr="Défenseur"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}},Text={de="{center}SOLDATEN ZERSTÖREN {cr}{cr}von der Partei: %s{cr}{cr}Anzahl: %d",en="{center}DESTROY SOLDIERS {cr}{cr}from faction: %s{cr}{cr}Amount: %d",fr="{center}DESTRUIRE DES SOLDATS {cr}{cr}de la faction: %s{cr}{cr}Nombre : %d"}}function B_Goal_DestroySoldiers:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_DestroySoldiers:AddParameter(cy,pw)if cy==0 then self.AttackingPlayer=pw*1 elseif cy==1 then self.AttackedPlayer=pw*1 elseif cy==2 then self.KillsNeeded=pw*1 end end;function B_Goal_DestroySoldiers:CustomFunction(bl)if not bl.QuestDescription or bl.QuestDescription==""then local s=GetPlayerName(self.AttackedPlayer)or"Player "..self.AttackedPlayer;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Swift.Text:Localize(self.Text),s,self.KillsNeeded),bl)end;local qK=Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(self.AttackingPlayer,self.AttackedPlayer)if self.KillsNeeded<=qK then return true end end;function B_Goal_DestroySoldiers:Debug(bl)if Logic.GetStoreHouse(self.AttackingPlayer)==0 then error(bl.Identifier..": "..self.Name..": Player "..self.AttackinPlayer.." is dead :-(")return true elseif Logic.GetStoreHouse(self.AttackedPlayer)==0 then error(bl.Identifier..": "..self.Name..": Player "..self.AttackedPlayer.." is dead :-(")return true elseif self.KillsNeeded<0 then error(bl.Identifier..": "..self.Name..": Amount negative")return true end end;function B_Goal_DestroySoldiers:GetIcon()return{7,12}end;RegisterBehavior(B_Goal_DestroySoldiers)function Reprisal_SetPosition(...)return B_Reprisal_SetPosition:new(...)end;B_Reprisal_SetPosition={Name="Reprisal_SetPosition",Description={en="Reprisal: Places an entity relative to the position of another. The entity can look the target.",de="Vergeltung: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden.",fr="Rétribution: place une Entity vis-à-vis de l'emplacement d'une autre. L'entité peut être orientée vers la cible."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target position",de="Zielposition",fr="Position cible"},{ParameterType.Custom,en="Face to face",de="Ziel ansehen",fr="Voir la cible"},{ParameterType.Number,en="Distance",de="Zielentfernung",fr="Distance de la cible"}}}function B_Reprisal_SetPosition:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetPosition:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Target=pw elseif cy==2 then self.FaceToFace=ToBoolean(pw)elseif cy==3 then self.Distance=pw~=nil and tonumber(pw)or 100 end end;function B_Reprisal_SetPosition:CustomFunction(bl)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;local qa=GetID(self.Entity)local qL=GetID(self.Target)local I,J,K=Logic.EntityGetPos(qL)if Logic.IsBuilding(qL)==1 then I,J=Logic.GetBuildingApproachPosition(qL)end;local qM=Logic.GetEntityOrientation(qL)+90;if self.FaceToFace then I=I+self.Distance*math.cos(math.rad(qM))J=J+self.Distance*math.sin(math.rad(qM))Logic.DEBUG_SetSettlerPosition(qa,I,J)LookAt(self.Entity,self.Target)else if Logic.IsBuilding(qL)==1 then I,J=Logic.GetBuildingApproachPosition(qL)end;Logic.DEBUG_SetSettlerPosition(qa,I,J)end end;function B_Reprisal_SetPosition:GetCustomData(cy)if cy==2 then return{"true","false"}end end;function B_Reprisal_SetPosition:Debug(bl)if self.FaceToFace then if tonumber(self.Distance)==nil or self.Distance<50 then error(bl.Identifier..": "..self.Name..": Distance is nil or to short!")return true end end;if not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bl.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetPosition)function Reprisal_ChangePlayer(...)return B_Reprisal_ChangePlayer:new(...)end;B_Reprisal_ChangePlayer={Name="Reprisal_ChangePlayer",Description={en="Reprisal: Changes the owner of the entity or a battalion.",de="Vergeltung: Aendert den Besitzer einer Entity oder eines Battalions.",fr="Rétribution : Change le propriétaire d'une entité ou d'un bataillon."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Reprisal_ChangePlayer:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ChangePlayer:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Player=tostring(pw)end end;function B_Reprisal_ChangePlayer:CustomFunction(bl)if not IsExisting(self.Entity)then return end;local bf=GetID(self.Entity)if Logic.IsLeader(bf)==1 then Logic.ChangeSettlerPlayerID(bf,self.Player)else Logic.ChangeEntityPlayerID(bf,self.Player)end end;function B_Reprisal_ChangePlayer:GetCustomData(cy)if cy==1 then return{"0","1","2","3","4","5","6","7","8"}end end;function B_Reprisal_ChangePlayer:Debug(bl)if not IsExisting(self.Entity)then error(bl.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_ChangePlayer)function Reprisal_SetVisible(...)return B_Reprisal_SetVisible:new(...)end;B_Reprisal_SetVisible={Name="Reprisal_SetVisible",Description={en="Reprisal: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst.",fr="Rétribution: fixe la visibilité d'une Entité. S'il s'agit d'un spawn, les Entities spawnées sont également affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Visible",de="Sichtbar",fr="Visible"}}}function B_Reprisal_SetVisible:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVisible:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Visible=ToBoolean(pw)end end;function B_Reprisal_SetVisible:CustomFunction(bl)if not IsExisting(self.Entity)then return end;local bf=GetID(self.Entity)local q1=Logic.EntityGetPlayer(bf)local k9=Logic.GetEntityType(bf)local qN=Logic.GetEntityTypeName(k9)if string.find(qN,"^S_")or string.find(qN,"^B_NPC_Bandits")or string.find(qN,"^B_NPC_Barracks")then local qO={Logic.GetSpawnedEntities(bf)}for f=1,#qO do if Logic.IsLeader(qO[f])==1 then local qP={Logic.GetSoldiersAttachedToLeader(qO[f])}for bO=2,#qP do Logic.SetVisible(qP[bO],self.Visible)end else Logic.SetVisible(qO[f],self.Visible)end end else if Logic.IsLeader(bf)==1 then local qP={Logic.GetSoldiersAttachedToLeader(bf)}for bO=2,#qP do Logic.SetVisible(qP[bO],self.Visible)end else Logic.SetVisible(bf,self.Visible)end end end;function B_Reprisal_SetVisible:GetCustomData(cy)if cy==1 then return{"true","false"}end end;function B_Reprisal_SetVisible:Debug(bl)if not IsExisting(self.Entity)then error(bl.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVisible)function Reprisal_SetVulnerability(...)return B_Reprisal_SetVulnerability:new(...)end;B_Reprisal_SetVulnerability={Name="Reprisal_SetVulnerability",Description={en="Reprisal: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen.",fr="Rétribution: rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les Entities spawnées sont affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Vulnerability",de="Verwundbar",fr="Vulnérabilité"}}}function B_Reprisal_SetVulnerability:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVulnerability:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Vulnerability=ToBoolean(pw)end end;function B_Reprisal_SetVulnerability:CustomFunction(bl)if not IsExisting(self.Entity)then return end;local bf=GetID(self.Entity)local k9=Logic.GetEntityType(bf)local qN=Logic.GetEntityTypeName(k9)local qQ={bf}if string.find(qN,"S_")or string.find(qN,"B_NPC_Bandits")or string.find(qN,"B_NPC_Barracks")then qQ={Logic.GetSpawnedEntities(bf)}end;local qR="MakeInvulnerable"if self.Vulnerability then qR="MakeVulnerable"end;for f=1,#qQ,1 do if Logic.IsLeader(qQ[f])==1 then local aA={Logic.GetSoldiersAttachedToLeader(qQ[f])}for bO=2,#aA,1 do _G[qR](aA[bO])end end;_G[qR](qQ[f])end end;function B_Reprisal_SetVulnerability:GetCustomData(cy)if cy==1 then return{"true","false"}end end;function B_Reprisal_SetVulnerability:Debug(bl)if not IsExisting(self.Entity)then error(bl.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVulnerability)function Reprisal_SetModel(...)return B_Reprisal_SetModel:new(...)end;B_Reprisal_SetModel={Name="Reprisal_SetModel",Description={en="Reprisal: Changes the model of the entity. Be careful, some models crash the game.",de="Vergeltung: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz.",fr="Rétribution: modifie le modèle d'une entité. Attention: certains modèles entraînent un crash."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Model",de="Model",fr="Modèle"}}}function B_Reprisal_SetModel:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetModel:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Model=pw end end;function B_Reprisal_SetModel:CustomFunction(bl)if not IsExisting(self.Entity)then return end;local bf=GetID(self.Entity)Logic.SetModel(bf,Models[self.Model])end;function B_Reprisal_SetModel:GetCustomData(cy)if cy==1 then return Lib.QuestBehavior.Global:GetPossibleModels()end end;function B_Reprisal_SetModel:Debug(bl)if not IsExisting(self.Entity)then error(bl.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;if not Models[self.Model]then error(bl.Identifier..": "..self.Name..": model '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetModel)function Reward_SetPosition(...)return B_Reward_SetPosition:new(...)end;B_Reward_SetPosition=CopyTable(B_Reprisal_SetPosition)B_Reward_SetPosition.Name="Reward_SetPosition"B_Reward_SetPosition.Description.en="Reward: Places an entity relative to the position of another. The entity can look the target."B_Reward_SetPosition.Description.de="Lohn: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden."B_Reward_SetPosition.Description.fr="Récompense: Définit une Entity vis-à-vis de la position d'une autre. L'entité peut être orientée vers la cible."B_Reward_SetPosition.GetReprisalTable=nil;B_Reward_SetPosition.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetPosition)function Reward_ChangePlayer(...)return B_Reward_ChangePlayer:new(...)end;B_Reward_ChangePlayer=CopyTable(B_Reprisal_ChangePlayer)B_Reward_ChangePlayer.Name="Reward_ChangePlayer"B_Reward_ChangePlayer.Description.en="Reward: Changes the owner of the entity or a battalion."B_Reward_ChangePlayer.Description.de="Lohn: Ändert den Besitzer einer Entity oder eines Battalions."B_Reward_ChangePlayer.Description.fr="Récompense: Change le propriétaire d'une entité ou d'un bataillon."B_Reward_ChangePlayer.GetReprisalTable=nil;B_Reward_ChangePlayer.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ChangePlayer)function Reward_MoveToPosition(...)return B_Reward_MoveToPosition:new(...)end;B_Reward_MoveToPosition={Name="Reward_MoveToPosition",Description={en="Reward: Moves an entity relative to another entity. If angle is zero the entities will be standing directly face to face.",de="Lohn: Bewegt eine Entity relativ zur Position einer anderen. Wenn Winkel 0 ist, stehen sich die Entities direkt gegenüber.",fr="Récompense: Déplace une entité par rapport à la position d'une autre. Si l'angle est égal à 0, les entités sont directement opposées."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Number,en="Angle",de="Winkel",fr="Angle"}}}function B_Reward_MoveToPosition:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveToPosition:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Target=pw elseif cy==2 then self.Distance=pw*1 elseif cy==3 then self.Angle=pw*1 end end;function B_Reward_MoveToPosition:CustomFunction(bl)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;self.Angle=self.Angle or 0;local qa=GetID(self.Entity)local qL=GetID(self.Target)local aH=Logic.GetEntityOrientation(qL)local I,J,K=Logic.EntityGetPos(qL)if Logic.IsBuilding(qL)==1 then I,J=Logic.GetBuildingApproachPosition(qL)aH=aH-90 end;I=I+self.Distance*math.cos(math.rad(aH+self.Angle))J=J+self.Distance*math.sin(math.rad(aH+self.Angle))Logic.MoveSettler(qa,I,J)self.EntityMovingJob=RequestJob(function(qS,qT)if Logic.IsEntityMoving(qS)==false then LookAt(qS,qT)return true end end,qa,qL)end;function B_Reward_MoveToPosition:Reset(bl)if self.EntityMovingJob then EndJob(self.EntityMovingJob)end end;function B_Reward_MoveToPosition:Debug(bl)if tonumber(self.Distance)==nil or self.Distance<50 then error(bl.Identifier..": "..self.Name..": Distance is nil or to short!")return true elseif not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bl.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveToPosition)function Reward_VictoryWithParty()return B_Reward_VictoryWithParty:new()end;B_Reward_VictoryWithParty={Name="Reward_VictoryWithParty",Description={en="Reward: (Singleplayer) The player wins the game with an animated festival on the market. Continue playing deleates the festival.",de="Lohn: (Einzelspieler) Der Spieler gewinnt das Spiel mit einer animierten Siegesfeier. Bei weiterspielen wird das Fest gelöscht.",fr="Récompense: (Joueur unique) Le joueur gagne la partie avec une fête de la victoire animée. Si le joueur continue à jouer, la fête est effacée."},Parameter={}}function B_Reward_VictoryWithParty:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_VictoryWithParty:AddParameter(cy,pw)end;function B_Reward_VictoryWithParty:CustomFunction(bl)if Framework.IsNetworkGame()then error(bl.Identifier..": "..self.Name..": Can not be used in multiplayer!")return end;Victory(g_VictoryAndDefeatType.VictoryMissionComplete)local n=bl.ReceivingPlayer;local qU=Logic.GetMarketplace(n)if IsExisting(qU)then local aF=GetPosition(qU)Logic.CreateEffect(EGL_Effects.FXFireworks01,aF.X,aF.Y,0)Logic.CreateEffect(EGL_Effects.FXFireworks02,aF.X,aF.Y,0)local qV=self:GenerateParty(n)Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]=qV;Logic.ExecuteInLuaLocalState(string.format([[
                local MarketID = %d
                if IsExisting(MarketID) then
                    CameraAnimation.AllowAbort = false
                    CameraAnimation.QueueAnimation(CameraAnimation.SetCameraToEntity, MarketID)
                    CameraAnimation.QueueAnimation(CameraAnimation.StartCameraRotation, 5)
                    CameraAnimation.QueueAnimation(CameraAnimation.Stay ,9999)
                end

                GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty = GUI_Window.ContinuePlayingClicked
                GUI_Window.ContinuePlayingClicked = function()
                    GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty()
                    
                    local PlayerID = GUI.GetPlayerID()
                    GUI.SendScriptCommand("B_Reward_VictoryWithParty:ClearParty(" ..PlayerID.. ")")

                    CameraAnimation.AllowAbort = true
                    CameraAnimation.Abort()
                end
            ]],qU))end end;function B_Reward_VictoryWithParty:ClearParty(q)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]then for g,h in pairs(Lib.QuestBehavior.Global.VictoryWithPartyEntities[q])do DestroyEntity(h)end;Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]=nil end end;function B_Reward_VictoryWithParty:GenerateParty(q)local qW={}local qX=Logic.GetMarketplace(q)if qX~=nil and qX~=0 then local qY,qZ=Logic.GetEntityPosition(qX)local al=Logic.CreateEntity(Entities.D_X_Garland,qY,qZ,0,q)table.insert(qW,al)for bO=1,10 do for g=1,10 do local q_=qY-700+bO*150;local r0=qZ-700+g*150;local r1=math.random(1,100)if r1>70 then local r2=GetRandomSettlerType()local W=math.random(1,359)local r3=Logic.CreateEntityOnUnblockedLand(r2,q_,r0,W,q)Logic.SetTaskList(r3,TaskLists.TL_WORKER_FESTIVAL_APPLAUD_SPEECH)table.insert(qW,r3)end end end end;return qW end;function B_Reward_VictoryWithParty:Debug(bl)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[bl.ReceivingPlayer]then error(bl.Identifier..": "..self.Name..": Victory festival already started for player "..bl.ReceivingPlayer.."!")return true end;return false end;RegisterBehavior(B_Reward_VictoryWithParty)function Reward_SetVisible(...)return B_Reward_SetVisible:new(...)end;B_Reward_SetVisible=CopyTable(B_Reprisal_SetVisible)B_Reward_SetVisible.Name="Reward_SetVisible"B_Reward_SetVisible.Description.en="Reward: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVisible.Description.de="Lohn: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst."B_Reward_SetVisible.Description.fr="Récompense: Définit la visibilité d'une Entity. S'il s'agit d'un spawn, les entités spawnées sont également influencées."B_Reward_SetVisible.GetReprisalTable=nil;B_Reward_SetVisible.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVisible)function Reward_SetVulnerability(...)return B_Reward_SetVulnerability:new(...)end;B_Reward_SetVulnerability=CopyTable(B_Reprisal_SetVulnerability)B_Reward_SetVulnerability.Name="Reward_SetVulnerability"B_Reward_SetVulnerability.Description.en="Reward: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVulnerability.Description.de="Lohn: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen."B_Reward_SetVulnerability.Description.fr="Récompense: Rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les entités spawnées sont affectées."B_Reward_SetVulnerability.GetReprisalTable=nil;B_Reward_SetVulnerability.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVulnerability)function Reward_SetModel(...)return B_Reward_SetModel:new(...)end;B_Reward_SetModel=CopyTable(B_Reprisal_SetModel)B_Reward_SetModel.Name="Reward_SetModel"B_Reward_SetModel.Description.en="Reward: Changes the model of the entity. Be careful, some models crash the game."B_Reward_SetModel.Description.de="Lohn: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz."B_Reward_SetModel.Description.fr="Récompense: Modifie le modèle d'une entité. Attention : certains modèles entraînent un plantage."B_Reward_SetModel.GetReprisalTable=nil;B_Reward_SetModel.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetModel)function Reward_AI_SetEntityControlled(...)return B_Reward_AI_SetEntityControlled:new(...)end;B_Reward_AI_SetEntityControlled={Name="Reward_AI_SetEntityControlled",Description={en="Reward: Bind or Unbind an entity or a battalion to/from an AI player. The AI player must be activated!",de="Lohn: Die KI kontrolliert die Entity oder der KI die Kontrolle entziehen. Die KI muss aktiv sein!",fr="Récompense: L'IA contrôle l'entité ou retirer le contrôle à l'IA. L'IA doit être active !"},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="AI control entity",de="KI kontrolliert Entity",fr="L'IA contrôle l'entité"}}}function B_Reward_AI_SetEntityControlled:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEntityControlled:AddParameter(cy,pw)if cy==0 then self.Entity=pw elseif cy==1 then self.Hidden=ToBoolean(pw)end end;function B_Reward_AI_SetEntityControlled:CustomFunction(bl)if not IsExisting(self.Entity)then return end;local bf=GetID(self.Entity)local q1=Logic.EntityGetPlayer(bf)local k9=Logic.GetEntityType(bf)local qN=Logic.GetEntityTypeName(k9)if string.find(qN,"S_")or string.find(qN,"B_NPC_Bandits")or string.find(qN,"B_NPC_Barracks")then local qO={Logic.GetSpawnedEntities(bf)}for f=1,#qO do if Logic.IsLeader(qO[f])==1 then AICore.HideEntityFromAI(q1,qO[f],not self.Hidden)end end else AICore.HideEntityFromAI(q1,bf,not self.Hidden)end end;function B_Reward_AI_SetEntityControlled:GetCustomData(cy)if cy==1 then return{"false","true"}end end;function B_Reward_AI_SetEntityControlled:Debug(bl)if not IsExisting(self.Entity)then error(bl.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEntityControlled)function Trigger_AmmunitionDepleted(...)return B_Trigger_AmmunitionDepleted:new(...)end;B_Trigger_AmmunitionDepleted={Name="Trigger_AmmunitionDepleted",Description={en="Trigger: if the ammunition of the entity is depleted.",de="Auslöser: wenn die Munition der Entity aufgebraucht ist.",fr="Déclencheur: lorsque les munitions de l'entité sont épuisées."},Parameter={{ParameterType.Scriptname,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Trigger_AmmunitionDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_AmmunitionDepleted:AddParameter(cy,pw)if cy==0 then self.Scriptname=pw end end;function B_Trigger_AmmunitionDepleted:CustomFunction()if not IsExisting(self.Scriptname)then return false end;local B=GetID(self.Scriptname)if Logic.GetAmmunitionAmount(B)>0 then return false end;return true end;function B_Trigger_AmmunitionDepleted:Debug(bl)if not IsExisting(self.Scriptname)then error(bl.Identifier..": "..self.Name..": '"..self.Scriptname.."' is destroyed!")return true end;return false end;RegisterBehavior(B_Trigger_AmmunitionDepleted)B_Reward_TradePost.DEBUG_Orig_Warehouse=B_Reward_TradePost.DEBUG;B_Reward_TradePost.DEBUG=function(self,bl)local cu=Lib.Warehouse.Global:GetIndex(self.ScriptName)if cu~=0 then debug(false,bl.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return false end;return self:DEBUG_Orig_Warehouse(bl)end;B_Reward_TradePost.CustomFunction_Orig_Warehouse=B_Reward_TradePost.CustomFunction;B_Reward_TradePost.CustomFunction=function(self,bl)local cu=Lib.Warehouse.Global:GetIndex(self.ScriptName)if cu~=0 then debug(false,bl.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return end;self:CustomFunction_Orig_Warehouse(bl)end;function Reprisal_Briefing(r,n0)return B_Reprisal_Briefing:new(r,n0)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(cy,pw)if cy==0 then self.BriefingName=pw elseif cy==1 then self.Function=pw end end;function B_Reprisal_Briefing:CustomFunction(bl)_G[self.Function](self.BriefingName,bl.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(bl)if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bl.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reprisal_Briefing)end;function Reward_Briefing(r,n0)return B_Reward_Briefing:new(r,n0)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Reward_Briefing)end;function Trigger_Briefing(r,q,b_)return B_Trigger_Briefing:new(r,q,b_)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(cy,pw)if cy==0 then self.BriefingName=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then pw=pw or 0;self.WaitTime=pw*1 end end;function B_Trigger_Briefing:CustomFunction(bl)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(bl)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bl.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bl.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.BriefingSystem then RegisterBehavior(B_Trigger_Briefing)end;function Reprisal_Cutscene(r,oB)return B_Reprisal_Cutscene:new(r,oB)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(cy,pw)if cy==0 then self.CutsceneName=pw elseif cy==1 then self.Function=pw end end;function B_Reprisal_Cutscene:CustomFunction(bl)_G[self.Function](self.CutsceneName,bl.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(bl)if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bl.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reprisal_Cutscene)end;function Reward_Cutscene(r,oB)return B_Reward_Cutscene:new(r,oB)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Reward_Cutscene)end;function Trigger_Cutscene(r,q,b_)return B_Trigger_Cutscene:new(r,q,b_)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(cy,pw)if cy==0 then self.CutsceneName=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then pw=pw or 0;self.WaitTime=pw*1 end end;function B_Trigger_Cutscene:CustomFunction(bl)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(bl)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bl.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bl.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.CutsceneSystem then RegisterBehavior(B_Trigger_Cutscene)end;function Reprisal_Dialog(r,oJ)return B_Reprisal_Dialog:new(r,oJ)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(cy,pw)if cy==0 then self.DialogName=pw elseif cy==1 then self.Function=pw end end;function B_Reprisal_Dialog:CustomFunction(bl)_G[self.Function](self.DialogName,bl.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(bl)if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bl.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reprisal_Dialog)end;function Reward_Dialog(r,oJ)return B_Reward_Dialog:new(r,oJ)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,bl)return{Reward.Custom,{self,self.CustomFunction}}end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Reward_Dialog)end;function Trigger_Dialog(r,q,b_)return B_Trigger_Dialog:new(r,q,b_)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(cy,pw)if cy==0 then self.DialogName=pw elseif cy==1 then self.PlayerID=pw*1 elseif cy==2 then pw=pw or 0;self.WaitTime=pw*1 end end;function B_Trigger_Dialog:CustomFunction(bl)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(bl)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bl.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bl.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bl.Identifier,self.Name))return true end;return false end;if MapEditor or Lib.DialogSystem then RegisterBehavior(B_Trigger_Dialog)end
Lib={Loader={Paths={"script/"},Version="LIB 1.1.0",Root="libertica",IsLocalEnv=GUI~=nil,IsHistoryEdition=false,Sources={},Loaded={}}}if Framework and Network then local Name=Framework.GetCurrentMapName()table.insert(Lib.Loader.Paths,1,"maps/externalmap/"..Name.."/")Lib.Loader.IsHistoryEdition=Network.IsNATReady~=nil end;API={}QSB={}function Lib.Loader.PushPath(a)end;function Lib.Loader.Require(a)end;Lib.Require=Lib.Loader.Require;function Lib.Loader.Register(a)end;Lib.Register=Lib.Loader.Register;function Lib.Loader.LoadSourceFile(b,a)end;Lib.Register("comfort/CopyTable")function CopyTable(b,c)local d=c or{}assert(type(b)=="table","CopyTable: Source is nil!")assert(type(d)=="table")local e=0;for f=1,#b do e=e+1;if type(b[f])=="table"then table.insert(d,CopyTable(b[f]))else table.insert(d,b[f])end end;for g,h in pairs(b)do if type(g)=="number"then if g<=0 or g>e then if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end else if type(h)=="table"then d[g]=d[g]or CopyTable(h)else d[g]=d[g]or h end end end;return d end;API.CopyTable=CopyTable;Lib.Register("comfort/GetBattalionSizeBySoldierType")CONST_TYPE_SOLDIER_AMOUNT_MAP={["U_MilitaryBandit_Melee_ME"]=3,["U_MilitaryBandit_Ranged_ME"]=3,["U_MilitaryBandit_Melee_NA"]=3,["U_MilitaryBandit_Ranged_NA"]=3,["U_MilitaryBandit_Melee_NE"]=3,["U_MilitaryBandit_Ranged_NE"]=3,["U_MilitaryBandit_Melee_SE"]=3,["U_MilitaryBandit_Ranged_SE"]=3,["U_MilitaryBow"]=6,["U_MilitaryBow_RedPrince"]=6,["U_MilitarySword"]=6,["U_MilitarySword_RedPrince"]=6,["U_MilitaryBandit_Melee_AS"]=3,["U_MilitaryBandit_Ranged_AS"]=3,["U_MilitaryBow_Khana"]=6,["U_MilitarySword_Khana"]=6}function GetBattalionSizeBySoldierType(i)local j=Logic.GetEntityType(i)return CONST_TYPE_SOLDIER_AMOUNT_MAP[j]or 0 end;API.GetAngleBetween=GetAngleBetween;Lib.Register("comfort/GetCategoriesOfType")function GetCategoriesOfType(i)local k={}for g,h in pairs(EntityCategories)do if Logic.IsEntityTypeInCategory(i,h)==1 then table.insert(k,h)end end;return k end;Lib.Require("comfort/GetCategoriesOfType")Lib.Register("comfort/GetCategoriesOfEntity")function GetCategoriesOfEntity(l)local m=Logic.GetEntityType(l)return GetCategoriesOfType(m)end;Lib.Register("comfort/GetSlotByPlayer")function GetSlotByPlayer(n)for f=1,8 do if Network.IsNetworkSlotIDUsed(f)then local o=Logic.GetSlotPlayerID(f)if Logic.PlayerGetIsHumanFlag(o)and o==n then return f end end end;return-1 end;API.GetSlotByPlayer=GetSlotByPlayer;Lib.Register("comfort/GetActivePlayers")function GetActivePlayers()local p={}for q=1,8 do if Network.IsNetworkSlotIDUsed(q)then local r=Logic.GetSlotPlayerID(q)if Logic.PlayerGetIsHumanFlag(r)and Logic.PlayerGetGameState(r)~=0 then table.insert(p,r)end end end;return p end;API.GetActivePlayers=GetActivePlayers;Lib.Require("comfort/GetActivePlayers")Lib.Require("comfort/GetSlotByPlayer")Lib.Register("comfort/GetDelayedPlayers")function GetDelayedPlayers()local p={}for s,q in pairs(GetActivePlayers())do if Network.IsWaitingForNetworkSlotID(GetSlotByPlayer(q))then table.insert(p,q)end end;return p end;API.GetDelayedPlayers=GetDelayedPlayers;Lib.Register("comfort/GetPlayerAtSlot")function GetPlayerAtSlot(t)if Network.IsNetworkSlotIDUsed(t)then local o=Logic.GetSlotPlayerID(t)if Logic.PlayerGetIsHumanFlag(o)then return o end end;return-1 end;API.GetSlotPlayerID=GetPlayerAtSlot;Lib.Register("comfort/GetSoldiersOfGroup")function GetSoldiersOfGroup(u)local v={}local w=GetID(u)assert(w~=0,"Entity does not exist.")if Logic.IsLeader(w)==1 then local x={Logic.GetSoldiersAttachedToLeader(w)}table.remove(x,1)v=x end;return v end;API.GetSoldiersOfGroup=GetSoldiersOfGroup;Lib.Register("comfort/IsLocalScript")function IsLocalScript()return GUI~=nil end;API.IsLocalScript=IsLocalScript;Lib.Register("comfort/KeyOf")function KeyOf(y,z)if z==nil then return false end;for g,h in pairs(z)do if h==y then return g end end end;API.KeyOf=KeyOf;Lib.Register("comfort/ToBoolean")function ToBoolean(A)if type(A)=="boolean"then return A end;if type(A)=="number"then return A==1 end;if string.find(string.lower(tostring(A)),"^[1tjy\\+].*$")then return true end;return false end;API.ToBoolean=ToBoolean;Lib.Register("comfort/DumpTable")function DumpTable(B,C)local D="{"if C then D=C.." = \n"..D end;Framework.WriteToLog(D)for g,h in pairs(B)do if type(h)=="table"then Framework.WriteToLog("["..g.."] = ")DumpTable(h)elseif type(h)=="string"then Framework.WriteToLog("["..g.."] = \""..h.."\"")else Framework.WriteToLog("["..g.."] = "..tostring(h))end end;Framework.WriteToLog("}")end;API.DumpTable=DumpTable;Lib.Register("comfort/GetPosition")function GetPosition(l)if type(l)=="table"and l.X and l.Y then l.Z=l.Z or 0;return l elseif not IsExisting(l)then return{X=0,Y=0,Z=0}end;local E,F,G=Logic.EntityGetPos(GetID(l))return{X=E,Y=F,Z=G}end;API.GetPosition=GetPosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetDistance")function GetDistance(H,I,J)if type(H)=="string"or type(H)=="number"then H=GetPosition(H)end;if type(I)=="string"or type(I)=="number"then I=GetPosition(I)end;assert(type(H)=="table","Invalid frist position.")assert(type(I)=="table","Invalid second position.")local K=H.X-I.X;local L=H.Y-I.Y;if J then return K^2+L^2 end;return math.sqrt(K^2+L^2)end;API.GetDistance=GetDistance;Lib.Register("comfort/IsMultiplayer")function IsMultiplayer()return Framework.IsNetworkGame()end;API.IsMultiplayer=IsMultiplayer;Lib.Register("comfort/IsValidPosition")function IsValidPosition(M)local N={Logic.WorldGetSize()}if type(M)=="table"and(M.X~=nil and type(M.X)=="number")and M.X<N[1]and M.X>0 and(M.Y~=nil and type(M.Y)=="number")and M.Y<N[2]and M.Y>0 and(not M.Z or M.Z>=0)then return true end;return false end;API.IsValidPosition=IsValidPosition;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetCirclePosition")function GetCirclePosition(O,P,Q)if not IsValidPosition(O)and not IsExisting(O)then error(false,"Target does not exist or is invalid position!")end;local R=O;local S=0+(Q or 0)if type(O)~="table"then local w=GetID(O)S=Logic.GetEntityOrientation(w)+(Q or 0)R=GetPosition(w)end;local d={X=R.X+P*math.cos(math.rad(S)),Y=R.Y+P*math.sin(math.rad(S)),Z=R.Z}return d end;API.GetRelatiePos=GetCirclePosition;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetGeometricFocus")function GetGeometricFocus(...)local arg={...}local T={X=0,Y=0,Z=0}local U=0;for f=1,#arg do local R=GetPosition(arg[f])if R then T.X=T.X+R.X;T.Y=T.Y+R.Y;T.Z=T.Z+(R.Z or 0)U=U+1 end end;return{X=T.X*1/U,Y=T.Y*1/U,Z=T.Z*1/U}end;API.GetGeometricFocus=GetGeometricFocus;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/GetLinePosition")function GetLinePosition(H,I,V)if V>1 then V=V/100 end;if not IsValidPosition(H)and not IsExisting(H)then error(false,"_Pos1 does not exist or is invalid position!")return end;local W=H;if type(W)~="table"then W=API.GetPosition(W)end;if not IsValidPosition(I)and not IsExisting(I)then error(false,"_Pos1 does not exist or is invalid position!")return end;local X=I;if type(X)~="table"then X=API.GetPosition(X)end;local Y=X.X-W.X;local Z=X.Y-W.Y;return{X=W.X+Y*V,Y=W.Y+Z*V}end;API.GetLinePosition=GetLinePosition;Lib.Register("comfort/GetSiegecartTypeByEngineType")CONST_ENGINE_TO_CART={["U_MilitaryBatteringRam"]="U_BatteringRamCart",["U_MilitaryCatapult"]="U_CatapultCart",["U_MilitarySiegeTower"]="U_SiegeTowerCart"}function GetSiegecartTypeByEngineType(i)local _=Logic.GetEntityTypeName(i)local a0=CONST_ENGINE_TO_CART[_]return Entities[a0]or 0 end;Lib.Register("comfort/GetTerritoryID")function GetTerritoryID(C)for s,a1 in ipairs{Logic.GetTerritories()}do if C==Logic.GetTerritoryName(a1)then return a1 end end;return 0 end;API.GetTerritoryID=GetTerritoryID;Lib.Register("comfort/IsHistoryEdition")function IsHistoryEdition()return Network.IsNATReady~=nil end;API.IsHistoryEdition=IsHistoryEdition;Lib.Register("comfort/IsMultiplayerReady")function IsMultiplayerReady()return Framework.IsNetworkGame()and Network.SessionHaveAllPlayersFinishedLoading()==true end;API.IsMultiplayerReady=IsMultiplayerReady;Lib.Register("comfort/Round")function Round(a2,a3)a3=math.ceil(a3 or 0)if a3<=0 then return math.floor(a2+0.5)end;return tonumber(string.format("%."..a3 .."f",a2))end;API.Round=Round;Lib.Require("comfort/GetPosition")Lib.Register("comfort/GetAngleBetween")function GetAngleBetween(H,I)local a4=0;local a5=0;local a6=0;if type(H)=="string"or type(H)=="number"then H=GetPosition(GetID(H))end;if type(I)=="string"or type(I)=="number"then I=GetPosition(GetID(I))end;assert(H~=nil)assert(I~=nil)a4=H.X-I.X;a5=H.Y-I.Y;if a4==0 and a5==0 then return 0 end;a6=math.deg(math.asin(math.abs(a4)/math.sqrt(a4%2+a5%2)))if a4>=0 and a5>0 then a6=270-a6 elseif a4<0 and a5>0 then a6=270+a6 elseif a4<0 and a5<=0 then a6=90-a6 elseif a4>=0 and a5<=0 then a6=90+a6 end;return a6 end;API.GetAngleBetween=GetAngleBetween;Lib.Require("comfort/GetDistance")Lib.Register("comfort/GetClosestToTarget")function GetClosestToTarget(O,a7)local a8=0;local a9=Logic.WorldGetSize()^2;for f=1,#a7,1 do assert(type(a7[f])~="table","Invalid entity.")local aa=GetDistance(a7[f],O,true)if aa<a9 then a9=aa;a8=a7[f]end end;return a8 end;API.GetClosestToTarget=GetClosestToTarget;Lib.Register("comfort/GetHealth")function GetHealth(l)local w=GetID(l)if IsExisting(w)then local ab=Logic.GetEntityMaxHealth(w)local ac=Logic.GetEntityHealth(w)return ac/ab*100 end;return 0 end;API.GetEntityHealth=GetHealth;API.GetHealth=GetHealth;Lib.Register("comfort/GetSiegeengineTypeByCartType")CONST_CART_TO_ENGINE={["U_BatteringRamCart"]="U_MilitaryBatteringRam",["U_CatapultCart"]="U_MilitaryCatapult",["U_SiegeTowerCart"]="U_MilitarySiegeTower"}function GetSiegeengineTypeByCartType(i)local a0=Logic.GetEntityTypeName(i)local _=CONST_CART_TO_ENGINE[a0]return Entities[_]or 0 end;Lib.Require("comfort/GetAngleBetween")Lib.Require("comfort/GetDistance")Lib.Register("comfort/IsInCone")function IsInCone(O,ad,ae,af,ag)local ah=GetDistance(ad,O)if ah>ae then return false end;local ai=GetAngleBetween(ad,O)local aj=af-ag;local ak=af+ag;return ai>=aj and ai<=ak end;API.IsInCone=IsInCone;Lib.Register("comfort/SerializeTable")function SerializeTable(B)local al="{"for g,h in pairs(B)do local am=type(g)=="string"and g or"["..g.."]"if type(h)=="table"then al=al..am.." = "..SerializeTable(h)..", "elseif type(h)=="number"then al=al..am.." = "..h..", "elseif type(h)=="string"then al=al..am.." = \""..h.."\", "elseif type(h)=="boolean"or type(h)=="nil"then al=al..am.." = "..tostring(h)..", "else al=al..am.." = \""..tostring(h).."\", "end end;al=al.."}"return al end;API.SerializeTable=SerializeTable;Lib.Register("comfort/CreateCartByGoodType")function CreateCartByGoodType(n,an,ao,ap,aq)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")ap=ap or 0;local ar=0;local R=GetID(an)assert(R~=0,"Entity does not exist.")local E,F,G=Logic.EntityGetPos(R)if Logic.IsBuilding(R)==1 then E,F=Logic.GetBuildingApproachPosition(R)ap=Logic.GetEntityOrientation(R)-90 end;local as=Logic.GetGoodCategoryForGoodType(ao)if as==GoodCategories.GC_Resource then ar=Logic.CreateEntityOnUnblockedLand(Entities.U_ResourceMerchant,E,F,ap,n)elseif ao==Goods.G_Medicine then ar=Logic.CreateEntityOnUnblockedLand(Entities.U_Medicus,E,F,ap,n)elseif ao==Goods.G_Gold or ao==Goods.G_None or ao==Goods.G_Information then if aq then ar=Logic.CreateEntityOnUnblockedLand(aq,E,F,ap,n)else ar=Logic.CreateEntityOnUnblockedLand(Entities.U_GoldCart,E,F,ap,n)end else ar=Logic.CreateEntityOnUnblockedLand(Entities.U_Marketer,E,F,ap,n)end;return ar end;API.CreateCartByGoodType=CreateCartByGoodType;Lib.Register("comfort/CreateEntityName")CreateEntityName_Sequence_ID=0;function CreateEntityName(at)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")if type(at)=="string"then return at else assert(type(at)=="number","Invalid entity ID.")local au=Logic.GetEntityName(at)if type(au)~="string"or au==""then CreateEntityName_Sequence_ID=CreateEntityName_Sequence_ID+1;au="AutomaticScriptName_"..CreateEntityName_Sequence_ID;Logic.SetEntityName(at,au)end;return au end end;API.CreateEntityName=CreateEntityName;Lib.Register("comfort/CreateStock")function CreateStock(n,ao)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local as=Logic.GetGoodCategoryForGoodType(ao)if as==GoodCategories.GC_Resource or ao==Goods.G_None then local av=Logic.GetStoreHouse(n)local aw=Logic.GetHeadquarters(n)if av~=0 and Logic.GetIndexOnInStockByGoodType(av,ao)==-1 then if ao~=Goods.G_Gold or ao==Goods.G_Gold and aw==0 then Logic.AddGoodToStock(av,ao,0,true,true)end end end end;API.CreateStock=CreateStock;Lib.Register("comfort/GetQuestID")function GetQuestID(C)if type(C)=="number"then return C end;for ax,ay in pairs(Quests)do if ay and ax>0 then if ay.Identifier==C then return ax end end end;return-1 end;API.GetQuestID=GetQuestID;Lib.Register("comfort/GetRandomSettlerType")CONST_RANDOM_SETTLER_TYPES={Male={Entities.U_BannerMaker,Entities.U_Baker,Entities.U_Barkeeper,Entities.U_Blacksmith,Entities.U_Butcher,Entities.U_BowArmourer,Entities.U_BowMaker,Entities.U_CandleMaker,Entities.U_Carpenter,Entities.U_DairyWorker,Entities.U_Pharmacist,Entities.U_Tanner,Entities.U_SmokeHouseWorker,Entities.U_Soapmaker,Entities.U_SwordSmith,Entities.U_Weaver},Female={Entities.U_BathWorker,Entities.U_SpouseS01,Entities.U_SpouseS02,Entities.U_SpouseS03,Entities.U_SpouseF01,Entities.U_SpouseF02,Entities.U_SpouseF03}}function GetRandomSettlerType()assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local az=math.random(1,2)==1 and"Male"or"Female"local m=math.random(1,#CONST_RANDOM_SETTLER_TYPES[az])return CONST_RANDOM_SETTLER_TYPES[az][m]end;API.GetRandomSettlerType=GetRandomSettlerType;function GetRandomMaleSettlerType()assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local m=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Male)return CONST_RANDOM_SETTLER_TYPES.Male[m]end;API.GetRandomMaleSettlerType=GetRandomMaleSettlerType;function GetRandomFemaleSettlerType()assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local m=math.random(1,#CONST_RANDOM_SETTLER_TYPES.Female)return CONST_RANDOM_SETTLER_TYPES.Female[m]end;API.GetRandomFemaleSettlerType=GetRandomFemaleSettlerType;Lib.Require("comfort/GetQuestID")Lib.Register("comfort/IsValidQuest")function IsValidQuest(aA)return Quests[aA]~=nil or Quests[GetQuestID(aA)]~=nil end;API.IsValidQuest=IsValidQuest;Lib.Register("comfort/IsValidQuestName")CONST_REGEX_QUEST_NAME="^[A-Za-z0-9_ @ÄÖÜäöüß]+$"function IsValidQuestName(C)return string.find(C,CONST_REGEX_QUEST_NAME)~=nil end;API.IsValidQuestName=IsValidQuestName;Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/LookAt")function LookAt(l,O)local aB=GetID(l)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(aB~=0,"Looking entity does not exist!")local aC,aD,aE=Logic.EntityGetPos(aB)local aF;local aG,aH,aI;if type(O)=="table"then aG=O.X;aH=O.Y;aI=O.Z else aF=GetID(O)assert(aF~=0,"Target entity does not exist!")aG,aH,aI=Logic.EntityGetPos(aF)end;assert(IsValidPosition({X=aC,Y=aD,Z=aE}),"Invalid looking position!")assert(IsValidPosition({X=aG,Y=aH,Z=aI}),"Invalid target position!")Angle=math.deg(math.atan2(aH-aD,aG-aC))Angle=Angle<0 and Angle+360 or Angle;if Logic.IsLeader(aB)==1 then local aJ={Logic.GetSoldiersAttachedToLeader(aB)}for f=2,aJ[1]+1 do Logic.SetOrientation(aJ[f],Angle)end end;Logic.SetOrientation(aB,Angle)end;API.LookAt=LookAt;Lib.Register("comfort/Move")function Move(l,O,aK)local ar=GetID(l)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(ar~=0,"Moving entity does not exist!")local aL;if type(O)~="table"then local aF=GetID(O)local E,F,G=Logic.EntityGetPos(aF)aL={X=E,Y=F}else aL=O end;if aK then Logic.MoveEntity(ar,aL.X,aL.Y)if Logic.IsSettler(ar)==1 then Logic.SetTaskList(ar,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(ar,aL.X,aL.Y)end;StartSimpleJobEx(function(aM)if not IsExisting(aM)then return true end;if Logic.IsEntityMoving(aM)==false then if Logic.IsSettler(aM)==1 then Logic.SetTaskList(aM,TaskLists.TL_NPC_IDLE)end;return true end end,ar,aL)end;API.MoveEntity=Move;API.Move=Move;Lib.Require("comfort/LookAt")Lib.Register("comfort/MoveAndLookAt")function MoveAndLookAt(l,O,aN,aK)local ar=GetID(l)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(ar~=0,"Moving entity does not exist!")local aL;if type(O)~="table"then local aF=GetID(O)local E,F,G=Logic.EntityGetPos(aF)aL={X=E,Y=F}else aL=O end;if aK then Logic.MoveEntity(ar,aL.X,aL.Y)if Logic.IsSettler(ar)==1 then Logic.SetTaskList(ar,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(ar,aL.X,aL.Y)end;StartSimpleJobEx(function(aM,aN)if not IsExisting(aM)then return true end;if Logic.IsEntityMoving(aM)==false then if Logic.IsSettler(aM)==1 then Logic.SetTaskList(aM,TaskLists.TL_NPC_IDLE)LookAt(aM,aN)end;return true end end,ar,aN)end;API.MoveEntityAndLookAt=MoveAndLookAt;API.MoveAndLookAt=MoveAndLookAt;Lib.Require("comfort/GetCirclePosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/MoveToPosition")function MoveToPosition(l,O,P,Q,aK)local ar=GetID(l)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(ar~=0,"Moving entity does not exist!")local aL=GetCirclePosition(O,P,Q)if not IsValidPosition(aL)then return end;if aK then Logic.MoveEntity(ar,aL.X,aL.Y)if Logic.IsSettler(ar)==1 then Logic.SetTaskList(ar,TaskLists.TL_NPC_WALK)end else Logic.MoveSettler(ar,aL.X,aL.Y)end;StartSimpleJobEx(function(aM)if not IsExisting(aM)then return true end;if Logic.IsEntityMoving(aM)==false then if Logic.IsSettler(aM)==1 then Logic.SetTaskList(aM,TaskLists.TL_NPC_IDLE)end;return true end end,ar)end;API.MoveEntityToPosition=MoveToPosition;API.MoveToPosition=MoveToPosition;Lib.Register("comfort/ReplaceEntity")function ReplaceEntity(l,i,aO)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local aB=GetID(l)if aB==0 then return 0 end;local aP=GetPosition(aB)local aQ=aO or Logic.EntityGetPlayer(aB)local aR=Logic.GetEntityOrientation(aB)local au=Logic.GetEntityName(aB)DestroyEntity(aB)local aF=Logic.CreateEntity(i,aP.X,aP.Y,aR,aQ)Logic.SetEntityName(aF,au)if Logic.IsSettler(aF)==1 then Logic.SetTaskList(aF,TaskLists.TL_NPC_IDLE)end;return aF end;API.ReplaceEntity=ReplaceEntity;Lib.Require("comfort/CreateStock")Lib.Require("comfort/CreateCartByGoodType")Lib.Register("comfort/SendCart")function SendCart(an,n,ao,aS,aq,aT,aU)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local aV=GetID(an)if not IsExisting(aV)then return 0 end;local S=Logic.GetEntityOrientation(aV)local aW=Logic.GetEntityName(aV)local ar=CreateCartByGoodType(n,aV,ao,S,aq)assert(ar~=0,"Cart was not created properly.")CreateStock(n,ao)Logic.HireMerchant(ar,n,ao,aS,n,aT)if aU and Logic.IsBuilding(aV)==0 then Logic.SetEntityName(ar,aW)DestroyEntity(aV)end;return ar end;API.SendCart=SendCart;Lib.Register("comfort/SetHealth")function SetHealth(l,aX)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(type(aX)=="number"and aX>=0)local w=GetID(l)assert(w~=0,"Entity does not exist.")assert(Logic.IsLeader(w)==0,"Can not be used on groups.")local ab=Logic.GetEntityMaxHealth(w)local ac=math.max(math.min(aX,ab),0)local aY=Logic.GetEntityHealth(w)local aZ=math.ceil(ab*ac/100)if aZ>aY then Logic.HealEntity(w,aZ-aY)elseif aZ<aY then Logic.HurtEntity(w,aY-aZ)end end;API.SetHealth=SetHealth;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/SetPosition")function SetPosition(l,O)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local ar=GetID(l)if not ar then return end;local aL=GetPosition(O)assert(IsValidPosition(aL),"Invalid position.")for s,a_ in pairs(GetSoldiersOfGroup(ar))do SetPosition(a_,O)end;Logic.DEBUG_SetSettlerPosition(ar,aL.X,aL.Y)end;API.SetPosition=SetPosition;Lib.Require("comfort/GetSoldiersOfGroup")Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/SetPositionAndLookAt")function SetPositionAndLookAt(l,O,aN)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")local ar=GetID(l)if not ar then return end;local aL=GetPosition(O)assert(IsValidPosition(aL),"Invalid position.")for s,a_ in pairs(GetSoldiersOfGroup(ar))do SetPosition(a_,O)LookAt(a_,aN)end;Logic.DEBUG_SetSettlerPosition(ar,aL.X,aL.Y)LookAt(ar,aN)end;API.PlaceEntityAndLookAt=SetPositionAndLookAt;API.SetPositionAndLookAt=SetPositionAndLookAt;Lib.Require("comfort/GetCirclePosition")Lib.Require("comfort/IsValidPosition")Lib.Register("comfort/SetPositionRelativeTo")function SetPositionRelativeTo(l,O,P,Q)local ar=GetID(l)assert(Lib.Loader.IsLocalEnv==false,"Can only be used in global script.")assert(ar~=0,"Entity does not exist!")local aL=GetCirclePosition(O,P,Q)if not IsValidPosition(aL)then return end;for s,a_ in pairs(GetSoldiersOfGroup(ar))do SetPositionRelativeTo(a_,O)end;Logic.DEBUG_SetSettlerPosition(ar,aL.X,aL.Y)end;API.PlaceEntityToPosition=SetPositionRelativeTo;API.SetPositionRelativeTo=SetPositionRelativeTo;Lib.Register("comfort/SetResourceAmount")function SetResourceAmount(l,b0,b1)assert(GUI==nil,"Can not be used in local script!")assert(type(b0)=="number")assert(type(b1)=="number")local w=GetID(l)if w==nil or w==0 or Logic.GetResourceDoodadGoodType(w)==0 then return end;if Logic.GetResourceDoodadGoodAmount(w)==0 then w=ReplaceEntity(w,Logic.GetEntityType(w))end;Logic.SetResourceDoodadGoodAmount(w,b0)return true end;API.SetResourceAmount=SetResourceAmount;Lib.Register("comfort/UnlockTitleForPlayer")function UnlockTitleForPlayer(n,b2)if LockedKnightTitles[n]==b2 then LockedKnightTitles[n]=nil;for b3=b2,#NeedsAndRightsByKnightTitle do local b4=NeedsAndRightsByKnightTitle[b3][4]if type(b4)=="table"then UnLockFeaturesForPlayer(n,b4)end end end end;Lib.Register("core/QSB")ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local b5=g_QuestBehaviorTypes[f]if not _G["B_"..b5.Name].new then _G["B_"..b5.Name].new=function(self,...)local b6={...}local b7=table.copy(self)b7.i47ya_6aghw_frxil={}b7.v12ya_gg56h_al125={}for b8=1,#b6,1 do table.insert(b7.v12ya_gg56h_al125,b6[b8])if self.Parameter and self.Parameter[b8]~=nil then b7:AddParameter(b8-1,b6[b8])else table.insert(b7.i47ya_6aghw_frxil,b6[b8])end end;return b7 end end end end;function RegisterBehavior(b9)if GUI~=nil then return end;if type(b9)~="table"or b9.Name==nil then assert(false,"Behavior is invalid!")return end;if b9.RequiresExtraNo and b9.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..b9.Name]then error(string.format("Behavior %s does not exist!",b9.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==b9.Name then return end end;if b9.CustomFunction then b9.CustomFunction_Orig=b9.CustomFunction;b9.CustomFunction=function(self,ba)if Lib.Core.Debug.CheckAtRun and self.DEBUG and not self.DEBUG_ERROR_FOUND and self:Debug(ba)then self.DEBUG_ERROR_FOUND=true end;return self:CustomFunction_Orig(ba)end end;table.insert(g_QuestBehaviorTypes,b9)end;if not MapEditor and GUI then return end;Lib.Require("comfort/GetPosition")Lib.Register("core/Core_Behavior")function Reward_DEBUG(bb,bc,bd,be,bf)return B_Reward_DEBUG:new(bb,bc,bd,be,bf)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(bg)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(bh,bi)if bh==0 then self.DisplayScriptErrors=ToBoolean(bi)elseif bh==1 then self.CheckWhileRuntime=ToBoolean(bi)elseif bh==2 then self.DevelopingCheats=ToBoolean(bi)elseif bh==3 then self.DevelopingShell=ToBoolean(bi)elseif bh==4 then self.UseQuestTrace=ToBoolean(bi)end end;function B_Reward_DEBUG:CustomFunction(bg)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(bh)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,bj,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 elseif bh==2 then self.OverrideTarget=tonumber(bi)elseif bh==3 then self.IgnoreCapture=ToBoolean(bi)end end;function B_Goal_Deliver:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then table.insert(bk,"-")for f=1,8 do table.insert(bk,f)end elseif bh==3 then table.insert(bk,"true")table.insert(bk,"false")else assert(false)end;return bk end;function B_Goal_Deliver:GetMsgKey()local bj=Logic.GetGoodTypeID(self.GoodTypeName)local bl=Logic.GetGoodCategoryForGoodType(bj)local bm={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if bl then local bn=bm[bl]if bn then return bn end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(bg)local bo=self:GetDiplomacyMapping()local bp=GetPlayerName(self.PlayerID)or""local bq=string.format(Localize(self.TextPattern),Localize(bo[self.DiplState]),bp)Lib.Core.Quest:ChangeCustomQuestCaptionText(bq,bg)end;function B_Goal_Diplomacy:CustomFunction(bg)self:ChangeCaption(bg)if self.Relation=="<="then if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Relation=bi elseif bh==2 then self.DiplState=DiplomacyStates[bi]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(bh)if bh==1 then return{">=","<=","=="}elseif bh==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local aL=Logic.GetHeadquarters(self.PlayerID)if not aL or aL==0 then aL=Logic.GetStoreHouse(self.PlayerID)end;assert(aL and aL~=0)return{Objective.Steal,1,{aL}}end;function B_Goal_StealInformation:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ar=GetID(self.ScriptName)if ar and ar~=0 then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1;self.DestroyTypeAmount=self.Amount elseif bh==2 then self.PlayerID=bi*1 end end;function B_Goal_DestroyType:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then for f=0,8 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Goal_DestroyType:GetMsgKey()local ar=self.EntityName;if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(bh,bi)if bh==0 then self.Entity1=bi elseif bh==1 then self.Entity2=bi elseif bh==2 then self.bRelSmallerThan=bi=="<"elseif bh==3 then self.Distance=bi*1 end end;function B_Goal_EntityDistance:CustomFunction(bg)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local aB=GetID(self.Entity1)local aF=GetID(self.Entity2)local bs=Logic.CheckEntitiesDistance(aB,aF,self.Distance)if self.bRelSmallerThan and bs or not self.bRelSmallerThan and not bs then return true end end;function B_Goal_EntityDistance:GetCustomData(bh)local bk={}if bh==2 then table.insert(bk,">")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_EntityDistance:Debug(bg)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bg.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(bh,bi)if bh==0 then self.Target=bi elseif bh==1 then if bi==nil or bi==""then bi=0 end;self.Distance=bi*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(bi)end elseif bh==1 then self.PlayerID=tonumber(bi)*1 elseif bh==2 then self.Category=bi elseif bh==3 then self.bRelSmallerThan=tostring(bi)=="true"or tostring(bi)=="<"elseif bh==4 then self.NumberOfUnits=bi*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(bg)local bt=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#bt>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#bt<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(bu,n,bv)local bt={}local bw={}if n==-1 then for f=0,8 do local bx=0;repeat bw={Logic.GetEntitiesOfCategoryInTerritory(bu,f,n,bx)}bt=Array_Append(bt,bw)bx=bx+#bw until#bw==0 end else local bx=0;repeat bw={Logic.GetEntitiesOfCategoryInTerritory(bu,n,bv,bx)}bt=Array_Append(bt,bw)bx=bx+#bw until#bw==0 end;return bt end;function B_Goal_UnitsOnTerritory:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,-1)for f=1,8 do table.insert(bk,f)end elseif bh==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(bk,g)end end;table.sort(bk)elseif bh==3 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_UnitsOnTerritory:Debug(bg)local by={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(by,self.TerritoryID)then debug(false,bg.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bg.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.BuffName=bi;self.Buff=Buffs[bi]end end;function B_Goal_ActivateBuff:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bm=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then bm=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,bm)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(bm[self.BuffName])),bg)end;local bz=Logic.GetBuff(self.PlayerID,self.Buff)if bz and bz~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(bh)local bk={}if bh==1 then bk={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(bk,"Buff_Gems")table.insert(bk,"Buff_MusicalInstrument")table.insert(bk,"Buff_Olibanum")end;table.sort(bk)else assert(false)end;return bk end;function B_Goal_ActivateBuff:GetIcon()local bm={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then bm[Buffs.Buff_Gems]="Goods.G_Gems"bm[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"bm[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return bm[self.Buff]end;function B_Goal_ActivateBuff:Debug(bg)if not self.Buff then debug(false,bg.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(bh,bi)if bh==0 then self.Entity1=bi elseif bh==1 then self.Entity2=bi elseif bh==2 then self.bRoadsOnly=ToBoolean(bi)end end;function B_Goal_BuildRoad:GetCustomData(bh)local bk;if bh==2 then bk={"true","false"}end;return bk end;function B_Goal_BuildRoad:Debug(bg)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bg.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.EntityName1=bi elseif bh==2 then self.EntityName2=bi end end;function B_Goal_BuildWall:CustomFunction(bg)local bA=GetID(self.EntityName1)local bB=GetID(self.EntityName2)if not IsExisting(bA)then return false end;if not IsExisting(bB)then return false end;local E,F,G=Logic.EntityGetPos(bA)if Logic.IsBuilding(bA)==1 then E,F=Logic.GetBuildingApproachPosition(bA)end;local bC=Logic.GetPlayerSectorAtPosition(self.PlayerID,E,F)local E,F,G=Logic.EntityGetPos(bB)if Logic.IsBuilding(bB)==1 then E,F=Logic.GetBuildingApproachPosition(bB)end;local bD=Logic.GetPlayerSectorAtPosition(self.PlayerID,E,F)if bC~=bD then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(bg)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then debug(false,bg.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(bh,bi)if bh==0 then self.TerritoriesToClaim=bi*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 elseif bh==2 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,bj,self.GoodAmount}end;function B_Goal_Produce:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,bj,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 elseif bh==2 then self.bRelSmallerThan=bi=="<"or tostring(bi)=="true"end end;function B_Goal_GoodAmount:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Need=bi end end;function B_Goal_SatisfyNeed:GetMsgKey()local bm={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local bn=bm[Needs[self.Need]]if bn then return bn end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(bh,bi)if bh==0 then self.SettlersAmount=bi*1 elseif bh==1 then self.PlayerID=bi*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(bh,bi)if bh==0 then self.SpousesAmount=bi*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.bRelSmallerThan=tostring(bi)=="true"or tostring(bi)=="<"elseif bh==2 then self.NumberOfUnits=bi*1 end end;function B_Goal_SoldierCount:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bE=tostring(self.bRelSmallerThan)local bp=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),bp,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[bE]),self.NumberOfUnits),bg)end;local bF=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and bF<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and bF>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(bg)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(bh,bi)if bh==0 then self.KnightTitle=bi end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(bh)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(bh,bi)if bh==0 then self.PlayerID=tonumber(bi)else assert(bh==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(bi)end end;function B_Goal_Festivals:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bp=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),bp,self.NeededFestivals),bg)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local bG={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local bH=0;for g=2,#bG do local bI=bG[g]if Logic.GetIndexOnOutStockByGoodType(bI,Goods.G_Beer)~=-1 then local bJ=Logic.GetAmountOnOutStockByGoodType(bI,Goods.G_Beer)bH=bH+bJ end end;if not self.FestivalStarted and bH>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif bH==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then debug(false,bg.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_Capture:GetMsgKey()local ar=GetID(self.ScriptName)if Logic.IsEntityAlive(ar)then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 elseif bh==2 then self.PlayerID=bi*1 end end;function B_Goal_CaptureType:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then for f=0,8 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Goal_CaptureType:GetMsgKey()local ar=self.EntityName;if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ar=GetID(self.ScriptName)if ar and ar~=0 then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SpecialBuilding)==1 then local bm={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local br=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if br then local bn=bm[br]if bn then return bn end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.bRelSmallerThan=bi=="<"elseif bh==2 then self.Amount=bi*1 end end;function B_Goal_ResourceAmount:CustomFunction(bg)local ar=GetID(self.ScriptName)if ar and ar~=0 and Logic.GetResourceDoodadGoodType(ar)~=0 then local bK=Logic.GetResourceDoodadGoodAmount(ar)if self.bRelSmallerThan and bK<self.Amount or not self.bRelSmallerThan and bK>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_ResourceAmount:Debug(bg)if not IsExisting(self.ScriptName)then debug(false,bg.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Goal_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bg)end;function B_Goal_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Relation=bi elseif bh==2 then local bL=tonumber(bi)self.Value=bL==nil and tostring(bi)or bL end end;function B_Goal_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if bM==bN then return true end elseif self.Relation=="~="then if bM==bN then return true end elseif self.Relation=="<"then if bM<bN then return true end elseif self.Relation=="<="then if bM<=bN then return true end elseif self.Relation==">="then if bM>=bN then return true end else if bM>bN then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(bh)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(bg)local bO={"==","~=","<=","<",">",">="}local bP={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bg.Identifier..": "..self.Name..": variable '"..self.VariableName.."' does not exist!")end;if not table.contains(bO,self.Relation)then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(bg)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(bg)if not Logic.IsInteractiveObject(GetID(self.ScriptName))and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bQ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bQ]and CONST_INITIALIZED_OBJECTS[bQ]==bg.Identifier then debug(false,bg.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then local b6=0;if bi=="Always"or 1 then b6=1 end;self.UsingState=b6*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(bg)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(bh)if bh==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(bg)if not Logic.IsInteractiveObject(GetID(self.ScriptName))and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bQ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bQ]and CONST_INITIALIZED_OBJECTS[bQ]==bg.Identifier then debug(false,bg.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(bg)local bR=bg.SendingPlayer;local bS=bg.ReceivingPlayer;local State=GetDiplomacyState(bS,bR)if State>-2 then SetDiplomacyState(bS,bR,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID1=bi*1 elseif bh==1 then self.PlayerID2=bi*1 elseif bh==2 then self.Relation=DiplomacyStates[bi]end end;function B_Reprisal_Diplomacy:CustomFunction(bg)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(bg)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then debug(false,bg.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then debug(false,bg.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Reprisal_DestroyEntity:CustomFunction(bg)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(bg)if not IsExisting(self.ScriptName)and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(bh,bi)if bh==0 then self.EffectName=bi end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bg.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.NewType=bi elseif bh==2 then self.PlayerID=tonumber(bi)end end;function B_Reprisal_ReplaceEntity:CustomFunction(bg)local bQ=GetID(self.ScriptName)local bT=self.PlayerID;if bT==Logic.EntityGetPlayer(bQ)then bT=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],bT)end;function B_Reprisal_ReplaceEntity:GetCustomData(bh)local bk={}if bh==1 then for g,h in pairs(Entities)do local au={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then bk={"-","0","1","2","3","4","5","6","7","8"}end;return bk end;function B_Reprisal_ReplaceEntity:Debug(bg)if not Entities[self.NewType]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)and not self.WarningPrinted then self.WarningPrinted=true;warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestRestart:CustomFunction(bg)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestFailure:CustomFunction(bg)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestSuccess:CustomFunction(bg)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(bh,bi)if bh==0 then self.QuestName=bi else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(bg)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(bg)if not IsValidQuest(self.QuestName)then debug(false,bg.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestInterrupt:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)local ay=Quests[bV]if ay.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.InterruptEnded=ToBoolean(bi)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reprisal_QuestForceInterrupt:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)local ay=Quests[bV]if self.InterruptEnded or ay.State~=QuestState.Over then ay:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Operator=bi elseif bh==2 then local bL=tonumber(bi)self.Value=bL==nil and tostring(bi)or bL end end;function B_Reprisal_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then bM=bN elseif self.Operator=="+"then bM=bM+bN elseif self.Operator=="-"then bM=bM-bN elseif self.Operator=="*"then bM=bM*bN elseif self.Operator=="/"then bM=bM/bN elseif self.Operator=="^"then bM=bM%bN end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,bM)end;function B_Reprisal_CustomVariables:GetCustomData(bh)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(bg)local bW={"=","+","-","*","/","^"}if not table.contains(bW,self.Operator)then debug(false,bg.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then debug(false,bg.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Reprisal_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,bg)end;function B_Reprisal_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.LockType=bi=="Lock"elseif bh==2 then self.Technology=bi end end;function B_Reprisal_Technology:CustomFunction(bg)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(bh)local bk={}if bh==1 then bk[1]="Lock"bk[2]="UnLock"elseif bh==2 then for g,h in pairs(Technologies)do table.insert(bk,g)end end;return bk end;function B_Reprisal_Technology:Debug(bg)if not Technologies[self.Technology]then debug(false,bg.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.Distance=bi*1 elseif bh==2 then self.Waittime=bi*1 elseif bh==3 then self.RewardType=bi elseif bh==4 then self.RewardAmount=bi*1 elseif bh==5 then self.FirstCostType=bi elseif bh==6 then self.FirstCostAmount=bi*1 elseif bh==7 then self.SecondCostType=bi elseif bh==8 then self.SecondCostAmount=bi*1 elseif bh==9 then local b6=nil;if bi=="Always"or bi==1 then b6=1 elseif bi=="Never"or bi==2 then b6=2 elseif bi=="Knight only"or bi==0 then b6=0 end;self.UsingState=b6 end end;function B_Reward_ObjectInit:CustomFunction(bg)local bQ=GetID(self.ScriptName)if bQ==0 then return end;CONST_INITIALIZED_OBJECTS[bQ]=bg.Identifier;Logic.InteractiveObjectClearCosts(bQ)Logic.InteractiveObjectClearRewards(bQ)Logic.InteractiveObjectSetInteractionDistance(bQ,self.Distance)Logic.InteractiveObjectSetTimeToOpen(bQ,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(bQ,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(bQ,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(bQ,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(bQ,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(bQ,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(bQ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(bQ,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(bQ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(bQ,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(bQ)table.insert(HiddenTreasures,bQ)end;function B_Reward_ObjectInit:GetCustomData(bh)if bh==3 or bh==5 or bh==7 then local bk={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then bk[#bk+1]="G_Gems"bk[#bk+1]="G_MusicalInstrument"bk[#bk+1]="G_Olibanum"end;return bk elseif bh==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(bg)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then debug(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(false,bg.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then debug(false,bg.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(bg)local bR=bg.SendingPlayer;local bS=bg.ReceivingPlayer;local State=GetDiplomacyState(bS,bR)if State<2 then SetDiplomacyState(bS,bR,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradePost(...)return B_Reward_TradePost:new(...)end;B_Reward_TradePost={Name="B_Reward_TradePost",Description={en="Sets options for a Tradepost and deactivates it.",de="Stellt einen Handelsposten ein und deaktiviert ihn.",fr=""},Parameter={{ParameterType.ScriptName,en="ScriptName",de="ScriptName"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID"},{ParameterType.Custom,en="Type of good to pay 1",de="Resourcentyp Bezahlung 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 1",de="Resourcentyp Angebot 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource"},{ParameterType.Custom,en="Type of good to pay 2",de="Resourcentyp Bezahlung 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 2",de="Resourcentyp Angebot 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 3",de="Resourcentyp Bezahlung 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 3",de="Resourcentyp Angebot 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 4",de="Resourcentyp Bezahlung 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 4",de="Resourcentyp Angebot 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""}}}function B_Reward_TradePost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_TradePost:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==3 then self.PayType1=bi elseif bh==4 then self.PayAmount1=bi*1 elseif bh==5 then self.OfferType1=bi elseif bh==6 then self.OfferAmount1=bi*1 elseif bh==7 then self.PayType2=bi elseif bh==8 then self.PayAmount2=bi*1 elseif bh==9 then self.OfferType2=bi elseif bh==10 then self.OfferAmount2=bi*1 elseif bh==11 then self.PayType3=bi elseif bh==12 then self.PayAmount3=bi*1 elseif bh==13 then self.OfferType3=bi elseif bh==14 then self.OfferAmount3=bi*1 elseif bh==15 then self.PayType4=bi elseif bh==16 then self.PayAmount4=bi*1 elseif bh==17 then self.OfferType4=bi elseif bh==18 then self.OfferAmount4=bi*1 end end;function B_Reward_TradePost:CustomFunction(bg)local bX=0;for f=1,4 do if self["PayAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]and self["OfferAmount"..f]>0 then bX=f else break end end;debug(IsExisting(self.ScriptName),bg.Identifier..": Error in "..self.Name..": CustomFunction: Tradepost is missing")local bY=GetID(self.ScriptName)if bX>0 then Logic.TradePost_SetTradePartnerGenerateGoodsFlag(bY,true)Logic.TradePost_SetTradePartnerPlayerID(bY,self.PlayerID)for f=1,bX do for b8=1,bX do Logic.TradePost_SetTradeDefinition(bY,b8-1,Goods[self["PayType"..b8]],self["PayAmount"..b8],Goods[self["OfferType"..b8]],self["OfferAmount"..b8])end end;Logic.TradePost_SetActiveTradeSlot(bY,0)Logic.InteractiveObjectSetAvailability(bY,false)for q=1,8 do Logic.InteractiveObjectSetPlayerState(bY,q,2)end end end;function B_Reward_TradePost:DEBUG(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..":  Error in "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif not IsExisting(self.ScriptName)then debug(false,bg.Identifier..":  Error in "..self.Name..": No TradePost found")return true end;for f=1,4 do if self["PayAmount"..f]and self["OfferAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]>0 and(not Goods[self["PayType"..f]]or not Goods[self["OfferType"..f]])then debug(false,bg.Identifier..":  Error in "..self.Name..": Offer type or pay type in Slot "..f.." is wrong")return true end end end;function B_Reward_TradePost:GetCustomData(bZ)if bZ>=2 and bZ<=16 and bZ%2==0 then return{"G_Carcass","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Milk","G_RawFish","G_Stone","G_Wood","G_Wool","G_Salt","G_Dye","G_Olibanum","G_Gems","G_MusicalInstrument"}end end;if g_GameExtraNo and g_GameExtraNo>=1 then RegisterBehavior(B_Reward_TradePost)end;function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then bi=bi or 0;self.AmountOffer1=bi*1 elseif bh==2 then self.Offer1=bi elseif bh==3 then bi=bi or 0;self.AmountOffer2=bi*1 elseif bh==4 then self.Offer2=bi elseif bh==5 then bi=bi or 0;self.AmountOffer3=bi*1 elseif bh==6 then self.Offer3=bi elseif bh==7 then bi=bi or 0;self.AmountOffer4=bi*1 elseif bh==8 then self.Offer4=bi end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local b_=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(b_)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(b_,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(b_,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(b_,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(bh)local c0={1,2,3,4,5,6,7,8}local c1={"1","2","3","4","5","6","7","8","9"}local c2={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(c2,"G_Gems")table.insert(c2,"G_Olibanum")table.insert(c2,"G_MusicalInstrument")table.insert(c2,"G_MilitaryBandit_Ranged_AS")table.insert(c2,"G_MilitaryBandit_Melee_AS")table.insert(c2,"U_MilitarySword_Khana")table.insert(c2,"U_MilitaryBow_Khana")end;if bh==0 then return c0 elseif bh==1 or bh==3 or bh==5 or bh==7 then return c1 elseif bh==2 or bh==4 or bh==6 or bh==8 then return c2 end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.Orientation=bi*1 elseif bh==4 then self.SoldierCount=bi*1 elseif bh==5 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateBattalion:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,self.SoldierCount)local c4=GetID(self.ScriptNameEntity)if Logic.IsBuilding(c4)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(c3,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end;function B_Reward_CreateBattalion:GetCustomData(bh)local bk={}if bh==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateBattalion:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bg.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then self.ScriptNameEntity=bi elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.UnitKey=bi elseif bh==4 then self.Orientation=bi*1 elseif bh==5 then self.SoldierCount=bi*1 elseif bh==6 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local c5=GetID(self.ScriptNameEntity)local E,F,G=Logic.EntityGetPos(c5)if Logic.IsBuilding(c5)==1 then E,F=Logic.GetBuildingApproachPosition(c5)end;for f=1,self.Amount do local c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],E,F,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(c3,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(bh)local bk={}if bh==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==6 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateSeveralBattalions:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bg.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(bh,bi)if bh==0 then self.EffectName=bi elseif bh==1 then self.Type=EGL_Effects[bi]elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.Location=bi elseif bh==4 then self.Orientation=bi*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(bg)if Logic.IsEntityDestroyed(self.Location)then return end;local c6=assert(GetID(self.Location),bg.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local c7,c8=Logic.GetEntityPosition(c6)local aR=tonumber(self.Orientation)local c9=Logic.CreateEffectWithOrientation(self.Type,c7,c8,aR,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=c9 end end;function B_Reward_CreateEffect:Debug(bg)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then debug(false,bg.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then debug(false,bg.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then debug(false,bg.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(bh)assert(bh==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local ca={}for g,h in pairs(EGL_Effects)do table.insert(ca,g)end;table.sort(ca)return ca end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.Orientation=bi*1 elseif bh==4 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateEntity:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,1)local cb,cc=Logic.GetSoldiersAttachedToLeader(c3)Logic.SetOrientation(cc,math.floor(self.Orientation+0.5))else c3=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID)end;local c4=GetID(self.ScriptNameEntity)if Logic.IsBuilding(c4)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(c3,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end;function B_Reward_CreateEntity:GetCustomData(bh)local bk={}if bh==2 then for g,h in pairs(Entities)do local au={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==4 or bh==5 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateEntity:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then self.ScriptNameEntity=bi elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.UnitKey=bi elseif bh==4 then self.Orientation=bi*1 elseif bh==5 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateSeveralEntities:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,1)local cb,cc=Logic.GetSoldiersAttachedToLeader(c3)Logic.SetOrientation(cc,math.floor(self.Orientation+0.5))else c3=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(c3,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(bh)local bk={}if bh==3 then for g,h in pairs(Entities)do local au={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 or bh==6 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateSeveralEntities:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(bh,bi)if bh==0 then self.ScriptNameUnit=bi elseif bh==1 then self.ScriptNameDest=bi end end;function B_Reward_MoveSettler:CustomFunction(bg)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local cd=GetID(self.ScriptNameDest)local ce,cf=Logic.GetEntityPosition(cd)if Logic.IsBuilding(cd)==1 then ce,cf=Logic.GetBuildingApproachPosition(cd)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),ce,cf)end;function B_Reward_MoveSettler:Debug(bg)if not IsExisting(self.ScriptNameUnit)then debug(false,bg.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then debug(false,bg.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(bg)bg:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(bg.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end elseif bh==3 then self.NumSword=bi*1 elseif bh==4 then self.NumBow=bi*1 elseif bh==5 then self.NumCatapults=bi*1 elseif bh==6 then self.NumSiegeTowers=bi*1 elseif bh==7 then self.NumRams=bi*1 elseif bh==8 then self.NumAmmoCarts=bi*1 elseif bh==9 then if bi=="Normal"or bi==false then self.TroopType=false elseif bi=="RedPrince"or bi==true then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==10 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(bh)local bk={}if bh==9 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==10 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(bg)local cg=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if cg~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,cg,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then debug(false,bg.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then debug(false,bg.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then debug(false,bg.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then debug(false,bg.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then debug(false,bg.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TargetName=bi elseif bh==3 then self.Radius=bi*1 elseif bh==4 then self.NumSword=bi*1 elseif bh==5 then self.NumBow=bi*1 elseif bh==6 then if bi=="Normal"or bi==false then self.TroopType=false elseif bi=="RedPrince"or bi==true then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==7 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(bh)local bk={}if bh==6 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==7 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(bg)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local cg=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,cg,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bg.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TargetName=bi elseif bh==3 then self.Radius=bi*1 elseif bh==4 then self.Time=bi*1 elseif bh==5 then self.NumSword=bi*1 elseif bh==6 then self.NumBow=bi*1 elseif bh==7 then self.CaptureTradeCarts=ToBoolean(bi)elseif bh==8 then if bi=="Normal"or bi==true then self.TroopType=false elseif bi=="RedPrince"or bi==false then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==9 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(bh)local bk={}if bh==7 then table.insert(bk,"false")table.insert(bk,"true")elseif bh==8 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==9 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(bg)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local cg=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,cg,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bg.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then debug(false,bg.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then local ch={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=ch[bi]elseif bh==2 then self.Value=bi*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(bg)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(bh)if bh==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(bg)if Logic.GetStoreHouse(self.AIPlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then debug(false,bg.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then debug(false,bg.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then debug(false,bg.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then debug(false,bg.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(bh,bi)if bh==0 then self.AIPlayer=bi*1 elseif bh==1 then self.Aggressiveness=tonumber(bi)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local aQ=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)assert(aQ~=nil)PlayerAIs[self.AIPlayer]=aQ;if self.Aggressiveness>=2 then aQ.ProfileLoop=AIProfile_Skirmish;aQ.Skirmish=aQ.Skirmish or{}aQ.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;aQ.Skirmish.Claim_MaxTime=aQ.Skirmish.Claim_MinTime*2 else aQ.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(bg)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(bh)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(bh,bi)if bh==0 then self.AIPlayer=bi*1 elseif bh==1 then self.Enemy=bi*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local aQ=PlayerAIs[self.AIPlayer]if aQ and aQ.Skirmish then aQ.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(bg)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.Amount=bi*1 end end;function B_Reward_SetResourceAmount:CustomFunction(bg)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local w=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(w)==0 then return false end;Logic.SetResourceDoodadGoodAmount(w,self.Amount)end;function B_Reward_SetResourceAmount:Debug(bg)if not IsExisting(self.ScriptName)then debug(false,bg.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 end end;function B_Reward_Resources:GetRewardTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,bj,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.GoodType=bi elseif bh==4 then self.GoodAmount=bi*1 elseif bh==5 then self.OverrideTargetPlayer=tonumber(bi)elseif bh==6 then self.IgnoreReservation=ToBoolean(bi)elseif bh==7 then self.ReplaceEntity=ToBoolean(bi)end end;function B_Reward_SendCart:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local ar=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(ar,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(ar,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(bh)local bk={}if bh==2 then bk={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif bh==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 then table.insert(bk,"-")for f=1,8 do table.insert(bk,f)end elseif bh==6 then table.insert(bk,"false")table.insert(bk,"true")elseif bh==7 then table.insert(bk,"false")table.insert(bk,"true")end;return bk end;function B_Reward_SendCart:Debug(bg)if not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then debug(false,bg.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then debug(false,bg.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then debug(false,bg.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(bh,bi)if bh==0 then self.Points=bi end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi else self.SoldiersType=bi end end;function B_Reward_AI_MountOutpost:CustomFunction(bg)local ci=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),bg.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local cj=Logic.EntityGetPlayer(ci)local ck,cl=Logic.GetBuildingApproachPosition(ci)local cm=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],ck,cl,0,cj,0)AICore.HideEntityFromAI(cj,cm,true)Logic.CommandEntityToMountBuilding(cm,ci)end;function B_Reward_AI_MountOutpost:GetCustomData(bh)if bh==1 then local bk={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then bk[#bk+1]=g end end;return bk end end;function B_Reward_AI_MountOutpost:Debug(bg)if Logic.IsEntityDestroyed(self.Scriptname)then debug(false,bg.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(bh,bi)self.QuestName=bi end;function B_Reward_QuestRestartForceActive:CustomFunction(bg)local bV,ay=self:ResetQuest(bg)if bV then ay:SetMsgKeyOverride()ay:SetIconOverride()ay:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi end end;function B_Reward_UpgradeBuilding:CustomFunction(bg)local cn=GetID(self.Building)if cn~=0 and Logic.IsBuilding(cn)==1 and Logic.IsBuildingUpgradable(cn,true)and Logic.IsBuildingUpgradable(cn,false)then Logic.UpgradeBuilding(cn)end end;function B_Reward_UpgradeBuilding:Debug(bg)local cn=GetID(self.Building)if not(cn~=0 and Logic.IsBuilding(cn)==1 and Logic.IsBuildingUpgradable(cn,true)and Logic.IsBuildingUpgradable(cn,false))then debug(false,bg.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then self.UpgradeLevel=tonumber(bi)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local cn=Logic.GetEntityIDByName(self.Building)local co=Logic.GetUpgradeLevel(cn)local cp=Logic.GetMaxUpgradeLevel(cn)if cn~=0 and Logic.IsBuilding(cn)==1 and(Logic.IsBuildingUpgradable(cn,true)or cp~=0 and cp==co)then Logic.SetUpgradableBuildingState(cn,math.min(self.UpgradeLevel,cp),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(bg)local cn=Logic.GetEntityIDByName(self.Building)if not cn or Logic.IsBuilding(cn)==0 then debug(false,bg.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then debug(false,bg.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(bh)if bh==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.DiplState=bi end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Need=bi elseif bh==2 then self.WorkersOnStrike=bi*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(bg)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then debug(false,bg.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then debug(false,bg.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Trigger_OnResourceDepleted:CustomFunction(bg)local ar=GetID(self.ScriptName)return not ar or ar==0 or Logic.GetResourceDoodadGoodType(ar)==0 or Logic.GetResourceDoodadGoodAmount(ar)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.GoodTypeName=bi elseif bh==2 then self.GoodAmount=bi*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(bg)local cq=Logic.GetStoreHouse(self.PlayerID)if cq==0 then return false end;local bj=Logic.GetGoodTypeID(self.GoodTypeName)local cr=Logic.GetAmountOnOutStockByGoodType(cq,bj)if cr>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then debug(false,bg.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then debug(false,bg.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(bg)local bV=GetQuestID(self.QuestName)if bV~=nil then assert(type(bV)=="number")if Quests[bV].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(bg)end;function B_Trigger_OnQuestActiveWait:Reset(bg)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.Over and Quests[bV].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.Over and Quests[bV].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Relation=bi elseif bh==2 then local bL=tonumber(bi)bL=bL~=nil and bL or bi;self.Value=bL end end;function B_Trigger_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return bM==bN elseif self.Relation~="~="then return bM~=bN elseif self.Relation==">"then return bM>bN elseif self.Relation==">="then return bM>=bN elseif self.Relation=="<="then return bM<=bN else return bM<bN end;return false end;function B_Trigger_CustomVariables:GetCustomData(bh)if bh==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(bg)local bO={"==","~=","<=","<",">",">="}local bP={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bg.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(bO,self.Relation)then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(bh,bi)if bh==0 then self.Month=bi*1 end end;function B_Trigger_OnMonth:CustomFunction(bg)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(bh)local bk={}if bh==0 then for f=1,12 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Trigger_OnMonth:Debug(bg)if self.Month<1 or self.Month>12 then debug(false,bg.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(bg)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(bh,bi)if bh==0 then self.Time=bi*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(bg)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if cs.State==QuestState.Over and cs.Result==QuestResult.Failure or ct.State==QuestState.Over and ct.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(bg)if self.Quest1==self.Quest2 then debug(false,bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if cs.State==QuestState.Over and cs.Result==QuestResult.Success or ct.State==QuestState.Over and ct.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(bg)if self.Quest1==self.Quest2 then debug(false,bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(bg)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Trigger_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bg)end;function B_Trigger_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(bh,bi)if bh==0 then self.EffectName=bi end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bg.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)Lib.Core=Lib.Core or{}Lib.Core.Player={}CONST_PLAYER_NAMES={}Lib.Register("core/feature/Core_Player")function Lib.Core.Player:Initialize()for q=1,8 do CONST_PLAYER_NAMES[q]=""end;self:OverwriteNamingComforts()end;function Lib.Core.Player:OnSaveGameLoaded()end;function Lib.Core.Player:OnReportReceived(aM,...)end;function Lib.Core.Player:OverwriteNamingComforts()GetPlayerName=function(n)return Lib.Core.Player:GetPlayerName(n)end;SetPlayerName=function(n,C)assert(type(n)=="number")assert(type(C)=="string")if not IsLocalScript()then ExecuteLocal([[SetPlayerName(%d, "%s")]],n,C)end;return Lib.Core.Player:SetPlayerName(n,C)end;SetPlayerColor=function(n,cu,cv,cw)error(not IsLocalScript(),"Player color must be set from logic!")Lib.Core.Player:SetPlayerColor(n,cu,cv,cw)end;GetTerritoryName=function(bu)return Lib.Core.Player:GetTerritoryName(bu)end end;function SetPlayerPortrait(n,cx)error(n>=1 and n<=8,"Invalid player ID!")if not IsLocalScript()then local cy=cx~=nil and"'"..cx.."'"or"nil"ExecuteLocal("SetPlayerPortrait(%d, %s)",n,cy)return end;if cx==nil then Lib.Core.Player:SetPlayerPortraitByPrimaryKnight(n)elseif cx~=nil and IsExisting(cx)then Lib.Core.Player:SetPlayerPortraitBySettler(n,cx)else Lib.Core.Player:SetPlayerPortraitByModelName(n,cx)end end;API.SetPlayerPortrait=SetPlayerPortrait;function Lib.Core.Player:GetPlayerName(n)local bp=Logic.GetPlayerName(n)local au=CONST_PLAYER_NAMES[n]if au~=nil and au~=""then bp=au end;local cz=Framework.GetCurrentMapTypeAndCampaignName()local cA=Framework.GetCurrentMapName()local cB=Framework.GetMultiplayerMapMode(cA,cz)if cB>0 then return bp end;if cz==1 or cz==3 then local cC,s,s=Framework.GetPlayerInfo(n)if bp~=""then return bp end;return cC end;return bp end;function Lib.Core.Player:SetPlayerName(n,C)CONST_PLAYER_NAMES[n]=C;if IsLocalScript()then GUI_MissionStatistic.PlayerNames[n]=C end end;function Lib.Core.Player:SetPlayerColor(n,cu,cv,cw)g_ColorIndex["ExtraColor1"]=g_ColorIndex["ExtraColor1"]or 16;g_ColorIndex["ExtraColor2"]=g_ColorIndex["ExtraColor2"]or 17;local cD=type(cu)=="string"and g_ColorIndex[cu]or cu;local cE=cv or-1;local cF=cw or-1;Logic.PlayerSetPlayerColor(n,cD,cE,cF)ExecuteLocal([[
        Display.UpdatePlayerColors()
        GUI.RebuildMinimapTerrain()
        GUI.RebuildMinimapTerritory()
    ]])end;function Lib.Core.Player:GetTerritoryName(bu)local Name=Logic.GetTerritoryName(bu)local cz=Framework.GetCurrentMapTypeAndCampaignName()if cz==1 or cz==3 then return Name end;local cA=Framework.GetCurrentMapName()local cG="Map_"..cA;local TerritoryName=string.gsub(Name," ","")TerritoryName=XGUIEng.GetStringTableText(cG.."/Territory_"..TerritoryName)if TerritoryName==""then TerritoryName=Name.."(key?)"end;return TerritoryName end;function Lib.Core.Player:SetPlayerPortraitByPrimaryKnight(n)local cH=Logic.GetKnightID(n)local cI="H_NPC_Generic_Trader"if cH~=0 then local cJ=Logic.GetEntityType(cH)local cK=Logic.GetEntityTypeName(cJ)cI="H"..string.sub(cK,2,8).."_"..string.sub(cK,9)if not Models["Heads_"..cI]then cI="H_NPC_Generic_Trader"end end;g_PlayerPortrait[n]=cI end;function Lib.Core.Player:SetPlayerPortraitBySettler(n,cx)local cL={["U_KnightChivalry"]="H_Knight_Chivalry",["U_KnightHealing"]="H_Knight_Healing",["U_KnightPlunder"]="H_Knight_Plunder",["U_KnightRedPrince"]="H_Knight_RedPrince",["U_KnightSabatta"]="H_Knight_Sabatt",["U_KnightSong"]="H_Knight_Song",["U_KnightTrading"]="H_Knight_Trading",["U_KnightWisdom"]="H_Knight_Wisdom",["U_NPC_Amma_NE"]="H_NPC_Amma",["U_NPC_Castellan_ME"]="H_NPC_Castellan_ME",["U_NPC_Castellan_NA"]="H_NPC_Castellan_NA",["U_NPC_Castellan_NE"]="H_NPC_Castellan_NE",["U_NPC_Castellan_SE"]="H_NPC_Castellan_SE",["U_MilitaryBandit_Ranged_ME"]="H_NPC_Mercenary_ME",["U_MilitaryBandit_Melee_NA"]="H_NPC_Mercenary_NA",["U_MilitaryBandit_Melee_NE"]="H_NPC_Mercenary_NE",["U_MilitaryBandit_Melee_SE"]="H_NPC_Mercenary_SE",["U_NPC_Monk_ME"]="H_NPC_Monk_ME",["U_NPC_Monk_NA"]="H_NPC_Monk_NA",["U_NPC_Monk_NE"]="H_NPC_Monk_NE",["U_NPC_Monk_SE"]="H_NPC_Monk_SE",["U_NPC_Villager01_ME"]="H_NPC_Villager01_ME",["U_NPC_Villager01_NA"]="H_NPC_Villager01_NA",["U_NPC_Villager01_NE"]="H_NPC_Villager01_NE",["U_NPC_Villager01_SE"]="H_NPC_Villager01_SE"}if g_GameExtraNo>0 then cL["U_KnightPraphat"]="H_Knight_Praphat"cL["U_KnightSaraya"]="H_Knight_Saraya"cL["U_KnightKhana"]="H_Knight_Khana"cL["U_MilitaryBandit_Melee_AS"]="H_NPC_Mercenary_AS"cL["U_NPC_Castellan_AS"]="H_NPC_Castellan_AS"cL["U_NPC_Villager_AS"]="H_NPC_Villager_AS"cL["U_NPC_Monk_AS"]="H_NPC_Monk_AS"cL["U_NPC_Monk_Khana"]="H_NPC_Monk_Khana"end;local cI="H_NPC_Generic_Trader"local w=GetID(cx)if w~=0 then local cM=Logic.GetEntityType(w)local cN=Logic.GetEntityTypeName(cM)cI=cL[cN]or"H_NPC_Generic_Trader"if not cI then cI="H_NPC_Generic_Trader"end end;g_PlayerPortrait[n]=cI end;function Lib.Core.Player:SetPlayerPortraitByModelName(n,cx)if not Models["Heads_"..tostring(cx)]then cx="H_NPC_Generic_Trader"end;g_PlayerPortrait[n]=cx end;Lib.Core=Lib.Core or{}Lib.Core.LuaExtension={}CONST_TO_LOWERCASE_LOOKUP={["À"]="à",["Á"]="á",["Â"]="â",["Ã"]="ã",["Ä"]="ä",["Å"]="å",["Æ"]="æ",["Ç"]="ç",["È"]="è",["É"]="é",["Ê"]="ê",["Ë"]="ë",["Ì"]="ì",["Í"]="í",["Î"]="î",["Ï"]="ï",["Ð"]="ð",["Ñ"]="ñ",["Ò"]="ò",["Ó"]="ó",["Ô"]="ô",["Õ"]="õ",["Ö"]="ö",["Ø"]="ø",["Ù"]="ù",["Ú"]="ú",["Û"]="û",["Ü"]="ü",["Ý"]="ý",["Þ"]="þ",["Ā"]="ā",["Ă"]="ă",["Ą"]="ą",["Ć"]="ć",["Ĉ"]="ĉ",["Ċ"]="ċ",["Č"]="č",["Ď"]="ď",["Đ"]="đ",["Ē"]="ē",["Ĕ"]="ĕ",["Ė"]="ė",["Ę"]="ę",["Ě"]="ě",["Ĝ"]="ĝ",["Ğ"]="ğ",["Ġ"]="ġ",["Ģ"]="ģ",["Ĥ"]="ĥ",["Ħ"]="ħ",["Ĩ"]="ĩ",["Ī"]="ī",["Ĭ"]="ĭ",["Į"]="į",["İ"]="i",["Ĳ"]="ĳ",["Ĵ"]="ĵ",["Ķ"]="ķ",["Ĺ"]="ĺ",["Ļ"]="ļ",["Ľ"]="ľ",["Ŀ"]="ŀ",["Ł"]="ł",["Ń"]="ń",["Ņ"]="ņ",["Ň"]="ň",["Ŋ"]="ŋ",["Ō"]="ō",["Ŏ"]="ŏ",["Ő"]="ő",["Œ"]="œ",["Ŕ"]="ŕ",["Ŗ"]="ŗ",["Ř"]="ř",["Ś"]="ś",["Ŝ"]="ŝ",["Ş"]="ş",["Š"]="š",["Ţ"]="ţ",["Ť"]="ť",["Ŧ"]="ŧ",["Ũ"]="ũ",["Ū"]="ū",["Ŭ"]="ŭ",["Ů"]="ů",["Ű"]="ű",["Ų"]="ų",["Ŵ"]="ŵ",["Ŷ"]="ŷ",["Ÿ"]="ÿ",["Ź"]="ź",["Ż"]="ż",["Ž"]="ž",["ß"]="ß"}CONST_TO_UPPERCASE_LOOKUP={["à"]="À",["á"]="Á",["â"]="Â",["ã"]="Ã",["ä"]="Ä",["å"]="Å",["æ"]="Æ",["ç"]="Ç",["è"]="È",["é"]="É",["ê"]="Ê",["ë"]="Ë",["ì"]="Ì",["í"]="Í",["î"]="Î",["ï"]="Ï",["ð"]="Ð",["ñ"]="Ñ",["ò"]="Ò",["ó"]="Ó",["ô"]="Ô",["õ"]="Õ",["ö"]="Ö",["ø"]="Ø",["ù"]="Ù",["ú"]="Ú",["û"]="Û",["ü"]="Ü",["ý"]="Ý",["þ"]="Þ",["ā"]="Ā",["ă"]="Ă",["ą"]="Ą",["ć"]="Ć",["ĉ"]="Ĉ",["ċ"]="Ċ",["č"]="Č",["ď"]="Ď",["đ"]="Đ",["ē"]="Ē",["ĕ"]="Ĕ",["ė"]="Ė",["ę"]="Ę",["ě"]="Ě",["ĝ"]="Ĝ",["ğ"]="Ğ",["ġ"]="Ġ",["ģ"]="Ģ",["ĥ"]="Ĥ",["ħ"]="Ħ",["ĩ"]="Ĩ",["ī"]="Ī",["ĭ"]="Ĭ",["į"]="Į",["i"]="İ",["ĳ"]="Ĳ",["ĵ"]="Ĵ",["ķ"]="Ķ",["ĺ"]="Ĺ",["ļ"]="Ļ",["ľ"]="Ľ",["ŀ"]="Ŀ",["ł"]="Ł",["ń"]="Ń",["ņ"]="Ņ",["ň"]="Ň",["ŋ"]="Ŋ",["ō"]="Ō",["ŏ"]="Ŏ",["ő"]="Ő",["œ"]="Œ",["ŕ"]="Ŕ",["ŗ"]="Ŗ",["ř"]="Ř",["ś"]="Ś",["ŝ"]="Ŝ",["ş"]="Ş",["š"]="Š",["ţ"]="Ţ",["ť"]="Ť",["ŧ"]="Ŧ",["ũ"]="Ũ",["ū"]="Ū",["ŭ"]="Ŭ",["ů"]="Ů",["ű"]="Ű",["ų"]="Ų",["ŵ"]="Ŵ",["ŷ"]="Ŷ",["ÿ"]="Ÿ",["ź"]="Ź",["ż"]="Ż",["ž"]="Ž",["ß"]="ß"}Lib.Require("comfort/CopyTable")Lib.Require("comfort/SerializeTable")Lib.Register("core/feature/Core_LuaExtension")function Lib.Core.LuaExtension:Initialize()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnSaveGameLoaded()self:OverrideTable()self:OverrideString()self:OverrideMath()end;function Lib.Core.LuaExtension:OnReportReceived(aM,...)end;function Lib.Core.LuaExtension:OverrideTable()table.compare=function(cO,cP,cQ)assert(type(cO)=="table")assert(type(cP)=="table")cQ=cQ or function(cO,cP)return tostring(cO)<tostring(cP)end;assert(type(cQ)=="function")return cQ(cO,cP)end;table.equals=function(cO,cP)assert(type(cO)=="table")assert(type(cP)=="table")local cQ=function(cO,cP)return table.tostring(cO)<table.tostring(cP)end;assert(type(cQ)=="function")return cQ(cO,cP)end;table.contains=function(cR,cS)assert(type(cR)=="table")for g,h in pairs(cR)do if h==cS then return true end end;return false end;table.length=function(cR)return#cR end;table.size=function(cR)local cT=0;for g,h in pairs(cR)do if g~="n"or g=="n"and type(h)~="number"then cT=cT+1 end end;return cT end;table.isEmpty=function(cR)return table.size(cR)==0 end;table.copy=function(cO,cP)cP=cP or{}assert(type(cO)=="table")assert(type(cP)=="table")return CopyTable(cO,cP)end;table.invert=function(cO)assert(type(cO)=="table")local cP={}for f=table.length(cO),1,-1 do table.insert(cP,cO[f])end;return cP end;table.push=function(cR,cS)assert(type(cR)=="table")table.insert(cR,1,cS)end;table.pop=function(cR)assert(type(cR)=="table")return table.remove(cR,1)end;table.tostring=function(cR)return SerializeTable(cR)end end;function Lib.Core.LuaExtension:OverrideString()string.contains=function(self,cc)return self:find(cc)~=nil end;string.indexOf=function(self,cc)return self:find(cc)end;string.slice=function(self,cU)cU=cU or"%s"local cR={}if self then for cV in self:gmatch("([^"..cU.."]+)")do table.insert(cR,cV)end end;return cR end;string.join=function(self,...)local cc=""local cW={self,...}for f=1,#cW do if type(cW[f])=="table"then cc=cc..string.join(unpack(cW[f]))else cc=cc..tostring(cW[f])end end;return cc end;string.replace=function(self,cX,cY)local cc,cT=self:gsub(cX,cY,1)return cc end;string.replaceAll=function(self,cX,cY)local cc,cT=self:gsub(cX,cY)return cc end;string.toLowerCase=function(cc)local cZ=string.gsub(cc,".",CONST_TO_LOWERCASE_LOOKUP)return cZ end;function string.toUpperCase(cc)local cZ=string.gsub(cc,".",CONST_TO_UPPERCASE_LOOKUP)return cZ end end;function Lib.Core.LuaExtension:OverrideMath()math.lerp=function(cc,cT,cS)local c_=(cT-cc)/cS;return c_>1 and 1 or c_ end;math.cerp=function(cc,cT,cS)local c_=(cT-cc)/cS;local cR=c_*c_*(3-2*c_)return cR>1 and 1 or cR end;math.qmod=function(ai,d0)return ai-math.floor(ai/d0)*d0 end;math.factorial=function(d1)return d1==0 and 1 or d1*math.factorial(d1-1)end end;Lib.Core=Lib.Core or{}Lib.Core.Report={ScriptEventRegister={},ScriptEventListener={},ScriptCommandRegister={},ScriptCommandSequence=2,OriginPlayer=0}Report=Report or{}Command=Command or{}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_Report")function Lib.Core.Report:Initialize()if not IsLocalScript()then self:OverrideSoldierPaymentGlobal()self:CreateScriptCommand("Cmd_SendReportToGlobal",function(d2)local ar=table.remove(d2,1)if ar then SendReport(ar,unpack(d2))end end)else self:OverrideSoldierPaymentLocal()end end;function Lib.Core.Report:OnSaveGameLoaded()end;function Lib.Core.Report:OnReportReceived(aM,...)end;function Lib.Core.Report:OverrideSoldierPaymentGlobal()GameCallback_SetSoldierPaymentLevel_Orig_Libertica=GameCallback_SetSoldierPaymentLevel;GameCallback_SetSoldierPaymentLevel=function(n,d3)if d3<=2 then return GameCallback_SetSoldierPaymentLevel_Orig_Libertica(n,d3)end;Lib.Core.Report:ProcessScriptCommand(n,d3)end end;function Lib.Core.Report:OverrideSoldierPaymentLocal()GUI_BuildingInfo.PaymentLevelSliderChanged=function()local d4=XGUIEng.GetCurrentWidgetID()local q=GUI.GetPlayerID()local d5=PlayerSoldierPaymentLevel[q]local d6=XGUIEng.SliderGetValueAbs(d4)if d6<=2 and d5~=d6 then GUI.SetSoldierPaymentLevel(d6)end end;GUI_BuildingInfo.PaymentLevelSliderUpdate=function()local d7="/InGame/Root/Normal/AlignBottomRight/Selection/Castle/Treasury/Payment/PaymentSlider"local d8=XGUIEng.GetWidgetID(d7)local q=GUI.GetPlayerID()local d5=PlayerSoldierPaymentLevel[q]local d6=XGUIEng.SliderGetValueAbs(d8)if d6<=2 and d5~=d6 then XGUIEng.SliderSetValueAbs(d8,d5)end end end;function Lib.Core.Report:ProcessScriptCommand(n,aM)assert(aM and self.ScriptCommandRegister[aM],"Commands is invalid.")local bp=Logic.GetPlayerName(n+4)local d9=self:DecodeScriptCommandParameters(bp)self.OriginPlayer=n;self.ScriptCommandRegister[aM][2](d9)self.OriginPlayer=0 end;function Lib.Core.Report:GetReportSourcePlayerID()return self.OriginPlayer end;function Lib.Core.Report:CreateScriptCommand(C,da)assert(not IsLocalScript(),"Commands must be created in global script.")self.ScriptCommandSequence=self.ScriptCommandSequence+1;local ar=self.ScriptCommandSequence;local Name=C;if string.find(C,"^Cmd_")then Name=string.sub(C,5)end;self.ScriptCommandRegister[ar]={Name,da}ExecuteLocal([[
        local ID, Name = %d, "%s"
        Lib.Core.Report.ScriptCommandRegister[ID] = Name
        Command[Name] = ID
    ]],ar,Name)end;function Lib.Core.Report:DecodeScriptCommandParameters(db)local d9={}for g,h in pairs(string.slice(db,"#"))do local dc=h;dc=dc:replaceAll("<<<HT>>>",'#')dc=dc:replaceAll("<<<QT>>>",'"')dc=dc:replaceAll("<<<ES>>>",'')if dc==nil then dc=nil elseif dc=="true"or dc=="false"then dc=dc=="true"elseif string.indexOf(dc,"{")==1 then local dd=string.slice(string.sub(dc,2,string.len(dc)-1),",")dc={}for f=1,#dd do dc[f]=tonumber(dd[f])~=nil and tonumber(dd[f])or dd end elseif tonumber(dc)~=nil then dc=tonumber(dc)end;table.insert(d9,dc)end;return d9 end;function Lib.Core.Report:SendScriptCommand(aM,...)assert(IsLocalScript(),"Commands must be send in local script.")assert(aM and self.ScriptCommandRegister[aM],"Command is invalid.")local q=GUI.GetPlayerID()local de=q+4;local bp=Logic.GetPlayerName(de)local d9=self:EncodeScriptCommandParameters(...)GUI.SetPlayerName(de,d9)if IsHistoryEdition()and IsMultiplayer()then GUI.SetSoldierPaymentLevel(aM)else ExecuteGlobal([[Lib.Core.Report:ProcessScriptCommand(%d, %d)]],q,aM)end;GUI.SetPlayerName(de,bp)GUI.SetSoldierPaymentLevel(PlayerSoldierPaymentLevel[q])end;function Lib.Core.Report:EncodeScriptCommandParameters(...)local df=""for f=1,#arg do local dg=arg[f]if type(dg)=="string"then dg=dg:gsub('#',"<<<HT>>>")dg=dg:gsub('"',"<<<QT>>>")if dg:len()==0 then dg="<<<ES>>>"end elseif type(dg)=="table"then dg="{"..table.concat(dg,",").."}"end;if string.len(df)>0 then df=df.."#"end;df=df..tostring(dg)end;return df end;function Lib.Core.Report:CreateReport(C)assert(type(C)=="string","Report name must be a string.")for f=1,#self.ScriptEventRegister,1 do if self.ScriptEventRegister[f]==C then assert(false,"Report already exists")return 0 end end;local ar=#self.ScriptEventRegister+1;self.ScriptEventRegister[ar]=C;self.ScriptEventListener[ar]={SequenceID=0}return ar end;function Lib.Core.Report:SendReport(aM,...)local arg={...}assert(self.ScriptEventRegister[aM]~=nil,"Report type does not exist.")if GameCallback_Lib_OnEventReceived then GameCallback_Lib_OnEventReceived(aM,unpack(arg))end;if self.ScriptEventListener[aM]then for g,h in pairs(self.ScriptEventListener[aM])do if tonumber(g)then h(unpack(arg))end end end end;function Lib.Core.Report:CreateReportReceiver(dh,da)assert(type(da)=="function","Listener must be a function.")assert(self.ScriptEventRegister[dh]~=nil,"Event does not exist.")local bk=self.ScriptEventListener[dh]self.ScriptEventListener[dh].SequenceID=bk.SequenceID+1;self.ScriptEventListener[dh][bk.SequenceID]=da;return bk.SequenceID end;function Lib.Core.Report:RemoveReportReceiver(dh,aM)assert(self.ScriptEventRegister[dh]~=nil,"Event does not exist.")self.ScriptEventListener[dh][aM]=nil end;function CreateReport(C)return Lib.Core.Report:CreateReport(C)end;API.CreateScriptEvent=CreateReport;function SendReport(aM,...)local arg={...}Lib.Core.Report:SendReport(aM,unpack(arg))end;API.SendScriptEvent=SendReport;function GetReportSender()return Lib.Core.Report:GetReportSourcePlayerID()end;API.GetReportSender=GetReportSender;API.GetReportSourcePlayerID=GetReportSender;function SendReportToGlobal(aM,...)assert(IsLocalScript(),"Was called from global script.")Lib.Core.Report:SendScriptCommand(Command.SendReportToGlobal,aM,...)end;API.SendScriptEventToGlobal=SendReportToGlobal;function SendReportToLocal(aM,...)assert(not IsLocalScript(),"Was called from local script.")local arg={...}if#arg>0 then local dg=""for f=1,#arg do if f>1 then dg=dg..","end;if type(arg[f])=="string"then dg=dg.."\""..arg[f].."\""elseif type(arg[f])=="table"then dg=dg..table.tostring(arg[f])else dg=dg..tostring(arg[f])end end;ExecuteLocal([[SendReport(%d, %s)]],aM,dg)else ExecuteLocal([[SendReport(%d)]],aM)end end;API.SendScriptEventToLocal=SendReportToLocal;function CreateReportReceiver(dh,da)return Lib.Core.Report:CreateReportReceiver(dh,da)end;API.CreateScriptEventReceiver=CreateReportReceiver;function RemoveReportReceiver(dh,aM)Lib.Core.Report:RemoveReportReceiver(dh,aM)end;API.RemoveScriptEventReceiver=RemoveReportReceiver;Lib.Core=Lib.Core or{}Lib.Core.Quest={QuestCounter=0,Text={ActivateBuff={Pattern={de="BONUS AKTIVIEREN{cr}{cr}%s",en="ACTIVATE BUFF{cr}{cr}%s",fr="ACTIVER BONUS{cr}{cr}%s"},BuffsVanilla={["Buff_Spice"]={de="Salz",en="Salt",fr="Sel"},["Buff_Colour"]={de="Farben",en="Color",fr="Couleurs"},["Buff_Entertainers"]={de="Entertainer",en="Entertainer",fr="Artistes"},["Buff_FoodDiversity"]={de="Vielfältige Nahrung",en="Food diversity",fr="Diversité alimentaire"},["Buff_ClothesDiversity"]={de="Vielfältige Kleidung",en="Clothes diversity",fr="Diversité vestimentaire"},["Buff_HygieneDiversity"]={de="Vielfältige Reinigung",en="Hygiene diversity",fr="Diversité hygiénique"},["Buff_EntertainmentDiversity"]={de="Vielfältige Unterhaltung",en="Entertainment diversity",fr="Diversité des dievertissements"},["Buff_Sermon"]={de="Predigt",en="Sermon",fr="Sermon"},["Buff_Festival"]={de="Fest",en="Festival",fr="Festival"},["Buff_ExtraPayment"]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},["Buff_HighTaxes"]={de="Hohe Steuern",en="High taxes",fr="Hautes taxes"},["Buff_NoPayment"]={de="Kein Sold",en="No payment",fr="Aucun paiement"},["Buff_NoTaxes"]={de="Keine Steuern",en="No taxes",fr="Aucune taxes"}},BuffsEx1={["Buff_Gems"]={de="Edelsteine",en="Gems",fr="Gemmes"},["Buff_MusicalInstrument"]={de="Musikinstrumente",en="Musical instruments",fr="Instruments musicaux"},["Buff_Olibanum"]={de="Weihrauch",en="Olibanum",fr="Encens"}}},SoldierCount={Pattern={de="SOLDATENANZAHL {cr}Partei: %s{cr}{cr}%s %d",en="SOLDIER COUNT {cr}Faction: %s{cr}{cr}%s %d",fr="NOMBRE DE SOLDATS {cr}Faction: %s{cr}{cr}%s %d"},Relation={["true"]={de="Weniger als ",en="Less than ",fr="Moins de"},["false"]={de="Mindestens ",en="At least ",fr="Au moins"}}},Festivals={Pattern={de="FESTE FEIERN {cr}{cr}Partei: %s{cr}{cr}Anzahl: %d",en="HOLD PARTIES {cr}{cr}Faction: %s{cr}{cr}Amount: %d",fr="FESTIVITÉS {cr}{cr}Faction: %s{cr}{cr}Nombre : %d"}}}}CONST_EFFECT_NAME_TO_ID={}CONST_INITIALIZED_OBJECTS={}CONST_REFILL_AMOUNT={}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/ToBoolean")Lib.Require("comfort/GetHealth")Lib.Require("comfort/CopyTable")Lib.Require("comfort/GetQuestID")Lib.Require("comfort/IsValidQuest")Lib.Require("comfort/SendCart")Lib.Require("comfort/SetResourceAmount")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Quest")function SaveCustomVariable(C,a2)Lib.Core.Quest:SetCustomVariable(C,a2)end;function ObtainCustomVariable(C,di)local dc=Lib.CustomVariable[C]if not dc and di then dc=di end;return dc end;function Lib.Core.Quest:Initialize()Report.CustomValueChanged=CreateReport("Event_CustomValueChanged")Report.QuestFailure=CreateReport("Event_QuestFailure")Report.QuestInterrupt=CreateReport("Event_QuestInterrupt")Report.QuestReset=CreateReport("Event_QuestReset")Report.QuestSuccess=CreateReport("Event_QuestSuccess")Report.QuestTrigger=CreateReport("Event_QuestTrigger")if not IsLocalScript()then self:OverrideQuestSystemGlobal()self:OverrideQuestMarkers()self:OverwriteGeologistRefill()end;if IsLocalScript()then self:OverrideDisplayQuestObjective()end end;function Lib.Core.Quest:OnSaveGameLoaded()end;function Lib.Core.Quest:OnReportReceived(aM,...)end;function Lib.Core.Quest:OverrideQuestMarkers()QuestTemplate.RemoveQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then DestroyQuestMarker(self.Objectives[f].Data[2])end end end end;QuestTemplate.ShowQuestMarkers=function(self)for f=1,self.Objectives[0]do if self.Objectives[f].Type==Objective.Distance then if self.Objectives[f].Data[4]then ShowQuestMarker(self.Objectives[f].Data[2])end end end end;function ShowQuestMarker(l)local bQ=GetID(l)local E,F=Logic.GetEntityPosition(bQ)local dj=EGL_Effects.E_Questmarker_low;if Logic.IsBuilding(bQ)==1 then dj=EGL_Effects.E_Questmarker end;DestroyQuestMarker(l)Questmarkers[bQ]=Logic.CreateEffect(dj,E,F,0)end;function DestroyQuestMarker(l)local bQ=GetID(l)if Questmarkers[bQ]~=nil then Logic.DestroyEffect(Questmarkers[bQ])Questmarkers[bQ]=nil end end end;function Lib.Core.Quest:OverrideDisplayQuestObjective()GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(dk,dl)local ay,dm=GUI_Interaction.GetPotentialSubQuestAndType(dk)if dm==Objective.Distance then if ay.Objectives[1].Data[1]==-65566 then ay.Objectives[1].Data[1]=Logic.GetKnightID(ay.ReceivingPlayer)end end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_Core(dk,dl)end end;function Lib.Core.Quest:IsQuestPositionReached(bg,dn)local dp=GetID(dn.Data[1])if dp==-65566 then dn.Data[1]=Logic.GetKnightID(bg.ReceivingPlayer)dp=dn.Data[1]end;local dq=GetID(dn.Data[2])dn.Data[3]=dn.Data[3]or 2500;if not(Logic.IsEntityDestroyed(dp)or Logic.IsEntityDestroyed(dq))then if Logic.GetDistanceBetweenEntities(dp,dq)<=dn.Data[3]then DestroyQuestMarker(dq)return true end else DestroyQuestMarker(dq)return false end end;function Lib.Core.Quest:OverwriteGeologistRefill()if Framework.GetGameExtraNo()>=1 then self.Orig_SetResourceAmount=SetResourceAmount;SetResourceAmount=function(l,b0,b1)if Lib.Core.Quest.Orig_SetResourceAmount(l,b0,b1)then local w=GetID(l)CONST_REFILL_AMOUNT[w]=b1 end end;API.SetResourceAmount=SetResourceAmount;GameCallback_OnGeologistRefill_Orig_Lib_Core=GameCallback_OnGeologistRefill;GameCallback_OnGeologistRefill=function(n,dr,ds)GameCallback_OnGeologistRefill_Orig_Lib_Core(n,dr,ds)if CONST_REFILL_AMOUNT[dr]then local dt=CONST_REFILL_AMOUNT[dr]local du=dt+math.random(1,math.floor(dt*0.2+0.5))Logic.SetResourceDoodadGoodAmount(dr,du)if du>0 then if Logic.GetResourceDoodadGoodType(dr)==Goods.G_Iron then Logic.SetModel(dr,Models.Doodads_D_SE_ResourceIron)else Logic.SetModel(dr,Models.R_ResorceStone_Scaffold)end end end end end end;function Lib.Core.Quest:TriggerEntityKilledCallbacks(l,dv)local dw=GetID(l)local dx=GetID(dv or 0)if dx==0 or dw==0 or Logic.GetEntityHealth(dw)>0 then return end;local E,F,G=Logic.EntityGetPos(dw)local dy=Logic.EntityGetPlayer(dw)local dz=Logic.GetEntityType(dw)local dA=Logic.EntityGetPlayer(dx)local dB=Logic.GetEntityType(dx)GameCallback_EntityKilled(dw,dy,dx,dA,dz,dB)Logic.ExecuteInLuaLocalState(string.format("GameCallback_Feedback_EntityKilled(%d, %d, %d, %d,%d, %d, %f, %f)",dw,dy,dx,dA,dz,dB,E,F))end;function Lib.Core.Quest:GetCustomVariable(C)return Lib.CustomVariable[C]end;function Lib.Core.Quest:SetCustomVariable(C,a2)self:UpdateCustomVariable(C,a2)local dc=tostring(a2)if type(a2)~="number"then dc=[["]]..dc..[["]]end;if not GUI then ExecuteLocal([[Lib.Core.Quest:UpdateCustomVariable("%s", %s)]],C,dc)end end;function Lib.Core.Quest:UpdateCustomVariable(C,a2)if Lib.CustomVariable[C]then local dC=Lib.CustomVariable[C]Lib.CustomVariable[C]=a2;SendReport(Report.CustomValueChanged,C,dC,a2)else Lib.CustomVariable[C]=a2;SendReport(Report.CustomValueChanged,C,nil,a2)end end;function InteractiveObjectActivate(dD,dE)dE=dE or 0;if GUI or not IsExisting(dD)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(dD),f,dE)end end;API.InteractiveObjectActivate=InteractiveObjectActivate;function InteractiveObjectDeactivate(dD)if GUI or not IsExisting(dD)then return end;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(dD),f,2)end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Lib.Core.Quest:OverrideQuestSystemGlobal()QuestTemplate.Trigger_Orig_QSB_Core=QuestTemplate.Trigger;QuestTemplate.Trigger=function(this)QuestTemplate.Trigger_Orig_QSB_Core(this)local bV=GetQuestID(this.Identifier)for f=1,this.Objectives[0]do if this.Objectives[f].Type==Objective.Custom2 and this.Objectives[f].Data[1].SetDescriptionOverwrite then local dF=this.Objectives[f].Data[1]:SetDescriptionOverwrite(this)Lib.Core.Quest:ChangeCustomQuestCaptionText(dF,this)break end end;SendReport(Report.QuestTrigger,bV)SendReportToLocal(Report.QuestTrigger,bV)end;QuestTemplate.Interrupt_Orig_QSB_Core=QuestTemplate.Interrupt;QuestTemplate.Interrupt=function(this)this.State=QuestState.Over;this.Result=QuestResult.Interrupted;this:RemoveQuestMarkers()Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..this.Index..")")local bV=GetQuestID(this.Identifier)for f=1,this.Objectives[0]do if this.Objectives[f].Type==Objective.Custom2 and this.Objectives[f].Data[1].Interrupt then this.Objectives[f].Data[1]:Interrupt(this,f)end end;for f=1,this.Triggers[0]do if this.Triggers[f].Type==Triggers.Custom2 and this.Triggers[f].Data[1].Interrupt then this.Triggers[f].Data[1]:Interrupt(this,f)end end;SendReport(Report.QuestInterrupt,bV)SendReportToLocal(Report.QuestInterrupt,bV)end;QuestTemplate.Fail_Orig_QSB_Core=QuestTemplate.Fail;QuestTemplate.Fail=function(this)this.State=QuestState.Over;this.Result=QuestResult.Failure;this:RemoveQuestMarkers()Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..this.Index..")")local bV=GetQuestID(this.Identifier)SendReport(Report.QuestFailure,bV)SendReportToLocal(Report.QuestFailure,bV)end;QuestTemplate.Success=function(this)this.State=QuestState.Over;this.Result=QuestResult.Success;this:RemoveQuestMarkers()Logic.ExecuteInLuaLocalState("LocalScriptCallback_OnQuestStatusChanged("..this.Index..")")local bV=GetQuestID(this.Identifier)SendReport(Report.QuestSuccess,bV)SendReportToLocal(Report.QuestSuccess,bV)end end;function Lib.Core.Quest:ChangeCustomQuestCaptionText(dG,bg)if bg and bg.Visible then bg.QuestDescription=dG;ExecuteLocal([[
            XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/BGDeco",0)
            local identifier = "%s"
            for i=1, Quests[0] do
                if Quests[i].Identifier == identifier then
                    local text = Quests[i].QuestDescription
                    XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives/Custom/Text", "%s")
                    break
                end
            end
        ]],bg.Identifier,dG)end end;function SetResourceAmount(l,b0,b1)if GUI or not IsExisting(l)then return end;assert(type(b0)=="number")assert(type(b1)=="number")local w=GetID(l)if IsExisting(w)and Logic.GetResourceDoodadGoodType(w)~=0 then if Logic.GetResourceDoodadGoodAmount(w)==0 then w=ReplaceEntity(w,Logic.GetEntityType(w))end;Logic.SetResourceDoodadGoodAmount(w,b0)CONST_REFILL_AMOUNT[w]=b1 end end;function SetCustomBehaviorText(dH,dG)local bV=GetQuestID(dH)local ay=Quests[bV]assert(ay~=nil,"Quest '"..dH.."' not found!")Lib.Core.Quest:ChangeCustomQuestCaptionText(dG,ay)end;API.SetCustomBehaviorText=SetCustomBehaviorText;function RestartQuest(dH,dI)local bV=GetQuestID(dH)local ay=Quests[bV]if ay then if not dI then Logic.DEBUG_AddNote("restart quest "..dH)end;if ay.Objectives then local dJ=ay.Objectives;for f=1,dJ[0]do local dK=dJ[f]dK.Completed=nil;local dL=dK.Type;if dL==Objective.Deliver then local dM=dK.Data;dM[3]=nil;dM[4]=nil;dM[5]=nil;dM[9]=nil elseif g_GameExtraNo and g_GameExtraNo>=1 and dL==Objective.Refill then dK.Data[2]=nil elseif dL==Objective.Protect or dL==Objective.Object then local dM=dK.Data;for b8=1,dM[0],1 do dM[-b8]=nil end elseif dL==Objective.DestroyEntities and dK.Data[1]==2 and dK.DestroyTypeAmount then dK.Data[3]=dK.DestroyTypeAmount elseif dL==Objective.DestroyEntities and dK.Data[1]==3 then dK.Data[4]=nil;dK.Data[5]=nil elseif dL==Objective.Distance then if dK.Data[1]==-65565 then dK.Data[4].NpcInstance=nil end elseif dL==Objective.Custom2 and dK.Data[1].Reset then dK.Data[1]:Reset(ay,f)end end end;local function dN(dO,dP)local ay=ay;local dQ=ay[dO]if dQ then for f=1,dQ[0]do local b7=dQ[f]if b7.Type==dP then local dR=b7.Data[1]if dR and dR.Reset then dR:Reset(ay,f)end end end end end;dN("Triggers",Triggers.Custom2)dN("Rewards",Reward.Custom)dN("Reprisals",Reprisal.Custom)ay.Result=nil;local dS=ay.State;ay.State=QuestState.NotTriggered;ExecuteLocal("LocalScriptCallback_OnQuestStatusChanged(%d)",ay.Index)if dS==QuestState.Over then ay.Job=Trigger.RequestTrigger(Events.LOGIC_EVENT_EVERY_SECOND,"","Quest_Loop",1,0,{ay.QueueID})end;SendReport(Report.QuestReset,bV)SendReportToLocal(Report.QuestReset,bV)end;return bV,ay end;API.RestartQuest=RestartQuest;function FailQuest(dH,dI)local bV=GetQuestID(dH)local ay=Quests[bV]if ay then if not dI then Logic.DEBUG_AddNote("fail quest "..dH)end;ay:RemoveQuestMarkers()ay:Fail()end end;API.FailQuest=FailQuest;function StartQuest(dH,dI)local bV=GetQuestID(dH)local ay=Quests[bV]if ay then if not dI then Logic.DEBUG_AddNote("start quest "..dH)end;ay:SetMsgKeyOverride()ay:SetIconOverride()ay:Trigger()end end;API.StartQuest=StartQuest;function StopQuest(dH,dI)local bV=GetQuestID(dH)local ay=Quests[bV]if ay then if not dI then Logic.DEBUG_AddNote("interrupt quest "..dH)end;ay:RemoveQuestMarkers()ay:Interrupt(-1)end end;API.StopQuest=StopQuest;function WinQuest(dH,dI)local bV=GetQuestID(dH)local ay=Quests[bV]if ay then if not dI then Logic.DEBUG_AddNote("win quest "..dH)end;ay:RemoveQuestMarkers()ay:Success()end end;API.WinQuest=WinQuest;Lib.Core=Lib.Core or{}Lib.Core.Job={EventJobMappingID=0,EventJobMapping={},EventJobs={},SecondsSinceGameStart=0,LastTimeStamp=0}Lib.Register("core/feature/Core_Job")function Lib.Core.Job:Initialize()self:StartJobs()end;function Lib.Core.Job:OnSaveGameLoaded()end;function Lib.Core.Job:OnReportReceived(aM,...)end;function Lib.Core.Job:StartJobs()self:CreateEventJob(Events.LOGIC_EVENT_EVERY_TURN,function()Lib.Core.Job:RealtimeController()end)end;function Lib.Core.Job:CreateEventJob(i,da,...)self.EventJobMappingID=self.EventJobMappingID+1;local ar=Trigger.RequestTrigger(i,"","LiberticaCore_Job_EventJobExecutor",1,{},{self.EventJobMappingID})self.EventJobs[ar]={ar,true,da,arg}self.EventJobMapping[self.EventJobMappingID]=ar;return ar end;function Lib.Core.Job:EventJobExecutor(dT)local ar=self.EventJobMapping[dT]if ar and self.EventJobs[ar]and self.EventJobs[ar][2]then local dg=self.EventJobs[ar][4]if self.EventJobs[ar][3](unpack(dg))then self.EventJobs[ar][2]=false end end end;function Lib.Core.Job:RealtimeController()if not self.LastTimeStamp then self.LastTimeStamp=math.floor(Framework.TimeGetTime())end;local dU=math.floor(Framework.TimeGetTime())if self.LastTimeStamp~=dU then self.LastTimeStamp=dU;self.SecondsSinceGameStart=self.SecondsSinceGameStart+1 end end;function LiberticaCore_Job_EventJobExecutor(dT)Lib.Core.Job:EventJobExecutor(dT)end;function RequestJobByEventType(dV,da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return Lib.Core.Job:CreateEventJob(dV,da,...)end;API.RequestJobByEventType=RequestJobByEventType;API.StartJobByEventType=RequestJobByEventType;function RequestJob(da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,dW,...)end;API.RequestJob=RequestJob;API.StartJob=RequestJob;StartSimpleJob=RequestJob;StartSimpleJobEx=RequestJob;function RequestHiResJob(da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,dW,...)end;API.RequestHiResJob=RequestHiResJob;API.StartHiResJob=RequestHiResJob;StartSimpleHiResJob=RequestHiResJob;StartSimpleHiResJobEx=RequestHiResJob;function RequestDelay(dX,da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return RequestJob(function(dY,dZ,d_,e0)if dY+dZ<=Logic.GetTime()then d_(unpack(e0 or{}))return true end end,Logic.GetTime(),dX,da,{...})end;API.RequestDelay=RequestDelay;API.StartDelay=RequestDelay;function RequestHiResDelay(dX,da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return RequestHiResJob(function(dY,dZ,d_,e0)if dY+dZ<=Logic.GetCurrentTurn()then d_(unpack(e0 or{}))return true end end,Logic.GetTime(),dX,da,{...})end;API.RequestHiResDelay=RequestHiResDelay;API.StartHiResDelay=RequestHiResDelay;function RequestRealTimeDelay(dX,da,...)local dW=_G[da]or da;assert(type(dW)=="function","Function does not exist!")return RequestHiResJob(function(dY,dZ,d_,e0)if Lib.Core.Job.SecondsSinceGameStart>=dY+dZ then d_(unpack(e0 or{}))return true end end,Lib.Core.Job.SecondsSinceGameStart,dX,da,{...})end;API.RequestRealTimeDelay=RequestRealTimeDelay;API.StartRealTimeDelay=RequestRealTimeDelay;function StopJob(e1)if Lib.Core.Job.EventJobs[e1]then Trigger.UnrequestTrigger(Lib.Core.Job.EventJobs[e1][1])Lib.Core.Job.EventJobs[e1]=nil;return end;EndJob(e1)end;API.StopJob=StopJob;API.EndJob=StopJob;function IsJobRunning(e1)if Lib.Core.Job.EventJobs[e1]then return Lib.Core.Job.EventJobs[e1][2]==true end;return JobIsRunning(e1)end;API.IsJobRunning=IsJobRunning;API.JobIsRunning=IsJobRunning;function ResumeJob(e1)if Lib.Core.Job.EventJobs[e1]then if Lib.Core.Job.EventJobs[e1][2]~=true then Lib.Core.Job.EventJobs[e1][2]=true end;return end;assert(false,"Failed to resume job.")end;API.ResumeJob=ResumeJob;function YieldJob(e1)if Lib.Core.Job.EventJobs[e1]then if Lib.Core.Job.EventJobs[e1][2]==true then Lib.Core.Job.EventJobs[e1][2]=false end;return end;assert(false,"Failed to yield job.")end;API.YieldJob=YieldJob;function GetSecondsRealTime()return Lib.Core.Job.SecondsSinceGameStart end;API.RealTimeGetSecondsPassedSinceGameStart=GetSecondsRealTime;API.GetSecondsRealTime=GetSecondsRealTime;Lib.Core=Lib.Core or{}Lib.Core.Save={HistoryEditionQuickSave=false,SavingDisabled=false,LoadingDisabled=false}Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Save")function DisableAutoSave(e2)if not IsLocalScript()then Lib.Core.Save.HistoryEditionQuickSave=e2==true;ExecuteLocal([[Lib.Core.Save.HistoryEditionQuickSave = %s]],tostring(e2==true))end end;API.DisableAutoSave=DisableAutoSave;function DisableSaving(e2)Lib.Core.Save:DisableSaving(e2)end;API.DisableSaving=DisableSaving;function DisableLoading(e2)Lib.Core.Save:DisableLoading(e2)end;API.DisableLoading=DisableLoading;function Lib.Core.Save:Initialize()Report.SaveGameLoaded=CreateReport("Event_SaveGameLoaded")self:SetupQuicksaveKeyCallback()self:SetupQuicksaveKeyTrigger()end;function Lib.Core.Save:OnSaveGameLoaded()self:SetupQuicksaveKeyTrigger()self:UpdateLoadButtons()self:UpdateSaveButtons()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Save:OnReportReceived(aM,...)end;function Lib.Core.Save:SetupQuicksaveKeyTrigger()if IsLocalScript()then RequestHiResJob(function()Input.KeyBindDown(Keys.ModifierControl+Keys.S,"KeyBindings_SaveGame(true)",2,false)return true end)end end;function Lib.Core.Save:SetupQuicksaveKeyCallback()if IsLocalScript()then KeyBindings_SaveGame_Orig_Core=KeyBindings_SaveGame;KeyBindings_SaveGame=function(...)if Lib.Core.Save.SavingDisabled then return end;if not Lib.Core.Save.HistoryEditionQuickSave and not arg[1]then return end;if IsScriptConsoleShown()then HideScriptConsole()end;KeyBindings_SaveGame_Orig_Core()end;SaveDialog_SaveFile_Orig_Core=SaveDialog_SaveFile;SaveDialog_SaveFile=function(...)if IsScriptConsoleShown()then HideScriptConsole()end;SaveDialog_SaveFile_Orig_Core()end;self.Orig_GUI_Window_MainMenuSaveClicked=GUI_Window.MainMenuSaveClicked;GUI_Window.MainMenuSaveClicked=function()if IsScriptConsoleShown()then HideScriptConsole()end;Lib.Core.Save.Orig_GUI_Window_MainMenuSaveClicked()end;self.Orig_GUI_Window_MainMenuExit=GUI_Window.MainMenuExit;GUI_Window.MainMenuExit=function()if IsScriptConsoleShown()then HideScriptConsole()end;Lib.Core.Save.Orig_GUI_Window_MainMenuExit()end end end;function Lib.Core.Save:DisableSaving(e2)local e3=e2==true;if not Framework.IsNetworkGame()then self.SavingDisabled=e3;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableSaving(%s)]],tostring(e3))else ExecuteGlobal([[Lib.Core.Save.SavingDisabled = %s]],tostring(e3))self:UpdateSaveButtons()end end end;function Lib.Core.Save:UpdateSaveButtons()if IsLocalScript()then local e4=self.SavingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickSave",e4)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/SaveGame",e4)end end;function Lib.Core.Save:DisableLoading(e2)local e3=e2==true;if not Framework.IsNetworkGame()then self.LoadingDisabled=e3;if not IsLocalScript()then ExecuteLocal([[Lib.Core.Save:DisableLoading(%s)]],tostring(e2))else ExecuteGlobal([[Lib.Core.Save.LoadingDisabled = %s]],tostring(e2))self:UpdateLoadButtons()end end end;function Lib.Core.Save:UpdateLoadButtons()if IsLocalScript()then local e4=self.LoadingDisabled and 0 or 1;XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/LoadGame",e4)XGUIEng.ShowWidget("/InGame/InGame/MainMenu/Container/QuickLoad",e4)end end;Lib.Core=Lib.Core or{}Lib.Core.Text={Languages={{"de","Deutsch","en"},{"en","English","en"},{"fr","Français","en"}},Colors={none="{@color:none}",red="#ff5050",blue="#6868e8",yellow="#ffff50",green="#50b400",white="#ffffff",black="#000000",grey="#8c8c8c",azure="#00a0be",orange="#ffb01e",amber="#e0c575",violet="#b464be",pink="#ffaac8",scarlet="#be0000",magenta="#be0059",olive="#4a7800",celeste="#91aad2",tooltip="#333378"},Letters={[4]="ABCDEFGHKLMNOPQRSTUVWXYZÄÖÜÁÂÃÅÇÈÉÊËÐÐÑÒÓÔÕÖØÙÚÛÜÝ",[3]="abcdeghkmnopqsuvwxyzäöüßIJÆÌÍÎÏÞàáâãåæçèéêëìíîïðñòóôõ÷øùúûüýþÿ",[2]="\"#+*~_\\§$%&=?@fijlft",[1]="!-/()?',.|[]{}"},StringTables={},Placeholders={Names={},EntityTypes={}}}CONST_LANGUAGE="de"Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Register("core/feature/Core_Text")function Lib.Core.Text:Initialize()Report.LanguageChanged=CreateReport("Event_LanguageChanged")self:DetectLanguage()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnSaveGameLoaded()if IsLocalScript()then self:OverwriteGetStringTableText()end end;function Lib.Core.Text:OnReportReceived(aM,...)end;function Lib.Core.Text:OverwriteGetStringTableText()XGUIEng.GetStringTableText_Orig_Core=XGUIEng.GetStringTableText;XGUIEng.GetStringTableText=function(e5)return Lib.Core.Text:GetStringTableOverwrite(e5)end end;function Lib.Core.Text:AddStringTableOverwrite(e6,dG)local f=string.find(e6,"/[^/]*$")local e7=e6:sub(1,f-1):lower()local bn=e6:sub(f+1):lower()self.StringTables[e7]=self.StringTables[e7]or{}self.StringTables[e7][bn]=dG end;function Lib.Core.Text:DeleteStringTableOverwrite(e6)local f=string.find(e6,"/[^/]*$")local e7=e6:sub(1,f-1):lower()local bn=e6:sub(f+1):lower()self.StringTables[e7]=self.StringTables[e7]or{}self.StringTables[e7][bn]=nil end;function Lib.Core.Text:GetStringTableOverwrite(e6)local f=string.find(e6,"/[^/]*$")local e7=e6:sub(1,f-1):lower()local bn=e6:sub(f+1):lower()self.StringTables[e7]=self.StringTables[e7]or{}if self.StringTables[e7][bn]then local bq=self.StringTables[e7][bn]if type(bq)=="string"and bq:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq=XGUIEng.GetStringTableText_Orig_Core(bq)end;return ConvertPlaceholders(Localize(bq))end;return XGUIEng.GetStringTableText_Orig_Core(e6)end;function Lib.Core.Text:DetectLanguage()local e8=Network.GetDesiredLanguage()if e8~="de"and e8~="fr"then e8="en"end;CONST_LANGUAGE=e8 end;function Lib.Core.Text:ChangeSystemLanguage(n,e9,ea)local eb=CONST_LANGUAGE;local ec=ea;if e9==nil or e9==true then CONST_LANGUAGE=ea;ExecuteLocal([[CONST_LANGUAGE = "%s"]],ea)SendReport(Report.LanguageChanged,eb,ec)SendReportToLocal(Report.LanguageChanged,eb,ec)end end;function Lib.Core.Text:Localize(dG)local ed="ERROR_NO_TEXT"if type(dG)=="table"then if dG[CONST_LANGUAGE]then ed=dG[CONST_LANGUAGE]else for g,h in pairs(self.Languages)do if h[1]==CONST_LANGUAGE and h[3]and dG[h[3]]then ed=dG[h[3]]break end end end else ed=tostring(dG)end;return ed end;function Lib.Core.Text:ConvertPlaceholders(dG)if type(dG)=="string"then while true do local ee,ef,eg,eh,ei,ej,ek,el;if dG:find("{n:")then ee,ef,eg,ei,ej,ek,el=self:SplicePlaceholderText(dG,"{n:")eh=self.Placeholders.Names[ef]dG=ee..self:Localize(eh or"n:"..tostring(ef)..": not found")..eg elseif dG:find("{t:")then ee,ef,eg,ei,ej,ek,el=self:SplicePlaceholderText(dG,"{t:")eh=self.Placeholders.EntityTypes[ef]dG=ee..self:Localize(eh or"n:"..tostring(ef)..": not found")..eg elseif dG:find("{v:")then ee,ef,eg,ei,ej,ek,el=self:SplicePlaceholderText(dG,"{v:")eh=self:ReplaceValuePlaceholder(ef)dG=ee..self:Localize(eh or"v:"..tostring(ef)..": not found")..eg elseif dG:find("#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]")then ee,ef,eg,ei,ej,ek,el=self:SpliceHexColors(dG)eh=HexToColorString(ef)dG=ee..self:Localize(eh or"n:"..tostring(ef)..": not found")..eg end;if ei==nil or ej==nil or ek==nil or el==nil then break end end;dG=self:ReplaceColorPlaceholders(dG)end;return dG end;function Lib.Core.Text:SplicePlaceholderText(dG,em)local ei,ej=dG:find(em)local ek,el=dG:find("}",ej)local ee=dG:sub(1,ei-1)local ef=dG:sub(ej+1,ek-1)local eg=dG:sub(el+1)return ee,ef,eg,ei,ej,ek,el end;function Lib.Core.Text:SpliceHexColors(dG)local en="#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"local eo="#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"local ep="#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"local eq="#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]"local cc,cS=dG:find(eq)if cc==nil then cc,cS=dG:find(ep)end;if cc==nil then cc,cS=dG:find(eo)end;if cc==nil then cc,cS=dG:find(en)end;local ee=dG:sub(1,cc-1)local ef=dG:sub(cc,cS)local eg=dG:sub(cS+1)return ee,ef,eg,cc,cc,cS,cS end;function Lib.Core.Text:ReplaceColorPlaceholders(dG)for g,h in pairs(self.Colors)do local er=h:find("color")and h or HexToColorString(h)dG=dG:gsub("{"..g.."}",er)end;return dG end;function Lib.Core.Text:ReplaceValuePlaceholder(dG)local es=_G;local et=string.slice(dG,"%.")for f=1,#et do local eu=et[f]local ax=tonumber(eu)if ax~=nil then eu=ax end;if not es[eu]then return nil end;es=es[eu]end;return es end;function Lib.Core.Text:GetAmountOfLines(dG,ev)local ew=0;if type(dG)=="string"then local bq,ex=string.gsub(dG,"{cr}"," ###CR### ")local ey={}for ez in string.gmatch(bq,"%S+")do table.insert(ey,ez)end;local eA=0;for s,ez in pairs(ey)do if ez=="###CR###"then eA=0;ew=ew+1 else for eB in string.gmatch(ez,".")do local eC=self:GetLetterSize(eB)if eA+eC<=ev then eA=eA+eC else eA=0;ew=ew+1 end end end end end;return ew end;function Lib.Core.Text:GetLetterSize(eD)for eC,eE in pairs(self.Letters)do if string.find(eE,eD,nil,true)then return eC end end;return 2 end;function Localize(dG)return Lib.Core.Text:Localize(dG)end;API.Localize=Localize;function ConvertPlaceholders(dG)return Lib.Core.Text:ConvertPlaceholders(dG)end;API.ConvertPlaceholders=ConvertPlaceholders;function AddNote(dG)dG=ConvertPlaceholders(Localize(dG))if not IsLocalScript()then Logic.DEBUG_AddNote(dG)return end;if dG:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then dG=GetStringText(dG)end;GUI.AddNote(dG)end;API.Note=AddNote;function AddStaticNote(dG)dG=ConvertPlaceholders(Localize(dG))if not IsLocalScript()then ExecuteLocal([[GUI.AddStaticNote("%s")]],dG)return end;if dG:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then dG=GetStringText(dG)end;GUI.AddStaticNote(dG)end;API.StaticNote=AddStaticNote;function AddMessage(dG,eF)dG=ConvertPlaceholders(Localize(dG))if not IsLocalScript()then ExecuteLocal([[AddMessage("%s", "%s")]],dG,eF or"")return end;if dG:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then dG=GetStringText(dG)end;Message(dG,eF and eF~=""and eF:gsub("/","\\")or nil)end;API.Message=AddMessage;function ClearNotes()if not IsLocalScript()then ExecuteLocal([[ClearNotes()]])return end;GUI.ClearNotes()end;API.ClearNotes=ClearNotes;function AddNamePlaceholder(C,eG)error(type(eG)~="function"and type(eG)~="thread","Only strings, numbers, or tables are allowed!")Lib.Core.Text.Placeholders.Names[C]=eG end;API.AddNamePlaceholder=AddNamePlaceholder;function AddEntityTypePlaceholder(i,eG)error(Entities[i]==nil,"EntityType does not exist!")Lib.Core.Text.Placeholders.EntityTypes[i]=eG end;API.AddEntityTypePlaceholder=AddEntityTypePlaceholder;function AddStringText(e6,dG)assert(IsLocalScript(),"Text can only be set in local script!")Lib.Core.Text:AddStringTableOverwrite(e6,dG)end;API.AddStringText=AddStringText;function DeleteStringText(e6)assert(IsLocalScript(),"Text can only be removed in local script!")Lib.Core.Text:DeleteStringTableOverwrite(e6)end;API.DeleteStringText=DeleteStringText;function GetStringText(e6)assert(IsLocalScript(),"Text can only be retrieved in local script!")return Lib.Core.Text:GetStringTableOverwrite(e6)end;API.GetStringText=GetStringText;function DefineLanguage(eH,C,eI,bh)assert(type(eH)=="string")assert(type(C)=="string")assert(type(eI)=="string")for g,h in pairs(Lib.Core.Text.Languages)do if h[1]==eH then return end end;bh=bh or#Lib.Core.Text.Languages+1;table.insert(Lib.Core.Text.Languages,bh,{eH,C,eI})ExecuteLocal([[
        table.insert(Lib.Core.Text.Languages, %d, {"%s", "%s", "%s"})
    ]],bh,eH,C,eI)end;function CountTextLines(dG,ev)assert(type(dG)=="string")assert(type(ev)=="number")assert(ev>0)return Lib.Core.Text:GetAmountOfLines(dG,ev)end;Lib.Core=Lib.Core or{}Lib.Core.ScriptingValue={SV={Game="Vanilla",Vanilla={Destination={X=19,Y=20},Health=-41,Player=-71,Size=-45,Visible=-50,Selectable=-50,NPC=6,Model=-74},HistoryEdition={Destination={X=17,Y=18},Health=-38,Player=-68,Size=-42,Visible=-47,Selectable=-47,NPC=6,Model=-71}}}CONST_SCRIPTING_VALUES=Lib.Core.ScriptingValue.SV.Vanilla;Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_LuaExtension")Lib.Register("core/feature/Core_ScriptingValue")function Lib.Core.ScriptingValue:Initialize()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnSaveGameLoaded()if IsHistoryEdition()then self.SV.Game="HistoryEdition"end;CONST_SCRIPTING_VALUES=self.SV[self.SV.Game]end;function Lib.Core.ScriptingValue:OnReportReceived(aM,...)end;function Lib.Core.ScriptingValue:BitsInteger(eJ)local cR={}while eJ>0 do local eK=math.qmod(eJ,2)table.insert(cR,1,eK)eJ=(eJ-eK)/2 end;table.remove(cR,1)return cR end;function Lib.Core.ScriptingValue:BitsFraction(eJ,cR)for f=1,48 do eJ=eJ*2;if eJ>=1 then table.insert(cR,1)eJ=eJ-1 else table.insert(cR,0)end;if eJ==0 then return cR end end;return cR end;function Lib.Core.ScriptingValue:IntegerToFloat(eJ)if eJ==0 then return 0 end;local eL=1;if eJ<0 then eJ=2147483648+eJ;eL=-1 end;local eM=math.qmod(eJ,8388608)local eN=(eJ-eM)/8388608;local eO=math.qmod(eN,256)local eP=eO-127;local eQ=1;local eR=0.5;local eS=4194304;for f=23,0,-1 do if eM-eS>0 then eQ=eQ+eR;eM=eM-eS end;eS=eS/2;eR=eR/2 end;return eQ*math.pow(2,eP)*eL end;function Lib.Core.ScriptingValue:FloatToInteger(eT)if eT==0 then return 0 end;local eU=false;if eT<0 then eU=true;eT=eT*-1 end;local eV=0;local eW;local eP=0;if eT>=1 then local eX=math.floor(eT)local eY=eT-eX;eW=self:BitsInteger(eX)eP=#eW;self:BitsFraction(eY,eW)else eW={}self:BitsFraction(eT,eW)while eW[1]==0 do eP=eP-1;table.remove(eW,1)end;eP=eP-1;table.remove(eW,1)end;local eZ=4194304;local e_=1;for f0=e_,23 do local f1=eW[f0]if not f1 then break end;if f1==1 then eV=eV+eZ end;eZ=eZ/2 end;eV=eV+(eP+127)*8388608;if eU then eV=eV-2147483648 end;return eV end;function GetEntityDestination(l)assert(IsExisting(l),"Entity does not exist.")local f2=GetFloat(l,CONST_SCRIPTING_VALUES.Destination.X)local f3=GetFloat(l,CONST_SCRIPTING_VALUES.Destination.Y)return{X=f2,Y=f3,Z=0}end;API.GetEntityDestination=GetEntityDestination;function GetEntityHealth(l)assert(IsExisting(l),"Entity does not exist.")return GetInteger(l,CONST_SCRIPTING_VALUES.Health)end;API.GetEntityHealth=GetEntityHealth;function SetEntityHealth(l,aX)assert(IsExisting(l),"Entity does not exist.")SetInteger(l,CONST_SCRIPTING_VALUES.Health,aX)end;API.SetEntityHealth=SetEntityHealth;function GetEntityNpc(l)assert(IsExisting(l),"Entity does not exist.")return GetInteger(l,CONST_SCRIPTING_VALUES.NPC)>0 end;API.GetEntityNpc=GetEntityNpc;function GetEntityPlayer(l)assert(IsExisting(l),"Entity does not exist.")return GetInteger(l,CONST_SCRIPTING_VALUES.Player)end;API.GetEntityPlayer=GetEntityPlayer;function SetEntityPlayer(l,f4)assert(IsExisting(l),"Entity does not exist.")SetInteger(l,CONST_SCRIPTING_VALUES.Player,f4)end;API.SetEntityPlayer=SetEntityPlayer;function GetEntityScaling(l)assert(IsExisting(l),"Entity does not exist.")return GetFloat(l,CONST_SCRIPTING_VALUES.Size)end;API.GetEntityScaling=GetEntityScaling;function SetEntityScaling(l,f5)assert(IsExisting(l),"Entity does not exist.")SetFloat(l,CONST_SCRIPTING_VALUES.Size,f5)end;API.SetEntityScaling=SetEntityScaling;function GetEntityModel(l)assert(IsExisting(l),"Entity does not exist.")return GetInteger(l,CONST_SCRIPTING_VALUES.Model)end;API.GetEntityModel=GetEntityModel;function IsEntityInvisible(l)assert(IsExisting(l),"Entity does not exist.")return GetInteger(l,CONST_SCRIPTING_VALUES.Visible)==793088 end;API.IsEntityInvisible=IsEntityInvisible;function IsEntityInaccessible(l)assert(IsExisting(l),"Entity does not exist.")return IsEntityInvisible(l)or GetInteger(l,CONST_SCRIPTING_VALUES.Visible)==799232 end;API.IsEntityInaccessible=IsEntityInaccessible;function GetInteger(l,f6)assert(IsExisting(l),"Entity does not exist.")local ar=GetID(l)return Logic.GetEntityScriptingValue(ar,f6)end;API.GetInteger=GetInteger;function GetFloat(l,f6)assert(IsExisting(l),"Entity does not exist.")local ar=GetID(l)local dc=Logic.GetEntityScriptingValue(ar,f6)return ConvertIntegerToFloat(dc)end;API.GetFloat=GetFloat;function SetInteger(l,f6,a2)assert(IsExisting(l),"Entity does not exist.")local ar=GetID(l)Logic.SetEntityScriptingValue(ar,f6,a2)end;API.SetInteger=SetInteger;function SetFloat(l,f6,a2)assert(IsExisting(l),"Entity does not exist.")local ar=GetID(l)Logic.SetEntityScriptingValue(ar,f6,ConvertFloatToInteger(a2))end;API.SetFloat=SetFloat;function ConvertIntegerToFloat(a2)return Lib.Core.ScriptingValue:IntegerToFloat(a2)end;API.ConvertIntegerToFloat=ConvertIntegerToFloat;function ConvertFloatToInteger(a2)return Lib.Core.ScriptingValue:FloatToInteger(a2)end;API.ConvertFloatToInteger=ConvertFloatToInteger;Lib.Core=Lib.Core or{}Lib.Core.Bugfix={ForceDeselectEntities={["U_Entertainer_NA_FireEater"]=true,["U_Entertainer_NA_PerformingFireeater"]=true,["U_Entertainer_NA_PerformingStiltWalker"]=true,["U_Entertainer_NA_StiltWalker"]=true,["U_Entertainer_NE_PerformingStrongestMan_Barrel"]=true,["U_Entertainer_NE_PerformingStrongestMan_Stone"]=true,["U_Entertainer_NE_StrongestMan_Barrel"]=true,["U_Entertainer_NE_StrongestMan_Stone"]=true,["U_FireEater"]=true}}Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/GetDistance")Lib.Require("core/feature/Core_Text")Lib.Register("core/feature/Core_Bugfix")function Lib.Core.Bugfix:Initialize()if not IsLocalScript()then self:FixResourceSlotsInStorehouses()self:FixMiddleEuropeNpcBarracks()self:FixMerchantArrivedCheckpoints()self:FixDestroyAllPlayerUnits()self:FixBanditCampFireplace()end;if IsLocalScript()then self:OverrideSelection()self:FixInteractiveObjectClicked()self:FixBigCathedralName()self:FixClimateZoneForHouseMenu()self:FixAbilityInfoWhenHomeless()end end;function Lib.Core.Bugfix:OnSaveGameLoaded()end;function Lib.Core.Bugfix:OnReportReceived(aM,...)end;function Lib.Core.Bugfix:FixResourceSlotsInStorehouses()for f=1,8 do local f7=Logic.GetStoreHouse(f)if f7~=0 then Logic.AddGoodToStock(f7,Goods.G_Salt,0,true,true)Logic.AddGoodToStock(f7,Goods.G_Dye,0,true,true)end end end;function Lib.Core.Bugfix:FixMiddleEuropeNpcBarracks()GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(n,at)GameCallback_OnBuildingConstructionComplete_Orig_Core_Bugfix(n,at)local cM=Logic.GetEntityType(at)if cM==Entities.B_NPC_Barracks_ME then Logic.RespawnResourceSetMaxSpawn(at,0.01)Logic.RespawnResourceSetMinSpawn(at,0.01)end end;for g,h in pairs(Logic.GetEntitiesOfType(Entities.B_NPC_Barracks_ME))do Logic.RespawnResourceSetMaxSpawn(h,0.01)Logic.RespawnResourceSetMinSpawn(h,0.01)end end;function Lib.Core.Bugfix:FixMerchantArrivedCheckpoints()QuestTemplate.IsMerchantArrived=function(this,dK)if dK.Data[3]~=nil then if dK.Data[3]==1 then local f8=dK.Data[5].ID;if f8~=nil then dK.Data[3]=f8;DeleteQuestMerchantWithID(f8)if MapCallback_DeliverCartSpawned then MapCallback_DeliverCartSpawned(this,f8,dK.Data[1])end end elseif Logic.IsEntityDestroyed(dK.Data[3])then DeleteQuestMerchantWithID(dK.Data[3])dK.Data[3]=nil;dK.Data[5].ID=nil else local f9=function(aM)if aM==0 then return false end;local E,F=Logic.GetBuildingApproachPosition(aM)return GetDistance(dK.Data[3],{X=E,Y=F})<=1000 end;local fa=dK.Data[6]or this.SendingPlayer;return f9(Logic.GetHeadquarters(fa))or f9(Logic.GetMarketplace(fa))or f9(Logic.GetStoreHouse(fa))end end;return false end end;function Lib.Core.Bugfix:FixInteractiveObjectClicked()GUI_Interaction.InteractiveObjectClicked=function()local fb=XGUIEng.GetCurrentWidgetID()local fc=XGUIEng.GetWidgetNameByID(fb)local fd=tonumber(fc)local fe=g_Interaction.ActiveObjectsOnScreen[fd]if fe==nil then return end;if not Logic.InteractiveObjectGetAvailability(fe)then return end;local fa=GUI.GetPlayerID()local ff={Logic.InteractiveObjectGetEffectiveCosts(fe,fa)}local fg=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")local fh=function(fi,bH)if Logic.GetGoodCategoryForGoodType(fi)~=GoodCategories.GC_Resource and Logic.GetGoodCategoryForGoodType(fi)~=GoodCategories.GC_Gold then error("Only resources can be used as costs for objects!")return false end;if fi==Goods.G_Gold then fg=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")end;return GetPlayerGoodsInSettlement(fi,fa,false)>=bH end;local fj=true;if ff[1]and ff[2]then fj=fh(ff[1],ff[2])end;if fj and ff[3]and ff[4]then fj=fh(ff[3],ff[4])end;if not fj then Message(fg)return end;if not GUI_Interaction.InteractionClickOverride or not GUI_Interaction.InteractionClickOverride(fe)then Sound.FXPlay2DSound("ui\\menu_click")end;if not GUI_Interaction.InteractionSpeechFeedbackOverride or not GUI_Interaction.InteractionSpeechFeedbackOverride(fe)then GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)end;if not Mission_Callback_OverrideObjectInteraction or not Mission_Callback_OverrideObjectInteraction(fe,fa,ff)then GUI.ExecuteObjectInteraction(fe,fa)end end end;function Lib.Core.Bugfix:FixDestroyAllPlayerUnits()QuestTemplate.IsObjectiveCompleted_Orig_Core_Bugfix=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(this,dK)if dK.Completed~=nil then return dK.Completed end;local dL=dK.Type;local dM=dK.Data;if dL==Objective.DestroyAllPlayerUnits then local fk=GetPlayerEntities(dM,0)local fl={}local fm={Entities.XD_ScriptEntity,Entities.S_AIHomePosition,Entities.S_AIAreaDefinition}for f=#fk,1,-1 do local fn=fk[f]local fo=Logic.GetEntityType(fn)local fp=Logic.IsConstructionComplete(fn)==0;local fq=Logic.IsEntityInCategory(fn,EntityCategories.AttackableBuilding)==0;local fr=Logic.IsEntityInCategory(fn,EntityCategories.Wall)==0;if(fq or fr)and fp then table.insert(fl,fn)end;if table.contains(fm,fo)then table.insert(fl,fn)end end;if#fk==0 or#fk==#fl then dK.Completed=true end elseif dL==Objective.Distance then dK.Completed=Lib.Core.Quest:IsQuestPositionReached(this,dK)else return this:IsObjectiveCompleted_Orig_Core_Bugfix(dK)end;return dK.Completed end end;function Lib.Core.Bugfix:FixBigCathedralName()AddStringText("Names/B_Cathedral_Big",{de="Kathedrale",en="Cathedral",fr="Cathédrale"})end;function Lib.Core.Bugfix:FixClimateZoneForHouseMenu()HouseMenuGetNextBuildingID=function(fs)local fa=GUI.GetPlayerID()local ft={Logic.GetBuildingsByPlayer(fa)}fs=GetClimateEntityName(fs)local fu=string.gsub(fs,"_%w%w?%w?$","")if HouseMenu.Widget.CurrentBuilding~=fs then HouseMenu.Widget.CurrentBuilding=fs;HouseMenu.Widget.CurrentBuildingNumber=0 end;local fv=0;local fw=false;for f=1,#ft do local fo=Logic.GetEntityType(ft[f])local fx=Logic.GetEntityTypeName(fo)local fy=string.gsub(fx,"_%w%w?%w?$","")if fy==fu then fv=f;if fv>HouseMenu.Widget.CurrentBuildingNumber then HouseMenu.Widget.CurrentBuildingNumber=fv;fw=true;break end end end;if fv==0 then return nil end;if not fw then for f=1,#ft do local fo=Logic.GetEntityType(ft[f])local fx=Logic.GetEntityTypeName(fo)if fx==fs then HouseMenu.Widget.CurrentBuildingNumber=f;break end end end;return ft[HouseMenu.Widget.CurrentBuildingNumber]end;HouseMenuSetIconsPart=function(fz,fA)local fa=GUI.GetPlayerID()local fB={XGUIEng.ListSubWidgets(fz)}local fC={Logic.GetBuildingsByPlayer(fa)}for f=1,#fB do local fc=XGUIEng.GetWidgetNameByID(fB[f])local fD=string.gsub(fc,"_%w%w?%w?$","")local fE=fz.."/"..fc.."/Button"SetIcon(fE,g_TexturePositions.Entities[Entities[fc]])local fF=0;for b8=1,#fC do local fo=Logic.GetEntityType(fC[b8])local fx=Logic.GetEntityTypeName(fo)local fy=string.gsub(fx,"_%w%w?%w?$","")if fD==fy then fF=fF+1 end end;XGUIEng.DisableButton(fE,fF==0 and 1 or 0)XGUIEng.SetText(fz.."/"..fc.."/Amount","{center}"..fF)UpdateStopOverlay(fz.."/"..fc.."/Stop",fc,fF)if fc==HouseMenu.Widget.CurrentBuilding then UpdateStopOverlay(HouseMenu.Widget.CurrentStop,HouseMenu.Widget.CurrentBuilding,fF)end end;HouseMenu.Counter=HouseMenu.Counter+1;if fA or HouseMenu.Counter%20==0 then for b8=1,#fB do local cn=HouseMenu.Widget.CurrentBuilding;local fG=XGUIEng.GetWidgetNameByID(fB[b8])local fE=fz.."/"..fG.."/Button"fG=GetClimateEntityName(fG)local fH=fG==cn and 1 or 0;XGUIEng.HighLightButton(fE,fH)end end end end;function Lib.Core.Bugfix:FixAbilityInfoWhenHomeless()StartKnightVoiceForActionSpecialAbility=function(fI,fJ)local fa=GUI.GetPlayerID()local fK=Logic.GetStoreHouse(fa)local fL=Logic.GetEntityType(Logic.GetKnightID(fa))if fI==fL and fK~=0 and ActionAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(fa,"Hint_SpecialAbilityAction",false,fa,fJ)ActionAbilityIsExplained=true end end;StartKnightVoiceForPermanentSpecialAbility=function(fI)local fa=GUI.GetPlayerID()local fK=Logic.GetStoreHouse(fa)local fL=Logic.GetEntityType(Logic.GetKnightID(fa))if fI==fL and fK~=0 and PermanentAbilityIsExplained==nil then LocalScriptCallback_StartVoiceMessage(fa,"Hint_SpecialAbilityPermanetly",false,fa)PermanentAbilityIsExplained=true end end end;function Lib.Core.Bugfix:FixBanditCampFireplace()g_Outlaws.ReplaceCampType={}g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace01]=Entities.D_X_Fireplace01_Expired;g_Outlaws.ReplaceCampType[Entities.D_X_Fireplace02]=Entities.D_X_Fireplace02_Expired;ActivateFireplaceforBanditPack=function(fM)local fa=Logic.EntityGetPlayer(fM)if g_Outlaws.Players[fa][fM].CampFire==nil then local fN,fO=Logic.GetBuildingApproachPosition(fM)local fP,fQ=Logic.GetEntityPosition(fM)local E=(fN-fP)*1.3+fN;local F=(fO-fQ)*1.3+fO;local fR=Entities.D_X_Fireplace01;if Logic.IsEntityInCategory(fM,EntityCategories.Storehouse)==1 then fR=Entities.D_X_Fireplace02 end;g_Outlaws.Players[fa][fM].CampFireType=fR;local fS=g_Outlaws.Players[fa][fM].ExtinguishedFire;Logic.DestroyEntity(fS)local c3=Logic.CreateEntityOnUnblockedLand(fR,E,F,0,0)g_Outlaws.Players[fa][fM].CampFire=c3;g_Outlaws.Players[fa][fM].CampFirePos={X=E,Y=F}return true end;return false end;DisableFireplaceforBanditPack=function(fM)local fa=Logic.EntityGetPlayer(fM)if g_Outlaws.Players[fa][fM].CampFire~=nil then local E=g_Outlaws.Players[fa][fM].CampFirePos.X;local F=g_Outlaws.Players[fa][fM].CampFirePos.Y;local fS=g_Outlaws.Players[fa][fM].CampFire;Logic.DestroyEntity(fS)local fT=g_Outlaws.Players[fa][fM].CampFireType;local fR=g_Outlaws.ReplaceCampType[fT]local c3=Logic.CreateEntityOnUnblockedLand(fR,E,F,0,0)g_Outlaws.Players[fa][fM].ExtinguishedFire=c3;g_Outlaws.Players[fa][fM].CampFire=nil end end end;function Lib.Core.Bugfix:OnSelectionCanged(b)local fU={GUI.GetSelectedEntities()}for f=#fU,1,-1 do local j=self:GetSelectedTypeName(fU[f])if j and self.ForceDeselectEntities[j]then GUI.DeselectEntity(fU[f])end end end;function Lib.Core.Bugfix:GetSelectedTypeName(aM)local ar=aM;local j;if Logic.IsLeader(aM)==1 then local s,fV=Logic.GetSoldiersAttachedToLeader(ar)ar=fV or 0 end;if ar>0 then local m=Logic.GetEntityType(ar)j=Logic.GetEntityTypeName(m)end;return j end;function Lib.Core.Bugfix:OverrideSelection()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.Core.Bugfix.Orig_GameCallback_GUI_SelectionChanged(b)Lib.Core.Bugfix:OnSelectionCanged(b)end end;Lib.Core=Lib.Core or{}Lib.Core.Chat={DebugInput={}}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Job")Lib.Register("core/feature/Core_Chat")function Lib.Core.Chat:Initialize()Report.ChatOpened=CreateReport("Event_ChatOpened")Report.ChatClosed=CreateReport("Event_ChatClosed")for f=1,8 do self.DebugInput[f]={}end end;function Lib.Core.Chat:OnSaveGameLoaded()end;function Lib.Core.Chat:OnReportReceived(aM,...)end;function Lib.Core.Chat:ShowTextInput(n,fW)if Lib.IsHistoryEdition and Framework.IsNetworkGame()then return end;if not GUI then ExecuteLocal([[Lib.Core.Chat:ShowTextInput(%d, %s)]],n,tostring(fW==true))return end;n=n or GUI.GetPlayerID()self:PrepareInputVariable(n)self:ShowInputBox(n,fW==true)end;function Lib.Core.Chat:ShowInputBox(n,fX)if GUI.GetPlayerID()~=n then return end;self.DebugInput[n]=fX==true;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()Input.ChatMode()XGUIEng.SetText("/InGame/Root/Normal/ChatInput/ChatInput","")XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",1)XGUIEng.SetFocus("/InGame/Root/Normal/ChatInput/ChatInput")SendReportToGlobal(Report.ChatOpened,n)SendReport(Report.ChatOpened,n)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(GUI.GetPlayerID(),0.0000001)end;return true end)end;function Lib.Core.Chat:PrepareInputVariable(n)if not IsLocalScript()then return end;GUI_Chat.Abort_Orig_Core=GUI_Chat.Abort_Orig_Core or GUI_Chat.Abort;GUI_Chat.Confirm_Orig_Core=GUI_Chat.Confirm_Orig_Core or GUI_Chat.Confirm;GUI_Chat.Confirm=function()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatInput",0)local fY=XGUIEng.GetText("/InGame/Root/Normal/ChatInput/ChatInput")local fZ=Lib.Core.Chat.DebugInput[n]Lib.Core.Chat.ChatBoxInput=fY;Lib.Core.Chat:SendInputAsEvent(fY,fZ)g_Chat.JustClosed=1;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,1)end;Input.GameMode()if fY:len()>0 and Framework.IsNetworkGame()and not fZ then GUI.SendChatMessage(fY,n,g_Chat.CurrentMessageType,g_Chat.CurrentWhisperTarget)end end;if not Framework.IsNetworkGame()then GUI_Chat.Abort=function()end end end;function Lib.Core.Chat:SendInputAsEvent(dG,fX)dG=dG==nil and""or dG;local q=GUI.GetPlayerID()SendReportToGlobal(Report.ChatClosed,dG or"<<<ES>>>",GUI.GetPlayerID(),fX==true)SendReport(Report.ChatClosed,dG or"<<<ES>>>",GUI.GetPlayerID(),fX==true)self.DebugInput[q]=false end;function ShowTextInput(n,fW)Lib.Core.Chat:ShowTextInput(n,fW)end;API.ShowTextInput=ShowTextInput;Lib.Core=Lib.Core or{}Lib.Core.Debug={DisplayScriptErrors=false,CheckAtRun=false,TraceQuests=false,DevelopingCheats=false,DevelopingShell=false,LoadscreenClosed=false}Lib.Require("comfort/IsLocalScript")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_Chat")Lib.Register("core/feature/Core_Debug")function Lib.Core.Debug:Initialize()Report.DebugChatConfirmed=CreateReport("Event_DebugChatConfirmed")Report.DebugConfigChanged=CreateReport("Event_DebugConfigChanged")Report.DebugCallGlobal=CreateReport("Event_DebugCallGlobal")if IsLocalScript()then self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnSaveGameLoaded()if IsLocalScript()then self:InitializeDebugWidgets()self:InitializeQsbDebugHotkeys()end end;function Lib.Core.Debug:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ChatClosed then if IsLocalScript()then Lib.Core.Debug:ProcessDebugInput(...)end elseif aM==Report.DebugCallGlobal then if not IsLocalScript()then self:CallFunctionFromString(...)end end end;function Lib.Core.Debug:Test(dG)AddNote(dG)end;function Lib.Core.Debug:ActivateDebugMode(f_,bc,bd,be,bf)if IsLocalScript()then return end;self.DisplayScriptErrors=f_==true;self.CheckAtRun=bc==true;self.DevelopingCheats=bd==true;self.DevelopingShell=be==true;self.TraceQuests=bf==true;g_DisplayScriptErrors=f_==true;SendReport(Report.DebugConfigChanged,self.DisplayScriptErrors,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)ExecuteLocal([[
            Lib.Core.Debug.DisplayScriptErrors = %s;
            Lib.Core.Debug.CheckAtRun          = %s;
            Lib.Core.Debug.DevelopingCheats    = %s;
            Lib.Core.Debug.DevelopingShell     = %s;
            Lib.Core.Debug.TraceQuests         = %s;

            SendReport(
                Report.DebugConfigChanged,
                Lib.Core.Debug.DisplayScriptErrors,
                Lib.Core.Debug.CheckAtRun,
                Lib.Core.Debug.DevelopingCheats,
                Lib.Core.Debug.DevelopingShell,
                Lib.Core.Debug.TraceQuests
            );
            Lib.Core.Debug:InitializeDebugWidgets();

            g_DisplayScriptErrors = Lib.Core.Debug.DisplayScriptErrors;
        ]],tostring(self.DisplayScriptErrors),tostring(self.CheckAtRun),tostring(self.DevelopingCheats),tostring(self.DevelopingShell),tostring(self.TraceQuests))end;function Lib.Core.Debug:LegacyToggleDisplayScriptErrors(g0)self:ActivateDebugMode(g0==true,self.CheckAtRun,self.DevelopingCheats,self.DevelopingShell,self.TraceQuests)end;function Lib.Core.Debug:InitializeDebugWidgets()if Network.IsNATReady~=nil and Framework.IsNetworkGame()then return end;if self.DevelopingCheats then KeyBindings_EnableDebugMode(1)KeyBindings_EnableDebugMode(2)KeyBindings_EnableDebugMode(3)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClock=true else KeyBindings_EnableDebugMode(0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClock=false end end;function Lib.Core.Debug:InitializeQsbDebugHotkeys()if Framework.IsNetworkGame()then return end;Input.KeyBindDown(Keys.ModifierControl+Keys.ModifierShift+Keys.ModifierAlt+Keys.R,"Lib.Core.Debug:ProcessDebugShortcut('RestartMap')",30,false)Input.KeyBindDown(Keys.ModifierShift+Keys.OemPipe,"Lib.Core.Debug:ProcessDebugShortcut('Terminal')",30,false)end;function Lib.Core.Debug:CallFunctionFromString(...)local g1=nil;local g2=string.slice(table.remove(arg,1),"%.")for f=1,#g2 do local g3=string.slice(g2[f],":")if#g3>1 then if g1==nil then g1=_G[g3[1]][g3[2]]if g1 then g1(_G[g3[1]],unpack(arg))end else g1=g1[g3[1]][g3[2]]if g1 then g1(_G[g3[1]],unpack(arg))end end;return else if g1==nil then g1=_G[g3[1]]else g1=g1[g3[1]]end end end;if g1 then g1(unpack(arg))end end;function Lib.Core.Debug:ProcessDebugShortcut(i,d2)if self.DevelopingCheats then if i=="RestartMap"then self:HideDebugInput()Framework.RestartMap()end end;if self.DevelopingShell then if i=="Terminal"then ShowTextInput(GUI.GetPlayerID(),true)end end end;function Lib.Core.Debug:ProcessDebugInput(A,n,g4)if g4 then if A:lower():find("^restartmap")then self:ProcessDebugShortcut("RestartMap")elseif A:lower():find("^clear")then GUI.ClearNotes()elseif A:lower():find("^version")then GUI.AddStaticNote("Version: "..Lib.Loader.Version)elseif A:find("^> ")then GUI.SendScriptCommand(A:sub(3),true)elseif A:find("^>> ")then GUI.SendScriptCommand(string.format("Logic.ExecuteInLuaLocalState(\"%s\")",A:sub(4)),true)elseif A:find("^< ")then GUI.SendScriptCommand(string.format([[Script.Load("%s")]],A:sub(3)))elseif A:find("^<< ")then Script.Load(A:sub(4))end end end;function Lib.Core.Debug:CommandTokenizer(A)local g5={}if A==nil then return g5 end;local g6={A}local g7={}local cc,cS=string.find(A,"%s+&&%s+")if cc then g6={}while cc do local g8=string.sub(A,1,cc-1)table.insert(g6,g8)A=string.sub(A,cS+1)cc,cS=string.find(A,"%s+&&%s+")end;if string.len(A)>0 then table.insert(g6,A)end end;for f=1,#g6,1 do cc,cS=string.find(g6[f],"%s+&%s+")if cc then local g9=""while cc do local g8=string.sub(g6[f],1,cc-1)table.insert(g7,g9 ..g8)if string.find(g8," ")then g9=string.sub(g8,1,string.find(g8," ")-1).." "end;g6[f]=string.sub(g6[f],cS+1)cc,cS=string.find(g6[f],"%s+&%s+")end;if string.len(g6[f])>0 then table.insert(g7,g9 ..g6[f])end else table.insert(g7,g6[f])end end;for f=1,#g7,1 do local ga={}cc,cS=string.find(g7[f],"%s+")if cc then while cc do local g8=string.sub(g7[f],1,cc-1)table.insert(ga,g8)g7[f]=string.sub(g7[f],cS+1)cc,cS=string.find(g7[f],"%s+")end;table.insert(ga,g7[f])else table.insert(ga,g7[f])end;table.insert(g5,ga)end;return g5 end;function Lib.Core.Debug:ToggleDebugInput()if self.ConsoleIsVisible then self:HideDebugInput()else self:ShowDebugInput()end end;function Lib.Core.Debug:ShowDebugInput()local gb="/InGame/TempStuff/BGTopBar/temp"local gc=XGUIEng.GetWidgetPathByID(XGUIEng.GetTopPage())if not self.LoadscreenClosed or not self.DevelopingShell or self.ConsoleIsVisible then return end;Display.ToggleScriptConsole()if gc~=gb then XGUIEng.PushPage(gb,false)end;XGUIEng.ShowWidget(gb,0)RequestHiResDelay(0,function()XGUIEng.ShowWidget(gb,1)XGUIEng.ShowAllSubWidgets(gb,1)XGUIEng.ShowWidget(gb.."/ShadowBottom",0)XGUIEng.ShowWidget(gb.."/ShadowTop",0)XGUIEng.ShowWidget(gb.."/BGTopBarRightBound",0)XGUIEng.SetWidgetLocalPosition(gb,0,0)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/1",0,-22)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/2",295,-22)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/3",592,-22)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/4",889,-22)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/5",1184,-22)XGUIEng.SetWidgetLocalPosition(gb.."/BGTopBarLeftBound/6",1483,-22)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6",275,300)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/Frame",275,300)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/Frame/Bottom",275,300)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/Frame/Bottom/1",275,100)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/Frame/Top",275,300)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/Frame/Top/1",275,60)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6",275,60)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/DialogBG",275,60)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/DialogBG/1",275,60)XGUIEng.SetWidgetSize(gb.."/BGTopBarLeftBound/6/DialogBG/1/1",275,60)XGUIEng.SetWidgetLocalPosition(gb,0,-140)end)self.ConsoleIsVisible=true end;function Lib.Core.Debug:HideDebugInput()local gd="/InGame/Root/Normal/ChatInput"if XGUIEng.IsWidgetShown(gd)==1 then return end;local gb="/InGame/TempStuff/BGTopBar/temp"if not self.ConsoleIsVisible then return end;Display.ToggleScriptConsole()XGUIEng.ShowWidget(gb,0)self.ConsoleIsVisible=false end;function ActivateDebugMode(f_,bc,bd,be,bf)Lib.Core.Debug:ActivateDebugMode(f_,bc,bd,be,bf)end;API.ActivateDebugMode=ActivateDebugMode;function ToggleDisplayScriptErrors(ge)Lib.Core.Debug:LegacyToggleDisplayScriptErrors(ge)end;API.ToggleDisplayScriptErrors=ToggleDisplayScriptErrors;function ShowScriptConsole()Lib.Core.Debug:ShowDebugInput()end;function HideScriptConsole()Lib.Core.Debug:HideDebugInput()end;function ToggleScriptConsole()Lib.Core.Debug:ToggleDebugInput()end;function IsScriptConsoleShown()return Lib.Core.Debug.ConsoleIsVisible==true end;function Debug_ShowVersion()GUI.AddStaticNote("Version: "..Lib.Loader.Version)end;function Debug_Execute(da,...)error(type(da)=="string","function must be a string!")SendReportToGlobal(Report.DebugCallGlobal,da,unpack(arg))end;Lib.Register("comfort/HexToColor")function HexToColor(gf)local gg;local gh=string.gsub(gf,"#","")if string.len(gh)==3 or string.len(gh)==4 then gg,gh=gh,""for f=1,#gg do local gi=gg:sub(f,f)gh=gh..gi..gi end end;if string.len(gh)~=6 and string.len(gh)~=8 then return-1 end;local cY=tonumber(string.sub(gh,1,2),16)local gj=tonumber(string.sub(gh,3,4),16)local d0=tonumber(string.sub(gh,5,6),16)local ai=255;if string.len(gh)==8 then ai=tonumber(string.sub(gh,7,8),16)end;if not ai or not gj or not d0 or not ai then return-1 end;return cY,gj,d0,ai end;Lib.Require("comfort/HexToColor")Lib.Register("comfort/HexToColorString")function HexToColorString(gf)local cY,gj,d0,ai=HexToColor(gf)if cY==-1 then return""end;return string.format("{@color:%d,%d,%d,%d}",cY,gj,d0,ai)end;Lib.Core=Lib.Core or{}Lib.Core.ModuleList={}Lib.Core.Global={IsInstalled=false}Lib.Core.Local={IsInstalled=false}CONST_CURRENT_MODULE_CONTEXT={}Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/HexToColorString")Lib.Require("core/QSB")Lib.Require("core/feature/Core_Chat")Lib.Require("core/feature/Core_Debug")Lib.Require("core/feature/Core_LuaExtension")Lib.Require("core/feature/Core_Bugfix")Lib.Require("core/feature/Core_Report")Lib.Require("core/feature/Core_ScriptingValue")Lib.Require("core/feature/Core_Text")Lib.Require("core/feature/Core_Job")Lib.Require("core/feature/Core_Save")Lib.Require("core/feature/Core_Quest")Lib.Require("core/feature/Core_Player")Lib.Require("core/Core_Behavior")Lib.Register("core/Core")function log(dG,...)local bq=dG;if#arg>0 then bq=string.format(bq,unpack(arg))end;bq=string.gsub(bq,"{cr}","\n")Framework.WriteToLog(bq)return bq end;function warn(gk,dG,...)if not gk then local er="{@color:255,0,0,255}"local bq=er..log(dG,unpack(arg))if GUI then GUI.AddNote(bq)else Logic.DEBUG_AddNote(bq)end;return bq end end;function error(gk,dG,...)if not gk then local bq=log(dG,unpack(arg))return assert(false,bq)end end;function debug(gk,dG,...)if not gk then local bq=log(dG,unpack(arg))if GUI then GUI.AddNote(bq)else Logic.DEBUG_AddNote(bq)end end end;function Lib.Core.Global:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()Lib.Core.Player:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local gl=GameCallback_Lib_GetExternFilesToLoad()for f=1,#gl do Script.Load(gl[f])end end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].Global.Name=Name;Lib[Name].AquireContext=function()return Lib.Core.Global:AquireContext(Lib[Name].Global)end;Lib[Name].ReleaseContext=function()return Lib.Core.Global:ReleaseContext(Lib[Name].Global)end;if Lib[Name].Global and Lib[Name].Global.Initialize then Lib[Name].Global:Initialize()end end;self:OverrideOnSaveGameLoaded()self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()LoadBehaviors()Lib.Core.Local=nil end;self.IsInstalled=true end;function Lib.Core.Global:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()Lib.Core.Player:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].AquireContext=function()return Lib.Core.Global:AquireContext(Lib[Name].Global)end;Lib[Name].ReleaseContext=function()return Lib.Core.Global:ReleaseContext(Lib[Name].Global)end;if Lib[Name].Global and Lib[Name].Global.OnSaveGameLoaded then Lib[Name].Global:OnSaveGameLoaded()end end end;function Lib.Core.Global:OverrideOnSaveGameLoaded()Mission_OnSaveGameLoaded_Orig_Libertica=Mission_OnSaveGameLoaded;Mission_OnSaveGameLoaded=function()Lib.Core.Global:ExecuteLocal("Lib.Core.Local:OnSaveGameLoaded()")Lib.Core.Global:OnSaveGameLoaded()end end;function Lib.Core.Global:InitReportListener()GameCallback_Lib_OnEventReceived=function(aM,...)local arg={...}Lib.Core.LuaExtension:OnReportReceived(aM,unpack(arg))Lib.Core.Report:OnReportReceived(aM,unpack(arg))Lib.Core.Text:OnReportReceived(aM,unpack(arg))Lib.Core.Job:OnReportReceived(aM,unpack(arg))Lib.Core.ScriptingValue:OnReportReceived(aM,unpack(arg))Lib.Core.Save:OnReportReceived(aM,unpack(arg))Lib.Core.Quest:OnReportReceived(aM,unpack(arg))Lib.Core.Chat:OnReportReceived(aM,unpack(arg))Lib.Core.Debug:OnReportReceived(aM,unpack(arg))Lib.Core.Bugfix:OnReportReceived(aM,unpack(arg))Lib.Core.Player:OnReportReceived(aM,unpack(arg))if aM==Report.LoadingFinished then SendReportToLocal(Report.LoadingFinished,unpack(arg))end;if aM==Report.EscapePressed then SendReportToLocal(Report.EscapePressed,unpack(arg))end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]if Lib[Name].Global and Lib[Name].Global.OnReportReceived then Lib[Name].Global:OnReportReceived(aM,unpack(arg))end end;if aM==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Global:ExecuteLocal(gm,...)local gn=gm;if arg and#arg>0 then gn=gn:format(unpack(arg))end;Logic.ExecuteInLuaLocalState(gn)end;function Lib.Core.Global:AquireContext(go)local Name=type(go)=="table"and go.Name or go;assert(Lib[Name]~=nil)table.insert(CONST_CURRENT_MODULE_CONTEXT,Lib[Name].Global)local gp=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[gp]end;function Lib.Core.Global:ReleaseContext(go)local Name=type(go)=="table"and go.Name or go;assert(Lib[Name]~=nil)local gp=#CONST_CURRENT_MODULE_CONTEXT;Lib[Name].Global=CONST_CURRENT_MODULE_CONTEXT[gp]table.remove(CONST_CURRENT_MODULE_CONTEXT)gp=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[gp]end;function Lib.Core.Global:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")end;function Lib.Core.Global:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")end;function Lib.Core.Local:Initialize()if not self.IsInstalled then g_GameExtraNo=Framework.GetGameExtraNo()Lib.Core.LuaExtension:Initialize()Lib.Core.Report:Initialize()Lib.Core.Text:Initialize()Lib.Core.Job:Initialize()Lib.Core.ScriptingValue:Initialize()Lib.Core.Save:Initialize()Lib.Core.Quest:Initialize()Lib.Core.Chat:Initialize()Lib.Core.Debug:Initialize()Lib.Core.Bugfix:Initialize()Lib.Core.Player:Initialize()if Mission_LoadFiles then GameCallback_Lib_GetExternFilesToLoad=Mission_LoadFiles end;if GameCallback_Lib_GetExternFilesToLoad then local gl=GameCallback_Lib_GetExternFilesToLoad()for f=1,#gl do Script.Load(gl[f])end end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].Local.Name=Name;Lib[Name].AquireContext=function()return Lib.Core.Local:AquireContext(Lib[Name].Local)end;Lib[Name].ReleaseContext=function()return Lib.Core.Local:ReleaseContext(Lib[Name].Local)end;if Lib[Name].Local and Lib[Name].Local.Initialize then Lib[Name].Local:Initialize()end end;self:InitReportListener()self:InitEscapeHandler()self:InitLoadscreenHandler()Lib.Core.Global=nil end;self.IsInstalled=true end;function Lib.Core.Local:OnSaveGameLoaded()Lib.Core.LuaExtension:OnSaveGameLoaded()Lib.Core.Report:OnSaveGameLoaded()Lib.Core.Text:OnSaveGameLoaded()Lib.Core.Job:OnSaveGameLoaded()Lib.Core.ScriptingValue:OnSaveGameLoaded()Lib.Core.Save:OnSaveGameLoaded()Lib.Core.Quest:OnSaveGameLoaded()Lib.Core.Chat:OnSaveGameLoaded()Lib.Core.Debug:OnSaveGameLoaded()Lib.Core.Bugfix:OnSaveGameLoaded()Lib.Core.Player:OnSaveGameLoaded()for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]Lib[Name].AquireContext=function()return Lib.Core.Local:AquireContext(Lib[Name].Local)end;Lib[Name].ReleaseContext=function()return Lib.Core.Local:ReleaseContext(Lib[Name].Local)end;if Lib[Name].Local and Lib[Name].Local.OnSaveGameLoaded then Lib[Name].Local:OnSaveGameLoaded()end end;self:SetEscapeKeyTrigger()SendReport(Report.SaveGameLoaded)end;function Lib.Core.Local:InitReportListener()GameCallback_Lib_OnEventReceived=function(aM,...)local arg={...}Lib.Core.LuaExtension:OnReportReceived(aM,unpack(arg))Lib.Core.Report:OnReportReceived(aM,unpack(arg))Lib.Core.Text:OnReportReceived(aM,unpack(arg))Lib.Core.Job:OnReportReceived(aM,unpack(arg))Lib.Core.ScriptingValue:OnReportReceived(aM,unpack(arg))Lib.Core.Save:OnReportReceived(aM,unpack(arg))Lib.Core.Quest:OnReportReceived(aM,unpack(arg))Lib.Core.Chat:OnReportReceived(aM,unpack(arg))Lib.Core.Debug:OnReportReceived(aM,unpack(arg))Lib.Core.Bugfix:OnReportReceived(aM,unpack(arg))Lib.Core.Player:OnReportReceived(aM,unpack(arg))if aM==Report.LoadingFinished then XGUIEng.PopPage()end;for f=1,#Lib.Core.ModuleList do local Name=Lib.Core.ModuleList[f]if Lib[Name].Local and Lib[Name].Local.OnReportReceived then Lib[Name].Local:OnReportReceived(aM,unpack(arg))end end;if aM==Report.LoadingFinished then if GameCallback_Lib_LoadingFinished then GameCallback_Lib_LoadingFinished()end end end end;function Lib.Core.Local:ExecuteGlobal(gm,...)local gn=gm;if IsHistoryEdition()and IsMultiplayer()then warn(false,"Script command is not allowed in history edition multiplayer.")return end;if arg and#arg>0 then gn=gn:format(unpack(arg))end;GUI.SendScriptCommand(gn)end;function Lib.Core.Local:AquireContext(go)local Name=type(go)=="table"and go.Name or go;assert(Lib[Name]~=nil)table.insert(CONST_CURRENT_MODULE_CONTEXT,Lib[Name].Local)local gp=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[gp]end;function Lib.Core.Local:ReleaseContext(go)local Name=type(go)=="table"and go.Name or go;assert(Lib[Name]~=nil)local gp=#CONST_CURRENT_MODULE_CONTEXT;Lib[Name].Local=CONST_CURRENT_MODULE_CONTEXT[gp]table.remove(CONST_CURRENT_MODULE_CONTEXT)gp=#CONST_CURRENT_MODULE_CONTEXT;this=CONST_CURRENT_MODULE_CONTEXT[gp]end;function Lib.Core.Local:InitEscapeHandler()Report.EscapePressed=CreateReport("Event_EscapePressed")self:SetEscapeKeyTrigger()end;function Lib.Core.Local:SetEscapeKeyTrigger()Input.KeyBindDown(Keys.Escape,"SendReportToGlobal(Report.EscapePressed, GUI.GetPlayerID())",30,false)end;function Lib.Core.Local:InitLoadscreenHandler()Report.LoadingFinished=CreateReport("Event_LoadingFinished")self.LoadscreenWatchJobID=RequestHiResJob(function()if XGUIEng.IsWidgetShownEx("/LoadScreen/LoadScreen")==0 then SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())return true end end)HideLoadScreen_Orig_Core=HideLoadScreen;HideLoadScreen=function()HideLoadScreen_Orig_Core()XGUIEng.PushPage("/LoadScreen/LoadScreen",true)XGUIEng.ShowWidget("/LoadScreen/LoadScreen/ButtonStart",0)EndJob(Lib.Core.Local.LoadscreenWatchJobID)SendReportToGlobal(Report.LoadingFinished,GUI.GetPlayerID())end end;function Lib.Core.Local:Preload_ViewWholeMap()local gq,gr=Logic.WorldGetSize()Display.SetFarClipPlaneMinAndMax(0,0)Camera.SwitchCameraBehaviour(0)Camera.RTS_ToggleMapMode(1)Camera.RTS_SetMapModeFOV(90)Camera.RTS_SetMapModeZoomDistance(100000)Camera.RTS_SetMapModeZoomAngle(90)Camera.RTS_SetLookAtPosition(gq*0.5,gr*0.5)Display.SetRenderFogOfWar(0)end;function Lib.Core.Local:Preload_ResetView()Camera.RTS_ToggleMapMode(0)Display.SetRenderFogOfWar(1)end;function API.SetLogLevel(gs,gt)end;API.SetLoggingLevel=API.SetLogLevel;function PrepareLibrary()assert(not IsLocalScript(),"Must be called from global script!")Lib.Core.Global:Initialize()ExecuteLocal("Lib.Core.Local:Initialize()")end;API.PrepareLibrary=PrepareLibrary;function RegisterModule(C)assert(Lib[C],"Module '"..C.."' does not exist!")table.insert(Lib.Core.ModuleList,C)end;API.RegisterModule=RegisterModule;function ExecuteLocal(gm,...)if not IsLocalScript()then Lib.Core.Global:ExecuteLocal(gm,...)end end;API.ExecuteLocal=ExecuteLocal;function ExecuteGlobal(gm,...)if IsLocalScript()then Lib.Core.Local:ExecuteGlobal(gm,...)end end;API.ExecuteGlobal=ExecuteGlobal;Lib.Require("comfort/IsLocalScript")Lib.Register("module/diplomacy/Diplomacy_API")function SetDiplomacyStateForPlayer(n,dE,...)local p=#{...}==0 and{1,2,3,4,5,6,7,8}or{...}error(not IsLocalScript(),"Can not be used in local script!")Lib.Diplomacy.Global:SetDiplomacyStateForPlayer(n,dE,p)end;function SetDiplomacyStateForPlayers(dE,...)local p={1,2,3,4,5,6,7,8}error(not IsLocalScript(),"Can not be used in local script!")for f=1,#p do Lib.Diplomacy.Global:SetDiplomacyStateForPlayer(p[f],dE,p)end end;function SaveDiplomacyStates()error(not IsLocalScript(),"Can not be used in local script!")Lib.Diplomacy.Global:SaveDiplomacy()end;function ResetDiplomacyStates()error(not IsLocalScript(),"Can not be used in local script!")Lib.Diplomacy.Global:ResetDiplomacy()end;Lib.Diplomacy=Lib.Diplomacy or{}Lib.Diplomacy.Name="Diplomacy"Lib.Diplomacy.Global={DiplomacyBackup={}}Lib.Diplomacy.Local={}Lib.Require("core/Core")Lib.Require("module/diplomacy/Diplomacy_API")Lib.Register("module/diplomacy/Diplomacy")function Lib.Diplomacy.Global:Initialize()if not self.IsInstalled then Report.DiplomacyChanged=CreateReport("Event_DiplomacyChanged")self:OverwriteDiplomaticEntity()Lib.Diplomacy.Local=nil end;self.IsInstalled=true end;function Lib.Diplomacy.Global:OnSaveGameLoaded()end;function Lib.Diplomacy.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Diplomacy.Global:SaveDiplomacy()if#self.DiplomacyBackup==0 then for gu=1,8 do self.DiplomacyBackup[gu]={}for gv=1,8 do if gu~=gv then self.DiplomacyBackup[gu][gv]=GetDiplomacyState(gu,gv)end end end end end;function Lib.Diplomacy.Global:SetDiplomacyStateForPlayer(n,dE,gw)local State=dE or DiplomacyStates.Undecided;self:SaveDiplomacy()for f=1,#gw do if n~=gw[f]then SetDiplomacyState(n,gw[f],State)end end end;function Lib.Diplomacy.Global:ResetDiplomacy()if#self.DiplomacyBackup~=0 then for gu=1,8 do for gv=1,8 do SetDiplomacyState(gu,gv,self.DiplomacyBackup[gu][gv])end end;self.DiplomacyBackup={}end end;function Lib.Diplomacy.Global:OverwriteDiplomaticEntity()self.Orig_DiplomaticEntity.OnDiplomacyStatusChange=DiplomaticEntity.OnDiplomacyStatusChange;DiplomaticEntity.OnDiplomacyStatusChange=function(gx,gy,gz,gA)SendReport(Report.DiplomacyChanged,gx.ID,gz.ID,gA,gy.Status.State)SendReportToLocal(Report.DiplomacyChanged,gx.ID,gz.ID,gA,gy.Status.State)Lib.Diplomacy.Global.Orig_DiplomaticEntity.OnDiplomacyStatusChange(gx,gy,gz,gA)end end;function Lib.Diplomacy.Local:Initialize()if not self.IsInstalled then Report.DiplomacyChanged=CreateReport("Event_DiplomacyChanged")Lib.Diplomacy.Global=nil end;self.IsInstalled=true end;function Lib.Diplomacy.Local:OnSaveGameLoaded()end;function Lib.Diplomacy.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.Diplomacy.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UITools_API")function ChangeIcon(gB,gC,gD,C)error(IsLocalScript(),"Can only be done in local script!")gC=gC or{10,14}Lib.UITools.Widget:SetIcon(gB,gC,gD,C)end;API.InterfaceSetIcon=ChangeIcon;API.SetIcon=ChangeIcon;function SetTooltipNormal(gE,dG,gF)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipNormal(gE,dG,gF)end;API.InterfaceSetTooltipNormal=SetTooltipNormal;API.SetTooltipNormal=SetTooltipNormal;function SetTooltipCosts(gE,dG,gF,gG,gH)error(IsLocalScript(),"Can only be done in local script!")Lib.UITools.Widget:TooltipCosts(gE,dG,gF,gG,gH)end;API.InterfaceSetTooltipCosts=SetTooltipCosts;API.SetTooltipCosts=SetTooltipCosts;function HideMinimap(e2)if not IsLocalScript()then ExecuteLocal("HideMinimap(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapOverlay",e2)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/Minimap/MinimapTerrain",e2)end;API.InterfaceHideMinimap=HideMinimap;API.HideMinimap=HideMinimap;function HideToggleMinimap(e2)if not IsLocalScript()then ExecuteLocal("HideToggleMinimap(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/MinimapButton",e2)end;API.InterfaceHideToggleMinimap=HideToggleMinimap;API.HideToggleMinimap=HideToggleMinimap;function HideDiplomacyMenu(e2)if not IsLocalScript()then ExecuteLocal("HideDiplomacyMenu(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/DiplomacyMenuButton",e2)end;API.InterfaceHideDiplomacyMenu=HideDiplomacyMenu;API.HideDiplomacyMenu=HideDiplomacyMenu;function HideProductionMenu(e2)if not IsLocalScript()then ExecuteLocal("HideProductionMenu(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/ProductionMenuButton",e2)end;API.InterfaceHideProductionMenu=HideProductionMenu;API.HideProductionMenu=HideProductionMenu;function HideWeatherMenu(e2)if not IsLocalScript()then ExecuteLocal("HideWeatherMenu(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/WeatherMenuButton",e2)end;API.InterfaceHideWeatherMenu=HideWeatherMenu;API.HideWeatherMenu=HideWeatherMenu;function HideBuyTerritory(e2)if not IsLocalScript()then ExecuteLocal("HideBuyTerritory(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory",e2)end;API.InterfaceHideBuyTerritory=HideBuyTerritory;API.HideBuyTerritory=HideBuyTerritory;function HideKnightAbility(e2)if not IsLocalScript()then ExecuteLocal("HideKnightAbility(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbilityProgress",e2)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/StartAbility",e2)end;API.InterfaceHideKnightAbility=HideKnightAbility;API.HideKnightAbility=HideKnightAbility;function HideKnightButton(e2)if not IsLocalScript()then ExecuteLocal("HideKnightButton(%s)",tostring(e2))Logic.SetEntitySelectableFlag("..KnightID..",e2 and 0 or 1)return end;local cH=Logic.GetKnightID(GUI.GetPlayerID())if e2 then GUI.DeselectEntity(cH)end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButtonProgress",e2)Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/KnightButton",e2)end;API.InterfaceHideKnightButton=HideKnightButton;API.HideKnightButton=HideKnightButton;function HideSelectionButton(e2)if not IsLocalScript()then ExecuteLocal("HideSelectionButton(%s)",tostring(e2))return end;HideKnightButton(e2)GUI.ClearSelection()Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/MapFrame/BattalionButton",e2)end;API.InterfaceHideSelectionButton=HideSelectionButton;API.HideSelectionButton=HideSelectionButton;function HideBuildMenu(e2)if not IsLocalScript()then ExecuteLocal("HideBuildMenu(%s)",tostring(e2))return end;Lib.UITools.Widget:DisplayInterfaceButton("/InGame/Root/Normal/AlignBottomRight/BuildMenu",e2)end;API.InterfaceHideBuildMenu=HideBuildMenu;API.HideBuildMenu=HideBuildMenu;function AddShortcutDescription(e6,gI)if not IsLocalScript()then return-1 end;g_KeyBindingsOptions.Descriptions=nil;for f=1,#Lib.UITools.Shortcut.HotkeyDescriptions do if Lib.UITools.Shortcut.HotkeyDescriptions[f][1]==e6 then return-1 end end;local ar=#Lib.UITools.Shortcut.HotkeyDescriptions+1;table.insert(Lib.UITools.Shortcut.HotkeyDescriptions,{ID=ar,e6,gI})return#Lib.UITools.Shortcut.HotkeyDescriptions end;API.AddShortcutDescription=AddShortcutDescription;function RemoveShortcutDescription(aM)if not IsLocalScript()then return end;g_KeyBindingsOptions.Descriptions=nil;for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h.ID==aM then Lib.UITools.Shortcut.HotkeyDescriptions[g]=nil end end end;API.RemoveShortcutDescription=RemoveShortcutDescription;function SpeedLimitActivate(e2)if IsLocalScript()or Framework.IsNetworkGame()then return end;ExecuteLocal("Lib.UITools.Speed:ActivateSpeedLimit(%s)",tostring(e2))end;API.SpeedLimitActivate=SpeedLimitActivate;function SpeedLimitSetLimit(gJ)if IsLocalScript()or Framework.IsNetworkGame()then return end;ExecuteLocal("Lib.UITools.Speed:SetSpeedLimit(%f)",gJ)end;API.SetSpeedLimit=SpeedLimitSetLimit;API.SpeedLimitSetLimit=SpeedLimitSetLimit;Lib.Register("module/ui/UITools_Speed")Lib.UITools=Lib.UITools or{}Lib.UITools.Speed={SpeedLimit=1,Text={Message={NoSpeedUp={de="Die Spielgeschwindigkeit kann nicht erhöht werden!",en="The game speed can not be increased!",fr="La vitesse du jeu ne peut pas être augmentée!"}}}}function Lib.UITools.Speed:SetSpeedLimit(gJ)if Framework.IsNetworkGame()then log("Lib.UITools.Speed: Detect network game. Aborting!")return end;gJ=gJ<1 and 1 or math.floor(gJ)log("Lib.UITools.Speed: Setting speed limit to "..gJ)self.SpeedLimit=gJ end;function Lib.UITools.Speed:ActivateSpeedLimit(e2)if Framework.IsNetworkGame()then log("Lib.UITools.Speed: Detect network game. Aborting!")return end;self.UseSpeedLimit=e2==true;if e2 and Game.GameTimeGetFactor(GUI.GetPlayerID())>self.SpeedLimit then log("Lib.UITools.Speed: Speed is capped at "..self.SpeedLimit)Game.GameTimeSetFactor(GUI.GetPlayerID(),self.SpeedLimit)g_GameSpeed=1 end end;function Lib.UITools.Speed:InitForbidSpeedUp()GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(gK)GameCallback_GameSpeedChanged_Orig_Preferences_ForbidSpeedUp(gK)if Lib.UITools.Speed.UseSpeedLimit==true then log("Lib.UITools.Speed: Checking speed limit.")if gK>Lib.UITools.Speed.SpeedLimit then log("Lib.UITools.Speed: Speed is capped at "..tostring(gK)..".")Game.GameTimeSetFactor(GUI.GetPlayerID(),Lib.UITools.Speed.SpeedLimit)g_GameSpeed=1;Message(Lib.UITools.Speed.Text.Message.NoSpeedUp)end end end end;Lib.Register("module/ui/UITools_Widget")Lib.UITools=Lib.UITools or{}Lib.UITools.Widget={HiddenWidgets={}}function Lib.UITools.Widget:DisplayInterfaceButton(gL,gM)self.HiddenWidgets[gL]=nil;if gM==true then self.HiddenWidgets[gL]=true end;XGUIEng.ShowWidget(gL,gM==true and 0 or 1)end;function Lib.UITools.Widget:UpdateHiddenWidgets()for g,h in pairs(self.HiddenWidgets)do XGUIEng.ShowWidget(g,0)end end;function Lib.UITools.Widget:OverrideMissionGoodCounter()StartMissionGoodOrEntityCounter=function(gN,gO)local gP="/InGame/Root/Normal/MissionGoodOrEntityCounter/Icon"local gQ="/InGame/Root/Normal/MissionGoodOrEntityCounter"if type(gN[3])=="string"or(gN[3]or 0)>2 then Lib.UITools.Widget:SetIcon(gP,gN,64,gN[3])else SetIcon(gP,gN)end;g_MissionGoodOrEntityCounterAmountToReach=gO;g_MissionGoodOrEntityCounterIcon=gN;XGUIEng.ShowWidget(gQ,1)end end;function Lib.UITools.Widget:OverrideUpdateClaimTerritory()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface=GUI_Knight.ClaimTerritoryUpdate;GUI_Knight.ClaimTerritoryUpdate=function()GUI_Knight.ClaimTerritoryUpdate_Orig_QSB_Interface()local bn="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Knight/ClaimTerritory"if Lib.UITools.Widget.HiddenWidgets[bn]==true then XGUIEng.ShowWidget(bn,0)return true end end end;function Lib.UITools.Widget:SetIcon(gB,gC,gD,C)gD=gD or 64;gC[3]=gC[3]or 0;if C==nil then return SetIcon(gB,gC,gD)end;assert(gD==44 or gD==64 or gD==128)if gD==44 then C=C..".png"end;if gD==64 then C=C.."big.png"end;if gD==128 then C=C.."verybig.png"end;local gR,gS,gT,gU;gR=(gC[1]-1)*gD;gT=(gC[2]-1)*gD;gS=gC[1]*gD;gU=gC[2]*gD;State=1;if XGUIEng.IsButton(gB)==1 then State=7 end;XGUIEng.SetMaterialAlpha(gB,State,255)XGUIEng.SetMaterialTexture(gB,State,C)XGUIEng.SetMaterialUV(gB,State,gR,gT,gS,gU)end;function Lib.UITools.Widget:TooltipNormal(gV,gW,gX)if gV and gV:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gV=XGUIEng.GetStringTableText(gV)end;if gW and gW:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gW=XGUIEng.GetStringTableText(gW)end;if gX and gX:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gX=XGUIEng.GetStringTableText(gX)end;local gY="/InGame/Root/Normal/TooltipNormal"local gZ=XGUIEng.GetWidgetID(gY)local g_=XGUIEng.GetWidgetID(gY.."/FadeIn/Name")local h0=XGUIEng.GetWidgetID(gY.."/FadeIn/Text")local h1=XGUIEng.GetWidgetID(gY.."/FadeIn/BG")local h2=XGUIEng.GetWidgetID(gY.."/FadeIn")local h3=XGUIEng.GetCurrentWidgetID()local h4=gV and gV or""local h5=gW and gW or""local h6=""if XGUIEng.IsButtonDisabled(h3)==1 and gX then h6=h6 .."{cr}{@color:255,32,32,255}"..gX end;XGUIEng.SetText(g_,"{center}"..h4)XGUIEng.SetText(h0,h5 ..h6)local h7=XGUIEng.GetTextHeight(h0,true)local h8,h9=XGUIEng.GetWidgetSize(h0)XGUIEng.SetWidgetSize(h0,h8,h7)GUI_Tooltip.ResizeBG(h1,h0)local ha={h1}GUI_Tooltip.SetPosition(gZ,ha,h3)GUI_Tooltip.FadeInTooltip(h2)end;function Lib.UITools.Widget:TooltipCosts(gV,gW,gX,hb,hc)hb=hb or{}local hd={}for f=1,4,1 do hd[f]=hb[f]end;if gV and gV:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gV=XGUIEng.GetStringTableText(gV)end;if gW and gW:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gW=XGUIEng.GetStringTableText(gW)end;if gX and gX:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then gX=XGUIEng.GetStringTableText(gX)end;local gY="/InGame/Root/Normal/TooltipBuy"local gZ=XGUIEng.GetWidgetID(gY)local g_=XGUIEng.GetWidgetID(gY.."/FadeIn/Name")local h0=XGUIEng.GetWidgetID(gY.."/FadeIn/Text")local h1=XGUIEng.GetWidgetID(gY.."/FadeIn/BG")local h2=XGUIEng.GetWidgetID(gY.."/FadeIn")local he=XGUIEng.GetWidgetID(gY.."/Costs")local h3=XGUIEng.GetCurrentWidgetID()local h4=gV and gV or""local h5=gW and gW or""local h6=""if XGUIEng.IsButtonDisabled(h3)==1 and gX then h6=h6 .."{cr}{@color:255,32,32,255}"..gX end;XGUIEng.SetText(g_,"{center}"..h4)XGUIEng.SetText(h0,h5 ..h6)local h7=XGUIEng.GetTextHeight(h0,true)local h8,h9=XGUIEng.GetWidgetSize(h0)XGUIEng.SetWidgetSize(h0,h8,h7)GUI_Tooltip.ResizeBG(h1,h0)GUI_Tooltip.SetCosts(he,hd,hc)local ha={gZ,he,h1}GUI_Tooltip.SetPosition(gZ,ha,h3,nil,true)GUI_Tooltip.OrderTooltip(ha,h2,he,h3,h1)GUI_Tooltip.FadeInTooltip(h2)end;Lib.Register("module/ui/UITools_Shortcut")Lib.UITools=Lib.UITools or{}Lib.UITools.Shortcut={HotkeyDescriptions={}}function Lib.UITools.Shortcut:OverrideRegisterHotkey()function g_KeyBindingsOptions:OnShow()if Game~=nil then XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",1)else XGUIEng.ShowWidget("/InGame/KeyBindingsMain/Backdrop",0)end;if g_KeyBindingsOptions.Descriptions==nil then g_KeyBindingsOptions.Descriptions={}DescRegister("MenuInGame")DescRegister("MenuDiplomacy")DescRegister("MenuProduction")DescRegister("MenuPromotion")DescRegister("MenuWeather")DescRegister("ToggleOutstockInformations")DescRegister("JumpMarketplace")DescRegister("JumpMinimapEvent")DescRegister("BuildingUpgrade")DescRegister("BuildLastPlaced")DescRegister("BuildStreet")DescRegister("BuildTrail")DescRegister("KnockDown")DescRegister("MilitaryAttack")DescRegister("MilitaryStandGround")DescRegister("MilitaryGroupAdd")DescRegister("MilitaryGroupSelect")DescRegister("MilitaryGroupStore")DescRegister("MilitaryToggleUnits")DescRegister("UnitSelect")DescRegister("UnitSelectToggle")DescRegister("UnitSelectSameType")DescRegister("StartChat")DescRegister("StopChat")DescRegister("QuickSave")DescRegister("QuickLoad")DescRegister("TogglePause")DescRegister("RotateBuilding")DescRegister("ExitGame")DescRegister("Screenshot")DescRegister("ResetCamera")DescRegister("CameraMove")DescRegister("CameraMoveMouse")DescRegister("CameraZoom")DescRegister("CameraZoomMouse")DescRegister("CameraRotate")for g,h in pairs(Lib.UITools.Shortcut.HotkeyDescriptions)do if h then h[1]=type(h[1])=="table"and Localize(h[1])or h[1]h[2]=type(h[2])=="table"and Localize(h[2])or h[2]table.insert(g_KeyBindingsOptions.Descriptions,1,h)end end end;XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ShortcutList)XGUIEng.ListBoxPopAll(g_KeyBindingsOptions.Widget.ActionList)for ax,dF in ipairs(g_KeyBindingsOptions.Descriptions)do XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ShortcutList,dF[1])XGUIEng.ListBoxPushItem(g_KeyBindingsOptions.Widget.ActionList,dF[2])end end end;Lib.UITools=Lib.UITools or{}Lib.UITools.Name="UITools"Lib.UITools.Global={}Lib.UITools.Local={}CONST_PLAYER_NAMES={}Lib.Require("core/Core")Lib.Require("module/ui/UITools_Shortcut")Lib.Require("module/ui/UITools_Widget")Lib.Require("module/ui/UITools_Speed")Lib.Require("module/ui/UITools_API")Lib.Register("module/ui/UITools")function Lib.UITools.Global:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Local=nil;Lib.UITools.Shortcut=nil;Lib.UITools.Speed=nil;Lib.UITools.Widget=nil end;self.IsInstalled=true end;function Lib.UITools.Global:OnSaveGameLoaded()end;function Lib.UITools.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.UpdateTexturePosition then g_TexturePositions=g_TexturePositions or{}g_TexturePositions[arg[1]]=g_TexturePositions[arg[1]]or{}g_TexturePositions[arg[1]][arg[2]]={arg[3],arg[4],arg[5]}end end;function Lib.UITools.Local:Initialize()if not self.IsInstalled then Report.BuildingPlaced=CreateReport("Event_BuildingPlaced")Report.UpdateTexturePosition=CreateReport("Event_UpdateTexturePosition")Lib.UITools.Shortcut:OverrideRegisterHotkey()Lib.UITools.Widget:OverrideMissionGoodCounter()Lib.UITools.Widget:OverrideUpdateClaimTerritory()Lib.UITools.Speed:InitForbidSpeedUp()self:PostTexturePositionsToGlobal()self:OverrideAfterBuildingPlacement()Lib.UITools.Global=nil end;self.IsInstalled=true end;function Lib.UITools.Local:OnSaveGameLoaded()Lib.UITools.Widget:UpdateHiddenWidgets()end;function Lib.UITools.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.UITools.Local:OverrideAfterBuildingPlacement()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools=GameCallback_GUI_AfterBuildingPlacement;GameCallback_GUI_AfterBuildingPlacement=function()GameCallback_GUI_AfterBuildingPlacement_Orig_UITools()local E,F=GUI.Debug_GetMapPositionUnderMouse()RequestHiResJob(function()local hf={Logic.GetPlayerEntitiesInArea(GUI.GetPlayerID(),0,E,F,50,16)}for f=2,hf[1]+1 do if hf[f]and hf[f]~=0 and Logic.IsBuilding(hf[f])==1 and Logic.IsConstructionComplete(hf[f])==0 then SendReportToGlobal(Report.BuildingPlaced,hf[f],Logic.EntityGetPlayer(hf[f]))SendReport(Report.BuildingPlaced,hf[f],Logic.EntityGetPlayer(hf[f]))end end end,E,F)end end;function Lib.UITools.Local:PostTexturePositionsToGlobal()RequestJob(function()if Logic.GetTime()>1 then for g,h in pairs(g_TexturePositions)do for hg,hh in pairs(h)do local E,F,G=hh[1]or 1,hh[2]or 1,hh[3]or 0;SendReportToGlobal(Report.UpdateTexturePosition,g,hg,E,F,G)end end;return true end end)end;RegisterModule(Lib.UITools.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIEffects_API")function ActivateColoredScreen(n,hi,hj,hk,hl)ActivateImageScreen(n,"",hi or 0,hj or 0,hk or 0,hl or 255)end;API.ActivateColoredScreen=ActivateColoredScreen;function DeactivateColoredScreen(n)DeactivateImageScreen(n)end;API.DeactivateColoredScreen=DeactivateColoredScreen;function ActivateImageScreen(n,hm,hi,hj,hk,hl)assert(n and n>=1 and n<=8)if not IsLocalScript()then ExecuteLocal([[Lib.UIEffects.Local:InterfaceActivateImageBackground(%d, "%s", %d, %d, %d, %d)]],n,hm,hi~=nil and hi or 255,hj~=nil and hj or 255,hk~=nil and hk or 255,hl~=nil and hl or 255)return end;Lib.UIEffects.Local:InterfaceActivateImageBackground(n,hm,hi,hj,hk,hl)end;API.ActivateImageScreen=ActivateImageScreen;function DeactivateImageScreen(n)assert(n and n>=1 and n<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateImageBackground(%d)",n)return end;Lib.UIEffects.Local:InterfaceDeactivateImageBackground(n)end;API.DeactivateImageScreen=DeactivateImageScreen;function ActivateNormalInterface(n)assert(n and n>=1 and n<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceActivateNormalInterface(%d)",n)return end;Lib.UIEffects.Local:InterfaceActivateNormalInterface(n)end;API.ActivateNormalInterface=ActivateNormalInterface;function DeactivateNormalInterface(n)assert(n and n>=1 and n<=8)if not IsLocalScript()then ExecuteLocal("Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(%d)",n)return end;Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(n)end;API.DeactivateNormalInterface=DeactivateNormalInterface;function StartCinematicEvent(C,n)assert(IsLocalScript()==false)assert(n and n>=1 and n<=8)Lib.UIEffects.CinematicEvents[n]=Lib.UIEffects.CinematicEvents[n]or{}local ar=Lib.UIEffects.Global:ActivateCinematicEvent(n)Lib.UIEffects.CinematicEvents[n][C]=ar end;API.StartCinematicEvent=StartCinematicEvent;function FinishCinematicEvent(C,n)assert(IsLocalScript()==false)assert(n and n>=1 and n<=8)Lib.UIEffects.CinematicEvents[n]=Lib.UIEffects.CinematicEvents[n]or{}if Lib.UIEffects.CinematicEvents[n][C]then Lib.UIEffects.Global:ConcludeCinematicEvent(Lib.UIEffects.CinematicEvents[n][C],n)end end;API.FinishCinematicEvent=FinishCinematicEvent;function GetCinematicEvent(hn,n)assert(n and n>=1 and n<=8)Lib.UIEffects.CinematicEvents[n]=Lib.UIEffects.CinematicEvents[n]or{}if type(hn)=="number"then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(hn)end;return Lib.UIEffects.Global:GetCinematicEventStatus(hn)end;if Lib.UIEffects.CinematicEvents[n][hn]then if IsLocalScript()then return Lib.UIEffects.Local:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[n][hn])end;return Lib.UIEffects.Global:GetCinematicEventStatus(Lib.UIEffects.CinematicEvents[n][hn])end;return CinematicEventState.NotTriggered end;API.GetCinematicEvent=GetCinematicEvent;function IsCinematicEventActive(n)assert(n and n>=1 and n<=8)Lib.UIEffects.CinematicEvents[n]=Lib.UIEffects.CinematicEvents[n]or{}for g,h in pairs(Lib.UIEffects.CinematicEvents[n])do if GetCinematicEvent(g,n)==CinematicEventState.Active then return true end end;return false end;API.IsCinematicEventActive=IsCinematicEventActive;function StartTypewriter(ho)if Framework.IsNetworkGame()~=true then ho.PlayerID=ho.PlayerID or 1 end;if ho.PlayerID==nil or(ho.PlayerID<1 or ho.PlayerID>8)then return end;ho.Text=Localize(ho.Text or"")ho.Callback=ho.Callback or function()end;ho.CharSpeed=ho.CharSpeed or 1;ho.Waittime=(ho.Waittime or 8)*10;ho.TargetEntity=GetID(ho.TargetEntity or 0)ho.Image=ho.Image or""ho.Color=ho.Color or{R=ho.Image and ho.Image~=""and 255 or 0,G=ho.Image and ho.Image~=""and 255 or 0,B=ho.Image and ho.Image~=""and 255 or 0,A=255}if ho.Opacity and ho.Opacity>=0 and ho.Opacity then ho.Color.A=math.floor(255*ho.Opacity+0.5)end;ho.Delay=15;ho.Index=0;return Lib.UIEffects.Global:StartTypewriter(ho)end;API.StartTypewriter=StartTypewriter;Lib.Register("module/settings/Camera_Text")Lib.Camera=Lib.Camera or{}Lib.Camera.Text={Shortcut={Hotkey={de="STRG + UMSCHALT + K",en="CTRL + SHIFT + K",fr="CTRL + SHIFT + K"},Description={de="Alternativen Zoom ein/aus",en="Alternative zoom on/off",fr="Zoom alternatif On/Off"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Camera_API")function SetRenderDistance(hp)if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:SetRenderDistance(%f)]],hp)return end;Lib.Camera.Local:SetRenderDistance(hp)end;function ResetRenderDistance()if not IsLocalScript()then ExecuteLocal([[Lib.Camera.Local:ResetRenderDistance()]])return end;Lib.Camera.Local:ResetRenderDistance()end;function ActivateBorderScroll(n)n=n or-1;assert(n==-1 or n>=1 and n<=8)if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:ActivateBorderScroll(%d)",n)return end;Lib.Camera.Local:ActivateBorderScroll(n)end;API.ActivateBorderScroll=ActivateBorderScroll;function DeactivateBorderScroll(an,n)n=n or-1;assert(n==-1 or n>=1 and n<=8)local hq;if an then hq=GetID(an)end;if not IsLocalScript()then ExecuteLocal("Lib.Camera.Local:DeactivateBorderScroll(%d, %d)",n,hq or 0)return end;Lib.Camera.Local:DeactivateBorderScroll(n,hq)end;API.DeactivateBorderScroll=DeactivateBorderScroll;function ActivateExtendedZoom(n)n=n or-1;if not GUI then ExecuteLocal([[API.ActivateExtendedZoom(%s, %d)]],n)return end;Lib.Camera.Local:ActivateExtendedZoom(n)end;API.ActivateExtendedZoom=ActivateExtendedZoom;function DeactivateExtendedZoom(n)n=n or-1;if not GUI then ExecuteLocal([[API.DeactivateExtendedZoom(%s, %d)]],n)return end;Lib.Camera.Local:DeactivateExtendedZoom(n)end;API.DeactivateExtendedZoom=DeactivateExtendedZoom;function SetNormalZoomProps(gJ)if not GUI then ExecuteLocal([[SetNormalZoomProps(%f)]],gJ)return end;assert(type(gJ)=="number","Limit is wrong!")Lib.Camera.Local:SetNormalZoomProps(gJ)end;API.SetNormalZoomProps=SetNormalZoomProps;function SetExtendedZoomProps(gJ)if not GUI then ExecuteLocal([[SetExtendedZoomProps(%f)]],gJ)return end;assert(type(gJ)=="number","Limit is wrong!")Lib.Camera.Local:SetExtendedZoomProps(gJ)end;API.SetExtendedZoomProps=SetExtendedZoomProps;function FocusCameraOnKnight(n,af,hr)FocusCameraOnEntity(Logic.GetKnightID(n),af,hr)end;API.FocusCameraOnKnight=FocusCameraOnKnight;function FocusCameraOnEntity(l,af,hr)if not GUI then local hs=type(l)~="string"and l or"'"..l.."'"ExecuteLocal([[API.FocusCameraOnEntity(%s, %f, %f)]],hs,af,hr)return end;assert(type(af)=="number","Rotation is wrong!")assert(type(hr)=="number","Zoom factor is wrong!")assert(IsExisting(l),"Entity does not exist!")Lib.Camera.Local:SetCameraToEntity(l,af,hr)end;API.FocusCameraOnEntity=FocusCameraOnEntity;Lib.Camera=Lib.Camera or{}Lib.Camera.Name="Camera"Lib.Camera.Global={}Lib.Camera.Local={BorderScrollDeactivated=false,ExtendedZoomHotKeyID=0,ExtendedZoomAllowed=true,CameraExtendedZoom={[1]={0.650001,0.650000,0.099999},[2]={0.650001,0.650000,0.099999}},CameraNormalZoom={[1]={0.50001,0.50000,0.099999},[2]={0.50001,0.50000,0.099999}}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("comfort/GetPosition")Lib.Require("core/Core")Lib.Require("module/settings/Camera_API")Lib.Require("module/settings/Camera_Text")Lib.Register("module/settings/Camera")function Lib.Camera.Global:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")Lib.Camera.Local=nil end;self.IsInstalled=true end;function Lib.Camera.Global:OnSaveGameLoaded()end;function Lib.Camera.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Camera.Local:Initialize()if not self.IsInstalled then Report.BorderScrollLocked=CreateReport("Event_BorderScrollLocked")Report.BorderScrollReset=CreateReport("Event_BorderScrollReset")Report.ExtendedZoomDeactivated=CreateReport("Event_ExtendedZoomDeactivated")Report.ExtendedZoomActivated=CreateReport("Event_ExtendedZoomActivated")self:ResetRenderDistance()Lib.Camera.Global=nil end;self.IsInstalled=true end;function Lib.Camera.Local:OnSaveGameLoaded()end;function Lib.Camera.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.SaveGameLoaded then if self.ExtendedZoomActive then self:ActivateExtendedZoom(GUI.GetPlayerID())end;self:ResetRenderDistance()end end;function Lib.Camera.Local:SetRenderDistance(hp)Camera.Cutscene_SetFarClipPlane(hp,hp)Display.SetFarClipPlaneMinAndMax(hp,hp)end;function Lib.Camera.Local:ResetRenderDistance()Camera.Cutscene_SetFarClipPlane(CONST_FARCLIPPLANE)Display.SetFarClipPlaneMinAndMax(CONST_FARCLIPPLANE_DEFAULT,CONST_FARCLIPPLANE_DEFAULT)end;function Lib.Camera.Local:DeactivateBorderScroll(n,ht)if n~=-1 and n~=GUI.GetPlayerID()or self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=true;if ht then Camera.RTS_FollowEntity(ht)end;Camera.RTS_SetBorderScrollSize(0)Camera.RTS_SetZoomWheelSpeed(0)SendReportToGlobal(Report.BorderScrollLocked,n,ht or 0)SendReport(Report.BorderScrollLocked,n,ht or 0)end;function Lib.Camera.Local:ActivateBorderScroll(n)if n~=-1 and n~=GUI.GetPlayerID()or not self.BorderScrollDeactivated then return end;self.BorderScrollDeactivated=false;Camera.RTS_FollowEntity(0)Camera.RTS_SetBorderScrollSize(3.0)Camera.RTS_SetZoomWheelSpeed(4.2)SendReportToGlobal(Report.BorderScrollReset,n)SendReport(Report.BorderScrollReset,n)end;function Lib.Camera.Local:SetCameraToEntity(l,af,hr)local aP=GetPosition(l)local hu=af or-45;local hv=hr or 0.5;Camera.RTS_SetLookAtPosition(aP.X,aP.Y)Camera.RTS_SetRotationAngle(hu)Camera.RTS_SetZoomFactor(hv)end;function Lib.Camera.Local:ToggleExtendedZoom(n)if self.ExtendedZoomAllowed then if self.ExtendedZoomActive then self:DeactivateExtendedZoom(n)else self:ActivateExtendedZoom(n)end end end;function Lib.Camera.Local:ActivateExtendedZoom(n)if n~=-1 and n~=GUI.GetPlayerID()then return end;if not self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomDeactivated,n)end;self.ExtendedZoomActive=true;Camera.RTS_SetZoomFactor(self.CameraExtendedZoom[1][2])Camera.RTS_SetZoomFactorMax(self.CameraExtendedZoom[1][1])Camera.RTS_SetZoomFactorMin(self.CameraExtendedZoom[1][3])SendReportToGlobal(Report.ExtendedZoomDeactivated,n)end;function Lib.Camera.Local:DeactivateExtendedZoom(n)if n~=-1 and n~=GUI.GetPlayerID()then return end;if self.ExtendedZoomActive then SendReportToGlobal(Report.ExtendedZoomActivated,n)end;self.ExtendedZoomActive=false;Camera.RTS_SetZoomFactor(self.CameraNormalZoom[1][2])Camera.RTS_SetZoomFactorMax(self.CameraNormalZoom[1][1])Camera.RTS_SetZoomFactorMin(self.CameraNormalZoom[1][3])end;function Lib.Camera.Local:SetNormalZoomProps(gJ)local hw,hx,hy=0.099999,gJ,gJ+0.000001;if hy>self.CameraNormalZoom[2][1]then hy=self.CameraNormalZoom[2][1]end;self.CameraNormalZoom[1]={hy,hx,hw}end;function Lib.Camera.Local:SetExtendedZoomProps(gJ)local hw,hx,hy=0.099999,gJ,gJ+0.000001;if hy>self.CameraExtendedZoom[2][1]then hy=self.CameraExtendedZoom[2][1]end;self.CameraExtendedZoom[1]={hy,hx,hw}end;RegisterModule(Lib.Camera.Name)Lib.UIEffects=Lib.UIEffects or{}Lib.UIEffects.Name="UIEffects"Lib.UIEffects.CinematicEvents={}Lib.UIEffects.Global={CinematicEventID=0,CinematicEventStatus={},CinematicEventQueue={},TypewriterEventData={},TypewriterEventCounter=0}Lib.UIEffects.Local={CinematicEventStatus={},ChatOptionsWasShown=false,MessageLogWasShown=false,PauseScreenShown=false,NormalModeHidden=false}CinematicEventTypes={}CinematicEventState={NotTriggered=0,Active=1,Concluded=2}Lib.Require("core/Core")Lib.Require("module/settings/Camera")Lib.Require("module/ui/UIEffects_API")Lib.Register("module/ui/UIEffects")function Lib.UIEffects.Global:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}self.CinematicEventQueue[f]={}end;RequestHiResJob(function()Lib.UIEffects.Global:ControlTypewriter()end)Lib.UIEffects.Local=nil end;self.IsInstalled=true end;function Lib.UIEffects.Global:OnSaveGameLoaded()end;function Lib.UIEffects.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1;DeactivateImageScreen(arg[2])ActivateNormalInterface(arg[2])elseif aM==Report.CinematicConcluded then if self.CinematicEventStatus[arg[2]][arg[1]]then self.CinematicEventStatus[arg[2]][arg[1]]=2 end;if#self.CinematicEventQueue[arg[2]]>0 then ActivateImageScreen(arg[2],"",0,0,0,255)DeactivateNormalInterface(arg[2])end end end;function Lib.UIEffects.Global:PushCinematicEventToQueue(n,i,C,ho)table.insert(self.CinematicEventQueue[n],{i,C,ho})end;function Lib.UIEffects.Global:LookUpCinematicInQueue(n)if#self.CinematicEventQueue[n]>0 then return self.CinematicEventQueue[n][1]end end;function Lib.UIEffects.Global:PopCinematicEventFromQueue(n)if#self.CinematicEventQueue[n]>0 then return table.remove(self.CinematicEventQueue[n],1)end end;function Lib.UIEffects.Global:GetNewCinematicEventID()self.CinematicEventID=self.CinematicEventID+1;return self.CinematicEventID end;function Lib.UIEffects.Global:GetCinematicEventStatus(hz)for f=1,8 do if self.CinematicEventStatus[f][hz]then return self.CinematicEventStatus[f][hz]end end;return 0 end;function Lib.UIEffects.Global:ActivateCinematicEvent(n)local ar=self:GetNewCinematicEventID()SendReport(Report.CinematicActivated,ar,n)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicActivated, %d, %d);
          if GUI.GetPlayerID() == %d then
            Lib.UIEffects.Local.SavingWasDisabled = Lib.Core.Save.SavingDisabled == true;
            DisableSaving(true);
          end]],ar,n,n))return ar end;function Lib.UIEffects.Global:ConcludeCinematicEvent(aM,n)SendReport(Report.CinematicConcluded,aM,n)Logic.ExecuteInLuaLocalState(string.format([[SendReport(Report.CinematicConcluded, %d, %d);
          if GUI.GetPlayerID() == %d then
            if not Lib.UIEffects.Local.SavingWasDisabled then
                DisableSaving(false);
            end
            Lib.UIEffects.Local.SavingWasDisabled = false;
          end]],aM,n,n))end;function Lib.UIEffects.Global:StartTypewriter(ho)self.TypewriterEventCounter=self.TypewriterEventCounter+1;local hA="CinematicEvent_Typewriter"..self.TypewriterEventCounter;ho.Name=hA;if not self.LoadscreenClosed or IsCinematicEventActive(ho.PlayerID)then Lib.UIEffects.Global:PushCinematicEventToQueue(ho.PlayerID,CinematicEventTypes.Typewriter,hA,ho)return ho.Name end;return self:PlayTypewriter(ho)end;function Lib.UIEffects.Global:PlayTypewriter(ho)local ar=StartCinematicEvent(ho.Name,ho.PlayerID)ho.ID=ar;ho.TextTokens=self:TokenizeText(ho)self.TypewriterEventData[ho.PlayerID]=ho;ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            ActivateImageScreen(GUI.GetPlayerID(), "%s", %d, %d, %d, %d)
            DeactivateNormalInterface(GUI.GetPlayerID())
            DeactivateBorderScroll(GUI.GetPlayerID(), %d)
            Input.CutsceneMode()
            GUI.ClearNotes()
        end
        ]],ho.PlayerID,ho.Image,ho.Color.R or 0,ho.Color.G or 0,ho.Color.B or 0,ho.Color.A or 255,ho.TargetEntity)SendReport(Report.TypewriterStarted,ho.PlayerID,ho.Name)SendReportToLocal(Report.TypewriterStarted,ho.PlayerID,ho.Name)return ho.Name end;function Lib.UIEffects.Global:FinishTypewriter(n)if self.TypewriterEventData[n]then local hB=table.copy(self.TypewriterEventData[n])local hC=self.TypewriterEventData[n].PlayerID;ExecuteLocal([[
            if GUI.GetPlayerID() == %d then
                ResetRenderDistance()
                DeactivateImageScreen(GUI.GetPlayerID())
                ActivateNormalInterface(GUI.GetPlayerID())
                ActivateBorderScroll(GUI.GetPlayerID())
                if ModuleGuiControl then
                    Lib.UITools.Widget:UpdateHiddenWidgets()
                end
                Input.GameMode()
                GUI.ClearNotes()
            end
        ]],n)SendReport(Report.TypewriterEnded,hC,hB.Name)SendReportToLocal(Report.TypewriterEnded,hC,hB.Name)self.TypewriterEventData[n]:Callback()FinishCinematicEvent(hB.Name,hC)self.TypewriterEventData[n]=nil end end;function Lib.UIEffects.Global:TokenizeText(ho)local hD={}local hE={}local bq=ConvertPlaceholders(Localize(ho.Text))bq=bq:gsub("%s+"," ")while true do local ei,ej=bq:find("{")local ek,el=bq:find("}")if not ei or not ek then table.insert(hE,bq)break end;if ei>1 then table.insert(hE,bq:sub(1,ei-1))end;table.insert(hE,bq:sub(ei,el))bq=bq:sub(el+1)end;local hF=false;for f=1,#hE,1 do if hE[f]:find("{")then local ax=#hD;if hF then hD[ax]=hD[ax]..hE[f]else table.insert(hD,ax+1,hE[f])end;hF=true else local ax=1;while ax<=#hE[f]do if string.byte(hE[f]:sub(ax,ax))==195 then table.insert(hD,hE[f]:sub(ax,ax+1))ax=ax+1 else table.insert(hD,hE[f]:sub(ax,ax))end;ax=ax+1 end;hF=false end end;return hD end;function Lib.UIEffects.Global:ControlTypewriter()for f=1,8 do if self.LoadscreenClosed and not IsCinematicEventActive(f)then local hG=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if hG and hG[1]==CinematicEventTypes.Typewriter then local bk=Lib.UIEffects.Global:PopCinematicEventFromQueue(f)self:PlayTypewriter(bk[3])end end end;for g,h in pairs(self.TypewriterEventData)do if self.TypewriterEventData[g].Delay>0 then self.TypewriterEventData[g].Delay=self.TypewriterEventData[g].Delay-1;ExecuteLocal([[if GUI.GetPlayerID() == %d then GUI.ClearNotes() end]],self.TypewriterEventData[g].PlayerID)end;if self.TypewriterEventData[g].Delay==0 then self.TypewriterEventData[g].Index=h.Index+h.CharSpeed;if h.Index>#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Index=#self.TypewriterEventData[g].TextTokens end;local ax=math.floor(h.Index+0.5)local bq=""for f=1,ax,1 do bq=bq..self.TypewriterEventData[g].TextTokens[f]end;ExecuteLocal([[
                if GUI.GetPlayerID() == %d then
                    GUI.ClearNotes()
                    GUI.AddNote("%s")
                end
                ]],self.TypewriterEventData[g].PlayerID,bq)if ax==#self.TypewriterEventData[g].TextTokens then self.TypewriterEventData[g].Waittime=h.Waittime-1;if h.Waittime<=0 then self:FinishTypewriter(g)end end end end end;function Lib.UIEffects.Local:Initialize()if not self.IsInstalled then Report.CinematicActivated=CreateReport("Event_CinematicEventActivated")Report.CinematicConcluded=CreateReport("Event_CinematicEventConcluded")Report.GameInterfaceShown=CreateReport("Event_GameInterfaceShown")Report.GameInterfaceHidden=CreateReport("Event_GameInterfaceHidden")Report.ImageScreenShown=CreateReport("Event_ImageScreenShown")Report.ImageScreenHidden=CreateReport("Event_ImageScreenHidden")Report.TypewriterStarted=CreateReport("Event_TypewriterStarted")Report.TypewriterEnded=CreateReport("Event_TypewriterEnded")for f=1,8 do self.CinematicEventStatus[f]={}end;self:OverrideInterfaceUpdateForCinematicMode()self:OverrideInterfaceThroneroomForCinematicMode()Lib.UIEffects.Global=nil end;self.IsInstalled=true end;function Lib.UIEffects.Local:OnSaveGameLoaded()end;function Lib.UIEffects.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.CinematicActivated then self.CinematicEventStatus[arg[2]][arg[1]]=1 elseif aM==Report.CinematicConcluded then for f=1,8 do if self.CinematicEventStatus[f][arg[1]]then self.CinematicEventStatus[f][arg[1]]=2 end end end end;function Lib.UIEffects.Local:GetCinematicEventStatus(hz)for f=1,8 do if self.CinematicEventStatus[f][hz]then return self.CinematicEventStatus[f][hz]end end;return 0 end;function Lib.UIEffects.Local:OverrideInterfaceUpdateForCinematicMode()GameCallback_GameSpeedChanged_Orig_UIEffects=GameCallback_GameSpeedChanged;GameCallback_GameSpeedChanged=function(gK)if not Lib.UIEffects.Local.PauseScreenShown then GameCallback_GameSpeedChanged_Orig_UIEffects(gK)end end;MissionTimerUpdate_Orig_UIEffects=MissionTimerUpdate;MissionTimerUpdate=function()MissionTimerUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)end end;MissionGoodOrEntityCounterUpdate_Orig_UIEffects=MissionGoodOrEntityCounterUpdate;MissionGoodOrEntityCounterUpdate=function()MissionGoodOrEntityCounterUpdate_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)end end;MerchantButtonsUpdater_Orig_UIEffects=GUI_Merchant.ButtonsUpdater;GUI_Merchant.ButtonsUpdater=function()MerchantButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)end end;if GUI_Tradepost then TradepostButtonsUpdater_Orig_UIEffects=GUI_Tradepost.ButtonsUpdater;GUI_Tradepost.ButtonsUpdater=function()TradepostButtonsUpdater_Orig_UIEffects()if Lib.UIEffects.Local.NormalModeHidden or Lib.UIEffects.Local.PauseScreenShown then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end end end end;function Lib.UIEffects.Local:OverrideInterfaceThroneroomForCinematicMode()GameCallback_Lib_Camera_StartButtonPressed=function(n)end;OnStartButtonPressed=function()GameCallback_Lib_Camera_StartButtonPressed(GUI.GetPlayerID())end;GameCallback_Lib_Camera_BackButtonPressed=function(n)end;OnBackButtonPressed=function()GameCallback_Lib_Camera_BackButtonPressed(GUI.GetPlayerID())end;GameCallback_Lib_Camera_SkipButtonPressed=function(n)end;OnSkipButtonPressed=function()GameCallback_Lib_Camera_SkipButtonPressed(GUI.GetPlayerID())end;GameCallback_Lib_Camera_ThroneRoomLeftClick=function(n)end;ThroneRoomLeftClick=function()GameCallback_Lib_Camera_ThroneRoomLeftClick(GUI.GetPlayerID())end;GameCallback_Lib_Camera_ThroneroomCameraControl=function(n)end;ThroneRoomCameraControl=function()GameCallback_Lib_Camera_ThroneroomCameraControl(GUI.GetPlayerID())end end;function Lib.UIEffects.Local:InterfaceActivateImageBackground(n,hH,hI,_G,hJ,hK)if n~=GUI.GetPlayerID()or self.PauseScreenShown then return end;XGUIEng.PushPage("/InGame/Root/Normal/PauseScreen",false)XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",1)if hH and hH~=""then local eC={GUI.GetScreenSize()}local gR,gT,gS,gU=0,0,1,1;if eC[1]/eC[2]<1.6 then gR=gR+gR/0.125;gS=gS-gS*0.125 end;XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,hH)XGUIEng.SetMaterialUV("/InGame/Root/Normal/PauseScreen",0,gR,gT,gS,gU)end;XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,hI,_G,hJ,hK)SendReportToGlobal(Report.ImageScreenShown,n)SendReport(Report.ImageScreenShown,n)self.PauseScreenShown=true end;function Lib.UIEffects.Local:InterfaceDeactivateImageBackground(n)if n~=GUI.GetPlayerID()or not self.PauseScreenShown then return end;XGUIEng.ShowWidget("/InGame/Root/Normal/PauseScreen",0)XGUIEng.SetMaterialTexture("/InGame/Root/Normal/PauseScreen",0,"")XGUIEng.SetMaterialColor("/InGame/Root/Normal/PauseScreen",0,40,40,40,180)XGUIEng.PopPage()SendReportToGlobal(Report.ImageScreenHidden,n)SendReport(Report.ImageScreenHidden,n)self.PauseScreenShown=false end;function Lib.UIEffects.Local:InterfaceDeactivateNormalInterface(n)if GUI.GetPlayerID()~=n or self.NormalModeHidden then return end;XGUIEng.PushPage("/InGame/Root/Normal/NotesWindow",false)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",0)XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",0)HideOtherMenus()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/AlignTopLeft/GameClock")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",0)self.GameClockWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/ChatOptions/Background")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)self.ChatOptionsWasShown=true end;if XGUIEng.IsWidgetShownEx("/InGame/Root/Normal/MessageLog/Name")==1 then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)self.MessageLogWasShown=true end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",0)end;SendReportToGlobal(Report.GameInterfaceHidden,GUI.GetPlayerID())SendReport(Report.GameInterfaceHidden,GUI.GetPlayerID())self.NormalModeHidden=true end;function Lib.UIEffects.Local:InterfaceActivateNormalInterface(n)if GUI.GetPlayerID()~=n or not self.NormalModeHidden then return end;XGUIEng.ShowWidget("/InGame/Root/Normal",1)XGUIEng.ShowWidget("/InGame/Root/3dOnScreenDisplay",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopRight",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar",1)XGUIEng.ShowWidget("/InGame/Root/Normal/TextMessages",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/TopBar/UpdateFunction",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/Buttons",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestLogButton",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/QuestTimers",1)XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Merchant",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message",1)XGUIEng.PopPage()if g_MissionTimerEndTime then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionTimer",1)end;if g_MissionGoodOrEntityCounterAmountToReach then XGUIEng.ShowWidget("/InGame/Root/Normal/MissionGoodOrEntityCounter",1)end;if self.GameClockWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignTopLeft/GameClock",1)self.GameClockWasShown=false end;if self.ChatOptionsWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.ChatOptionsWasShown=false end;if self.MessageLogWasShown then XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)self.MessageLogWasShown=false end;if g_GameExtraNo>0 then XGUIEng.ShowWidget("/InGame/Root/Normal/Selected_Tradepost",1)end;SendReportToGlobal(Report.GameInterfaceShown,GUI.GetPlayerID())SendReport(Report.GameInterfaceShown,GUI.GetPlayerID())self.NormalModeHidden=false end;RegisterModule(Lib.UIEffects.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_Buttons")Lib.UIBuilding.Global.ExtraButton={}Lib.UIBuilding.Global.ExtraButton.Downgrade={}function Lib.UIBuilding.Global.ExtraButton.Downgrade:InitEvents()Report.DowngradeBuilding=CreateReport("Event_DowngradeBuilding")end;function Lib.UIBuilding.Global.ExtraButton.Downgrade:ExtraButtonOnReportReceived(aM,...)if aM==Report.DowngradeBuilding then self:OnBuildingDowngrade(arg[1])end end;function Lib.UIBuilding.Global.ExtraButton.Downgrade:OnBuildingDowngrade(hL)local ac=Logic.GetEntityHealth(hL)local ab=Logic.GetEntityMaxHealth(hL)Logic.HurtEntity(hL,ac-ab/2)SendReportToLocal(Report.DowngradeBuilding,hL)end;Lib.UIBuilding.Global.ExtraButton.SingleReserve={}function Lib.UIBuilding.Global.ExtraButton.SingleReserve:InitEvents()Report.LockGoodType=CreateReport("Event_LockGoodType")Report.UnlockGoodType=CreateReport("Event_UnlockGoodType")end;function Lib.UIBuilding.Global.ExtraButton.SingleReserve:ExtraButtonOnReportReceived(aM,...)end;Lib.UIBuilding.Global.ExtraButton.SingleStop={}function Lib.UIBuilding.Global.ExtraButton.SingleStop:InitEvents()Report.ResumeBuilding=CreateReport("Event_ResumeBuilding")Report.YieldBuilding=CreateReport("Event_YieldBuilding")end;function Lib.UIBuilding.Global.ExtraButton.SingleStop:ExtraButtonOnReportReceived(aM,...)end;Lib.UIBuilding.Local.ExtraButton={}Lib.UIBuilding.Local.ExtraButton.Downgrade={}Lib.UIBuilding.Local.ExtraButton.Downgrade.Cost=0;Lib.UIBuilding.Local.ExtraButton.Downgrade.Bindings={}Lib.UIBuilding.Local.ExtraButton.Downgrade.Types={["B_Bakery"]=true,["B_BannerMaker"]=true,["B_Barracks"]=true,["B_BarracksArchers"]=true,["B_Baths"]=true,["B_Beekeeper"]=true,["B_Blacksmith"]=true,["B_BowMaker"]=true,["B_BroomMaker"]=true,["B_Butcher"]=true,["B_CandleMaker"]=true,["B_Carpenter"]=true,["B_CattleFarm"]=true,["B_Dairy"]=true,["B_FishingHut"]=true,["B_GrainFarm"]=true,["B_HerbGatherer"]=true,["B_HuntersHut"]=true,["B_IronMine"]=true,["B_Pharmacy"]=true,["B_SheepFarm"]=true,["B_SiegeEngineWorkshop"]=true,["B_SmokeHouse"]=true,["B_Soapmaker"]=true,["B_StoneQuarry"]=true,["B_SwordSmith"]=true,["B_Tanner"]=true,["B_Tavern"]=true,["B_Theatre"]=true,["B_Weaver"]=true,["B_Woodcutter"]=true}function Lib.UIBuilding.Local.ExtraButton.Downgrade:InitEvents()Report.DowngradeBuilding=CreateReport("Event_DowngradeBuilding")end;function Lib.UIBuilding.Local.ExtraButton.Downgrade:ExtraButtonOnReportReceived(aM,...)end;function Lib.UIBuilding.Local.ExtraButton.Downgrade:SetCost(hM)self.Cost=hM end;function Lib.UIBuilding.Local.ExtraButton.Downgrade:Activate()for j,s in pairs(self.Types)do local ar=AddBuildingButtonByTypeAtPosition(Entities[j],220,62,self.ButtonAction,self.ButtonTooltip,self.ButtonUpdate)self.Bindings[j]=ar end end;function Lib.UIBuilding.Local.ExtraButton.Downgrade:Deactivate()for j,s in pairs(self.Types)do local ar=self.Bindings[j]DropBuildingButtonFromType(Entities[j],ar)end end;function Lib.UIBuilding.Local.ExtraButton.Downgrade.ButtonAction(gB,hL)local aw=Logic.GetHeadquarters(GUI.GetPlayerID())local hN=Lib.UIBuilding.Local.ExtraButton.Downgrade.Cost;if hN>0 and Logic.GetAmountOnOutStockByGoodType(aw,Goods.G_Gold)<hN then AddMessage("Feedback_TextLines/TextLine_NotEnough_G_Gold")return end;Sound.FXPlay2DSound("ui\\menu_click")if hN>0 then GUI.RemoveGoodFromStock(aw,Goods.G_Gold,hN)end;GUI.DeselectEntity(hL)SendReportToGlobal(Report.DowngradeBuilding,hL)end;function Lib.UIBuilding.Local.ExtraButton.Downgrade.ButtonTooltip(gB,hL)local hO,bq,hP;hO=Lib.UIBuilding.Text.ExtraButton.Downgrade.Normal.Title;bq=Lib.UIBuilding.Text.ExtraButton.Downgrade.Normal.Text;if XGUIEng.IsButtonDisabled(gB)==1 then hP=Lib.UIBuilding.Text.ExtraButton.Downgrade.Normal.Error;hP=XGUIEng.GetStringTableText(hP)end;local hN=Lib.UIBuilding.Local.ExtraButton.Downgrade.Cost;API.SetTooltipCosts(ConvertPlaceholders(Localize(hO)),ConvertPlaceholders(Localize(bq)),hP,hN>0 and{Goods.G_Gold,hN}or nil)end;function Lib.UIBuilding.Local.ExtraButton.Downgrade.ButtonUpdate(gB,hL)if Logic.IsConstructionComplete(hL)==0 then XGUIEng.ShowWidget(gB,0)return end;if Logic.IsBuildingBeingUpgraded(hL)or Logic.GetUpgradeLevel(hL)<1 or Logic.IsBuildingBeingKnockedDown(hL)or Logic.IsBurning(hL)or Logic.GetEntityMaxHealth(hL)>Logic.GetEntityHealth(hL)or Logic.BuildingDoWorkersStrike(hL)==true or Logic.CanCancelUpgradeBuilding(hL)or Logic.CanCancelKnockDownBuilding(hL)then XGUIEng.DisableButton(gB,1)else XGUIEng.DisableButton(gB,0)end;SetIcon(gB,{3,15})end;Lib.UIBuilding.Local.ExtraButton.SingleReserve={}Lib.UIBuilding.Local.ExtraButton.SingleReserve.Bindings={}Lib.UIBuilding.Local.ExtraButton.SingleReserve.Types={["B_Bakery"]=true,["B_BannerMaker"]=true,["B_Barracks"]=true,["B_BarracksArchers"]=true,["B_Baths"]=true,["B_Blacksmith"]=true,["B_BowMaker"]=true,["B_BroomMaker"]=true,["B_Butcher"]=true,["B_CandleMaker"]=true,["B_Carpenter"]=true,["B_Dairy"]=true,["B_Pharmacy"]=true,["B_SiegeEngineWorkshop"]=true,["B_SmokeHouse"]=true,["B_Soapmaker"]=true,["B_SwordSmith"]=true,["B_Tanner"]=true,["B_Tavern"]=true,["B_Theatre"]=true,["B_Weaver"]=true}function Lib.UIBuilding.Local.ExtraButton.SingleReserve:InitEvents()Report.LockGoodType=CreateReport("Event_LockGoodType")Report.UnlockGoodType=CreateReport("Event_UnlockGoodType")end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve:ExtraButtonOnReportReceived(aM,...)end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve:Activate()for j,s in pairs(self.Types)do local ar=AddBuildingButtonByType(Entities[j],self.ButtonAction,self.ButtonTooltip,self.ButtonUpdate)self.Bindings[j]=ar end end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve:Deactivate()for j,s in pairs(self.Types)do local ar=self.Bindings[j]DropBuildingButtonFromType(Entities[j],ar)end end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve.ButtonAction(gB,hL)local q=Logic.EntityGetPlayer(hL)local cM=Logic.GetEntityType(hL)local bj=Logic.GetProductOfBuildingType(cM)if Logic.IsGoodLocked(q,bj)then GUI.SetGoodLockState(bj,false)SendReportToGlobal(Report.LockGoodType,q,cM)SendReport(Report.LockGoodType,q,cM)else GUI.SetGoodLockState(bj,true)SendReportToGlobal(Report.UnlockGoodType,q,cM)SendReport(Report.UnlockGoodType,q,cM)end end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve.ButtonTooltip(gB,hL)local q=Logic.EntityGetPlayer(hL)local cM=Logic.GetEntityType(hL)local bj=Logic.GetProductOfBuildingType(cM)local hO,bq,hP;if Logic.IsGoodLocked(q,bj)then hO=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Stopped.Title;hO=XGUIEng.GetStringTableText(hO)bq=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Stopped.Text;bq=XGUIEng.GetStringTableText(bq)if XGUIEng.IsButtonDisabled(gB)==1 then hP=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Stopped.Error;hP=XGUIEng.GetStringTableText(hP)end else hO=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Normal.Title;hO=XGUIEng.GetStringTableText(hO)bq=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Normal.Text;bq=XGUIEng.GetStringTableText(bq)if XGUIEng.IsButtonDisabled(gB)==1 then hP=Lib.UIBuilding.Text.ExtraButton.SingleReserve.Normal.Error;hP=XGUIEng.GetStringTableText(hP)end end;API.SetTooltipCosts(hO,bq,hP)end;function Lib.UIBuilding.Local.ExtraButton.SingleReserve.ButtonUpdate(gB,hL)local q=Logic.EntityGetPlayer(hL)local cM=Logic.GetEntityType(hL)local bj=Logic.GetProductOfBuildingType(cM)if Logic.IsConstructionComplete(hL)==0 then XGUIEng.ShowWidget(gB,0)return end;if Logic.IsBuildingBeingUpgraded(hL)or Logic.IsBuildingBeingKnockedDown(hL)or Logic.BuildingDoWorkersStrike(hL)==true or Logic.IsBurning(hL)then XGUIEng.DisableButton(gB,1)else XGUIEng.DisableButton(gB,0)end;SetIcon(gB,{15,6})if Logic.IsGoodLocked(q,bj)then SetIcon(gB,{10,9})end end;Lib.UIBuilding.Local.ExtraButton.SingleStop={}Lib.UIBuilding.Local.ExtraButton.SingleStop.Bindings={}Lib.UIBuilding.Local.ExtraButton.SingleStop.Types={["B_Bakery"]=true,["B_BannerMaker"]=true,["B_Barracks"]=true,["B_BarracksArchers"]=true,["B_Baths"]=true,["B_Beekeeper"]=true,["B_Blacksmith"]=true,["B_BowMaker"]=true,["B_BroomMaker"]=true,["B_Butcher"]=true,["B_CandleMaker"]=true,["B_Carpenter"]=true,["B_CattleFarm"]=true,["B_Dairy"]=true,["B_FishingHut"]=true,["B_GrainFarm"]=true,["B_HerbGatherer"]=true,["B_HuntersHut"]=true,["B_IronMine"]=true,["B_Pharmacy"]=true,["B_SheepFarm"]=true,["B_SiegeEngineWorkshop"]=true,["B_SmokeHouse"]=true,["B_Soapmaker"]=true,["B_StoneQuarry"]=true,["B_SwordSmith"]=true,["B_Tanner"]=true,["B_Tavern"]=true,["B_Theatre"]=true,["B_Weaver"]=true,["B_Woodcutter"]=true}function Lib.UIBuilding.Local.ExtraButton.SingleStop:InitEvents()Report.ResumeBuilding=CreateReport("Event_ResumeBuilding")Report.YieldBuilding=CreateReport("Event_YieldBuilding")end;function Lib.UIBuilding.Local.ExtraButton.SingleStop:ExtraButtonOnReportReceived(aM,...)end;function Lib.UIBuilding.Local.ExtraButton.SingleStop:Activate()for j,s in pairs(self.Types)do local ar=AddBuildingButtonByType(Entities[j],self.ButtonAction,self.ButtonTooltip,self.ButtonUpdate)self.Bindings[j]=ar end end;function Lib.UIBuilding.Local.ExtraButton.SingleStop:Deactivate()for j,s in pairs(self.Types)do local ar=self.Bindings[j]DropBuildingButtonFromType(Entities[j],ar)end end;function Lib.UIBuilding.Local.ExtraButton.SingleStop.ButtonAction(gB,hL)if Logic.IsBuildingStopped(hL)then GUI.SetStoppedState(hL,false)SendReportToGlobal(Report.ResumeBuilding,hL)SendReport(Report.ResumeBuilding,hL)else GUI.SetStoppedState(hL,true)SendReportToGlobal(Report.YieldBuilding,hL)SendReport(Report.YieldBuilding,hL)end end;function Lib.UIBuilding.Local.ExtraButton.SingleStop.ButtonTooltip(gB,hL)local hO,bq,hP;if Logic.IsBuildingStopped(hL)then hO=Lib.UIBuilding.Text.ExtraButton.SingleStop.Stopped.Title;hO=XGUIEng.GetStringTableText(hO)bq=Lib.UIBuilding.Text.ExtraButton.SingleStop.Stopped.Text;if XGUIEng.IsButtonDisabled(gB)==1 then hP=Lib.UIBuilding.Text.ExtraButton.SingleStop.Stopped.Error;hP=XGUIEng.GetStringTableText(hP)end else hO=Lib.UIBuilding.Text.ExtraButton.SingleStop.Normal.Title;hO=XGUIEng.GetStringTableText(hO)bq=Lib.UIBuilding.Text.ExtraButton.SingleStop.Normal.Text;if XGUIEng.IsButtonDisabled(gB)==1 then hP=Lib.UIBuilding.Text.ExtraButton.SingleStop.Normal.Error;hP=XGUIEng.GetStringTableText(hP)end end;API.SetTooltipCosts(hO,ConvertPlaceholders(Localize(bq)),hP)end;function Lib.UIBuilding.Local.ExtraButton.SingleStop.ButtonUpdate(gB,hL)if Logic.IsConstructionComplete(hL)==0 then XGUIEng.ShowWidget(gB,0)return end;if Logic.IsBuildingBeingUpgraded(hL)or Logic.IsBuildingBeingKnockedDown(hL)or Logic.BuildingDoWorkersStrike(hL)==true or Logic.IsBurning(hL)then XGUIEng.DisableButton(gB,1)else XGUIEng.DisableButton(gB,0)end;SetIcon(gB,{4,13})if Logic.IsBuildingStopped(hL)then SetIcon(gB,{4,12})end end;Lib.Register("module/ui/UIBuilding_Text")Lib.UIBuilding.Text={}Lib.UIBuilding.Text.ExtraButton={Downgrade={Normal={Title={de="Rückbau",en="Downgrade",fr="Déconstruction"},Text={de="- Reißt eine Ausbaustufe ab!",en="- Demolishes one upgrade level!",fr="- Réduit le niveau du bâtiment d'un niveau!"},Error="UI_ButtonDisabled/AbilityNotReady"}},SingleReserve={Normal={Title="UI_ObjectNames/BuildingsMenuStopConsumption",Text="UI_ObjectDescription/BuildingsMenuStopConsumption",Error="UI_ButtonDisabled/AbilityNotReady"},Stopped={Title="UI_ObjectNames/BuildingsMenuResumeConsumption",Text="UI_ObjectDescription/BuildingsMenuResumeConsumption",Error="UI_ButtonDisabled/AbilityNotReady"}},SingleStop={Normal={Title="UI_ObjectNames/BuildingsMenuStopProduction",Text={de="- Gebäude produziert keine Waren",en="- Building does not produce goods",fr="- le bâtiment ne produit pas de biens"},Error="UI_ButtonDisabled/AbilityNotReady"},Stopped={Title="UI_ObjectNames/BuildingsMenuResumeProduction",Text={de="- Gebäude produzieren Waren",en="- Building produces goods",fr="- Le bâtiment produit des biens"},Error="UI_ButtonDisabled/AbilityNotReady"}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/ui/UIBuilding_API")function AddBuildingButtonAtPosition(hQ,hR,hS,hT,hU)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local hV=this:AddButtonBinding(0,hQ,hR,hS,hT,hU)Lib.UIBuilding.ReleaseContext()return hV end;API.AddBuildingButtonAtPosition=AddBuildingButtonAtPosition;function AddBuildingButton(hS,hT,hU)return AddBuildingButtonAtPosition(nil,nil,hS,hT,hU)end;API.AddBuildingButton=AddBuildingButton;function AddBuildingButtonByTypeAtPosition(i,hQ,hR,hS,hT,hU)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local hV=this:AddButtonBinding(i,hQ,hR,hS,hT,hU)Lib.UIBuilding.ReleaseContext()return hV end;API.AddBuildingButtonByTypeAtPosition=AddBuildingButtonByTypeAtPosition;function AddBuildingButtonByType(i,hS,hT,hU)return AddBuildingButtonByTypeAtPosition(i,nil,nil,hS,hT,hU)end;API.AddBuildingButtonByType=AddBuildingButtonByType;function AddBuildingButtonByEntityAtPosition(dD,hQ,hR,hS,hT,hU)assert(IsLocalScript())Lib.UIBuilding.AquireContext()local hV=this:AddButtonBinding(dD,hQ,hR,hS,hT,hU)Lib.UIBuilding.ReleaseContext()return hV end;API.AddBuildingButtonByEntityAtPosition=AddBuildingButtonByEntityAtPosition;function AddBuildingButtonByEntity(dD,hS,hT,hU)return AddBuildingButtonByEntityAtPosition(dD,nil,nil,hS,hT,hU)end;API.AddBuildingButtonByEntity=AddBuildingButtonByEntity;function DropBuildingButton(aM)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(0,aM)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButton=DropBuildingButton;function DropBuildingButtonFromType(i,aM)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(i,aM)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButtonFromType=DropBuildingButtonFromType;function DropBuildingButtonFromEntity(dD,aM)assert(IsLocalScript())Lib.UIBuilding.AquireContext()this:RemoveButtonBinding(dD,aM)Lib.UIBuilding.ReleaseContext()end;API.DropBuildingButtonFromEntity=DropBuildingButtonFromEntity;function ActivateDowngradeBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.Downgrade:Activate()]])end;API.ActivateDowngradeBuilding=ActivateDowngradeBuilding;function DeactivateDowngradeBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.Downgrade:Deactivate()]])end;API.DeactivateDowngradeBuilding=DeactivateDowngradeBuilding;function SetDowngradeBuildingCost(hM)error(not IsLocalScript(),"Can only be used in global script!")error(type(hM)=="number","Costs must be a number!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.Downgrade:SetCost(%d)]],hM or 0)end;API.SetDowngradeCosts=SetDowngradeBuildingCost;API.SetDowngradeBuildingCost=SetDowngradeBuildingCost;function ActivateSingleReserveBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.SingleReserve:Activate()]])end;API.ActivateSingleReserveBuilding=ActivateSingleReserveBuilding;function DeactivateSingleReserveBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.SingleReserve:Deactivate()]])end;API.DeactivateSingleReserveBuilding=DeactivateSingleReserveBuilding;function ActivateSingleStopBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.SingleStop:Activate()]])end;API.ActivateSingleStopBuilding=ActivateSingleStopBuilding;function DeactivateSingleStopBuilding()error(not IsLocalScript(),"Can only be used in global script!")ExecuteLocal([[Lib.UIBuilding.Local.ExtraButton.SingleStop:Deactivate()]])end;API.DeactivateSingleStopBuilding=DeactivateSingleStopBuilding;API.UseDowngrade=function(e2)if e2 then ActivateDowngradeBuilding()return end;DeactivateDowngradeBuilding()end;API.UseSingleReserve=function(e2)if e2 then ActivateSingleReserveBuilding()return end;DeactivateSingleReserveBuilding()end;API.UseSingleStop=function(e2)if e2 then ActivateSingleStopBuilding()return end;DeactivateSingleStopBuilding()end;Lib.UIBuilding=Lib.UIBuilding or{}Lib.UIBuilding.Name="UIBuilding"Lib.UIBuilding.CinematicEvents={}Lib.UIBuilding.Global={}Lib.UIBuilding.Local={BuildingButtons={BindingCounter=0,Bindings={},Configuration={["BuyAmmunitionCart"]={TypeExclusion="^B_.*StoreHouse",OriginalPosition=nil,Bind=nil},["BuyBattallion"]={TypeExclusion="^B_[CB]a[sr][tr][la][ec]",OriginalPosition=nil,Bind=nil},["PlaceField"]={TypeExclusion="^B_.*[BFH][aei][erv][kme]",OriginalPosition=nil,Bind=nil},["StartFestival"]={TypeExclusion="^B_Marketplace",OriginalPosition=nil,Bind=nil},["StartTheatrePlay"]={TypeExclusion="^B_Theatre",OriginalPosition=nil,Bind=nil},["UpgradeTurret"]={TypeExclusion="^B_WallTurret",OriginalPosition=nil,Bind=nil},["BuyBatteringRamCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuyCatapultCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil},["BuySiegeTowerCart"]={TypeExclusion="^B_SiegeEngineWorkshop",OriginalPosition=nil,Bind=nil}}}}Lib.Require("core/Core")Lib.Require("module/ui/UIBuilding_API")Lib.Require("module/ui/UIBuilding_Text")Lib.Require("module/ui/UIBuilding_Buttons")Lib.Register("module/ui/UIBuilding")function Lib.UIBuilding.Global:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self.ExtraButton.Downgrade:InitEvents()self.ExtraButton.SingleReserve:InitEvents()self.ExtraButton.SingleStop:InitEvents()end;self.IsInstalled=true end;function Lib.UIBuilding.Global:OnSaveGameLoaded()end;function Lib.UIBuilding.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.StartUpgradeClicked then SendReportToLocal(aM,...)elseif aM==Report.CancelUpgradeClicked then SendReportToLocal(aM,...)elseif aM==Report.FestivalClicked then SendReportToLocal(aM,...)elseif aM==Report.SermonClicked then SendReportToLocal(aM,...)elseif aM==Report.TheatrePlayClicked then SendReportToLocal(aM,...)end;self.ExtraButton.Downgrade:ExtraButtonOnReportReceived(aM,...)self.ExtraButton.SingleReserve:ExtraButtonOnReportReceived(aM,...)self.ExtraButton.SingleStop:ExtraButtonOnReportReceived(aM,...)end;function Lib.UIBuilding.Local:Initialize()if not self.IsInstalled then Report.CancelUpgradeClicked=CreateReport("Event_CancelUpgradeClicked")Report.StartUpgradeClicked=CreateReport("Event_StartUpgradeClicked")Report.FestivalClicked=CreateReport("Event_FestivalClicked")Report.SermonClicked=CreateReport("Event_SermonClicked")Report.TheatrePlayClicked=CreateReport("Event_TheatrePlayClicked")self:InitBackupPositions()self:OverrideOnSelectionChanged()self:OverrideBuyAmmunitionCart()self:OverrideBuyBattalion()self:OverrideBuySiegeEngineCart()self:OverridePlaceField()self:OverrideStartFestival()self:OverrideStartTheatrePlay()self:OverrideUpgradeTurret()self:OverrideUpgradeBuilding()self:OverrideStartSermon()self.ExtraButton.Downgrade:InitEvents()self.ExtraButton.SingleReserve:InitEvents()self.ExtraButton.SingleStop:InitEvents()end;self.IsInstalled=true end;function Lib.UIBuilding.Local:OnSaveGameLoaded()end;function Lib.UIBuilding.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end;self.ExtraButton.Downgrade:ExtraButtonOnReportReceived(aM,...)self.ExtraButton.SingleReserve:ExtraButtonOnReportReceived(aM,...)self.ExtraButton.SingleStop:ExtraButtonOnReportReceived(aM,...)end;function Lib.UIBuilding.Local:OverrideOnSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.UIBuilding.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.UIBuilding.Local:UnbindButtons()Lib.UIBuilding.Local:BindButtons(GUI.GetSelectedEntity())end end;function Lib.UIBuilding.Local:OverrideBuyAmmunitionCart()self.Orig_BuyAmmunitionCartClicked=GUI_BuildingButtons.BuyAmmunitionCartClicked;GUI_BuildingButtons.BuyAmmunitionCartClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartClicked()end;hV.Action(d8,w)end;Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate=GUI_BuildingButtons.BuyAmmunitionCartUpdate;GUI_BuildingButtons.BuyAmmunitionCartUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then SetIcon(d8,{10,4})XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_BuyAmmunitionCartUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideBuyBattalion()self.Orig_BuyBattalionClicked=GUI_BuildingButtons.BuyBattalionClicked;GUI_BuildingButtons.BuyBattalionClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_BuyBattalionClicked()end;hV.Action(d8,w)end;self.Orig_BuyBattalionMouseOver=GUI_BuildingButtons.BuyBattalionMouseOver;GUI_BuildingButtons.BuyBattalionMouseOver=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV;if Lib.UIBuilding.Local.BuildingButtons.Configuration[fs]then hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind end;if not hV then return Lib.UIBuilding.Local.Orig_BuyBattalionMouseOver()end;hV.Tooltip(d8,w)end;self.Orig_BuyBattalionUpdate=GUI_BuildingButtons.BuyBattalionUpdate;GUI_BuildingButtons.BuyBattalionUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_BuyBattalionUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverridePlaceField()self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_PlaceFieldClicked()end;hV.Action(d8,w)end;self.Orig_PlaceFieldMouseOver=GUI_BuildingButtons.PlaceFieldMouseOver;GUI_BuildingButtons.PlaceFieldMouseOver=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_PlaceFieldMouseOver()end;hV.Tooltip(d8,w)end;self.Orig_PlaceFieldUpdate=GUI_BuildingButtons.PlaceFieldUpdate;GUI_BuildingButtons.PlaceFieldUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_PlaceFieldUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideStartFestival()self.Orig_StartKnightsPromotionCelebration=StartKnightsPromotionCelebration;StartKnightsPromotionCelebration=function(n,hW,hX)Lib.UIBuilding.Local.Orig_StartKnightsPromotionCelebration(n,hW,hX)SendReportToGlobal(Report.FestivalClicked,n,1)end;GUI_BuildingButtons.StartFestivalClicked=function(hY)local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then local q=GUI.GetPlayerID()local hd={Logic.GetFestivalCost(q,hY)}local hZ,h_=AreCostsAffordable(hd)if w~=Logic.GetMarketplace(q)then return end;if hZ==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartFestival(q,hY)StartEventMusic(MusicSystem.EventFestivalMusic,q)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightSong)GUI.AddBuff(Buffs.Buff_Festival)SendReportToGlobal(Report.FestivalClicked,q,0)else Message(h_)end;return end;hV.Action(d8,w)end;self.Orig_StartFestivalMouseOver=GUI_BuildingButtons.StartFestivalMouseOver;GUI_BuildingButtons.StartFestivalMouseOver=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_StartFestivalMouseOver()end;hV.Tooltip(d8,w)end;self.Orig_StartFestivalUpdate=GUI_BuildingButtons.StartFestivalUpdate;GUI_BuildingButtons.StartFestivalUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then SetIcon(d8,{4,15})XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_StartFestivalUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideStartTheatrePlay()GUI_BuildingButtons.StartTheatrePlayClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then local q=GUI.GetPlayerID()local bj=Logic.GetGoodTypeOnOutStockByIndex(w,0)local c1=Logic.GetMaxAmountOnStock(w)local hd={bj,c1}local hZ,h_=AreCostsAffordable(hd)if Logic.CanStartTheatrePlay(w)==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.StartTheatrePlay(w)SendReportToGlobal(Report.TheatrePlayClicked,q)elseif hZ==false then Message(h_)end;return end;hV.Action(d8,w)end;self.Orig_StartTheatrePlayMouseOver=GUI_BuildingButtons.StartTheatrePlayMouseOver;GUI_BuildingButtons.StartTheatrePlayMouseOver=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_StartTheatrePlayMouseOver()end;hV.Tooltip(d8,w)end;self.Orig_StartTheatrePlayUpdate=GUI_BuildingButtons.StartTheatrePlayUpdate;GUI_BuildingButtons.StartTheatrePlayUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then SetIcon(d8,{16,2})XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_StartTheatrePlayUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideUpgradeTurret()self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_UpgradeTurretClicked()end;hV.Action(d8,w)end;self.Orig_UpgradeTurretMouseOver=GUI_BuildingButtons.UpgradeTurretMouseOver;GUI_BuildingButtons.UpgradeTurretMouseOver=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then return Lib.UIBuilding.Local.Orig_UpgradeTurretMouseOver()end;hV.Tooltip(d8,w)end;self.Orig_UpgradeTurretUpdate=GUI_BuildingButtons.UpgradeTurretUpdate;GUI_BuildingButtons.UpgradeTurretUpdate=function()local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind;if not hV then XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_UpgradeTurretUpdate()end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideBuySiegeEngineCart()self.Orig_BuySiegeEngineCartClicked=GUI_BuildingButtons.BuySiegeEngineCartClicked;GUI_BuildingButtons.BuySiegeEngineCartClicked=function(i0)local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV;if fs=="BuyCatapultCart"or fs=="BuySiegeTowerCart"or fs=="BuyBatteringRamCart"then hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind end;if not hV then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartClicked(i0)end;hV.Action(d8,w)end;self.Orig_BuySiegeEngineCartMouseOver=GUI_BuildingButtons.BuySiegeEngineCartMouseOver;GUI_BuildingButtons.BuySiegeEngineCartMouseOver=function(i0,i1)local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV;if fs=="BuyCatapultCart"or fs=="BuySiegeTowerCart"or fs=="BuyBatteringRamCart"then hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind end;if not hV then return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartMouseOver(i0,i1)end;hV.Tooltip(d8,w)end;self.Orig_BuySiegeEngineCartUpdate=GUI_BuildingButtons.BuySiegeEngineCartUpdate;GUI_BuildingButtons.BuySiegeEngineCartUpdate=function(i0)local d8=XGUIEng.GetCurrentWidgetID()local fs=XGUIEng.GetWidgetNameByID(d8)local w=GUI.GetSelectedEntity()local hV;if fs=="BuyCatapultCart"or fs=="BuySiegeTowerCart"or fs=="BuyBatteringRamCart"then hV=Lib.UIBuilding.Local.BuildingButtons.Configuration[fs].Bind end;if not hV then if fs=="BuyBatteringRamCart"then SetIcon(d8,{9,2})elseif fs=="BuySiegeTowerCart"then SetIcon(d8,{9,3})elseif fs=="BuyCatapultCart"then SetIcon(d8,{9,1})end;XGUIEng.ShowWidget(d8,1)XGUIEng.DisableButton(d8,0)return Lib.UIBuilding.Local.Orig_BuySiegeEngineCartUpdate(i0)end;hV.Update(d8,w)end end;function Lib.UIBuilding.Local:OverrideUpgradeBuilding()GUI_BuildingButtons.UpgradeClicked=function()local d8=XGUIEng.GetCurrentWidgetID()local w=GUI.GetSelectedEntity()if Logic.CanCancelUpgradeBuilding(w)then Sound.FXPlay2DSound("ui\\menu_click")GUI.CancelBuildingUpgrade(w)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/BuildingButtons",1)SendReportToGlobal(Report.CancelUpgradeClicked,w,GUI.GetPlayerID())return end;local hd=GUI_BuildingButtons.GetUpgradeCosts()local hZ,h_=AreCostsAffordable(hd)if hZ==true then Sound.FXPlay2DSound("ui\\menu_click")GUI.UpgradeBuilding(w,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightWisdom)if d8~=0 then SaveButtonPressed(d8)end;SendReportToGlobal(Report.StartUpgradeClicked,w,GUI.GetPlayerID())else Message(h_)end end end;function Lib.UIBuilding.Local:OverrideStartSermon()function GUI_BuildingButtons.StartSermonClicked()local q=GUI.GetPlayerID()if Logic.CanSermonBeActivated(q)then GUI.ActivateSermon(q)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightHealing)GUI.AddBuff(Buffs.Buff_Sermon)local i2=Logic.GetCathedral(q)local E,F=Logic.GetEntityPosition(i2)local G=0;Sound.FXPlay3DSound("buildings\\building_start_sermon",E,F,G)SendReportToGlobal(Report.SermonClicked,GUI.GetPlayerID())end end end;function Lib.UIBuilding.Local:InitBackupPositions()for g,h in pairs(self.BuildingButtons.Configuration)do local E,F=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g)self.BuildingButtons.Configuration[g].OriginalPosition={E,F}end end;function Lib.UIBuilding.Local:GetButtonsForOverwrite(aM,aS)local i3={}local m=Logic.GetEntityType(aM)local j=Logic.GetEntityTypeName(m)for g,h in pairs(self.BuildingButtons.Configuration)do if#i3==aS then break end;if not j:find(h.TypeExclusion)then table.insert(i3,g)end end;assert(#i3==aS)table.sort(i3)return i3 end;function Lib.UIBuilding.Local:AddButtonBinding(i,hQ,hR,i4,i5,i6)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;if#self.BuildingButtons.Bindings[i]<6 then self.BuildingButtons.BindingCounter=self.BuildingButtons.BindingCounter+1;table.insert(self.BuildingButtons.Bindings[i],{ID=self.BuildingButtons.BindingCounter,Position={hQ,hR},Action=i4,Tooltip=i5,Update=i6})return self.BuildingButtons.BindingCounter end;return 0 end;function Lib.UIBuilding.Local:RemoveButtonBinding(i,aM)if not self.BuildingButtons.Bindings[i]then self.BuildingButtons.Bindings[i]={}end;for f=#self.BuildingButtons.Bindings[i],1,-1 do if self.BuildingButtons.Bindings[i][f].ID==aM then table.remove(self.BuildingButtons.Bindings[i],f)end end end;function Lib.UIBuilding.Local:BindButtons(aM)if aM==nil or aM==0 or Logic.IsBuilding(aM)==0 and not Logic.IsWall(aM)then return self:UnbindButtons()end;local Name=Logic.GetEntityName(aM)local m=Logic.GetEntityType(aM)local i7=self:GetButtonsForOverwrite(aM,6)local i8={}if self.BuildingButtons.Bindings[Name]and#self.BuildingButtons.Bindings[Name]>0 then for f=1,#self.BuildingButtons.Bindings[Name]do table.insert(i8,self.BuildingButtons.Bindings[Name][f])end end;if self.BuildingButtons.Bindings[m]and#self.BuildingButtons.Bindings[m]>0 then for f=1,#self.BuildingButtons.Bindings[m]do table.insert(i8,self.BuildingButtons.Bindings[m][f])end end;if self.BuildingButtons.Bindings[0]and#self.BuildingButtons.Bindings[0]>0 then for f=1,#self.BuildingButtons.Bindings[0]do table.insert(i8,self.BuildingButtons.Bindings[0][f])end end;for f=1,#i8 do if f>6 then break end;local i9=i7[f]self.BuildingButtons.Configuration[i9].Bind=i8[f]XGUIEng.ShowWidget("/InGame/Root/Normal/BuildingButtons/"..i9,1)XGUIEng.DisableButton("/InGame/Root/Normal/BuildingButtons/"..i9,0)local f2=i8[f].Position[1]local f3=i8[f].Position[2]if not f2 or not f3 then local ia={15,296}f2=ia[1]+64*(f-1)f3=ia[2]end;XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..i9,f2,f3)end end;function Lib.UIBuilding.Local:UnbindButtons()for g,h in pairs(self.BuildingButtons.Configuration)do local R=self.BuildingButtons.Configuration[g].OriginalPosition;if R then XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/BuildingButtons/"..g,R[1],R[2])end;self.BuildingButtons.Configuration[g].Bind=nil end end;RegisterModule(Lib.UIBuilding.Name)Lib.Register("module/city/Construction_Text")Lib.Construction=Lib.Construction or{}Lib.Construction.Text={NoKnockdown={de="Das kann nicht abgerissen werden!",en="This cannot be demolished!",fr="Cela ne peut pas être démoli!"},NoRoad={de="Straßen sind hier nicht möglich!",en="Roads are not possible here!",fr="Les routes ne sont pas possibles ici!"},NoWall={de="Befästigungen sind hier nicht möglich!",en="Ramparts are not possible here!",fr="Les confirmations ne sont pas possibles ici!"},NoWallGate={de="Ein anderes Torhaus ist zu nah!",en="Another gatehouse is too close!",fr="Une autre guérite est trop proche!"},NoBallista={de="Zu nahe an anderem Mauerkatapult!",en="To close to another ballista!",fr="A rapprocher d'une autre baliste!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/Construction_API")function UseForceBallistaDistance(e2)if not IsLocalScript()then ExecuteLocal("UseForceBallistaDistance(%s)",tostring(e2==true))end;Lib.Construction.AquireContext()this.Construction.ForceBallistaDistance=e2==true;Lib.Construction.ReleaseContext()end;API.UseForceBallistaDistance=UseForceBallistaDistance;function CustomRuleConstructBuilding(n,ib,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructBuilding(n,ib,unpack(arg))end;API.CustomRuleConstructBuilding=CustomRuleConstructBuilding;function CustomRuleConstructRoad(n,ib,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructRoad(n,ib,unpack(arg))end;API.CustomRuleConstructRoad=CustomRuleConstructRoad;function CustomRuleConstructWall(n,ib,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleConstructWall(n,ib,unpack(arg))end;API.CustomRuleConstructWall=CustomRuleConstructWall;function CustomRuleKnockdownBuilding(n,ib,...)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:CustomRuleKnockdownBuilding(n,ib,unpack(arg))end;API.CustomRuleKnockdownBuilding=CustomRuleKnockdownBuilding;function WhitelistConstructTypeInArea(n,i,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInArea(n,i,hQ,hR,ic)end;API.WhitelistConstructTypeInArea=WhitelistConstructTypeInArea;function WhitelistConstructCategoryInArea(n,bv,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInArea(n,bv,hQ,hR,ic)end;API.WhitelistConstructCategoryInArea=WhitelistConstructCategoryInArea;function WhitelistConstructTypeInTerritory(n,i,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructTypeInTerritory(n,i,id)end;API.WhitelistConstructTypeInTerritory=WhitelistConstructTypeInTerritory;function WhitelistConstructCategoryInTerritory(n,bv,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructCategoryInTerritory(n,bv,id)end;API.WhitelistConstructCategoryInTerritory=WhitelistConstructCategoryInTerritory;function BlacklistConstructTypeInArea(n,i,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInArea(n,i,hQ,hR,ic)end;API.BlacklistConstructTypeInArea=BlacklistConstructTypeInArea;function BlacklistConstructCategoryInArea(n,bv,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInArea(n,bv,hQ,hR,ic)end;API.BlacklistConstructCategoryInArea=BlacklistConstructCategoryInArea;function BlacklistConstructTypeInTerritory(n,i,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructTypeInTerritory(n,i,id)end;API.BlacklistConstructTypeInTerritory=BlacklistConstructTypeInTerritory;function BlacklistConstructCategoryInTerritory(n,bv,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructCategoryInTerritory(n,bv,id)end;API.BlacklistConstructCategoryInTerritory=BlacklistConstructCategoryInTerritory;function WhitelistConstructRoadInArea(n,ie,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInArea(n,ie,hQ,hR,ic)end;API.WhitelistConstructRoadInArea=WhitelistConstructRoadInArea;function WhitelistConstructWallInArea(n,ig,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInArea(n,ig,hQ,hR,ic)end;API.WhitelistConstructWallInArea=WhitelistConstructWallInArea;function WhitelistConstructRoadInTerritory(n,ie,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructRoadInTerritory(n,ie,id)end;API.WhitelistConstructRoadInTerritory=WhitelistConstructRoadInTerritory;function WhitelistConstructWallInTerritory(n,ig,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistConstructWallInTerritory(n,ig,id)end;API.WhitelistConstructWallInTerritory=WhitelistConstructWallInTerritory;function BlacklistConstructRoadInArea(n,ie,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInArea(n,ie,hQ,hR,ic)end;API.BlacklistConstructRoadInArea=BlacklistConstructRoadInArea;function BlacklistConstructWallInArea(n,ig,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInArea(n,ig,hQ,hR,ic)end;API.BlacklistConstructWallInArea=BlacklistConstructWallInArea;function BlacklistConstructRoadInTerritory(n,ie,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructRoadInTerritory(n,ie,id)end;API.BlacklistConstructRoadInTerritory=BlacklistConstructRoadInTerritory;function BlacklistConstructWallInTerritory(n,ig,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistConstructWallInTerritory(n,ig,id)end;API.BlacklistConstructWallInTerritory=BlacklistConstructWallInTerritory;function WhitelistKnockdownTypeInArea(n,i,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInArea(n,i,hQ,hR,ic)end;API.WhitelistKnockdownTypeInArea=WhitelistKnockdownTypeInArea;function WhitelistKnockdownCategoryInArea(n,bv,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInArea(n,bv,hQ,hR,ic)end;API.WhitelistKnockdownCategoryInArea=WhitelistKnockdownCategoryInArea;function WhitelistKnockdownTypeInTerritory(n,i,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(n,i,id)end;API.WhitelistKnockdownTypeInTerritory=WhitelistKnockdownTypeInTerritory;function WhitelistKnockdownCategoryInTerritory(n,bv,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(n,bv,id)end;API.WhitelistKnockdownCategoryInTerritory=WhitelistKnockdownCategoryInTerritory;function BlacklistKnockdownTypeInArea(n,i,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInArea(n,i,hQ,hR,ic)end;API.BlacklistKnockdownTypeInArea=BlacklistKnockdownTypeInArea;function BlacklistKnockdownCategoryInArea(n,bv,hQ,hR,ic)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInArea(n,bv,hQ,hR,ic)end;API.BlacklistKnockdownCategoryInArea=BlacklistKnockdownCategoryInArea;function BlacklistKnockdownTypeInTerritory(n,i,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(n,i,id)end;API.BlacklistKnockdownTypeInTerritory=BlacklistKnockdownTypeInTerritory;function BlacklistKnockdownCategoryInTerritory(n,bv,id)assert(not IsLocalScript(),"Can not be used in local script!")return Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(n,bv,id)end;API.BlacklistKnockdownCategoryInTerritory=BlacklistKnockdownCategoryInTerritory;Lib.Construction=Lib.Construction or{}Lib.Construction.Name="Construction"Lib.Construction.Global={Construction={ForceBallistaDistance=false,Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={Index=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Construction.Local={Construction={ForceBallistaDistance=false,Restriction={BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={},RoadCustomRule={},RoadTerritoryBlacklist={},RoadAreaBlacklist={},RoadTerritoryWhitelist={},RoadAreaWhitelist={},WallCustomRule={},WallTerritoryBlacklist={},WallAreaBlacklist={},WallTerritoryWhitelist={},WallAreaWhitelist={}}},Knockdown={Restriction={LastSelectedBuildingType=0,LastSelectedRoadType=0,BuildingCustomRule={},BuildingTerritoryBlacklist={},BuildingAreaBlacklist={},BuildingTerritoryWhitelist={},BuildingAreaWhitelist={}}}}Lib.Require("comfort/GetCategoriesOfType")Lib.Require("comfort/GetDistance")Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/city/Construction_API")Lib.Require("module/city/Construction_Text")Lib.Register("module/city/Construction")function Lib.Construction.Global:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;Lib.Construction.Local=nil end;self.IsInstalled=true end;function Lib.Construction.Global:OnSaveGameLoaded()end;function Lib.Construction.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Global:WhitelistConstructTypeInArea(n,i,hQ,hR,ic)return self:ListConstructArea("BuildingAreaWhitelist",n,i,nil,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistConstructCategoryInArea(n,bv,hQ,hR,ic)return self:ListConstructArea("BuildingCateWhitelist",n,nil,bv,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistConstructTypeInTerritory(n,i,id)return self:ListConstructTerritory("BuildingTerritoryWhitelist",n,i,nil,id)end;function Lib.Construction.Global:WhitelistConstructCategoryInTerritory(n,bv,id)return self:ListConstructTerritory("BuildingTerritoryWhitelist",n,nil,bv,id)end;function Lib.Construction.Global:BlacklistConstructTypeInArea(n,i,hQ,hR,ic)return self:ListConstructArea("BuildingAreaBlacklist",n,i,nil,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistConstructCategoryInArea(n,bv,hQ,hR,ic)return self:ListConstructArea("BuildingAreaBlacklist",n,nil,bv,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistConstructTypeInTerritory(n,i,id)return self:ListConstructTerritory("BuildingTerritoryBlacklist",n,i,nil,id)end;function Lib.Construction.Global:BlacklistConstructCategoryInTerritory(n,bv,id)return self:ListConstructTerritory("BuildingTerritoryBlacklist",n,nil,bv,id)end;function Lib.Construction.Global:WhitelistConstructRoadInArea(n,ie,hQ,hR,ic)return self:ListConstructArea("RoadAreaWhitelist",n,ie,nil,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistConstructWallInArea(n,ig,hQ,hR,ic)return self:ListConstructArea("WallAreaWhitelist",n,ig,nil,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistConstructRoadInTerritory(n,ie,id)return self:ListConstructTerritory("RoadTerritoryWhitelist",n,ie,nil,id)end;function Lib.Construction.Global:WhitelistConstructWallInTerritory(n,ig,id)return self:ListConstructTerritory("WallTerritoryWhitelist",n,ig,nil,id)end;function Lib.Construction.Global:BlacklistConstructRoadInArea(n,ie,hQ,hR,ic)return self:ListConstructArea("RoadAreaBlacklist",n,ie,nil,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistConstructWallInArea(n,ig,hQ,hR,ic)return self:ListConstructArea("WallAreaBlacklist",n,ig,nil,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistConstructRoadInTerritory(n,ie,id)return self:ListConstructTerritory("RoadTerritoryBlacklist",n,ie,nil,id)end;function Lib.Construction.Global:BlacklistConstructWallInTerritory(n,ig,id)return self:ListConstructTerritory("WallTerritoryBlacklist",n,ig,nil,id)end;function Lib.Construction.Global:CustomRuleConstructBuilding(n,ib,...)return self:ListConstructCustom("BuildingCustomRule",n,ib,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructRoad(n,ib,...)return self:ListConstructCustom("RoadCustomRule",n,ib,unpack(arg))end;function Lib.Construction.Global:CustomRuleConstructWall(n,ib,...)return self:ListConstructCustom("WallCustomRule",n,ib,unpack(arg))end;function Lib.Construction.Global:ListConstructArea(a7,n,i,bv,hQ,hR,ic)local ar=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a7][n],{ID=ar,Category=bv,Type=i,Center={X=hQ,Y=hR},Area=ic})self:MirrorConstructionRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:ListConstructTerritory(a7,n,i,bv,id)local ar=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a7][n],{ID=ar,Category=bv,Type=i,Territory=id})self:MirrorConstructionRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:ListConstructCustom(a7,n,ih,...)local ar=self:GetNewRestrictionID()table.insert(self.Construction.Restriction[a7][n],{ID=ar,Function=ih,Arguments=arg})self:MirrorConstructionRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:GetNewRestrictionID()self.Construction.Restriction.Index=self.Construction.Restriction.Index+1;local ax=self.Construction.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Construction.Restriction.Index = %d]],ax)return ax end;function Lib.Construction.Global:MirrorConstructionRestrictionsToLocalScript()local ii=table.tostring(self.Construction.Restriction)ExecuteLocal([[Lib.Construction.Local.Construction.Restriction = %s]],ii)end;function Lib.Construction.Global:WhitelistKnockdownTypeInArea(n,i,hQ,hR,ic)return self:ListKnockdownArea("BuildingAreaWhitelist",n,i,nil,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInArea(n,bv,hQ,hR,ic)return self:ListKnockdownArea("BuildingAreaWhitelist",n,nil,bv,hQ,hR,ic)end;function Lib.Construction.Global:WhitelistKnockdownTypeInTerritory(n,i,id)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",n,i,nil,id)end;function Lib.Construction.Global:WhitelistKnockdownCategoryInTerritory(n,bv,id)return self:ListKnockdownTerritory("BuildingTerritoryWhitelist",n,nil,bv,id)end;function Lib.Construction.Global:BlacklistKnockdownTypeInArea(n,i,hQ,hR,ic)return self:ListKnockdownArea("BuildingAreaBlacklist",n,i,nil,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInArea(n,bv,hQ,hR,ic)return self:ListKnockdownArea("BuildingAreaBlacklist",n,nil,bv,hQ,hR,ic)end;function Lib.Construction.Global:BlacklistKnockdownTypeInTerritory(n,i,id)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",n,i,nil,id)end;function Lib.Construction.Global:BlacklistKnockdownCategoryInTerritory(n,bv,id)return self:ListKnockdownTerritory("BuildingTerritoryBlacklist",n,nil,bv,id)end;function Lib.Construction.Global:CustomRuleKnockdownBuilding(n,ib,...)return self:ListKnockdownCustom("BuildingCustomRule",n,ib,unpack(arg))end;function Lib.Construction.Global:ListKnockdownArea(a7,n,i,bv,hQ,hR,ic)local ar=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a7][n],{ID=ar,Category=bv,Type=i,Center={X=hQ,Y=hR},Area=ic})self:MirrorKnockdownRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:ListKnockdownTerritory(a7,n,i,bv,id)local ar=self:GetNewProtectionID()table.insert(self.Knockdown.Restriction[a7][n],{ID=ar,Category=bv,Type=i,Territory=id})self:MirrorKnockdownRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:ListKnockdownCustom(a7,n,ih,...)local ar=self:GetNewRestrictionID()table.insert(self.Knockdown.Restriction[a7][n],{ID=ar,Function=ih,Arguments=arg})self:MirrorKnockdownRestrictionsToLocalScript()return ar end;function Lib.Construction.Global:GetNewProtectionID()self.Knockdown.Restriction.Index=self.Knockdown.Restriction.Index+1;local ax=self.Knockdown.Restriction.Index;ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction.Index = %d]],ax)return ax end;function Lib.Construction.Global:MirrorKnockdownRestrictionsToLocalScript()local ii=table.tostring(self.Knockdown.Restriction)ExecuteLocal([[Lib.Construction.Local.Knockdown.Restriction = %s]],ii)end;function Lib.Construction.Global:IsConstructionAllowed(n,i,hQ,hR)local ij=Logic.GetTerritoryAtPosition(hQ,hR)local k=GetCategoriesOfType(i)local ik=self.Construction.Restriction.BuildingTerritoryWhitelist[n]if#ik>0 then for g,h in pairs(ik)do if(h.Type==i or table.contains(k,h.Category))and h.Territory==ij then return true end end;return false end;local il=self.Construction.Restriction.BuildingAreaWhitelist[n]if#il>0 then for g,h in pairs(il)do if(h.Type==i or table.contains(k,h.Category))and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then return true end end;return false end;local im=self.Construction.Restriction.BuildingTerritoryBlacklist[n]for g,h in pairs(im)do if(h.Type==i or table.contains(k,h.Category))and h.Territory==ij then return false end end;local io=self.Construction.Restriction.BuildingAreaBlacklist[n]for g,h in pairs(io)do if(h.Type==i or table.contains(k,h.Category))and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then return false end end;local ip=self.Construction.Restriction.BuildingCustomRule[n]for g,h in pairs(ip)do if _G[h.Function]and not _G[h.Function](n,i,hQ,hR,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Global:OverwriteGameCallbacks()self.Orig_GameCallback_CanPlayerPlaceBuilding=GameCallback_CanPlayerPlaceBuilding;GameCallback_CanPlayerPlaceBuilding=function(n,i,hQ,hR)if Lib.Construction.Global:IsConstructionAllowed(n,i,hQ,hR)then return Lib.Construction.Global.Orig_GameCallback_CanPlayerPlaceBuilding(n,i,hQ,hR)end;return false end end;function Lib.Construction.Local:Initialize()if not self.IsInstalled then for f=1,8 do self.Construction.Restriction.BuildingCustomRule[f]={}self.Construction.Restriction.BuildingTerritoryBlacklist[f]={}self.Construction.Restriction.BuildingAreaBlacklist[f]={}self.Construction.Restriction.BuildingTerritoryWhitelist[f]={}self.Construction.Restriction.BuildingAreaWhitelist[f]={}self.Construction.Restriction.RoadCustomRule[f]={}self.Construction.Restriction.RoadTerritoryBlacklist[f]={}self.Construction.Restriction.RoadAreaBlacklist[f]={}self.Construction.Restriction.RoadTerritoryWhitelist[f]={}self.Construction.Restriction.RoadAreaWhitelist[f]={}self.Construction.Restriction.WallCustomRule[f]={}self.Construction.Restriction.WallTerritoryBlacklist[f]={}self.Construction.Restriction.WallAreaBlacklist[f]={}self.Construction.Restriction.WallTerritoryWhitelist[f]={}self.Construction.Restriction.WallAreaWhitelist[f]={}self.Knockdown.Restriction.BuildingCustomRule[f]={}self.Knockdown.Restriction.BuildingTerritoryBlacklist[f]={}self.Knockdown.Restriction.BuildingAreaBlacklist[f]={}self.Knockdown.Restriction.BuildingTerritoryWhitelist[f]={}self.Knockdown.Restriction.BuildingAreaWhitelist[f]={}end;self:OverrideBuildButtonClicked()self:OverridePlacementUpdate()Lib.Construction.Global=nil end;self.IsInstalled=true end;function Lib.Construction.Local:OnSaveGameLoaded()end;function Lib.Construction.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self:OverwriteGameCallbacks()self.LoadscreenClosed=true end end;function Lib.Construction.Local:IsKnockdownAllowed(n,at,dE)local m=Logic.GetEntityType(at)local E,F,G=Logic.EntityGetPos(at)local ij=GetTerritoryUnderEntity(at)local k=GetCategoriesOfType(m)local ik=self.Knockdown.Restriction.BuildingTerritoryWhitelist[n]if#ik>0 then for g,h in pairs(ik)do if(h.Type==m or table.contains(k,h.Category))and h.Territory==ij then return true end end;return false end;local il=self.Knockdown.Restriction.BuildingAreaWhitelist[n]if#il>0 then for g,h in pairs(il)do if(h.Type==m or table.contains(k,h.Category))and h.Center and GetDistance({X=E,Y=F},h.Center)<=h.Area then return true end end;return false end;local im=self.Knockdown.Restriction.BuildingTerritoryBlacklist[n]for g,h in pairs(im)do if(h.Type==m or table.contains(k,h.Category))and h.Territory==ij then return false end end;local io=self.Knockdown.Restriction.BuildingAreaBlacklist[n]for g,h in pairs(io)do if(h.Type==m or table.contains(k,h.Category))and h.Center and GetDistance({X=E,Y=F},h.Center)<=h.Area then return false end end;local ip=self.Knockdown.Restriction.BuildingCustomRule[n]for g,h in pairs(ip)do if _G[h.Function]and not _G[h.Function](n,at,E,F,unpack(h.Arguments))then return false end end;return true end;function Lib.Construction.Local:OverwriteGameCallbacks()self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(hL,dE)local q=Logic.EntityGetPlayer(hL)if not Lib.Construction.Local:IsKnockdownAllowed(q,hL,dE)then Message(Localize(Lib.Construction.Text.NoKnockdown))GUI.CancelBuildingKnockDown(hL)return end;Lib.Construction.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(hL,dE)end end;function Lib.Construction.Local:OverrideBuildButtonClicked()self.Orig_BuildClicked=GUI_Construction.BuildClicked;GUI_Construction.BuildClicked=function(iq)Lib.Construction.Local.LastSelectedBuildingType=iq;Lib.Construction.Local.Orig_BuildClicked(iq)end;self.Orig_BuildStreetClicked=GUI_Construction.BuildStreetClicked;GUI_Construction.BuildStreetClicked=function(ir)ir=ir~=nil and ir or false;Lib.Construction.Local.LastSelectedRoadType=ir;Lib.Construction.Local.Orig_BuildStreetClicked(ir)end;self.Orig_BuildWallClicked=GUI_Construction.BuildWallClicked;GUI_Construction.BuildWallClicked=function(iq)if iq==nil then iq=GetUpgradeCategoryForClimatezone("WallSegment")end;Lib.Construction.Local.LastSelectedBuildingType=iq;Lib.Construction.Local.Orig_BuildWallClicked(iq)end;self.Orig_BuildWallGateClicked=GUI_Construction.BuildWallGateClicked;GUI_Construction.BuildWallGateClicked=function(iq)if iq==nil then iq=GetUpgradeCategoryForClimatezone("WallGate")end;Lib.Construction.Local.LastSelectedBuildingType=iq;Lib.Construction.Local.Orig_BuildWallGateClicked(iq)end;self.Orig_PlaceFieldClicked=GUI_BuildingButtons.PlaceFieldClicked;GUI_BuildingButtons.PlaceFieldClicked=function()local cM=Logic.GetEntityType(GUI.GetSelectedEntity())Lib.Construction.Local.LastSelectedBuildingType=cM;Lib.Construction.Local.Orig_PlaceFieldClicked()end end;function Lib.Construction.Local:OverridePlacementUpdate()self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged=GameCallBack_GUI_ConstructWallSegmentCountChanged;GameCallBack_GUI_ConstructWallSegmentCountChanged=function(is,it)self.Orig_GameCallBack_GUI_ConstructWallSegmentCountChanged(is,it)Lib.Construction.Local:CancleConstructWallSegmentState(GUI.GetPlayerID(),is,it)end;self.Orig_GameCallBack_GUI_BuildRoadCostChanged=GameCallBack_GUI_BuildRoadCostChanged;GameCallBack_GUI_BuildRoadCostChanged=function(ae)self.Orig_GameCallBack_GUI_BuildRoadCostChanged(ae)Lib.Construction.Local:CancleConstructRoad(GUI.GetPlayerID(),ae)end;self.Orig_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()Lib.Construction.Local.Orig_PlacementUpdate()Lib.Construction.Local:CancleConstructWallGateState(GUI.GetPlayerID())end;self.Orig_UpgradeTurretClicked=GUI_BuildingButtons.UpgradeTurretClicked;GUI_BuildingButtons.UpgradeTurretClicked=function()local w=GUI.GetSelectedEntity()local q=Logic.EntityGetPlayer(w)local E,F,G=Logic.EntityGetPos(w)if Lib.Construction.Local:AreOtherBallistasToCloseToPosition(q,E,F,2500)then Message(Localize(Lib.Construction.Text.NoBallista))return end;Lib.Construction.Local.Orig_UpgradeTurretClicked()end end;function Lib.Construction.Local:AreOtherBallistasToCloseToPosition(n,iu,iv,iw)if self.Construction.ForceBallistaDistance then local ix,iy=Logic.GetPlayerEntitiesInArea(n,Entities.U_MilitaryBallista_BuildingSite,iu,iv,iw,1)local iz,iA=Logic.GetPlayerEntitiesInArea(n,Entities.U_MilitaryBallista,iu,iv,iw,1)return ix+iz>0 end;return false end;function Lib.Construction.Local:CancleConstructWallSegmentState(n,is,it)local iB=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType==3 then local hd={Logic.GetCostForWall(is,it,StartTurretX,StartTurretY,EndTurretX,EndTurretY)}if iB==2 and hd[1]and hd[2]>0 then local E,F=GUI.Debug_GetMapPositionUnderMouse()Lib.Construction.Local:CancleConstructWallState(n,self.LastSelectedBuildingType,E,F)end end end;function Lib.Construction.Local:CancleConstructWallGateState(n)local iB=GUI.GetCurrentStateID()if g_Construction.CurrentPlacementType==4 then if iB==3 then local E,F=GUI.Debug_GetMapPositionUnderMouse()Lib.Construction.Local:CancleConstructWallState(n,self.LastSelectedBuildingType,E,F)end end end;function Lib.Construction.Local:CancleConstructWallState(n,i,hQ,hR)local ij=Logic.GetTerritoryAtPosition(hQ or 1,hR or 1)local ik=self.Construction.Restriction.WallTerritoryWhitelist[n]if#ik>0 then for g,h in pairs(ik)do if h.Type==true then if string.find(Logic.GetEntityTypeName(i),"B_Wall")and h.Territory==ij then return end else if(i==Entities.B_PalisadeSegment or i==Entities.B_PalisadeGate)and h.Territory==ij then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local il=self.Construction.Restriction.WallAreaWhitelist[n]if#il>0 then for g,h in pairs(ik)do if h.Type==true then if string.find(Logic.GetEntityTypeName(i),"B_Wall")and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then return end else if(i==Entities.B_PalisadeSegment or i==Entities.B_PalisadeGate)and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then return end end end;self:CancelState(g_Construction.CurrentPlacementType)end;local im=self.Construction.Restriction.WallTerritoryBlacklist[n]if true then for g,h in pairs(im)do if h.Type==true then if string.find(Logic.GetEntityTypeName(i),"B_Wall")and h.Territory==ij then self:CancelState(g_Construction.CurrentPlacementType)return end else if(i==Entities.B_PalisadeSegment or i==Entities.B_PalisadeGate)and h.Territory==ij then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local io=self.Construction.Restriction.WallAreaBlacklist[n]if true then for g,h in pairs(io)do if h.Type==true then if string.find(Logic.GetEntityTypeName(i),"B_Wall")and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end else if(i==Entities.B_PalisadeSegment or i==Entities.B_PalisadeGate)and h.Center and GetDistance({X=hQ,Y=hR},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end end end;local ip=self.Construction.Restriction.WallCustomRule[n]for g,h in pairs(ip)do local iC=string.find(Logic.GetEntityTypeName(i),"B_Wall")~=nil;if _G[h.Function]and not _G[h.Function](n,iC,hQ,hR,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end;function Lib.Construction.Local:CancleConstructRoad(n,ae)local iB=GUI.GetCurrentStateID()local E,F=GUI.Debug_GetMapPositionUnderMouse()local ij=Logic.GetTerritoryAtPosition(E or 1,F or 1)if g_Construction.CurrentPlacementType==1 then if iB==5 and ae>0 then local iD=not self.LastSelectedRoadType;local ik=self.Construction.Restriction.RoadTerritoryWhitelist[n]if#ik>0 then for g,h in pairs(ik)do if h.Type==iD and h.Territory==ij then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local il=self.Construction.Restriction.RoadAreaWhitelist[n]if#il>0 then for g,h in pairs(il)do if h.Type==iD and h.Center and GetDistance({X=E,Y=F},h.Center)<=h.Area then return end end;self:CancelState(g_Construction.CurrentPlacementType)end;local im=self.Construction.Restriction.RoadTerritoryBlacklist[n]for g,h in pairs(im)do if h.Type==iD and h.Territory==ij then self:CancelState(g_Construction.CurrentPlacementType)return end end;local io=self.Construction.Restriction.RoadAreaBlacklist[n]for g,h in pairs(io)do if h.Type==iD and h.Center and GetDistance({X=E,Y=F},h.Center)<=h.Area then self:CancelState(g_Construction.CurrentPlacementType)return end end;local ip=self.Construction.Restriction.RoadCustomRule[n]for g,h in pairs(ip)do if _G[h.Function]and not _G[h.Function](n,iD,E,F,unpack(h.Arguments))then self:CancelState(g_Construction.CurrentPlacementType)return end end end end end;function Lib.Construction.Local:CancelState(iE)local bq=Lib.Construction.Text.NoWall;if iE==1 then bq=Lib.Construction.Text.NoRoad elseif iE==-1 then bq=Lib.Construction.Text.NoWallGate end;Message(Localize(bq))GUI.CancelState()end;RegisterModule(Lib.Construction.Name)Lib.Register("module/entity/NPC_Behavior")function Goal_NPC(iF,iG)return B_Goal_NPC:new(iF,iG)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(bh,bi)if bh==0 then self.NPC=bi elseif bh==1 then self.Hero=bi;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/NPC_API")function NpcCompose(ho)error(not IsLocalScript(),"NPC manipulated in local script.")error(type(ho)=="table","NPC must be a table.")error(ho.ScriptName~=nil,"NPC needs a script name.")error(IsExisting(ho.ScriptName),"Entity does not exist.")local iH=Lib.NPC.Global:GetNpc(ho.ScriptName)error(iH==nil or not iH.Active,"NPC already active.")error(not ho.Type or(ho.Type>=1 or ho.Type<=4),"NPC type is invalid.")return Lib.NPC.Global:CreateNpc(ho)end;API.NpcCompose=NpcCompose;function NpcDispose(ho)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(ho.ScriptName),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(ho.ScriptName)~=nil,"NPC must first be composed.")Lib.NPC.Global:DestroyNpc(ho)end;API.NpcDispose=NpcDispose;function NpcUpdate(ho)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(ho.ScriptName),"Entity does not exist.")error(Lib.NPC.Global:GetNpc(ho.ScriptName)~=nil,"NPC must first be composed.")Lib.NPC.Global:UpdateNpc(ho)end;API.NpcUpdate=NpcUpdate;function NpcIsActive(ho)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(ho.ScriptName),"Entity does not exist.")local iI=Lib.NPC.Global:GetNpc(ho.ScriptName)error(iI~=nil,"NPC was not found.")if iI.Active==true then return GetInteger(ho.ScriptName,CONST_SCRIPTING_VALUES.NPC)==6 end;return false end;API.NpcIsActive=NpcIsActive;function NpcTalkedTo(ho,iJ,n)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(ho.ScriptName),"Entity does not exist.")local iI=Lib.NPC.Global:GetNpc(ho.ScriptName)error(iI~=nil,"NPC was not found.")local iK=iI.TalkedTo~=nil and iI.TalkedTo~=0;if iJ and iK then iK=iI.TalkedTo==GetID(iJ)end;if n and iK then iK=Logic.EntityGetPlayer(iI.TalkedTo)==n end;return iK end;API.NpcTalkedTo=NpcTalkedTo;function NpcHasArrived(ho)error(not IsLocalScript(),"NPC manipulated in local script.")error(IsExisting(ho.ScriptName),"Entity does not exist.")local iI=Lib.NPC.Global:GetNpc(ho.ScriptName)error(iI~=nil,"NPC was not found.")if iI.FollowDestination then return iI.Arrived==true end;return false end;API.NpcHasArrived=NpcHasArrived;Lib.NPC=Lib.NPC or{}Lib.NPC.Name="NPC"Lib.NPC.Global={Interactions={},NPC={},UseMarker=true}Lib.NPC.Local={}Lib.NPC.Text={StartConversation={de="Gespräch beginnen",en="Start conversation",fr="Conversation"}}CONST_LAST_NPC_INTERACTED=0;CONST_LAST_HERO_INTERACTED=0;Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/LookAt")Lib.Require("comfort/Move")Lib.Require("core/Core")Lib.Require("module/entity/NPC_API")Lib.Require("module/entity/NPC_Behavior")Lib.Register("module/entity/NPC")function Lib.NPC.Global:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()RequestHiResJob(function()if Logic.GetTime()>1 then Lib.NPC.Global:InteractionTriggerController()end end)RequestJob(function()Lib.NPC.Global:InteractableMarkerController()Lib.NPC.Global:NpcFollowHeroController()end)Lib.NPC.Local=nil end;self.IsInstalled=true end;function Lib.NPC.Global:OnSaveGameLoaded()end;function Lib.NPC.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]self.Interactions[arg[1]]=self.Interactions[arg[1]]or{}if self.Interactions[arg[1]][arg[2]]then if Logic.GetCurrentTurn()<=self.Interactions[arg[1]][arg[2]]+5 then return end end;self.Interactions[arg[1]][arg[2]]=Logic.GetCurrentTurn()self:PerformNpcInteraction(arg[3])end end;function Lib.NPC.Global:CreateNpc(ho)self.NPC[ho.ScriptName]={ScriptName=ho.ScriptName,Active=true,Arrived=false,Type=ho.Type or 1,Player=ho.Player or{1,2,3,4,5,6,7,8},WrongPlayerAction=ho.WrongPlayerAction,Hero=ho.Hero,WrongHeroAction=ho.WrongHeroAction,Distance=ho.Distance or 350,Condition=ho.Condition,Callback=ho.Callback,Follow=ho.Follow==true,FollowHero=ho.FollowHero,FollowCallback=ho.FollowCallback,FollowDestination=ho.FollowDestination,FollowDistance=ho.FollowDistance or 2000,FollowArriveArea=ho.FollowArriveArea or 500,FollowSpeed=ho.FollowSpeed or 1.0,UseMarker=self.UseMarker==true,MarkerID=0}self:UpdateNpc(ho)return self.NPC[ho.ScriptName]end;function Lib.NPC.Global:DestroyNpc(ho)ho.Active=false;self:UpdateNpc(ho)self:DestroyMarker(ho.ScriptName)self.NPC[ho.ScriptName]=nil end;function Lib.NPC.Global:GetNpc(dD)return self.NPC[dD]end;function Lib.NPC.Global:UpdateNpc(ho)if not IsExisting(ho.ScriptName)then return end;if not self.NPC[ho.ScriptName]then local w=GetID(ho.ScriptName)Logic.SetOnScreenInformation(w,0)return end;for g,h in pairs(ho)do self.NPC[ho.ScriptName][g]=h end;self:CreateMarker(ho.ScriptName)if self.NPC[ho.ScriptName].Active then local w=GetID(ho.ScriptName)Logic.SetOnScreenInformation(w,self.NPC[ho.ScriptName].Type)else local w=GetID(ho.ScriptName)Logic.SetOnScreenInformation(w,0)end end;function Lib.NPC.Global:PerformNpcInteraction(n)local aW=Logic.GetEntityName(CONST_LAST_NPC_INTERACTED)if self.NPC[aW]then local bk=self.NPC[aW]self:RotateActorsToEachother(n)self:AdjustHeroTalkingDistance(bk.Distance)if not self:InteractionIsAppropriatePlayer(aW,n,CONST_LAST_HERO_INTERACTED)then return end;bk.TalkedTo=CONST_LAST_HERO_INTERACTED;if not self:InteractionIsAppropriateHero(aW)then return end;if bk.Condition==nil or bk:Condition(n,CONST_LAST_HERO_INTERACTED)then if not bk.Follow then bk.Active=false;if bk.Callback then bk:Callback(n,CONST_LAST_HERO_INTERACTED)end else if bk.FollowCallback then bk:FollowCallback(n,CONST_LAST_HERO_INTERACTED,false)end end else bk.TalkedTo=0 end;self:UpdateNpc(bk)end end;function Lib.NPC.Global:InteractionIsAppropriatePlayer(dD,n,iL)local iM=true;if self.NPC[dD]then local bk=self.NPC[dD]if bk.Player~=nil then if type(bk.Player)=="table"then iM=table.contains(bk.Player,n)else iM=bk.Player==n end;if not iM then local iN=(bk.WrongHeroTick or 0)+1;local iO=Logic.GetTime()if bk.WrongPlayerAction and iN<iO then self.NPC[dD].LastWongPlayerTick=iO;bk:WrongPlayerAction(n)end end end end;return iM end;function Lib.NPC.Global:InteractionIsAppropriateHero(dD)local iM=true;if self.NPC[dD]then local bk=self.NPC[dD]if bk.Hero~=nil then if type(bk.Hero)=="table"then iM=table.contains(bk.Hero,Logic.GetEntityName(CONST_LAST_HERO_INTERACTED))end;iM=bk.Hero==Logic.GetEntityName(CONST_LAST_HERO_INTERACTED)if not iM then local iN=(bk.WrongHeroTick or 0)+1;local iO=Logic.GetTime()if bk.WrongHeroAction and iN<iO then self.NPC[dD].WrongHeroTick=iO;bk:WrongHeroAction(CONST_LAST_HERO_INTERACTED)end end end end;return iM end;function Lib.NPC.Global:GetEntityMovementTarget(at)local f2=GetFloat(at,CONST_SCRIPTING_VALUES.Destination.X)local f3=GetFloat(at,CONST_SCRIPTING_VALUES.Destination.Y)return{X=f2,Y=f3}end;function Lib.NPC.Global:RotateActorsToEachother(n)local iP={}Logic.GetKnights(n,iP)for g,h in pairs(iP)do local aL=self:GetEntityMovementTarget(h)local E,F,G=Logic.EntityGetPos(CONST_LAST_NPC_INTERACTED)if math.floor(aL.X)==math.floor(E)and math.floor(aL.Y)==math.floor(F)then E,F,G=Logic.EntityGetPos(h)Logic.MoveEntity(h,E,F)LookAt(h,CONST_LAST_NPC_INTERACTED)end end;LookAt(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)LookAt(CONST_LAST_NPC_INTERACTED,CONST_LAST_HERO_INTERACTED)end;function Lib.NPC.Global:AdjustHeroTalkingDistance(P)local ah=P*GetFloat(CONST_LAST_NPC_INTERACTED,CONST_SCRIPTING_VALUES.Size)if GetDistance(CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED)<=ah*0.7 then local S=Logic.GetEntityOrientation(CONST_LAST_NPC_INTERACTED)local aC,aD,aE=Logic.EntityGetPos(CONST_LAST_HERO_INTERACTED)local aG=aC+ah*0.5*math.cos(math.rad(S))local aH=aD+ah*0.5*math.sin(math.rad(S))local ar=Logic.CreateEntityOnUnblockedLand(Entities.XD_ScriptEntity,aG,aH,0,0)local iQ,iR,iS=Logic.EntityGetPos(ar)Logic.MoveSettler(CONST_LAST_HERO_INTERACTED,iQ,iR)RequestHiResJob(function(iL,iT,iU)if Logic.GetTime()>iU+0.5 and Logic.IsEntityMoving(iL)==false then LookAt(iL,iT)LookAt(iT,iL)return true end end,CONST_LAST_HERO_INTERACTED,CONST_LAST_NPC_INTERACTED,Logic.GetTime())end end;function Lib.NPC.Global:OverrideQuestFunctions()GameCallback_OnNPCInteraction_Orig_NPC=GameCallback_OnNPCInteraction;GameCallback_OnNPCInteraction=function(at,n,iV)GameCallback_OnNPCInteraction_Orig_NPC(at,n,iV)local iW=iV or Lib.NPC.Global:GetClosestKnight(at,n)SendReport(Report.NpcInteraction,at,iW,n)SendReportToLocal(Report.NpcInteraction,at,iW,n)end;QuestTemplate.RemoveQuestMarkers_Orig_NPC=QuestTemplate.RemoveQuestMarkers;QuestTemplate.RemoveQuestMarkers=function(this)for f=1,this.Objectives[0]do if this.Objectives[f].Type==Objective.Distance then if this.Objectives[f].Data[1]~=-65565 then QuestTemplate.RemoveQuestMarkers_Orig_NPC(this)else if this.Objectives[f].Data[4].NpcInstance then NpcDispose(this.Objectives[f].Data[4].NpcInstance)this.Objectives[f].Data[4].NpcInstance=nil end end else QuestTemplate.RemoveQuestMarkers_Orig_NPC(this)end end end;QuestTemplate.ShowQuestMarkers_Orig_NPC=QuestTemplate.ShowQuestMarkers;QuestTemplate.ShowQuestMarkers=function(this)for f=1,this.Objectives[0]do if this.Objectives[f].Type==Objective.Distance then if this.Objectives[f].Data[1]~=-65565 then QuestTemplate.ShowQuestMarkers_Orig_NPC(this)else local iX=this.Objectives[f].Data[2]local iH=this.Objectives[f].Data[3]if this.Objectives[f].Data[4].NpcInstance and this.Objectives[f].Data[4].NpcInstance.Active==false then this.Objectives[f].Data[4].NpcInstance=nil end;if not this.Objectives[f].Data[4].NpcInstance then this.Objectives[f].Data[4].NpcInstance=NpcCompose{Name=iH,Hero=iX,Player=this.ReceivingPlayer}end end end end end;QuestTemplate.IsObjectiveCompleted_Orig_NPC=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(this,dK)local dL=dK.Type;local dM=dK.Data;if dK.Completed~=nil then return dK.Completed end;if dL~=Objective.Distance then return this:IsObjectiveCompleted_Orig_NPC(dK)else if dM[1]==-65565 then error(IsExisting(dM[3]),dM[3].." is dead! :(")if dM[4].NpcInstance and NpcTalkedTo(dM[4].NpcInstance,dM[2],this.ReceivingPlayer)then dK.Completed=true end else return this:IsObjectiveCompleted_Orig_NPC(dK)end end end end;function Lib.NPC.Global:GetClosestKnight(l,n)local w=GetID(l)local iY={}Logic.GetKnights(n,iY)return GetClosestToTarget(w,iY)end;function Lib.NPC.Global:GetClosestKnightAllPlayer(l)local aW=Logic.GetEntityName(GetID(l))if self.NPC[aW]then local iY={}for s,q in pairs(self.NPC[aW].Player)do local iZ={}Logic.GetKnights(q,iY)iY=Array_Append(iY,iZ)end;return GetClosestToTarget(aW,iY)end end;function Lib.NPC.Global:ToggleMarkerUsage(e2)self.UseMarker=e2==true;for g,h in pairs(self.NPC)do self.NPC[g].UseMarker=e2==true;self:HideMarker(g)end end;function Lib.NPC.Global:CreateMarker(dD)if self.NPC[dD]then local E,F,G=Logic.EntityGetPos(GetID(dD))local i_=Logic.CreateEntity(Entities.XD_ScriptEntity,E,F,0,0)DestroyEntity(self.NPC[dD].MarkerID)self.NPC[dD].MarkerID=i_;self:HideMarker(dD)end end;function Lib.NPC.Global:DestroyMarker(dD)if self.NPC[dD]then DestroyEntity(self.NPC[dD].MarkerID)self.NPC[dD].MarkerID=0 end end;function Lib.NPC.Global:HideMarker(dD)if self.NPC[dD]then if IsExisting(self.NPC[dD].MarkerID)then Logic.SetModel(self.NPC[dD].MarkerID,Models.Effects_E_NullFX)Logic.SetVisible(self.NPC[dD].MarkerID,false)end end end;function Lib.NPC.Global:ShowMarker(dD)if self.NPC[dD]then if self.NPC[dD].UseMarker==true and IsExisting(self.NPC[dD].MarkerID)then local eC=GetFloat(dD,CONST_SCRIPTING_VALUES.Size)SetFloat(self.NPC[dD].MarkerID,CONST_SCRIPTING_VALUES.Size,eC)Logic.SetModel(self.NPC[dD].MarkerID,Models.Effects_E_Wealth)Logic.SetVisible(self.NPC[dD].MarkerID,true)end end end;function Lib.NPC.Global:GetEntityMovingTarget(at)local E=GetFloat(at,CONST_SCRIPTING_VALUES.Destination.X)local F=GetFloat(at,CONST_SCRIPTING_VALUES.Destination.Y)return{X=E,Y=F}end;function Lib.NPC.Global:InteractionTriggerController()for q=1,8,1 do local j0={}Logic.GetKnights(q,j0)for f=1,#j0,1 do if Logic.GetCurrentTaskList(j0[f])=="TL_NPC_INTERACTION"then for g,h in pairs(self.NPC)do if h.Distance>=350 then local aL=self:GetEntityMovementTarget(j0[f])local aG,aH=Logic.EntityGetPos(GetID(g))if math.floor(aL.X)==math.floor(aG)and math.floor(aL.Y)==math.floor(aH)then if IsExisting(g)and IsNear(j0[f],g,h.Distance)then GameCallback_OnNPCInteraction(GetID(g),q,j0[f])return end end end end end end end end;function Lib.NPC.Global:InteractableMarkerController()for g,bk in pairs(self.NPC)do if bk.Active then if bk.UseMarker and IsExisting(bk.MarkerID)and GetInteger(bk.MarkerID,CONST_SCRIPTING_VALUES.Visible)==801280 then self:HideMarker(g)else self:ShowMarker(g)end;local aC,aD,aE=Logic.EntityGetPos(bk.MarkerID)local aG,aH,aI=Logic.EntityGetPos(GetID(g))if math.abs(aC-aG)>20 or math.abs(aD-aH)>20 then Logic.DEBUG_SetPosition(bk.MarkerID,aG,aH)end end end end;function Lib.NPC.Global:NpcFollowHeroController()for s,bk in pairs(self.NPC)do if bk.Active and bk.Follow and not bk.Arrived then local w=GetID(bk.ScriptName)local j1=GetID(bk.FollowHero)local j2=bk.FollowDistance;local j3=bk.FollowDestination;local j4=bk.FollowArriveArea;local j5=bk.FollowSpeed;if not j1 then j1=self:GetClosestKnightAllPlayer(w)end;if j1 and not Logic.IsEntityMoving(w)then if GetDistance(w,j1)<=j2 and GetDistance(w,j1)>j4/2 then Logic.SetSpeedFactor(w,j5)Move(w,j1)end end;if j1 and GetDistance(w,j3)<=j4 then if not Logic.IsEntityMoving(w)then Move(w,j3)if bk.FollowCallback then local q=Logic.EntityGetPlayer(j1)bk:FollowCallback(q,j1,true)end end end end end end;function Lib.NPC.Local:Initialize()if not self.IsInstalled then Report.NpcInteraction=CreateReport("Event_NpcInteraction")self:OverrideQuestFunctions()Lib.NPC.Global=nil end;self.IsInstalled=true end;function Lib.NPC.Local:OnSaveGameLoaded()end;function Lib.NPC.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.NpcInteraction then CONST_LAST_NPC_INTERACTED=arg[1]CONST_LAST_HERO_INTERACTED=arg[2]end end;function Lib.NPC.Local:OverrideQuestFunctions()GUI_Interaction.DisplayQuestObjective_Orig_NPC=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(dk,dl)local j6=tonumber(dk)if j6 then dk=j6 end;local ay,dm=GUI_Interaction.GetPotentialSubQuestAndType(dk)local j7="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local j8;local j9;g_CurrentDisplayedQuestID=dk;if dm==Objective.Distance then j8=j7 .."/List"j9=Wrapped_GetStringTableText(dk,"UI_Texts/QuestInteraction")local ja={}assert(ay~=nil)if ay.Objectives[1].Data[1]==-65565 then j8=j7 .."/Distance"j9=Wrapped_GetStringTableText(dk,"UI_Texts/QuestMoveHere")SetIcon(j8 .."/QuestTypeIcon",{7,10})local jb=GetID(ay.Objectives[1].Data[2])local jc=Logic.GetEntityType(jb)local jd=g_TexturePositions.Entities[jc]if not jd then jd={7,9}end;SetIcon(j8 .."/IconMover",jd)local je=GetID(ay.Objectives[1].Data[3])local jf=Logic.GetEntityType(je)local jg=g_TexturePositions.Entities[jf]if not jg then jg={14,10}end;local gP=j8 .."/IconTarget"local jh=j8 .."/TargetPlayerColor"SetIcon(gP,jg)XGUIEng.SetMaterialColor(jh,0,255,255,255,0)SetIcon(j8 .."/QuestTypeIcon",{16,12})local ji=Lib.NPC.Text.StartConversation;j9=Localize(ji)XGUIEng.SetText(j8 .."/Caption","{center}"..j9)XGUIEng.ShowWidget(j8,1)else GUI_Interaction.DisplayQuestObjective_Orig_NPC(dk,dl)end else GUI_Interaction.DisplayQuestObjective_Orig_NPC(dk,dl)end end;GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC=GUI_Interaction.GetEntitiesOrTerritoryListForQuest;GUI_Interaction.GetEntitiesOrTerritoryListForQuest=function(bg,jj)local jk={}local jl=true;if jj==Objective.Distance then if bg.Objectives[1].Data[1]==-65565 then local jm=GetID(bg.Objectives[1].Data[3])table.insert(jk,jm)else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(bg,jj)end else return GUI_Interaction.GetEntitiesOrTerritoryListForQuest_Orig_NPC(bg,jj)end;return jk,jl end end;RegisterModule(Lib.NPC.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/settings/Sound_API")function StartEventPlaylist(jn,n)n=n or 1;if GUI and n==GUI.GetPlayerID()then Sound.MusicStartEventPlaylist(jn)end;ExecuteLocal("StartEventPlaylist('%s', %d)",jn,n)end;API.StartEventPlaylist=StartEventPlaylist;function StopEventPlaylist(jn,n)n=n or 1;if GUI and n==GUI.GetPlayerID()then Sound.MusicStopEventPlaylist(jn)end;ExecuteLocal("StopEventPlaylist('%s', %d)",jn,n)end;API.StopEventPlaylist=StopEventPlaylist;function Play2DSound(eF,n)n=n or 1;if GUI or n==GUI.GetPlayerID()then Sound.FXPlay2DSound(eF:gsub("/","\\"))end;ExecuteLocal([[Play2DSound("%s", %d)]],eF,n)end;API.Play2DSound=Play2DSound;function Play3DSound(eF,hQ,hR,jo,n)n=n or 1;hQ=hQ or 1;hR=hR or 1;jo=jo or 0;if GUI or n==GUI.GetPlayerID()then Sound.FXPlay3DSound(eF:gsub("/","\\"),hQ,hR,jo)end;ExecuteLocal([[Play3DSound("%s", %f, %f, %d)]],eF,hQ,hR,n)end;API.Play3DSound=Play3DSound;function SoundSetVolume(jp)jp=jp<0 and 0 or math.floor(jp)if GUI then Lib.Sound.Local:AdjustSound(jp,nil,nil,nil,nil)end;ExecuteLocal("SoundSetVolume(%d)",jp)end;API.SoundSetVolume=SoundSetVolume;function SoundSetMusicVolume(jp)jp=jp<0 and 0 or math.floor(jp)if GUI then Lib.Sound.Local:AdjustSound(nil,jp,nil,nil,nil)end;ExecuteLocal("SoundSetMusicVolume(%d)",jp)end;API.SoundSetMusicVolume=SoundSetMusicVolume;function SoundSetVoiceVolume(jp)jp=jp<0 and 0 or math.floor(jp)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,jp,nil,nil)end;ExecuteLocal("SoundSetVoiceVolume(%d)",jp)end;API.SoundSetVoiceVolume=SoundSetVoiceVolume;function SoundSetAtmoVolume(jp)jp=jp<0 and 0 or math.floor(jp)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,nil,jp,nil)end;ExecuteLocal("SoundSetAtmoVolume(%d)",jp)end;API.SoundSetAtmoVolume=SoundSetAtmoVolume;function SoundSetUIVolume(jp)jp=jp<0 and 0 or math.floor(jp)if GUI then Lib.Sound.Local:AdjustSound(nil,nil,nil,nil,jp)end;ExecuteLocal("SoundSetUIVolume(%d)",jp)end;API.SoundSetUIVolume=SoundSetUIVolume;function SoundSave()if GUI then Lib.Sound.Local:SaveSound()end;Logic.ExecuteInLuaLocalState("SoundSave()")end;API.SoundSave=SoundSave;function SoundRestore()if GUI then Lib.Sound.Local:RestoreSound()end;ExecuteLocal("SoundRestore()")end;API.SoundRestore=SoundRestore;function PlayVoice(jq,hn)hn=hn or"ImportantStuff"if GUI then StopVoice()Sound.PlayVoice(hn,jq)end;ExecuteLocal([[PlayVoice("%s", "%s")]],jq,hn)end;API.PlayVoice=PlayVoice;function StopVoice(hn)hn=hn or"ImportantStuff"if GUI then Sound.StopVoice(hn)end;ExecuteLocal("StopVoice()")end;API.StopVoice=StopVoice;function RequestAlternateSound()if GUI then Lib.Sound.Local:RequestAlternateSound()end;ExecuteLocal("RequestAlternateSound()")end;API.RequestAlternateSound=RequestAlternateSound;Lib.Register("module/settings/Sound_Text")Lib.Sound=Lib.Sound or{}Lib.Sound.Text={Request={Title={de="Lautstärke ändern",en="Alternate Volume",fr="Modifier le volume"},Text={de="Während des Spiels kann die Lautstärke durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the sound volume might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, le volume sonore peut être modifié temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.Register("module/information/Requester_Behavior")function Goal_Decide(...)return B_Goal_Decide:new(...)end;g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;B_Goal_Decide={Name="Goal_Decide",Description={en="Goal: Opens a Yes/No Dialog. The decision dictates the quest result (yes=true, no=false).",de="Ziel: Öffnet einen Ja/Nein-Dialog. Die Entscheidung bestimmt das Quest-Ergebnis (ja=true, nein=false).",fr="Objectif: ouvre une fenêtre de dialogue oui/non. La décision détermine le résultat de la quête (oui=true, non=false)."},Parameter={{ParameterType.Default,en="Text",de="Text",fr="Text"},{ParameterType.Default,en="Title",de="Titel",fr="Titre"},{ParameterType.Custom,en="Button labels",de="Button Beschriftung",fr="Inscription sur le bouton"}}}function B_Goal_Decide:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Decide:AddParameter(bh,bi)if bh==0 then self.Text=bi elseif bh==1 then self.Title=bi elseif bh==2 then self.Buttons=bi=="Ok/Cancel"or bi==true end end;function B_Goal_Decide:CustomFunction(bg)if Framework.IsNetworkGame()then return false end;if IsCinematicEventActive and IsCinematicEventActive(bg.ReceivingPlayer)then return end;if g_GoalDecideDialogDisplayed==nil then g_GoalDecideDialogDisplayed=true;ExecuteLocal([[DialogRequestBox("%s", "%s", function(_Yes) end, %s)]],self.Title,self.Text,self.Buttons and"true"or"nil")end;local jr=g_DecisionWindowResult;if jr~=nil then g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;return jr end end;function B_Goal_Decide:GetCustomData(bh)if bh==2 then return{"Yes/No","Ok/Cancel"}end end;function B_Goal_Decide:Debug(bg)if Framework.IsNetworkGame()then debug(false,bg.Identifier..": "..self.Name..": Can not be used in multiplayer!")return true end;if bg.Visible==true then debug(false,bg.Identifier..": "..self.Name..": Is supposed to be used in invisible quests!")return true end;return false end;function B_Goal_Decide:Reset()g_GoalDecideDialogDisplayed=nil end;RegisterBehavior(B_Goal_Decide)Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/Requester_API")function TextWindow(js,jt,n)n=n or 1;js=Localize(js)jt=Localize(jt)if not GUI then ExecuteLocal([[TextWindow("%s", "%s", %d)]],js,jt,n)return end;Lib.Requester.Local:ShowTextWindow{PlayerID=n,Caption=js,Content=jt}end;API.TextWindow=TextWindow;function DialogInfoBox(n,gE,dG,hS)assert(IsLocalScript(),"Can not be used in global script.")if type(n)~="number"then hS=dG;dG=gE;gE=n;n=GUI.GetPlayerID()end;if type(gE)=="table"then gE=Localize(gE)end;if type(dG)=="table"then dG=Localize(dG)end;Lib.Requester.Local:OpenDialog(n,gE,dG,hS)end;API.DialogInfoBox=DialogInfoBox;function DialogRequestBox(n,gE,dG,hS,ju)assert(IsLocalScript(),"Can not be used in global script.")if type(n)~="number"then ju=hS;hS=dG;dG=gE;gE=n;n=GUI.GetPlayerID()end;if type(gE)=="table"then gE=Localize(gE)end;if type(dG)=="table"then dG=Localize(dG)end;Lib.Requester.Local:OpenRequesterDialog(n,gE,dG,hS,ju)end;API.DialogRequestBox=DialogRequestBox;function DialogSelectBox(n,gE,dG,hS,a7)assert(IsLocalScript(),"Can not be used in global script.")if type(n)~="number"then a7=hS;hS=dG;dG=gE;gE=n;n=GUI.GetPlayerID()end;if type(gE)=="table"then gE=Localize(gE)end;if type(dG)=="table"then dG=Localize(dG)end;dG=dG.."{cr}"Lib.Requester.Local:OpenSelectionDialog(n,gE,dG,hS,a7)end;API.DialogSelectBox=DialogSelectBox;function DialogLanguageSelection(n)n=n or 0;if not GUI then ExecuteLocal([[DialogLanguageSelection(%d)]],n)return end;local jv=n;local q=GUI.GetPlayerID()local jw=jv==0 or jv==q;if jv~=0 and GUI.GetPlayerID()~=jv then return end;local jx={}for f=1,#Lib.Core.Text.Languages do table.insert(jx,Lib.Core.Text.Languages[f][2])end;local jy=function(jz)SendReportToGlobal(Report.LanguageSelectionClosed,q,jw,Lib.Core.Text.Languages[jz][1])SendReport(Report.LanguageSelectionClosed,q,jw,Lib.Core.Text.Languages[jz][1])end;DialogSelectBox(q,Localize(Lib.Requester.Shared.Text.ChooseLanguage.Title),Localize(Lib.Requester.Shared.Text.ChooseLanguage.Text),jy,jx)end;API.DialogLanguageSelection=DialogLanguageSelection;Lib.Requester=Lib.Requester or{}Lib.Requester.Name="Requester"Lib.Requester.Global={}Lib.Requester.Local={Chat={Data={},History={},Visible={},Widgets={}},Requester={ActionFunction=nil,ActionRequester=nil,Next=nil,Queue={}}}Lib.Requester.Shared={Text={ChooseLanguage={Title={de="Wählt die Sprache",en="Chose your Tongue",fr="Sélectionnez la langue"},Text={de="Wählt aus der Liste die Sprache aus, in die Handlungstexte übersetzt werden sollen.",en="Choose from the list below which language story texts shall be presented to you.",fr="Sélectionne dans la liste la langue dans laquelle les textes narratifs doivent être traduits."}}}}Lib.Require("core/core")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester_API")Lib.Require("module/information/Requester_Behavior")Lib.Register("module/information/Requester")function Lib.Requester.Global:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")Lib.Requester.Local=nil end;self.IsInstalled=true end;function Lib.Requester.Global:OnSaveGameLoaded()end;function Lib.Requester.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.RequesterClosed then g_GoalDecideDialogDisplayed=false;g_DecisionWindowResult=arg[3]==true elseif aM==Report.LanguageSelectionClosed then Lib.Core.Text:ChangeSystemLanguage(arg[1],arg[2],arg[3])end end;function Lib.Requester.Local:Initialize()if not self.IsInstalled then Report.RequesterClosed=CreateReport("Event_RequesterClosed")Report.LanguageSelectionClosed=CreateReport("Event_LanguageSelectionClosed")for f=1,8 do self.Chat.Data[f]={}self.Chat.History[f]={}self.Chat.Visible[f]=false;self.Chat.Widgets[f]={}end;self:OverrideChatLog()self:DialogOverwriteOriginal()self:DialogAltF4Hotkey()Lib.Requester.Global=nil end;self.IsInstalled=true end;function Lib.Requester.Local:OnSaveGameLoaded()end;function Lib.Requester.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.SaveGameLoaded then self:DialogAltF4Hotkey()end end;function Lib.Requester.Local:DialogAltF4Hotkey()StartSimpleJobEx(function()if Lib.Requester.Local.LoadscreenClosed then Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"Lib.Requester.Local:DialogAltF4Action()",2,false)return true end end)end;function Lib.Requester.Local:DialogAltF4Action()Input.KeyBindDown(Keys.ModifierAlt+Keys.F4,"",30,false)self:OpenRequesterDialog(GUI.GetPlayerID(),XGUIEng.GetStringTableText("UI_Texts/MainMenuExitGame_center"),XGUIEng.GetStringTableText("UI_Texts/ConfirmQuitCurrentGame"),function(jA)if jA then Framework.ExitGame()end;Lib.Requester.Local:ResumeGameSpeed()Lib.Requester.Local:DialogAltF4Hotkey()end)end;function Lib.Requester.Local:Callback(n)if self.Requester.ActionFunction then self.Requester.ActionFunction(CustomGame.Knight+1,n)end;self:OnDialogClosed(CustomGame.Knight+1)end;function Lib.Requester.Local:CallbackRequester(jB,n)if self.Requester.ActionRequester then self.Requester.ActionRequester(jB,n)end;self:OnDialogClosed(jB)end;function Lib.Requester.Local:OnDialogClosed(jz)self:ResumeSaveGame()self:ResumeGameSpeed()SendReportToGlobal(Report.RequesterClosed,GUI.GetPlayerID(),self.DialogWindowShown,jz)SendReport(Report.RequesterClosed,GUI.GetPlayerID(),self.DialogWindowShown,jz)self.SavingDisabled=false;self.DialogWindowShown=nil;self:DialogQueueStartNext()end;function Lib.Requester.Local:DialogQueueStartNext()self.Requester.Next=table.remove(self.Requester.Queue,1)RequestHiResJob(function()local jC=Lib.Requester.Local.Requester.Next;if jC and jC[1]and jC[2]then local jD=jC[1]Lib.Requester.Local[jD](Lib.Requester.Local,unpack(jC[2]))Lib.Requester.Local.Requester.Next=nil end;return true end)end;function Lib.Requester.Local:DialogQueuePush(jE,jF)local jC={jE,jF}table.insert(self.Requester.Queue,jC)end;function Lib.Requester.Local:OpenDialog(n,gE,dG,hS)if GUI.GetPlayerID()~=n then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(gE)=="string")assert(type(dG)=="string")gE="{center}"..Lib.Core.Text:ConvertPlaceholders(gE)dG=Lib.Core.Text:ConvertPlaceholders(dG)if string.len(dG)<35 then dG=dG.."{cr}"end;g_MapAndHeroPreview.SelectKnight=function(jG)end;XGUIEng.ShowAllSubWidgets("/InGame/Dialog/BG",1)XGUIEng.ShowWidget("/InGame/Dialog/Backdrop",0)XGUIEng.ShowWidget(RequesterDialog,1)XGUIEng.ShowWidget(RequesterDialog_Yes,0)XGUIEng.ShowWidget(RequesterDialog_No,0)XGUIEng.ShowWidget(RequesterDialog_Ok,1)if type(hS)=="function"then self.Requester.ActionFunction=hS;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; Lib.Requester.Local:ResumeGameSpeed()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)else self.Requester.ActionFunction=nil;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; Lib.Requester.Local:ResumeGameSpeed()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)end;XGUIEng.SetText(RequesterDialog_Message,"{center}"..dG)XGUIEng.SetText(RequesterDialog_Title,gE)XGUIEng.SetText(RequesterDialog_Title.."White",gE)XGUIEng.PushPage(RequesterDialog,false)self:LockSaveGame()self:LockGameSpeed()self.DialogWindowShown=1;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenDialog",{n,gE,dG,hS})end end;function Lib.Requester.Local:OpenRequesterDialog(n,gE,dG,hS,ju)if GUI.GetPlayerID()~=n then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then assert(type(gE)=="string")assert(type(dG)=="string")gE="{center}"..gE;self:OpenDialog(n,gE,dG,hS)XGUIEng.ShowWidget(RequesterDialog_Yes,1)XGUIEng.ShowWidget(RequesterDialog_No,1)XGUIEng.ShowWidget(RequesterDialog_Ok,0)if ju then XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Ok_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/Cancel_center"))else XGUIEng.SetText(RequesterDialog_Yes,XGUIEng.GetStringTableText("UI_Texts/Yes_center"))XGUIEng.SetText(RequesterDialog_No,XGUIEng.GetStringTableText("UI_Texts/No_center"))end;self.Requester.ActionRequester=nil;if hS then assert(type(hS)=="function")self.Requester.ActionRequester=hS end;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; Lib.Requester.Local:ResumeGameSpeed()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, true, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Yes,jy)local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; Lib.Requester.Local:ResumeGameSpeed()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.CallbackRequester(Lib.Requester.Local, false, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_No,jy)self.DialogWindowShown=2;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenRequesterDialog",{n,gE,dG,hS,ju})end end;function Lib.Requester.Local:OpenSelectionDialog(n,gE,dG,hS,a7)if GUI.GetPlayerID()~=n then return end;if XGUIEng.IsWidgetShown(RequesterDialog)==0 then self:OpenDialog(n,gE,dG,hS)local jH=XGUIEng.GetWidgetID(CustomGame.Widget.KnightsList)XGUIEng.ListBoxPopAll(jH)for f=1,#a7 do XGUIEng.ListBoxPushItem(jH,a7[f])end;XGUIEng.ListBoxSetSelectedIndex(jH,0)CustomGame.Knight=0;local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; Lib.Requester.Local:ResumeGameSpeed()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; XGUIEng.PopPage()"jy=jy.."; Lib.Requester.Local.Callback(Lib.Requester.Local, GUI.GetPlayerID())"XGUIEng.SetActionFunction(RequesterDialog_Ok,jy)local jI="/InGame/Singleplayer/CustomGame/ContainerSelection/"XGUIEng.SetText(jI.."HeroComboBoxMain/HeroComboBox","")if a7[1]then XGUIEng.SetText(jI.."HeroComboBoxMain/HeroComboBox",a7[1])end;XGUIEng.PushPage(jI.."HeroComboBoxContainer",false)XGUIEng.PushPage(jI.."HeroComboBoxMain",false)XGUIEng.ShowWidget(jI.."HeroComboBoxContainer",0)local jJ={GUI.GetScreenSize()}local aC,aD=XGUIEng.GetWidgetScreenPosition(RequesterDialog_Ok)XGUIEng.SetWidgetScreenPosition(jI.."HeroComboBoxMain",aC-25,aD-90*jJ[2]/1080)XGUIEng.SetWidgetScreenPosition(jI.."HeroComboBoxContainer",aC-25,aD-20*jJ[2]/1080)self.DialogWindowShown=3;ExecuteGlobal("g_GoalDecideDialogDisplayed = true")else self:DialogQueuePush("OpenSelectionDialog",{n,gE,dG,hS,a7})end end;function Lib.Requester.Local:DialogOverwriteOriginal()self.Orig_OpenDialog=OpenDialog;OpenDialog=function(jK,gE,jL)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"Lib.Requester.Local.Orig_OpenDialog(jK,gE,jL)end end;self.Orig_OpenRequesterDialog=OpenRequesterDialog;OpenRequesterDialog=function(jK,gE,jM,ju,jN)if XGUIEng.IsWidgetShown(RequesterDialog)==0 then local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_Yes,jy)local jy="XGUIEng.ShowWidget(RequesterDialog, 0)"jy=jy.."; XGUIEng.PopPage()"XGUIEng.SetActionFunction(RequesterDialog_No,jy)Lib.Requester.Local.Orig_OpenRequesterDialog(jK,gE,jM,ju,jN)end end end;function Lib.Requester.Local:ShowTextWindow(ho)ho.PlayerID=ho.PlayerID or 1;ho.Button=ho.Button or{}local q=GUI.GetPlayerID()if ho.PlayerID~=q then return end;if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 then self:UpdateChatLogText(ho)return end;if self.DialogWindowShown~=nil then return end;self.Chat.Data[q]=ho;self:CloseTextWindow(q)self:AlterChatLog()self:LockSaveGame()self:LockGameSpeed()XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",ho.Content)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}"..ho.Caption)if ho.DisableClose then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/Exit",0)else local hV="/InGame/Root/Normal/ChatOptions/Exit"local jy="Lib.Requester.Local:CloseTextWindow(GUI.GetPlayerID())"XGUIEng.ShowWidget(hV,1)XGUIEng.SetActionFunction(hV,jy)end;self:ShouldShowSlider(ho.Content)XGUIEng.SliderSetValueAbs("/InGame/Root/Normal/ChatOptions/ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",1)self.DialogWindowShown=4 end;function Lib.Requester.Local:CloseTextWindow(n)assert(n~=nil)local q=GUI.GetPlayerID()if n~=q then return end;self.DialogWindowShown=nil;self:ResumeSaveGame()self:ResumeGameSpeed()GUI_Chat.CloseChatMenu()end;function Lib.Requester.Local:UpdateChatLogText(ho)XGUIEng.SetText("/InGame/Root/Normal/ChatOptions/ChatLog",ho.Content)end;function Lib.Requester.Local:AlterChatLog()local q=GUI.GetPlayerID()if self.Chat.Visible[q]then return end;self.Chat.Visible[q]=true;self.Chat.History[q]=table.copy(g_Chat.ChatHistory)g_Chat.ChatHistory={}self:AlterChatLogDisplay()end;function Lib.Requester.Local:RestoreChatLog()local q=GUI.GetPlayerID()if not self.Chat.Visible[q]then return end;self.Chat.Visible[q]=false;g_Chat.ChatHistory={}for f=1,#self.Chat.History[q]do GUI_Chat.ChatlogAddMessage(self.Chat.History[q][f])end;self:RestoreChatLogDisplay()self.Chat.History[q]={}self.Chat.Widgets[q]={}self.Chat.Data[q]={}end;function Lib.Requester.Local:UpdateToggleWhisperTarget()local q=GUI.GetPlayerID()local jO="/InGame/Root/Normal/ChatOptions/"if not self.Chat.Data[q]or not self.Chat.Data[q].Button or not self.Chat.Data[q].Button.Action then XGUIEng.ShowWidget(jO.."ToggleWhisperTarget",0)return end;local jP=self.Chat.Data[q].Button.Text;XGUIEng.SetText(jO.."ToggleWhisperTarget","{center}"..jP)end;function Lib.Requester.Local:ShouldShowSlider(dG)local ew=CountTextLines(dG,170)if ew>20 then XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions/ChatLogSlider",1)end end;function Lib.Requester.Local:OverrideChatLog()self.Orig_GUI_Chat_ChatlogAddMessage=GUI_Chat.ChatlogAddMessage;GUI_Chat.ChatlogAddMessage=function(jK)local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_ChatlogAddMessage(jK)return end;table.insert(Lib.Requester.Local.Chat.History[q],jK)end;self.Orig_GUI_Chat_DisplayChatLog=GUI_Chat.DisplayChatLog;GUI_Chat.DisplayChatLog=function()local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_DisplayChatLog()end end;self.Orig_GUI_Chat_CloseChatMenu=GUI_Chat.CloseChatMenu;GUI_Chat.CloseChatMenu=function()local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_CloseChatMenu()return end;Lib.Requester.Local:RestoreChatLog()XGUIEng.ShowWidget("/InGame/Root/Normal/ChatOptions",0)end;self.Orig_GUI_Chat_ToggleWhisperTargetUpdate=GUI_Chat.ToggleWhisperTargetUpdate;GUI_Chat.ToggleWhisperTargetUpdate=function()local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_ToggleWhisperTargetUpdate()return end;Lib.Requester.Local:UpdateToggleWhisperTarget()end;self.Orig_GUI_Chat_CheckboxMessageTypeWhisperUpdate=GUI_Chat.CheckboxMessageTypeWhisperUpdate;GUI_Chat.CheckboxMessageTypeWhisperUpdate=function()local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_CheckboxMessageTypeWhisperUpdate()return end end;self.Orig_GUI_Chat_ToggleWhisperTarget=GUI_Chat.ToggleWhisperTarget;GUI_Chat.ToggleWhisperTarget=function()local q=GUI.GetPlayerID()if not Lib.Requester.Local.Chat.Visible[q]then Lib.Requester.Local.Orig_GUI_Chat_ToggleWhisperTarget()return end;if Lib.Requester.Local.Chat.Data[q].Button.Action then local bk=Lib.Requester.Local.Chat.Data[q]Lib.Requester.Local.Chat.Data[q].Button.Action(bk)end end end;function Lib.Requester.Local:AlterChatLogDisplay()local q=GUI.GetPlayerID()local jQ,jR,E,F;local jS;local jO="/InGame/Root/Normal/ChatOptions/"E,F=XGUIEng.GetWidgetLocalPosition(jO.."ToggleWhisperTarget")jQ,jR=XGUIEng.GetWidgetSize(jO.."ToggleWhisperTarget")self.Chat.Widgets[q]["ToggleWhisperTarget"]={X=E,Y=F,W=jQ,H=jR}jS=self.Chat.Widgets[q]["ToggleWhisperTarget"]E,F=XGUIEng.GetWidgetLocalPosition(jO.."ChatLog")jQ,jR=XGUIEng.GetWidgetSize(jO.."ChatLog")self.Chat.Widgets[q]["ChatLog"]={X=E,Y=F,W=jQ,H=jR}jS=self.Chat.Widgets[q]["ChatLog"]E,F=XGUIEng.GetWidgetLocalPosition(jO.."ChatLogSlider")jQ,jR=XGUIEng.GetWidgetSize(jO.."ChatLogSlider")self.Chat.Widgets[q]["ChatLogSlider"]={X=E,Y=F,W=jQ,H=jR}jS=self.Chat.Widgets[q]["ChatLogSlider"]XGUIEng.ShowWidget(jO.."ChatModeAllPlayers",0)XGUIEng.ShowWidget(jO.."ChatModeTeam",0)XGUIEng.ShowWidget(jO.."ChatModeWhisper",0)XGUIEng.ShowWidget(jO.."ChatChooseModeCaption",0)XGUIEng.ShowWidget(jO.."Background/TitleBig",1)XGUIEng.ShowWidget(jO.."Background/TitleBig/Info",0)XGUIEng.ShowWidget(jO.."ChatLogCaption",0)XGUIEng.ShowWidget(jO.."BGChoose",0)XGUIEng.ShowWidget(jO.."BGChatLog",0)XGUIEng.ShowWidget(jO.."ChatLogSlider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/BG",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Close",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Slider",0)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog/Text",0)XGUIEng.SetText("/InGame/Root/Normal/MessageLog/Name","{center}Test")XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog",15,90)XGUIEng.SetWidgetLocalPosition("/InGame/Root/Normal/MessageLog/Name",0,0)XGUIEng.SetTextColor("/InGame/Root/Normal/MessageLog/Name",51,51,121,255)XGUIEng.SetWidgetSize(jO.."ChatLogSlider",46,600)XGUIEng.SetWidgetLocalPosition(jO.."ChatLogSlider",780,130)XGUIEng.SetWidgetSize(jO.."Background/DialogBG/1 (2)/2",150,400)XGUIEng.SetWidgetPositionAndSize(jO.."Background/DialogBG/1 (2)/3",400,500,350,400)XGUIEng.SetWidgetLocalPosition(jO.."ToggleWhisperTarget",280,760)XGUIEng.SetWidgetLocalPosition(jO.."ChatLog",140,150)XGUIEng.SetWidgetSize(jO.."ChatLog",640,560)end;function Lib.Requester.Local:RestoreChatLogDisplay()local q=GUI.GetPlayerID()local jS;local jO="/InGame/Root/Normal/ChatOptions/"jS=self.Chat.Widgets[q]["ToggleWhisperTarget"]XGUIEng.SetWidgetLocalPosition(jO.."ToggleWhisperTarget",jS.X,jS.Y)XGUIEng.SetWidgetSize(jO.."ToggleWhisperTarget",jS.W,jS.H)jS=self.Chat.Widgets[q]["ChatLog"]XGUIEng.SetWidgetLocalPosition(jO.."ChatLog",jS.X,jS.Y)XGUIEng.SetWidgetSize(jO.."ChatLog",jS.W,jS.H)jS=self.Chat.Widgets[q]["ChatLogSlider"]XGUIEng.SetWidgetLocalPosition(jO.."ChatLogSlider",jS.X,jS.Y)XGUIEng.SetWidgetSize(jO.."ChatLogSlider",jS.W,jS.H)XGUIEng.ShowWidget(jO.."ChatModeAllPlayers",1)XGUIEng.ShowWidget(jO.."ChatModeTeam",1)XGUIEng.ShowWidget(jO.."ChatModeWhisper",1)XGUIEng.ShowWidget(jO.."ChatChooseModeCaption",1)XGUIEng.ShowWidget(jO.."Background/TitleBig",1)XGUIEng.ShowWidget(jO.."Background/TitleBig/Info",1)XGUIEng.ShowWidget(jO.."ChatLogCaption",1)XGUIEng.ShowWidget(jO.."BGChoose",1)XGUIEng.ShowWidget(jO.."BGChatLog",1)XGUIEng.ShowWidget(jO.."ChatLogSlider",1)XGUIEng.ShowWidget(jO.."ToggleWhisperTarget",1)XGUIEng.ShowWidget("/InGame/Root/Normal/MessageLog",0)end;function Lib.Requester.Local:LockGameSpeed()local q=GUI.GetPlayerID()local jT=0.0000001;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(q,jT)Lib.UITools.Speed:SetSpeedLimit(jT)Lib.UITools.Speed:ActivateSpeedLimit(true)end end;function Lib.Requester.Local:ResumeGameSpeed()local q=GUI.GetPlayerID()local jT=1;if not Framework.IsNetworkGame()then Lib.UITools.Speed:ActivateSpeedLimit(false)Lib.UITools.Speed:SetSpeedLimit(jT)Game.GameTimeSetFactor(q,jT)end end;function Lib.Requester.Local:LockSaveGame()if not Framework.IsNetworkGame()then if not self.SavingDisabled then self.SavingDisabled=true;Lib.Core.Save:DisableSaving(true)end end end;function Lib.Requester.Local:ResumeSaveGame()if not Framework.IsNetworkGame()then if self.SavingDisabled then Lib.Core.Save:DisableSaving(false)self.SavingDisabled=nil end end end;RegisterModule(Lib.Requester.Name)Lib.Sound=Lib.Sound or{}Lib.Sound.Name="Sound"Lib.Sound.Global={}Lib.Sound.Local={Config={DoAlternateSound=true},SoundBackup={}}CONST_FARCLIPPLANE=45000;CONST_FARCLIPPLANE_DEFAULT=0;Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/information/Requester")Lib.Require("module/settings/Sound_Text")Lib.Require("module/settings/Sound_API")Lib.Register("module/settings/Sound")function Lib.Sound.Global:Initialize()if not self.IsInstalled then Lib.Sound.Local=nil end;self.IsInstalled=true end;function Lib.Sound.Global:OnSaveGameLoaded()end;function Lib.Sound.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:Initialize()if not self.IsInstalled then Lib.Sound.Global=nil end;self.IsInstalled=true end;function Lib.Sound.Local:OnSaveGameLoaded()end;function Lib.Sound.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Sound.Local:RequestAlternateSound()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.Sound.Text.Request.Title,Lib.Sound.Text.Request.Text,function(jA)Lib.Sound.Local.Config.DoAlternateSound=jA==true end,false)end;function Lib.Sound.Local:AdjustSound(jU,jV,jW,jX,jY)if not self.Config.DoAlternateSound then return end;self:SaveSound()if jU then Sound.SetGlobalVolume(jU)end;if jV then Sound.SetMusicVolume(jV)end;if jW then Sound.SetSpeechVolume(jW)end;if jX then Sound.SetFXSoundpointVolume(jX)Sound.SetFXAtmoVolume(jX)end;if jY then Sound.Set2DFXVolume(jY)Sound.SetFXVolume(jY)end end;function Lib.Sound.Local:SaveSound()if not self.SoundBackup.Saved then self.SoundBackup.Saved=true;self.SoundBackup.FXSP=Sound.GetFXSoundpointVolume()self.SoundBackup.FXAtmo=Sound.GetFXAtmoVolume()self.SoundBackup.FXVol=Sound.GetFXVolume()self.SoundBackup.Sound=Sound.GetGlobalVolume()self.SoundBackup.Music=Sound.GetMusicVolume()self.SoundBackup.Voice=Sound.GetSpeechVolume()self.SoundBackup.UI=Sound.Get2DFXVolume()end end;function Lib.Sound.Local:RestoreSound()if self.SoundBackup.Saved then Sound.SetFXSoundpointVolume(self.SoundBackup.FXSP)Sound.SetFXAtmoVolume(self.SoundBackup.FXAtmo)Sound.SetFXVolume(self.SoundBackup.FXVol)Sound.SetGlobalVolume(self.SoundBackup.Sound)Sound.SetMusicVolume(self.SoundBackup.Music)Sound.SetSpeechVolume(self.SoundBackup.Voice)Sound.Set2DFXVolume(self.SoundBackup.UI)self.SoundBackup={}end end;RegisterModule(Lib.Sound.Name)Lib.Register("module/city/Promotion_Requirements")InitKnightTitleTablesOverwrite=function()KnightTitles={}KnightTitles.Knight=0;KnightTitles.Mayor=1;KnightTitles.Baron=2;KnightTitles.Earl=3;KnightTitles.Marquees=4;KnightTitles.Duke=5;KnightTitles.Archduke=6;NeedsAndRightsByKnightTitle={}NeedsAndRightsByKnightTitle[KnightTitles.Knight]={ActivateNeedForPlayer,{Needs.Nutrition,Needs.Medicine},ActivateRightForPlayer,{Technologies.R_Gathering,Technologies.R_Woodcutter,Technologies.R_StoneQuarry,Technologies.R_HuntersHut,Technologies.R_FishingHut,Technologies.R_CattleFarm,Technologies.R_GrainFarm,Technologies.R_SheepFarm,Technologies.R_IronMine,Technologies.R_Beekeeper,Technologies.R_HerbGatherer,Technologies.R_Nutrition,Technologies.R_Bakery,Technologies.R_Dairy,Technologies.R_Butcher,Technologies.R_SmokeHouse,Technologies.R_Clothes,Technologies.R_Tanner,Technologies.R_Weaver,Technologies.R_Construction,Technologies.R_Trail,Technologies.R_KnockDown,Technologies.R_Sermon}}NeedsAndRightsByKnightTitle[KnightTitles.Mayor]={ActivateNeedForPlayer,{Needs.Clothes},ActivateRightForPlayer,{Technologies.R_Military,Technologies.R_MilitarySword,Technologies.R_Thieves,Technologies.R_Hygiene,Technologies.R_Soapmaker,Technologies.R_BroomMaker,Technologies.R_SpecialEdition,Technologies.R_SpecialEdition_Pavilion,Technologies.R_SpecialEdition_StatueFamily},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Baron]={ActivateNeedForPlayer,{Needs.Hygiene},ActivateRightForPlayer,{Technologies.R_SiegeEngineWorkshop,Technologies.R_BatteringRam,Technologies.R_Pallisade,Technologies.R_Medicine,Technologies.R_Entertainment,Technologies.R_Tavern,Technologies.R_Street,Technologies.R_Festival,Technologies.R_SpecialEdition_Column},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Earl]={ActivateNeedForPlayer,{Needs.Entertainment,Needs.Prosperity},ActivateRightForPlayer,{Technologies.R_MilitaryBow,Technologies.R_Baths,Technologies.R_Prosperity,Technologies.R_Taxes,Technologies.R_SpecialEdition_StatueSettler},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Marquees]={ActivateNeedForPlayer,{Needs.Wealth},ActivateRightForPlayer,{Technologies.R_Theater,Technologies.R_Wealth,Technologies.R_BannerMaker,Technologies.R_SiegeTower,Technologies.R_Wall,Technologies.R_Ballista,Technologies.R_AmmunitionCart,Technologies.R_SpecialEdition_StatueProduction},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Duke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Catapult,Technologies.R_Carpenter,Technologies.R_CandleMaker,Technologies.R_Blacksmith,Technologies.R_SpecialEdition_StatueDario},StartKnightsPromotionCelebration}NeedsAndRightsByKnightTitle[KnightTitles.Archduke]={ActivateNeedForPlayer,nil,ActivateRightForPlayer,{Technologies.R_Victory},StartKnightsPromotionCelebration}if Framework.GetGameExtraNo()>=1 then local jZ=4;table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][jZ],Technologies.R_Cistern)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Mayor][jZ],Technologies.R_Beautification_Brazier)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][jZ],Technologies.R_Beautification_Shrine)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Baron][jZ],Technologies.R_Beautification_Pillar)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][jZ],Technologies.R_Beautification_StoneBench)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Earl][jZ],Technologies.R_Beautification_Sundial)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Marquees][jZ],Technologies.R_Beautification_Vase)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Duke][jZ],Technologies.R_Beautification_VictoryColumn)table.insert(NeedsAndRightsByKnightTitle[KnightTitles.Archduke][jZ],Technologies.R_Beautification_TriumphalArch)end;KnightTitleRequirements={}KnightTitleRequirements[KnightTitles.Mayor]={}KnightTitleRequirements[KnightTitles.Mayor].Headquarters=1;KnightTitleRequirements[KnightTitles.Mayor].Settlers=10;KnightTitleRequirements[KnightTitles.Mayor].Products={{GoodCategories.GC_Clothes,6}}KnightTitleRequirements[KnightTitles.Baron]={}KnightTitleRequirements[KnightTitles.Baron].Settlers=30;KnightTitleRequirements[KnightTitles.Baron].Headquarters=1;KnightTitleRequirements[KnightTitles.Baron].Storehouse=1;KnightTitleRequirements[KnightTitles.Baron].Cathedrals=1;KnightTitleRequirements[KnightTitles.Baron].Products={{GoodCategories.GC_Hygiene,12}}KnightTitleRequirements[KnightTitles.Earl]={}KnightTitleRequirements[KnightTitles.Earl].Settlers=50;KnightTitleRequirements[KnightTitles.Earl].Headquarters=2;KnightTitleRequirements[KnightTitles.Earl].Goods={{Goods.G_Beer,18}}KnightTitleRequirements[KnightTitles.Marquees]={}KnightTitleRequirements[KnightTitles.Marquees].Settlers=70;KnightTitleRequirements[KnightTitles.Marquees].Headquarters=2;KnightTitleRequirements[KnightTitles.Marquees].Storehouse=2;KnightTitleRequirements[KnightTitles.Marquees].Cathedrals=2;KnightTitleRequirements[KnightTitles.Marquees].RichBuildings=20;KnightTitleRequirements[KnightTitles.Duke]={}KnightTitleRequirements[KnightTitles.Duke].Settlers=90;KnightTitleRequirements[KnightTitles.Duke].Storehouse=2;KnightTitleRequirements[KnightTitles.Duke].Cathedrals=2;KnightTitleRequirements[KnightTitles.Duke].Headquarters=3;KnightTitleRequirements[KnightTitles.Duke].DecoratedBuildings={{Goods.G_Banner,9}}KnightTitleRequirements[KnightTitles.Archduke]={}KnightTitleRequirements[KnightTitles.Archduke].Settlers=150;KnightTitleRequirements[KnightTitles.Archduke].Storehouse=3;KnightTitleRequirements[KnightTitles.Archduke].Cathedrals=3;KnightTitleRequirements[KnightTitles.Archduke].Headquarters=3;KnightTitleRequirements[KnightTitles.Archduke].RichBuildings=30;KnightTitleRequirements[KnightTitles.Archduke].FullDecoratedBuildings=30;CreateTechnologyKnightTitleTable()end;Lib.Register("module/city/Promotion_Helper")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Helper={}Lib.Promotion.Helper.OverwritePromotionHelper=function()DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist;DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist;DoesNeededNumberOfGoodTypesForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist;DoNeededNumberOfConsumedGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist;DoNumberOfProductsInCategoryExist=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist;DoNeededDiversityBuffForKnightTitleExist=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist;DoCustomFunctionForKnightTitleSucceed=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed;DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist;DoNeededSpecialBuildingUpgradeForKnightTitleExist=Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist;DoesNeededCityReputationForKnightTitleExist=Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist;DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist;DoNeededNumberOfRichBuildingsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist;DoNeededNumberOfGoodsForKnightTitleExist=Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist;DoesNeededNumberOfSettlersForKnightTitleExist=Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist;CanKnightBePromoted=Lib.Promotion.Helper.CanKnightBePromoted;VictroryBecauseOfTitle=Lib.Promotion.Helper.VictroryBecauseOfTitle end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].Category==nil then return end;if j_ then local k0=KnightTitleRequirements[b2].Category[j_][1]local k1=KnightTitleRequirements[b2].Category[j_][2]local k2=0;if k0==EntityCategories.Spouse then k2=Logic.GetNumberOfSpouses(n)else local k3={Logic.GetPlayerEntitiesInCategory(n,k0)}for f=1,#k3 do if Logic.IsBuilding(k3[f])==1 then if Logic.IsConstructionComplete(k3[f])==1 then k2=k2+1 end else k2=k2+1 end end end;if k2>=k1 then return true,k2,k1 end;return false,k2,k1 else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Category do k4,k5,k6=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].Entities==nil then return end;if j_ then local cM=KnightTitleRequirements[b2].Entities[j_][1]local k1=KnightTitleRequirements[b2].Entities[j_][2]local k3=GetPlayerEntities(n,cM)local k2=0;for f=1,#k3 do if Logic.IsBuilding(k3[f])==1 then if Logic.IsConstructionComplete(k3[f])==1 then k2=k2+1 end else k2=k2+1 end end;if k2>=k1 then return true,k2,k1 end;return false,k2,k1 else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Entities do k4,k5,k6=Lib.Promotion.Helper.DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].Goods==nil then return end;if j_ then local bj=KnightTitleRequirements[b2].Goods[j_][1]local k1=KnightTitleRequirements[b2].Goods[j_][2]local k2=GetPlayerGoodsInSettlement(bj,n,true)if k2>=k1 then return true,k2,k1 end;return false,k2,k1 else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Goods do k4,k5,k6=Lib.Promotion.Helper.DoesNeededNumberOfGoodTypesForKnightTitleExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].Consume==nil then return end;if j_ then CONST_CONSUMED_GOODS_COUNTER[n]=CONST_CONSUMED_GOODS_COUNTER[n]or{}local bj=KnightTitleRequirements[b2].Consume[j_][1]local cr=CONST_CONSUMED_GOODS_COUNTER[n][bj]or 0;local k7=KnightTitleRequirements[b2].Consume[j_][2]if cr>=k7 then return true,cr,k7 else return false,cr,k7 end else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Consume do k4,k5,k6=Lib.Promotion.Helper.DoNeededNumberOfConsumedGoodsForKnightTitleExist(n,b2,f)if k4==false then return false,k5,k6 end end;return true,k5,k6 end end;Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist=function(n,b2,j_)if KnightTitleRequirements[b2].Products==nil then return end;if j_ then local cr=0;local k8=KnightTitleRequirements[b2].Products[j_][2]local k9=KnightTitleRequirements[b2].Products[j_][1]local ka={Logic.GetGoodTypesInGoodCategory(k9)}for f=1,#ka do cr=cr+GetPlayerGoodsInSettlement(ka[f],n,true)end;return cr>=k8,cr,k8 else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Products do k4,k5,k6=Lib.Promotion.Helper.DoNumberOfProductsInCategoryExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].Buff==nil then return end;if j_ then local kb=KnightTitleRequirements[b2].Buff[j_]if Logic.GetBuff(n,kb)and Logic.GetBuff(n,kb)~=0 then return true end;return false else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Buff do k4,k5,k6=Lib.Promotion.Helper.DoNeededDiversityBuffForKnightTitleExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed=function(n,b2,j_)if KnightTitleRequirements[b2].Custom==nil then return end;if j_ then return KnightTitleRequirements[b2].Custom[j_][1](n,b2,j_)else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].Custom do k4,k5,k6=Lib.Promotion.Helper.DoCustomFunctionForKnightTitleSucceed(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist=function(n,b2,j_)if KnightTitleRequirements[b2].DecoratedBuildings==nil then return end;if j_ then local kc={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local kd=KnightTitleRequirements[b2].DecoratedBuildings[j_][1]local ke=KnightTitleRequirements[b2].DecoratedBuildings[j_][2]local kf=0;for f=1,#kc do local kg=kc[f]local kh=Logic.GetBuildingWealthGoodState(kg,kd)if kh>0 then kf=kf+1 end end;if kf>=ke then return true,kf,ke else return false,kf,ke end else local k4,k5,k6;for f=1,#KnightTitleRequirements[b2].DecoratedBuildings do k4,k5,k6=Lib.Promotion.Helper.DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(n,b2,f)if k4==false then return k4,k5,k6 end end;return k4 end end;Lib.Promotion.Helper.DoNeededSpecialBuildingUpgradeForKnightTitleExist=function(n,b2,ki)local kj;local kk;if ki==EntityCategories.Headquarters then kj=Logic.GetHeadquarters(n)kk="Headquarters"elseif ki==EntityCategories.Storehouse then kj=Logic.GetStoreHouse(n)kk="Storehouse"elseif ki==EntityCategories.Cathedrals then kj=Logic.GetCathedral(n)kk="Cathedrals"else return end;if KnightTitleRequirements[b2][kk]==nil then return end;local kl=KnightTitleRequirements[b2][kk]if kj~=nil then local km=Logic.GetUpgradeLevel(kj)if km>=kl then return true,km,kl else return false,km,kl end else return false,0,kl end end;Lib.Promotion.Helper.DoesNeededCityReputationForKnightTitleExist=function(n,b2)if KnightTitleRequirements[b2].Reputation==nil then return end;local k1=KnightTitleRequirements[b2].Reputation;if not k1 then return end;local k2=math.floor(Logic.GetCityReputation(n)*100+0.5)if k2>=k1 then return true,k2,k1 end;return false,k2,k1 end;Lib.Promotion.Helper.DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist=function(n,b2)if KnightTitleRequirements[b2].FullDecoratedBuildings==nil then return end;local kc={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}local ke=KnightTitleRequirements[b2].FullDecoratedBuildings;local kf=0;for f=1,#kc do local kg=kc[f]local kn=0;if Logic.GetBuildingWealthGoodState(kg,Goods.G_Banner)>0 then kn=kn+1 end;if Logic.GetBuildingWealthGoodState(kg,Goods.G_Sign)>0 then kn=kn+1 end;if Logic.GetBuildingWealthGoodState(kg,Goods.G_Candle)>0 then kn=kn+1 end;if Logic.GetBuildingWealthGoodState(kg,Goods.G_Ornament)>0 then kn=kn+1 end;if kn>=4 then kf=kf+1 end end;if kf>=ke then return true,kf,ke else return false,kf,ke end end;Lib.Promotion.Helper.DoNeededNumberOfRichBuildingsForKnightTitleExist=function(n,b2)if KnightTitleRequirements[b2].RichBuildings==nil then return end;local ko=Logic.GetNumberOfProsperBuildings(n,1)local kp=KnightTitleRequirements[b2].RichBuildings;if kp==-1 then kp=Logic.GetNumberOfPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)kp=kp-Logic.GetNumberOfEntitiesOfTypeOfPlayer(n,Entities.B_Barracks)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(n,Entities.B_BarracksArchers)-Logic.GetNumberOfEntitiesOfTypeOfPlayer(n,Entities.B_SiegeEngineWorkshop)end;if ko>=kp then return true,ko,kp else return false,ko,kp end end;Lib.Promotion.Helper.DoNeededNumberOfGoodsForKnightTitleExist=function(n,b2)if KnightTitleRequirements[b2].Good==nil then return end;local k0=KnightTitleRequirements[b2].Good[1]local kq={Logic.GetPlayerEntitiesInCategory(n,k0)}local cr=0;for f=1,#kq do local w=kq[f]local cM=Logic.GetEntityType(w)if cM~=Entities.B_TableBeer and cM~=Entities.B_Marketslot and Logic.IsEntityTypeInCategory(cM,EntityCategories.Marketplace)==0 and Logic.IsKnight(w)==false then local kr=Logic.GetAmountOnOutStockByIndex(w,0)cr=cr+kr end end;local k7=KnightTitleRequirements[b2].Good[2]if cr>=k7 then return true,cr,k7 else return false,cr,k7 end end;Lib.Promotion.Helper.DoesNeededNumberOfSettlersForKnightTitleExist=function(n,b2)if KnightTitleRequirements[b2].Settlers==nil then return end;local ks=KnightTitleRequirements[b2].Settlers;if ks~=nil then local kt=Logic.GetNumberOfEmployedWorkers(n)if kt>=ks then return true,kt,ks else return false,kt,ks end end end;Lib.Promotion.Helper.CanKnightBePromoted=function(n,b2)if b2==nil then b2=Logic.GetKnightTitle(n)+1 end;if Logic.CanStartFestival(n,1)==true then if KnightTitleRequirements[b2]~=nil and DoesNeededNumberOfSettlersForKnightTitleExist(n,b2)~=false and DoNeededNumberOfGoodsForKnightTitleExist(n,b2)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,b2,EntityCategories.Headquarters)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,b2,EntityCategories.Storehouse)~=false and DoNeededSpecialBuildingUpgradeForKnightTitleExist(n,b2,EntityCategories.Cathedrals)~=false and DoNeededNumberOfRichBuildingsForKnightTitleExist(n,b2)~=false and DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(n,b2)~=false and DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(n,b2)~=false and DoesNeededCityReputationForKnightTitleExist(n,b2)~=false and DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(n,b2)~=false and DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(n,b2)~=false and DoesNeededNumberOfGoodTypesForKnightTitleExist(n,b2)~=false and DoNeededDiversityBuffForKnightTitleExist(n,b2)~=false and DoCustomFunctionForKnightTitleSucceed(n,b2)~=false and DoNeededNumberOfConsumedGoodsForKnightTitleExist(n,b2)~=false and DoNumberOfProductsInCategoryExist(n,b2)~=false then return true end end;return false end;Lib.Promotion.Helper.VictroryBecauseOfTitle=function()QuestTemplate:TerminateEventsAndStuff()Victory(g_VictoryAndDefeatType.VictoryMissionComplete)end;Lib.Register("module/city/Promotion_Config")Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Config={}function Lib.Promotion.Config:InitAddonText()if Framework.GetGameExtraNo()~=0 then Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Gems]={de="Edelsteine beschaffen",en="Obtain gems",fr="Se procurer des Gemmes"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_Olibanum]={de="Weihrauch beschaffen",en="Obtain olibanum",fr="Se procurer de l'encens"}Lib.Promotion.Config.BuffTypeNames[Buffs.Buff_MusicalInstrument]={de="Muskinstrumente beschaffen",en="Obtain instruments",fr="Se procurer des instruments de musique"}end end;function Lib.Promotion.Config:InitTexturePositions()g_TexturePositions.EntityCategories[EntityCategories.GC_Food_Supplier]={1,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Clothes_Supplier]={1,2}g_TexturePositions.EntityCategories[EntityCategories.GC_Hygiene_Supplier]={16,1}g_TexturePositions.EntityCategories[EntityCategories.GC_Entertainment_Supplier]={1,4}g_TexturePositions.EntityCategories[EntityCategories.GC_Luxury_Supplier]={16,3}g_TexturePositions.EntityCategories[EntityCategories.GC_Weapon_Supplier]={1,7}g_TexturePositions.EntityCategories[EntityCategories.GC_Medicine_Supplier]={2,10}g_TexturePositions.EntityCategories[EntityCategories.Outpost]={12,3}g_TexturePositions.EntityCategories[EntityCategories.Spouse]={5,15}g_TexturePositions.EntityCategories[EntityCategories.CattlePasture]={3,16}g_TexturePositions.EntityCategories[EntityCategories.SheepPasture]={4,1}g_TexturePositions.EntityCategories[EntityCategories.Soldier]={7,12}g_TexturePositions.EntityCategories[EntityCategories.GrainField]={14,2}g_TexturePositions.EntityCategories[EntityCategories.BeeHive]={2,1}g_TexturePositions.EntityCategories[EntityCategories.OuterRimBuilding]={3,4}g_TexturePositions.EntityCategories[EntityCategories.CityBuilding]={8,1}g_TexturePositions.EntityCategories[EntityCategories.Leader]={7,11}g_TexturePositions.EntityCategories[EntityCategories.Range]={9,8}g_TexturePositions.EntityCategories[EntityCategories.Melee]={9,7}g_TexturePositions.EntityCategories[EntityCategories.SiegeEngine]={2,15}g_TexturePositions.Entities[Entities.B_Beehive]={2,1}g_TexturePositions.Entities[Entities.B_Cathedral_Big]={3,12}g_TexturePositions.Entities[Entities.B_CattlePasture]={3,16}g_TexturePositions.Entities[Entities.B_GrainField_ME]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NA]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_NE]={1,13}g_TexturePositions.Entities[Entities.B_GrainField_SE]={1,13}g_TexturePositions.Entities[Entities.U_MilitaryBallista]={10,5}g_TexturePositions.Entities[Entities.B_Outpost]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_ME]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NA]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_NE]={12,3}g_TexturePositions.Entities[Entities.B_Outpost_SE]={12,3}g_TexturePositions.Entities[Entities.B_SheepPasture]={4,1}g_TexturePositions.Entities[Entities.U_SiegeEngineCart]={9,4}g_TexturePositions.Entities[Entities.U_Trebuchet]={9,1}g_TexturePositions.Needs[Needs.Medicine]={2,10}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_1]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_2]={4,7}g_TexturePositions.Technologies[Technologies.R_Castle_Upgrade_3]={4,7}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_1]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_2]={4,5}g_TexturePositions.Technologies[Technologies.R_Cathedral_Upgrade_3]={4,5}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_1]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_2]={4,6}g_TexturePositions.Technologies[Technologies.R_Storehouse_Upgrade_3]={4,6}g_TexturePositions.Buffs=g_TexturePositions.Buffs or{}g_TexturePositions.Buffs[Buffs.Buff_ClothesDiversity]={1,2}g_TexturePositions.Buffs[Buffs.Buff_EntertainmentDiversity]={1,4}g_TexturePositions.Buffs[Buffs.Buff_FoodDiversity]={1,1}g_TexturePositions.Buffs[Buffs.Buff_HygieneDiversity]={1,3}g_TexturePositions.Buffs[Buffs.Buff_Colour]={5,11}g_TexturePositions.Buffs[Buffs.Buff_Entertainers]={5,12}g_TexturePositions.Buffs[Buffs.Buff_ExtraPayment]={1,8}g_TexturePositions.Buffs[Buffs.Buff_Sermon]={4,14}g_TexturePositions.Buffs[Buffs.Buff_Spice]={5,10}g_TexturePositions.Buffs[Buffs.Buff_NoTaxes]={1,6}g_TexturePositions.GoodCategories=g_TexturePositions.GoodCategories or{}g_TexturePositions.GoodCategories[GoodCategories.GC_Ammunition]={10,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Animal]={4,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Clothes]={1,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Document]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Entertainment]={1,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Food]={1,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Gold]={1,8}g_TexturePositions.GoodCategories[GoodCategories.GC_Hygiene]={16,1}g_TexturePositions.GoodCategories[GoodCategories.GC_Luxury]={16,3}g_TexturePositions.GoodCategories[GoodCategories.GC_Medicine]={2,10}g_TexturePositions.GoodCategories[GoodCategories.GC_None]={15,16}g_TexturePositions.GoodCategories[GoodCategories.GC_RawFood]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_RawMedicine]={2,2}g_TexturePositions.GoodCategories[GoodCategories.GC_Research]={5,6}g_TexturePositions.GoodCategories[GoodCategories.GC_Resource]={3,4}g_TexturePositions.GoodCategories[GoodCategories.GC_Tools]={4,12}g_TexturePositions.GoodCategories[GoodCategories.GC_Water]={1,16}g_TexturePositions.GoodCategories[GoodCategories.GC_Weapon]={8,5}end;function Lib.Promotion.Config:InitTexturePositionsAddon()if Framework.GetGameExtraNo()~=0 then g_TexturePositions.Entities[Entities.B_GrainField_AS]={1,13}g_TexturePositions.Entities[Entities.B_Outpost_AS]={12,3}g_TexturePositions.Buffs[Buffs.Buff_Gems]={1,1,1}g_TexturePositions.Buffs[Buffs.Buff_MusicalInstrument]={1,3,1}g_TexturePositions.Buffs[Buffs.Buff_Olibanum]={1,2,1}end end;Lib.Promotion.Config.RequirementWidgets={[1]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Settlers",[2]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Goods",[3]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/RichBuildings",[4]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Castle",[5]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Storehouse",[6]="/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/Requirements/Cathedral"}if GoodCategories then Lib.Promotion.Config.GoodCategoryNames={[GoodCategories.GC_Ammunition]={de="Munition",en="Ammunition",fr="Munition"},[GoodCategories.GC_Animal]={de="Nutztiere",en="Livestock",fr="Animaux d'élevage"},[GoodCategories.GC_Clothes]={de="Kleidung",en="Clothes",fr="Vêtements"},[GoodCategories.GC_Document]={de="Dokumente",en="Documents",fr="Documents"},[GoodCategories.GC_Entertainment]={de="Unterhaltung",en="Entertainment",fr="Divertissement"},[GoodCategories.GC_Food]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_Gold]={de="Gold",en="Gold",fr="Or"},[GoodCategories.GC_Hygiene]={de="Hygieneartikel",en="Hygiene",fr="Hygiène"},[GoodCategories.GC_Luxury]={de="Dekoration",en="Decoration",fr="Décoration"},[GoodCategories.GC_Medicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_None]={de="Nichts",en="None",fr="Rien"},[GoodCategories.GC_RawFood]={de="Nahrungsmittel",en="Food",fr="Nourriture"},[GoodCategories.GC_RawMedicine]={de="Medizin",en="Medicine",fr="Médecine"},[GoodCategories.GC_Research]={de="Forschung",en="Research",fr="Recherche"},[GoodCategories.GC_Resource]={de="Rohstoffe",en="Resource",fr="Ressources"},[GoodCategories.GC_Tools]={de="Werkzeug",en="Tools",fr="Outils"},[GoodCategories.GC_Water]={de="Wasser",en="Water",fr="Eau"},[GoodCategories.GC_Weapon]={de="Waffen",en="Weapon",fr="Armes"}}end;if Buffs then Lib.Promotion.Config.BuffTypeNames={[Buffs.Buff_ClothesDiversity]={de="Vielfältige Kleidung",en="Clothes variety",fr="Diversité vestimentaire"},[Buffs.Buff_Colour]={de="Farben beschaffen",en="Obtain color",fr="Se procurer des couleurs"},[Buffs.Buff_Entertainers]={de="Gaukler anheuern",en="Hire entertainer",fr="Engager des saltimbanques"},[Buffs.Buff_EntertainmentDiversity]={de="Vielfältige Unterhaltung",en="Entertainment variety",fr="Diversité des divertissements"},[Buffs.Buff_ExtraPayment]={de="Sonderzahlung",en="Extra payment",fr="Paiement supplémentaire"},[Buffs.Buff_Festival]={de="Fest veranstalten",en="Hold Festival",fr="Organiser une fête"},[Buffs.Buff_FoodDiversity]={de="Vielfältige Nahrung",en="Food variety",fr="Diversité alimentaire"},[Buffs.Buff_HygieneDiversity]={de="Vielfältige Hygiene",en="Hygiene variety",fr="Diversité hygiénique"},[Buffs.Buff_NoTaxes]={de="Steuerbefreiung",en="No taxes",fr="Exonération fiscale"},[Buffs.Buff_Sermon]={de="Pregigt abhalten",en="Hold sermon",fr="Tenir des prêches"},[Buffs.Buff_Spice]={de="Salz beschaffen",en="Obtain salt",fr="Se procurer du sel"}}end;Lib.Promotion.Config.Description={Settlers={Title={de="Benötigte Siedler",en="Needed settlers",fr="Settlers nécessaires"},Text={de="- Benötigte Menge an Siedlern",en="- Needed number of settlers",fr="- Quantité de settlers nécessaire"}},RichBuildings={Title={de="Reiche Häuser",en="Rich city buildings",fr="Bâtiments riches"},Text={de="- Menge an reichen Stadtgebäuden",en="- Needed amount of rich city buildings",fr="- Quantité de bâtiments de la ville riches"}},Goods={Title={de="Waren lagern",en="Store Goods",fr="Entreposer des marchandises"},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},FullDecoratedBuildings={Title={de="Dekorierte Häuser",en="Decorated City buildings",fr="Bâtiments décorés"},Text={de="- Menge an voll dekorierten Gebäuden",en="- Amount of full decoraded city buildings",fr="- Quantité de bâtiments entièrement décorés"}},DecoratedBuildings={Title={de="Dekoration",en="Decoration",fr="Décoration"},Text={de="- Menge an Dekorationsgütern in der Siedlung",en="- Amount of decoration goods in settlement",fr="- Quantité de biens de décoration dans la ville"}},Headquarters={Title={de="Burgstufe",en="Castle level",fr="Niveau du château"},Text={de="- Benötigte Ausbauten der Burg",en="- Needed castle upgrades",fr="- Améliorations nécessaires du château"}},Storehouse={Title={de="Lagerhausstufe",en="Storehouse level",fr="Niveau de l'entrepôt"},Text={de="- Benötigte Ausbauten des Lagerhauses",en="- Needed storehouse upgrades",fr="- Améliorations nécessaires de l'entrepôt"}},Cathedrals={Title={de="Kirchenstufe",en="Cathedral level",fr="Niveau de la cathédrale"},Text={de="- Benötigte Ausbauten der Kirche",en="- Needed cathedral upgrades",fr="- Améliorations nécessaires de la cathédrale"}},Reputation={Title={de="Ruf der Stadt",en="City reputation",fr="Réputation de la ville"},Text={de="- Benötigter Ruf der Stadt",en="- Needed city reputation",fr="- Réputation de la ville nécessaire"}},EntityCategoryDefault={Title={de="",en="",fr=""},Text={de="- Benötigte Anzahl",en="- Needed amount",fr="- Nombre requis"}},Cattle={Title={de="Kühe",en="Cattle",fr="Vaches"},Text={de="- Benötigte Menge an Kühen",en="- Needed amount of cattle",fr="- Quantité de vaches nécessaire"}},Sheep={Title={de="Schafe",en="Sheeps",fr="Moutons"},Text={de="- Benötigte Menge an Schafen",en="- Needed amount of sheeps",fr="- Quantité de moutons nécessaire"}},Outposts={Title={de="Territorien",en="Territories",fr="Territoires"},Text={de="- Zu erobernde Territorien",en="- Territories to claim",fr="- Territoires à conquérir"}},CityBuilding={Title={de="Stadtgebäude",en="City buildings",fr="Bâtiment de la ville"},Text={de="- Menge benötigter Stadtgebäude",en="- Needed amount of city buildings",fr="- Quantité de bâtiments urbains nécessaires"}},OuterRimBuilding={Title={de="Rohstoffgebäude",en="Gatherer",fr="Cueilleur"},Text={de="- Menge benötigter Rohstoffgebäude",en="- Needed amount of gatherer",fr="- Quantité de bâtiments de matières premières nécessaires"}},FarmerBuilding={Title={de="Farmeinrichtungen",en="Farming structure",fr="Installations de la ferme"},Text={de="- Menge benötigter Nutzfläche",en="- Needed amount of farming structure",fr="- Quantité de surface utile nécessaire"}},Consume={Title={de="",en="",fr=""},Text={de="- Durch Siedler zu konsumierende Menge",en="- Amount to be consumed by the settlers",fr="- Quantité à consommer par les settlers"}},Products={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed amount",fr="- Quantité nécessaire"}},Buff={Title={de="Bonus aktivieren",en="Activate Buff",fr="Activer bonus"},Text={de="- Aktiviere diesen Bonus auf den Ruf der Stadt",en="- Raise the city reputatition with this buff",fr="- Active ce bonus sur la réputation de la ville"}},Leader={Title={de="Batalione",en="Battalions",fr="Battalions"},Text={de="- Menge an Batalionen unterhalten",en="- Battalions you need under your command",fr="- Maintenir une quantité de bataillons"}},Soldiers={Title={de="Soldaten",en="Soldiers",fr="Soldats"},Text={de="- Menge an Streitkräften unterhalten",en="- Soldiers you need under your command",fr="- Maintenir une quantité de forces armées"}},Worker={Title={de="Arbeiter",en="Workers",fr="Travailleurs"},Text={de="- Menge an arbeitender Bevölkerung",en="- Workers you need under your reign",fr="- Quantité de population au travail"}},Entities={Title={de="",en="",fr=""},Text={de="- Benötigte Menge",en="- Needed Amount",fr="- Quantité nécessaire"}},Buildings={Title={de="Gebäude",en="Buildings",fr="Bâtiments"},Text={de="- Gesamtmenge an Gebäuden",en="- Amount of buildings",fr="- Total des bâtiments"}},Weapons={Title={de="Waffen",en="Weapons",fr="Armes"},Text={de="- Benötigte Menge an Waffen",en="- Needed amount of weapons",fr="- Quantité d'armes nécessaire"}},HeavyWeapons={Title={de="Belagerungsgeräte",en="Siege Engines",fr="Matériel de siège"},Text={de="- Benötigte Menge an Belagerungsgeräten",en="- Needed amount of siege engine",fr="- Quantité de matériel de siège nécessaire"}},Spouse={Title={de="Ehefrauen",en="Spouses",fr="Épouses"},Text={de="- Benötigte Anzahl Ehefrauen in der Stadt",en="- Needed amount of spouses in your city",fr="- Nombre d'épouses nécessaires dans la ville"}}}Lib.Register("module/city/Promotion_API")Lib.Require("comfort/IsLocalScript")Lib.Register("module/faker/Technology_API")function AddCustomTechnology(e6,C,gN)Lib.Technology.Shared:AddCustomTechnology(e6,C,gN)end;API.AddCustomTechnology=AddCustomTechnology;Lib.Technology=Lib.Technology or{}Lib.Technology.Name="Technology"Lib.Technology.Global={}Lib.Technology.Local={}Lib.Technology.Shared={CustomTechnologySequence=0,CustomTechnologies={}}CONST_TECHNOLOGY_TO_INDEX={}Lib.Require("comfort/IsLocalScript")Lib.Require("core/Core")Lib.Require("module/faker/Technology_API")Lib.Register("module/faker/Technology")function Lib.Technology.Global:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Local=nil end;self.IsInstalled=true end;function Lib.Technology.Global:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Local:Initialize()if not self.IsInstalled then Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:InitNewTechnologies()Lib.Technology.Global=nil end;self.IsInstalled=true end;function Lib.Technology.Local:OnSaveGameLoaded()Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared:RestoreNewTechnologies()end;function Lib.Technology.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Technology.Shared:AddCustomTechnology(e6,C,gN)if Technologies[e6]then return end;self.CustomTechnologySequence=self.CustomTechnologySequence+1;local ku={e6,self.CustomTechnologySequence,gN,{},C}table.insert(self.CustomTechnologies,ku)Technologies[e6]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[e6]]=#self.CustomTechnologies;CONST_TECHNOLOGY_TO_INDEX[e6]=#self.CustomTechnologies;if IsLocalScript()then AddStringText("UI_ObjectNames/"..e6,C)g_TexturePositions.Technologies[Technologies[e6]]=gN else for f=1,8 do Logic.TechnologySetState(f,Technologies[e6],0)end end end;function Lib.Technology.Shared:IsCustomTechnology(kv)return kv>=1000 and CONST_TECHNOLOGY_TO_INDEX[kv]~=nil end;function Lib.Technology.Shared:OverwriteLogic()Lib.Technology.Shared.Orig_Logic_TechnologyGetState=Logic.TechnologyGetState;Logic.TechnologyGetState=function(n,kv)return Lib.Technology.Shared:GetTechnologyState(n,kv)end;if not IsLocalScript()then Lib.Technology.Shared.Orig_Logic_TechnologySetState=Logic.TechnologySetState;Logic.TechnologySetState=function(n,kv,dE)Lib.Technology.Shared:SetTechnologyState(n,kv,dE)end end end;function Lib.Technology.Shared:InitNewTechnologies()self.CustomTechnologySequence=0;for g,h in pairs(Technologies)do if self.CustomTechnologySequence<h then self.CustomTechnologySequence=h end end;self.CustomTechnologySequence=self.CustomTechnologySequence+1000-self.CustomTechnologySequence;for f=1,#self.CustomTechnologies do self.CustomTechnologySequence=self.CustomTechnologySequence+1;self.CustomTechnologies[f][2]=self.CustomTechnologySequence;local bk=self.CustomTechnologies[f]Technologies[bk[1]]=self.CustomTechnologySequence;CONST_TECHNOLOGY_TO_INDEX[Technologies[bk[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[bk[1]]=f;if IsLocalScript()then AddStringText("UI_ObjectNames/"..bk[1],bk[4])g_TexturePositions.Technologies[Technologies[bk[1]]]=bk[3]end end end;function Lib.Technology.Shared:RestoreNewTechnologies()for f=1,#self.CustomTechnologies do local bk=self.CustomTechnologies[f]Technologies[bk[1]]=bk[2]CONST_TECHNOLOGY_TO_INDEX[Technologies[bk[1]]]=f;CONST_TECHNOLOGY_TO_INDEX[bk[1]]=f end end;function Lib.Technology.Shared:GetTechnologyState(n,kv)if kv and self:IsCustomTechnology(kv)then local ax=CONST_TECHNOLOGY_TO_INDEX[kv]if self.CustomTechnologies[ax]then return self.CustomTechnologies[ax][4][n]or TechnologyStates.Locked end end;return self.Orig_Logic_TechnologyGetState(n,kv)end;function Lib.Technology.Shared:SetTechnologyState(n,kv,dE)if kv and self:IsCustomTechnology(kv)then local ax=CONST_TECHNOLOGY_TO_INDEX[kv]if self.CustomTechnologies[ax]then self.CustomTechnologies[ax][4][n]=dE;RequestHiResDelay(1,ExecuteLocal,[[Lib.Technology.Shared.CustomTechnologies[%d][4][%d] = %d]],ax,n,dE)return end end;self.Orig_Logic_TechnologySetState(n,kv,dE)end;RegisterModule(Lib.Technology.Name)Lib.Promotion=Lib.Promotion or{}Lib.Promotion.Name="Promotion"Lib.Promotion.Global={}Lib.Promotion.Local={}Lib.Promotion.Shared={TechnologiesToResearch={},TechnologyConfig={{"R_MilitarySword","UI_ObjectNames/BuySwordfighters",{9,7,0},0},{"R_MilitaryBow","UI_ObjectNames/BuyBowmen",{9,8,0},0}}}CONST_REQUIREMENT_TOOLTIP_TYPE={}CONST_CONSUMED_GOODS_COUNTER={}Lib.Require("core/Core")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UITools")Lib.Require("module/city/Promotion_API")Lib.Require("module/city/Promotion_Config")Lib.Require("module/city/Promotion_Helper")Lib.Require("module/city/Promotion_Requirements")Lib.Register("module/city/Promotion")function Lib.Promotion.Global:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()Lib.Promotion.Shared:InitRelatedTechnologies()Lib.Promotion.Shared:OverwriteTitleTechnologyUpdate()self:OverrideKnightTitleChanged()self:OverwriteConsumedGoods()Lib.Promotion.Local=nil end;self.IsInstalled=true end;function Lib.Promotion.Global:OnSaveGameLoaded()end;function Lib.Promotion.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()for f=1,8 do ActivateNeedsAndRightsForPlayerByKnightTitle(f,0)end;self.LoadscreenClosed=true elseif aM==Report.KnightTitleChanged then self:UnlockRelatedTechnologies(arg[1],arg[2])local kw=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=kw or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aM==Report.GoodsConsumed then local q=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(q,arg[2])end end;function Lib.Promotion.Global:RegisterConsumedGoods(n,kx)CONST_CONSUMED_GOODS_COUNTER[n]=CONST_CONSUMED_GOODS_COUNTER[n]or{}CONST_CONSUMED_GOODS_COUNTER[n][kx]=CONST_CONSUMED_GOODS_COUNTER[n][kx]or 0;CONST_CONSUMED_GOODS_COUNTER[n][kx]=CONST_CONSUMED_GOODS_COUNTER[n][kx]+1 end;function Lib.Promotion.Global:OverrideKnightTitleChanged()GameCallback_KnightTitleChanged_Orig_Promo=GameCallback_KnightTitleChanged;GameCallback_KnightTitleChanged=function(n,ky)GameCallback_KnightTitleChanged_Orig_Promo(n,ky)SendReport(Report.KnightTitleChanged,n,ky)SendReportToLocal(Report.KnightTitleChanged,n,ky)end end;function Lib.Promotion.Global:OverwriteConsumedGoods()GameCallback_ConsumeGood_Orig_Promo=GameCallback_ConsumeGood;GameCallback_ConsumeGood=function(kz,kx,kA)GameCallback_ConsumeGood_Orig_Promo(kz,kx,kA)SendReport(Report.GoodsConsumed,kz,kx,kA)SendReportToLocal(Report.GoodsConsumed,kz,kx,kA)end end;function Lib.Promotion.Global:UnlockRelatedTechnologies(n,ky)if NeedsAndRightsByKnightTitle[ky]then for g,h in pairs(NeedsAndRightsByKnightTitle[ky][4])do if Lib.Promotion.Shared.TechnologiesToResearch[h]then for s,ku in pairs(Lib.Promotion.Shared.TechnologiesToResearch[h])do if Logic.TechnologyGetState(n,ku)==0 or Logic.TechnologyGetState(n,ku)==2 then Logic.TechnologySetState(n,ku,3)end end end end end end;function Lib.Promotion.Local:Initialize()if not self.IsInstalled then Report.KnightTitleChanged=CreateReport("Event_KnightTitleChanged")Report.GoodsConsumed=CreateReport("Event_GoodsConsumed")Lib.Promotion.Shared:CreateTechnologies()Lib.Promotion.Shared:UpdateInvisibleTechnologies()Lib.Promotion.Shared:InitRelatedTechnologies()Lib.Promotion.Shared:OverwriteTitleTechnologyUpdate()self:InitTexturePositions()self:OverwriteUpdateRequirements()self:OverwriteTooltips()Lib.Promotion.Global=nil end;self.IsInstalled=true end;function Lib.Promotion.Local:OnSaveGameLoaded()end;function Lib.Promotion.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then Lib.Promotion.Helper.OverwritePromotionHelper()InitKnightTitleTables=InitKnightTitleTablesOverwrite;InitKnightTitleTables()self.LoadscreenClosed=true elseif aM==Report.KnightTitleChanged then local kw=CONST_CONSUMED_GOODS_COUNTER[arg[1]]CONST_CONSUMED_GOODS_COUNTER[arg[1]]=kw or{}for g,h in pairs(CONST_CONSUMED_GOODS_COUNTER[arg[1]])do CONST_CONSUMED_GOODS_COUNTER[arg[1]][g]=0 end elseif aM==Report.GoodsConsumed then local q=Logic.EntityGetPlayer(arg[1])self:RegisterConsumedGoods(q,arg[2])end end;function Lib.Promotion.Local:RegisterConsumedGoods(n,kx)CONST_CONSUMED_GOODS_COUNTER[n]=CONST_CONSUMED_GOODS_COUNTER[n]or{}CONST_CONSUMED_GOODS_COUNTER[n][kx]=CONST_CONSUMED_GOODS_COUNTER[n][kx]or 0;CONST_CONSUMED_GOODS_COUNTER[n][kx]=CONST_CONSUMED_GOODS_COUNTER[n][kx]+1 end;function Lib.Promotion.Local:InitTexturePositions()Lib.Promotion.Config:InitTexturePositions()Lib.Promotion.Config:InitTexturePositionsAddon()end;function Lib.Promotion.Local:OverwriteUpdateRequirements()GUI_Knight.UpdateRequirements=function()local kB=Lib.Promotion.Config.RequirementWidgets;local kC=1;local q=GUI.GetPlayerID()local kD=Logic.GetKnightTitle(q)local kE=kD+1;local cH=Logic.GetKnightID(q)local cJ=Logic.GetEntityType(cH)XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitle","{center}"..GUI_Knight.GetTitleNameByTitleID(cJ,kE))XGUIEng.SetText("/InGame/Root/Normal/AlignBottomRight/KnightTitleMenu/NextKnightTitleWhite","{center}"..GUI_Knight.GetTitleNameByTitleID(cJ,kE))if KnightTitleRequirements[kE].Settlers~=nil then ChangeIcon(kB[kC].."/Icon",{5,16})local kF,kG,k1=DoesNeededNumberOfSettlersForKnightTitleExist(q,kE)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Settlers"kC=kC+1 end;if KnightTitleRequirements[kE].RichBuildings~=nil then ChangeIcon(kB[kC].."/Icon",{8,4})local kF,kG,k1=DoNeededNumberOfRichBuildingsForKnightTitleExist(q,kE)if k1==-1 then k1=Logic.GetNumberOfPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)end;XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="RichBuildings"kC=kC+1 end;if KnightTitleRequirements[kE].Headquarters~=nil then ChangeIcon(kB[kC].."/Icon",{4,7})local kF,kG,k1=DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,kE,EntityCategories.Headquarters)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG+1 .."/"..k1+1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Headquarters"kC=kC+1 end;if KnightTitleRequirements[kE].Storehouse~=nil then ChangeIcon(kB[kC].."/Icon",{4,6})local kF,kG,k1=DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,kE,EntityCategories.Storehouse)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG+1 .."/"..k1+1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Storehouse"kC=kC+1 end;if KnightTitleRequirements[kE].Cathedrals~=nil then ChangeIcon(kB[kC].."/Icon",{4,5})local kF,kG,k1=DoNeededSpecialBuildingUpgradeForKnightTitleExist(q,kE,EntityCategories.Cathedrals)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG+1 .."/"..k1+1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Cathedrals"kC=kC+1 end;if KnightTitleRequirements[kE].FullDecoratedBuildings~=nil then local kF,kG,k1=DoNeededNumberOfFullDecoratedBuildingsForKnightTitleExist(q,kE)local k0=KnightTitleRequirements[kE].FullDecoratedBuildings;ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Needs[Needs.Wealth])XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="FullDecoratedBuildings"kC=kC+1 end;if KnightTitleRequirements[kE].Reputation~=nil then ChangeIcon(kB[kC].."/Icon",{5,14})local kF,kG,k1=DoesNeededCityReputationForKnightTitleExist(q,kE)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Reputation"kC=kC+1 end;if KnightTitleRequirements[kE].Goods~=nil then for f=1,#KnightTitleRequirements[kE].Goods do local bj=KnightTitleRequirements[kE].Goods[f][1]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Goods[bj])local kF,kG,k1=DoesNeededNumberOfGoodTypesForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Goods"..f;kC=kC+1 end end;if KnightTitleRequirements[kE].Category~=nil then for f=1,#KnightTitleRequirements[kE].Category do local kH=KnightTitleRequirements[kE].Category[f][1]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.EntityCategories[kH])local kF,kG,k1=DoesNeededNumberOfEntitiesInCategoryForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)local kq={Logic.GetEntityTypesInCategory(kH)}if Logic.IsEntityTypeInCategory(kq[1],EntityCategories.GC_Weapon_Supplier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Weapons"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.SiegeEngine)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="HeavyWeapons"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.Spouse)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Spouse"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.Worker)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Worker"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.Soldier)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Soldiers"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.Leader)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Leader"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.Outpost)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Outposts"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.CattlePasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Cattle"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.SheepPasture)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Sheep"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.CityBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="CityBuilding"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.OuterRimBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="OuterRimBuilding"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.GrainField)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.BeeHive)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="FarmerBuilding"..f elseif Logic.IsEntityTypeInCategory(kq[1],EntityCategories.AttackableBuilding)==1 then CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Buildings"..f else CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="EntityCategoryDefault"..f end;kC=kC+1 end end;if KnightTitleRequirements[kE].Entities~=nil then for f=1,#KnightTitleRequirements[kE].Entities do local cM=KnightTitleRequirements[kE].Entities[f][1]local cN=Logic.GetEntityTypeName(cM)ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Entities[cM])local kF,kG,k1=DoesNeededNumberOfEntitiesOfTypeForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)local kI="Entities"..f;if cN=="B_Beehive"or cN:find("GrainField")or cN:find("Pasture")then kI="FarmerBuilding"..f end;CONST_REQUIREMENT_TOOLTIP_TYPE[kC]=kI;kC=kC+1 end end;if KnightTitleRequirements[kE].Consume~=nil then for f=1,#KnightTitleRequirements[kE].Consume do local bj=KnightTitleRequirements[kE].Consume[f][1]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Goods[bj])local kF,kG,k1=DoNeededNumberOfConsumedGoodsForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Consume"..f;kC=kC+1 end end;if KnightTitleRequirements[kE].Products~=nil then for f=1,#KnightTitleRequirements[kE].Products do local kJ=KnightTitleRequirements[kE].Products[f][1]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.GoodCategories[kJ])local kF,kG,k1=DoNumberOfProductsInCategoryExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Products"..f;kC=kC+1 end end;if KnightTitleRequirements[kE].Buff~=nil then for f=1,#KnightTitleRequirements[kE].Buff do local bz=KnightTitleRequirements[kE].Buff[f]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Buffs[bz])local kF=DoNeededDiversityBuffForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","")if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Buff"..f;kC=kC+1 end end;if KnightTitleRequirements[kE].Custom~=nil then for f=1,#KnightTitleRequirements[kE].Custom do local kK;local kL=table.copy(KnightTitleRequirements[kE].Custom[f][2])if type(kL[3])=="string"then kK=kL[3]kL[3]=0 end;ChangeIcon(kB[kC].."/Icon",kL,nil,kK)local kF,kG,k1=DoCustomFunctionForKnightTitleSucceed(q,kE,f)if kG and k1 then XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)else XGUIEng.SetText(kB[kC].."/Amount","")end;if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="Custom"..f;kC=kC+1 end end;if KnightTitleRequirements[kE].DecoratedBuildings~=nil then for f=1,#KnightTitleRequirements[kE].DecoratedBuildings do local bj=KnightTitleRequirements[kE].DecoratedBuildings[f][1]ChangeIcon(kB[kC].."/Icon",g_TexturePositions.Goods[bj])local kF,kG,k1=DoNeededNumberOfDecoratedBuildingsForKnightTitleExist(q,kE,f)XGUIEng.SetText(kB[kC].."/Amount","{center}"..kG.."/"..k1)if kF then XGUIEng.ShowWidget(kB[kC].."/Done",1)else XGUIEng.ShowWidget(kB[kC].."/Done",0)end;XGUIEng.ShowWidget(kB[kC],1)CONST_REQUIREMENT_TOOLTIP_TYPE[kC]="DecoratedBuildings"..f;kC=kC+1 end end;for f=kC,6 do XGUIEng.ShowWidget(kB[f],0)end end end;function Lib.Promotion.Local:OverwriteTooltips()GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(...)local d4=XGUIEng.GetCurrentWidgetID()for g,h in pairs(Lib.Promotion.Config.RequirementWidgets)do if h.."/Icon"==XGUIEng.GetWidgetPathByID(d4)then local am=CONST_REQUIREMENT_TOOLTIP_TYPE[g]local eJ=tonumber(string.sub(am,string.len(am)))if eJ~=nil then am=string.sub(am,1,string.len(am)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(am,eJ)return end end;GUI_Tooltip.SetNameAndDescription_Orig_QSB_Requirements(...)end;GUI_Knight.RewardTooltip=function(kM)Lib.Promotion.Local:RewardTooltipWrapped(kM)end;GUI_Knight.RequiredGoodTooltip=function()local am=CONST_REQUIREMENT_TOOLTIP_TYPE[2]local eJ=tonumber(string.sub(am,string.len(am)))if eJ~=nil then am=string.sub(am,1,string.len(am)-1)end;Lib.Promotion.Local:RequirementTooltipWrapped(am,eJ)end;Lib.Promotion.Config:InitAddonText()end;function Lib.Promotion.Local:RewardTooltipWrapped(j_)local kN=GUI_Knight.NextRightsForTitle[j_]local kO=GetNameOfKeyInTable(Technologies,kN)local Name=string.gsub(kO,"R_","")local kP=""local bn="B_"..Name;if GetStringText("UI_ObjectNames/"..bn)==""then bn="U_"..Name end;if GetStringText("UI_ObjectNames/"..bn)==""then bn="Start"..Name end;if GetStringText("UI_ObjectNames/"..bn)==""then bn="R_"..Name end;kP=GetStringText("UI_ObjectNames/"..bn)SetTooltipNormal(Localize(kP),"")end;function Lib.Promotion.Local:RequirementTooltipWrapped(e5,j_)local q=GUI.GetPlayerID()local b3=Logic.GetKnightTitle(q)local hO=""local bq=""if e5=="Consume"or e5=="Goods"or e5=="DecoratedBuildings"then local bj=KnightTitleRequirements[b3+1][e5][j_][1]local kQ=Logic.GetGoodTypeName(bj)local kR=GetStringText("UI_ObjectNames/"..kQ)if kR==nil then kR="Goods."..kQ end;hO=kR;bq=Lib.Promotion.Config.Description[e5].Text elseif e5=="Products"then local kS=Lib.Promotion.Config.GoodCategoryNames;local kH=KnightTitleRequirements[b3+1][e5][j_][1]local kT=Localize(kS[kH])if kT==nil then kT="ERROR: Name missng!"end;hO=kT;bq=Lib.Promotion.Config.Description[e5].Text elseif e5=="Entities"then local cM=KnightTitleRequirements[b3+1][e5][j_][1]local cN=Logic.GetEntityTypeName(cM)local kU=GetStringText("Names/"..cN)if kU==nil then kU="Entities."..cN end;hO=kU;bq=Lib.Promotion.Config.Description[e5].Text elseif e5=="Custom"then local kV=KnightTitleRequirements[b3+1].Custom[j_]hO=kV[3]bq=kV[4]elseif e5=="Buff"then local kW=Lib.Promotion.Config.BuffTypeNames;local kX=KnightTitleRequirements[b3+1][e5][j_]local kY=Localize(kW[kX])if kY==nil then kY="ERROR: Name missng!"end;hO=kY;bq=Lib.Promotion.Config.Description[e5].Text else hO=Lib.Promotion.Config.Description[e5].Title;bq=Lib.Promotion.Config.Description[e5].Text end;SetTooltipNormal(Localize(hO),Localize(bq),nil)end;InitKnightTitleTables=function()NeedsAndRightsByKnightTitle={}KnightTitleRequirements={}end;function Lib.Promotion.Shared:UpdateInvisibleTechnologies()if not IsLocalScript()then return end;if TechnologiesNotShownForKnightTitle==nil then TechnologiesNotShownForKnightTitle={}TechnologiesNotShownForKnightTitle[Technologies.R_Nutrition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Clothes]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Hygiene]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Entertainment]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Wealth]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Prosperity]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Military]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Column]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_Pavilion]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueDario]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueFamily]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueProduction]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SpecialEdition_StatueSettler]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Victory]=true;TechnologiesNotShownForKnightTitle[Technologies.R_Barracks]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BarracksArchers]=true;TechnologiesNotShownForKnightTitle[Technologies.R_BowMaker]=true;TechnologiesNotShownForKnightTitle[Technologies.R_SwordSmith]=true end;if g_GameExtraNo>0 and Technologies.R_CallGeologist then TechnologiesNotShownForKnightTitle[Technologies.R_CallGeologist]=true end end;function Lib.Promotion.Shared:OverwriteTitleTechnologyUpdate()CreateTechnologyKnightTitleTable=function()KnightTitleNeededForTechnology={}for b3=0,#NeedsAndRightsByKnightTitle do local b4=NeedsAndRightsByKnightTitle[b3][4]if b4~=nil then for f=1,#b4 do local kN=b4[f]KnightTitleNeededForTechnology[kN]=b3;local kZ=Lib.Promotion.Shared.TechnologiesToResearch;if kZ[kN]then for b8=1,#kZ[kN]do RelativeType=kZ[kN][b8]KnightTitleNeededForTechnology[RelativeType]=b3 end end end end end end end;function Lib.Promotion.Shared:InitRelatedTechnologies()self.TechnologiesToResearch[Technologies.R_MilitaryBow]={Technologies.R_BarracksArchers,Technologies.R_BowMaker}self.TechnologiesToResearch[Technologies.R_MilitarySword]={Technologies.R_Barracks,Technologies.R_SwordSmith}end;function Lib.Promotion.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])end end end end;RegisterModule(Lib.Promotion.Name)Lib.Register("module/io/IO_Behavior")function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(bh,bi)if bh==0 then assert(bi~=nil and bi~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if bi~=nil and bi~=""then table.insert(self.ScriptNames,bi)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,bg)local w=GetID(self.ScriptName)if w==0 then return end;CONST_INITIALIZED_OBJECTS[w]=bg.Identifier;local k_;if self.RewardType and self.RewardType~="-"then k_={Goods[self.RewardType],self.RewardAmount}end;local l0;if self.FirstCostType and self.FirstCostType~="-"then l0=k_ or{}table.insert(l0,Goods[self.FirstCostType])table.insert(l0,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then l0=k_ or{}table.insert(l0,Goods[self.SecondCostType])table.insert(l0,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=k_,Costs=l0}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IO_API")function SetupObject(gI)if GUI then return end;return Lib.IO.Global:CreateObject(gI)end;API.CreateObject=SetupObject;function DisposeObject(dD)if GUI or not CONST_IO[dD]then return end;Lib.IO.Global:DestroyObject(dD)end;API.DisposeObject=DisposeObject;function ResetObject(dD)if GUI or not CONST_IO[dD]then return end;Lib.IO.Global:ResetObject(dD)InteractiveObjectDeactivate(dD)end;API.ResetObject=ResetObject;function InteractiveObjectAddCustomName(e6,dG)local l1=Entities[e6]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectSetQuestName("%s", %s)]],e6,type(dG)=="table"and table.tostring(dG)or"\""..dG.."\"")return end;AddStringText(l1 ..e6,dG)end;API.InteractiveObjectSetQuestName=InteractiveObjectAddCustomName;function InteractiveObjectDeleteCustomName(e6)local l1=Entities[e6]and"UI_Names/"or"Names/"if not IsLocalScript()then ExecuteLocal([[InteractiveObjectDeleteCustomName("%s")]],e6)return end;DeleteStringText(l1 ..e6)end;API.InteractiveObjectUnsetQuestName=InteractiveObjectDeleteCustomName;function AllowActivateIronMines(n,l2)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(n,Technologies.R_RefillIronMine,l2 and 3 or 1)end;API.AllowActivateIronMines=AllowActivateIronMines;function RequireTitleToRefilIronMines(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillIronMine)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_RefillIronMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillIronMine,0)end end;API.RequireTitleToRefilIronMines=RequireTitleToRefilIronMines;function AllowActivateStoneMines(n,l2)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(n,Technologies.R_RefillStoneMine,l2 and 3 or 1)end;API.AllowActivateStoneMines=AllowActivateStoneMines;function RequireTitleToRefilStoneMines(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillStoneMine)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_RefillStoneMine)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillStoneMine,0)end end;API.RequireTitleToRefilStoneMines=RequireTitleToRefilStoneMines;function AllowActivateCisterns(n,l2)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(n,Technologies.R_RefillCistern,l2 and 3 or 1)end;API.AllowActivateCisterns=AllowActivateCisterns;function RequireTitleToRefilCisterns(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RefillCistern)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_RefillCistern)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RefillCisternMine,0)end end;API.RequireTitleToRefilCisterns=RequireTitleToRefilCisterns;function AllowActivateTradepost(n,l2)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(n,Technologies.R_Tradepost,l2 and 3 or 1)end;API.AllowActivateTradepost=AllowActivateTradepost;function RequireTitleToBuildTradeposts(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Tradepost)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_Tradepost)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Tradepost,0)end end;API.RequireTitleToBuildTradeposts=RequireTitleToBuildTradeposts;InteractiveObjectActivate=function(dD,dE,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[dD]then local l3=CONST_IO[dD].Slave or dD;if CONST_IO[dD].Slave then CONST_IO_SLAVE_STATE[l3]=1;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 1]],l3))end;Lib.IO.Global:SetObjectState(l3,dE,unpack(arg))CONST_IO[dD].IsActive=true;ExecuteLocal([[CONST_IO["%s"].IsActive = true]],dD)else Lib.IO.Global:SetObjectState(dD,dE,unpack(arg))end end end;API.InteractiveObjectActivate=InteractiveObjectActivate;InteractiveObjectDeactivate=function(dD,...)arg=arg or{1}if not IsLocalScript()then if CONST_IO[dD]then local l3=CONST_IO[dD].Slave or dD;if CONST_IO[dD].Slave then CONST_IO_SLAVE_STATE[l3]=0;Logic.ExecuteInLuaLocalState(string.format([[CONST_IO_SLAVE_STATE["%s"] = 0]],l3))end;Lib.IO.Global:SetObjectState(l3,2,unpack(arg))CONST_IO[dD].IsActive=false;ExecuteLocal([[CONST_IO["%s"].IsActive = false]],dD)else Lib.IO.Global:SetObjectState(dD,2,unpack(arg))end end end;API.InteractiveObjectDeactivate=InteractiveObjectDeactivate;function Debug_EnableIO(l,dE,n)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugEnableObject,l,dE,n)end;function Debug_DisableIO(l,dE,n)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugDisableObject,l,dE,n)end;function Debug_InitIO(l,l4,l5,l6,l7,l8,l9)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugInitObject,l,l4,l5,l6,l7,l8,l9)end;Lib.IO=Lib.IO or{}Lib.IO.Name="IO"Lib.IO.Global={SlaveSequence=0}Lib.IO.Local={Data={}}Lib.IO.Shared={TechnologyConfig={{"R_CallGeologist",{de="Geologen rufen",en="Order geologist",fr="Ordre géologue"},{8,1,1},1},{"R_RefillIronMine",{de="Eisenmine auffüllen",en="Refill mine",fr="Recharger le mien"},{8,2,1},1},{"R_RefillStoneMine",{de="Steinbruch auffüllen",en="Refill quarry",fr="Carrière de recharge"},{8,3,1},1},{"R_RefillCistern",{de="Brunnen auffüllen",en="Refill well",fr="Bien remplir"},{8,4,1},1},{"R_Tradepost",{de="Handelsposten bauen",en="Build Tradepost",fr="Route commerciale"},{3,1,1},1}}}CONST_IO={}CONST_IO_SLAVE_TO_MASTER={}CONST_IO_SLAVE_STATE={}CONST_IO_LAST_OBJECT=0;CONST_IO_LAST_HERO=0;Lib.Require("comfort/GetClosestToTarget")Lib.Require("comfort/IsLocalScript")Lib.Require("comfort/IsHistoryEdition")Lib.Require("comfort/ReplaceEntity")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/faker/Technology")Lib.Require("module/io/IO_API")Lib.Require("module/io/IO_Behavior")Lib.Register("module/io/IO")function Lib.IO.Global:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Report.Internal_DebugEnableObject=CreateReport("Event_Internal_DebugEnableObject")Report.Internal_DebugDisableObject=CreateReport("Event_Internal_DebugDisableObject")Report.Internal_DebugInitObject=CreateReport("Event_Internal_DebugInitObject")Lib.IO.Shared:CreateTechnologies()self:OverrideObjectInteraction()self:StartObjectDestructionController()self:StartObjectConditionController()Lib.IO.Local=nil end;self.IsInstalled=true end;function Lib.IO.Global:OnSaveGameLoaded()end;function Lib.IO.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ObjectInteraction then self:OnObjectInteraction(arg[1],arg[2],arg[3])elseif aM==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif aM==Report.Internal_DebugEnableObject then error(IsExisting(arg[1]),"object "..arg[1].." does not exist!")InteractiveObjectActivate(arg[1],arg[2],arg[3])elseif aM==Report.Internal_DebugDeableObject then error(IsExisting(arg[1]),"object "..arg[1].." does not exist!")InteractiveObjectDeactivate(arg[1],arg[2],arg[3])elseif aM==Report.Internal_DebugInitObject then error(IsExisting(arg[1]),"object "..arg[1].." does not exist!")local Reward=arg[2]~=nil and{arg[2],arg[3]}local hd=arg[4]~=nil and{arg[4],arg[5],arg[6],arg[7]}API.SetupObject({Name=arg[1],Costs=hd,Reward=Reward,Waittime=0,State=0})end end;function Lib.IO.Global:OnObjectInteraction(dD,iV,n)CONST_IO_LAST_OBJECT=GetID(dD)CONST_IO_LAST_HERO=iV;if CONST_IO_SLAVE_TO_MASTER[dD]then dD=CONST_IO_SLAVE_TO_MASTER[dD]end;if CONST_IO[dD]then CONST_IO[dD].IsUsed=true;ExecuteLocal([[
            local ScriptName = "%s"
            if CONST_IO[ScriptName] then
                CONST_IO[ScriptName].IsUsed = true
            end
        ]],dD)if CONST_IO[dD].Replacement then ReplaceEntity(dD,CONST_IO[dD].Replacement)end;if CONST_IO[dD].Action then CONST_IO[dD]:Action(n,iV)end end end;function Lib.IO.Global:CreateObject(gI)local ar=GetID(gI.ScriptName)if ar==0 then return end;self:DestroyObject(gI.ScriptName)local j=Logic.GetEntityTypeName(Logic.GetEntityType(ar))if j and not j:find("^I_X_")then self:CreateSlaveObject(gI)end;gI.IsActive=true;gI.IsUsed=false;gI.Player=gI.Player or{1,2,3,4,5,6,7,8}gI.State=gI.State or 0;gI.Waittime=gI.Waittime or 5;gI.Distance=gI.Distance or 1000;CONST_IO[gI.ScriptName]=gI;ExecuteLocal([[CONST_IO["%s"] = %s]],gI.ScriptName,table.tostring(CONST_IO[gI.ScriptName]))self:SetupObject(gI)return gI end;function Lib.IO.Global:DestroyObject(dD)if not CONST_IO[dD]then return end;if CONST_IO[dD].Slave then CONST_IO_SLAVE_TO_MASTER[CONST_IO[dD].Slave]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],CONST_IO[dD].Slave)CONST_IO_SLAVE_STATE[CONST_IO[dD].Slave]=nil;DestroyEntity(CONST_IO[dD].Slave)end;self:SetObjectState(dD,2)SendReport(Report.ObjectDelete,dD)SendReportToLocal(Report.ObjectDelete,dD)ExecuteLocal([[CONST_IO["%s"] = nil]],dD)CONST_IO[dD]=nil end;function Lib.IO.Global:CreateSlaveObject(la)local Name;for g,h in pairs(CONST_IO_SLAVE_TO_MASTER)do if h==la.ScriptName and IsExisting(g)then Name=g end end;if Name==nil then self.SlaveSequence=self.SlaveSequence+1;Name="LIB_IO_SlaveObject_"..self.SlaveSequence end;local lb=GetID(Name)if not IsExisting(Name)then local E,F,G=Logic.EntityGetPos(GetID(la.ScriptName))lb=Logic.CreateEntity(Entities.I_X_DragonBoatWreckage,E,F,0,0)Logic.SetModel(lb,Models.Effects_E_Mosquitos)Logic.SetEntityName(lb,Name)CONST_IO_SLAVE_TO_MASTER[Name]=la.ScriptName;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = "%s"]],Name,la.ScriptName)la.Slave=Name end;CONST_IO_SLAVE_STATE[Name]=1;return lb end;function Lib.IO.Global:SetupObject(la)local ar=GetID(la.Slave and la.Slave or la.ScriptName)Logic.InteractiveObjectClearCosts(ar)Logic.InteractiveObjectClearRewards(ar)Logic.InteractiveObjectSetInteractionDistance(ar,la.Distance)Logic.InteractiveObjectSetTimeToOpen(ar,la.Waittime)local lc=la.RewardResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetRewardResourceCartType(ar,lc)local ld=la.RewardGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetRewardGoldCartType(ar,ld)local le=la.CostResourceCartType or Entities.U_ResourceMerchant;Logic.InteractiveObjectSetCostResourceCartType(ar,le)local lf=la.CostGoldCartType or Entities.U_GoldCart;Logic.InteractiveObjectSetCostGoldCartType(ar,lf)if la.Reward then Logic.InteractiveObjectAddRewards(ar,la.Reward[1],la.Reward[2])end;if la.Costs and la.Costs[1]then Logic.InteractiveObjectAddCosts(ar,la.Costs[1],la.Costs[2])end;if la.Costs and la.Costs[3]then Logic.InteractiveObjectAddCosts(ar,la.Costs[3],la.Costs[4])end;table.insert(HiddenTreasures,ar)InteractiveObjectActivate(Logic.GetEntityName(ar),la.State or 0)end;function Lib.IO.Global:ResetObject(dD)local ar=GetID(CONST_IO[dD].Slave and CONST_IO[dD].Slave or dD)RemoveInteractiveObjectFromOpenedList(ar)table.insert(HiddenTreasures,ar)Logic.InteractiveObjectSetAvailability(ar,true)self:SetObjectState(ar,CONST_IO[dD].State or 0)CONST_IO[dD].IsUsed=false;CONST_IO[dD].IsActive=true;SendReport(Report.ObjectReset,dD)SendReportToLocal(Report.ObjectReset,dD)end;function Lib.IO.Global:SetObjectState(dD,dE,...)arg=(not arg or#arg==0)and{1,2,3,4,5,6,7,8}or arg;for f=1,8 do Logic.InteractiveObjectSetPlayerState(GetID(dD),f,2)end;for f=1,#arg,1 do Logic.InteractiveObjectSetPlayerState(GetID(dD),arg[f],dE)end;Logic.InteractiveObjectSetAvailability(GetID(dD),dE~=2)end;function Lib.IO.Global:OverrideObjectInteraction()GameCallback_OnObjectInteraction=function(at,n)OnInteractiveObjectOpened(at,n)OnTreasureFound(at,n)local aW=Logic.GetEntityName(at)if CONST_IO_SLAVE_TO_MASTER[aW]then aW=CONST_IO_SLAVE_TO_MASTER[aW]end;local iY={}Logic.GetKnights(n,iY)local cH=GetClosestToTarget(at,iY)SendReport(Report.ObjectInteraction,aW,cH,n)SendReportToLocal(Report.ObjectInteraction,aW,cH,n)end;QuestTemplate.AreObjectsActivated=function(self,lg)for f=1,lg[0]do if not lg[-f]then lg[-f]=GetID(lg[f])end;local kU=Logic.GetEntityName(lg[-f])if CONST_IO_SLAVE_TO_MASTER[kU]then kU=CONST_IO_SLAVE_TO_MASTER[kU]end;if CONST_IO[kU]then if CONST_IO[kU].IsUsed~=true then return false end elseif Logic.IsInteractiveObject(lg[-f])then if not IsInteractiveObjectOpen(lg[-f])then return false end end end;return true end end;function Lib.IO.Global:ProcessChatInput(dG)if IsHistoryEdition()then local g5=Lib.Core.Debug:CommandTokenizer(dG)for f=1,#g5,1 do if g5[f][1]=="enableobject"then local State=g5[f][3]and tonumber(g5[f][3])or nil;local q=g5[f][4]and tonumber(g5[f][4])or nil;error(IsExisting(g5[f][2]),"object "..g5[f][2].." does not exist!")InteractiveObjectActivate(g5[f][2],State,q)log("activated object "..g5[f][2]..".")elseif g5[f][1]=="disableobject"then local q=g5[f][3]and tonumber(g5[f][3])or nil;error(IsExisting(g5[f][2]),"object "..g5[f][2].." does not exist!")InteractiveObjectDeactivate(g5[f][2],q)log("deactivated object "..g5[f][2]..".")elseif g5[f][1]=="initobject"then error(IsExisting(g5[f][2]),"object "..g5[f][2].." does not exist!")API.SetupObject({Name=g5[f][2],Waittime=0,State=0})log("quick initalization of object "..g5[f][2]..".")end end end end;function Lib.IO.Global:StartObjectDestructionController()RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local lh=Event.GetEntityID()local l3=Logic.GetEntityName(lh)local li=CONST_IO_SLAVE_TO_MASTER[l3]if l3 and li then local lj=CONST_IO[li]if not lj then return end;log("slave "..l3 .." of master "..li.." has been deleted!")log("try to create new slave...")CONST_IO_SLAVE_TO_MASTER[l3]=nil;ExecuteLocal([[CONST_IO_SLAVE_TO_MASTER["%s"] = nil]],l3)local lb=Lib.IO.Global:CreateSlaveObject(lj)error(IsExisting(lb),"failed to create slave!")Lib.IO.Global:SetupObject(lj)if lj.IsUsed==true or CONST_IO_SLAVE_STATE[l3]and CONST_IO_SLAVE_STATE[l3]==0 then InteractiveObjectDeactivate(lj.Slave)end;log("new slave created for master "..li..".")end end)end;function Lib.IO.Global:StartObjectConditionController()RequestHiResJob(function()for g,h in pairs(CONST_IO)do if h and not h.IsUsed and h.IsActive then CONST_IO[g].IsFullfilled=true;if CONST_IO[g].Condition then local lk=h:Condition()CONST_IO[g].IsFullfilled=lk end;ExecuteLocal([[
                    local ScriptName = "%s"
                    if CONST_IO[ScriptName] then
                        CONST_IO[ScriptName].IsFullfilled = %s
                    end
                ]],g,tostring(CONST_IO[g].IsFullfilled))end end end)end;function Lib.IO.Local:Initialize()if not self.IsInstalled then Report.ObjectClicked=CreateReport("Event_ObjectClicked")Report.ObjectInteraction=CreateReport("Event_ObjectInteraction")Report.ObjectReset=CreateReport("Event_ObjectReset")Report.ObjectDelete=CreateReport("Event_ObjectDelete")Report.Internal_DebugEnableObject=CreateReport("Event_Internal_DebugEnableObject")Report.Internal_DebugDisableObject=CreateReport("Event_Internal_DebugDisableObject")Report.Internal_DebugInitObject=CreateReport("Event_Internal_DebugInitObject")Lib.IO.Shared:CreateTechnologies()self:OverrideGameFunctions()Lib.IO.Global=nil end;self.IsInstalled=true end;function Lib.IO.Local:OnSaveGameLoaded()end;function Lib.IO.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ObjectReset then if CONST_IO[arg[1]]then CONST_IO[arg[1]].IsUsed=false end elseif aM==Report.ObjectInteraction then CONST_IO_LAST_OBJECT=GetID(arg[1])CONST_IO_LAST_HERO=arg[2]end end;function Lib.IO.Local:OverrideGameFunctions()g_CurrentDisplayedQuestID=0;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO=GUI_Interaction.InteractiveObjectClicked;GUI_Interaction.InteractiveObjectClicked=function()local f=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local w=g_Interaction.ActiveObjectsOnScreen[f]local q=GUI.GetPlayerID()if not w then return end;local aW=Logic.GetEntityName(w)if CONST_IO_SLAVE_TO_MASTER[aW]then aW=CONST_IO_SLAVE_TO_MASTER[aW]end;if CONST_IO[aW]then if not CONST_IO[aW].IsFullfilled then local bq=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")if CONST_IO[aW].ConditionInfo then bq=ConvertPlaceholders(Localize(CONST_IO[aW].ConditionInfo))end;Message(bq)return end;if type(CONST_IO[aW].Costs)=="table"and#CONST_IO[aW].Costs~=0 then local cq=Logic.GetStoreHouse(q)local aw=Logic.GetHeadquarters(q)if cq==nil or cq==0 or aw==nil or aw==0 then GUI.AddNote("DEBUG: Player needs special buildings when using activation costs!")return end end end;GUI_Interaction.InteractiveObjectClicked_Orig_Lib_IO()if not Framework.IsNetworkGame()then local iY={}Logic.GetKnights(q,iY)local cH=GetClosestToTarget(w,iY)SendReportToGlobal(Report.ObjectClicked,aW,cH,q)SendReport(Report.ObjectClicked,aW,cH,q)end end;GUI_Interaction.InteractiveObjectUpdate=function()if g_Interaction.ActiveObjects==nil then return end;local q=GUI.GetPlayerID()for f=1,#g_Interaction.ActiveObjects do local ll=g_Interaction.ActiveObjects[f]local lm=ll;local aW=Logic.GetEntityName(ll)if CONST_IO_SLAVE_TO_MASTER[aW]then lm=GetID(CONST_IO_SLAVE_TO_MASTER[aW])end;local f2,f3=GUI.GetEntityInfoScreenPosition(lm)local ln,lo=GUI.GetScreenSize()if f2~=0 and f3~=0 and f2>-50 and f3>-50 and f2<ln+50 and f3<lo+50 then if not table.contains(g_Interaction.ActiveObjectsOnScreen,ll)then table.insert(g_Interaction.ActiveObjectsOnScreen,ll)end else for f=1,#g_Interaction.ActiveObjectsOnScreen do if g_Interaction.ActiveObjectsOnScreen[f]==ll then table.remove(g_Interaction.ActiveObjectsOnScreen,f)end end end end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local jS="/InGame/Root/Normal/InteractiveObjects/"..f;if XGUIEng.IsWidgetExisting(jS)==1 then local ll=g_Interaction.ActiveObjectsOnScreen[f]local lm=ll;local aW=Logic.GetEntityName(ll)if CONST_IO_SLAVE_TO_MASTER[aW]then lm=GetID(CONST_IO_SLAVE_TO_MASTER[aW])aW=Logic.GetEntityName(lm)end;local cM=Logic.GetEntityType(ll)local cN=Logic.GetEntityTypeName(cM)local f2,f3=GUI.GetEntityInfoScreenPosition(lm)local lp={XGUIEng.GetWidgetScreenSize(jS)}XGUIEng.SetWidgetScreenPosition(jS,f2-lp[1]/2,f3-lp[2]/2)local lq={Logic.InteractiveObjectGetCosts(ll)}local lr={Logic.InteractiveObjectGetEffectiveCosts(ll,q)}local ls=Logic.InteractiveObjectGetAvailability(ll)local lt=Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(ll,q)local lu=false;if lq[1]~=nil and lr[1]==nil and ls==true then lu=true end;if lt==false then lu=true end;if Logic.GetTime()>1 and g_GameExtraNo>0 then if lu==false and string.find(cN,"R_StoneMine")then if Logic.TechnologyGetState(q,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then lu=true end end;if lu==false and string.find(cN,"R_IronMine")then if Logic.TechnologyGetState(q,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then lu=true end end;if lu==false and(string.find(cN,"B_Cistern")or string.find(cN,"B_Well"))then if Logic.TechnologyGetState(q,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then lu=true end end;if lu==false and string.find(cN,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(q,Technologies.R_Tradepost)~=TechnologyStates.Researched then lu=true end end end;if lu==false then if CONST_IO[aW]and type(CONST_IO[aW].Player)=="table"then lu=not self:IsAvailableForGuiPlayer(aW)elseif CONST_IO[aW]and type(CONST_IO[aW].Player)=="number"then lu=CONST_IO[aW].Player~=q end end;if lu==true then XGUIEng.DisableButton(jS,1)else XGUIEng.DisableButton(jS,0)end;if GUI_Interaction.InteractiveObjectUpdateEx1~=nil then GUI_Interaction.InteractiveObjectUpdateEx1(jS,cM)end;XGUIEng.ShowWidget(jS,1)end end;for f=#g_Interaction.ActiveObjectsOnScreen+1,2 do local jS="/InGame/Root/Normal/InteractiveObjects/"..f;XGUIEng.ShowWidget(jS,0)end;for f=1,#g_Interaction.ActiveObjectsOnScreen do local jS="/InGame/Root/Normal/InteractiveObjects/"..f;local ll=g_Interaction.ActiveObjectsOnScreen[f]local aW=Logic.GetEntityName(ll)if CONST_IO_SLAVE_TO_MASTER[aW]then aW=CONST_IO_SLAVE_TO_MASTER[aW]end;if CONST_IO[aW]and CONST_IO[aW].Texture then local kK;local ai=CONST_IO[aW].Texture[1]or 14;local d0=CONST_IO[aW].Texture[2]or 10;local cT=CONST_IO[aW].Texture[3]or 0;if type(cT)=="string"then kK=cT;cT=0 end;ChangeIcon(jS,{ai,d0,cT},nil,kK)end end end;GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO=GUI_Interaction.InteractiveObjectMouseOver;GUI_Interaction.InteractiveObjectMouseOver=function()local q=GUI.GetPlayerID()local d8=XGUIEng.GetCurrentWidgetID()local lv=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetCurrentWidgetID()))local ll=g_Interaction.ActiveObjectsOnScreen[lv]local cM=Logic.GetEntityType(ll)local cN=Logic.GetEntityTypeName(cM)if tonumber(Logic.GetEntityName(ll))~=nil and string.find(cN,"^I_X_")then GUI_Interaction.InteractiveObjectMouseOver_Orig_Lib_IO()return end;local lw=false;local lx=false;if g_GameExtraNo>0 then lw=string.find(cN,"^R_Stone")~=nil or string.find(cN,"^R_Iron")~=nil or string.find(cN,"^B_Cistern")~=nil or string.find(cN,"^B_Well")~=nil;lx=string.find(cN,"^I_X_Trade")~=nil end;local ly;local bn="InteractiveObjectAvailable"if Logic.InteractiveObjectGetAvailability(ll)==false then bn="InteractiveObjectNotAvailable"elseif Logic.InteractiveObjectHasPlayerEnoughSpaceForRewards(ll,q)==false then ly="InteractiveObjectAvailableReward"elseif XGUIEng.IsButtonDisabled(d8)==1 then ly="UpgradeOutpost"if g_GameExtraNo>0 then if string.find(cN,"R_StoneMine")then if Logic.TechnologyGetState(q,Technologies.R_RefillStoneMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then ly=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillStoneMine)or ly end end;if string.find(cN,"R_IronMine")then if Logic.TechnologyGetState(q,Technologies.R_RefillIronMine)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then ly=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillIronMine)or ly end end;if string.find(cN,"B_Cistern")or string.find(cN,"B_Well")then if Logic.TechnologyGetState(q,Technologies.R_RefillCistern)~=TechnologyStates.Researched or Logic.TechnologyGetState(q,Technologies.R_CallGeologist)~=TechnologyStates.Researched then ly=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_RefillCistern)or ly end end;if string.find(cN,"I_X_TradePostConstructionSite")then if Logic.TechnologyGetState(q,Technologies.R_Tradepost)~=TechnologyStates.Researched then ly=GUI_Tooltip.GetDisabledKeyForTechnologyType(Technologies.R_Tradepost)or ly end end end end;local hO="UI_ObjectNames/"..bn;local bq="UI_ObjectDescription/"..bn;local lz=ly~=nil and"UI_ButtonDisabled/"..ly or nil;if lw then hO="UI_ObjectNames/InteractiveObjectGeologist"end;if lx then hO="UI_ObjectNames/InteractiveObjectTradepost"end;local lA=false;local hd={Logic.InteractiveObjectGetEffectiveCosts(ll,q)}if hd and hd[1]and hd[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(hd[1])~=GoodCategories.GC_Resource then lA=true end;local aW=Logic.GetEntityName(ll)if CONST_IO_SLAVE_TO_MASTER[aW]then aW=CONST_IO_SLAVE_TO_MASTER[aW]end;if CONST_IO[aW]and CONST_IO[aW].IsUsed~=true then bn="InteractiveObjectAvailable"if CONST_IO[aW]and type(CONST_IO[aW].Player)=="table"and not self:IsAvailableForGuiPlayer(aW)or CONST_IO[aW]and type(CONST_IO[aW].Player)=="number"and CONST_IO[aW].Player~=q or Logic.InteractiveObjectGetAvailability(ll)==false then bn="InteractiveObjectNotAvailable"end;hO=ConvertPlaceholders(Localize(CONST_IO[aW].Title or hO))if hO and hO:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then hO=XGUIEng.GetStringTableText(hO)end;bq=ConvertPlaceholders(Localize(CONST_IO[aW].Text or bq))if bq and bq:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq=XGUIEng.GetStringTableText(bq)end;lz=CONST_IO[aW].DisabledText or lz;if lz then lz=ConvertPlaceholders(Localize(lz))if lz and lz:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then lz=XGUIEng.GetStringTableText(lz)end end;hd=CONST_IO[aW].Costs;if hd and hd[1]and hd[1]~=Goods.G_Gold and Logic.GetGoodCategoryForGoodType(hd[1])~=GoodCategories.GC_Resource then lA=true end end;SetTooltipCosts(hO,bq,lz,hd,lA)end;GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO=GUI_Interaction.DisplayQuestObjective;GUI_Interaction.DisplayQuestObjective=function(dk,dl)local j6=tonumber(dk)if j6 then dk=j6 end;local ay,dm=GUI_Interaction.GetPotentialSubQuestAndType(dk)local j7="/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives"XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)local j8;local j9;g_CurrentDisplayedQuestID=dk;if dm==Objective.Object then j8=j7 .."/List"j9=Wrapped_GetStringTableText(dk,"UI_Texts/QuestInteraction")local ja={}assert(ay~=nil)for f=1,ay.Objectives[1].Data[0]do local lB;if Logic.IsEntityDestroyed(ay.Objectives[1].Data[f])then lB=g_Interaction.SavedQuestEntityTypes[dk][f]else lB=Logic.GetEntityType(GetID(ay.Objectives[1].Data[f]))end;local lC=Logic.GetEntityName(ay.Objectives[1].Data[f])local lD=""if lB~=nil and lB~=0 then local lE=Logic.GetEntityTypeName(lB)lD=Wrapped_GetStringTableText(dk,"Names/"..lE)or GetStringText("Names/"..lE)if lD==""then lD=Wrapped_GetStringTableText(dk,"UI_ObjectNames/"..lE)or GetStringText("UI_ObjectNames/"..lE)end;if lD==nil then lD="Debug: ObjectName missing for "..lE end end;table.insert(ja,Localize(ConvertPlaceholders(lD)))end;for f=1,4 do local al=ja[f]if al==nil then al=""end;XGUIEng.SetText(j8 .."/Entry"..f,"{center}"..al)end;SetIcon(j8 .."/QuestTypeIcon",{14,10})XGUIEng.SetText(j8 .."/Caption","{center}"..j9)XGUIEng.ShowWidget(j8,1)else GUI_Interaction.DisplayQuestObjective_Orig_Lib_IO(dk,dl)end end end;function Lib.IO.Local:IsAvailableForGuiPlayer(dD)local q=GUI.GetPlayerID()if CONST_IO[dD]and type(CONST_IO[dD].Player)=="table"then for f=1,8 do if CONST_IO[dD].Player[f]and CONST_IO[dD].Player[f]==q then return true end end;return false end;return true end;function Lib.IO.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for b8=1,8 do Logic.TechnologySetState(b8,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.IO.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOChest_API")function CreateRandomChest(C,kx,lF,lG,gk,hS)if IsLocalScript()then return end;if not hS then hS=gk;gk=nil end;assert(IsExisting(C),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,kx)~=nil,"Good type is invalid!")assert(type(lF)=="number"and lF>=1,"Minimum is to low!")lG=lG or lF;assert(type(lG)=="number"or lG>=1,"Maximum is to low!")assert(lG>=lF,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(C,kx,lF,lG,false,false,gk,hS)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomChest(C,kx,lF,lG,gk,hS)if IsLocalScript()then return end;if not hS then hS=gk;gk=nil end;assert(IsExisting(C),"Entity does not exist!")assert(GetNameOfKeyInTable(Goods,kx)~=nil,"Good type is invalid!")assert(type(lF)=="number"and lF>=1,"Minimum is to low!")lG=lG or lF;assert(type(lG)=="number"or lG>=1,"Maximum is to low!")assert(lG>=lF,"Maximum can not be lower than minimum!")Lib.IOChest.Global:CreateRandomChest(C,kx,lF,lG,false,true,gk,hS)end;API.CreateRandomChest=CreateRandomChest;function CreateRandomGoldChest(C)if IsLocalScript()then return end;assert(IsExisting(C),"Entity does not exist!")Lib.IOChest.Global:CreateRandomGoldChest(C)end;API.CreateRandomGoldChest=CreateRandomGoldChest;function CreateRandomResourceChest(C)if IsLocalScript()then return end;assert(IsExisting(C),"Entity does not exist!")Lib.IOChest.Global:CreateRandomResourceChest(C)end;API.CreateRandomResourceChest=CreateRandomResourceChest;function CreateRandomLuxuryChest(C)if IsLocalScript()then return end;assert(IsExisting(C),"Entity does not exist!")Lib.IOChest.Global:CreateRandomLuxuryChest(C)end;API.CreateRandomLuxuryChest=CreateRandomLuxuryChest;function Debug_GoldChest(l)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugGoldChest,l)end;function Debug_GoodChest(l)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugResourceChest,l)end;function Debug_LuxuryChest(l)assert(IsLocalScript(),"Debug function must be used in local script!")SendReportToGlobal(Report.Internal_DebugLuxuryChest,l)end;Lib.IOChest=Lib.IOChest or{}Lib.IOChest.Name="IOChest"Lib.IOChest.Global={}Lib.IOChest.Local={}Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOChest_API")Lib.Register("module/io/IOChest")function Lib.IOChest.Global:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Report.Internal_DebugGoldChest=CreateReport("Event_Internal_DebugGoldChest")Report.Internal_DebugResourceChest=CreateReport("Event_Internal_DebugResourceChest")Report.Internal_DebugLuxuryChest=CreateReport("Event_Internal_DebugLuxuryChest")Lib.IOChest.Local=nil end;self.IsInstalled=true end;function Lib.IOChest.Global:OnSaveGameLoaded()end;function Lib.IOChest.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ChatClosed then if arg[3]then self:ProcessChatInput(arg[1])end elseif aM==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then self:ResetIOChest(arg[1])end elseif aM==Report.ObjectDelete then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveChest then end elseif aM==Report.Internal_DebugGoldChest then error(IsExisting(arg[1]),"entity "..arg[1].." does not exist!")CreateRandomGoldChest(arg[1])elseif aM==Report.Internal_DebugResourceChest then error(IsExisting(arg[1]),"entity "..arg[1].." does not exist!")CreateRandomResourceChest(arg[1])elseif aM==Report.Internal_DebugLuxuryChest then error(IsExisting(arg[1]),"entity "..arg[1].." does not exist!")CreateRandomLuxuryChest(arg[1])end end;function Lib.IOChest.Global:ProcessChatInput(dG)if IsHistoryEdition()then local g5=Lib.Core.Debug:CommandTokenizer(dG)for f=1,#g5,1 do if g5[f][1]=="goldchest"then if not IsExisting(g5[f][2])then CreateRandomGoldChest(g5[f][2])end elseif g5[f][1]=="goodchest"then if not IsExisting(g5[f][2])then CreateRandomResourceChest(g5[f][2])end elseif g5[f][1]=="luxurychest"then if not IsExisting(g5[f][2])then CreateRandomLuxuryChest(g5[f][2])end end end end end;function Lib.IOChest.Global:CreateRandomChest(C,kx,lF,lG,lH,lI,gk,hS)lF=math.floor(lF~=nil and lF>0 and lF or 1)lG=math.floor(lG~=nil and lG>1 and lG or 2)assert(kx~=nil,"CreateRandomChest: Good does not exist!")assert(lF<=lG,"CreateRandomChest: min amount must be smaller or equal than max amount!")log("Creating chest (%s, %s, %d, %d, %s, %s)",C,Logic.GetGoodTypeName(kx),lF,lG,tostring(lH==true),tostring(lI==true))if not lI then local bQ=ReplaceEntity(C,Entities.XD_ScriptEntity,0)Logic.SetModel(bQ,Models.Doodads_D_X_ChestClose)Logic.SetVisible(bQ,true)end;local cr=lF;if lF<lG then cr=math.random(lF,lG)end;local lJ;local lK;if not lH then lK={kx,cr}else lJ={kx,cr}end;SetupObject{Name=C,IsInteractiveChest=true,Reward=lK,DirectReward=lJ,Texture={1,6},Distance=lI and 1200 or 650,Waittime=0,State=0,DoNotChangeModel=lI==true,ActivationCondition=gk,ActivationAction=hS,Condition=function(ho)if ho.ActivationCondition then return ho.ActivationCondition(ho)end;return true end,Action=function(ho,iV,n)if not ho.DoNotChangeModel then Logic.SetModel(GetID(ho.ScriptName),Models.Doodads_D_X_ChestOpenEmpty)end;if ho.DirectReward then AddGood(ho.DirectReward[1],ho.DirectReward[2],n)end;if ho.ActivationAction then ho.ActivationAction(ho,iV,n)end;SendReport(Report.InteractiveTreasureActivated,ho.ScriptName,iV,n)SendReportToLocal(Report.InteractiveTreasureActivated,ho.ScriptName,iV,n)end}end;function Lib.IOChest.Global:ResetIOChest(dD)if not CONST_IO[dD].DoNotChangeModel then local w=ReplaceEntity(dD,Entities.XD_ScriptEntity,0)Logic.SetModel(w,Models.Doodads_D_X_ChestClose)Logic.SetVisible(w,true)end end;function Lib.IOChest.Global:CreateRandomGoldChest(C)self:CreateRandomChest(C,Goods.G_Gold,300,600,false)end;function Lib.IOChest.Global:CreateRandomResourceChest(C)local lL={Goods.G_Iron,Goods.G_Stone,Goods.G_Wood,Goods.G_Wool,Goods.G_Carcass,Goods.G_Herb,Goods.G_Honeycomb,Goods.G_Milk,Goods.G_RawFish,Goods.G_Grain}local lM=lL[math.random(1,#lL)]self:CreateRandomChest(C,lM,30,60,false)end;function Lib.IOChest.Global:CreateRandomLuxuryChest(C)local lN={Goods.G_Salt,Goods.G_Dye}if g_GameExtraNo>=1 then table.insert(lN,Goods.G_Gems)table.insert(lN,Goods.G_MusicalInstrument)table.insert(lN,Goods.G_Olibanum)end;local lM=lN[math.random(1,#lN)]self:CreateRandomChest(C,lM,50,100,false)end;function Lib.IOChest.Local:Initialize()if not self.IsInstalled then Report.InteractiveTreasureActivated=CreateReport("Event_InteractiveTreasureActivated")Report.Internal_DebugGoldChest=CreateReport("Event_Internal_DebugGoldChest")Report.Internal_DebugResourceChest=CreateReport("Event_Internal_DebugResourceChest")Report.Internal_DebugLuxuryChest=CreateReport("Event_Internal_DebugLuxuryChest")self:CreateDefaultObjectNames()Lib.IOChest.Global=nil end;self.IsInstalled=true end;function Lib.IOChest.Local:OnSaveGameLoaded()end;function Lib.IOChest.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.IOChest.Local:CreateDefaultObjectNames()AddStringText("UI_ObjectNames/D_X_ChestClosed",{de="Verschlossene Schatztruhe",en="Closed Treasure Chest",fr="Coffre au trésor fermé"})AddStringText("UI_ObjectNames/D_X_ChestOpenEmpty",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen01",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen02",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen03",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})AddStringText("UI_ObjectNames/D_X_ChestOpen04",{de="Leere Truhe",en="Empty Chest",fr="Coffre vide"})end;RegisterModule(Lib.IOChest.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOMine_API")function CreateIOIronMine(ho)local hd={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(ho)Lib.IOMine.Global:CreateIOMine(ho.ScriptName,Entities.R_IronMine,ho.Title,ho.Text,ho.Costs or hd,ho.ResourceAmount,ho.RefillAmount,ho.ConstructionCondition,ho.ConditionInfo,ho.ConstructionAction)end;API.CreateIOIronMine=CreateIOIronMine;function CreateIOStoneMine(ho)local hd={Goods.G_Gold,500,Goods.G_Wood,20}CheckIOMineParameter(ho)Lib.IOMine.Global:CreateIOMine(ho.ScriptName,Entities.R_StoneMine,ho.Title,ho.Text,ho.Costs or hd,ho.ResourceAmount,ho.RefillAmount,ho.ConstructionCondition,ho.ConditionInfo,ho.ConstructionAction)end;API.CreateIOStoneMine=CreateIOStoneMine;function CheckIOMineParameter(ho)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(ho.Scriptname),"Scriptname '%s' does not exist!",tostring(ho.Scriptname))if not ho.Costs then return end;error(not ho.Costs[1]or GetNameOfKeyInTable(Goods,ho.Costs[1]),"First cost type '%s' is wrong!",tostring(ho.Costs[1]))error(not ho.Costs[2]or type(ho.Costs[2])=="number"and ho.Costs[2]>0,"First cost amount must be above 0!",tostring(ho.Costs[1]))error(not ho.Costs[3]or GetNameOfKeyInTable(Goods,ho.Costs[3]),"Second cost type '%s' is wrong!",tostring(ho.Costs[3]))error(not ho.Costs[4]or type(ho.Costs[4])=="number"and ho.Costs[4]>0,"Second cost amount must be above 0!",tostring(ho.Costs[4]))end;Lib.IOMine=Lib.IOMine or{}Lib.IOMine.Name="IOMine"Lib.IOMine.Global={Mines={}}Lib.IOMine.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOMine_API")Lib.Register("module/io/IOMine")function Lib.IOMine.Global:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Local=nil end;self.IsInstalled=true end;function Lib.IOMine.Global:OnSaveGameLoaded()end;function Lib.IOMine.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ObjectReset then if CONST_IO[arg[1]]and CONST_IO[arg[1]].IsInteractiveMine then self:ResetIOMine(arg[1],CONST_IO[arg[1]].Type)end elseif aM==Report.ObjectDelete then if CONST_IO[arg[1]].IsInteractiveMine and CONST_IO[arg[1]].Type then ReplaceEntity(arg[1],CONST_IO[arg[1]].Type)end end end;function Lib.IOMine.Global:CreateIOMine(an,i,gE,dG,gG,lO,b1,gk,lP,hS)local lQ=self:ResetIOMine(an,i)local kL={14,10}local lR;if i==Entities.R_IronMine then lR="Names/R_IronMine"kL={14,10}end;if i==Entities.R_StoneMine then lR="Names/R_StoneMine"kL={14,10}end;SetupObject{Name=an,IsInteractiveMine=true,Title=gE or lR,Text=dG,Texture=kL,Type=i,ResourceAmount=lO or 250,RefillAmount=b1 or 75,Costs=gG,InvisibleBlocker=lQ,Distance=1200,Waittime=0,ConditionInfo=lP,AdditionalCondition=gk,AdditionalAction=hS,Condition=function(ho)if ho.AdditionalCondition then return ho:AdditionalCondition(ho)end;return true end,Action=function(ho,iV,n)local ar=ReplaceEntity(ho.ScriptName,ho.Type)SetResourceAmount(ar,ho.ResourceAmount,ho.RefillAmount)DestroyEntity(ho.InvisibleBlocker)SendReport(Report.InteractiveMineErected,ho.ScriptName,iV,n)SendReportToLocal(Report.InteractiveMineErected,ho.ScriptName,iV,n)if ho.AdditionalAction then ho.AdditionalAction(ho,iV,n)end end}end;function Lib.IOMine.Global:ResetIOMine(dD,i)if CONST_IO[dD]then DestroyEntity(CONST_IO[dD].InvisibleBlocker)end;local w=ReplaceEntity(dD,Entities.XD_ScriptEntity)local lS=Models.Doodads_D_SE_ResourceIron_Wrecked;if i==Entities.R_StoneMine then lS=Models.R_SE_ResorceStone_10 end;Logic.SetVisible(w,true)Logic.SetModel(w,lS)local E,F,G=Logic.EntityGetPos(w)local lQ=Logic.CreateEntity(Entities.D_ME_Rock_Set01_B_07,E,F,0,0)Logic.SetVisible(lQ,false)if CONST_IO[dD]then CONST_IO[dD].InvisibleBlocker=lQ end;return lQ end;function Lib.IOMine.Local:Initialize()if not self.IsInstalled then Report.InteractiveMineErected=CreateReport("Event_InteractiveMineErected")Lib.IOMine.Global=nil end;self.IsInstalled=true end;function Lib.IOMine.Local:OnSaveGameLoaded()end;function Lib.IOMine.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOMine.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/io/IOSite_API")function CreateIOBuildingSite(ho)error(not IsLocalScript(),"Must be used in global script!")error(IsExisting(ho.ScriptName),"ScriptName '%s' does not exist!",tostring(ho.ScriptName))error(type(ho.PlayerID)=="number"and(ho.PlayerID>=1 and ho.PlayerID<=8),"PlayerID is wrong!")error(GetNameOfKeyInTable(Entities,ho.Type)~=nil,"Type (%s) is wrong!",tostring(ho.Type))error(not ho.Distance or type(ho.Distance)=="number"and ho.Distance>=100,"Distance (%s) is wrong or too small!",tostring(ho.Distance))error(not ho.Condition or type(ho.Condition)=="function","Condition must be a function!")error(not ho.Action or type(ho.Action)=="function","Action must be a function!")error(not ho.Costs or not ho.Costs[1]or GetNameOfKeyInTable(Goods,ho.Costs[1]),"First cost type '%s' is wrong!",tostring(ho.Costs[1]))error(not ho.Costs or not ho.Costs[2]or type(ho.Costs[2])=="number"and ho.Costs[2]>0,"First cost amount must be above 0!",tostring(ho.Costs[1]))error(not ho.Costs or not ho.Costs[3]or GetNameOfKeyInTable(Goods,ho.Costs[3]),"Second cost type '%s' is wrong!",tostring(ho.Costs[3]))error(not ho.Costs or not ho.Costs[4]or type(ho.Costs[4])=="number"and ho.Costs[4]>0,"Second cost amount must be above 0!",tostring(ho.Costs[4]))Lib.IOMine.Global:CreateIOBuildingSite(ho)end;API.CreateIOBuildingSite=CreateIOBuildingSite;Lib.Register("module/mode/SettlementLimitation_Text")Lib.IOSite=Lib.IOSite or{}Lib.IOSite.Text={Description={Title={de="Gebäude bauen",en="Create building",fr="Construire le bâtiment"},Text={de="Beauftragt den Bau eines Gebäudes. Ein Siedler wird aus".." dem Lagerhaus kommen und mit dem Bau beginnen.",en="Order a building. A worker will come out of the".." storehouse and erect it.",fr="Commande la construction d'un bâtiment. Un Settler sortira de".." l'entrepôt et commencera la construction."}}}Lib.IOSite=Lib.IOSite or{}Lib.IOSite.Name="IOSite"Lib.IOSite.Global={CreatedSites={}}Lib.IOSite.Local={}Lib.Require("core/Core")Lib.Require("module/io/IO")Lib.Require("module/io/IOSite_Text")Lib.Require("module/io/IOSite_API")Lib.Register("module/io/IOSite")function Lib.IOSite.Global:Initialize()if not self.IsInstalled then Report.InteractiveSiteBuild=CreateReport("Event_InteractiveSiteBuild")self:OverrideConstructionCompleteCallback()Lib.IOSite.Local=nil end;self.IsInstalled=true end;function Lib.IOSite.Global:OnSaveGameLoaded()end;function Lib.IOSite.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ObjectReset then elseif aM==Report.ObjectDelete then end end;function Lib.IOSite.Global:CreateIOBuildingSite(ho)local hd=ho.Costs or{Logic.GetEntityTypeFullCost(ho.Type)}local hO=ho.Title or Lib.IOSite.Text.Description.Title;local bq=ho.Text or Lib.IOSite.Text.Description.Text;local w=GetID(ho.ScriptName)Logic.SetModel(w,Models.Buildings_B_BuildingPlot_10x10)Logic.SetVisible(w,true)ho.Title=hO;ho.Text=bq;ho.Costs=hd;ho.ConditionOrigSite=ho.Condition;ho.ActionOrigSite=ho.Action;API.SetupObject(ho)CONST_IO[ho.ScriptName].Condition=function(ho)if ho.ConditionOrigSite then ho.ConditionOrigSite(ho)end;return self:ConditionIOConstructionSite(ho)end;CONST_IO[ho.ScriptName].Action=function(ho,iV,n)self:CallbackIOConstructionSite(ho,iV,n)if ho.ActionOrigSite then ho.ActionOrigSite(ho,iV,n)end end end;function Lib.IOSite.Global:CallbackIOConstructionSite(ho,iV,n)local R=GetPosition(ho.ScriptName)local w=GetID(ho.ScriptName)local S=Logic.GetEntityOrientation(w)local iy=Logic.CreateConstructionSite(R.X,R.Y,S,ho.Type,ho.PlayerID)Logic.SetVisible(w,false)if iy==nil then warn("For object '"..ho.ScriptName.."' building placement failed! Building created instead")iy=Logic.CreateEntity(ho.Type,R.X,R.Y,S,ho.PlayerID)end;self.CreatedSites[iy]=ho end;function Lib.IOSite.Global:ConditionIOConstructionSite(ho)local w=GetID(ho.ScriptName)local a1=GetTerritoryUnderEntity(w)local q=Logic.GetTerritoryPlayerID(a1)if Logic.GetStoreHouse(ho.PlayerID)==0 then return false end;if ho.PlayerID~=q then return false end;return true end;function Lib.IOSite.Global:OverrideConstructionCompleteCallback()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(n,at)Lib.IOSite.Global.Orig_GameCallback_OnBuildingConstructionComplete(n,at)if Lib.IOSite.Global.CreatedSites[at]then local lj=Lib.IOSite.Global.CreatedSites[at]if lj then SendReport(Report.InteractiveSiteBuild,lj.ScriptName,n,at)SendReportToLocal(Report.InteractiveSiteBuild,lj.ScriptName,n,at)end end end end;function Lib.IOSite.Local:Initialize()if not self.IsInstalled then Report.InteractiveSiteBuild=CreateReport("Event_InteractiveSiteBuild")Lib.IOSite.Global=nil end;self.IsInstalled=true end;function Lib.IOSite.Local:OnSaveGameLoaded()end;function Lib.IOSite.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.IOSite.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntityEvent_API")function ThiefDisableStorehouseEffect(e2)Lib.EntityEvent.Global.DisableThiefStorehouseHeist=e2==true end;API.ThiefDisableStorehouseEffect=ThiefDisableStorehouseEffect;function ThiefDisableCathedralEffect(e2)Lib.EntityEvent.Global.DisableThiefCathedralSabotage=e2==true end;API.ThiefDisableCathedralEffect=ThiefDisableCathedralEffect;function ThiefDisableCisternEffect(e2)Lib.EntityEvent.Global.DisableThiefCisternSabotage=e2==true end;API.ThiefDisableCisternEffect=ThiefDisableCisternEffect;Lib.EntityEvent=Lib.EntityEvent or{}Lib.EntityEvent.Name="EntityEvent"Lib.EntityEvent.Global={JobID={},RegisteredEntities={},MineAmounts={},AttackedEntities={},DisableThiefStorehouseHeist=false,DisableThiefCathedralSabotage=false,DisableThiefCisternSabotage=false,StaticSpawnerTypes={"B_NPC_BanditsHQ_ME","B_NPC_BanditsHQ_NA","B_NPC_BanditsHQ_NE","B_NPC_BanditsHQ_SE","B_NPC_BanditsHutBig_ME","B_NPC_BanditsHutBig_NA","B_NPC_BanditsHutBig_NE","B_NPC_BanditsHutBig_SE","B_NPC_BanditsHutSmall_ME","B_NPC_BanditsHutSmall_NA","B_NPC_BanditsHutSmall_NE","B_NPC_BanditsHutSmall_SE","B_NPC_Barracks_ME","B_NPC_Barracks_NA","B_NPC_Barracks_NE","B_NPC_Barracks_SE","B_NPC_BanditsHQ_AS","B_NPC_BanditsHutBig_AS","B_NPC_BanditsHutSmall_AS","B_NPC_Barracks_AS"},DynamicSpawnerTypes={"S_AxisDeer_AS","S_Deer_ME","S_FallowDeer_SE","S_Gazelle_NA","S_Herbs","S_Moose_NE","S_RawFish","S_Reindeer_NE","S_WildBoar","S_Zebra_NA"}}Lib.EntityEvent.Local={}Lib.Require("comfort/GetDistance")Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent_API")Lib.Register("module/entity/EntityEvent")function Lib.EntityEvent.Global:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")self:StartTriggers()self:OverrideCallback()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnSaveGameLoaded()self:OverrideLogic()end;function Lib.EntityEvent.Global:OnReportReceived(aM,...)if aM==Report.LoadscreenClosed then self.LoadscreenClosed=true elseif aM==Report.EntityHurt then self.AttackedEntities[arg[3]]={arg[1],300}end end;function Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()for g,h in pairs(self.AttackedEntities)do self.AttackedEntities[g][2]=h[2]-1;if h[2]<=0 then self.AttackedEntities[g]=nil else if IsExisting(g)and IsExisting(h[1])and Logic.IsKnight(g)then if Logic.KnightGetResurrectionProgress(g)~=1 then local gu=Logic.EntityGetPlayer(g)local gv=Logic.EntityGetPlayer(h[1])self:TriggerEntityKilledEvent(g,gu,h[1],gv)self.AttackedEntities[g]=nil end end end end end;function Lib.EntityEvent.Global:OverrideCallback()GameCallback_SettlerSpawned_Orig_QSB_EntityCore=GameCallback_SettlerSpawned;GameCallback_SettlerSpawned=function(n,at)GameCallback_SettlerSpawned_Orig_QSB_EntityCore(n,at)Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(n,at)end;GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(n,at)GameCallback_OnBuildingConstructionComplete_Orig_QSB_EntityCore(n,at)Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(n,at)end;GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore=GameCallback_FarmAnimalChangedPlayerID;GameCallback_FarmAnimalChangedPlayerID=function(n,lT,lU)GameCallback_FarmAnimalChangedPlayerID_Orig_QSB_EntityCore(n,lT,lU)local lV=Logic.EntityGetPlayer(lU)local lW=Logic.EntityGetPlayer(lT)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(lU,lV,lT,lW)end;GameCallback_EntityCaptured_Orig_QSB_EntityCore=GameCallback_EntityCaptured;GameCallback_EntityCaptured=function(lU,lX,lT,lY)GameCallback_EntityCaptured_Orig_QSB_EntityCore(lU,lX,lT,lY)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(lU,lX,lT,lY)end;GameCallback_CartFreed_Orig_QSB_EntityCore=GameCallback_CartFreed;GameCallback_CartFreed=function(lU,lX,lT,lY)GameCallback_CartFreed_Orig_QSB_EntityCore(lU,lX,lT,lY)Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(lU,lX,lT,lY)end;GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore=GameCallback_OnThiefDeliverEarnings;GameCallback_OnThiefDeliverEarnings=function(lZ,l_,hL,m0)GameCallback_OnThiefDeliverEarnings_Orig_QSB_EntityCore(lZ,l_,hL,m0)local m1=Logic.EntityGetPlayer(hL)Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(l_,lZ,hL,m1,m0)end;GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore=GameCallback_OnThiefStealBuilding;GameCallback_OnThiefStealBuilding=function(l_,lZ,hL,m2)Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(l_,lZ,hL,m2)end;GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore=GameCallback_OnBuildingUpgradeFinished;GameCallback_OnBuildingUpgradeFinished=function(n,at,m3)GameCallback_OnBuildingUpgraded_Orig_QSB_EntityCore(n,at,m3)Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(n,at,m3)end;GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore=GameCallback_OnUpgradeLevelCollapsed;GameCallback_OnUpgradeLevelCollapsed=function(n,hL,m3)GameCallback_OnUpgradeLevelCollapsed_Orig_QSB_EntityCore(n,hL,m3)Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(n,hL,m3)end end;function Lib.EntityEvent.Global:OverrideLogic()self.Logic_ChangeEntityPlayerID=Logic.ChangeEntityPlayerID;Logic.ChangeEntityPlayerID=function(...)local fS={arg[1]}local lV=Logic.EntityGetPlayer(arg[1])local c3={self.Logic_ChangeEntityPlayerID(unpack(arg))}local lW=Logic.EntityGetPlayer(c3[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(fS,lV,c3,lW)return c3 end;self.Logic_ChangeSettlerPlayerID=Logic.ChangeSettlerPlayerID;Logic.ChangeSettlerPlayerID=function(...)local fS={arg[1]}local lV=Logic.EntityGetPlayer(arg[1])local m4={Logic.GetSoldiersAttachedToLeader(arg[1])}if m4[1]and m4[1]>0 then for f=2,m4[1]+1 do table.insert(fS,m4[f])end end;local c3={self.Logic_ChangeSettlerPlayerID(unpack(arg))}local m5={Logic.GetSoldiersAttachedToLeader(c3[1])}if m5[1]and m5[1]>0 then for f=2,m5[1]+1 do table.insert(c3,m5[f])end end;local lW=Logic.EntityGetPlayer(c3[1])Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(fS,lV,c3,lW)return c3[1]end end;function Lib.EntityEvent.Global:StartTriggers()self.JobID.EveryTurn=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()if Logic.GetCurrentTurn()>0 then Lib.EntityEvent.Global:CleanTaggedAndDeadEntities()Lib.EntityEvent.Global:CheckOnSpawnerEntities()end end)self.JobID.EverySecond=RequestJobByEventType(Events.LOGIC_EVENT_EVERY_SECOND,function()local m6={Entities.R_IronMine,Entities.R_StoneMine}for f=1,#m6 do local m7=Logic.GetEntitiesOfType(m6[f])for b8=1,#m7 do local dC=self.MineAmounts[m7[b8]]local m8=Logic.GetResourceDoodadGoodAmount(m7[b8])if dC and m8 and dC~=m8 then local m=Logic.GetResourceDoodadGoodType(m7[b8])SendReport(Report.EntityResourceChanged,m7[b8],m,dC,m8)SendReportToLocal(Report.EntityResourceChanged,m7[b8],m,dC,m8)end;self.MineAmounts[m7[b8]]=m8 end end end)self.JobID.EntityDestroyed=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_DESTROYED,function()local m9=Event.GetEntityID()local gu=Logic.EntityGetPlayer(m9)Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(m9,gu)if Lib.EntityEvent.Global.AttackedEntities[m9]~=nil then local ma=Lib.EntityEvent.Global.AttackedEntities[m9][1]local gv=Logic.EntityGetPlayer(ma)Lib.EntityEvent.Global.AttackedEntities[m9]=nil;Lib.EntityEvent.Global:TriggerEntityKilledEvent(m9,gu,ma,gv)end end)self.JobID.EveryHurn=RequestJobByEventType(Events.LOGIC_EVENT_ENTITY_HURT_ENTITY,function()local m9=Event.GetEntityID1()local gu=Logic.EntityGetPlayer(m9)local ma=Event.GetEntityID2()local gv=Logic.EntityGetPlayer(ma)SendReport(Report.EntityHurt,m9,gu,ma,gv)SendReportToLocal(Report.EntityHurt,m9,gu,ma,gv)end)end;function Lib.EntityEvent.Global:CheckOnSpawnerEntities()local mb={}for f=1,#self.DynamicSpawnerTypes do if Entities[self.DynamicSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.DynamicSpawnerTypes[f]]))do table.insert(mb,h)end end end end;for f=1,#self.StaticSpawnerTypes do if Entities[self.StaticSpawnerTypes[f]]then if Logic.GetCurrentTurn()%10==f then for g,h in pairs(Logic.GetEntitiesOfType(Entities[self.StaticSpawnerTypes[f]]))do table.insert(mb,h)end end end end;for f=1,#mb do for g,h in pairs{Logic.GetSpawnedEntities(mb[f])}do if not self.RegisteredEntities[h]then self:TriggerEntitySpawnedEvent(h,mb[f])self.RegisteredEntities[h]=mb[f]end end end end;function Lib.EntityEvent.Global:TriggerEntityOnwershipChangedEvent(mc,md,me,mf)mc=type(mc)~="table"and{mc}or mc;me=type(me)~="table"and{me}or me;assert(#mc==#me,"Sums of entities with changed owner does not add up!")for f=1,#mc do SendReport(Report.EntityOwnerChanged,mc[f],md,me[f],mf)SendReportToLocal(Report.EntityOwnerChanged,mc[f],md,me[f],mf)end end;function Lib.EntityEvent.Global:TriggerThiefDeliverEarningsEvent(l_,lZ,hL,m2,m0)SendReport(Report.ThiefDeliverEarnings,l_,lZ,hL,m2,m0)SendReportToLocal(Report.ThiefDeliverEarnings,l_,lZ,hL,m2,m0)end;function Lib.EntityEvent.Global:TriggerThiefStealFromBuildingEvent(l_,lZ,hL,m2)local mg=Logic.GetHeadquarters(m2)local i2=Logic.GetCathedral(m2)local f7=Logic.GetStoreHouse(m2)local mh=Logic.IsEntityInCategory(f7,EntityCategories.VillageStorehouse)==1;local mi=Logic.GetEntityType(hL)if f7==hL and(not mh or mg==0)then if not self.DisableThiefStorehouseHeist then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(l_,lZ,hL,m2)end end;if i2==hL then if not self.DisableThiefCathedralSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(l_,lZ,hL,m2)end end;if Framework.GetGameExtraNo()>0 and mi==Entities.B_Cistern then if not self.DisableThiefCisternSabotage then GameCallback_OnThiefStealBuilding_Orig_QSB_EntityCore(l_,lZ,hL,m2)end end;SendReport(Report.ThiefInfiltratedBuilding,l_,lZ,hL,m2)SendReportToLocal(Report.ThiefInfiltratedBuilding,l_,lZ,hL,m2)end;function Lib.EntityEvent.Global:TriggerEntitySpawnedEvent(at,mj)local q=Logic.EntityGetPlayer(at)SendReport(Report.EntitySpawned,at,q,mj)SendReportToLocal(Report.EntitySpawned,at,q,mj)end;function Lib.EntityEvent.Global:TriggerSettlerArrivedEvent(n,at)SendReport(Report.SettlerAttracted,at,n)SendReportToLocal(Report.SettlerAttracted,at,n)end;function Lib.EntityEvent.Global:TriggerEntityDestroyedEvent(at,n)SendReport(Report.EntityDestroyed,at,n)SendReportToLocal(Report.EntityDestroyed,at,n)end;function Lib.EntityEvent.Global:TriggerEntityKilledEvent(mk,ml,mm,mn)SendReport(Report.EntityKilled,mk,ml,mm,mn)SendReportToLocal(Report.EntityKilled,mk,ml,mm,mn)end;function Lib.EntityEvent.Global:TriggerConstructionCompleteEvent(n,at)SendReport(Report.BuildingConstructed,at,n)SendReportToLocal(Report.BuildingConstructed,at,n)end;function Lib.EntityEvent.Global:TriggerUpgradeCompleteEvent(n,at,m3)SendReport(Report.BuildingUpgraded,at,n,m3)SendReportToLocal(Report.BuildingUpgraded,at,n,m3)end;function Lib.EntityEvent.Global:TriggerUpgradeCollapsedEvent(n,at,m3)SendReport(Report.BuildingUpgradeCollapsed,at,n,m3)SendReportToLocal(Report.BuildingUpgradeCollapsed,at,n,m3)end;function Lib.EntityEvent.Local:Initialize()Report.SettlerAttracted=CreateReport("Event_SettlerAttracted")Report.EntitySpawned=CreateReport("Event_EntitySpawned")Report.EntityDestroyed=CreateReport("Event_EntityDestroyed")Report.EntityHurt=CreateReport("Event_EntityHurt")Report.EntityKilled=CreateReport("Event_EntityKilled")Report.EntityOwnerChanged=CreateReport("Event_EntityOwnerChanged")Report.EntityResourceChanged=CreateReport("Event_EntityResourceChanged")Report.ThiefInfiltratedBuilding=CreateReport("Event_ThiefInfiltratedBuilding")Report.ThiefDeliverEarnings=CreateReport("Event_ThiefDeliverEarnings")Report.BuildingConstructed=CreateReport("Event_BuildingConstructed")Report.BuildingUpgradeCollapsed=CreateReport("Event_BuildingUpgradeCollapsed")Report.BuildingUpgraded=CreateReport("Event_BuildingUpgraded")end;function Lib.EntityEvent.Local:OnReportReceived(aM,...)if aM==Report.LoadscreenClosed then self.LoadscreenClosed=true end end;RegisterModule(Lib.EntityEvent.Name)Lib.Register("module/entity/EntitySelection_Text")Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Text={Tooltips={KnightButton={Title={de="Ritter selektieren",en="Select Knight",fr="Sélectionner le chevalier"},Text={de="- Klick selektiert den Ritter {cr}- Doppelklick springt zum Ritter{cr}- UMSCH halten selektiert alle Ritter",en="- Click selects the knight {cr}- Double click jumps to knight{cr}- Press SHIFT to select all knights",fr="- Clic sélectionne le chevalier {cr}- Double-clic saute au chevalier{cr}- Maintenir SHIFT sélectionne tous les chevaliers"}},BattalionButton={Title={de="Militär selektieren",en="Select Units",fr="Sélectionner les unitées"},Text={de="- Selektiert alle Einheiten {cr}- UMSCH halten selektiert Militär {cr}- ALT halten selektiert Kriegsmaschinen {cr}- STRG halten selektiert Diebe",en="- Selects all units {cr}- Holding SHIFT selects military {cr}- Holding ALT selects siege engines {cr}- Holding CTRL selects thieves",fr="- Sélectionne toutes les unités {cr}- Maintenir SHIFT sélectionne les militaires {cr}- Maintenir ALT sélectionne les machines de guerre {cr}- Maintenir CTRL sélectionne les voleurs"}},ReleaseSoldiers={Title={de="Militär entlassen",en="Release military unit",fr="licencier l'unitées"},Text={de="- Eine Militäreinheit entlassen {cr}- Soldaten werden nacheinander entlassen",en="- Dismiss a military unit {cr}- Soldiers will be dismissed each after another",fr="- Licencier une unité militaire {cr}- Les soldats sont licenciés les uns après les autres"},Disabled={de="Kann nicht entlassen werden!",en="Releasing is impossible!",fr="Ne peut pas être licencié!"}},TrebuchetCart={Title={de="Trebuchetwagen",en="Trebuchet cart",fr="Chariot à trébuchet"},Text={de="- Kann einmalig zum Trebuchet ausgebaut werden",en="- Can uniquely be transmuted into a trebuchet",fr="- Peut être transformé une seule fois en trébuchet"}},Trebuchet={Title={de="Trebuchet",en="Trebuchet",fr="Trébuchet"},Text={de="- Kann über weite Strecken Gebäude angreifen {cr}- Kann Gebäude in Brand stecken {cr}- Trebuchet kann manuell zurückgeschickt werden",en="- Can perform long range attacks on buildings {cr}- Can set buildings on fire {cr}- The trebuchet can be manually send back to the city",fr="- Peut attaquer des bâtiments sur de longues distances {cr}- Peut mettre le feu à des bâtiments {cr}- Le trébuchet peut être renvoyé manuellement"}}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntitySelection_API")function DisableReleaseThieves(e2)if not IsLocalScript()then ExecuteLocal([[DisableReleaseThieves(%s)]],tostring(e2))return end;Lib.EntitySelection.AquireContext()this.ThiefRelease=not e2;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseThieves=DisableReleaseThieves;function DisableReleaseSiegeEngines(e2)if not IsLocalScript()then ExecuteLocal([[DisableReleaseSiegeEngines(%s)]],tostring(e2))return end;Lib.EntitySelection.AquireContext()this.SiegeEngineRelease=not e2;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseSiegeEngines=DisableReleaseSiegeEngines;function DisableReleaseSoldiers(e2)if not IsLocalScript()then ExecuteLocal([[DisableReleaseSoldiers(%s)]],tostring(e2))return end;Lib.EntitySelection.AquireContext()this.MilitaryRelease=not e2;Lib.EntitySelection.ReleaseContext()end;API.DisableReleaseSoldiers=DisableReleaseSoldiers;Lib.EntitySelection=Lib.EntitySelection or{}Lib.EntitySelection.Name="EntitySelection"Lib.EntitySelection.Global={TrebuchetIDToCart={}}Lib.EntitySelection.Local={TrebuchetDisassemble=false,TrebuchetErect=false,ThiefRelease=false,SiegeEngineRelease=true,MilitaryRelease=true}Lib.Require("comfort/GetPosition")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/entity/EntitySelection_API")Lib.Require("module/entity/EntitySelection_Text")Lib.Register("module/entity/EntitySelection")function Lib.EntitySelection.Global:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")Lib.EntitySelection.Local=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Global:OnSaveGameLoaded()end;function Lib.EntitySelection.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ForceTrebuchetTasklist then Logic.SetTaskList(arg[1],arg[2])elseif aM==Report.ErectTrebuchet then Lib.EntitySelection.Global:MilitaryErectTrebuchet(arg[1])elseif aM==Report.DisambleTrebuchet then Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(arg[1])elseif aM==Report.ExpelSettler then DestroyEntity(arg[1])end end;function Lib.EntitySelection.Global:MilitaryDisambleTrebuchet(at)local E,F,G=Logic.EntityGetPos(at)local q=Logic.EntityGetPlayer(at)if GameCallback_Lib_OnDisambleTrebuchet then GameCallback_Lib_OnDisambleTrebuchet(at,q,E,F,G)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,E,F,0)Logic.SetEntityInvulnerabilityFlag(at,1)Logic.SetEntitySelectableFlag(at,0)Logic.SetVisible(at,false)local mo=self.TrebuchetIDToCart[at]if mo~=nil then Logic.SetEntityInvulnerabilityFlag(mo,0)Logic.SetEntitySelectableFlag(mo,1)Logic.SetVisible(mo,true)else mo=Logic.CreateEntity(Entities.U_SiegeEngineCart,E,F,0,q)self.TrebuchetIDToCart[at]=mo end;Logic.DEBUG_SetSettlerPosition(mo,E,F)Logic.SetTaskList(mo,TaskLists.TL_NPC_IDLE)ExecuteLocal([[GUI.SelectEntity(%d)]],mo)end;function Lib.EntitySelection.Global:MilitaryErectTrebuchet(at)local E,F,G=Logic.EntityGetPos(at)local q=Logic.EntityGetPlayer(at)if GameCallback_Lib_OnErectTrebuchet then GameCallback_Lib_OnErectTrebuchet(at,q,E,F,G)return end;Logic.CreateEffect(EGL_Effects.E_Shockwave01,E,F,0)Logic.SetEntityInvulnerabilityFlag(at,1)Logic.SetEntitySelectableFlag(at,0)Logic.SetVisible(at,false)local mp;for g,h in pairs(self.TrebuchetIDToCart)do if h==at then mp=tonumber(g)end end;if mp==nil then mp=Logic.CreateEntity(Entities.U_Trebuchet,E,F,0,q)self.TrebuchetIDToCart[mp]=at end;Logic.SetEntityInvulnerabilityFlag(mp,0)Logic.SetEntitySelectableFlag(mp,1)Logic.SetVisible(mp,true)Logic.DEBUG_SetSettlerPosition(mp,E,F)ExecuteLocal([[GUI.SelectEntity(%d)]],mp)end;function Lib.EntitySelection.Local:Initialize()if not self.IsInstalled then Report.ExpelSettler=CreateReport("Event_ExpelSettler")Report.ForceTrebuchetTasklist=CreateReport("Event_ForceTrebuchetTasklist")Report.ErectTrebuchet=CreateReport("Event_ErectTrebuchet")Report.DisambleTrebuchet=CreateReport("Event_DisambleTrebuchet")self:OverwriteMilitaryCommands()self:OverwriteMilitaryErect()self:OverwriteMilitaryDisamble()self:OverwriteMultiselectIcon()self:OverwriteMilitaryDismount()self:OverwriteThiefDeliver()self:OverwriteSelectKnight()self:OverwriteSelectAllUnits()self:OverwriteNamesAndDescription()Lib.EntitySelection.Global=nil end;self.IsInstalled=true end;function Lib.EntitySelection.Local:OnSaveGameLoaded()end;function Lib.EntitySelection.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.EntitySelection.Local:OverwriteMilitaryCommands()GUI_Military.StandGroundClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local mq={GUI.GetSelectedEntities()}for f=1,#mq do local mr=mq[f]local ms=Logic.GetEntityType(mr)GUI.SendCommandStationaryDefend(mr)if ms==Entities.U_Trebuchet then SendReportToGlobal(Report.ForceTrebuchetTasklist,mr,TaskLists.TL_NPC_IDLE)SendReport(Report.ForceTrebuchetTasklist,mr,TaskLists.TL_NPC_IDLE)end end end;GUI_Military.StandGroundUpdate=function()local mt="/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack"local mq={GUI.GetSelectedEntities()}SetIcon(mt,{12,4})if#mq==1 then local bQ=mq[1]local ms=Logic.GetEntityType(bQ)if ms==Entities.U_Trebuchet then if Logic.GetAmmunitionAmount(bQ)>0 then XGUIEng.ShowWidget(mt,0)else XGUIEng.ShowWidget(mt,1)end;SetIcon(mt,{1,10})else XGUIEng.ShowWidget(mt,1)end end end end;function Lib.EntitySelection.Local:OverwriteMilitaryErect()GUI_Military.ErectClicked_Orig_Selection=GUI_Military.ErectClicked;GUI_Military.ErectClicked=function()GUI_Military.ErectClicked_Orig_Selection()local mq={GUI.GetSelectedEntities()}for f=1,#mq,1 do local cM=Logic.GetEntityType(mq[f])if cM==Entities.U_SiegeEngineCart then SendReportToGlobal(Report.ErectTrebuchet,mq[f])SendReport(Report.ErectTrebuchet,mq[f])end end end;GUI_Military.ErectUpdate_Orig_Selection=GUI_Military.ErectUpdate;GUI_Military.ErectUpdate=function()local d4=XGUIEng.GetCurrentWidgetID()local mu=GUI.GetSelectedEntity()local cM=Logic.GetEntityType(mu)if cM==Entities.U_SiegeEngineCart then local lz=Lib.EntitySelection.Local.TrebuchetErect and 0 or 1;XGUIEng.DisableButton(d4,lz)SetIcon(d4,{12,6})else GUI_Military.ErectUpdate_Orig_Selection()end end;GUI_Military.ErectMouseOver_Orig_Selection=GUI_Military.ErectMouseOver;GUI_Military.ErectMouseOver=function()local mu=GUI.GetSelectedEntity()local mv;if Logic.GetEntityType(mu)==Entities.U_SiegeEngineCart then mv="ErectCatapult"else GUI_Military.ErectMouseOver_Orig_Selection()return end;GUI_Tooltip.TooltipNormal(mv,"Erect")end end;function Lib.EntitySelection.Local:OverwriteMilitaryDisamble()GUI_Military.DisassembleClicked_Orig_Selection=GUI_Military.DisassembleClicked;GUI_Military.DisassembleClicked=function()GUI_Military.DisassembleClicked_Orig_Selection()local mq={GUI.GetSelectedEntities()}for f=1,#mq,1 do local cM=Logic.GetEntityType(mq[f])if cM==Entities.U_Trebuchet then SendReportToGlobal(Report.DisambleTrebuchet,mq[f])SendReport(Report.DisambleTrebuchet,mq[f])end end end;GUI_Military.DisassembleMouseOver_Orig_Selection=GUI_Military.DisassembleMouseOver;GUI_Military.DisassembleMouseOver=function()local mw=GUI.GetSelectedEntity()local mx;if Logic.IsSiegeEngineUnderConstruction(mw)==true then mx="Disassemble"else mx="DisassembleNoSoldiersAttached"if not Lib.EntitySelection.Local.TrebuchetDisassemble then mx="Disassemble"end end;GUI_Tooltip.TooltipNormal(nil,mx)end;GUI_Military.DisassembleUpdate_Orig_Selection=GUI_Military.DisassembleUpdate;GUI_Military.DisassembleUpdate=function()local d4=XGUIEng.GetCurrentWidgetID()local mw=GUI.GetSelectedEntity()local cM=Logic.GetEntityType(mw)if cM==Entities.U_Trebuchet then local lz=Lib.EntitySelection.Local.TrebuchetDisassemble and 0 or 1;XGUIEng.DisableButton(d4,lz)SetIcon(d4,{12,9})else GUI_Military.DisassembleUpdate_Orig_Selection()end end end;function Lib.EntitySelection.Local:OnSelectionCanged(b)local w=GUI.GetSelectedEntity()local cM=Logic.GetEntityType(w)if w~=nil then if cM==Entities.U_SiegeEngineCart then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngineCart",1)elseif cM==Entities.U_Trebuchet then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/Selection",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/BGMilitary",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/Military/Attack",0)GUI_Military.StrengthUpdate()XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/DialogButtons/SiegeEngine",1)end end end;function Lib.EntitySelection.Local:OverwriteMultiselectIcon()GUI_MultiSelection.IconUpdate_Orig_Selection=GUI_MultiSelection.IconUpdate;GUI_MultiSelection.IconUpdate=function()local d4=XGUIEng.GetCurrentWidgetID()local my=XGUIEng.GetWidgetsMotherID(d4)local mz=XGUIEng.GetWidgetNameByID(my)local ax=mz+0;local mA=XGUIEng.GetWidgetPathByID(my)local mB=mA.."/Health"local w=g_MultiSelection.EntityList[ax]local cM=Logic.GetEntityType(w)local mC=Logic.GetEntityHealth(w)local mD=Logic.GetEntityMaxHealth(w)if cM~=Entities.U_SiegeEngineCart and cM~=Entities.U_Trebuchet then GUI_MultiSelection.IconUpdate_Orig_Selection()return end;if Logic.IsEntityAlive(w)==false then XGUIEng.ShowWidget(my,0)GUI_MultiSelection.CreateEX()return end;SetIcon(d4,g_TexturePositions.Entities[cM])mC=math.floor(mC/mD*100)if mC<50 then local mE=math.floor(2*255*mC/100)XGUIEng.SetMaterialColor(mB,0,255,mE,20,255)else local mF=2*255-math.floor(2*255*mC/100)XGUIEng.SetMaterialColor(mB,0,mF,255,20,255)end;XGUIEng.SetProgressBarValues(mB,mC,100)end;GUI_MultiSelection.IconMouseOver_Orig_Selection=GUI_MultiSelection.IconMouseOver;GUI_MultiSelection.IconMouseOver=function()local d4=XGUIEng.GetCurrentWidgetID()local my=XGUIEng.GetWidgetsMotherID(d4)local mz=XGUIEng.GetWidgetNameByID(my)local ax=tonumber(mz)local w=g_MultiSelection.EntityList[ax]local cM=Logic.GetEntityType(w)if cM~=Entities.U_SiegeEngineCart and cM~=Entities.U_Trebuchet then GUI_MultiSelection.IconMouseOver_Orig_Selection()return end;if cM==Entities.U_SiegeEngineCart then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Title),Localize(Lib.EntitySelection.Text.Tooltips.TrebuchetCart.Text))elseif cM==Entities.U_Trebuchet then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Title),Localize(Lib.EntitySelection.Text.Tooltips.Trebuchet.Text))end end end;function Lib.EntitySelection.Local:OverwriteMilitaryDismount()GUI_Military.DismountClicked_Orig_Selection=GUI_Military.DismountClicked;GUI_Military.DismountClicked=function()local fU=GUI.GetSelectedEntity()local m=Logic.GetEntityType(fU)local mG=Logic.GetGuardedEntityID(fU)local mH=Logic.GetGuardianEntityID(fU)if mG~=0 and Logic.EntityGetPlayer(mG)~=GUI.GetPlayerID()then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsKnight(fU)or Logic.IsEntityInCategory(fU,EntityCategories.AttackableMerchant)==1 then GUI_Military.DismountClicked_Orig_Selection()return end;if Logic.IsLeader(fU)==1 and mG==0 then if Lib.EntitySelection.Local.MilitaryRelease then Sound.FXPlay2DSound("ui\\menu_click")local aJ={Logic.GetSoldiersAttachedToLeader(fU)}SendReportToGlobal(Report.ExpelSettler,aJ[#aJ])SendReport(Report.ExpelSettler,aJ[#aJ])return end end;if m==Entities.U_AmmunitionCart or m==Entities.U_BatteringRamCart or m==Entities.U_CatapultCart or m==Entities.U_SiegeTowerCart or m==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or m==Entities.U_MilitarySiegeTower then if Lib.EntitySelection.Local.SiegeEngineRelease and mH==0 then Sound.FXPlay2DSound("ui\\menu_click")SendReportToGlobal(Report.ExpelSettler,fU)SendReport(Report.ExpelSettler,fU)else GUI_Military.DismountClicked_Orig_Selection()end end end;GUI_Military.DismountUpdate_Orig_Selection=GUI_Military.DismountUpdate;GUI_Military.DismountUpdate=function()local d4=XGUIEng.GetCurrentWidgetID()local fU=GUI.GetSelectedEntity()local m=Logic.GetEntityType(fU)local mG=Logic.GetGuardedEntityID(fU)local mH=Logic.GetGuardianEntityID(fU)SetIcon(d4,{12,1})if mG~=0 and Logic.EntityGetPlayer(mG)~=GUI.GetPlayerID()then XGUIEng.DisableButton(d4,0)GUI_Military.DismountUpdate_Orig_Selection()return end;if Logic.IsKnight(fU)or Logic.IsEntityInCategory(fU,EntityCategories.AttackableMerchant)==1 then XGUIEng.DisableButton(d4,0)GUI_Military.DismountUpdate_Orig_Selection()return end;SetIcon(d4,{14,12})if m==Entities.U_MilitaryLeader then if not Lib.EntitySelection.Local.MilitaryRelease then XGUIEng.DisableButton(d4,1)else XGUIEng.DisableButton(d4,0)end;return end;if m==Entities.U_AmmunitionCart or m==Entities.U_BatteringRamCart or m==Entities.U_CatapultCart or m==Entities.U_SiegeTowerCart or m==Entities.U_MilitaryBatteringRam or Entities.U_MilitaryCatapult or m==Entities.U_MilitarySiegeTower then if mH~=0 then SetIcon(d4,{12,1})XGUIEng.DisableButton(d4,0)else if not Lib.EntitySelection.Local.SiegeEngineRelease then XGUIEng.DisableButton(d4,1)else XGUIEng.DisableButton(d4,0)end end end end end;function Lib.EntitySelection.Local:OverwriteThiefDeliver()GUI_Thief.ThiefDeliverClicked_Orig_Selection=GUI_Thief.ThiefDeliverClicked;GUI_Thief.ThiefDeliverClicked=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverClicked_Orig_Selection()return end;Sound.FXPlay2DSound("ui\\menu_click")local mI=GUI.GetSelectedEntity()if mI==nil or Logic.GetEntityType(mI)~=Entities.U_Thief then return end;SendReportToGlobal(Report.ExpelSettler,mI)SendReport(Report.ExpelSettler,mI)end;GUI_Thief.ThiefDeliverMouseOver_Orig_Selection=GUI_Thief.ThiefDeliverMouseOver;GUI_Thief.ThiefDeliverMouseOver=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverMouseOver_Orig_Selection()return end;SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))end;GUI_Thief.ThiefDeliverUpdate_Orig_Selection=GUI_Thief.ThiefDeliverUpdate;GUI_Thief.ThiefDeliverUpdate=function()if not Lib.EntitySelection.Local.ThiefRelease then GUI_Thief.ThiefDeliverUpdate_Orig_Selection()return end;local d4=XGUIEng.GetCurrentWidgetID()local mI=GUI.GetSelectedEntity()if mI==nil or Logic.GetEntityType(mI)~=Entities.U_Thief then XGUIEng.DisableButton(d4,1)else XGUIEng.DisableButton(d4,0)end;SetIcon(d4,{14,12})end end;function Lib.EntitySelection.Local:OverwriteSelectKnight()GUI_Knight.JumpToButtonClicked=function()local q=GUI.GetPlayerID()local cH=Logic.GetKnightID(q)if cH>0 then g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}GUI.ClearSelection()if XGUIEng.IsModifierPressed(Keys.ModifierShift)then local mJ={}Logic.GetKnights(q,mJ)for f=1,#mJ do GUI.SelectEntity(mJ[f])end else GUI.SelectEntity(Logic.GetKnightID(q))if Framework.GetTimeMs()-g_Selection.LastClickTime<g_Selection.MaxDoubleClickTime then local aP=GetPosition(cH)Camera.RTS_SetLookAtPosition(aP.X,aP.Y)else Sound.FXPlay2DSound("ui\\mini_knight")end;g_Selection.LastClickTime=Framework.GetTimeMs()end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)else GUI.AddNote("Debug: You do not have a knight!")end end end;function Lib.EntitySelection.Local:OverwriteSelectAllUnits()GUI_MultiSelection.SelectAllPlayerUnitsClicked=function()local mK=XGUIEng.IsModifierPressed(Keys.ModifierAlt)local mL=XGUIEng.IsModifierPressed(Keys.ModifierControl)local mM=XGUIEng.IsModifierPressed(Keys.ModifierShift)if not mK and not mL and not mM then Lib.EntitySelection.Local:SortOrderFullSelection()end;if mK and not mL and not mM then Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()end;if not mK and mL and not mM then Lib.EntitySelection.Local:SortOrderThievesOnly()end;if not mK and not mL and mM then Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()end;Sound.FXPlay2DSound("ui\\menu_click")GUI.ClearSelection()local q=GUI.GetPlayerID()for f=1,#LeaderSortOrder do local mN=GetPlayerEntities(q,LeaderSortOrder[f])for b8=1,#mN do GUI.SelectEntity(mN[b8])end end;if not mK and not mL and not mM or not mK and not mL and mM then local mO={}Logic.GetKnights(q,mO)for g=1,#mO do GUI.SelectEntity(mO[g])end end;GUI_MultiSelection.CreateMultiSelection(g_SelectionChangedSource.User)end end;function Lib.EntitySelection.Local:SortOrderFullSelection()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;LeaderSortOrder[13]=Entities.U_MilitaryCatapult;LeaderSortOrder[14]=Entities.U_Trebuchet;LeaderSortOrder[15]=Entities.U_MilitarySiegeTower;LeaderSortOrder[16]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[17]=Entities.U_CatapultCart;LeaderSortOrder[18]=Entities.U_SiegeTowerCart;LeaderSortOrder[19]=Entities.U_BatteringRamCart;LeaderSortOrder[20]=Entities.U_AmmunitionCart;LeaderSortOrder[21]=Entities.U_Thief;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,17,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderMilitaryUnitsOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitarySword;LeaderSortOrder[2]=Entities.U_MilitaryBow;LeaderSortOrder[3]=Entities.U_MilitarySword_RedPrince;LeaderSortOrder[4]=Entities.U_MilitaryBow_RedPrince;LeaderSortOrder[5]=Entities.U_MilitaryBandit_Melee_ME;LeaderSortOrder[6]=Entities.U_MilitaryBandit_Melee_NA;LeaderSortOrder[7]=Entities.U_MilitaryBandit_Melee_NE;LeaderSortOrder[8]=Entities.U_MilitaryBandit_Melee_SE;LeaderSortOrder[9]=Entities.U_MilitaryBandit_Ranged_ME;LeaderSortOrder[10]=Entities.U_MilitaryBandit_Ranged_NA;LeaderSortOrder[11]=Entities.U_MilitaryBandit_Ranged_NE;LeaderSortOrder[12]=Entities.U_MilitaryBandit_Ranged_SE;if g_GameExtraNo>=1 then table.insert(LeaderSortOrder,4,Entities.U_MilitarySword_Khana)table.insert(LeaderSortOrder,6,Entities.U_MilitaryBow_Khana)table.insert(LeaderSortOrder,7,Entities.U_MilitaryBandit_Melee_AS)table.insert(LeaderSortOrder,12,Entities.U_MilitaryBandit_Ranged_AS)end;if Entities.U_MilitaryPoleArm then table.insert(LeaderSortOrder,1,Entities.U_MilitaryPoleArm)end;if Entities.U_MilitaryCavalry then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCavalry)end end;function Lib.EntitySelection.Local:SortOrderSiegeEnginesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_MilitaryCatapult;LeaderSortOrder[2]=Entities.U_Trebuchet;LeaderSortOrder[3]=Entities.U_MilitarySiegeTower;LeaderSortOrder[4]=Entities.U_MilitaryBatteringRam;LeaderSortOrder[5]=Entities.U_CatapultCart;LeaderSortOrder[6]=Entities.U_SiegeTowerCart;LeaderSortOrder[7]=Entities.U_BatteringRamCart;LeaderSortOrder[8]=Entities.U_AmmunitionCart;if Entities.U_MilitaryCannon then table.insert(LeaderSortOrder,1,Entities.U_MilitaryCannon)end end;function Lib.EntitySelection.Local:SortOrderThievesOnly()g_MultiSelection={}g_MultiSelection.EntityList={}g_MultiSelection.Highlighted={}LeaderSortOrder={}LeaderSortOrder[1]=Entities.U_Thief end;function Lib.EntitySelection.Local:OverwriteNamesAndDescription()GUI_Tooltip.SetNameAndDescription_Orig_Selection=GUI_Tooltip.SetNameAndDescription;GUI_Tooltip.SetNameAndDescription=function(mP,mQ,mR,mS,mT)local jO="/InGame/Root/Normal/AlignBottomRight"local d4=XGUIEng.GetCurrentWidgetID()if XGUIEng.GetWidgetID(jO.."/MapFrame/KnightButton")==d4 then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.KnightButton.Text))return end;if XGUIEng.GetWidgetID(jO.."/MapFrame/BattalionButton")==d4 then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Title),Localize(Lib.EntitySelection.Text.Tooltips.BattalionButton.Text))return end;if XGUIEng.GetWidgetID(jO.."/DialogButtons/SiegeEngineCart/Dismount")==d4 or XGUIEng.GetWidgetID(jO.."/DialogButtons/AmmunitionCart/Dismount")==d4 or XGUIEng.GetWidgetID(jO.."/DialogButtons/Military/Dismount")==d4 then local mU=GUI.GetSelectedEntity()if mU~=0 then if Logic.IsEntityInCategory(mU,EntityCategories.Military)==1 then local mV=Logic.GetGuardianEntityID(mU)local mW=Logic.GetGuardedEntityID(mU)if mV==0 and mW==0 then SetTooltipNormal(Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Title),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Text),Localize(Lib.EntitySelection.Text.Tooltips.ReleaseSoldiers.Disabled))return end end end end;GUI_Tooltip.SetNameAndDescription_Orig_Selection(mP,mQ,mR,mS,mT)end end;RegisterModule(Lib.EntitySelection.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/balancing/Damage_API")function SetEntityTypeDamage(i,mX,...)assert(not IsLocalScript())assert(type(mX)=="number")local k={...}Lib.Damage.AquireContext()this.EntityTypeDamage[i]=this.EntityTypeDamage[i]or{}if#k~=0 then for f=1,#k do this.EntityTypeDamage[i][k[f]]=mX end else this.EntityTypeDamage[i][0]=mX end;Lib.Damage.ReleaseContext()end;API.SetEntityTypeDamage=SetEntityTypeDamage;function SetEntityNameDamage(C,mX,...)assert(not IsLocalScript())assert(type(mX)=="number")local k={...}Lib.Damage.AquireContext()this.EntityNameDamage[C]=this.EntityNameDamage[C]or{}if#k~=0 then for f=1,#k do this.EntityNameDamage[C][k[f]]=mX end else this.EntityNameDamage[C][0]=mX end;Lib.Damage.ReleaseContext()end;API.SetEntityNameDamage=SetEntityNameDamage;function SetEntityTypeArmor(i,mY)assert(not IsLocalScript())assert(type(mY)=="number")Lib.Damage.AquireContext()this.EntityTypeArmor[i]=mY;Lib.Damage.ReleaseContext()end;API.SetEntityTypeArmor=SetEntityTypeArmor;function SetEntityNameArmor(C,mY)assert(not IsLocalScript())assert(type(mY)=="number")Lib.Damage.AquireContext()this.EntityNameArmor[C]=mY;Lib.Damage.ReleaseContext()end;API.SetEntityNameArmor=SetEntityNameArmor;function SetTerritoryBonus(n,mZ)assert(not IsLocalScript())assert(type(mZ)=="number")Lib.Damage.AquireContext()this.TerritoryBonus[n]=mZ or 1;Lib.Damage.ReleaseContext()end;API.SetTerritoryBonus=SetTerritoryBonus;function SetHeightModifier(n,mZ)assert(not IsLocalScript())assert(type(mZ)=="number")Lib.Damage.AquireContext()this.HeightModifier[n]=mZ or 1;Lib.Damage.ReleaseContext()end;API.SetHeightModifier=SetHeightModifier;function IsInvulnerable(l)local d=false;if not IsLocalScript()then Lib.Damage.AquireContext()d=this.InvulnerableList[GetID(l)]~=nil;Lib.Damage.ReleaseContext()end;return d end;API.IsInvulnerable=IsInvulnerable;Lib.Damage=Lib.Damage or{}Lib.Damage.Name="Damage"Lib.Damage.Global={InvulnerableList={},EntityTypeDamage={},EntityNameDamage={},EntityTypeArmor={},EntityNameArmor={},TerritoryBonus={},HeightModifier={}}Lib.Damage.Local={}Lib.Require("core/Core")Lib.Require("module/entity/EntityEvent")Lib.Require("module/balancing/Damage_API")Lib.Register("module/balancing/Damage")function Lib.Damage.Global:Initialize()if not self.IsInstalled then for q=0,8 do self.TerritoryBonus[q]=1;self.HeightModifier[q]=1 end;self:OverwriteVulnerabilityFunctions()Lib.Damage.Local=nil end;self.IsInstalled=true end;function Lib.Damage.Global:OnSaveGameLoaded()end;function Lib.Damage.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true;self:InitEntityBaseDamageBsg()self:InitEntityBaseDamageExt()elseif aM==Report.EntityDestroyed then self.InvulnerableList[arg[1]]=nil elseif aM==Report.EntityHurt then self:OnEntityHurtEntity(arg[1],arg[2],arg[3],arg[4])end end;function Lib.Damage.Global:IsInvulnerable(l)return self.InvulnerableList[GetID(l)]~=nil end;function Lib.Damage.Global:InitEntityBaseDamageBsg()SetEntityTypeDamage(Entities.U_MilitaryBow,20)SetEntityTypeDamage(Entities.U_MilitaryBow,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,20)SetEntityTypeDamage(Entities.U_MilitaryBow_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword,30)SetEntityTypeDamage(Entities.U_MilitarySword,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,30)SetEntityTypeDamage(Entities.U_MilitarySword_RedPrince,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_ME,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NA,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_NE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_SE,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBallista,50)SetEntityTypeDamage(Entities.U_MilitaryBallista,10,EntityCategories.CityWallGate)SetEntityTypeDamage(Entities.U_MilitaryCatapult,50)SetEntityTypeDamage(Entities.U_MilitaryCatapult,10,EntityCategories.CityWallGate)SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,120)SetEntityTypeDamage(Entities.U_MilitaryBatteringRam,20,EntityCategories.CityWallSegment)SetEntityTypeDamage(Entities.U_MilitarySiegeTower,0)SetEntityTypeDamage(Entities.U_MilitaryTrap,800)SetEntityTypeDamage(Entities.A_ME_Bear,120)SetEntityTypeDamage(Entities.A_ME_Bear_black,120)SetEntityTypeDamage(Entities.A_ME_Wolf,20)SetEntityTypeDamage(Entities.A_NA_Lion_Female,40)SetEntityTypeDamage(Entities.A_NA_Lion_Male,40)SetEntityTypeDamage(Entities.A_NE_PolarBear,120)end;function Lib.Damage.Global:InitEntityBaseDamageExt()if g_GameExtraNo==0 then return end;SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,20)SetEntityTypeDamage(Entities.U_MilitaryBow_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitarySword_Khana,30)SetEntityTypeDamage(Entities.U_MilitarySword_Khana,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,30)SetEntityTypeDamage(Entities.U_MilitaryBandit_Melee_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,20)SetEntityTypeDamage(Entities.U_MilitaryBandit_Ranged_AS,5,EntityCategories.AttackableBuilding,EntityCategories.PalisadeSegment,EntityCategories.SpecialBuilding)SetEntityTypeDamage(Entities.A_AS_BearBlack,120)SetEntityTypeDamage(Entities.A_AS_Tiger,40)end;function Lib.Damage.Global:OverwriteVulnerabilityFunctions()MakeInvulnerable=function(l)if IsExisting(l)then local ar=GetID(l)Lib.Damage.Global.InvulnerableList[ar]=nil;Logic.SetEntityInvulnerabilityFlag(ar,1)end end;MakeVulnerable=function(l)if IsExisting(l)then local ar=GetID(l)Lib.Damage.Global.InvulnerableList[ar]=true;Logic.SetEntityInvulnerabilityFlag(ar,0)end end end;function Lib.Damage.Global:OnEntityHurtEntity(mk,ml,mm,mn)local m_=self:GetTrueEntityID(mk)local cg=self:GetTrueEntityID(mm)if m_==0 or cg==0 then return end;Logic.SetEntityInvulnerabilityFlag(cg,1)if self.InvulnerableList[cg]then return end;local n0=25;local n1=Logic.GetTerritoryBonus(m_)*self.TerritoryBonus[ml]local n2=Logic.GetHeightDamageModifier(m_)*self.HeightModifier[ml]local n3=Logic.GetEntityType(m_)local n4=Logic.GetEntityType(cg)local n5=Logic.GetEntityName(m_)local n6=Logic.GetEntityName(cg)local n7=Logic.GetPlayerMorale(ml)n0=self:GetEntityTypeBaseDamage(n3,n4)or n0;n0=self:GetEntityNameBaseDamage(n5,n4)or n0;local n8=0;if self.EntityTypeArmor[n4]then n8=self.EntityTypeArmor[n4]end;if self.EntityNameArmor[n6]then n8=self.EntityNameArmor[n6]end;n0=n0*(math.max(n7,0.5)+n1)*n2;n0=self:ApllyRangedCloseCombatDamage(m_,n0)n0=self:ApllyWallCatapultCombatDamage(m_,n0)n0=math.abs(n0-n8)if GameCallback_Lib_CalculateBattleDamage~=nil then n0=GameCallback_Lib_CalculateBattleDamage(m_,ml,cg,mn,n0)end;local ac=Logic.GetEntityHealth(cg)n0=math.min(ac,math.max(1,math.ceil(n0)))Logic.SetEntityInvulnerabilityFlag(cg,0)Logic.HurtEntity(cg,n0)if ac>n0 then Logic.SetEntityInvulnerabilityFlag(cg,1)end end;function Lib.Damage.Global:GetEntityTypeBaseDamage(n9,na)if self.EntityTypeDamage[n9]then for kH,n0 in pairs(self.EntityTypeDamage[n9])do if kH>0 and Logic.IsEntityTypeInCategory(na,kH)==1 then return n0 end end;return self.EntityTypeDamage[n9][0]or 25 end end;function Lib.Damage.Global:GetEntityNameBaseDamage(nb,na)if self.EntityNameDamage[nb]then for kH,n0 in pairs(self.EntityNameDamage[nb])do if kH>0 and Logic.IsEntityTypeInCategory(na,kH)==1 then return n0 end end;return self.EntityNameDamage[nb][0]or 25 end end;function Lib.Damage.Global:GetTrueEntityID(at)if Logic.IsLeader(at)==1 then local aJ={Logic.GetSoldiersAttachedToLeader(at)}for f=2,aJ[1]+1 do if Logic.GetEntityHealth(aJ[f])>0 then return aJ[f]end end;return 0 end;if Logic.GetEntityHealth(at)==0 then return 0 end;return at end;function Lib.Damage.Global:ApllyRangedCloseCombatDamage(at,mX)local n0=mX;if Logic.GetCurrentTaskList(at)=="TL_BATTLE_BOW_CLOSECOMBAT"then local nc=0.3;if GameCallback_Lib_CalculateRangedCloseCombatDamageFactor then local q=Logic.EntityGetPlayer(at)nc=GameCallback_Lib_CalculateRangedCloseCombatDamageFactor(q,at,mX)end;n0=n0*nc end;return n0 end;function Lib.Damage.Global:ApllyWallCatapultCombatDamage(at,mX)local n0=mX;local m=Logic.GetEntityType(at)if m==Entities.U_MilitaryBallista then local nc=1;local q=Logic.EntityGetPlayer(at)if GameCallback_Lib_CalculateWallCatapultDamageFactor then nc=GameCallback_Lib_CalculateWallCatapultDamageFactor(q,at,mX)elseif Logic.PlayerGetIsHumanFlag(q)==true then local E,F,G=Logic.EntityGetPos(at)local nd={Logic.GetPlayerEntitiesInArea(q,m,E,F,1500,16)}nc=nd[1]>1 and nc/nd[1]or 1 end;n0=n0*nc end;return n0 end;function Lib.Damage.Local:Initialize()if not self.IsInstalled then Lib.Damage.Global=nil end;self.IsInstalled=true end;function Lib.Damage.Local:OnSaveGameLoaded()end;function Lib.Damage.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.Damage.Name)Lib.Register("module/quest/Quest_Behavior")function Goal_WinQuest(...)return B_Goal_WinQuest:new(...)end;B_Goal_WinQuest={Name="Goal_WinQuest",Description={en="Goal: The player has to win a given quest.",de="Ziel: Der Spieler muss eine angegebene Quest erfolgreich abschliessen.",fr="Objectif: Le joueur doit réussir une quête indiquée."},Parameter={{ParameterType.QuestName,en="Quest Name",de="Questname",fr="Nom de la quête"}}}function B_Goal_WinQuest:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_WinQuest:AddParameter(bh,bi)if bh==0 then self.Quest=bi end end;function B_Goal_WinQuest:CustomFunction(bg)local ne=Quests[GetQuestID(self.Quest)]if ne then if ne.Result==QuestResult.Failure then return false end;if ne.Result==QuestResult.Success then return true end end;return nil end;function B_Goal_WinQuest:Debug(bg)if Quests[GetQuestID(self.Quest)]==nil then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest.."' does not exist!")return true end;return false end;RegisterBehavior(B_Goal_WinQuest)function Goal_DiscoverPlayers(...)return B_Goal_DiscoverPlayers:new(...)end;B_Goal_DiscoverPlayers={Name="Goal_DiscoverPlayers",Description={en="Goal: Discover the home territory of some other players.",de="Ziel: Entdecke das Heimatterritorium einiger Spieler.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.Custom,en="Player amount",de="Spieleranzahl",fr="Montant du Joueur"},{ParameterType.PlayerID,en="Player 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="Player 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.PlayerID,en="Player 3",de="Spieler 3",fr="Joueur 3"},{ParameterType.PlayerID,en="Player 4",de="Spieler 4",fr="Joueur 4"},{ParameterType.PlayerID,en="Player 5",de="Spieler 5",fr="Joueur 5"}}}function B_Goal_DiscoverPlayers:GetGoalTable()return{Objective.Discover,2,{unpack(self.PlayerList)}}end;function B_Goal_DiscoverPlayers:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 end;if bh>0 then self.PlayerList=self.PlayerList or{}if bh<=self.Amount then local q=bi*1;table.insert(self.PlayerList,q)end end end;function B_Goal_DiscoverPlayers:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local br=GetPlayerCategoryType(self.PlayerList[1]or 1)if br then local bn=bm[br]if bn then return bn end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayers)function Goal_DiscoverTerritories(...)return B_Goal_DiscoverTerritories:new(...)end;B_Goal_DiscoverTerritories={Name="Goal_DiscoverTerritories",Description={en="Goal: Discover multiple territories",de="Ziel: Entdecke mehrere Territorien",fr="Objectif : Découvrez plusieurs territoires"},Parameter={{ParameterType.Custom,en="Territory amount",de="Territorienanzahl",fr="Montant du territoire"},{ParameterType.TerritoryName,en="Territory 1",de="Territorium 1",fr="Territoire 1"},{ParameterType.TerritoryName,en="Territory 2",de="Territorium 2",fr="Territoire 2"},{ParameterType.TerritoryName,en="Territory 3",de="Territorium 3",fr="Territoire 3"},{ParameterType.TerritoryName,en="Territory 4",de="Territorium 4",fr="Territoire 4"},{ParameterType.TerritoryName,en="Territory 5",de="Territorium 5",fr="Territoire 5"}}}function B_Goal_DiscoverTerritories:GetGoalTable()return{Objective.Discover,1,{unpack(self.TerritoryList)}}end;function B_Goal_DiscoverTerritories:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 end;if bh>0 then self.TerritoryList=self.TerritoryList or{}if bh<=self.Amount then local a1=tonumber(bi)if not a1 then a1=GetTerritoryIDByName(bi)end;assert(a1>0)table.insert(self.TerritoryList,a1)end end end;function B_Goal_DiscoverTerritories:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritories)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(bh,bi)if bh==0 then self.LeastAmount=tonumber(bi)elseif bh==1 then self.QuestAmount=tonumber(bi)elseif bh==2 then self.QuestName1=bi elseif bh==3 then self.QuestName2=bi elseif bh==4 then self.QuestName3=bi elseif bh==5 then self.QuestName4=bi elseif bh==6 then self.QuestName5=bi end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local nf=0;for f=1,self.QuestAmount do local bV=GetQuestID(self["QuestName"..f])if IsValidQuest(bV)then if Quests[bV].Result==QuestResult.Success then nf=nf+1;if nf>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(bg)local ng=self.LeastAmount;local nh=self.QuestAmount;if ng<=0 or ng>5 then debug(false,bg.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif nh<=0 or nh>5 then debug(false,bg.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif ng>nh then debug(false,bg.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,nh do if not IsValidQuest(self["QuestName"..f])then debug(false,bg.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(bh)if bh==0 or bh==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_OnAtLeastXOfYQuestsFailed(...)return B_Trigger_OnAtLeastXOfYQuestsFailed:new(...)end;B_Trigger_OnAtLeastXOfYQuestsFailed={Name="Trigger_OnAtLeastXOfYQuestsFailed",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests fehlgeschlagen sind.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont échoué."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsFailed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsFailed:AddParameter(bh,bi)if bh==0 then self.LeastAmount=tonumber(bi)elseif bh==1 then self.QuestAmount=tonumber(bi)elseif bh==2 then self.QuestName1=bi elseif bh==3 then self.QuestName2=bi elseif bh==4 then self.QuestName3=bi elseif bh==5 then self.QuestName4=bi elseif bh==6 then self.QuestName5=bi end end;function B_Trigger_OnAtLeastXOfYQuestsFailed:CustomFunction()local nf=0;for f=1,self.QuestAmount do local bV=GetQuestID(self["QuestName"..f])if IsValidQuest(bV)then if Quests[bV].Result==QuestResult.Failure then nf=nf+1;if nf>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:Debug(bg)local ng=self.LeastAmount;local nh=self.QuestAmount;if ng<=0 or ng>5 then error(bg.Identifier..":"..self.Name..": LeastAmount is wrong")return true elseif nh<=0 or nh>5 then error(bg.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif ng>nh then error(bg.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,nh do if not IsValidQuest(self["QuestName"..f])then error(bg.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:GetCustomData(bh)if bh==0 or bh==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsFailed)function Trigger_OnExactOneQuestIsWon(...)return B_Trigger_OnExactOneQuestIsWon:new(...)end;B_Trigger_OnExactOneQuestIsWon={Name="Trigger_OnExactOneQuestIsWon",Description={en="Trigger: if one of two given quests has been finished successfully, but NOT both.",de="Auslöser: wenn eine von zwei angegebenen Quests (aber NICHT beide) erfolgreich abgeschlossen wurde.",fr="Déclencheur: lorsque l'une des deux quêtes indiquées (mais PAS les deux) a été accomplie avec succès."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsWon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsWon:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnExactOneQuestIsWon:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if ct and cs then local ni=cs.State==QuestState.Over and cs.Result==QuestResult.Success;local nj=ct.State==QuestState.Over and ct.Result==QuestResult.Success;if ni and not nj or not ni and nj then return true end end;return false end;function B_Trigger_OnExactOneQuestIsWon:Debug(bg)if self.Quest1==self.Quest2 then error(bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsWon)function Trigger_OnExactOneQuestIsLost(...)return B_Trigger_OnExactOneQuestIsLost:new(...)end;B_Trigger_OnExactOneQuestIsLost={Name="Trigger_OnExactOneQuestIsLost",Description={en="Trigger: If one of two given quests has been lost, but NOT both.",de="Auslöser: Wenn einer von zwei angegebenen Quests (aber NICHT beide) fehlschlägt.",fr="Déclencheur: Si l'une des deux quêtes indiquées (mais PAS les deux) échoue."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsLost:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsLost:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnExactOneQuestIsLost:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if ct and cs then local ni=cs.State==QuestState.Over and cs.Result==QuestResult.Failure;local nj=ct.State==QuestState.Over and ct.Result==QuestResult.Failure;if ni and not nj or not ni and nj then return true end end;return false end;function B_Trigger_OnExactOneQuestIsLost:Debug(bg)if self.Quest1==self.Quest2 then error(bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsLost)Lib.Register("module/quest/Quest_API")function SetupQuest(ho)if GUI then return end;error(not ho.Name or not Quests[GetQuestID(ho.Name)],"SetupQuest: A quest named '%s' already exists!",tostring(ho.Name))return Lib.Quest.Global:CreateSimpleQuest(ho)end;API.CreateQuest=SetupQuest;function SetupNestedQuest(ho)if GUI or type(ho)~="table"then return end;error(ho.Segments~=nil and#ho.Segments~=0,"SetupNestedQuest: Segmented quest '%s' is missing it's segments!",tostring(ho.Name))return Lib.Quest.Global:CreateNestedQuest(ho)end;API.CreateNestedQuest=SetupNestedQuest;function AddDisableTriggerCondition(da)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTriggerConditions,da)end;API.AddDisableTriggerCondition=AddDisableTriggerCondition;function AddDisableTimerCondition(da)if GUI then return end;table.insert(Lib.Quest.Global.ExternalTimerConditions,da)end;API.AddDisableTimerCondition=AddDisableTimerCondition;function AddDisableDecisionCondition(da)if GUI then return end;table.insert(Lib.Quest.Global.ExternalDecisionConditions,da)end;API.AddDisableDecisionCondition=AddDisableDecisionCondition;function Debug_FailQuest(C)SendReportToGlobal(Report.Internal_DebugFailQuest,C)end;function Debug_WinQuest(C)SendReportToGlobal(Report.Internal_DebugWinQuest,C)end;function Debug_StartQuest(C)SendReportToGlobal(Report.Internal_DebugStartQuest,C)end;function Debug_RestartQuest(C)SendReportToGlobal(Report.Internal_DebugRestartQuest,C)end;function Debug_StopQuest(C)SendReportToGlobal(Report.Internal_DebugStopQuest,C)end;function Debug_FindQuests(C)SendReportToGlobal(Report.Internal_DebugListNamedQuests,C)end;function Debug_FailedQuests()SendReportToGlobal(Report.Internal_DebugListFailedQuests)end;function Debug_StoppedQuests()SendReportToGlobal(Report.Internal_DebugListStoppedQuests)end;function Debug_ActiveQuests()SendReportToGlobal(Report.Internal_DebugListActiveQuests)end;function Debug_WonQuests()SendReportToGlobal(Report.Internal_DebugListWonQuests)end;function Debug_WaitingQuests()SendReportToGlobal(Report.Internal_DebugListWaitingQuests)end;Lib.Quest=Lib.Quest or{}Lib.Quest.Name="Quest"Lib.Quest.Global={ExternalTriggerConditions={},ExternalTimerConditions={},ExternalDecisionConditions={},SegmentsOfQuest={}}Lib.Quest.Local={}SegmentResult={Success=1,Failure=2,Ignore=3}Lib.Require("comfort/GetQuestID")Lib.Require("comfort/IsValidQuest")Lib.Require("comfort/IsValidQuestName")Lib.Require("core/core")Lib.Require("module/quest/Quest_API")Lib.Require("module/quest/Quest_Behavior")Lib.Register("module/quest/Quest")function Lib.Quest.Global:Initialize()if not self.IsInstalled then Report.Internal_DebugFailQuest=CreateReport("Event_Internal_DebugFailQuest")Report.Internal_DebugWinQuest=CreateReport("Event_Internal_DebugWinQuest")Report.Internal_DebugStartQuest=CreateReport("Event_Internal_DebugStartQuest")Report.Internal_DebugRestart=CreateReport("Event_Internal_DebugRestart")Report.Internal_DebugStopQuests=CreateReport("Event_Internal_DebugStopQuests")Report.Internal_DebugListFailedQuests=CreateReport("Event_Internal_DebugListFailedQuests")Report.Internal_DebugListWonQuests=CreateReport("Event_Internal_DebugListWonQuests")Report.Internal_DebugListActiveQuests=CreateReport("Event_Internal_DebugListActiveQuests")Report.Internal_DebugListStoppedQuests=CreateReport("Event_Internal_DebugListStoppedQuests")Report.Internal_DebugListWaitingQuests=CreateReport("Event_Internal_DebugListWaitingQuests")Report.Internal_DebugListNamedQuests=CreateReport("Event_Internal_DebugListNamedQuests")Quest_Loop=self.QuestLoop;self:OverrideKernelQuestApi()Lib.Quest.Local=nil end;self.IsInstalled=true end;function Lib.Quest.Global:OnSaveGameLoaded()end;function Lib.Quest.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.Internal_DebugFailQuest then local nk=self:FindQuestsByExactName(arg[1],1)error(#nk==1,"Unable to find quest containing '"..arg[1].."'")FailQuest(nk[1].Identifier)log("forced quest to fail: '"..nk[1].Identifier.."'")elseif aM==Report.Internal_DebugWinQuest then local nk=self:FindQuestsByExactName(arg[1],1)error(#nk==1,"Unable to find quest containing '"..arg[1].."'")RestartQuest(nk[1].Identifier)log("forced quest to restart: '"..nk[1].Identifier.."'")elseif aM==Report.Internal_DebugStartQuest then local nk=self:FindQuestsByExactName(arg[1],1)error(#nk==1,"Unable to find quest containing '"..arg[1].."'")StartQuest(nk[1].Identifier)log("forced quest to start: '"..nk[1].Identifier.."'")elseif aM==Report.Internal_DebugRestart then local nk=self:FindQuestsByExactName(arg[1],1)error(#nk==1,"Unable to find quest containing '"..arg[1].."'")StopQuest(nk[1].Identifier)log("forced quest to stop: '"..nk[1].Identifier.."'")elseif aM==Report.Internal_DebugStopQuests then local nk=self:FindQuestsByExactName(arg[1],1)error(#nk==1,"Unable to find quest containing '"..arg[1].."'")WinQuest(nk[1].Identifier)log("forced quest to succeed: '"..nk[1].Identifier.."'")elseif aM==Report.Internal_DebugListFailedQuests then AddStaticNote(self:ListQuestsByResult(QuestResult.Failure,15))log(self:ListQuestsByResult(QuestResult.Failure))elseif aM==Report.Internal_DebugListWonQuests then AddStaticNote(self:ListQuestsByResult(QuestResult.Success,15))log(self:ListQuestsByResult(QuestResult.Success))elseif aM==Report.Internal_DebugListActiveQuests then AddStaticNote(self:ListQuestsByState(QuestState.Active,15))log(self:ListQuestsByState(QuestState.Active))elseif aM==Report.Internal_DebugListStoppedQuests then AddStaticNote(self:ListQuestsByResult(QuestResult.Interrupted,15))log(self:ListQuestsByResult(QuestResult.Interrupted))elseif aM==Report.Internal_DebugListWaitingQuests then AddStaticNote(self:ListQuestsByState(QuestState.NotTriggered,15))log(self:ListQuestsByState(QuestState.NotTriggered))elseif aM==Report.Internal_DebugListNamedQuests then AddStaticNote(self:ListQuestsByName(arg[1],15))log(self:ListQuestsByName(arg[1]))end end;function Lib.Quest.Global:CreateNestedQuest(ho)if not ho.Segments then return end;table.insert(ho,Goal_MapScriptFunction(self:GetCheckQuestSegmentsInlineGoal(),ho.Name))local Name=self:CreateSimpleQuest(ho)if Name~=nil then Quests[GetQuestID(Name)].Visible=false;self.SegmentsOfQuest[Name]={}for f=1,#ho.Segments,1 do self:CreateSegmentForSegmentedQuest(ho.Segments[f],Name,f)end end;return Name end;function Lib.Quest.Global:CreateSegmentForSegmentedQuest(ho,nl,bh)local Name=ho.Name or nl.."@Segment"..bh;local nm=Quests[GetQuestID(nl)]local nn={Name=Name,Segments=ho.Segments,Result=ho.Result or SegmentResult.Success,Sender=ho.Sender or nm.SendingPlayer,Receiver=ho.Receiver or nm.ReceivingPlayer,Time=ho.Time,Suggestion=ho.Suggestion,Success=ho.Success,Failure=ho.Failure,Description=ho.Description,Loop=ho.Loop,Callback=ho.Callback}for f=1,#ho do table.insert(nn,ho[f])end;table.insert(nn,Trigger_OnQuestActive(nl,0))if nn.Segments then self:CreateNestedQuest(nn)else self:CreateSimpleQuest(nn)end;table.insert(self.SegmentsOfQuest[nl],nn)end;function Lib.Quest.Global:GetCheckQuestSegmentsInlineGoal()return function(dH)local no=true;local np=Lib.Quest.Global.SegmentsOfQuest[dH]for f=1,#np,1 do local nq=Quests[GetQuestID(np[f].Name)]if not nq then return false end;if nq.State==QuestState.Over and nq.Result~=QuestResult.Interrupted then if nq.Outcome==SegmentResult.Success and nq.Result~=QuestResult.Success then Lib.Quest.Global:AbortAllQuestSegments(dH)return false end;if nq.Outcome==SegmentResult.Failure and nq.Result~=QuestResult.Failure then Lib.Quest.Global:AbortAllQuestSegments(dH)return false end end;if nq.Outcome~=SegmentResult.Ignore and nq.State~=QuestState.Over then no=false end end;if no then return true end end end;function Lib.Quest.Global:AbortAllQuestSegments(dH)for f=1,#self.SegmentsOfQuest[dH],1 do local nr=self.SegmentsOfQuest[dH][f].Name;local nq=Quests[GetQuestID(nr)]if nq and nq.State~=QuestState.Over then StopQuest(nr,true)end end end;function Lib.Quest.Global:CreateSimpleQuest(ho)if not ho.Name then AutomaticQuestNameCounter=(AutomaticQuestNameCounter or 0)+1;ho.Name=string.format("AutoNamed_Quest_%d",AutomaticQuestNameCounter)end;error(IsValidQuestName(ho.Name),"Quest '%s': invalid questname! Contains forbidden characters!",tostring(ho.Name))local ns={ho.Name,ho.Sender~=nil and ho.Sender or 1,ho.Receiver~=nil and ho.Receiver or 1,{},{},ho.Time~=nil and ho.Time or 0,{},{},ho.Callback,ho.Loop,ho.Visible==true or ho.Suggestion~=nil,ho.EndMessage==true or(ho.Failure~=nil or ho.Success~=nil),ConvertPlaceholders(type(ho.Description)=="table"and Localize(ho.Description)or ho.Description),ConvertPlaceholders(type(ho.Suggestion)=="table"and Localize(ho.Suggestion)or ho.Suggestion),ConvertPlaceholders(type(ho.Success)=="table"and Localize(ho.Success)or ho.Success),ConvertPlaceholders(type(ho.Failure)=="table"and Localize(ho.Failure)or ho.Failure)}if not self:QuestValidateQuestData(ns)then DumpTable(ns,"Quest")error(false,"ModuleQuest: Failed to vaidate quest data. Table has been copied to log.")end;for g,h in pairs(ho)do if tonumber(g)~=nil then if type(h)=="table"then if h.GetGoalTable then table.insert(ns[4],h:GetGoalTable())local nt=#ns[4]ns[4][nt].Context=h;ns[4][nt].FuncOverrideIcon=ns[4][nt].Context.GetIcon;ns[4][nt].FuncOverrideMsgKey=ns[4][nt].Context.GetMsgKey elseif h.GetReprisalTable then table.insert(ns[8],h:GetReprisalTable())elseif h.GetRewardTable then table.insert(ns[7],h:GetRewardTable())else table.insert(ns[5],h:GetTriggerTable())end end end end;if#ns[4]==0 then table.insert(ns[4],{Objective.Dummy})end;if#ns[5]==0 then table.insert(ns[5],{Triggers.Time,0})end;if ns[11]then table.insert(ns[5],self:GetFreeSpaceInlineTrigger())end;local bV,ay=QuestTemplate:New(unpack(ns,1,16))ay.MsgTableOverride=ho.MSGKeyOverwrite;ay.IconOverride=ho.IconOverwrite;ay.QuestInfo=ho.InfoText;ay.Arguments=ho.Arguments~=nil and table.copy(ho.Arguments)or{}return ho.Name,Quests[0]end;function Lib.Quest.Global:QuestValidateQuestData(ho)return type(ho[1])=="string"and IsValidQuestName(ho[1])and Quests[GetQuestID(ho[1])]==nil and(type(ho[2])=="number"and ho[2]>=1 and ho[2]<=8)and(type(ho[3])=="number"and ho[3]>=1 and ho[3]<=8)and(type(ho[6])=="number"and ho[6]>=0)and(ho[9]~=nil and type(ho[9])=="function"or ho[9]==nil)and(ho[10]~=nil and type(ho[10])=="function"or ho[10]==nil)and type(ho[11])=="boolean"and type(ho[12])=="boolean"and(ho[13]~=nil and type(ho[13])=="string"or ho[13]==nil)and(ho[14]~=nil and type(ho[14])=="string"or ho[14]==nil)and(ho[15]~=nil and type(ho[15])=="string"or ho[15]==nil)and(ho[16]~=nil and type(ho[16])=="string"or ho[16]==nil)end;function Lib.Quest.Global:GetFreeSpaceInlineTrigger()return{Triggers.Custom2,{{},function(ho,bg)local nu=0;if Quests[0]>0 then for f=1,Quests[0],1 do if Quests[f].State==QuestState.Active and Quests[f].Visible==true then nu=nu+1 end end end;return nu<6 end}}end;function Lib.Quest.Global:OverrideKernelQuestApi()RestartQuest_Orig_ModuleQuest=RestartQuest;RestartQuest=function(dH,dI)if Lib.Quest.Global.SegmentsOfQuest[dH]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dH])do if IsValidQuest(h.Name)then StopQuest_Orig_ModuleQuest(h.Name,true)RestartQuest_Orig_ModuleQuest(h.Name,true)end end end;RestartQuest_Orig_ModuleQuest(dH,dI)end;StopQuest_Orig_ModuleQuest=StopQuest;StopQuest=function(dH,dI)if Lib.Quest.Global.SegmentsOfQuest[dH]then for g,h in pairs(Lib.Quest.Global.SegmentsOfQuest[dH])do local ay=Quests[GetQuestID(h.Name)]if ay and ay.State~=QuestState.Over then StopQuest_Orig_ModuleQuest(h.Name,true)end end end;StopQuest_Orig_ModuleQuest(dH,dI)end end;function Lib.Quest.Global.QuestLoop(nv)local self=JobQueue_GetParameter(nv)if self.LoopCallback~=nil then self:LoopCallback()end;if self.State==QuestState.NotTriggered then local nw=true;for f=1,#Lib.Quest.Global.ExternalTriggerConditions,1 do if not Lib.Quest.Global.ExternalTriggerConditions[f](self.ReceivingPlayer,self)then nw=false;break end end;if nw then for f=1,self.Triggers[0]do local bq=Lib.Quest.Global:SerializeBehavior(self.Triggers[f],Triggers.Custom2,4)if bq and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..bq,true)end;nw=nw and self:IsTriggerActive(self.Triggers[f])end end;if nw then self:SetMsgKeyOverride()self:SetIconOverride()self:Trigger()end elseif self.State==QuestState.Active then for f=1,#Lib.Quest.Global.ExternalTimerConditions,1 do if not Lib.Quest.Global.ExternalTimerConditions[f](self.ReceivingPlayer,self)then self.StartTime=self.StartTime+1;break end end;local nx=true;for f=1,#Lib.Quest.Global.ExternalDecisionConditions,1 do if not Lib.Quest.Global.ExternalDecisionConditions[f](self.ReceivingPlayer,self)then nx=false;break end end;if nx then local ny=true;local nz=false;for f=1,self.Objectives[0]do local bq=Lib.Quest.Global:SerializeBehavior(self.Objectives[f],Objective.Custom2,1)if bq and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..bq,true)end;local nA=self:IsObjectiveCompleted(self.Objectives[f])if self.Objectives[f].Type==Objective.Deliver and nA==nil then if self.Objectives[f].Data[4]==nil then self.Objectives[f].Data[4]=0 end;if self.Objectives[f].Data[3]~=nil then self.Objectives[f].Data[4]=self.Objectives[f].Data[4]+1 end;local nB=self.StartTime;local nC=self.Duration;local nD=self.Objectives[f].Data[4]local nE=self.StartTime+self.Duration-self.Objectives[f].Data[4]if self.Duration>0 and self.StartTime+self.Duration+self.Objectives[f].Data[4]<Logic.GetTime()then nA=false end else if self.Duration>0 and self.StartTime+self.Duration<Logic.GetTime()then if nA==nil and(self.Objectives[f].Type==Objective.Protect or self.Objectives[f].Type==Objective.Dummy or self.Objectives[f].Type==Objective.NoChange)then nA=true elseif nA==nil or self.Objectives[f].Type==Objective.DummyFail then nA=false end end end;ny=nA==true and ny;nz=nA==false or nz end;if ny then self:Success()elseif nz then self:Fail()end end else if self.IsEventQuest==true then Logic.ExecuteInLuaLocalState("StopEventMusic(nil, "..self.ReceivingPlayer..")")end;if self.Result==QuestResult.Success then for f=1,self.Rewards[0]do local bq=Lib.Quest.Global:SerializeBehavior(self.Rewards[f],Reward.Custom,3)if bq and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..bq,true)end;self:AddReward(self.Rewards[f])end elseif self.Result==QuestResult.Failure then for f=1,self.Reprisals[0]do local bq=Lib.Quest.Global:SerializeBehavior(self.Reprisals[f],Reprisal.Custom,3)if bq and Lib.Core.Debug.TraceQuests then log("Quest '"..self.Identifier.."' "..bq,true)end;self:AddReprisal(self.Reprisals[f])end end;if self.EndCallback~=nil then self:EndCallback()end;return true end end;function Lib.Quest.Global:SerializeBehavior(ho,nF,nG)local nH="Objective"local nI=Objective;if nG==2 then nH="Reprisal"nI=Reprisal elseif nG==3 then nH="Reward"nI=Reward elseif nG==4 then nH="Trigger"nI=Triggers end;local nJ="Running {"local nK=GetNameOfKeyInTable(nI,ho.Type)if ho.Type==nF then local g3=ho.Data[1].FuncName;nJ=nJ..nH.."."..nK..""if g3==nil then return else nJ=nJ..", "..tostring(g3)end;if ho.Data and ho.Data[1].i47ya_6aghw_frxil and#ho.Data[1].i47ya_6aghw_frxil>0 then for b8=1,#ho.Data[1].i47ya_6aghw_frxil,1 do nJ=nJ..", ("..type(ho.Data[1].i47ya_6aghw_frxil[b8])..") "..tostring(ho.Data[1].i47ya_6aghw_frxil[b8])end end else nJ=nJ..nH.."."..nK..""if ho.Data then if type(ho.Data)=="table"then for b8=1,#ho.Data do nJ=nJ..", ("..type(ho.Data[b8])..") "..tostring(ho.Data[b8])end else nJ=nJ..", ("..type(ho.Data)..") "..tostring(ho.Data)end end end;nJ=nJ.."}"return nJ end;function Lib.Quest.Global:FindQuestsByAttribute(nL,...)nL=math.max(nL or 65565,1)local arg={...}local nM={}for f=1,Quests[0],1 do local nN=true;for b8=1,#arg,2 do if arg[b8]=="Name"then if not string.find(Quests[f].Identifier,"^"..arg[b8+1])then nN=false;break end else if Quests[f][arg[b8]]~=arg[b8+1]then nN=false;break end end end;if nN then table.insert(nM,Quests[f])end end;return nM end;function Lib.Quest.Global:FindQuestsByExactName(dH,nL)return self:FindQuestsByAttribute(nL,"Identifier",dH)end;function Lib.Quest.Global:ListQuestsByAttribute(nL,...)nL=math.max(nL or 65565,1)local nM=self:FindQuestsByAttribute(nL,...)local nO=""local nP=0;for f=1,#nM,1 do if nP>=nL then nO=nO.."... ("..#nM-nP.." more)"break end;nO=nO.."> "..nM[f].Identifier.."{cr}"nP=nP+1 end;return"Found quests:{cr}"..nO end;function Lib.Quest.Global:ListQuestsByState(nQ,nL)return self:ListQuestsByAttribute(nL,"State",nQ)end;function Lib.Quest.Global:ListQuestsByResult(nR,nL)return self:ListQuestsByAttribute(nL,"Result",nR)end;function Lib.Quest.Global:ListQuestsByName(dH,nL)return self:ListQuestsByAttribute(nL,"Name",dH)end;function Lib.Quest.Global:ProcessChatInput(dG,n,nS)if nS and IsHistoryEdition()then local g5=Lib.Core.Debug:CommandTokenizer(dG)for f=1,#g5,1 do if g5[f][1]=="fail"or g5[f][1]=="start"or g5[f][1]=="restart"or g5[f][1]=="stop"or g5[f][1]=="win"then local nk=self:FindQuestsByExactName(g5[f][2],1)error(#nk==1,"Unable to find quest containing '"..g5[f][2].."'")if g5[f][1]=="fail"then FailQuest(nk[1].Identifier)log("forced quest to fail: '"..nk[1].Identifier.."'")elseif g5[f][1]=="restart"then RestartQuest(nk[1].Identifier)log("forced quest to restart: '"..nk[1].Identifier.."'")elseif g5[f][1]=="start"then StartQuest(nk[1].Identifier)log("forced quest to start: '"..nk[1].Identifier.."'")elseif g5[f][1]=="stop"then StopQuest(nk[1].Identifier)log("forced quest to stop: '"..nk[1].Identifier.."'")elseif g5[f][1]=="win"then WinQuest(nk[1].Identifier)log("forced quest to succeed: '"..nk[1].Identifier.."'")end end;if g5[f][1]=="stopped"then AddNote(self:ListQuestsByResult(QuestResult.Interrupted,15))log(self:ListQuestsByResult(QuestResult.Interrupted))elseif g5[f][1]=="active"then AddNote(self:ListQuestsByState(QuestState.Active,15))log(self:ListQuestsByState(QuestState.Active))elseif g5[f][1]=="won"then AddNote(self:ListQuestsByResult(QuestResult.Success,15))log(self:ListQuestsByResult(QuestResult.Success))elseif g5[f][1]=="failed"then AddNote(self:ListQuestsByResult(QuestResult.Failure,15))log(self:ListQuestsByResult(QuestResult.Failure))elseif g5[f][1]=="waiting"then AddNote(self:ListQuestsByState(QuestState.NotTriggered,15))log(self:ListQuestsByState(QuestState.NotTriggered))elseif g5[f][1]=="find"then AddNote(self:ListQuestsByName(g5[f][2],15))log(self:ListQuestsByName(g5[f][2]))end end end end;function Lib.Quest.Local:Initialize()if not self.IsInstalled then Report.Internal_DebugFailQuest=CreateReport("Event_Internal_DebugFailQuest")Report.Internal_DebugWinQuest=CreateReport("Event_Internal_DebugWinQuest")Report.Internal_DebugStartQuest=CreateReport("Event_Internal_DebugStartQuest")Report.Internal_DebugRestart=CreateReport("Event_Internal_DebugRestart")Report.Internal_DebugStopQuests=CreateReport("Event_Internal_DebugStopQuests")Report.Internal_DebugListFailedQuests=CreateReport("Event_Internal_DebugListFailedQuests")Report.Internal_DebugListWonQuests=CreateReport("Event_Internal_DebugListWonQuests")Report.Internal_DebugListActiveQuests=CreateReport("Event_Internal_DebugListActiveQuests")Report.Internal_DebugListStoppedQuests=CreateReport("Event_Internal_DebugListStoppedQuests")Report.Internal_DebugListWaitingQuests=CreateReport("Event_Internal_DebugListWaitingQuests")Report.Internal_DebugListNamedQuests=CreateReport("Event_Internal_DebugListNamedQuests")self:OverwriteQuestTexts()Lib.Quest.Global=nil end;self.IsInstalled=true end;function Lib.Quest.Local:OnSaveGameLoaded()end;function Lib.Quest.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2],arg[3])end end;function Lib.Quest.Local:ProcessChatInput(dG,n,nS)if not nS or GUI.GetPlayerID()~=n then return end;ExecuteGlobal([[Lib.Quest.Global:ProcessChatInput("%s", %d, %s)]],dG,n,tostring(nS==true))end;function Lib.Quest.Local:OverwriteQuestTexts()self.Orig_QuestLog_GetQuestTypeCaption=QuestLog.GetQuestTypeCaption;QuestLog.GetQuestTypeCaption=function(jj,bg)if jj==Objective.Custom or jj==Objective.Custom2 or jj==Objective.NoChange or jj==Objective.Dummy or jj==Objective.DummyFail then local bq=bg.QuestDescription or""if string.find(bq,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then return XGUIEng.GetStringTableText(bq)end end;return Lib.Quest.Local.Orig_QuestLog_GetQuestTypeCaption(jj,bg)end;Wrapped_GetStringTableText=function(dk,dl)local nT=XGUIEng.GetStringTableText(dl)if nT~=""then return nT end;if dk==0 then return""end;local ay=Quests[dk]if not ay then return""end;if string.find(dl,"speech")then local nU=string.find(dl,"/")if not nU then return""end;local nV=string.sub(dl,nU+1)if ay.Identifier==nV and ay.QuestStartMsg and not string.find(ay.QuestStartMsg,g_OverrideTextKeyPattern)then return ay.QuestStartMsg end;if ay.Identifier.."_Success"==nV and ay.QuestSuccessMsg and not string.find(ay.QuestSuccessMsg,g_OverrideTextKeyPattern)then return ay.QuestSuccessMsg end;if ay.Identifier.."_Failure"==nV and ay.QuestFailureMsg and not string.find(ay.QuestFailureMsg,g_OverrideTextKeyPattern)then return ay.QuestFailureMsg end else if ay.QuestDescription then local bq=ay.QuestDescription or""if string.find(bq,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq=XGUIEng.GetStringTableText(bq)end;return string.match(bq,"^[^~]+ ~ (.+)$")or bq end end;return""end;GetTextOverride=function(bg)local d;if not bg then return end;assert(type(bg)=="table")if bg.State==QuestState.Over then if bg.Result==QuestResult.Success then local bq=bg.QuestSuccessMsg or""if string.find(bq,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq="KEY("..bg.QuestSuccessMsg..")"end;d=string.match(bq,g_OverrideTextKeyPattern)elseif bg.Result==QuestResult.Failure then local bq=bg.QuestFailureMsg or""if string.find(bq,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq="KEY("..bg.QuestFailureMsg..")"end;d=string.match(bq,g_OverrideTextKeyPattern)end else local bq=bg.QuestStartMsg or""if string.find(bq,"^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq="KEY("..bg.QuestStartMsg..")"end;d=string.match(bq,g_OverrideTextKeyPattern)end;if d then local nW,nX=string.match(d,"^([^/]+)/([^/]+)$")if nW and nX then return nX,nW end end;return d end end;RegisterModule(Lib.Quest.Name)Lib.Register("module/quest/QuestBehavior_Behavior")function Goal_MoveToPosition(...)return B_Goal_MoveToPosition:new(...)end;B_Goal_MoveToPosition={Name="Goal_MoveToPosition",Description={en="Goal: A entity have to moved as close as the distance to another entity. The target can be marked with a static marker.",de="Ziel: Ein Entity muss sich einer anderen bis auf eine bestimmte Distanz nähern. Die Lupe wird angezeigt, das Ziel kann markiert werden.",fr="Objectif: une entité doit s'approcher d'une autre à une distance donnée. La loupe est affichée, la cible peut être marquée."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Custom,en="Marker",de="Ziel markieren",fr="Marquer la cible"}}}function B_Goal_MoveToPosition:GetGoalTable()return{Objective.Distance,self.Entity,self.Target,self.Distance,self.Marker}end;function B_Goal_MoveToPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.Distance=bi*1 elseif bh==3 then self.Marker=ToBoolean(bi)end end;function B_Goal_MoveToPosition:GetCustomData(bh)local bk={}if bh==3 then bk={"true","false"}end;return bk end;RegisterBehavior(B_Goal_MoveToPosition)function Goal_AmmunitionAmount(...)return B_Goal_AmmunitionAmount:new(...)end;B_Goal_AmmunitionAmount={Name="Goal_AmmunitionAmount",Description={en="Goal: Reach a smaller or bigger value than the given amount of ammunition in a war machine.",de="Ziel: Über- oder unterschreite die angegebene Anzahl Munition in einem Kriegsgerät.",fr="Objectif : Dépasser ou ne pas dépasser le nombre de munitions indiqué dans un engin de guerre."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_AmmunitionAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_AmmunitionAmount:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi elseif bh==1 then self.bRelSmallerThan=tostring(bi)=="true"or bi=="<"elseif bh==2 then self.Amount=bi*1 end end;function B_Goal_AmmunitionAmount:CustomFunction()local w=GetID(self.Scriptname)if not IsExisting(w)then return false end;local bK=Logic.GetAmmunitionAmount(w)if self.bRelSmallerThan and bK<self.Amount or not self.bRelSmallerThan and bK>=self.Amount then return true end;return nil end;function B_Goal_AmmunitionAmount:Debug(bg)if self.Amount<0 then error(bg.Identifier..": "..self.Name..": Amount is negative")return true end end;function B_Goal_AmmunitionAmount:GetCustomData(bh)if bh==1 then return{"<",">="}end end;RegisterBehavior(B_Goal_AmmunitionAmount)function Goal_CityReputation(...)return B_Goal_CityReputation:new(...)end;B_Goal_CityReputation={Name="Goal_CityReputation",Description={en="Goal: The reputation of the quest receivers city must at least reach the desired hight.",de="Ziel: Der Ruf der Stadt des Empfängers muss mindestens so hoch sein, wie angegeben.",fr="Objectif: la réputation de la ville du receveur doit être au moins aussi élevée que celle indiquée."},Parameter={{ParameterType.Number,en="City reputation",de="Ruf der Stadt",fr="Réputation de la ville"}},Text={de="RUF DER STADT{cr}{cr}Hebe den Ruf der Stadt durch weise Herrschaft an!{cr}Benötigter Ruf: %d",en="CITY REPUTATION{cr}{cr}Raise your reputation by fair rulership!{cr}Needed reputation: %d",fr="RÉPUTATION DE LA VILLE{cr}{cr} Augmente la réputation de la ville en la gouvernant sagement!{cr}Réputation requise : %d"}}function B_Goal_CityReputation:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CityReputation:AddParameter(bh,bi)if bh==0 then self.Reputation=bi*1 end end;function B_Goal_CityReputation:CustomFunction(bg)self:SetCaption(bg)local nY=Logic.GetCityReputation(bg.ReceivingPlayer)*100;if nY>=self.Reputation then return true end end;function B_Goal_CityReputation:SetCaption(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bq=string.format(Localize(self.Text),self.Reputation)Lib.Core.Quest:ChangeCustomQuestCaptionText(bq.."%",bg)end end;function B_Goal_CityReputation:GetIcon()return{5,14}end;function B_Goal_CityReputation:Debug(bg)if type(self.Reputation)~="number"or self.Reputation<0 or self.Reputation>100 then error(bg.Identifier..": "..self.Name..": Reputation must be between 0 and 100!")return true end;return false end;RegisterBehavior(B_Goal_CityReputation)function Goal_DestroySpawnedEntities(...)return B_Goal_DestroySpawnedEntities:new(...)end;B_Goal_DestroySpawnedEntities={Name="Goal_DestroySpawnedEntities",Description={en="Goal: Destroy all entities spawned at the spawnpoint.",de="Ziel: Zerstöre alle Entitäten, die bei dem Spawnpoint erzeugt wurde.",fr="Objectif: Détruire toutes les entités créées au point d'apparition."},Parameter={{ParameterType.ScriptName,en="Spawnpoint",de="Spawnpoint",fr="Point d'émergence"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Custom,en="Name is prefixed",de="Name ist Präfix",fr="Le nom est un préfixe"}}}function B_Goal_DestroySpawnedEntities:GetGoalTable()if self.Prefixed then local dg=table.remove(self.SpawnPoint)local f=1;while IsExisting(dg..f)do table.insert(self.SpawnPoint,dg..f)f=f+1 end;assert(#self.SpawnPoint>0,"No spawnpoints found!")end;return{Objective.DestroyEntities,3,self.SpawnPoint,self.Amount}end;function B_Goal_DestroySpawnedEntities:AddParameter(bh,bi)if bh==0 then self.SpawnPoint={bi}elseif bh==1 then self.Amount=bi*1 elseif bh==2 then bi=bi or"false"self.Prefixed=ToBoolean(bi)end end;function B_Goal_DestroySpawnedEntities:GetMsgKey()local ar=GetID(self.SpawnPoint[1])if ar~=0 then local j=Logic.GetEntityTypeName(Logic.GetEntityType(ar))if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_Destroy_Leader"elseif j:find("Bear")or j:find("Lion")or j:find("Tiger")or j:find("Wolf")then return"Quest_DestroyEntities_Predators"elseif j:find("Military")or j:find("Cart")then return"Quest_DestroyEntities_Unit"end end;return"Quest_DestroyEntities"end;function B_Goal_DestroySpawnedEntities:GetCustomData(bh)if bh==2 then return{"false","true"}end end;RegisterBehavior(B_Goal_DestroySpawnedEntities)function Goal_StealGold(...)return B_Goal_StealGold:new(...)end;B_Goal_StealGold={Name="Goal_StealGold",Description={en="Goal: Steal an explicit amount of gold from a players or any players city buildings.",de="Ziel: Diebe sollen eine bestimmte Menge Gold aus feindlichen Stadtgebäuden stehlen.",fr="Objectif: les voleurs doivent dérober une certaine quantité d'or dans les bâtiments urbains ennemis."},Parameter={{ParameterType.Number,en="Amount on Gold",de="Zu stehlende Menge",fr="Quantité à voler"},{ParameterType.Custom,en="Target player",de="Spieler von dem gestohlen wird",fr="Joueur à qui l'on vole"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Print progress",de="Fortschritt ausgeben",fr="Afficher les progrès"}}}function B_Goal_StealGold:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealGold:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then local q=tonumber(bi)or-1;self.Target=q*1 elseif bh==2 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)elseif bh==3 then bi=bi or"true"self.Printout=ToBoolean(bi)end;self.StohlenGold=0 end;function B_Goal_StealGold:GetCustomData(bh)if bh==1 then return{"-",1,2,3,4,5,6,7,8}elseif bh==2 then return{"true","false"}end end;function B_Goal_StealGold:SetDescriptionOverwrite(bg)local nZ=Localize({de=" anderen Spielern ",en=" different parties ",fr=" d'autres joueurs "})if self.Target~=-1 then nZ=GetPlayerName(self.Target)if nZ==nil or nZ==""then nZ=" PLAYER_NAME_MISSING "end end;if self.CheatEarnings then local n_={self.Target}if self.Target==-1 then n_={1,2,3,4,5,6,7,8}end;for f=1,#n_,1 do if f~=bg.ReceivingPlayer and Logic.GetStoreHouse(f)~=0 then local kc={Logic.GetPlayerEntitiesInCategory(f,EntityCategories.CityBuilding)}for b8=1,#kc,1 do local o0=Logic.GetBuildingProductEarnings(kc[b8])if o0<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(kc[b8],o0+1)end end end end end;local bH=self.Amount-self.StohlenGold;bH=bH>0 and bH or 0;local h5={de="Gold von %s stehlen {cr}{cr}Aus Stadtgebäuden zu stehlende Goldmenge: %d",en="Steal gold from %s {cr}{cr}Amount on gold to steal from city buildings: %d",fr="Voler l'or de %s {cr}{cr}Quantité d'or à voler dans les bâtiments de la ville : %d"}return"{center}"..string.format(Localize(h5),nZ,bH)end;function B_Goal_StealGold:CustomFunction(bg)if Lib.Core.Quest then Lib.Core.Quest:ChangeCustomQuestCaptionText(self:SetDescriptionOverwrite(bg),bg)end;if self.StohlenGold>=self.Amount then return true end;return nil end;function B_Goal_StealGold:GetIcon()return{5,13}end;function B_Goal_StealGold:Debug(bg)if tonumber(self.Amount)==nil and self.Amount<0 then error(bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;function B_Goal_StealGold:Reset(bg)self.StohlenGold=0 end;RegisterBehavior(B_Goal_StealGold)function Goal_StealFromBuilding(...)return B_Goal_StealFromBuilding:new(...)end;B_Goal_StealFromBuilding={Name="Goal_StealFromBuilding",Description={en="Goal: The player has to steal from a building. Not a castle and not a village storehouse!",de="Ziel: Der Spieler muss ein bestimmtes Gebäude bestehlen. Dies darf keine Burg und kein Dorflagerhaus sein!",fr="Objectif: Le joueur doit voler un bâtiment spécifique. Il ne peut s'agir ni d'un château ni d'un entrepôt de village !"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"}}}function B_Goal_StealFromBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealFromBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)end;self.RobberList={}end;function B_Goal_StealFromBuilding:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Goal_StealFromBuilding:SetDescriptionOverwrite(bg)local o1=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Cathedrals)==1;local o2=Logic.GetEntityType(GetID(self.Building))==Entities.B_StoreHouse;local o3=Logic.GetEntityType(GetID(self.Building))==Entities.B_Cistern;local h5;if o1 then h5={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert die markierte Kirche.",en="Sabotage {cr}{cr} Send a thief to sabotage the marked chapel.",fr="Sabotage {cr}{cr} Envoyez un voleur pour saboter la chapelle marquée."}elseif o2 then h5={de="Lagerhaus bestehlen {cr}{cr} Sendet einen Dieb in das markierte Lagerhaus.",en="Steal from storehouse {cr}{cr} Steal from the marked storehouse.",fr="Voler un entrepôt {cr}{cr} Envoie un voleur dans l'entrepôt marqué."}elseif o3 then h5={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert den markierten Brunnen.",en="Sabotage {cr}{cr} Send a thief and break the marked well of the enemy.",fr="Sabotage {cr}{cr} Envoie un voleur et sabote le puits marqué."}else h5={de="Gebäude bestehlen {cr}{cr} Sendet einen Dieb und bestehlt das markierte Gebäude.",en="Steal from building {cr}{cr} Send a thief to steal from the marked building.",fr="Voler un bâtiment {cr}{cr} Envoie un voleur et vole le bâtiment marqué."}end;return"{center}"..Localize(h5)end;function B_Goal_StealFromBuilding:CustomFunction(bg)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aP=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aP.X,aP.Y,0)end;if self.CheatEarnings then local kg=GetID(self.Building)local o0=Logic.GetBuildingProductEarnings(kg)if Logic.IsEntityInCategory(kg,EntityCategories.CityBuilding)==1 and o0<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(kg,o0+1)end end;if self.SuccessfullyStohlen then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_StealFromBuilding:GetIcon()return{5,13}end;function B_Goal_StealFromBuilding:Debug(bg)local o4=Logic.GetEntityTypeName(Logic.GetEntityType(GetID(self.Building)))local o5=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Headquarters)==1;if Logic.IsBuilding(GetID(self.Building))==0 then error(bg.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bg.Identifier..": "..self.Name..": target is destroyed :(")return true elseif string.find(o4,"B_NPC_BanditsHQ")or string.find(o4,"B_NPC_Cloister")or string.find(o4,"B_NPC_StoreHouse")then error(bg.Identifier..": "..self.Name..": village storehouses are not allowed!")return true elseif o5 then error(bg.Identifier..": "..self.Name..": use Goal_StealInformation for headquarters!")return true end;return false end;function B_Goal_StealFromBuilding:Reset(bg)self.SuccessfullyStohlen=false;self.RobberList={}self.Marker=nil end;function B_Goal_StealFromBuilding:Interrupt(bg)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_StealFromBuilding)function Goal_SpyOnBuilding(...)return B_Goal_SpyOnBuilding:new(...)end;B_Goal_SpyOnBuilding={Name="Goal_SpyOnBuilding",IconOverwrite={5,13},Description={en="Goal: Infiltrate a building with a thief. A thief must be able to steal from the target building.",de="Ziel: Infiltriere ein Gebäude mit einem Dieb. Nur mit Gebaueden möglich, die bestohlen werden koennen.",fr="Objectif: Infiltrer un bâtiment avec un voleur. Seulement possible avec des bâtiments qui peuvent être volés."},Parameter={{ParameterType.ScriptName,en="Target Building",de="Zielgebäude",fr="Bâtiment cible"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Destroy Thief",de="Dieb löschen",fr="Supprimer le voleur"}}}function B_Goal_SpyOnBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SpyOnBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)elseif bh==2 then bi=bi or"true"self.Delete=ToBoolean(bi)end end;function B_Goal_SpyOnBuilding:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Goal_SpyOnBuilding:SetDescriptionOverwrite(bg)if not bg.QuestDescription then local h5={de="Gebäude infriltrieren {cr}{cr}Spioniere das markierte Gebäude mit einem Dieb aus!",en="Infiltrate building {cr}{cr}Spy on the highlighted buildings with a thief!",fr="Infiltrer un bâtiment {cr}{cr}Espionner le bâtiment marqué avec un voleur!"}return Localize(h5)else return bg.QuestDescription end end;function B_Goal_SpyOnBuilding:CustomFunction(bg)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aP=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aP.X,aP.Y,0)end;if self.CheatEarnings then local kg=GetID(self.Building)if Logic.IsEntityInCategory(kg,EntityCategories.CityBuilding)==1 and Logic.GetBuildingEarnings(kg)<5 then Logic.SetBuildingEarnings(kg,5)end end;if self.Infiltrated then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_SpyOnBuilding:GetIcon()return self.IconOverwrite end;function B_Goal_SpyOnBuilding:Debug(bg)if Logic.IsBuilding(GetID(self.Building))==0 then error(bg.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bg.Identifier..": "..self.Name..": target is destroyed :(")return true end;return false end;function B_Goal_SpyOnBuilding:Reset(bg)self.Infiltrated=false;self.Marker=nil end;function B_Goal_SpyOnBuilding:Interrupt(bg)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_SpyOnBuilding)function Goal_DestroySoldiers(...)return B_Goal_DestroySoldiers:new(...)end;B_Goal_DestroySoldiers={Name="Goal_DestroySoldiers",Description={en="Goal: Destroy a given amount of enemy soldiers",de="Ziel: Zerstöre eine Anzahl gegnerischer Soldaten",fr="Objectif: Détruire un certain nombre de soldats ennemis"},Parameter={{ParameterType.PlayerID,en="Attacking Player",de="Angreifer",fr="Attaquant"},{ParameterType.PlayerID,en="Defending Player",de="Verteidiger",fr="Défenseur"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}},Text={de="{center}SOLDATEN ZERSTÖREN {cr}{cr}von der Partei: %s{cr}{cr}Anzahl: %d",en="{center}DESTROY SOLDIERS {cr}{cr}from faction: %s{cr}{cr}Amount: %d",fr="{center}DESTRUIRE DES SOLDATS {cr}{cr}de la faction: %s{cr}{cr}Nombre : %d"}}function B_Goal_DestroySoldiers:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_DestroySoldiers:AddParameter(bh,bi)if bh==0 then self.AttackingPlayer=bi*1 elseif bh==1 then self.AttackedPlayer=bi*1 elseif bh==2 then self.KillsNeeded=bi*1 end end;function B_Goal_DestroySoldiers:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bp=GetPlayerName(self.AttackedPlayer)or"Player "..self.AttackedPlayer;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Lib.Core.Text:Localize(self.Text),bp,self.KillsNeeded),bg)end;local o6=GetEnemySoldierKillsOfPlayer(self.AttackingPlayer,self.AttackedPlayer)if not self.KillstStart then self.KillstStart=o6 end;if self.KillsNeeded<=o6-self.KillstStart then return true end end;function B_Goal_DestroySoldiers:Debug(bg)if Logic.GetStoreHouse(self.AttackingPlayer)==0 then error(bg.Identifier..": "..self.Name..": Player "..self.AttackinPlayer.." is dead :-(")return true elseif Logic.GetStoreHouse(self.AttackedPlayer)==0 then error(bg.Identifier..": "..self.Name..": Player "..self.AttackedPlayer.." is dead :-(")return true elseif self.KillsNeeded<0 then error(bg.Identifier..": "..self.Name..": Amount negative")return true end end;function B_Goal_DestroySoldiers:Reset()self.KillstStart=nil end;function B_Goal_DestroySoldiers:GetIcon()return{7,12}end;RegisterBehavior(B_Goal_DestroySoldiers)function Reprisal_SetPosition(...)return B_Reprisal_SetPosition:new(...)end;B_Reprisal_SetPosition={Name="Reprisal_SetPosition",Description={en="Reprisal: Places an entity relative to the position of another. The entity can look the target.",de="Vergeltung: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden.",fr="Rétribution: place une Entity vis-à-vis de l'emplacement d'une autre. L'entité peut être orientée vers la cible."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target position",de="Zielposition",fr="Position cible"},{ParameterType.Custom,en="Face to face",de="Ziel ansehen",fr="Voir la cible"},{ParameterType.Number,en="Distance",de="Zielentfernung",fr="Distance de la cible"}}}function B_Reprisal_SetPosition:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.FaceToFace=ToBoolean(bi)elseif bh==3 then self.Distance=bi~=nil and tonumber(bi)or 100 end end;function B_Reprisal_SetPosition:CustomFunction(bg)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;local c6=GetID(self.Entity)local o7=GetID(self.Target)local E,F,G=Logic.EntityGetPos(o7)if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)end;local o8=Logic.GetEntityOrientation(o7)+90;if self.FaceToFace then E=E+self.Distance*math.cos(math.rad(o8))F=F+self.Distance*math.sin(math.rad(o8))Logic.DEBUG_SetSettlerPosition(c6,E,F)LookAt(self.Entity,self.Target)else if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)end;Logic.DEBUG_SetSettlerPosition(c6,E,F)end end;function B_Reprisal_SetPosition:GetCustomData(bh)if bh==2 then return{"true","false"}end end;function B_Reprisal_SetPosition:Debug(bg)if self.FaceToFace then if tonumber(self.Distance)==nil or self.Distance<50 then error(bg.Identifier..": "..self.Name..": Distance is nil or to short!")return true end end;if not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bg.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetPosition)function Reprisal_ChangePlayer(...)return B_Reprisal_ChangePlayer:new(...)end;B_Reprisal_ChangePlayer={Name="Reprisal_ChangePlayer",Description={en="Reprisal: Changes the owner of the entity or a battalion.",de="Vergeltung: Aendert den Besitzer einer Entity oder eines Battalions.",fr="Rétribution : Change le propriétaire d'une entité ou d'un bataillon."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Reprisal_ChangePlayer:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ChangePlayer:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Player=tostring(bi)end end;function B_Reprisal_ChangePlayer:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)if Logic.IsLeader(bQ)==1 then Logic.ChangeSettlerPlayerID(bQ,self.Player)else Logic.ChangeEntityPlayerID(bQ,self.Player)end end;function B_Reprisal_ChangePlayer:GetCustomData(bh)if bh==1 then return{"0","1","2","3","4","5","6","7","8"}end end;function B_Reprisal_ChangePlayer:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_ChangePlayer)function Reprisal_SetVisible(...)return B_Reprisal_SetVisible:new(...)end;B_Reprisal_SetVisible={Name="Reprisal_SetVisible",Description={en="Reprisal: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst.",fr="Rétribution: fixe la visibilité d'une Entité. S'il s'agit d'un spawn, les Entities spawnées sont également affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Visible",de="Sichtbar",fr="Visible"}}}function B_Reprisal_SetVisible:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVisible:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Visible=ToBoolean(bi)end end;function B_Reprisal_SetVisible:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local bT=Logic.EntityGetPlayer(bQ)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)if string.find(o9,"^S_")or string.find(o9,"^B_NPC_Bandits")or string.find(o9,"^B_NPC_Barracks")then local oa={Logic.GetSpawnedEntities(bQ)}for f=1,#oa do if Logic.IsLeader(oa[f])==1 then local ob={Logic.GetSoldiersAttachedToLeader(oa[f])}for b8=2,#ob do Logic.SetVisible(ob[b8],self.Visible)end else Logic.SetVisible(oa[f],self.Visible)end end else if Logic.IsLeader(bQ)==1 then local ob={Logic.GetSoldiersAttachedToLeader(bQ)}for b8=2,#ob do Logic.SetVisible(ob[b8],self.Visible)end else Logic.SetVisible(bQ,self.Visible)end end end;function B_Reprisal_SetVisible:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Reprisal_SetVisible:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVisible)function Reprisal_SetVulnerability(...)return B_Reprisal_SetVulnerability:new(...)end;B_Reprisal_SetVulnerability={Name="Reprisal_SetVulnerability",Description={en="Reprisal: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen.",fr="Rétribution: rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les Entities spawnées sont affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Vulnerability",de="Verwundbar",fr="Vulnérabilité"}}}function B_Reprisal_SetVulnerability:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVulnerability:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Vulnerability=ToBoolean(bi)end end;function B_Reprisal_SetVulnerability:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)local oc={bQ}if string.find(o9,"S_")or string.find(o9,"B_NPC_Bandits")or string.find(o9,"B_NPC_Barracks")then oc={Logic.GetSpawnedEntities(bQ)}end;local od="MakeInvulnerable"if self.Vulnerability then od="MakeVulnerable"end;for f=1,#oc,1 do if Logic.IsLeader(oc[f])==1 then local aJ={Logic.GetSoldiersAttachedToLeader(oc[f])}for b8=2,#aJ,1 do _G[od](aJ[b8])end end;_G[od](oc[f])end end;function B_Reprisal_SetVulnerability:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Reprisal_SetVulnerability:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVulnerability)function Reprisal_SetModel(...)return B_Reprisal_SetModel:new(...)end;B_Reprisal_SetModel={Name="Reprisal_SetModel",Description={en="Reprisal: Changes the model of the entity. Be careful, some models crash the game.",de="Vergeltung: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz.",fr="Rétribution: modifie le modèle d'une entité. Attention: certains modèles entraînent un crash."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Model",de="Model",fr="Modèle"}}}function B_Reprisal_SetModel:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetModel:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Model=bi end end;function B_Reprisal_SetModel:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)Logic.SetModel(bQ,Models[self.Model])end;function B_Reprisal_SetModel:GetCustomData(bh)if bh==1 then local bk={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(bk,g)end end;table.insert(bk,"Effects_Dust01")table.insert(bk,"Effects_E_DestructionSmoke")table.insert(bk,"Effects_E_DustLarge")table.insert(bk,"Effects_E_DustSmall")table.insert(bk,"Effects_E_Firebreath")table.insert(bk,"Effects_E_Fireworks01")table.insert(bk,"Effects_E_Flies01")table.insert(bk,"Effects_E_Grasshopper03")table.insert(bk,"Effects_E_HealingFX")table.insert(bk,"Effects_E_Knight_Chivalry_Aura")table.insert(bk,"Effects_E_Knight_Plunder_Aura")table.insert(bk,"Effects_E_Knight_Song_Aura")table.insert(bk,"Effects_E_Knight_Trader_Aura")table.insert(bk,"Effects_E_Knight_Wisdom_Aura")table.insert(bk,"Effects_E_KnightFight")table.insert(bk,"Effects_E_NA_BlowingSand01")table.insert(bk,"Effects_E_NE_BlowingSnow01")table.insert(bk,"Effects_E_Oillamp")table.insert(bk,"Effects_E_SickBuilding")table.insert(bk,"Effects_E_Splash")table.insert(bk,"Effects_E_Torch")table.insert(bk,"Effects_Fire01")table.insert(bk,"Effects_FX_Lantern")table.insert(bk,"Effects_FX_SmokeBIG")table.insert(bk,"Effects_XF_BuildingSmoke")table.insert(bk,"Effects_XF_BuildingSmokeLarge")table.insert(bk,"Effects_XF_BuildingSmokeMedium")table.insert(bk,"Effects_XF_HouseFire")table.insert(bk,"Effects_XF_HouseFireLo")table.insert(bk,"Effects_XF_HouseFireMedium")table.insert(bk,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(bk,"Effects_E_KhanaTemple_Fire")table.insert(bk,"Effects_E_Knight_Saraya_Aura")end;table.sort(bk)return bk end end;function B_Reprisal_SetModel:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;if not Models[self.Model]then error(bg.Identifier..": "..self.Name..": model '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetModel)function Reward_SetPosition(...)return B_Reward_SetPosition:new(...)end;B_Reward_SetPosition=CopyTable(B_Reprisal_SetPosition)B_Reward_SetPosition.Name="Reward_SetPosition"B_Reward_SetPosition.Description.en="Reward: Places an entity relative to the position of another. The entity can look the target."B_Reward_SetPosition.Description.de="Lohn: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden."B_Reward_SetPosition.Description.fr="Récompense: Définit une Entity vis-à-vis de la position d'une autre. L'entité peut être orientée vers la cible."B_Reward_SetPosition.GetReprisalTable=nil;B_Reward_SetPosition.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetPosition)function Reward_ChangePlayer(...)return B_Reward_ChangePlayer:new(...)end;B_Reward_ChangePlayer=CopyTable(B_Reprisal_ChangePlayer)B_Reward_ChangePlayer.Name="Reward_ChangePlayer"B_Reward_ChangePlayer.Description.en="Reward: Changes the owner of the entity or a battalion."B_Reward_ChangePlayer.Description.de="Lohn: Ändert den Besitzer einer Entity oder eines Battalions."B_Reward_ChangePlayer.Description.fr="Récompense: Change le propriétaire d'une entité ou d'un bataillon."B_Reward_ChangePlayer.GetReprisalTable=nil;B_Reward_ChangePlayer.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ChangePlayer)function Reward_MoveToPosition(...)return B_Reward_MoveToPosition:new(...)end;B_Reward_MoveToPosition={Name="Reward_MoveToPosition",Description={en="Reward: Moves an entity relative to another entity. If angle is zero the entities will be standing directly face to face.",de="Lohn: Bewegt eine Entity relativ zur Position einer anderen. Wenn Winkel 0 ist, stehen sich die Entities direkt gegenüber.",fr="Récompense: Déplace une entité par rapport à la position d'une autre. Si l'angle est égal à 0, les entités sont directement opposées."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Number,en="Angle",de="Winkel",fr="Angle"}}}function B_Reward_MoveToPosition:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveToPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.Distance=bi*1 elseif bh==3 then self.Angle=bi*1 end end;function B_Reward_MoveToPosition:CustomFunction(bg)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;self.Angle=self.Angle or 0;local c6=GetID(self.Entity)local o7=GetID(self.Target)local aR=Logic.GetEntityOrientation(o7)local E,F,G=Logic.EntityGetPos(o7)if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)aR=aR-90 end;E=E+self.Distance*math.cos(math.rad(aR+self.Angle))F=F+self.Distance*math.sin(math.rad(aR+self.Angle))Logic.MoveSettler(c6,E,F)self.EntityMovingJob=RequestJob(function(oe,of)if Logic.IsEntityMoving(oe)==false then LookAt(oe,of)return true end end,c6,o7)end;function B_Reward_MoveToPosition:Reset(bg)if self.EntityMovingJob then EndJob(self.EntityMovingJob)end end;function B_Reward_MoveToPosition:Debug(bg)if tonumber(self.Distance)==nil or self.Distance<50 then error(bg.Identifier..": "..self.Name..": Distance is nil or to short!")return true elseif not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bg.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveToPosition)function Reward_VictoryWithParty()return B_Reward_VictoryWithParty:new()end;B_Reward_VictoryWithParty={Name="Reward_VictoryWithParty",Description={en="Reward: (Singleplayer) The player wins the game with an animated festival on the market. Continue playing deleates the festival.",de="Lohn: (Einzelspieler) Der Spieler gewinnt das Spiel mit einer animierten Siegesfeier. Bei weiterspielen wird das Fest gelöscht.",fr="Récompense: (Joueur unique) Le joueur gagne la partie avec une fête de la victoire animée. Si le joueur continue à jouer, la fête est effacée."},Parameter={}}function B_Reward_VictoryWithParty:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_VictoryWithParty:AddParameter(bh,bi)end;function B_Reward_VictoryWithParty:CustomFunction(bg)if not Lib.QuestBehavior then return end;if Framework.IsNetworkGame()then error(bg.Identifier..": "..self.Name..": Can not be used in multiplayer!")return end;Victory(g_VictoryAndDefeatType.VictoryMissionComplete)local q=bg.ReceivingPlayer;local og=Logic.GetMarketplace(q)if IsExisting(og)then local aP=GetPosition(og)Logic.CreateEffect(EGL_Effects.FXFireworks01,aP.X,aP.Y,0)Logic.CreateEffect(EGL_Effects.FXFireworks02,aP.X,aP.Y,0)local oh=self:GenerateParty(q)Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]=oh;Logic.ExecuteInLuaLocalState(string.format([[
                local MarketID = %d
                if IsExisting(MarketID) then
                    CameraAnimation.AllowAbort = false
                    CameraAnimation.QueueAnimation(CameraAnimation.SetCameraToEntity, MarketID)
                    CameraAnimation.QueueAnimation(CameraAnimation.StartCameraRotation, 5)
                    CameraAnimation.QueueAnimation(CameraAnimation.Stay ,9999)
                end

                GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty = GUI_Window.ContinuePlayingClicked
                GUI_Window.ContinuePlayingClicked = function()
                    GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty()
                    
                    local PlayerID = GUI.GetPlayerID()
                    GUI.SendScriptCommand("B_Reward_VictoryWithParty:ClearParty(" ..PlayerID.. ")")

                    CameraAnimation.AllowAbort = true
                    CameraAnimation.Abort()
                end
            ]],og))end end;function B_Reward_VictoryWithParty:ClearParty(n)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]then for g,h in pairs(Lib.QuestBehavior.Global.VictoryWithPartyEntities[n])do DestroyEntity(h)end;Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]=nil end end;function B_Reward_VictoryWithParty:GenerateParty(n)local oi={}local oj=Logic.GetMarketplace(n)if oj~=nil and oj~=0 then local ok,ol=Logic.GetEntityPosition(oj)local ar=Logic.CreateEntity(Entities.D_X_Garland,ok,ol,0,n)table.insert(oi,ar)for b8=1,10 do for g=1,10 do local om=ok-700+b8*150;local on=ol-700+g*150;local oo=math.random(1,100)if oo>70 then local op=GetRandomSettlerType()local S=math.random(1,359)local oq=Logic.CreateEntityOnUnblockedLand(op,om,on,S,n)Logic.SetTaskList(oq,TaskLists.TL_WORKER_FESTIVAL_APPLAUD_SPEECH)table.insert(oi,oq)end end end end;return oi end;function B_Reward_VictoryWithParty:Debug(bg)if Lib.QuestBehavior then if Lib.QuestBehavior.Global.VictoryWithPartyEntities[bg.ReceivingPlayer]then error(bg.Identifier..": "..self.Name..": Victory festival already started for player "..bg.ReceivingPlayer.."!")return true end end;return false end;RegisterBehavior(B_Reward_VictoryWithParty)function Reward_SetVisible(...)return B_Reward_SetVisible:new(...)end;B_Reward_SetVisible=CopyTable(B_Reprisal_SetVisible)B_Reward_SetVisible.Name="Reward_SetVisible"B_Reward_SetVisible.Description.en="Reward: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVisible.Description.de="Lohn: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst."B_Reward_SetVisible.Description.fr="Récompense: Définit la visibilité d'une Entity. S'il s'agit d'un spawn, les entités spawnées sont également influencées."B_Reward_SetVisible.GetReprisalTable=nil;B_Reward_SetVisible.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVisible)function Reward_SetVulnerability(...)return B_Reward_SetVulnerability:new(...)end;B_Reward_SetVulnerability=CopyTable(B_Reprisal_SetVulnerability)B_Reward_SetVulnerability.Name="Reward_SetVulnerability"B_Reward_SetVulnerability.Description.en="Reward: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVulnerability.Description.de="Lohn: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen."B_Reward_SetVulnerability.Description.fr="Récompense: Rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les entités spawnées sont affectées."B_Reward_SetVulnerability.GetReprisalTable=nil;B_Reward_SetVulnerability.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVulnerability)function Reward_SetModel(...)return B_Reward_SetModel:new(...)end;B_Reward_SetModel=CopyTable(B_Reprisal_SetModel)B_Reward_SetModel.Name="Reward_SetModel"B_Reward_SetModel.Description.en="Reward: Changes the model of the entity. Be careful, some models crash the game."B_Reward_SetModel.Description.de="Lohn: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz."B_Reward_SetModel.Description.fr="Récompense: Modifie le modèle d'une entité. Attention : certains modèles entraînent un plantage."B_Reward_SetModel.GetReprisalTable=nil;B_Reward_SetModel.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetModel)function Reward_AI_SetEntityControlled(...)return B_Reward_AI_SetEntityControlled:new(...)end;B_Reward_AI_SetEntityControlled={Name="Reward_AI_SetEntityControlled",Description={en="Reward: Bind or Unbind an entity or a battalion to/from an AI player. The AI player must be activated!",de="Lohn: Die KI kontrolliert die Entity oder der KI die Kontrolle entziehen. Die KI muss aktiv sein!",fr="Récompense: L'IA contrôle l'entité ou retirer le contrôle à l'IA. L'IA doit être active !"},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="AI control entity",de="KI kontrolliert Entity",fr="L'IA contrôle l'entité"}}}function B_Reward_AI_SetEntityControlled:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEntityControlled:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Hidden=ToBoolean(bi)end end;function B_Reward_AI_SetEntityControlled:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local bT=Logic.EntityGetPlayer(bQ)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)if string.find(o9,"S_")or string.find(o9,"B_NPC_Bandits")or string.find(o9,"B_NPC_Barracks")then local oa={Logic.GetSpawnedEntities(bQ)}for f=1,#oa do if Logic.IsLeader(oa[f])==1 then AICore.HideEntityFromAI(bT,oa[f],not self.Hidden)end end else AICore.HideEntityFromAI(bT,bQ,not self.Hidden)end end;function B_Reward_AI_SetEntityControlled:GetCustomData(bh)if bh==1 then return{"false","true"}end end;function B_Reward_AI_SetEntityControlled:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEntityControlled)function Trigger_AmmunitionDepleted(...)return B_Trigger_AmmunitionDepleted:new(...)end;B_Trigger_AmmunitionDepleted={Name="Trigger_AmmunitionDepleted",Description={en="Trigger: if the ammunition of the entity is depleted.",de="Auslöser: wenn die Munition der Entity aufgebraucht ist.",fr="Déclencheur: lorsque les munitions de l'entité sont épuisées."},Parameter={{ParameterType.Scriptname,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Trigger_AmmunitionDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_AmmunitionDepleted:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi end end;function B_Trigger_AmmunitionDepleted:CustomFunction()if not IsExisting(self.Scriptname)then return false end;local w=GetID(self.Scriptname)if Logic.GetAmmunitionAmount(w)>0 then return false end;return true end;function B_Trigger_AmmunitionDepleted:Debug(bg)if not IsExisting(self.Scriptname)then error(bg.Identifier..": "..self.Name..": '"..self.Scriptname.."' is destroyed!")return true end;return false end;RegisterBehavior(B_Trigger_AmmunitionDepleted)Lib.Register("module/quest/QuestBehavior_API")function GetEnemySoldierKillsOfPlayer(ml,mn)return Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(ml,mn)end;Lib.QuestBehavior=Lib.QuestBehavior or{}Lib.QuestBehavior.Name="QuestBehavior"Lib.QuestBehavior.Global={VictoryWithPartyEntities={},SoldierKillsCounter={}}Lib.QuestBehavior.Local={}Lib.Require("comfort/GetRandomSettlerType")Lib.Require("comfort/LookAt")Lib.Require("comfort/ToBoolean")Lib.Require("core/core")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestBehavior_API")Lib.Require("module/quest/QuestBehavior_Behavior")Lib.Register("module/quest/QuestBehavior")function Lib.QuestBehavior.Global:Initialize()if not self.IsInstalled then for q=0,8 do self.SoldierKillsCounter[q]={}end;self:OverrideIsObjectiveCompleted()self:OverrideOnQuestTriggered()Lib.QuestBehavior.Local=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Global:OnSaveGameLoaded()end;function Lib.QuestBehavior.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.ThiefInfiltratedBuilding then self:OnThiefInfiltratedBuilding(arg[1],arg[2],arg[3],arg[4])elseif aM==Report.ThiefDeliverEarnings then self:OnThiefDeliverEarnings(arg[1],arg[2],arg[3],arg[4],arg[5])elseif aM==Report.EntityKilled then self:OnEntityKilled(arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestBehavior.Global:OverrideOnQuestTriggered()QuestTemplate.Trigger_Orig_QSB_NewBehaviors=QuestTemplate.Trigger;QuestTemplate.Trigger=function(self)for d0=1,#self.Objectives,1 do if self.Objectives[d0]then if self.Objectives[d0].Type==Objective.DestroyEntities and self.Objectives[d0].Data[1]==3 then if self.Objectives[d0].Data[5]~=true then local os=self.Objectives[d0].Data[2][0]local ot=self.Objectives[d0].Data[3]for f=1,os,1 do local ar=GetID(self.Objectives[d0].Data[2][f])local ou={Logic.GetSpawnedEntities(ar)}for b8=1,#ou,1 do DestroyEntity(ou[b8])end end;while ot>0 do for f=1,os,1 do if ot<1 then break end;local ar=GetID(self.Objectives[d0].Data[2][f])Logic.RespawnResourceEntity_Spawn(ar)ot=ot-1 end end;local ov=Logic.GetSpawnedEntities(self.Objectives[d0].Data[2][1])if not self.Objectives[d0].Data[6]then self.Objectives[d0].Data[6]={7,12}if Logic.IsEntityInCategory(ov,EntityCategories.AttackableAnimal)==1 then self.Objectives[d0].Data[6]={13,8}end end;self.Objectives[d0].Data[5]=true end end end end;self:Trigger_Orig_QSB_NewBehaviors()end end;function Lib.QuestBehavior.Global:OverrideIsObjectiveCompleted()QuestTemplate.IsObjectiveCompleted_Orig_QSB_NewBehaviors=QuestTemplate.IsObjectiveCompleted;QuestTemplate.IsObjectiveCompleted=function(self,dK)local dL=dK.Type;if dK.Completed~=nil then if dL==Objective.DestroyEntities and dK.Data[1]==3 then dK.Data[5]=nil end;return dK.Completed end;if dL==Objective.DestroyEntities then if dK.Data[1]==3 then dK.Completed=self:AreSpawnedQuestEntitiesDestroyed(dK)else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(dK)end else return self:IsObjectiveCompleted_Orig_QSB_NewBehaviors(dK)end end;QuestTemplate.AreSpawnedQuestEntitiesDestroyed=function(self,dn)if dn.Data[1]==3 then local ow={}for f=1,dn.Data[2][0],1 do local ar=GetID(dn.Data[2][f])ow=Array_Append(ow,{Logic.GetSpawnedEntities(ar)})end;if#ow==0 then return true end end end end;function Lib.QuestBehavior.Global:GetPossibleModels()local bk={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(bk,g)end end;table.insert(bk,"Effects_Dust01")table.insert(bk,"Effects_E_DestructionSmoke")table.insert(bk,"Effects_E_DustLarge")table.insert(bk,"Effects_E_DustSmall")table.insert(bk,"Effects_E_Firebreath")table.insert(bk,"Effects_E_Fireworks01")table.insert(bk,"Effects_E_Flies01")table.insert(bk,"Effects_E_Grasshopper03")table.insert(bk,"Effects_E_HealingFX")table.insert(bk,"Effects_E_Knight_Chivalry_Aura")table.insert(bk,"Effects_E_Knight_Plunder_Aura")table.insert(bk,"Effects_E_Knight_Song_Aura")table.insert(bk,"Effects_E_Knight_Trader_Aura")table.insert(bk,"Effects_E_Knight_Wisdom_Aura")table.insert(bk,"Effects_E_KnightFight")table.insert(bk,"Effects_E_NA_BlowingSand01")table.insert(bk,"Effects_E_NE_BlowingSnow01")table.insert(bk,"Effects_E_Oillamp")table.insert(bk,"Effects_E_SickBuilding")table.insert(bk,"Effects_E_Splash")table.insert(bk,"Effects_E_Torch")table.insert(bk,"Effects_Fire01")table.insert(bk,"Effects_FX_Lantern")table.insert(bk,"Effects_FX_SmokeBIG")table.insert(bk,"Effects_XF_BuildingSmoke")table.insert(bk,"Effects_XF_BuildingSmokeLarge")table.insert(bk,"Effects_XF_BuildingSmokeMedium")table.insert(bk,"Effects_XF_HouseFire")table.insert(bk,"Effects_XF_HouseFireLo")table.insert(bk,"Effects_XF_HouseFireMedium")table.insert(bk,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(bk,"Effects_E_KhanaTemple_Fire")table.insert(bk,"Effects_E_Knight_Saraya_Aura")end;table.sort(bk)return bk end;function Lib.QuestBehavior.Global:OnThiefInfiltratedBuilding(l_,n,hL,m2)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==n then for b8=1,Quests[f].Objectives[0]do if Quests[f].Objectives[b8].Type==Objective.Custom2 then if Quests[f].Objectives[b8].Data[1].Name=="Goal_SpyOnBuilding"then if GetID(Quests[f].Objectives[b8].Data[1].Building)==hL then Quests[f].Objectives[b8].Data[1].Infiltrated=true;if Quests[f].Objectives[b8].Data[1].Delete then DestroyEntity(l_)end end elseif Quests[f].Objectives[b8].Data[1].Name=="Goal_StealFromBuilding"then local bU;local o3=Logic.GetEntityType(hL)==Entities.B_Cistern;local o1=Logic.IsEntityInCategory(hL,EntityCategories.Cathedrals)==1;local o2=Logic.GetEntityType(hL)==Entities.B_StoreHouse;if o2 or o1 or o3 then Quests[f].Objectives[b8].Data[1].SuccessfullyStohlen=true else for g=1,#Quests[f].Objectives[b8].Data[1].RobberList do local ox=Quests[f].Objectives[b8].Data[1].RobberList[g]if ox[1]==hL and ox[2]==l_ then bU=true;break end end end;if not bU then table.insert(Quests[f].Objectives[b8].Data[1].RobberList,{hL,l_})end end end end end end end;function Lib.QuestBehavior.Global:OnThiefDeliverEarnings(l_,n,hL,m2,oy)for f=1,Quests[0]do if Quests[f]and Quests[f].State==QuestState.Active and Quests[f].ReceivingPlayer==n then for b8=1,Quests[f].Objectives[0]do if Quests[f].Objectives[b8].Type==Objective.Custom2 then if Quests[f].Objectives[b8].Data[1].Name=="Goal_StealFromBuilding"then for g=1,#Quests[f].Objectives[b8].Data[1].RobberList do local ox=Quests[f].Objectives[b8].Data[1].RobberList[g]if ox[1]==GetID(Quests[f].Objectives[b8].Data[1].Building)and ox[2]==l_ then Quests[f].Objectives[b8].Data[1].SuccessfullyStohlen=true;break end end elseif Quests[f].Objectives[b8].Data[1].Name=="Goal_StealGold"then local oz=Quests[f].Objectives[b8].Data[1]if oz.Target==-1 or oz.Target==m2 then Quests[f].Objectives[b8].Data[1].StohlenGold=Quests[f].Objectives[b8].Data[1].StohlenGold+oy;if oz.Printout then AddNote(string.format("%d/%d %s",oz.StohlenGold,oz.Amount,Localize({de="Talern gestohlen",en="gold stolen"})))end end end end end end end end;function Lib.QuestBehavior.Global:OnEntityKilled(oA,oB,oC,oD)if oB~=0 and oD~=0 then self.SoldierKillsCounter[oD][oB]=self.SoldierKillsCounter[oD][oB]or 0;if Logic.IsEntityInCategory(oA,EntityCategories.Soldier)==1 then self.SoldierKillsCounter[oD][oB]=self.SoldierKillsCounter[oD][oB]+1 end end end;function Lib.QuestBehavior.Global:GetEnemySoldierKillsOfPlayer(ml,mn)return self.SoldierKillsCounter[ml][mn]or 0 end;function Lib.QuestBehavior.Local:Initialize()if not self.IsInstalled then Lib.QuestBehavior.Global=nil end;self.IsInstalled=true end;function Lib.QuestBehavior.Local:OnSaveGameLoaded()end;function Lib.QuestBehavior.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.QuestBehavior.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/quest/QuestJornal_API")function ShowJournalForQuest(bg,e2)assert(not IsLocalScript(),"Can not be used in local script!")local ay=Quests[GetQuestID(bg)]if ay then ay.QuestNotes=e2==true end end;function AllowNotesForQuest(bg,e2)assert(not IsLocalScript(),"Can not be used in local script!")local ay=Quests[GetQuestID(bg)]if ay then Lib.QuestJornal.Global.CustomInputAllowed[bg]=e2==true end end;function CreateJournalEntry(dG)assert(not IsLocalScript(),"Can not be used in local script!")dG=dG:gsub("{@[A-Za-z0-9:,]+}","")dG=dG:gsub("{[A-Za-z0-9_]+}","")return Lib.QuestJornal.Global:CreateJournalEntry(dG,0,false)end;function AlterJournalEntry(aM,dG)assert(not IsLocalScript(),"Can not be used in local script!")dG=dG:gsub("{@[A-Za-z0-9:,]+}","")dG=dG:gsub("{[A-Za-z0-9_]+}","")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:UpdateJournalEntry(aM,dG,jC.Rank,jC.AlwaysVisible,jC.Deleted)end end;function HighlightJournalEntry(aM,oE)assert(not IsLocalScript(),"Can not be used in local script!")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:UpdateJournalEntry(aM,jC[1],oE==true and 1 or 0,jC.AlwaysVisible,jC.Deleted)end end;function DeleteJournalEntry(aM)assert(not IsLocalScript(),"Can not be used in local script!")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:UpdateJournalEntry(aM,jC[1],jC.Rank,jC.AlwaysVisible,true)end end;function RestoreJournalEntry(aM)assert(not IsLocalScript(),"Can not be used in local script!")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:UpdateJournalEntry(aM,jC[1],jC.Rank,jC.AlwaysVisible,false)end end;function AddJournalEntryToQuest(aM,bg)assert(not IsLocalScript(),"Can not be used in local script!")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aM,bg,true)end end;function RemoveJournalEntryFromQuest(aM,bg)assert(not IsLocalScript(),"Can not be used in local script!")local jC=Lib.QuestJornal.Global:GetJournalEntry(aM)if jC then Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aM,bg,false)end end;Lib.QuestJornal=Lib.QuestJornal or{}Lib.QuestJornal.Name="QuestJornal"Lib.QuestJornal.Global={Journal={ID=0},CustomInputAllowed={},InputShown={},TextColor="{tooltip}"}Lib.QuestJornal.Local={NextButton="/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/TutorialNextButton",NextButtonIcon={16,10}}Lib.QuestJornal.Text={Next={de="Tagebuch anzeigen",en="Show Journal",fr="Afficher le journal"},Title={de="Tagebuch",en="Journal",fr="Journal"},Note={de="Notiz",en="Note",fr="Note"}}Lib.Require("core/core")Lib.Require("module/information/Requester")Lib.Require("module/quest/Quest")Lib.Require("module/quest/QuestJornal_API")Lib.Register("module/quest/QuestJornal")function Lib.QuestJornal.Global:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")Lib.QuestJornal.Local=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Global:OnSaveGameLoaded()end;function Lib.QuestJornal.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.TutorialNextClicked then self:DisplayJournal(arg[1],arg[2])elseif aM==Report.ChatClosed then self:ProcessChatInput(arg[1],arg[2])elseif aM==Report.QuestJournalPlayerNote then self.InputShown[arg[1]]=arg[2]SendReportToLocal(Report.QuestJournalPlayerNote,arg[1],arg[2],arg[3]==true)elseif aM==Report.QuestJournalDisplayed then SendReportToLocal(Report.QuestJournalDisplayed,arg[1],arg[2],arg[3],arg[4])end end;function Lib.QuestJornal.Global:DisplayJournal(dH,n)local oF=self.CustomInputAllowed[dH]==true;local oG=self:FormatJournalEntry(dH,n)SendReport(Report.QuestJournalDisplayed,n,dH,oG,oF)end;function Lib.QuestJornal.Global:CreateJournalEntry(dG,oH,oI)self.Journal.ID=self.Journal.ID+1;table.insert(self.Journal,{ID=self.Journal.ID,AlwaysVisible=oI==true,Quests={},Rank=oH,dG})return self.Journal.ID end;function Lib.QuestJornal.Global:GetJournalEntry(aM)for f=1,#self.Journal do if self.Journal[f].ID==aM then return self.Journal[f]end end end;function Lib.QuestJornal.Global:UpdateJournalEntry(aM,dG,oH,oI,oJ)for f=1,#self.Journal do if self.Journal[f].ID==aM then self.Journal[f].AlwaysVisible=oI==true;self.Journal[f].Deleted=oJ==true;self.Journal[f].Rank=oH;self.Journal[f][1]=self.Journal[f][1]or dG end end end;function Lib.QuestJornal.Global:AssociateJournalEntryWithQuest(aM,bg,e2)for f=1,#self.Journal do if self.Journal[f].ID==aM then self.Journal[f].Quests[bg]=e2==true end end end;function Lib.QuestJornal.Global:FormatJournalEntry(dH,n)local ay=Quests[GetQuestID(dH)]if ay and ay.QuestNotes and ay.ReceivingPlayer==n then local oK=self:GetJournalEntriesSorted()local oL=false;local oM=false;local nJ=""local er=""for f=1,#oK,1 do if oK[f].AlwaysVisible or oK[f].Quests[dH]then if not oK[f].Deleted then local bq=ConvertPlaceholders(Localize(oK[f][1]))if oK[f].Rank==1 then bq="{scarlet}"..bq..self.TextColor;oL=true end;if oK[f].Rank==0 then if oL then oL=false;bq="{cr}----------{cr}{cr}"..bq end;oM=true end;if oK[f].Rank==-1 then if oM then oM=false;er="{violet}"bq="{cr}----------{cr}{cr}"..bq end;bq=er..bq..self.TextColor end;nJ=nJ..(nJ~=""and"{cr}"or"")..bq end end end;return nJ end end;function Lib.QuestJornal.Global:GetJournalEntriesSorted()local oK={}for f=1,#self.Journal,1 do table.insert(oK,self.Journal[f])end;table.sort(oK,function(ai,d0)return ai.Rank>d0.Rank end)return oK end;function Lib.QuestJornal.Global:ProcessChatInput(dG,n)if self.InputShown[n]then if dG and dG~=""then local oN=self.InputShown[n]local oF=self.CustomInputAllowed[oN]==true;local ar=self:CreateJournalEntry(dG,-1,false)self:AssociateJournalEntryWithQuest(ar,oN,true)local oG=self:FormatJournalEntry(oN,n)SendReport(Report.QuestJournalDisplayed,n,oN,oG,oF)end;self.InputShown[n]=nil end end;function Lib.QuestJornal.Local:Initialize()if not self.IsInstalled then Report.QuestJournalDisplayed=CreateReport("Event_QuestJournalDisplayed")Report.QuestJournalPlayerNote=CreateReport("Event_QuestJournalPlayerNote")Report.TutorialNextClicked=CreateReport("Event_TutorialNextClicked")self:OverrideUpdateVoiceMessage()self:OverrideTutorialNext()self:OverrideStringKeys()self:OverrideTimerButtons()Lib.QuestJornal.Global=nil end;self.IsInstalled=true end;function Lib.QuestJornal.Local:OnSaveGameLoaded()end;function Lib.QuestJornal.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.QuestJournalPlayerNote then if arg[1]==GUI.GetPlayerID()and arg[3]then ShowTextInput(arg[1],false)end elseif aM==Report.QuestJournalDisplayed then if arg[1]==GUI.GetPlayerID()then self:DisplayQuestJournal(arg[2],arg[1],arg[3],arg[4])end end end;function Lib.QuestJornal.Local:DisplayQuestJournal(dH,n,oO,A)if oO and GUI.GetPlayerID()==n then local hO=Localize(Lib.QuestJornal.Text.Title)local bk={PlayerID=n,Caption=hO,Content=ConvertPlaceholders(oO),QuestName=dH}if A then bk.Button={Text=Localize{de="Notiz",en="Note",fr="Note"},Action=function(ho)SendReportToGlobal(Report.QuestJournalPlayerNote,ho.PlayerID,ho.QuestName,A)end}end;Lib.Requester.Local:ShowTextWindow(bk)end end;function Lib.QuestJornal.Local:OverrideUpdateVoiceMessage()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal=GUI_Interaction.UpdateVoiceMessage;GUI_Interaction.UpdateVoiceMessage=function()GUI_Interaction.UpdateVoiceMessage_Orig_QuestJornal()if not QuestLog.IsQuestLogShown()then if Lib.QuestJornal.Local:IsShowingJournalButton(g_Interaction.CurrentMessageQuestIndex)then XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,1)SetIcon(Lib.QuestJornal.Local.NextButton,Lib.QuestJornal.Local.NextButtonIcon)else XGUIEng.ShowWidget(Lib.QuestJornal.Local.NextButton,0)end end end end;function Lib.QuestJornal.Local:IsShowingJournalButton(aM)if not g_Interaction.CurrentMessageQuestIndex then return false end;local ay=Quests[aM]if type(ay)=="table"and ay.QuestNotes then return true end;return false end;function Lib.QuestJornal.Local:OverrideTimerButtons()GUI_Interaction.TimerButtonClicked_Orig_QuestJornal=GUI_Interaction.TimerButtonClicked;GUI_Interaction.TimerButtonClicked=function()if XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions")==1 and XGUIEng.IsWidgetShown("/InGame/Root/Normal/ChatOptions/ToggleWhisperTarget")==1 then return end;GUI_Interaction.TimerButtonClicked_Orig_QuestJornal()end end;function Lib.QuestJornal.Local:OverrideTutorialNext()GUI_Interaction.TutorialNext_Orig_QuestJornal=GUI_Interaction.TutorialNext;GUI_Interaction.TutorialNext=function()if g_Interaction.CurrentMessageQuestIndex then local bV=g_Interaction.CurrentMessageQuestIndex;local ay=Quests[bV]SendReportToGlobal(Report.TutorialNextClicked,ay.Identifier,GUI.GetPlayerID())SendReport(Report.TutorialNextClicked,ay.Identifier,GUI.GetPlayerID())end end end;function Lib.QuestJornal.Local:OverrideStringKeys()AddStringText("UI_ObjectNames/TutorialNextButton",Lib.QuestJornal.Text.Next)end;RegisterModule(Lib.QuestJornal.Name)Lib.Register("module/trade/Warehouse_Behavior")B_Reward_TradePost.DEBUG_Orig_Warehouse=B_Reward_TradePost.DEBUG;B_Reward_TradePost.DEBUG=function(self,bg)local ax=Lib.Warehouse.Global:GetIndex(self.ScriptName)if ax~=0 then debug(false,bg.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return false end;return self:DEBUG_Orig_Warehouse(bg)end;B_Reward_TradePost.CustomFunction_Orig_Warehouse=B_Reward_TradePost.CustomFunction;B_Reward_TradePost.CustomFunction=function(self,bg)local ax=Lib.Warehouse.Global:GetIndex(self.ScriptName)if ax~=0 then debug(false,bg.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return end;self:CustomFunction_Orig_Warehouse(bg)end;Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Warehouse_API")function CreateWarehouse(ho)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:CreateWarehouse(ho)Lib.Warehouse.ReleaseContext()end;API.CreateWarehouse=CreateWarehouse;function CreateWarehouseOffer(C,aS,oP,oQ,oR,oS,oT)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()local oU=this:CreateOffer(C,aS,oP,oQ,oR,oS,oT)Lib.Warehouse.ReleaseContext()return oU end;API.CreateWarehouseOffer=CreateWarehouseOffer;function RemoveWarehouseOffer(C,aM)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:RemoveOffer(C,aM)Lib.Warehouse.ReleaseContext()end;API.RemoveWarehouseOffer=RemoveWarehouseOffer;function DeactivateWarehouseOffer(C,aM,oV)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:ActivateOffer(C,aM,not oV)Lib.Warehouse.ReleaseContext()end;API.DeactivateWarehouseOffer=DeactivateWarehouseOffer;function GetWarehouseInflation(n,oP)Lib.Warehouse.AquireContext()local oW=this:GetInflation(n,oP)Lib.Warehouse.ReleaseContext()return oW end;API.GetWarehouseInflation=GetWarehouseInflation;function SetWarehouseInflation(n,oP,oX)assert(not IsLocalScript(),"Can not be used in local script!")Lib.Warehouse.AquireContext()this:SetInflation(n,oP,oX)Lib.Warehouse.ReleaseContext()end;API.SetWarehouseInflation=SetWarehouseInflation;function GetWarehouseOfferByID(C,aM)Lib.Warehouse.AquireContext()local oU=this:GetOfferByID(C,aM)Lib.Warehouse.ReleaseContext()return oU end;API.GetWarehouseOfferByID=GetWarehouseOfferByID;function GetActivWarehouseOffers(C,oY)Lib.Warehouse.AquireContext()local oZ=this:GetActivOffers(C,oY)Lib.Warehouse.ReleaseContext()return oZ end;API.GetActivWarehouseOffers=GetActivWarehouseOffers;Lib.Warehouse=Lib.Warehouse or{}Lib.Warehouse.Name="Warehouse"Lib.Warehouse.CinematicEvents={}Lib.Warehouse.Global={OfferSequence=0,Warehouses={Job=0},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Local={Warehouses={},Inflation={Players={},Inc=0.12,Min=0.50,Max=1.75}}Lib.Warehouse.Text={OfferTitle={{de="Keine Angebote",en="No Offers"},{de="%d %s kaufen%s",en="Purchase %d %s%s"},{de="%s anheuern",en="Hire %s"},{de="%s anheuern%s",en="Hire %s%s"},{de="%s kaufen%s",en="Purchase %s%s"}}}WarehouseOfferType={Entertainer=1,Mercenary=2,Lifestock=3,HeavyWeapon=4}Lib.Require("comfort/GetSiegeengineTypeByCartType")Lib.Require("comfort/GetBattalionSizeBySoldierType")Lib.Require("comfort/IsMultiplayer")Lib.Require("comfort/KeyOf")Lib.Require("comfort/ReplaceEntity")Lib.Require("comfort/SendCart")Lib.Require("core/Core")Lib.Require("module/ui/UITools")Lib.Require("module/io/IO")Lib.Require("module/ui/UIBuilding")Lib.Require("module/trade/Warehouse_API")Lib.Require("module/trade/Warehouse_Behavior")Lib.Register("module/trade/Warehouse")function Lib.Warehouse.Global:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")self:OverwriteGameCallbacks()for f=1,8 do self.Inflation.Players[f]={}end;self.Warehouses.Job=RequestJob(function()Lib.Warehouse.Global:ControlWarehouse()end)Lib.Warehouse.Local=nil end;self.IsInstalled=true end;function Lib.Warehouse.Global:OnSaveGameLoaded()end;function Lib.Warehouse.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.WarehouseOfferClicked then self:PerformTrade(unpack(arg))SendReportToLocal(aM,unpack(arg))end end;function Lib.Warehouse.Global:CreateWarehouse(ho)local o_={ScriptName=ho.ScriptName,BuildingName=ho.ScriptName.."_Post",Spawnpoint=ho.ScriptName.."_Spawn",Costs=ho.Costs,Offers={}}table.insert(self.Warehouses,o_)local ar=GetID(ho.ScriptName)local E,F,G=Logic.EntityGetPos(ar)local S=Logic.GetEntityOrientation(ar)local q=Logic.EntityGetPlayer(ar)local m=Logic.GetEntityType(ar)DestroyEntity(o_.ScriptName)local iy=Logic.CreateEntity(Entities.I_X_TradePostConstructionSite,E,F,S,q)Logic.SetEntityName(iy,o_.ScriptName)if m==Entities.B_TradePost then iy=ReplaceEntity(iy,Entities.XD_ScriptEntity)local kg=Logic.CreateEntity(Entities.B_TradePost,E,F,S,q)Logic.SetEntityName(kg,o_.BuildingName)end;if ho.Costs then Logic.InteractiveObjectClearCosts(GetID(o_.ScriptName))if ho.Costs[1]then Logic.InteractiveObjectAddCosts(GetID(o_.ScriptName),ho.Costs[1],ho.Costs[2])end;if ho.Costs[3]then Logic.InteractiveObjectAddCosts(GetID(o_.ScriptName),ho.Costs[3],ho.Costs[4])end end;for f=1,#ho.Offers do if ho.Offers[f]then self:CreateOffer(o_.ScriptName,ho.Offers[f].Amount,ho.Offers[f].GoodType,ho.Offers[f].GoodAmount,ho.Offers[f].PaymentType,ho.Offers[f].BasePrice,ho.Offers[f].Refresh)end end;ExecuteLocal([[Lib.Warehouse.Local:InitTradeButtons("%s")]],o_.BuildingName)end;function Lib.Warehouse.Global:GetIndex(C)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==C then return f end end;return 0 end;function Lib.Warehouse.Global:CreateOffer(C,aS,ao,m0,oR,oS,oT)local ax=self:GetIndex(C)if ax~=0 then local c1=aS or 1;if KeyOf(ao,Goods)==nil and KeyOf(ao,Entities)~=nil and Logic.IsEntityTypeInCategory(ao,EntityCategories.Military)==0 then c1=1 end;local p0=self:GetOfferType(ao)self.OfferSequence=self.OfferSequence+1;local ar=self.OfferSequence;table.insert(self.Warehouses[ax].Offers,{ID=ar,OfferType=p0,BuyLock=false,Active=true,Current=c1,Amount=c1,Timer=oT or 3*60,Refresh=oT or 3*60,GoodType=ao,GoodAmount=m0 or 9,PaymentType=oR or Goods.G_Gold,BasePrice=oS or 3})return ar end;return 0 end;function Lib.Warehouse.Global:RemoveOffer(C,aM)local ax=self:GetIndex(C)if ax~=0 then for f=#self.Warehouses[ax].Offers,1,-1 do if self.Warehouses[ax].Offers[f].ID==aM then table.remove(self.Warehouses[ax].Offers,f)break end end end end;function Lib.Warehouse.Global:ActivateOffer(C,aM,g0)local ax=self:GetIndex(C)if ax~=0 then for f=#self.Warehouses[ax].Offers,1,-1 do if self.Warehouses[ax].Offers[f].ID==aM then self.Warehouses[ax].Offers[f].Active=g0==true;break end end end end;function Lib.Warehouse.Global:GetOfferByID(C,aM)local oU,p1;local ax=self:GetIndex(C)if ax~=0 then for f=#self.Warehouses[ax].Offers,1,-1 do if self.Warehouses[ax].Offers[f].ID==aM then oU=self.Warehouses[ax].Offers[f]p1=f end end end;return oU,p1 end;function Lib.Warehouse.Global:GetActivOffers(C,oY)local c2={}local ax=self:GetIndex(C)if ax~=0 then for f=1,#self.Warehouses[ax].Offers do if(not oY or#c2<6)and self.Warehouses[ax].Offers[f].Active then table.insert(c2,self.Warehouses[ax].Offers[f].ID)end end end;return c2 end;function Lib.Warehouse.Global:ChangeOfferAmount(C,aM,aS)local ax=self:GetIndex(C)if ax~=0 then for f=#self.Warehouses[ax].Offers,1,-1 do if self.Warehouses[ax].Offers[f].ID==aM then local p2=self.Warehouses[ax].Offers[aM].Amount;self.Warehouses[ax].Offers[aM].Current=math.min(aS,p2)break end end end end;function Lib.Warehouse.Global:GetInflation(n,ao)return self.Inflation.Players[n][ao]or 1.0 end;function Lib.Warehouse.Global:SetInflation(n,ao,oX)self.Inflation.Players[n][ao]=oX or 1.0;ExecuteLocal([[Lib.Warehouse.Local.Inflation.Players[%d][%d] = %f]],n,ao,oX or 1.0)end;function Lib.Warehouse.Global:CalculateInflation(n,ao)local nc=(self.Inflation.Players[n][ao]or 1.0)+self.Inflation.Inc;nc=math.max(self.Inflation.Min,nc)nc=math.min(nc,self.Inflation.Max)return nc end;function Lib.Warehouse.Global:GetOfferType(p3)local p0=WarehouseOfferType.Entertainer;if Logic.IsEntityTypeInCategory(p3,EntityCategories.Soldier)==1 then p0=WarehouseOfferType.Mercenary elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.CattlePasture)==1 then p0=WarehouseOfferType.Lifestock elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.SheepPasture)==1 then p0=WarehouseOfferType.Lifestock elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.HeavyWeapon)==1 then p0=WarehouseOfferType.HeavyWeapon end;return p0 end;function Lib.Warehouse.Global:PerformTrade(n,dD,oX,p4,p5,m0,p6,oS)local kg=GetID(dD.."_Post")local c1=m0 or 1;local p7=dD.."_Spawn"if not IsExisting(p7)then p7=dD.."_Post"end;local p8=GetID(p7)local E,F,G=Logic.EntityGetPos(p8)if Logic.IsBuilding(p8)==1 then E,F=Logic.GetBuildingApproachPosition(p8)end;if KeyOf(p5,Goods)~=nil then SendCart(p7,n,p5,c1)elseif KeyOf(p5,Entities)~=nil then if Logic.IsEntityTypeInCategory(p5,EntityCategories.HeavyWeapon)==0 and Logic.IsEntityTypeInCategory(p5,EntityCategories.Military)==1 then local p9=Logic.GetCurrentSoldierLimit(n)local pa=Logic.GetCurrentSoldierCount(n)if GetBattalionSizeBySoldierType(p5)<=p9-pa then local S=Logic.GetEntityOrientation(p8)-90;local ar=Logic.CreateBattalionOnUnblockedLand(p5,E,F,S,n)E,F=Logic.GetBuildingApproachPosition(kg)Logic.MoveSettler(ar,E,F,-1)end else if Logic.IsEntityTypeInCategory(p5,EntityCategories.CattlePasture)==1 or Logic.IsEntityTypeInCategory(p5,EntityCategories.SheepPasture)==1 then c1=5 end;for f=1,c1 do local ar=Logic.CreateEntityOnUnblockedLand(p5,math.random(E-200,E+200),math.random(F-200,F+200),Logic.GetEntityOrientation(p8)-90,n)E,F=Logic.GetBuildingApproachPosition(kg)Logic.MoveSettler(ar,E,F,-1)end end end;local pb=math.floor(oS*oX+0.5)AddGood(p6,-1*pb,n)ExecuteLocal([[GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 1, 1}, g_TexturePositions.Goods[%d])]],-1*pb,p6)self:UpdateOnPurchase(n,dD,p4)SendReport(Report.WarehouseOfferBought,n,dD,p5,m0,p6,pb)SendReportToLocal(Report.WarehouseOfferBought,n,dD,p5,m0,p6,pb)end;function Lib.Warehouse.Global:UpdateOnPurchase(n,dD,p4)local ax=self:GetIndex(dD)if ax~=0 then local oU=self.Warehouses[ax].Offers[p4]self.Warehouses[ax].Offers[p4].Current=oU.Current-1;local oW=self:CalculateInflation(n,oU.GoodType)self:SetInflation(n,oU.GoodType,oW)end end;function Lib.Warehouse.Global:OverwriteGameCallbacks()self.Orig_GameCallback_OnBuildingConstructionComplete=GameCallback_OnBuildingConstructionComplete;GameCallback_OnBuildingConstructionComplete=function(n,at)Lib.Warehouse.Global.Orig_GameCallback_OnBuildingConstructionComplete(n,at)if Logic.GetEntityType(at)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostConstructed(at)end end;self.Orig_GameCallback_BuildingDestroyed=GameCallback_BuildingDestroyed;GameCallback_BuildingDestroyed=function(at,n,pc)Lib.Warehouse.Global.Orig_GameCallback_BuildingDestroyed(at,n,pc)if Logic.GetEntityType(at)==Entities.B_TradePost then Lib.Warehouse.Global:OnTradepostDestroyed(n,at)end end end;function Lib.Warehouse.Global:OnTradepostConstructed(at)local E,F,G=Logic.EntityGetPos(at)local d1,iy=Logic.GetEntitiesInArea(Entities.I_X_TradePostConstructionSite,E,F,100,1)if iy~=0 then local aW=Logic.GetEntityName(iy)local ax=self:GetIndex(aW)if ax~=0 then Logic.SetEntityName(at,self.Warehouses[ax].BuildingName)end end end;function Lib.Warehouse.Global:OnTradepostDestroyed(n,at)local E,F,G=Logic.EntityGetPos(at)local S=Logic.GetEntityOrientation(at)local aW=Logic.GetEntityName(at)local ax=aW and self:GetIndex(aW:sub(1,aW:len()-5))or 0;if ax~=0 then local bk=self.Warehouses[ax]local ar=ReplaceEntity(bk.ScriptName,Entities.I_X_TradePostConstructionSite)for f=1,8 do Logic.InteractiveObjectSetPlayerState(ar,f,1)end end end;function Lib.Warehouse.Global:ControlWarehouse()for f=1,#self.Warehouses do if self.Warehouses[f]then for b8=1,#self.Warehouses[f].Offers do local oU=self.Warehouses[f].Offers[b8]if oU.Active and oU.Refresh>0 then if self.Warehouses[f].Offers[b8].Current<oU.Amount then self.Warehouses[f].Offers[b8].Timer=oU.Timer-1;if oU.Timer==0 then self.Warehouses[f].Offers[b8].Current=oU.Current+1;self.Warehouses[f].Offers[b8].Timer=oU.Refresh end end end end end end;local ii=table.tostring(self.Warehouses)ExecuteLocal([[Lib.Warehouse.Local.Warehouses = %s]],ii)end;function Lib.Warehouse.Local:Initialize()if not self.IsInstalled then Report.WarehouseOfferClicked=CreateReport("Event_WarehouseOfferClicked")Report.WarehouseOfferBought=CreateReport("Event_WarehouseOfferBought")for f=1,8 do self.Inflation.Players[f]={}end;Lib.Warehouse.Global=nil end;self.IsInstalled=true end;function Lib.Warehouse.Local:OnSaveGameLoaded()end;function Lib.Warehouse.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.WarehouseOfferClicked then if GUI.GetPlayerID()==arg[2]then local ax=self:GetIndex(arg[2])if self.Warehouses[ax]then self.Warehouses[ax].Offers[arg[4]].BuyLock=false end end end end;function Lib.Warehouse.Local:GetIndex(C)for f=1,#self.Warehouses do if self.Warehouses[f].ScriptName==C then return f end end;return 0 end;function Lib.Warehouse.Local:GetPrice(n,ao,oS)return math.floor((self.Inflation.Players[n][ao]or 1.0)*oS+0.5)end;function Lib.Warehouse.Local:GetInflation(n,ao)return self.Inflation.Players[n][ao]or 1.0 end;function Lib.Warehouse.Local:GetOfferByID(C,aM)local oU,p1;local ax=self:GetIndex(C)if ax~=0 then for f=#self.Warehouses[ax].Offers,1,-1 do if self.Warehouses[ax].Offers[f].ID==aM then oU=self.Warehouses[ax].Offers[f]p1=f end end end;return oU,p1 end;function Lib.Warehouse.Local:GetActivOffers(C,oY)local c2={}local ax=self:GetIndex(C)if ax~=0 then for f=1,#self.Warehouses[ax].Offers do if(not oY or#c2<6)and self.Warehouses[ax].Offers[f].Active then table.insert(c2,self.Warehouses[ax].Offers[f].ID)end end end;return c2 end;function Lib.Warehouse.Local:GetOfferType(p3)local p0=WarehouseOfferType.Entertainer;if Logic.IsEntityTypeInCategory(p3,EntityCategories.Soldier)==1 then p0=WarehouseOfferType.Mercenary elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.CattlePasture)==1 then p0=WarehouseOfferType.Lifestock elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.SheepPasture)==1 then p0=WarehouseOfferType.Lifestock elseif Logic.IsEntityTypeInCategory(p3,EntityCategories.HeavyWeapon)==1 then p0=WarehouseOfferType.HeavyWeapon end;return p0 end;function Lib.Warehouse.Local:InitTradeButtons(dD)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(1,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(1,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(1,gB,at)end)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(2,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(2,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(2,gB,at)end)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(3,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(3,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(3,gB,at)end)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(4,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(4,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(4,gB,at)end)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(5,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(5,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(5,gB,at)end)AddBuildingButtonByEntity(dD,function(gB,at)Lib.Warehouse.Local:WarehouseButtonAction(6,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonTooltip(6,gB,at)end,function(gB,at)Lib.Warehouse.Local:WarehouseButtonUpdate(6,gB,at)end)end;function Lib.Warehouse.Local:WarehouseButtonAction(kM,gB,at)local q=GUI.GetPlayerID()local aW=Logic.GetEntityName(at)local cc,cS=string.find(aW,"_Post")aW=string.sub(aW,1,cc-1)local ax=self:GetIndex(aW)if ax==0 then return end;local c2=self:GetActivOffers(aW)local bk,p1=self:GetOfferByID(aW,c2[kM])if not bk then return end;if bk.BuyLock then return end;local pd=self:GetPrice(q,bk.GoodType,bk.BasePrice)local oW=self:GetInflation(q,bk.GoodType)if GetPlayerGoodsInSettlement(bk.PaymentType,q)<pd then return end;if bk.OfferType==WarehouseOfferType.Mercenary then local p9=Logic.GetCurrentSoldierLimit(q)local pa=Logic.GetCurrentSoldierCount(q)if GetBattalionSizeBySoldierType(bk.GoodType)>p9-pa then AddMessage("Feedback_TextLines/TextLine_SoldierLimitReached")return end end;self.Warehouses[ax].Offers[p1].BuyLock=true;SendReportToGlobal(Report.WarehouseOfferClicked,q,aW,oW,p1,bk.GoodType,bk.GoodAmount,bk.PaymentType,bk.BasePrice)end;function Lib.Warehouse.Local:WarehouseButtonTooltip(kM,gB,at)local q=GUI.GetPlayerID()local aW=Logic.GetEntityName(at)local cc,cS=string.find(aW,"_Post")aW=string.sub(aW,1,cc-1)if XGUIEng.IsButtonDisabled(gB)==1 then SetTooltipCosts(ConvertPlaceholders(Localize(Lib.Warehouse.Text.OfferTitle[1])),"")return end;local ax=self:GetIndex(aW)if ax==0 then return end;local c2=self:GetActivOffers(aW)local bk,p1=self:GetOfferByID(aW,c2[kM])if not bk then return end;local pd=self:GetPrice(q,bk.GoodType,bk.BasePrice)local pe=true;local pf=""local pg=""local kQ=Logic.GetGoodTypeName(bk.GoodType)local cN=Logic.GetEntityTypeName(bk.GoodType)if kQ~=nil and kQ~=""then pf=GetStringText("UI_ObjectNames/"..kQ)pg=GetStringText("UI_ObjectDescription/"..kQ)else pf=GetStringText("UI_ObjectNames/HireEntertainer")pg=GetStringText("UI_ObjectDescription/HireEntertainer")if bk.OfferType==WarehouseOfferType.Mercenary then pf=GetStringText("UI_ObjectNames/HireMercenaries")pg=GetStringText("UI_ObjectDescription/HireMercenaries")elseif bk.OfferType==WarehouseOfferType.Lifestock then pf=GetStringText("UI_ObjectNames/G_Cow")pg=GetStringText("UI_ObjectDescription/G_Cow")elseif bk.OfferType==WarehouseOfferType.Lifestock then pf=GetStringText("UI_ObjectNames/G_Sheep")pg=GetStringText("UI_ObjectDescription/G_Sheep")elseif bk.OfferType==WarehouseOfferType.HeavyWeapon then pf=GetStringText("Names/"..cN)local _=GetSiegeengineTypeByCartType(bk.GoodType)local ph=Logic.GetEntityTypeName(_)pg=GetStringText("UI_ObjectDescription/Abilities_"..ph)end end;local pi=""if bk.Amount>1 then pi=string.format(" (%d/%d)",bk.Current,bk.Amount)end;local pj=""if KeyOf(bk.GoodType,Goods)~=nil then pj=string.format(Localize(Lib.Warehouse.Text.OfferTitle[2]),bk.GoodAmount,pf,pi)elseif KeyOf(bk.GoodType,Entities)~=nil then if Logic.IsEntityTypeInCategory(bk.GoodType,EntityCategories.Military)==1 then pj=string.format(Localize(Lib.Warehouse.Text.OfferTitle[4]),pf,pi)elseif Logic.IsEntityTypeInCategory(bk.GoodType,EntityCategories.SiegeEngine)==1 then pj=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),pf,pi)elseif Logic.IsEntityTypeInCategory(bk.GoodType,EntityCategories.CattlePasture)==1 or Logic.IsEntityTypeInCategory(bk.GoodType,EntityCategories.SheepPasture)==1 then pj=string.format(Localize(Lib.Warehouse.Text.OfferTitle[5]),pf,pi)else pj=string.format(Localize(Lib.Warehouse.Text.OfferTitle[3]),pf)end end;SetTooltipCosts(pj,pg,nil,{bk.PaymentType,pd},pe)end;function Lib.Warehouse.Local:WarehouseButtonUpdate(kM,gB,at)local aW=Logic.GetEntityName(at)local cc,cS=string.find(aW,"_Post")aW=string.sub(aW,1,cc-1)local ax=self:GetIndex(aW)if ax==0 then XGUIEng.ShowWidget(gB,0)return end;local c2=self:GetActivOffers(aW)local bk,p1=self:GetOfferByID(aW,c2[kM])if not bk or not bk.Active then XGUIEng.ShowWidget(gB,0)return end;if not bk.BuyLock and bk.Current>0 then XGUIEng.DisableButton(gB,0)else XGUIEng.DisableButton(gB,1)end;local lM=bk.GoodType;local kL=g_TexturePositions.Goods[lM]or g_TexturePositions.Entities[lM]ChangeIcon(gB,kL)end;RegisterModule(Lib.Warehouse.Name)Lib.Register("module/mode/SettlementSurvival_Text")Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Text={Alarms={AnimalDiedFromIllness={de="{scarlet}Eure Nutztiere sterben an Krankheiten!",en="{scarlet}Your farm animals succumb to the plague!",fr="{scarlet}Vos animaux de ferme succombent à la peste!"},BuildingBurning={de="{scarlet}Brände wüten in Eurer Stadt!",en="{scarlet}Fires are raging in your city!",fr="{scarlet}Les incendies font rage dans votre ville !"},SettlerTemperature={de="{scarlet}Eure Siedler haben kein Feuerholz und frieren!",en="{scarlet}Your settlers lack of firewood to warm themselves!",fr="{scarlet}Vos colons manquent de bois de chauffage pour se réchauffer!"},SettlerNegligence={de="{scarlet}Eure Siedler verwahrlosen und werden krank!",en="{scarlet}Your settlers are neglected and getting sick!",fr="{scarlet}Vos colons sont négligés et tombent malades!"},SettlerDiedFromHunger={de="{scarlet}Eure Siedler haben nichts zu essen und verhungern!",en="{scarlet}Your settlers are starving to death!",fr="{scarlet}Vos colons meurent de faim!"},SettlerDiedFromIllness={de="{scarlet}Eure Siedler sterben an Krankheiten!",en="{scarlet}Your settlers succumb to the plague!",fr="{scarlet}Vos colons succombent à la peste!"}},Messages={BuildingMourning={de="Keine Baumaßnahmen möglich, solange Siedler trauern.",en="No construction work possible as long as settlers mourn.",fr="Aucun travail de construction possible tant que les colons pleurent."}}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/mode/SettlementSurvival_API")function SettlementSurvivalActivate(e2)local e3=e2==true;Lib.SettlementSurvival.Global.IsActive=e3;ExecuteLocal([[Lib.SettlementSurvival.Local.IsActive = %s]],tostring(e3))end;API.SettlementSurvivalActivate=SettlementSurvivalActivate;function AnimalPlagueActivate(e2)Lib.SettlementSurvival.Global.AnimalPlague.IsActive=e2==true end;API.AnimalPlagueActivate=AnimalPlagueActivate;function AnimalPlagueActivateForAI(e2)Lib.SettlementSurvival.Global.AnimalPlague.AffectAI=e2==true end;API.AnimalPlagueActivateForAI=AnimalPlagueActivateForAI;function AnimalPlagueSetDeathInterval(pk)Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer = %d]],pk)end;API.AnimalPlagueSetDeathInterval=AnimalPlagueSetDeathInterval;function AnimalPlagueSetDeathChance(pl)Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance = %d]],pl)end;API.AnimalPlagueSetDeathChance=AnimalPlagueSetDeathChance;function AnimalPlagueSetInfectionInterval(pk)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer = %d]],pk)end;API.AnimalPlagueSetInfectionInterval=AnimalPlagueSetInfectionInterval;function AnimalPlagueSetInfectionChance(pl)Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance = %d]],pl)end;API.AnimalPlagueSetInfectionChance=AnimalPlagueSetInfectionChance;function HotWeatherActivate(e2)Lib.SettlementSurvival.Global.HotWeather.IsActive=e2==true end;API.HotWeatherActivate=HotWeatherActivate;function HotWeatherActivateForAI(e2)Lib.SettlementSurvival.Global.HotWeather.AffectAI=e2==true end;API.HotWeatherActivateForAI=HotWeatherActivateForAI;function HotWeatherSetTemperature(pm)Lib.SettlementSurvival.Shared.HotWeather.Temperature=pm;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.Temperature = %d]],pm)end;API.HotWeatherSetTemperature=HotWeatherSetTemperature;function HotWeatherSetIgnitionChance(pl)Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance = %d]],pl)end;API.HotWeatherSetIgnitionChance=HotWeatherSetIgnitionChance;function ColdWeatherActivate(e2)Lib.SettlementSurvival.Global.ColdWeather.IsActive=e2==true end;API.ColdWeatherActivate=ColdWeatherActivate;function ColdWeatherActivateForAI(e2)Lib.SettlementSurvival.Global.ColdWeather.AffectAI=e2==true end;API.ColdWeatherActivateForAI=ColdWeatherActivateForAI;function ColdWeatherSetTemperature(pm)Lib.SettlementSurvival.Shared.ColdWeather.Temperature=pm;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.Temperature = %d]],pm)end;API.ColdWeatherSetTemperature=ColdWeatherSetTemperature;function ColdWeatherSetConsumptionInterval(pk)Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer = %d]],pk)end;API.ColdWeatherSetConsumptionInterval=ColdWeatherSetConsumptionInterval;function ColdWeatherSetInfectionChance(pl)Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance = %d]],pl)end;API.ColdWeatherSetInfectionChance=ColdWeatherSetInfectionChance;function FamineActivate(e2)Lib.SettlementSurvival.Global.Famine.IsActive=e2==true end;API.FamineActivate=FamineActivate;function FamineActivateForAI(e2)Lib.SettlementSurvival.Global.Famine.AffectAI=e2==true end;API.FamineActivateForAI=FamineActivateForAI;function FamineSetDeathInterval(pk)Lib.SettlementSurvival.Shared.Famine.DeathTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathTimer = %d]],pk)end;API.FamineSetDeathInterval=FamineSetDeathInterval;function FamineSetDeathChance(pl)Lib.SettlementSurvival.Shared.Famine.DeathChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.Famine.DeathChance = %d]],pl)end;API.FamineSetDeathChance=FamineSetDeathChance;function NegligenceActivate(e2)Lib.SettlementSurvival.Global.Negligence.IsActive=e2==true end;API.NegligenceActivate=NegligenceActivate;function NegligenceActivateForAI(e2)Lib.SettlementSurvival.Global.Negligence.AffectAI=e2==true end;API.NegligenceActivateForAI=NegligenceActivateForAI;function NegligenceSetInfectionInterval(pk)Lib.SettlementSurvival.Shared.Negligence.InfectionTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionTimer = %d]],pk)end;API.NegligenceSetInfectionInterval=NegligenceSetInfectionInterval;function NegligenceSetInfectionChance(pl)Lib.SettlementSurvival.Shared.Negligence.InfectionChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.Negligence.InfectionChance = %d]],pl)end;API.NegligenceSetInfectionChance=NegligenceSetInfectionChance;function PlagueActivate(e2)Lib.SettlementSurvival.Global.Plague.IsActive=e2==true end;API.PlagueActivate=PlagueActivate;function PlagueActivateForAI(e2)Lib.SettlementSurvival.Global.Plague.AffectAI=e2==true end;API.PlagueActivateForAI=PlagueActivateForAI;function PlagueSetDeathInterval(pk)Lib.SettlementSurvival.Shared.Plague.DeathTimer=pk;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathTimer = %d]],pk)end;API.PlagueSetDeathInterval=PlagueSetDeathInterval;function PlagueSetDeathChance(pl)Lib.SettlementSurvival.Shared.Plague.DeathChance=pl;ExecuteLocal([[Lib.SettlementSurvival.Shared.Plague.DeathChance = %d]],pl)end;API.PlagueSetDeathChance=PlagueSetDeathChance;function PredatorBlockClaimActivate(e2)Lib.SettlementSurvival.Global.Misc.PredatorBlockClaim=e2==true end;API.PredatorBlockClaimActivate=PredatorBlockClaimActivate;function BanditsBlockClaimActivate(e2)Lib.SettlementSurvival.Global.Misc.BanditsBlockClaim=e2==true end;API.BanditsBlockClaimActivate=BanditsBlockClaimActivate;function ClothesForOuterRimActivate(e2)Lib.SettlementSurvival.Global.Misc.ClothesForOuterRim=e2==true;ExecuteLocal([[Lib.SettlementSurvival.Local.Misc.ClothesForOuterRim = %s]],tostring(e2==true))Lib.SettlementSurvival.Global:UpdateClothesStateForOuterRim()end;API.ClothesForOuterRimActivate=ClothesForOuterRimActivate;function BaseConsumptionActivate(e2)local e3=e2==true;Lib.SettlementSurvival.Global.Consume.IsActive=e3;ExecuteLocal([[Lib.SettlementSurvival.Local.Consume.IsActive = %s]],tostring(e3))end;API.BaseConsumptionActivate=BaseConsumptionActivate;function BaseConsumptionActivateForAI(e2)local e3=e2==true;Lib.SettlementSurvival.Global.Consume.AffectAI=e3;ExecuteLocal([[Lib.SettlementSurvival.Local.Consume.AffectAI = %s]],tostring(e3))end;API.BaseConsumptionActivateForAI=BaseConsumptionActivateForAI;Lib.Register("comfort/GetPredatorSpawnerTypes")CONST_PREDATOR_SPAWNER_TYPES={["S_Bear"]=true,["S_Bear_Black"]=true,["S_LionPack_NA"]=true,["S_PolarBear_NE"]=true,["S_WolfPack"]=true,["S_BearBlack"]=true,["S_TigerPack_AS"]=true}function GetPredatorSpawnerTypes()local pn={}for m,s in pairs(CONST_PREDATOR_SPAWNER_TYPES)do if m~=nil then pn[#pn+1]=Entities[m]end end;return pn end;Lib.SettlementSurvival=Lib.SettlementSurvival or{}Lib.SettlementSurvival.Name="SettlementSurvival"Lib.SettlementSurvival.Global={IsActive=false,AnimalPlague={IsActive=false,AffectAI=false},Famine={IsActive=true,AffectAI=false},ColdWeather={IsActive=true,AffectAI=false},HotWeather={IsActive=true,AffectAI=false},Negligence={IsActive=true,AffectAI=false},Plague={IsActive=true,AffectAI=false},Consume={BuildingData={},IsActive=true,AffectAI=false},Misc={PredatorBlockClaim=false,BanditsBlockClaim=false,ClothesForOuterRim=false},SuspendedSettlers={}}Lib.SettlementSurvival.Local={IsActive=true,Consume={IsActive=true,AffectAI=false},Misc={ClothesForOuterRim=false},SuspendedSettlers={}}Lib.SettlementSurvival.Shared={AnimalPlague={InfectionChance=4,InfectionTimer=90,DeathChance=4,DeathTimer=180},ColdWeather={ConsumptionFactor=0.075,ConsumptionTimer=30,Temperature=5,InfectionChance=12},HotWeather={IgnitionChance=5,IgnitionTimer=90,Temperature=30},Famine={DeathChance=6,DeathTimer=30},Negligence={InfectionChance=6,InfectionTimer=90},Plague={DeathChance=9,DeathTimer=90},Consume={FoodFactor=0.0012,ClothesFactor=0.0006,BeerFactor=0.0012,HygieneFactor=0.0006,Progression=35000},SuspendedSettlers={MourningTime=5*60}}Lib.Require("comfort/GetPredatorSpawnerTypes")Lib.Require("comfort/GetHealth")Lib.Require("comfort/SetHealth")Lib.Require("core/Core")Lib.Require("module/city/Construction")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/mode/SettlementSurvival_API")Lib.Require("module/mode/SettlementSurvival_Text")Lib.Register("module/mode/SettlementSurvival")function Lib.SettlementSurvival.Global:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")for q=1,8 do self.AnimalPlague[q]={}self.ColdWeather[q]={Consumption=0}self.Famine[q]={}self.Negligence[q]={}self.Plague[q]={}self.Consume[q]={Buildings={}}self.SuspendedSettlers[q]={}end;RequestJobByEventType(Events.LOGIC_EVENT_EVERY_TURN,function()local po=Logic.GetCurrentTurn()Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(po)Lib.SettlementSurvival.Global:ControlSettlersBaseConsumption(po)Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(po)Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(po)Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(po)Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(po)Lib.SettlementSurvival.Global:ControlAnimalInfections(po)Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(po)Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(po)Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(po)end)self:OverwriteNeeds()self:InitLimitations()Lib.SettlementSurvival.Local=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Global:OnSaveGameLoaded()self:RestoreSettlerSuspension()end;function Lib.SettlementSurvival.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true;for q=1,8 do CustomRuleConstructBuilding(q,"SettlementSurvival_Global_ClaimTerritoryPredatorRule")CustomRuleConstructBuilding(q,"SettlementSurvival_Global_ClaimTerritoryBanditRule")end elseif aM==Report.FireAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aM==Report.FireAlarmActivated_Internal then self:RestoreSettlerSuspension()elseif aM==Report.RepairAlarmDeactivated_Internal then self:RestoreSettlerSuspension()elseif aM==Report.ReRepairAlarmActivated_Internal then self:RestoreSettlerSuspension()end end;function Lib.SettlementSurvival.Global:InitLimitations()SettlementSurvival_Global_ClaimTerritoryPredatorRule=function(n,i,hQ,hR)if Lib.SettlementSurvival.Global.Misc.PredatorBlockClaim then if Logic.IsEntityTypeInCategory(i,EntityCategories.Outpost)==1 then local pp=Logic.GetTerritoryAtPosition(hQ,hR)for s,pq in pairs(GetPredatorSpawnerTypes())do for s,pr in pairs(Logic.GetEntitiesOfType(pq))do local ps=GetTerritoryUnderEntity(pr)if pp==ps then for s,ar in pairs({Logic.GetSpawnedEntities(pr)})do local q=Logic.EntityGetPlayer(ar)if q==0 or q~=n and GetDiplomacyState(q,n)==-2 then return false end end end end end end end;return true end;SettlementSurvival_Global_ClaimTerritoryBanditRule=function(n,i,hQ,hR)if Lib.SettlementSurvival.Global.Misc.BanditsBlockClaim then if Logic.IsEntityTypeInCategory(i,EntityCategories.Outpost)==1 then local a1=Logic.GetTerritoryAtPosition(hQ,hR)for q=1,8 do if q~=n and GetDiplomacyState(q,n)==-2 then local pt={Logic.GetEntitiesOfCategoryInTerritory(a1,q,EntityCategories.BanditsCamp,0)}if#pt>0 then return false end end end end end;return true end end;function Lib.SettlementSurvival.Global:ControlSettlersBaseConsumption(pu)local q=pu%10;if self.IsActive and self.Consume.IsActive and q>=1 and q<=8 then if self.Consume.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local pv={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}local pw={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local px=Array_Append(pv,pw)for f=1,#px do local kg=px[f]if not self.Consume[q].Buildings[kg]then self.Consume[q].Buildings[kg]={0.8,0.8,0.8,0.8}end;local py=Logic.IsBuildingStopped(kg)==true;local pz=Logic.IsEntityInCategory(kg,EntityCategories.OuterRimBuilding)==1;local pA=self:GetEffectiveWorkerInBuilding(kg)local pB=self:CalculateDistanceFactor(kg)if Logic.IsNeedActive(kg,Needs.Nutrition)then local nc=Lib.SettlementSurvival.Shared.Consume.FoodFactor;nc=py and nc*0.50 or nc;nc=pz and nc*0.50 or nc;nc=nc*pB;local pC=self.Consume[q].Buildings[kg][1]local pD=nc*pA;if self:IsAnyOtherNeedCritical(kg,Needs.Nutrition)then pD=0 end;local kw=math.max(pC-pD,0)local pE=Logic.GetNeedState(kg,Needs.Nutrition)if pE-kw>0.1 then kw=pE>0.8 and pE or 0.8 end;self.Consume[q].Buildings[kg][1]=kw;Logic.SetNeedState(kg,Needs.Nutrition,kw)end;if Logic.IsNeedActive(kg,Needs.Clothes)then local nc=Lib.SettlementSurvival.Shared.Consume.ClothesFactor;nc=py and nc*0.50 or nc;nc=pz and nc*0.25 or nc;nc=nc*pB;local pC=self.Consume[q].Buildings[kg][2]local pD=nc*pA;if self:IsAnyOtherNeedCritical(kg,Needs.Clothes)then pD=0 end;local kw=math.max(pC-pD,0)local pE=Logic.GetNeedState(kg,Needs.Clothes)if pE-kw>0.1 then kw=pE>0.8 and pE or 0.8 end;self.Consume[q].Buildings[kg][2]=kw;Logic.SetNeedState(kg,Needs.Clothes,kw)end;if Logic.IsNeedActive(kg,Needs.Hygiene)then local nc=Lib.SettlementSurvival.Shared.Consume.HygieneFactor;nc=py and nc*0.50 or nc;nc=pz and nc*0.25 or nc;nc=nc*pB;local pC=self.Consume[q].Buildings[kg][3]local pD=nc*pA;if self:IsAnyOtherNeedCritical(kg,Needs.Hygiene)then pD=0 end;local kw=math.max(pC-pD,0)local pE=Logic.GetNeedState(kg,Needs.Hygiene)if pE-kw>0.1 then kw=pE>0.8 and pE or 0.8 end;self.Consume[q].Buildings[kg][3]=kw;Logic.SetNeedState(kg,Needs.Hygiene,kw)end;if Logic.IsNeedActive(kg,Needs.Entertainment)then local nc=Lib.SettlementSurvival.Shared.Consume.BeerFactor;nc=py and nc*0.50 or nc;nc=pz and nc*0.25 or nc;nc=nc*pB;local pC=self.Consume[q].Buildings[kg][4]local pD=nc*pA;if self:IsAnyOtherNeedCritical(kg,Needs.Entertainment)then pD=0 end;local kw=math.max(pC-pD,0)local pE=Logic.GetNeedState(kg,Needs.Entertainment)if pE-kw>0.1 then kw=pE>0.8 and pE or 0.8 end;self.Consume[q].Buildings[kg][4]=kw;Logic.SetNeedState(kg,Needs.Entertainment,kw)end;if not self.Consume[q].Buildings[kg].Factor then self.Consume[q].Buildings[kg].Factor=pB end end end end end;function Lib.SettlementSurvival.Global:IsAnyOtherNeedCritical(hL,pF)local pE,pG;pE=Logic.GetNeedState(hL,Needs.Medicine)pG=Logic.GetNeedCriticalThreshold(hL,Needs.Medicine)if pF~=Needs.Medicine and pE<=pG then return true end;pE=Logic.GetNeedState(hL,Needs.Nutrition)pG=Logic.GetNeedCriticalThreshold(hL,Needs.Nutrition)if pF~=Needs.Nutrition and pE<=pG then return true end;pE=Logic.GetNeedState(hL,Needs.Clothes)pG=Logic.GetNeedCriticalThreshold(hL,Needs.Clothes)if pF~=Needs.Clothes and pE<=pG then return true end;pE=Logic.GetNeedState(hL,Needs.Hygiene)pG=Logic.GetNeedCriticalThreshold(hL,Needs.Hygiene)if pF~=Needs.Hygiene and pE<=pG then return true end;pE=Logic.GetNeedState(hL,Needs.Entertainment)pG=Logic.GetNeedCriticalThreshold(hL,Needs.Entertainment)if pF~=Needs.Entertainment and pE<=pG then return true end;return false end;function Lib.SettlementSurvival.Global:CalculateDistanceFactor(hL)local q=Logic.EntityGetPlayer(hL)local f7=Logic.GetStoreHouse(q)if f7==0 then return 1 end;if self.Consume[q].Buildings[hL]and self.Consume[q].Buildings[hL].Factor then return self.Consume[q].Buildings[hL].Factor end;local ah=GetDistance(hL,f7)local pH=Lib.SettlementSurvival.Shared.Consume.Progression;if ah>pH then return 2^(-1*(ah-pH)/pH)end;return 1 end;function Lib.SettlementSurvival.Global:ControlAnimalsSuccumToPlague(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.AnimalPlague.IsActive and q>=1 and q<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local pI={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.SheepPasture)}local pJ={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CattlePasture)}local pK=Array_Append(pI,pJ)for f=1,#pK do if not self.AnimalPlague[q][pK[f]]and Logic.IsFarmAnimalInPasture(pK[f])and Logic.IsFarmAnimalIll(pK[f])then self.AnimalPlague[q][pK[f]]={iO}end end;for pL,h in pairs(self.AnimalPlague[q])do if not IsExisting(pL)or not Logic.IsFarmAnimalInPasture(pL)or not Logic.IsFarmAnimalIll(pL)then self.AnimalPlague[q][pL]=nil end end;local pM=Lib.SettlementSurvival.Shared.AnimalPlague.DeathTimer;local pN=false;if iO%pM==0 then for pL,s in pairs(self.AnimalPlague[q])do local pO=Lib.SettlementSurvival.Shared.AnimalPlague.DeathChance;if GetPlayerResources(Goods.G_Herb,q)>0 then AddGood(Goods.G_Herb,-1,q)pO=pO/2 end;if pO>=1 and math.random(1,100)<=math.min(pO,100)then SendReport(Report.AnimalDiedFromIllness,pL)SendReportToLocal(Report.AnimalDiedFromIllness,pL)SetHealth(pL,0)pN=true end end end;if pN then self:Print(q,Lib.SettlementSurvival.Text.Alarms.AnimalDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:ControlAnimalCorpsesDecay(pu)if not Lib.LifestockSystem or not Lib.LifestockSystem.Global.IsInstalled then if Logic.GetTime()%10==0 then local pP=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(pP)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_CattlePasture,E,F,900,1)if IsExisting(pQ)then local cr=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cr-1)end end;local pR=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(pR)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_SheepPasture,E,F,900,1)if IsExisting(pQ)then local cr=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cr-1)end end end end end;function Lib.SettlementSurvival.Global:ControlAnimalInfections(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.AnimalPlague.IsActive and q>=1 and q<=8 then if self.AnimalPlague.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local pS=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionTimer;if iO%pS==0 then local pI={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.SheepPasture)}local pJ={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CattlePasture)}local pK=Array_Append(pI,pJ)local pO=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;for f=#pK,1,-1 do if Logic.IsFarmAnimalInPasture(pK[f])and Logic.TechnologyGetState(q,Technologies.R_Medicine)==3 and not Logic.IsFarmAnimalIll(pK[f])then if math.random(1,100)<=pO then Logic.MakeFarmAnimalIll(pK[f])end end end end end end end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringHotWeather(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.HotWeather.IsActive and q>=1 and q<=8 then if self.HotWeather.AffectAI or Logic.PlayerGetIsHumanFlag(q)then if Logic.GetCurrentTemperature()>=Lib.SettlementSurvival.Shared.HotWeather.Temperature then local pT=Lib.SettlementSurvival.Shared.HotWeather.IgnitionTimer;if iO%pT==0 then local pv={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}local pw={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local px=Array_Append(pv,pw)local pU=false;for f=1,#px do if Logic.IsConstructionComplete(px[f])==1 and GetHealth(px[f])>=100 and not Logic.IsBurning(px[f])then local pV=Lib.SettlementSurvival.Shared.HotWeather.IgnitionChance*10;if self:IsWaterSupplierNear(q,px[f],2500)then pV=1 end;if pV>0 and math.random(1,1000)<=pV then Logic.DEBUG_SetBuildingOnFire(px[f],10)pU=true end end end;if pU then self:Print(q,Lib.SettlementSurvival.Text.Alarms.BuildingBurning)end end end end end end;function Lib.SettlementSurvival.Global:IsWaterSupplierNear(n,hL,ic)local E,F,G=Logic.EntityGetPos(hL)if Logic.IsPlayerEntityOfCategoryInArea(n,E,F,ic,"G_Water_Supplier")==1 then return true end;return false end;function Lib.SettlementSurvival.Global:ControlBuildingsDuringColdWeather(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.ColdWeather.IsActive and q>=1 and q<=8 then if self.ColdWeather.AffectAI or Logic.PlayerGetIsHumanFlag(q)then if Logic.GetCurrentTemperature()<=Lib.SettlementSurvival.Shared.ColdWeather.Temperature then local pW=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionTimer;if iO%pW==0 then local pX=0;local pv={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}local pw={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CityBuilding)}local px=Array_Append(pv,pw)for f=1,#px do if Logic.IsConstructionComplete(px[f])==1 then local pA=self:GetEffectiveWorkerInBuilding(px[f])if not Logic.IsNeedActive(px[f],Needs.Clothes)or Logic.GetNeedState(px[f],Needs.Clothes)>=0.4 then pA=pA*0.5 end;pX=pX+pA end end;local pY=Lib.SettlementSurvival.Shared.ColdWeather.ConsumptionFactor*pX;local pZ=0;local p_=GetPlayerResources(Goods.G_Wood,q)self.ColdWeather[q].Consumption=self.ColdWeather[q].Consumption+pY;if self.ColdWeather[q].Consumption>=1 then local q0=math.floor(self.ColdWeather[q].Consumption)AddGood(Goods.G_Wood,-1*math.min(q0,p_),q)self.ColdWeather[q].Consumption=self.ColdWeather[q].Consumption-q0;pZ=q0;ExecuteLocal([[if GUI.GetPlayerID() == %d then
                                  GUI_FeedbackWidgets.GoldAdd(%d, nil, {14, 5, 0}, {1, 9, 0})
                              end]],q,-1*q0)end;if pZ>p_ then local q1=Lib.SettlementSurvival.Shared.ColdWeather.InfectionChance;if Logic.TechnologyGetState(q,Technologies.R_Medicine)==3 then for f=1,#px do if math.random(1,100)<=q1 then Logic.MakeBuildingIll(px[f])end end end;self:Print(q,Lib.SettlementSurvival.Text.Alarms.SettlerTemperature)end end end end end end;function Lib.SettlementSurvival.Global:ControlSettlersBecomeIllDueToNegligence(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.Negligence.IsActive and q>=1 and q<=8 then if self.Negligence.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local q2={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Spouse)}local q3={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Worker)}q3=Array_Append(q2,q3)for f=1,#q3 do if not self.Negligence[q][q3[f]]and Logic.GetEntityType(q3[f])~=Entities.U_Pharmacist and(self:IsSettlerDirty(q3[f])or self:IsSettlerBored(q3[f]))and not self:IsSettlerSuspended(q3[f])and not Logic.IsIll(q3[f])then self.Negligence[q][q3[f]]={iO}end end;for q4,h in pairs(self.Negligence[q])do if not self:IsSettlerBored(q4)and not self:IsSettlerDirty(q4)then self.Negligence[q][q4]=nil end end;local pS=Lib.SettlementSurvival.Shared.Negligence.InfectionTimer;local pN=false;if iO%pS==0 then for q4,h in pairs(self.Negligence[q])do if h[1]+pS<iO then local pO=Lib.SettlementSurvival.Shared.AnimalPlague.InfectionChance;if math.random(1,100)<=pO then if Logic.TechnologyGetState(q,Technologies.R_Medicine)==3 and not self:IsSettlerCarryingHygiene(q4)and not self:IsSettlerCarryingBeer(q4)and not self:IsSettlerSuspended(q4)and self:IsSettlerStriking(q4)then Logic.MakeSettlerIll(q4)pN=true end end end end end;if pN then self:Print(q,Lib.SettlementSurvival.Text.Alarms.SettlerNegligence)end end end end;function Lib.SettlementSurvival.Global:IsSettlerDirty(l)local w=GetID(l)local kg=Logic.GetSettlersWorkBuilding(w)return Logic.IsNeedCritical(kg,Needs.Hygiene)end;function Lib.SettlementSurvival.Global:IsSettlerBored(l)local w=GetID(l)local kg=Logic.GetSettlersWorkBuilding(w)return Logic.IsNeedCritical(kg,Needs.Entertainment)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingHygiene(l)local w=GetID(l)local q5=Logic.GetCurrentTaskList(w)return q5 and q5:find("_HYGIENE")end;function Lib.SettlementSurvival.Global:IsSettlerCarryingBeer(l)local w=GetID(l)local q5=Logic.GetCurrentTaskList(w)return q5 and q5:find("_ENTERTAINMENT")end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToFamine(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.Famine.IsActive and q>=1 and q<=8 then if self.Famine.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local q2={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Spouse)}local q3={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Worker)}q3=Array_Append(q2,q3)for f=1,#q3 do if not self.Famine[q][q3[f]]and self:IsSettlerHungry(q3[f])and not self:IsSettlerSuspended(q3[f])then self.Famine[q][q3[f]]={iO}end end;for q4,h in pairs(self.Famine[q])do if not IsExisting(q4)or not self:IsSettlerHungry(q4)then self.Famine[q][q4]=nil end end;local pM=Lib.SettlementSurvival.Shared.Famine.DeathTimer;local pN=false;if iO%pM==0 then for q4,h in pairs(self.Famine[q])do if not self:IsSettlerCarryingFood(q4)and not self:IsSettlerSuspended(q4)and self:IsSettlerStriking(q4)then local pO=Lib.SettlementSurvival.Shared.Famine.DeathChance;if pO>=1 and math.random(1,100)<=math.ceil(pO)then self:SuspendSettler(q4,true)SendReport(Report.SettlerDiedFromStarvation,q4)SendReportToLocal(Report.SettlerDiedFromStarvation,q4)pN=true end end end end;if pN then self:Print(q,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromHunger)end end end end;function Lib.SettlementSurvival.Global:IsSettlerHungry(l)local w=GetID(l)local kg=Logic.GetSettlersWorkBuilding(w)return Logic.IsNeedCritical(kg,Needs.Nutrition)end;function Lib.SettlementSurvival.Global:IsSettlerCarryingFood(l)local w=GetID(l)local q5=Logic.GetCurrentTaskList(w)return q5 and(q5:find("_NUTRITION")or q5:find("_FOOD"))end;function Lib.SettlementSurvival.Global:ControlSettlersSuccumToPlague(pu)local iO=math.floor(Logic.GetTime())local q=pu%10;if self.IsActive and self.Plague.IsActive and q>=1 and q<=8 then if self.Plague.AffectAI or Logic.PlayerGetIsHumanFlag(q)then local q2={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Spouse)}local q3={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Worker)}q3=Array_Append(q2,q3)for f=1,#q3 do if not self.Plague[q][q3[f]]and Logic.GetEntityType(q3[f])~=Entities.U_Pharmacist and Logic.IsIll(q3[f])and not self:IsSettlerSuspended(q3[f])then self.Plague[q][q3[f]]={iO}end end;for q4,h in pairs(self.Plague[q])do if not IsExisting(q4)or not Logic.IsIll(q4)then self.Plague[q][q4]=nil end end;local pM=Lib.SettlementSurvival.Shared.Plague.DeathTimer;local pN=false;if iO%pM==0 then for q4,h in pairs(self.Plague[q])do if not self:IsSettlerCarryingMedicine(q4)and not self:IsSettlerSuspended(q4)and self:IsSettlerStriking(q4)then local pO=Lib.SettlementSurvival.Shared.Plague.DeathChance;if pO>=1 and math.random(1,100)<=math.ceil(pO)then self:SuspendSettler(q4,true)SendReport(Report.SettlerDiedFromIllness,q4)SendReportToLocal(Report.SettlerDiedFromIllness,q4)pN=true end end end end;if pN then self:Print(q,Lib.SettlementSurvival.Text.Alarms.SettlerDiedFromIllness)end end end end;function Lib.SettlementSurvival.Global:IsSettlerCarryingMedicine(l)local w=GetID(l)local q5=Logic.GetCurrentTaskList(w)return q5 and q5:find("_MEDICINE")end;function Lib.SettlementSurvival.Global:ResumeSettler(l)local w=GetID(l)local q=Logic.EntityGetPlayer(w)local cq=Logic.GetStoreHouse(q)if cq~=0 then Logic.SetTaskList(w,TaskLists.TL_WAIT_THEN_WALK)Logic.SetVisible(w,true)if self.SuspendedSettlers[q][w]then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",q,w)self.SuspendedSettlers[q][w]=nil end end end;function Lib.SettlementSurvival.Global:SuspendSettler(l,q6)local w=GetID(l)local q=Logic.EntityGetPlayer(w)local cq=Logic.GetStoreHouse(q)if cq~=0 then local kg=Logic.GetSettlersWorkBuilding(w)local q7={Logic.GetWorkersAndSpousesForBuilding(kg)}local q8=false;for f=1,#q7 do if q7[f]>0 and not self:IsSettlerSuspended(q7[f])then q8=true;break end end;if q8==false then Logic.SetNeedState(w,Needs.Nutrition,1.0)Logic.SetNeedState(w,Needs.Entertainment,1.0)Logic.SetNeedState(w,Needs.Clothes,1.0)Logic.SetNeedState(w,Needs.Hygiene,1.0)Logic.SetNeedState(w,Needs.Medicine,1.0)end;local E,F,G=Logic.EntityGetPos(cq)Logic.DEBUG_SetSettlerPosition(w,E,F)Logic.SetVisible(w,false)Logic.SetTaskList(w,TaskLists.TL_NPC_IDLE)if not self.SuspendedSettlers[q][w]then local q9=q6 and Logic.GetTime()or-1;ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = {%d}",q,w,q9)self.SuspendedSettlers[q][w]={q9}end end end;function Lib.SettlementSurvival.Global:IsSettlerSuspended(l)local w=GetID(l)local q=Logic.EntityGetPlayer(w)return self.SuspendedSettlers[q]and self.SuspendedSettlers[q][w]~=nil end;function Lib.SettlementSurvival.Global:HasSuspendedInhabitants(l)local kg=GetID(l)local q7={Logic.GetWorkersAndSpousesForBuilding(kg)}for f=1,#q7 do if q7[f]>0 and self:IsSettlerSuspended(q7[f])then return true end end;return false end;function Lib.SettlementSurvival.Global:GetEffectiveWorkerInBuilding(l)local qa=0;local kg=GetID(l)local qb=Logic.GetUpgradeLevel(kg)+1;for s,q4 in pairs({Logic.GetWorkersForBuilding(kg)})do if q4>0 and not self:IsSettlerSuspended(q4)then qa=qa+1 end end;return math.min(qa,qb)end;function Lib.SettlementSurvival.Global:RestoreSettlerSuspension()for q=1,8 do for g,h in pairs(self.SuspendedSettlers[q])do if not IsExisting(g)then ExecuteLocal("Lib.SettlementSurvival.Local.SuspendedSettlers[%d][%d] = nil",q,g)self.SuspendedSettlers[q][g]=nil else self:SuspendSettler(g)end end end end;function Lib.SettlementSurvival.Global:ResumeSettlersAfterMourning(pu)local qc=Lib.SettlementSurvival.Shared.SuspendedSettlers.MourningTime;local iO=Logic.GetTime()local q=pu%10;if q>=1 and q<=8 then for g,h in pairs(self.SuspendedSettlers[q])do if h[1]>-1 and h[1]+qc<=iO then self:ResumeSettler(g)DestroyEntity(g)end end end end;function Lib.SettlementSurvival.Global:IsSettlerStriking(l)local w=GetID(l)local q=Logic.EntityGetPlayer(w)local q5=Logic.GetCurrentTaskList(w)local og=Logic.GetMarketplace(q)if og~=0 and q5=="TL_WORKER_IDLE_UNFIT"then if Logic.IsEntityMoving(w)==false then return Logic.CheckEntitiesDistance(w,og,1500)==true end end;return false end;function Lib.SettlementSurvival.Global:OverwriteNeeds()ActivateNeedsForBuilding=function(n,at)for qd,s in pairs(PlayerActiveNeeds[n])do if Logic.IsEntityInCategory(at,EntityCategories.OuterRimBuilding)==1 then if qd==Needs.Nutrition or qd==Needs.Medicine then Logic.SetNeedActive(at,qd,true)end;if qd==Needs.Clothes then local oZ=Lib.SettlementSurvival.Global.Misc.ClothesForOuterRim;Logic.SetNeedActive(at,qd,oZ==true)end end;if Logic.IsEntityInCategory(at,EntityCategories.CityBuilding)==1 then Logic.SetNeedActive(at,qd,true)end end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end;ActivateNeedForPlayer=function(n,qe)if qe==nil then return end;local qf={[Needs.Nutrition]=true,[Needs.Medicine]=true}if Lib.SettlementSurvival.Global.Misc.ClothesForOuterRim then qf[Needs.Clothes]=true end;for g=1,#qe do local qd=qe[g]PlayerActiveNeeds[n][qd]=true;local k3={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.CityBuilding)}if qf[qd]then local qg={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.OuterRimBuilding)}for b8=1,#qg do local kg=qg[b8]table.insert(k3,kg)end end;for f=1,#k3 do local kg=k3[f]Logic.SetNeedActive(kg,qd,true)end;Logic.ExecuteInLuaLocalState("GUI_BuildingInfo.UpdateActiveNeedsGUI()")end end end;function Lib.SettlementSurvival.Global:UpdateClothesStateForOuterRim()for q=1,8 do local qg={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.OuterRimBuilding)}for f=1,#qg do local kg=qg[f]if Lib.SettlementSurvival.Global.Misc.ClothesForOuterRim and PlayerActiveNeeds[q][Needs.Clothes]then Logic.SetNeedActive(kg,Needs.Clothes,true)else Logic.SetNeedActive(kg,Needs.Clothes,false)end end end end;function Lib.SettlementSurvival.Global:Print(n,dG)local bq=ConvertPlaceholders(Localize(dG))ExecuteLocal([[
        if GUI.GetPlayerID() == %d then
            GUI.ClearNotes()
            GUI.AddNote("%s")
        end
    ]],n,bq)end;function Lib.SettlementSurvival.Local:Initialize()if not self.IsInstalled then Report.FireAlarmDeactivated_Internal=CreateReport("Event_FireAlarmDeactivated_Internal")Report.FireAlarmActivated_Internal=CreateReport("Event_FireAlarmActivated_Internal")Report.RepairAlarmDeactivated_Internal=CreateReport("Event_RepairAlarmFeactivated")Report.ReRepairAlarmActivated_Internal=CreateReport("Event_ReRepairAlarmActivated_Internal")Report.AnimalDiedFromIllness=CreateReport("Event_AnimalDiedFromIllness")Report.SettlerDiedFromStarvation=CreateReport("Event_SettlerDiedFromStarvation")Report.SettlerDiedFromIllness=CreateReport("Event_SettlerDiedFromIllness")self:OverrideSelectionChanged()self:OverwriteAlarmButtons()self:OverwriteGameCallbacks()self:OverwriteJumpToWorker()self:OverwriteUpgradeButton()self:OverwriteUpdateNeeds()for q=1,8 do self.SuspendedSettlers[q]={}end;Lib.SettlementSurvival.Global=nil end;self.IsInstalled=true end;function Lib.SettlementSurvival.Local:OnSaveGameLoaded()end;function Lib.SettlementSurvival.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementSurvival.Local:OverwriteJumpToWorker()GUI_BuildingInfo.JumpToWorkerClicked=function()Sound.FXPlay2DSound("ui\\menu_click")local q=GUI.GetPlayerID()local qh=GUI.GetSelectedEntity()local qi=0;local qj;if Logic.IsBuilding(qh)==1 then qi=qh;qj=false else if Logic.IsWorker(qh)==1 or Logic.IsSpouse(qh)==true or Logic.GetEntityType(qh)==Entities.U_Priest then qi=Logic.GetSettlersWorkBuilding(qh)qj=true end end;if qi~=0 then local qk={Logic.GetWorkersAndSpousesForBuilding(qi)}for f=#qk,1,-1 do local q4=qk[f]if Lib.SettlementSurvival.Local.SuspendedSettlers[q]then if Lib.SettlementSurvival.Local.SuspendedSettlers[q][q4]then table.remove(qk,f)end end end;local ql;if g_CloseUpView.Active==false and qj==true then ql=qh else local qm=1;for f=1,#qk do if qk[f]==g_LastSelectedInhabitant then qm=f+1;break end end;ql=qk[qm]if ql==0 then ql=qk[qm+1]end end;if ql==nil then local E,F=Logic.GetEntityPosition(qi)g_LastSelectedInhabitant=nil;ShowCloseUpView(0,E,F)GUI.SetSelectedEntity(qi)else GUI.SetSelectedEntity(ql)ShowCloseUpView(ql)g_LastSelectedInhabitant=ql end end end end;function Lib.SettlementSurvival.Local:IsSettlerSuspended(l)local w=GetID(l)local q=Logic.EntityGetPlayer(w)return self.SuspendedSettlers[q]and self.SuspendedSettlers[q][w]~=nil end;function Lib.SettlementSurvival.Local:HasSuspendedInhabitants(l)local kg=GetID(l)local q7={Logic.GetWorkersAndSpousesForBuilding(kg)}for f=1,#q7 do if q7[f]>0 and self:IsSettlerSuspended(q7[f])then return true end end;return false end;function Lib.SettlementSurvival.Local:OverwriteGameCallbacks()self.Orig_GameCallback_Feedback_OnBuildingBurning=GameCallback_Feedback_OnBuildingBurning;GameCallback_Feedback_OnBuildingBurning=function(n,at)Lib.SettlementSurvival.Local.Orig_GameCallback_Feedback_OnBuildingBurning(n,at)SendReportToGlobal(Report.FireAlarmActivated_Internal,at)end;self.Orig_GameCallback_GUI_DeleteEntityStateBuilding=GameCallback_GUI_DeleteEntityStateBuilding;GameCallback_GUI_DeleteEntityStateBuilding=function(hL,dE)if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(hL)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(hL)return end;Lib.SettlementSurvival.Local.Orig_GameCallback_GUI_DeleteEntityStateBuilding(hL,dE)end end;function Lib.SettlementSurvival.Local:OverwriteAlarmButtons()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopFireAlarmClicked;GUI_BuildingButtons.StartStopFireAlarmClicked=function()GUI_BuildingButtons.StartStopFireAlarmClicked_Orig_SettlementSurvival()local w=GUI.GetSelectedEntity()if Logic.IsFireAlarmActiveAtBuilding(w)==true then SendReportToGlobal(Report.FireAlarmActivated_Internal,w)else SendReportToGlobal(Report.FireAlarmDeactivated_Internal,w)end end;GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival=GUI_BuildingButtons.StartStopRepairAlarmClicked;GUI_BuildingButtons.StartStopRepairAlarmClicked=function()GUI_BuildingButtons.StartStopRepairAlarmClicked_Orig_SettlementSurvival()local w=GUI.GetSelectedEntity()if Logic.IsRepairAlarmActiveAtBuilding(w)==true then SendReportToGlobal(Report.ReRepairAlarmActivated_Internal,w)else SendReportToGlobal(Report.RepairAlarmDeactivated_Internal,w)end end end;function Lib.SettlementSurvival.Local:OverwriteUpgradeButton()GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival=GUI_BuildingButtons.UpgradeClicked;GUI_BuildingButtons.UpgradeClicked=function()local kg=GUI.GetSelectedEntity()if Lib.SettlementSurvival.Local:HasSuspendedInhabitants(kg)then Message(Localize(Lib.SettlementSurvival.Text.Messages.BuildingMourning))GUI.CancelBuildingKnockDown(kg)return end;GUI_BuildingButtons.UpgradeClicked_Orig_SettlementSurvival()end end;function Lib.SettlementSurvival.Local:OverwriteUpdateNeeds()GUI_BuildingInfo.NeedUpdate=function()local d4=XGUIEng.GetCurrentWidgetID()local qn=XGUIEng.GetWidgetNameByID(d4)local qo=XGUIEng.GetWidgetsMotherID(d4)local qp=XGUIEng.GetWidgetNameByID(qo)local qq;if qp=="Decoration"then qq="Wealth"elseif qp=="Cleanliness"then qq="Hygiene"else qq=qp end;local qd=Needs[qq]local kg=GetBuildingIDAlsoWhenWorkerIsSelected()if Logic.IsNeedActive(kg,qd)==true then local qr=Logic.IsNeedCritical(kg,qd)local qs=Logic.IsNeedAttention(kg,qd)local qt=Logic.GetFoundNoGoodForNeed(kg,qd)if qr==true and qt==true then XGUIEng.SetMaterialColor(d4,0,240,10,10,255)elseif qs==true and qt==true then XGUIEng.SetMaterialColor(d4,0,255,220,20,255)else XGUIEng.SetMaterialColor(d4,0,255,255,255,255)end;if qn=="Bar"then local State=Logic.GetNeedState(kg,qd)local qu=Logic.GetNeedAttentionThreshold(kg,qd)local qv=Logic.GetNeedCriticalThreshold(kg,qd)local qw=0.8;local qx=State;if not Lib.SettlementSurvival.Local.IsActive or not Lib.SettlementSurvival.Local.Consume.IsActive then if Logic.IsEntityInCategory(kg,EntityCategories.OuterRimBuilding)==1 then qw=qw-qv;qx=qx-qv end else if Logic.IsEntityInCategory(kg,EntityCategories.OuterRimBuilding)==1 then qw=qw-qv*0.65;qx=qx-qv*0.65 end end;XGUIEng.SetProgressBarValues(d4,qx,qw)local qy=XGUIEng.GetWidgetPathByID(XGUIEng.GetWidgetsMotherID(d4)).."/Value"if Debug_EnableDebugOutput then local dc=Round(State*10)local qz=Round(qu*10)local qA=Round(qv*10)XGUIEng.SetText(qy,"{center}"..dc.."/"..qz.."/"..qA)else XGUIEng.SetText(qy,"")end end else XGUIEng.SetMaterialColor(d4,0,255,255,255,50)end end end;function Lib.SettlementSurvival.Local:OverrideSelectionChanged()self.Orig_GameCallback_GUI_SelectionChanged=GameCallback_GUI_SelectionChanged;GameCallback_GUI_SelectionChanged=function(b)Lib.SettlementSurvival.Local.Orig_GameCallback_GUI_SelectionChanged(b)Lib.SettlementSurvival.Local:OnBuildingSelected()end end;function Lib.SettlementSurvival.Local:OnBuildingSelected()local w=GUI.GetSelectedEntity()if self.IsActive then if Logic.IsEntityInCategory(w,EntityCategories.OuterRimBuilding)==1 then if self.Misc.ClothesForOuterRim then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",1)else XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",0)end end;if Logic.IsEntityInCategory(w,EntityCategories.Spouse)==1 or Logic.IsEntityInCategory(w,EntityCategories.Worker)==1 then local kg=Logic.GetSettlersWorkBuilding(w)if Logic.IsEntityInCategory(kg,EntityCategories.OuterRimBuilding)==1 then if self.Misc.ClothesForOuterRim then XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",1)else XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomRight/Selection/Needs/Clothes",0)end end end end end;RegisterModule(Lib.SettlementSurvival.Name)Lib.Register("module/mode/SettlementLimitation_Text")Lib.SettlementLimitation=Lib.SettlementLimitation or{}Lib.SettlementLimitation.Text={DevelopTerritory={Title={de="Territorium entwickeln",en="Develop territory",fr="Développer le territoire"},Text={de="Entwickelt das Territorium fort, um ein weiteres Gebäude zu errichten.",en="Develop the territory to be able to build another building.",fr="Aménager le territoire pour construire un autre bâtiment."},DisabledUpgrade={de="Benötigt Ausbau!",en="Requires Upgrade!",fr="Nécessite une mise à jour!"},DisabledDone={de="Wurde bereits entwickelt!",en="Territory already developed!",fr="Territoire déjà aménagé!"}},BuildingLimit={de="Gebäude: ",en="Buildings: ",fr="Imeuble: "}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/mode/SettlementLimitation_API")function ActivateSettlementLimitation(e2)if not IsLocalScript()then ExecuteLocal("ActivateSettlementLimitation(%s)",tostring(e2==true))end;Lib.SettlementLimitation.AquireContext()this.Active=e2==true;Lib.SettlementLimitation.ReleaseContext()end;API.ActivateSettlementLimitation=ActivateSettlementLimitation;function UseWallUpkeepCosts(e2)if not IsLocalScript()then ExecuteLocal("UseWallUpkeepCosts(%s)",tostring(e2==true))end;Lib.SettlementLimitation.AquireContext()this.WallUpkeepCosts=e2==true;Lib.SettlementLimitation.ReleaseContext()end;API.UseWallUpkeepCosts=UseWallUpkeepCosts;function UseWallDeteriation(e2)if not IsLocalScript()then ExecuteLocal("UseWallDeteriation(%s)",tostring(e2==true))end;Lib.SettlementLimitation.AquireContext()this.WallDeteriation=e2==true;Lib.SettlementLimitation.ReleaseContext()end;API.UseWallDeteriation=UseWallDeteriation;function RequireTitleToDevelopTerritory(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_RuralLogistics)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_RuralLogistics)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_RuralLogistics,0)end end;API.RequireTitleToDevelopTerritory=RequireTitleToDevelopTerritory;function AllowDevelopTerritory(n,l2)assert(not IsLocalScript(),"Can not be used in local script!")Logic.TechnologySetState(n,Technologies.R_RuralLogistics,l2 and 3 or 1)end;API.AllowDevelopTerritory=AllowDevelopTerritory;function SetTerritoryBuildingLimit(n,id,gJ)local a1=GetTerritoryID(id)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingLimit(%d,%d,%d)",n,a1,gJ)end;Lib.SettlementLimitation.AquireContext()this.TerritoryRestriction[n][a1]=gJ;Lib.SettlementLimitation.ReleaseContext()end;API.SetTerritoryBuildingLimit=SetTerritoryBuildingLimit;function SetTerritoryBuildingTypeLimit(n,id,i,gJ)local a1=GetTerritoryID(id)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingTypeLimit(%d,%d,%d,%d)",n,a1,i,gJ)end;Lib.SettlementLimitation.AquireContext()if not this.TerritoryTypeRestriction[n][a1]then this.TerritoryTypeRestriction[n][a1]={}end;this.TerritoryTypeRestriction[n][a1][i]=gJ;Lib.SettlementLimitation.ReleaseContext()end;API.SetTerritoryBuildingTypeLimit=SetTerritoryBuildingTypeLimit;function ClearTerritoryBuildingLimit(n,id)local a1=GetTerritoryID(id)if not IsLocalScript()then ExecuteLocal("SetTerritoryBuildingTypeLimit(%d,%d)",n,a1)end;Lib.SettlementLimitation.AquireContext()this.TerritoryRestriction[n][a1]=nil;Lib.SettlementLimitation.ReleaseContext()end;API.ClearTerritoryBuildingLimit=ClearTerritoryBuildingLimit;function ClearTerritoryBuildingTypeLimit(n,id,i)local a1=GetTerritoryID(id)if not IsLocalScript()then ExecuteLocal("ClearTerritoryBuildingTypeLimit(%d,%d,%d)",n,a1,i)end;Lib.SettlementLimitation.AquireContext()if not this.TerritoryTypeRestriction[n][a1]then this.TerritoryTypeRestriction[n][a1]={}end;this.TerritoryTypeRestriction[n][a1][i]=nil;Lib.SettlementLimitation.ReleaseContext()end;API.ClearTerritoryBuildingTypeLimit=ClearTerritoryBuildingTypeLimit;function SetTerritoryDevelopmentCost(qB,qC,qD,qE)if not IsLocalScript()then ExecuteLocal("SetTerritoryDevelopmentCost(%s,%s,%s,%s)",tostring(qB),tostring(qC),tostring(qD or nil),tostring(qE or nil))end;Lib.SettlementLimitation.AquireContext()this.DevelopTerritoryCosts={qB,qC,qD,qE}Lib.SettlementLimitation.ReleaseContext()end;API.SetTerritoryDevelopmentCost=SetTerritoryDevelopmentCost;function AddToBuildingTerritoryBlacklist(i,id)Lib.SettlementLimitation.Global:AddToBuildingTerritoryBlacklist(i,id)end;API.AddToBuildingTerritoryBlacklist=AddToBuildingTerritoryBlacklist;function AddToBuildingTerritoryWhitelist(i,id)Lib.SettlementLimitation.Global:AddToBuildingTerritoryWhitelist(i,id)end;API.AddToBuildingTerritoryWhitelist=AddToBuildingTerritoryWhitelist;function RemoveFromBuildingTerritoryBlacklist(i,id)Lib.SettlementLimitation.Global:RemoveFromBuildingTerritoryBlacklist(i,id)end;API.RemoveFromBuildingTerritoryBlacklist=RemoveFromBuildingTerritoryBlacklist;function RemoveFromBuildingTerritoryWhitelist(i,id)Lib.SettlementLimitation.Global:RemoveFromBuildingTerritoryWhitelist(i,id)end;API.RemoveFromBuildingTerritoryWhitelist=RemoveFromBuildingTerritoryWhitelist;function ActivateOutpostLimit(e2)Lib.SettlementLimitation.Global:ActivateOutpostLimit(e2)end;API.ActivateOutpostLimit=ActivateOutpostLimit;function SetOutpostLimit(qF,gJ)Lib.SettlementLimitation.Global:SetOutpostLimit(qF,gJ)end;API.SetOutpostLimit=SetOutpostLimit;Lib.SettlementLimitation=Lib.SettlementLimitation or{}Lib.SettlementLimitation.Name="SettlementLimitation"Lib.SettlementLimitation.Global={Active=false,TerritoryRestriction={},TerritoryTypeRestriction={},TerritoryTypeBlacklist={},TerritoryTypeWhitelist={},AdditionalBuildingBonus={},MultiConstructionBonus={},WallUpkeepCosts=false,WallDeteriation=false,OutpostLimit=false}Lib.SettlementLimitation.Local={Active=false,TerritoryRestriction={},TerritoryTypeRestriction={},TerritoryTypeBlacklist={},TerritoryTypeWhitelist={},AdditionalBuildingBonus={},MultiConstructionBonus={},WallUpkeepCosts=false,WallDeteriation=false,OutpostLimit=false}Lib.SettlementLimitation.Shared={DevelopTerritoryCosts={Goods.G_Gold,500},CityBuildings={},OuterRimBuildings={},WallDeteriation={Health=10,Chance=15},Upkeep={Palisade=0.3,Wall=1.5},AbsolutLimitIgnore={["B_Beautification_Brazier"]=true,["B_Beautification_Pillar"]=true,["B_Beautification_Shrine"]=true,["B_Beautification_StoneBench"]=true,["B_Beautification_Sundial"]=true,["B_Beautification_TriumphalArch"]=true,["B_Beautification_Vase"]=true,["B_Beautification_VictoryColumn"]=true,["B_Beehive"]=true,["B_CattlePasture"]=true,["B_Cistern"]=true,["B_GrainField_AS"]=true,["B_GrainField_ME"]=true,["B_GrainField_NA"]=true,["B_GrainField_NE"]=true,["B_GrainField_SE"]=true,["B_SheepPasture"]=true,["B_SpecialEdition_Column"]=true,["B_SpecialEdition_Pavilion"]=true,["B_SpecialEdition_StatueDario"]=true,["B_SpecialEdition_StatueFamily"]=true,["B_SpecialEdition_StatueProduction"]=true,["B_SpecialEdition_StatueSettler"]=true,["B_Well"]=true},CastleOutpostLimit={ArchdukeFactor=1,[1]=3,[2]=6,[3]=9,[4]=12},CastleOutpostPenalty={Amount=5,RankFactor=1.3}}Lib.Require("comfort/GetDistance")Lib.Require("comfort/GetTerritoryID")Lib.Require("core/Core")Lib.Require("module/city/Construction")Lib.Require("module/entity/EntityEvent")Lib.Require("module/faker/Technology")Lib.Require("module/ui/UIBuilding")Lib.Require("module/ui/UITools")Lib.Require("module/mode/SettlementLimitation_API")Lib.Require("module/mode/SettlementLimitation_Text")Lib.Register("module/mode/SettlementLimitation")function Lib.SettlementLimitation.Global:Initialize()if not self.IsInstalled then for q=1,8 do self.TerritoryRestriction[q]={}self.TerritoryTypeRestriction[q]={}self.AdditionalBuildingBonus[q]={}self.MultiConstructionBonus[q]={}end;Lib.SettlementLimitation.Shared:CreateTypeLists()self:InitConstructionLimitRules()self:InitFixCostsPayment()self:InitOutpostLimitRules()Lib.SettlementLimitation.Local=nil end;self.IsInstalled=true end;function Lib.SettlementLimitation.Global:OnSaveGameLoaded()end;function Lib.SettlementLimitation.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true;for q=1,8 do self:InitDefaultRules(q)CustomRuleConstructBuilding(q,"SettlementLimitation_Global_TerritoryBuildingGeneralLimitRule")CustomRuleConstructBuilding(q,"SettlementLimitation_Global_TerritoryBuildingTypeLimitRule")CustomRuleConstructBuilding(q,"SettlementLimitation_Global_HomeTerritoryBuildingGeneralLimitRule")CustomRuleConstructBuilding(q,"SettlementLimitation_Global_HomeTerritoryBuildingTypeLimitRule")CustomRuleConstructBuilding(q,"SettlementLimitation_Global_OutpostLimitRule")end elseif aM==Report.BuildingUpgraded then local qG=Logic.IsEntityInCategory(arg[1],EntityCategories.Outpost)==1;local a1=GetTerritoryUnderEntity(arg[1])local qH=self:GetAdditionalBuildingBonusAmount(arg[2],a1)if qG and qH==0 then self:SetAdditionalBuildingBonusAmount(arg[2],a1,1)self:SetMultiConstructionBonusAmount(arg[2],a1,1)end end end;function Lib.SettlementLimitation.Global:InitDefaultRules(n)local qI={Logic.GetTerritories()}for f=1,#qI do SetTerritoryBuildingLimit(n,qI[f],2)for m,s in pairs(Lib.SettlementLimitation.Shared.CityBuildings)do SetTerritoryBuildingTypeLimit(n,qI[f],m,0)end;for m,s in pairs(Lib.SettlementLimitation.Shared.OuterRimBuildings)do SetTerritoryBuildingTypeLimit(n,qI[f],m,1)end end end;function Lib.SettlementLimitation.Global:InitConstructionLimitRules()SettlementLimitation_Global_TerritoryBuildingGeneralLimitRule=function(n,i,hQ,hR)local qJ=Logic.GetStoreHouse(n)local qK=GetTerritoryUnderEntity(qJ)local a1=Logic.GetTerritoryAtPosition(hQ,hR)local qL=Logic.GetTerritoryAcquiringBuildingID(a1)if Lib.SettlementLimitation.Global.Active and qK~=a1 then if Lib.SettlementLimitation.Global.TerritoryRestriction[n]then local qM=Lib.SettlementLimitation.Shared.AbsolutLimitIgnore;local j=Logic.GetEntityTypeName(i)if qM[j]then return true end;local jT=-1;if Lib.SettlementLimitation.Global.TerritoryRestriction[n][a1]then jT=Lib.SettlementLimitation.Global.TerritoryRestriction[n][a1]end;if jT==-1 and Lib.SettlementLimitation.Global.TerritoryRestriction[n][0]then jT=Lib.SettlementLimitation.Global.TerritoryRestriction[n][0]end;local qH=Lib.SettlementLimitation.Global:GetAdditionalBuildingBonusAmount(n,a1)local qN=0;qN=qN+#{Logic.GetEntitiesOfCategoryInTerritory(a1,n,EntityCategories.CityBuilding,0)}qN=qN+#{Logic.GetEntitiesOfCategoryInTerritory(a1,n,EntityCategories.OuterRimBuilding,0)}if(jT or-1)~=-1 then return qN<(jT>0 and jT+qH or jT)end end end;return true end;SettlementLimitation_Global_TerritoryBuildingTypeLimitRule=function(n,i,hQ,hR)local qJ=Logic.GetStoreHouse(n)local qK=GetTerritoryUnderEntity(qJ)local a1=Logic.GetTerritoryAtPosition(hQ,hR)local qL=Logic.GetTerritoryAcquiringBuildingID(a1)if Lib.SettlementLimitation.Global.Active and qK~=a1 then if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n]then if not self:IsTypeAllowedByListing(i,a1)then return false end;local qM=Lib.SettlementLimitation.Shared.AbsolutLimitIgnore;local j=Logic.GetEntityTypeName(i)if qM[j]then return true end;local jT=-1;if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n][a1]then jT=Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n][a1][i]or-1 end;if jT==-1 and Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n][0]then jT=Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n][0][i]or-1 end;local qH=Lib.SettlementLimitation.Global:GetMultiConstructionBonusAmount(n,a1)local qN=#{Logic.GetEntitiesOfTypeInTerritory(a1,n,i,0)}if(jT or-1)~=-1 then return qN<(jT>0 and jT+qH or jT)end end end;return true end;SettlementLimitation_Global_HomeTerritoryBuildingGeneralLimitRule=function(n,i,hQ,hR)local qJ=Logic.GetStoreHouse(n)local qK=GetTerritoryUnderEntity(qJ)local a1=Logic.GetTerritoryAtPosition(hQ,hR)local qL=Logic.GetTerritoryAcquiringBuildingID(a1)if Lib.SettlementLimitation.Global.Active and Logic.IsEntityTypeInCategory(i,EntityCategories.OuterRimBuilding)==1 and qK==a1 then if Lib.SettlementLimitation.Global.TerritoryRestriction[n]then local qM=Lib.SettlementLimitation.Shared.AbsolutLimitIgnore;local j=Logic.GetEntityTypeName(i)if qM[j]then return true end;local qN=#{Logic.GetEntitiesOfCategoryInTerritory(a1,n,EntityCategories.OuterRimBuilding,0)}return qN<3 end end;return true end;SettlementLimitation_Global_HomeTerritoryBuildingTypeLimitRule=function(n,i,hQ,hR)local qJ=Logic.GetStoreHouse(n)local qK=GetTerritoryUnderEntity(qJ)local a1=Logic.GetTerritoryAtPosition(hQ,hR)local qL=Logic.GetTerritoryAcquiringBuildingID(a1)if Lib.SettlementLimitation.Global.Active and Logic.IsEntityTypeInCategory(i,EntityCategories.OuterRimBuilding)==1 and qK==a1 then if Lib.SettlementLimitation.Global.TerritoryTypeRestriction[n]then if not self:IsTypeAllowedByListing(i,a1)then return false end;local qM=Lib.SettlementLimitation.Shared.AbsolutLimitIgnore;local j=Logic.GetEntityTypeName(i)if qM[j]then return true end;local qN=#{Logic.GetEntitiesOfTypeInTerritory(a1,n,i,0)}return qN<1 end end;return true end end;function Lib.SettlementLimitation.Global:ActivateSettlementLimitation(e2)self.Active=e2==true;ExecuteLocal([[Lib.SettlementLimitation.Local.Active = %s == true]],tostring(e2==true))end;function Lib.SettlementLimitation.Global:GetAdditionalBuildingBonusAmount(n,aM)if self.AdditionalBuildingBonus[n]then return self.AdditionalBuildingBonus[n][aM]or 0 end;return 0 end;function Lib.SettlementLimitation.Global:SetAdditionalBuildingBonusAmount(n,aM,aS)if self.AdditionalBuildingBonus[n]then local kG=self.AdditionalBuildingBonus[n][aM]or 0;self.AdditionalBuildingBonus[n][aM]=kG+aS;ExecuteLocal([[Lib.SettlementLimitation.Local.AdditionalBuildingBonus[%d][%d] = %d]],n,aM,kG+aS)end end;function Lib.SettlementLimitation.Global:GetMultiConstructionBonusAmount(n,aM)if self.MultiConstructionBonus[n]then return self.MultiConstructionBonus[n][aM]or 0 end;return 0 end;function Lib.SettlementLimitation.Global:SetMultiConstructionBonusAmount(n,aM,aS)if self.MultiConstructionBonus[n]then local kG=self.MultiConstructionBonus[n][aM]or 0;self.MultiConstructionBonus[n][aM]=kG+aS;ExecuteLocal([[Lib.SettlementLimitation.Local.MultiConstructionBonus[%d][%d] = %d]],n,aM,kG+aS)end end;function Lib.SettlementLimitation.Global:AddToBuildingTerritoryBlacklist(i,id)self.TerritoryTypeBlacklist[i]=self.TerritoryTypeBlacklist[i]or{}self.TerritoryTypeBlacklist[i][id]=true;ExecuteLocal([[
        Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d] = Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d] or {}
        Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d][%d] = true
    ]],i,i,i,id)end;function Lib.SettlementLimitation.Global:AddToBuildingTerritoryWhitelist(i,id)self.TerritoryTypeWhitelist[i]=self.TerritoryTypeWhitelist[i]or{}self.TerritoryTypeWhitelist[i][id]=true;ExecuteLocal([[
        Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d] = Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d] or {}
        Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d][%d] = true
    ]],i,i,i,id)end;function Lib.SettlementLimitation.Global:RemoveFromBuildingTerritoryBlacklist(i,id)self.TerritoryTypeBlacklist[i]=self.TerritoryTypeBlacklist[i]or{}self.TerritoryTypeBlacklist[i][id]=nil;ExecuteLocal([[
        Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d] = Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d] or {}
        Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[%d][%d] = nil
    ]],i,i,i,id)end;function Lib.SettlementLimitation.Global:RemoveFromBuildingTerritoryWhitelist(i,id)self.TerritoryTypeWhitelist[i]=self.TerritoryTypeWhitelist[i]or{}self.TerritoryTypeWhitelist[i][id]=nil;ExecuteLocal([[
        Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d] = Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d] or {}
        Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[%d][%d] = nil
    ]],i,i,i,id)end;function Lib.SettlementLimitation.Global:IsTypeAllowedByListing(i,bu)if Lib.SettlementLimitation.Global.TerritoryTypeBlacklist[i]then if Lib.SettlementLimitation.Global.TerritoryTypeBlacklist[i][bu]then return false end end;if Lib.SettlementLimitation.Global.TerritoryTypeWhitelist[i]then if not Lib.SettlementLimitation.Global.TerritoryTypeWhitelist[i][bu]then return false end end;return true end;function Lib.SettlementLimitation.Global:InitFixCostsPayment()self.Orig_GameCallback_TaxCollectionFinished=GameCallback_TaxCollectionFinished;GameCallback_TaxCollectionFinished=function(n,qO,mZ)Lib.SettlementLimitation.Global.Orig_GameCallback_TaxCollectionFinished(n,qO,mZ)Lib.SettlementLimitation.Global:PayFacilityUpkeep(n)Lib.SettlementLimitation.Global:PayTerritoryPenalty(n)end end;function Lib.SettlementLimitation.Global:PayFacilityUpkeep(n)if self.WallUpkeepCosts then if Logic.PlayerGetIsHumanFlag(n)then local qP=self:GetWallUpkeep(n)local qQ=qP;if qP>0 then if GetPlayerResources(Goods.G_Gold,n)<qP then local qR={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Wall)}local qS=Lib.SettlementLimitation.Shared.WallDeteriation;for s,ar in pairs(qR)do if math.random(1,100)<=qS.Chance then local ac=Logic.GetEntityHealth(ar)local ab=Logic.GetEntityHealth(ar)local n0=math.ceil(ab*0.05)if ac>0 and n0>=ac then Logic.HurtEntity(ar,n0)end end end else AddGood(Goods.G_Gold,-1*qP,n)end end;RequestHiResDelay(0,ExecuteLocal,[[if GUI.GetPlayerID() == %d then
                      GUI_FeedbackWidgets.GoldAdd(%d, nil, {3, 11, 0}, {1, 8, 0})
                  end]],n,-1*qQ)end end end;function Lib.SettlementLimitation.Global:GetWallUpkeep(n)local qT=0;local qU=Lib.SettlementLimitation.Shared.Upkeep.Palisade;local qV=Lib.SettlementLimitation.Shared.Upkeep.Wall;for s,ar in pairs{Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Wall)}do if Logic.IsConstructionComplete(ar)==1 then if Logic.IsEntityInCategory(ar,EntityCategories.PalisadeSegment)==1 then qT=qT+qU else qT=qT+qV end end end;return math.ceil(qT)end;function Lib.SettlementLimitation.Global:PayTerritoryPenalty(n)local qW=self:GetPlayerOutpostExceedPenaltyAmount(n)if qW>=1 then AddGood(Goods.G_Gold,math.floor(-1*qW),n)RequestHiResDelay(0,ExecuteLocal,[[if GUI.GetPlayerID() == %d then
                  GUI_FeedbackWidgets.GoldAdd(%d, nil, {12, 3, 0}, {1, 8, 0})
              end]],n,math.floor(-1*qW))end end;function Lib.SettlementLimitation.Global:InitOutpostLimitRules()SettlementLimitation_Global_OutpostLimitRule=function(n,i,hQ,hR)if self.OutpostLimit and Logic.PlayerGetIsHumanFlag(n)then if Logic.IsEntityTypeInCategory(i,EntityCategories.Outpost)==1 then local jT=Lib.SettlementLimitation.Global:GetOutpostLimit(n)local qX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Outpost)}if jT>=0 and#qX>=jT then return false end end end;return true end end;function Lib.SettlementLimitation.Global:ActivateOutpostLimit(e2)ExecuteLocal([[Lib.SettlementLimitation.Local.OutpostLimit = %s]],tostring(e2==true))Lib.SettlementLimitation.Global.OutpostLimit=e2==true end;function Lib.SettlementLimitation.Global:SetOutpostLimit(qF,gJ)local qY=qF+1;ExecuteLocal([[Lib.SettlementLimitation.Shared.CastleOutpostLimit[%d] = %d]],qY,gJ)Lib.SettlementLimitation.Shared.CastleOutpostLimit[qY]=gJ end;function Lib.SettlementLimitation.Global:GetOutpostLimit(n)if self.OutpostLimit and Logic.PlayerGetIsHumanFlag(n)then local qZ=Lib.SettlementLimitation.Shared.CastleOutpostLimit;local aw=Logic.GetHeadquarters(n)local qY=(Logic.GetUpgradeLevel(aw)or 0)+1;local q_=Lib.SettlementLimitation.Shared.CastleOutpostLimit.ArchdukeFactor;local r0=Logic.GetKnightTitle(n)>=6 and q_ or 1.0;return math.floor(qZ[qY]*r0)end;return-1 end;function Lib.SettlementLimitation.Global:GetPlayerOutpostExceedPenaltyAmount(n)local jT=self:GetOutpostLimit(n)local qX={Logic.GetPlayerEntitiesInCategory(n,EntityCategories.Outpost)}if jT>=0 and#qX>jT then local r1=Lib.SettlementLimitation.Shared.CastleOutpostPenalty;local r2=Logic.GetKnightTitle(n)return r1.Amount*#qX*r2 end;return 0 end;function Lib.SettlementLimitation.Local:Initialize()if not self.IsInstalled then for q=1,8 do self.TerritoryRestriction[q]={}self.TerritoryTypeRestriction[q]={}self.AdditionalBuildingBonus[q]={}self.MultiConstructionBonus[q]={}end;Lib.SettlementLimitation.Shared:CreateTypeLists()self:ClearConstructionTextWidgets()self:OverwritePlacementUpdate()self:OverwriteClaimTerritory()Lib.SettlementLimitation.Global=nil end;self.IsInstalled=true end;function Lib.SettlementLimitation.Local:OnSaveGameLoaded()self:ClearConstructionTextWidgets()end;function Lib.SettlementLimitation.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.SettlementLimitation.Local:OverwritePlacementUpdate()self.Orig_GUI_Construction_PlacementUpdate=GUI_Construction.PlacementUpdate;GUI_Construction.PlacementUpdate=function()if PlacementState~=0 then Lib.SettlementLimitation.Local.Orig_GUI_Construction_PlacementUpdate()return end;local this=Lib.SettlementLimitation.Local;local q=GUI.GetPlayerID()local E,F=GUI.Debug_GetMapPositionUnderMouse()local r3;local a1;if E~=-1 then a1=Logic.GetTerritoryAtPosition(E,F)FoWState=Logic.GetFoWState(q,E,F)if a1~=nil then TerritoryName=GetTerritoryName(a1)r3=Logic.GetTerritoryPlayerID(a1)end end;if a1==nil or r3==0 or g_Construction.CurrentPlacementType==1 then return end;local r4,r5,r6=GUI.GetPlayerColor(r3)PlayerColor="{@color:"..r4 ..","..r5 ..","..r6 ..",255}"local TerritoryName=GetTerritoryName(a1)local r7=Lib.Construction.Local.LastSelectedBuildingType;local s,mi=Logic.GetBuildingTypesInUpgradeCategory(r7)local r8=this:GetRestrictionText(q,a1,mi)local r9=this:GetRestrictionTypeText(q,a1,mi)local ra=""if r8==""and r9==""then TerritoryName=""else ra=r8 ..r9 end;for f=0,4 do XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryName"..f,"{center}"..PlayerColor.." "..TerritoryName)XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryReason"..f,"{center}"..ra)XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/OtherReason"..f,"")end end end;function Lib.SettlementLimitation.Local:GetRestrictionText(n,bu,i)local qJ=Logic.GetStoreHouse(n)if GetTerritoryUnderEntity(qJ)==bu or not Lib.SettlementLimitation.Local.Active then return""end;local rb=function(fa,rc,rd)local this=Lib.SettlementLimitation.Local;local qN=0;qN=qN+#{Logic.GetEntitiesOfCategoryInTerritory(rc,fa,EntityCategories.CityBuilding,0)}qN=qN+#{Logic.GetEntitiesOfCategoryInTerritory(rc,fa,EntityCategories.OuterRimBuilding,0)}local qH=this:GetAdditionalBuildingBonusAmount(fa,rc)local jT=rd;jT=jT>0 and jT+qH or jT;local bq=string.format("%s%s %d / %d{@color:255,255,255,255}{cr}",qN>=jT and"{@color:255,0,0,255}"or"{@color:255,255,255,255}",Localize(Lib.SettlementLimitation.Text.BuildingLimit),qN,jT)return bq end;if Lib.SettlementLimitation.Shared:IsCheckedType(i)then local re=self.TerritoryRestriction[n]if re then local rf=re[bu]if rf and rf~=-1 then return rb(n,bu,rf)end;local rg=re[0]if rg and rg~=-1 then return rb(n,bu,rg)end end end;return""end;function Lib.SettlementLimitation.Local:GetRestrictionTypeText(n,bu,i)local qJ=Logic.GetStoreHouse(n)if GetTerritoryUnderEntity(qJ)==bu or not Lib.SettlementLimitation.Local.Active then return""end;local rb=function(fa,rc,fo,rh)local this=Lib.SettlementLimitation.Local;local j=Logic.GetEntityTypeName(fo)local qN=#{Logic.GetEntitiesOfTypeInTerritory(rc,fa,fo,0)}local jT=rh;local qH=this:GetMultiConstructionBonusAmount(fa,rc)jT=jT>0 and jT+qH or jT;local bq=string.format("%s%s %d / %d{@color:255,255,255,255}{cr}",qN>=jT and"{@color:255,0,0,255}"or"{@color:255,255,255,255}",XGUIEng.GetStringTableText("Names/"..j),qN,jT)return bq end;if Lib.SettlementLimitation.Shared:IsCheckedType(i)then local ri=self.TerritoryTypeRestriction[n]if ri then local re=ri[bu]if re and re[i]and re[i]~=-1 then local jT=re[i]if not self:IsTypeAllowedByListing(i,bu)then jT=0 end;return rb(n,bu,i,jT)end;local rj=ri[0]if rj and rj[i]and rj[i]~=-1 then local jT=rj[i]if not self:IsTypeAllowedByListing(i,bu)then jT=0 end;return rb(n,bu,i,jT)end end end;return""end;function Lib.SettlementLimitation.Local:GetAdditionalBuildingBonusAmount(n,aM)if self.AdditionalBuildingBonus[n]then return self.AdditionalBuildingBonus[n][aM]or 0 end;return 0 end;function Lib.SettlementLimitation.Local:GetMultiConstructionBonusAmount(n,aM)if self.MultiConstructionBonus[n]then return self.MultiConstructionBonus[n][aM]or 0 end;return 0 end;function Lib.SettlementLimitation.Local:IsTypeAllowedByListing(i,bu)if Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[i]then if Lib.SettlementLimitation.Local.TerritoryTypeBlacklist[i][bu]then return false end end;if Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[i]then if not Lib.SettlementLimitation.Local.TerritoryTypeWhitelist[i][bu]then return false end end;return true end;function Lib.SettlementLimitation.Local:GetOutpostLimit(n)if self.OutpostLimit and Logic.PlayerGetIsHumanFlag(n)then local qZ=Lib.SettlementLimitation.Shared.CastleOutpostLimit;local aw=Logic.GetHeadquarters(n)local qY=(Logic.GetUpgradeLevel(aw)or 0)+1;local q_=Lib.SettlementLimitation.Shared.CastleOutpostLimit.ArchdukeFactor;local r0=Logic.GetKnightTitle(n)>=6 and q_ or 1.0;return math.floor(qZ[qY]*r0)end;return-1 end;function Lib.SettlementLimitation.Local:OverwriteClaimTerritory()self.Orig_GUI_Knight_ClaimTerritoryClicked=GUI_Knight.ClaimTerritoryClicked;GUI_Knight.ClaimTerritoryClicked=function()local q=GUI.GetPlayerID()local jT=Lib.SettlementLimitation.Local:GetOutpostLimit(q)if jT~=-1 then local qX={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Outpost)}if jT<=#qX then AddMessage("UI_ButtonDisabled/UpgradeOutpost")return end end;Lib.SettlementLimitation.Local.Orig_GUI_Knight_ClaimTerritoryClicked()end;GUI_Knight.ClaimTerritoryMouseOver=function()local q=GUI.GetPlayerID()local hd={}local cM=GetEntityTypeForClimatezone("B_Outpost")local cH=GUI.GetSelectedEntity()local a1=GetTerritoryUnderEntity(cH)local rk=Logic.GetEntityTypeCostOfGoodType(cM,Goods.G_Wood)local rl=Logic.GetEntityTypeCostOfGoodType(cM,Goods.G_Stone)local rm=Logic.GetEntityTypeCostOfGoodType(cM,Goods.G_Gold)local rn=Logic.GetTerritoryGoldPrice(a1)rm=rm+rn;hd={Goods.G_Gold,rm,Goods.G_Wood,rk,Goods.G_Stone,rl}local mx;local r3=Logic.GetTerritoryPlayerID(a1)if r3~=0 then if r3==q then mx="OutpostOnOwnTerritory"else mx="OutpostOnOtherPlayersTerritory"end;hd={}end;local ro=XGUIEng.GetStringTableText("UI_ObjectNames/B_Outpost_ME")local rp=XGUIEng.GetStringTableText("UI_ObjectDescription/B_Outpost_ME")local rq=nil;if mx then rq=XGUIEng.GetStringTableText("UI_ButtonDisabled/"..mx)end;local jT=Lib.SettlementLimitation.Local:GetOutpostLimit(q)if jT~=-1 then local qX={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.Outpost)}ro=ro.." ("..#qX.."/"..jT..")"end;SetTooltipCosts(ro,rp,rq,hd,false)end end;function Lib.SettlementLimitation.Local:ClearConstructionTextWidgets()for f=0,4 do XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryName"..f,"")XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/TerritoryReason"..f,"")XGUIEng.SetText("/Ingame/Root/Normal/PlacementStatus/OtherReason"..f,"")end end;function Lib.SettlementLimitation.Shared:CreateTypeLists()self.CityBuildings={}self.OuterRimBuildings={}local kc={Logic.GetEntityTypesInCategory(EntityCategories.CityBuilding)}for s,m in pairs(kc)do self.CityBuildings[m]=true end;local qg={Logic.GetEntityTypesInCategory(EntityCategories.OuterRimBuilding)}for s,m in pairs(qg)do self.OuterRimBuildings[m]=true end end;function Lib.SettlementLimitation.Shared:IsCheckedType(i)if self.CityBuildings[i]then return true end;if self.OuterRimBuildings[i]then return true end;return false end;RegisterModule(Lib.SettlementLimitation.Name)Lib.Register("module/information/BriefingSystem_Behavior")function Reprisal_Briefing(C,rr)return B_Reprisal_Briefing:new(C,rr)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(bh,bi)if bh==0 then self.BriefingName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Briefing:CustomFunction(bg)_G[self.Function](self.BriefingName,bg.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(bg)if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Briefing)function Reward_Briefing(C,rr)return B_Reward_Briefing:new(C,rr)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Briefing)function Trigger_Briefing(C,n,dX)return B_Trigger_Briefing:new(C,n,dX)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(bh,bi)if bh==0 then self.BriefingName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Briefing:CustomFunction(bg)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Briefing)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/BriefingSystem_API")function StartBriefing(rr,C,n)if GUI then return end;local q=n;if not q and not Framework.IsNetworkGame()then q=1 end;assert(C~=nil)assert(n~=nil)assert(type(rr)=="table","Briefing must be a table!")assert(#rr>0,"Briefing does not contain pages!")for f=1,#rr do assert(type(rr[f])~="table"or rr[f].__Legit,"A page is not initalized!")end;if rr.EnableSky==nil then rr.EnableSky=true end;if rr.EnableFoW==nil then rr.EnableFoW=false end;if rr.HideNotes==nil then rr.HideNotes=false end;if rr.EnableGlobalImmortality==nil then rr.EnableGlobalImmortality=true end;if rr.EnableBorderPins==nil then rr.EnableBorderPins=false end;if rr.RestoreGameSpeed==nil then rr.RestoreGameSpeed=true end;if rr.RestoreCamera==nil then rr.RestoreCamera=true end;Lib.BriefingSystem.Global:StartBriefing(C,q,rr)end;API.StartBriefing=StartBriefing;function RequestBriefingAlternateGraphics()if not GUI then ExecuteLocal("RequestBriefingAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestBriefingAlternateGraphics=RequestBriefingAlternateGraphics;function IsBriefingActive(n)if not IsLocalScript()then return Lib.BriefingSystem.Global:GetCurrentBriefing(n)~=nil end;return Lib.BriefingSystem.Local:GetCurrentBriefing(n)~=nil end;API.IsBriefingActive=IsBriefingActive;function GetFramePosition(l,rs)local E,F,G=Logic.EntityGetPos(GetID(l))local rt=rs<0 and math.abs(rs)or G+(rs or 0)return E,F,rt end;function GetFrameVector(ru,rv,rw,rx)local aC,aD,aE=Logic.EntityGetPos(GetID(ru))local aG,aH,aI=Logic.EntityGetPos(GetID(rw))local ry=rv<0 and math.abs(rv)or aE+(rv or 0)local rz=rx<0 and math.abs(rx)or aI+(rx or 0)return aC,aD,ry,aG,aH,rz end;function AddBriefingPages(rr)Lib.BriefingSystem.Global:CreateBriefingGetPage(rr)Lib.BriefingSystem.Global:CreateBriefingAddPage(rr)Lib.BriefingSystem.Global:CreateBriefingAddMCPage(rr)Lib.BriefingSystem.Global:CreateBriefingAddRedirect(rr)local AP=function(rA)local rB;if type(rA)=="table"then if rA.MC then rB=rr:AddMCPage(rA)else rB=rr:AddPage(rA)end else rB=rr:AddRedirect(rA)end;return rB end;local ASP=function(...)rr.PageAnimation=rr.PageAnimation or{}local Name,hO,bq,R;local rC=false;local jy=function()end;if#arg==3 and type(arg[1])=="string"or#arg>=4 and type(arg[4])=="boolean"then Name=table.remove(arg,1)end;hO=table.remove(arg,1)bq=table.remove(arg,1)if#arg>0 then rC=table.remove(arg,1)==true end;if#arg>0 then R=table.remove(arg,1)end;if#arg>0 then jy=table.remove(arg,1)end;local rD;if R then rD=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if R and Logic.IsSettler(GetID(R))==1 then rD=Logic.GetEntityOrientation(GetID(R))+90 end end;return rr:AddPage{Name=Name,Title=hO,Text=bq,Action=jy,Position=R,DisableSkipping=false,Duration=-1,DialogCamera=rC,Rotation=rD}end;return AP,ASP end;API.AddBriefingPages=AddBriefingPages;function AP(ho)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/BriefingSystem_Text")Lib.BriefingSystem.Text={NextButton={de="Weiter",en="Forward",fr="Continuer"},PrevButton={de="Zurück",en="Previous",fr="Retour"},EndButton={de="Beenden",en="Close",fr="Quitter"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.BriefingSystem=Lib.BriefingSystem or{}Lib.BriefingSystem.Name="BriefingSystem"Lib.BriefingSystem.Global={Briefing={},BriefingQueue={},BriefingCounter=0}Lib.BriefingSystem.Local={Config={DoAlternateGraphics=true},ParallaxWidgets={Pushed={},{"/EndScreen/EndScreen/BackGround","/EndScreen/EndScreen"},{"/InGame/Root/EndScreen/BlackBG","/InGame/Root/EndScreen"},{"/InGame/Root/EndScreen/BG","/InGame/Root/EndScreen"},{"/InGame/Root/BlackStartScreen/BG","/InGame/Root/BlackStartScreen"}},Briefing={}}CONST_BRIEFING={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=9000,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=36,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=3500,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/settings/Sound")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/information/Requester")Lib.Require("module/information/BriefingSystem_Text")Lib.Require("module/information/BriefingSystem_API")Lib.Require("module/information/BriefingSystem_Behavior")Lib.Register("module/information/BriefingSystem")CinematicEventTypes.Briefing=2;function Lib.BriefingSystem.Global:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")for f=1,8 do self.BriefingQueue[f]={}end;RequestHiResJob(function()Lib.BriefingSystem.Global:UpdateQueue()Lib.BriefingSystem.Global:BriefingExecutionController()end)Lib.BriefingSystem.Local=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Global:OnSaveGameLoaded()end;function Lib.BriefingSystem.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then elseif aM==Report.BriefingStarted then self:NextPage(arg[1])elseif aM==Report.BriefingEnded then SendReportToLocal(Report.BriefingEnded,arg[1],arg[2])elseif aM==Report.BriefingPageShown then SendReportToLocal(Report.BriefingPageShown,arg[1],arg[2])elseif aM==Report.BriefingOptionSelected then self:OnOptionSelected(arg[1],arg[2])elseif aM==Report.BriefingSkipButtonPressed then self:SkipButtonPressed(arg[1])end end;function Lib.BriefingSystem.Global:UpdateQueue()for q=1,8 do if self:CanStartBriefing(q)then local hG=Lib.UIEffects.Global:LookUpCinematicInQueue(q)if hG and hG[1]==CinematicEventTypes.Briefing then self:NextBriefing(q)end end end end;function Lib.BriefingSystem.Global:BriefingExecutionController()for q=1,8 do if self.Briefing[q]and not self.Briefing[q].DisplayIngameCutscene then local rE=self.Briefing[q].CurrentPage;local rB=self.Briefing[q][rE]if self.Briefing[q].RequestOptionEvaluation then self.Briefing[q].RequestOptionEvaluation=nil;local rF=self.Briefing[q].RequestOptionEvaluation;if rB.MC then local rG;for f=1,#rB.MC,1 do if rB.MC[f].ID==rF then rG=rB.MC[f]end end;if rG~=nil then local aL=rG[2]if type(rG[2])=="function"then aL=rG[2](q,rE,rF)end;self.Briefing[q][rE].MC.Selected=rG.ID;self.Briefing[q].CurrentPage=self:GetPageIDByName(q,aL)-1;self:NextPage(q)end end elseif self.Briefing[q].RequestPageSkip then self.Briefing[q].RequestPageSkip=nil;if self.Briefing[q][rE].OnForward then self.Briefing[q][rE]:OnForward()end;self:NextPage(q)else if rB and not rB.MC and rB.Duration>0 then if rB.Started+rB.Duration<Logic.GetTime()then self:NextPage(q)end end end end end end;function Lib.BriefingSystem.Global:CreateBriefingGetPage(rr)rr.GetPage=rr.GetPage or function(this,rH)local ar=Lib.BriefingSystem.Global:GetPageIDByName(rr.PlayerID,rH)return Lib.BriefingSystem.Global.Briefing[rr.PlayerID][ar]end end;function Lib.BriefingSystem.Global:CreateBriefingAddPage(rr)rr.AddPage=rr.AddPage or function(this,rA)this.Length=(this.Length or 0)+1;rr.PageAnimation=rr.PageAnimation or{}rr.PageParallax=rr.PageParallax or{}local rI="Page"..#this+1;if rA.Name then rI=rA.Name else rA.Name=rI end;rA.__Legit=true;rA.Title=Localize(rA.Title or"")rA.Text=Localize(rA.Text or"")if rA.BigBars==nil then rA.BigBars=true end;if rA.Position then if not rA.Angle then rA.Angle=CONST_BRIEFING.CAMERA_ANGLEDEFAULT;if rA.DialogCamera then rA.Angle=CONST_BRIEFING.DLGCAMERA_ANGLEDEFAULT end end;if not rA.Rotation then rA.Rotation=CONST_BRIEFING.CAMERA_ROTATIONDEFAULT;if rA.DialogCamera then rA.Rotation=CONST_BRIEFING.DLGCAMERA_ROTATIONDEFAULT end end;if not rA.Zoom then rA.Zoom=CONST_BRIEFING.CAMERA_ZOOMDEFAULT;if rA.DialogCamera then rA.Zoom=CONST_BRIEFING.DLGCAMERA_ZOOMDEFAULT end end;local rJ,rK,rL,rM;if rA.FlyTo then rJ=rA.FlyTo.Position or rA.Position;rK=rA.FlyTo.Rotation or rA.Rotation;rL=rA.FlyTo.Zoom or rA.Zoom;rM=rA.FlyTo.Angle or rA.Angle end;rr.PageAnimation[rI]={Clear=true,{math.abs(rA.Duration or 1),rA.Position,rA.Rotation,rA.Zoom,rA.Angle,rJ,rK,rL,rM}}end;if not rA.FOV then if rA.DialogCamera then rA.FOV=CONST_BRIEFING.DLGCAMERA_FOVDEFAULT else rA.FOV=CONST_BRIEFING.CAMERA_FOVDEFAULT end end;if not rA.Duration then if not rA.Position then rA.DisableSkipping=false;rA.Duration=-1 else if rA.DisableSkipping==nil then rA.DisableSkipping=false end;rA.Duration=rA.Text:len()*CONST_BRIEFING.TIMER_PER_CHAR;rA.Duration=rA.Duration<6 and 6 or rA.Duration end end;rA.GetSelected=function(ho)return 0 end;table.insert(this,rA)return rA end end;function Lib.BriefingSystem.Global:CreateBriefingAddMCPage(rr)rr.AddMCPage=rr.AddMCPage or function(this,rA)local rB=this:AddPage(rA)rB.GetSelected=function(ho)if ho.MC then return ho.MC.Selected end;return 0 end;if rB.MC then for f=1,#rB.MC do rB.MC[f][1]=Localize(rB.MC[f][1])rB.MC[f].ID=rB.MC[f].ID or f end;rB.BigBars=true;rB.DisableSkipping=true;rB.Duration=-1 end;return rB end end;function Lib.BriefingSystem.Global:CreateBriefingAddRedirect(rr)rr.AddRedirect=rr.AddRedirect or function(this,O)this.Length=(this.Length or 0)+1;local rB=O==nil and-1 or O;table.insert(this,rB)return rB end end;function Lib.BriefingSystem.Global:StartBriefing(C,n,ho)self.BriefingQueue[n]=self.BriefingQueue[n]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(n,CinematicEventTypes.Briefing,C,ho)end;function Lib.BriefingSystem.Global:EndBriefing(n)collectgarbage("collect")Logic.SetGlobalInvulnerability(0)local rN=self.Briefing[n]SendReport(Report.BriefingEnded,n,rN.Name)if rN.Finished then rN:Finished()end;FinishCinematicEvent(rN.Name,n)self.Briefing[n]=nil end;function Lib.BriefingSystem.Global:NextBriefing(n)if self:CanStartBriefing(n)then local rO=Lib.UIEffects.Global:PopCinematicEventFromQueue(n)assert(rO[1]==CinematicEventTypes.Briefing)StartCinematicEvent(rO[2],n)local rN=rO[3]rN.Name=rO[2]rN.PlayerID=n;rN.CurrentPage=0;self.Briefing[n]=rN;self:TransformAnimations(n)self:TransformParallaxes(n)if rN.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Briefing[n].Starting then self.Briefing[n]:Starting()end;SendReportToLocal(Report.BriefingStarted,n,rN.Name,rN)end end;function Lib.BriefingSystem.Global:TransformAnimations(n)if self.Briefing[n].PageAnimation then for Name,h in pairs(self.Briefing[n].PageAnimation)do local rE=self:GetPageIDByName(n,Name)if rE~=0 then self.Briefing[n][rE].Animations={}self.Briefing[n][rE].Animations.Repeat=h.Repeat==true;self.Briefing[n][rE].Animations.Clear=h.Clear==true;for f=1,#h,1 do local jC={}jC.Source=Name;jC.Local=h.Local==true;jC.Interpolation=h[f].Interpolation;jC.Duration=h[f][1]or 2*60;if h[f][2]and type(h[f][4])~="table"then jC.Start={Position=type(h[f][2])~="table"and{h[f][2],0}or h[f][2],Rotation=h[f][3]or CONST_BRIEFING.CAMERA_ROTATIONDEFAULT,Zoom=h[f][4]or CONST_BRIEFING.CAMERA_ZOOMDEFAULT,Angle=h[f][5]or CONST_BRIEFING.CAMERA_ANGLEDEFAULT}local rP=h[f][6]or jC.Start.Position;jC.End={Position=type(rP)~="table"and{rP,0}or rP,Rotation=h[f][7]or jC.Start.Rotation,Zoom=h[f][8]or jC.Start.Zoom,Angle=h[f][9]or jC.Start.Angle}table.insert(self.Briefing[n][rE].Animations,jC)else jC.AnimFrames={}for b8=2,#h[f]do table.insert(jC.AnimFrames,h[f][b8])end end;table.insert(self.Briefing[n][rE].Animations,jC)end end end;self.Briefing[n].PageAnimation=nil end end;function Lib.BriefingSystem.Global:TransformParallaxes(n)if self.Briefing[n].PageParallax then for Name,h in pairs(self.Briefing[n].PageParallax)do local rE=self:GetPageIDByName(n,Name)if rE~=0 then self.Briefing[n][rE].Parallax={}self.Briefing[n][rE].Parallax.Repeat=h.Repeat==true;self.Briefing[n][rE].Parallax.Clear=h.Clear==true;for f=1,4,1 do if h[f]then local jC={}jC.Source=Name;jC.Local=h.Local==true;jC.Image=h[f][1]jC.Interpolation=h[f].Interpolation;jC.Duration=h[f][2]or 2*60;jC.AnimData={}for b8=3,#h[f]do table.insert(jC.AnimData,h[f][b8])end;self.Briefing[n][rE].Parallax[f]=jC end end end end;self.Briefing[n].PageParallax=nil end end;function Lib.BriefingSystem.Global:NextPage(n)if self.Briefing[n]==nil then return end;self.Briefing[n].CurrentPage=self.Briefing[n].CurrentPage+1;local rE=self.Briefing[n].CurrentPage;if rE==-1 or rE==0 then self:EndBriefing(n)return end;local rB=self.Briefing[n][rE]if type(rB)=="table"then if rE<=#self.Briefing[n]then self.Briefing[n][rE].Started=Logic.GetTime()self.Briefing[n][rE].Duration=rB.Duration or-1;if self.Briefing[n][rE].Action then self.Briefing[n][rE]:Action()end;self:DisplayPage(n,rE)else self:EndBriefing(n)end elseif type(rB)=="number"or type(rB)=="string"then local aL=self:GetPageIDByName(n,self.Briefing[n][rE])self.Briefing[n].CurrentPage=aL-1;self:NextPage(n)else self:EndBriefing(n)end end;function Lib.BriefingSystem.Global:DisplayPage(n,rQ)if self.Briefing[n]==nil then return end;local rB=self.Briefing[n][rQ]if type(rB)=="table"then local rE=self.Briefing[n].CurrentPage;if rB.MC then for f=1,#rB.MC,1 do if type(rB.MC[f][3])=="function"then self.Briefing[n][rE].MC[f].Visible=rB.MC[f][3](n,rE,f)end end end end;SendReport(Report.BriefingPageShown,n,rQ)end;function Lib.BriefingSystem.Global:SkipButtonPressed(n,rQ)if not self.Briefing[n]then return end;self.Briefing[n].RequestPageSkip=true end;function Lib.BriefingSystem.Global:OnOptionSelected(n,rR)if self.Briefing[n]==nil then return end;local rE=self.Briefing[n].CurrentPage;if type(self.Briefing[n][rE])~="table"then return end;self.Briefing[n].RequestOptionEvaluation=rR;local rB=self.Briefing[n][rE]if rB.MC then local rG;for f=1,#rB.MC,1 do if rB.MC[f].ID==rR then rG=rB.MC[f]end end;if rG~=nil then local aL=rG[2]if type(rG[2])=="function"then aL=rG[2](n,rE,rR)end;self.Briefing[n][rE].MC.Selected=rG.ID;self.Briefing[n].CurrentPage=self:GetPageIDByName(n,aL)-1;self:NextPage(n)end end end;function Lib.BriefingSystem.Global:GetCurrentBriefing(n)return self.Briefing[n]end;function Lib.BriefingSystem.Global:GetCurrentBriefingPage(n)if self.Briefing[n]then local rE=self.Briefing[n].CurrentPage;return self.Briefing[n][rE]end end;function Lib.BriefingSystem.Global:GetPageIDByName(n,C)if type(C)=="string"then if self.Briefing[n]~=nil then for f=1,#self.Briefing[n],1 do if type(self.Briefing[n][f])=="table"and self.Briefing[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.BriefingSystem.Global:CanStartBriefing(n)return self.Briefing[n]==nil and not IsCinematicEventActive(n)and self.LoadscreenClosed end;function Lib.BriefingSystem.Local:Initialize()if not self.IsInstalled then Report.BriefingStarted=CreateReport("Event_BriefingStarted")Report.BriefingEnded=CreateReport("Event_BriefingEnded")Report.BriefingPageShown=CreateReport("Event_BriefingPageShown")Report.BriefingOptionSelected=CreateReport("Event_BriefingOptionSelected")Report.BriefingLeftClick=CreateReport("Event_BriefingLeftClick")Report.BriefingSkipButtonPressed=CreateReport("Event_BriefingSkipButtonPressed")self:OverrideThroneRoomFunctions()Lib.BriefingSystem.Global=nil end;self.IsInstalled=true end;function Lib.BriefingSystem.Local:OnSaveGameLoaded()end;function Lib.BriefingSystem.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then elseif aM==Report.BriefingStarted then self:StartBriefing(arg[1],arg[2],arg[3])elseif aM==Report.BriefingEnded then self:EndBriefing(arg[1],arg[2])elseif aM==Report.BriefingPageShown then self:DisplayPage(arg[1],arg[2])end end;function Lib.BriefingSystem.Local:StartBriefing(n,rS,rr)if GUI.GetPlayerID()~=n then return end;self.Briefing[n]=rr;self.Briefing[n].LastSkipButtonPressed=0;self.Briefing[n].CurrentPage=0;local fP,fQ=Camera.RTS_GetLookAtPosition()local rD=Camera.RTS_GetRotationAngle()local rT=Camera.RTS_GetZoomFactor()local rU=Game.GameTimeGetFactor(n)self.Briefing[n].Backup={Camera={fP,fQ,rD,rT},Throneroom={0,0},Speed=rU}DeactivateNormalInterface(n)DeactivateBorderScroll(n)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,1)if rr.PreloadAssets then ActivateColoredScreen(n,0,0,0,255)Lib.Core.Local:Preload_ViewWholeMap()end end;SendReportToGlobal(Report.BriefingStarted,n,rr.Name)RequestHiResDelay(1,function()self:ActivateCinematicMode(n)end)end;function Lib.BriefingSystem.Local:EndBriefing(n,rS)collectgarbage("collect")if GUI.GetPlayerID()~=n then return end;local rN=self.Briefing[n]if not Framework.IsNetworkGame()and rN.PreloadAssets then Lib.Core.Local:Preload_ResetView()end;if rN.RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,rN.Backup.Speed)end;if rN.RestoreCamera then Camera.RTS_SetLookAtPosition(rN.Backup.Camera[1],rN.Backup.Camera[2])Camera.RTS_SetRotationAngle(rN.Backup.Camera[3])Camera.RTS_SetZoomFactor(rN.Backup.Camera[4])else Throneroom=self.Briefing[n].Throneroom;Camera.RTS_SetLookAtPosition(Throneroom[1],Throneroom[2])end;StopVoice("BriefingSpeech")self:DeactivateCinematicMode(n)ActivateNormalInterface(n)ActivateBorderScroll(n)Lib.UITools.Widget:UpdateHiddenWidgets()self.Briefing[n]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.BriefingSystem.Local:DisplayPage(n,rQ)if GUI.GetPlayerID()~=n then return end;self.Briefing[n].AnimationQueue=self.Briefing[n].AnimationQueue or{}self.Briefing[n].ParallaxLayers=self.Briefing[n].ParallaxLayers or{}self.Briefing[n].CurrentPage=rQ;if type(self.Briefing[n][rQ])=="table"then self.Briefing[n][rQ].Started=Logic.GetTime()self:SetPageFarClipPlane(n,rQ)self:SetRender(n,rQ)self:DisplayPageBars(n,rQ)self:DisplayPageTitle(n,rQ)self:DisplayPageText(n,rQ)self:DisplayPageControls(n,rQ)self:DisplayPageAnimation(n,rQ)self:DisplayPageFader(n,rQ)self:DisplayPageParallaxes(n,rQ)if self.Briefing[n][rQ].MC then self:DisplayPageOptionsDialog(n,rQ)end end end;function Lib.BriefingSystem.Local:SetPageFarClipPlane(n,rQ)ResetRenderDistance()local rB=self.Briefing[n][rQ]if rB.FarClipPlane then SetRenderDistance(rB.FarClipPlane)end end;function Lib.BriefingSystem.Local:SetRender(n,rQ)local rB=self.Briefing[n][rQ]if rB.Performance then self:SetPerformanceMode()else self:SetQualityMode()end end;function Lib.BriefingSystem.Local:SetPerformanceMode()Display.SetUserOptionAnimationQuality(0)Display.SetUserOptionAnisotropy(0)Display.SetUserOptionReflections(0)Display.SetUserOptionTerrainQuality(0)Display.SetRenderObjectsAlphaBlendPass(0)Display.SetRenderUseBatching(0)Display.SetRenderUpdateMorphAnim(0)Display.SetEffectOption("DoNotUseRimLight",1)Display.SetEffectOption("SimpleWater",1)end;function Lib.BriefingSystem.Local:SetQualityMode()local rV=Display.GetUserOptionMaxAnimationQuality()local rW=Display.GetUserOptionMaxAnisotropy()local rX=Display.GetUserOptionMaxReflections()local rY=Display.GetUserOptionMaxTerrainQuality()Display.SetUserOptionAnimationQuality(rV)Display.SetUserOptionAnisotropy(rW)Display.SetUserOptionReflections(rX)Display.SetUserOptionTerrainQuality(rY)Display.SetRenderObjectsAlphaBlendPass(1)Display.SetRenderUseBatching(1)Display.SetRenderUpdateMorphAnim(1)Display.SetEffectOption("DoNotUseRimLight",0)Display.SetEffectOption("SimpleWater",0)end;function Lib.BriefingSystem.Local:DisplayPageBars(n,rQ)local rB=self.Briefing[n][rQ]local rZ=rB.BarOpacity~=nil and rB.BarOpacity or 1;local r_=255*rZ;local s0=255*rZ;local s1=rB.BigBars and 1 or 0;local s2=rB.BigBars and 0 or 1;if rZ==0 then s1=0;s2=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",s1)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",s2)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",s1)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",s2)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,r_)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,r_)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,s0)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,s0)end;function Lib.BriefingSystem.Local:DisplayPageTitle(n,rQ)local rB=self.Briefing[n][rQ]local s3="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(s3,"")if rB.Title then local hO=ConvertPlaceholders(Localize(rB.Title))if hO:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then hO=XGUIEng.GetStringTableText(hO)end;if hO:sub(1,1)~="{"then hO="{@color:255,250,0,255}{center}"..hO end;XGUIEng.SetText(s3,hO)end end;function Lib.BriefingSystem.Local:DisplayPageText(n,rQ)local rB=self.Briefing[n][rQ]local s4="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(s4,"")if rB.Text then local bq=ConvertPlaceholders(Localize(rB.Text))if bq:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq=XGUIEng.GetStringTableText(bq)end;if bq:sub(1,1)~="{"then bq="{center}"..bq end;if not rB.BigBars then bq="{cr}{cr}{cr}"..bq end;XGUIEng.SetText(s4,bq)end;StopVoice("BriefingSpeech")if rB.Speech then PlayVoice(rB.Speech,"BriefingSpeech")end end;function Lib.BriefingSystem.Local:DisplayPageControls(n,rQ)local rB=self.Briefing[n][rQ]local s5=1;s5=(rB.Duration==nil or rB.Duration==-1)and 1 or 0;if rB.DisableSkipping~=nil then s5=rB.DisableSkipping and 0 or 1 end;if rB.MC~=nil then s5=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",s5)end;function Lib.BriefingSystem.Local:DisplayPageAnimation(n,rQ)local rB=self.Briefing[n][rQ]if rB.Animations then local s6={}if rB.Animations.Clear then self.Briefing[n].CurrentAnimation=nil;self.Briefing[n].AnimationQueue={}elseif rB.Animations.Postpone then if self.Briefing[n].CurrentAnimation then local s7=table.copy(self.Briefing[n].CurrentAnimation)local nc=self:GetInterpolationFactor(n,true)s7.Completion=nc;table.insert(s6,s7)end;for f=1,#self.Briefing[n].AnimationQueue do local s7=table.copy(self.Briefing[n].AnimationQueue[f])table.insert(s6,s7)end;self.Briefing[n].CurrentAnimation=nil;self.Briefing[n].AnimationQueue={}end;for f=1,#rB.Animations do local s7=table.copy(rB.Animations[f])table.insert(self.Briefing[n].AnimationQueue,s7)end;for f=1,#s6 do table.insert(self.Briefing[n].AnimationQueue,s6[f])end;if self.Briefing[n].CurrentAnimation then local s7=self.Briefing[n].CurrentAnimation;if s7.Local and rB.Name~=s7.Source then self.Briefing[n].CurrentAnimation=nil end end;for f=#self.Briefing[n].AnimationQueue,1,-1 do local s7=self.Briefing[n].AnimationQueue[f]if s7.Local and rB.Name~=s7.Source then table.remove(self.Briefing[n].AnimationQueue,f)end end end end;function Lib.BriefingSystem.Local:DisplayPageFader(n,rQ)local rB=self.Briefing[n][rQ]g_Fade.To=rB.FaderAlpha or 0;local s8=rB.FadeIn;if s8 then FadeIn(s8)end;local s9=rB.FadeOut;if s9 then self.Briefing[n].FaderJob=RequestHiResJob(function(iU,sa)if Logic.GetTimeMs()>iU-sa*1000 then FadeOut(sa)return true end end,Logic.GetTimeMs()+(rB.Duration or 0)*1000,s9)end end;function Lib.BriefingSystem.Local:DisplayPageParallaxes(n,rQ)local rB=self.Briefing[n][rQ]if rB.Parallax then if rB.Parallax.Clear then for f=1,#self.ParallaxWidgets do XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],1,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],1,255,255,255,0)end;self.Briefing[n].ParallaxLayers={}end;for f=1,4,1 do if rB.Parallax[f]then local s7=table.copy(rB.Parallax[f])s7.Started=XGUIEng.GetSystemTime()self.Briefing[n].ParallaxLayers[f]=s7 end end end end;function Lib.BriefingSystem.Local:ControlParallaxes(n)if self.Briefing[n].ParallaxLayers then local iO=XGUIEng.GetSystemTime()for ax,bk in pairs(self.Briefing[n].ParallaxLayers)do local jS=self.ParallaxWidgets[ax][1]local eC={GUI.GetScreenSize()}local nc=math.lerp(bk.Started,iO,bk.Duration)if nc>1 and bk.Repeat then self.Briefing[n].ParallaxLayers[ax].Started=iO;nc=math.lerp(bk.Started,iO,bk.Duration)end;if bk.Interpolation then nc=math.min(bk:Interpolation(iO),1)end;if type(bk.Modulation)=="function"then nc=bk:Modulation(iO,nc)end;nc=math.min(math.max(nc,0),1)local sb=bk.Image;if type(sb)=="function"then sb=bk:Image(nc,bk.Started,iO,bk.Duration)end;if type(sb)=="table"then local sc=math.min(math.ceil(#sb*nc),#sb)sb=sb[sc]end;local gR,gT,gS,gU,sd=0,0,1,1,255;if bk.AnimData then if bk.AnimData[3]and type(bk.AnimData[3])~="table"then gR,gT,gS,gU,sd=unpack(bk.AnimData)else if#bk.AnimData>=2 then gR,gT,gS,gU,sd=self:BezierCurveParallax(nc,unpack(bk.AnimData))end end end;if eC[1]/eC[2]<1.6 then gR=gR+gR/0.125;gS=gS-gS*0.125 end;XGUIEng.SetMaterialColor(jS,0,255,255,255,sd or 255)XGUIEng.SetMaterialTexture(jS,0,sb)XGUIEng.SetMaterialUV(jS,0,gR,gT,gS,gU)end end end;function Lib.BriefingSystem.Local:DisplayPageOptionsDialog(n,rQ)local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local se={GUI.GetScreenSize()}local rB=self.Briefing[n][rQ]local sf=XGUIEng.GetWidgetID(jS.."/ListBox")self.Briefing[n].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(jS)}XGUIEng.ListBoxPopAll(sf)self.Briefing[n].MCSelectionOptionsMap={}for f=1,#rB.MC,1 do if rB.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(sf,rB.MC[f][1])table.insert(self.Briefing[n].MCSelectionOptionsMap,rB.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(sf,0)local sg={XGUIEng.GetWidgetScreenSize(jS)}local sh=math.ceil(se[1]/2-sg[1]/2)local si=math.ceil(se[2]-(sg[2]-10))if rB.Text and rB.Text~=""then si=math.ceil(se[2]/2-sg[2]/2)end;XGUIEng.SetWidgetScreenPosition(jS,sh,si)XGUIEng.PushPage(jS,false)XGUIEng.ShowWidget(jS,1)self.Briefing[n].MCSelectionIsShown=true end;function Lib.BriefingSystem.Local:OnOptionSelected(n)local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local R=self.Briefing[n].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(jS,R[1],R[2])XGUIEng.ShowWidget(jS,0)XGUIEng.PopPage()local fU=XGUIEng.ListBoxGetSelectedIndex(jS.."/ListBox")+1;local sj=self.Briefing[n].MCSelectionOptionsMap[fU]SendReport(Report.BriefingOptionSelected,n,sj)SendReportToGlobal(Report.BriefingOptionSelected,n,sj)end;function Lib.BriefingSystem.Local:ThroneRoomCameraControl(n,rA)if rA then self:ControlCameraAnimation(n)local sk=type(rA)=="table"and rA.FOV or 42;local sl,sm,sn,so,sp,sq=0,0,0,0,0,0;local sr=self.Briefing[n].CurrentAnimation;if sr and sr.AnimFrames then if#sr.AnimFrames>=2 then local nc=self:GetInterpolationFactor(n,true)if sr.Completion then nc=math.max(nc,sr.Completion)end;sl,sm,sn,so,sp,sq=self:SplineCurve(nc,unpack(sr.AnimFrames))else sl,sm,sn,so,sp,sq=unpack(sr.AnimFrames[1])end else sl,sm,sn=self:GetPagePosition(n)so,sp,sq=self:GetPageLookAt(n)if sl and not so then so,sp,sq,sl,sm,sn,sk=self:GetCameraProperties(n,sk)end end;Camera.ThroneRoom_SetPosition(sl,sm,sn)Camera.ThroneRoom_SetLookAt(so,sp,sq)Camera.ThroneRoom_SetFOV(sk)self.Briefing[n].Throneroom={so,sp}self:ControlParallaxes(n)if self.Briefing[n].MCSelectionIsShown then local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(jS)==0 then self.Briefing[n].MCSelectionIsShown=false;self:OnOptionSelected(n)end end;local ss=Localize(Lib.BriefingSystem.Text.NextButton)local rE=self.Briefing[n].CurrentPage;if rE==#self.Briefing[n]or self.Briefing[n][rE+1]==-1 then ss=Localize(Lib.BriefingSystem.Text.EndButton)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..ss)end end;function Lib.BriefingSystem.Local:ControlCameraAnimation(n)if self.Briefing[n].CurrentAnimation then local iO=XGUIEng.GetSystemTime()local s7=self.Briefing[n].CurrentAnimation;if iO>s7.Started+s7.Duration then if#self.Briefing[n].AnimationQueue>0 then self.Briefing[n].CurrentAnimation=nil end end end;if self.Briefing[n].CurrentAnimation==nil then if self.Briefing[n].AnimationQueue and#self.Briefing[n].AnimationQueue>0 then local rE=self.Briefing[n].CurrentPage;local rB=self.Briefing[n][rE]local hG=table.remove(self.Briefing[n].AnimationQueue,1)if rB and rB.Animations and rB.Animations.Repeat then table.insert(self.Briefing[n].AnimationQueue,hG)end;hG.Started=XGUIEng.GetSystemTime()self.Briefing[n].CurrentAnimation=hG end end end;function Lib.BriefingSystem.Local:GetPagePosition(n)local E,F,G=0,0,0;local R,st;if self.Briefing[n].CurrentAnimation then R=self.Briefing[n].CurrentAnimation.Start.Position;st=self.Briefing[n].CurrentAnimation.End;E,F,G=self:ConvertPosition(R)if st then local su,sv,sw=self:ConvertPosition(st.Position)if su and sv and sw then E=E+(su-E)*self:GetInterpolationFactor(n)F=F+(sv-F)*self:GetInterpolationFactor(n)G=G+(sw-G)*self:GetInterpolationFactor(n)end end end;return E,F,G end;function Lib.BriefingSystem.Local:GetPageLookAt(n)local LookAt,st;if self.Briefing[n].CurrentAnimation then LookAt=self.Briefing[n].CurrentAnimation.Start.LookAt;st=self.Briefing[n].CurrentAnimation.End end;local E,F,G=self:ConvertPosition(LookAt)if st and E then local su,sv,sw=self:ConvertPosition(st.LookAt)if su and sv and sw then E=E+(su-E)*self:GetInterpolationFactor(n)F=F+(sv-F)*self:GetInterpolationFactor(n)G=G+(sw-G)*self:GetInterpolationFactor(n)end end;return E,F,G end;function Lib.BriefingSystem.Local:ConvertPosition(B)local E,F,G;if B and type(B)=="table"then if B.X then E=B.X;F=B.Y;G=B.Z elseif B[3]then E=B[1]F=B[2]G=B[3]else E,F,G=Logic.EntityGetPos(GetID(B[1]))G=G+(B[2]or 0)end end;return E,F,G end;function Lib.BriefingSystem.Local:GetInterpolationFactor(n,sx)if self.Briefing[n].CurrentAnimation then local iO=XGUIEng.GetSystemTime()local bk=self.Briefing[n].CurrentAnimation;local nc=1;if bk.Interpolation then nc=bk:Interpolation(iO)else nc=math.lerp(self.Briefing[n].CurrentAnimation.Started,iO,self.Briefing[n].CurrentAnimation.Duration)end;if type(bk.Modulation)=="function"then nc=bk:Modulation(iO,nc)elseif sx then nc=self:ModulateInterpolationFactor(nc)end;return math.min(math.max(nc,0),1)end;return 1 end;function Lib.BriefingSystem.Local:ModulateInterpolationFactor(sy)return 1/(0.97+math.exp(-8*(sy-0.5)))-0.01 end;function Lib.BriefingSystem.Local:SplineCurve(sy,...)local sz={...}local d1=#sz;sy=math.max(0,math.min(1,sy))local sA=math.floor((d1-1)*sy)+1;local sB=sy*(d1-1)%1;local sC=sz[math.max(1,sA-1)]local sD=sz[sA]local sE=sz[math.min(sA+1,d1)]local sF=sz[math.min(sA+2,d1)]local aC=self:CatmullRom(sB,sC[1],sD[1],sE[1],sF[1])local aD=self:CatmullRom(sB,sC[2],sD[2],sE[2],sF[2])local aE=self:CatmullRom(sB,sC[3],sD[3],sE[3],sF[3])local sG=math.floor((d1-1)*sy)+1;local sH=sy*(d1-1)%1;local sI=sz[math.max(1,sG-1)]local sJ=sz[sG]local sK=sz[math.min(sG+1,d1)]local sL=sz[math.min(sG+2,d1)]local aG=self:CatmullRom(sH,sI[4],sJ[4],sK[4],sL[4])local aH=self:CatmullRom(sH,sI[5],sJ[5],sK[5],sL[5])local aI=self:CatmullRom(sH,sI[6],sJ[6],sK[6],sL[6])return aC,aD,aE,aG,aH,aI end;function Lib.BriefingSystem.Local:CatmullRom(cR,sC,sD,sE,sF)local cP=cR*cR;local sM=cP*cR;local sN=-0.5*sM+cP-0.5*cR;local sO=1.5*sM-2.5*cP+1;local sP=-1.5*sM+2*cP+0.5*cR;local sQ=0.5*sM-0.5*cP;return sN*sC+sO*sD+sP*sE+sQ*sF end;function Lib.BriefingSystem.Local:BezierCurveParallax(sy,...)sy=math.max(0,math.min(1,sy))local sz={...}local d1=#sz;local sR,sS,sT,sU,sV=0,0,0,0,0;for f=1,d1 do local c_=self:BernsteinPolynome(d1-1,f-1,sy)sR=sR+sz[f][1]*c_;sS=sS+sz[f][2]*c_;sT=sT+sz[f][3]*c_;sU=sU+sz[f][4]*c_;sV=sV+sz[f][5]*c_ end;return sR,sS,sT,sU,sV end;function Lib.BriefingSystem.Local:BernsteinPolynome(d1,f,cR)return math.factorial(d1)/(math.factorial(f)*math.factorial(d1-f))*cR^f*(1-cR)^(d1-f)end;function Lib.BriefingSystem.Local:GetCameraProperties(n,sW)local sX,st;if self.Briefing[n].CurrentAnimation then sX=self.Briefing[n].CurrentAnimation.Start;st=self.Briefing[n].CurrentAnimation.End end;local sY=sX.Position;local sZ=st and st.Position or sX.Position;local s_=sX.Rotation;local t0=st and st.Rotation or sX.Rotation;local t1=sX.Angle;local t2=st and st.Angle or sX.Angle;local t3=sX.Zoom;local t4=st and st.Zoom or sX.Zoom;local t5=self:GetInterpolationFactor(n)local t6,t7,t8=self:ConvertPosition(sY)local t9,ta,tb=self:ConvertPosition(sZ)local tc=t6+(t9-t6)*t5;local td=t7+(ta-t7)*t5;local te=t8+(tb-t8)*t5;local tf=t3+(t4-t3)*t5;local tg=t1+(t2-t1)*t5;local hu=s_+(t0-s_)*t5;local th=tf*math.cos(math.rad(tg))local ti=tc+math.cos(math.rad(hu-90))*th;local tj=td+math.sin(math.rad(hu-90))*th;local tk=te+tf*math.sin(math.rad(tg))return tc,td,te,ti,tj,tk,sW end;function Lib.BriefingSystem.Local:SkipButtonPressed(n)if not self.Briefing[n]then return end;if self.Briefing[n].LastSkipButtonPressed+5<Logic.GetCurrentTurn()then self.Briefing[n].LastSkipButtonPressed=Logic.GetCurrentTurn()SendReportToGlobal(Report.BriefingSkipButtonPressed,n)SendReport(Report.BriefingSkipButtonPressed,n)end end;function Lib.BriefingSystem.Local:GetCurrentBriefing(n)return self.Briefing[n]end;function Lib.BriefingSystem.Local:GetCurrentBriefingPage(n)if self.Briefing[n]then local rE=self.Briefing[n].CurrentPage;return self.Briefing[n][rE]end end;function Lib.BriefingSystem.Local:GetPageIDByName(n,C)if type(C)=="string"then if self.Briefing[n]~=nil then for f=1,#self.Briefing[n],1 do if type(self.Briefing[n][f])=="table"and self.Briefing[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.BriefingSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Lib_Camera_ThroneRoomLeftClick=GameCallback_Lib_Camera_ThroneRoomLeftClick;GameCallback_Lib_Camera_ThroneRoomLeftClick=function(n)Lib.BriefingSystem.Local.Orig_GameCallback_Lib_Camera_ThroneRoomLeftClick(n)if n==GUI.GetPlayerID()then SendReportToGlobal(Report.BriefingLeftClick,n)SendReport(Report.BriefingLeftClick,n)end end;self.Orig_GameCallback_Lib_Camera_SkipButtonPressed=GameCallback_Lib_Camera_SkipButtonPressed;GameCallback_Lib_Camera_SkipButtonPressed=function(n)Lib.BriefingSystem.Local.Orig_GameCallback_Lib_Camera_SkipButtonPressed(n)if n==GUI.GetPlayerID()then Lib.BriefingSystem.Local:SkipButtonPressed(n)end end;self.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl=GameCallback_Lib_Camera_ThroneroomCameraControl;GameCallback_Lib_Camera_ThroneroomCameraControl=function(n)Lib.BriefingSystem.Local.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl(n)if n==GUI.GetPlayerID()then local rN=Lib.BriefingSystem.Local:GetCurrentBriefing(n)if rN~=nil then Lib.BriefingSystem.Local:ThroneRoomCameraControl(n,Lib.BriefingSystem.Local:GetCurrentBriefingPage(n))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.BriefingSystem.Local.Briefing[GUI.GetPlayerID()]then return end;Lib.BriefingSystem.Local.Orig_GameCallback_Escape()end end;function Lib.BriefingSystem.Local:ActivateCinematicMode(n)if self.CinematicActive or GUI.GetPlayerID()~=n then return end;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local tl,tm=GUI.GetScreenSize()local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;function EndScreen_ExitGame()end;function MissionFadeInEndScreen()end;for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],1)if not self.ParallaxWidgets.Pushed[self.ParallaxWidgets[f][2]]then self.ParallaxWidgets.Pushed[self.ParallaxWidgets[f][2]]=true;XGUIEng.PushPage(self.ParallaxWidgets[f][2],false)end;XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],1)XGUIEng.SetMaterialTexture(self.ParallaxWidgets[f][1],0,"")XGUIEng.SetMaterialColor(self.ParallaxWidgets[f][1],0,255,255,255,0)XGUIEng.SetMaterialUV(self.ParallaxWidgets[f][1],0,0,0,1,1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",0)XGUIEng.ShowWidget("/InGame/Root/PresentationLoadingScreen/Logo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local E,F=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",E,65*tm/1080)XGUIEng.SetWidgetPositionAndSize("/InGame/ThroneRoom/KnightInfo/Objectives",2,0,2000,20)if self.Briefing[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",0)end;self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Briefing[n].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Briefing[n].EnableSky then Display.SetRenderSky(1)end;if not self.Briefing[n].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()XGUIEng.PushPage("/InGame/ThroneRoom/Main/MissionBriefing",false)g_Fade.To=0;SetFaderAlpha(0)if tn then ShowScriptConsole()end;if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end;if self.Briefing[n].PreloadAssets then DeactivateColoredScreen(n)end;self.CinematicActive=true end;function Lib.BriefingSystem.Local:DeactivateCinematicMode(n)if not self.CinematicActive or GUI.GetPlayerID()~=n then return end;local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.ShowWidget("/EndScreen/EndScreen/BG",1)XGUIEng.ShowWidget("/InGame/Root/PresentationLoadingScreen/Logo",1)self.ParallaxWidgets.Pushed={}for f=1,#self.ParallaxWidgets do XGUIEng.ShowWidget(self.ParallaxWidgets[f][1],0)XGUIEng.ShowWidget(self.ParallaxWidgets[f][2],0)XGUIEng.PopPage()end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)if self.Briefing[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",1)end;ResetRenderDistance()self:SetQualityMode()if tn then ShowScriptConsole()end;self.CinematicActive=false end;function Lib.BriefingSystem.Local:IsChangingGraphicsPermited()return self.Config.DoAlternateGraphics==true end;function Lib.BriefingSystem.Local:RequestAlternateGraphics()if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.BriefingSystem.Text.Request.Title,Lib.BriefingSystem.Text.Request.Text,function(jA)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=jA==true end,false)end;RegisterModule(Lib.BriefingSystem.Name)Lib.Register("module/information/CutsceneSystem_Behavior")function Reprisal_Cutscene(C,to)return B_Reprisal_Cutscene:new(C,to)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(bh,bi)if bh==0 then self.CutsceneName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Cutscene:CustomFunction(bg)_G[self.Function](self.CutsceneName,bg.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(bg)if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Cutscene)function Reward_Cutscene(C,to)return B_Reward_Cutscene:new(C,to)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Cutscene)function Trigger_Cutscene(C,n,dX)return B_Trigger_Cutscene:new(C,n,dX)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(bh,bi)if bh==0 then self.CutsceneName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Cutscene:CustomFunction(bg)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Cutscene)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/CutsceneSystem_API")function StartCutscene(to,C,n)if GUI then return end;local q=n;if not q and not Framework.IsNetworkGame()then q=1 end;assert(C~=nil)assert(n~=nil)assert(type(to)=="table","Cutscene must be a table!")assert(#to>0,"Cutscene does not contain pages!")for f=1,#to do assert(type(to[f])~="table"or to[f].__Legit,"A page is not initialized!")end;if to.EnableSky==nil then to.EnableSky=true end;if to.EnableFoW==nil then to.EnableFoW=false end;if to.HideNotes==nil then to.HideNotes=false end;if to.EnableGlobalImmortality==nil then to.EnableGlobalImmortality=true end;if to.EnableBorderPins==nil then to.EnableBorderPins=false end;Lib.CutsceneSystem.Global:StartCutscene(C,q,to)end;API.StartCutscene=StartCutscene;function RequestCutsceneAlternateGraphics()if not GUI then ExecuteLocal("RequestCutsceneAlternateGraphics()")return end;Lib.BriefingSystem.Local:RequestAlternateGraphics()end;API.RequestCutsceneAlternateGraphics=RequestCutsceneAlternateGraphics;function IsCutsceneActive(n)if not IsLocalScript()then return Lib.CutsceneSystem.Global:GetCurrentCutscene(n)~=nil end;return Lib.CutsceneSystem.Local:GetCurrentCutscene(n)~=nil end;API.IsCutsceneActive=IsCutsceneActive;function AddCutscenePages(to)Lib.CutsceneSystem.Global:CreateCutsceneGetPage(to)Lib.CutsceneSystem.Global:CreateCutsceneAddPage(to)local AP=function(rA)return to:AddPage(rA)end;return AP end;API.AddCutscenePages=AddCutscenePages;function AP(ho)assert(false)end;Lib.Register("module/information/CutsceneSystem_Text")Lib.CutsceneSystem.Text={FastForwardActivate={de="Beschleunigen",en="Fast Forward",fr="Accélérer"},FastForwardDeactivate={de="Zurücksetzen",en="Normal Speed",fr="Réinitialiser"},FastFormardMessage={de="SCHNELLER VORLAUF",en="FAST FORWARD",fr="AVANCÉ RAPIDE"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.CutsceneSystem=Lib.CutsceneSystem or{}Lib.CutsceneSystem.Name="CutsceneSystem"Lib.CutsceneSystem.Global={Cutscene={},CutsceneQueue={},CutsceneCounter=0}Lib.CutsceneSystem.Local={Config={DoAlternateGraphics=true},Cutscene={}}Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/settings/Sound")Lib.Require("module/information/Requester")Lib.Require("module/information/CutsceneSystem_Text")Lib.Require("module/information/CutsceneSystem_API")Lib.Require("module/information/CutsceneSystem_Behavior")Lib.Register("module/information/CutsceneSystem")CinematicEventTypes.Cutscene=3;function Lib.CutsceneSystem.Global:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")for f=1,8 do self.CutsceneQueue[f]={}end;RequestHiResJob(function()Lib.CutsceneSystem.Global:UpdateQueue()end)Lib.CutsceneSystem.Local=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Global:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then elseif aM==Report.CutsceneStarted then elseif aM==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aM==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aM==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aM==Report.CutsceneSkipButtonPressed then SendReportToLocal(Report.CutsceneSkipButtonPressed,arg[1])elseif aM==Report.CutscenePageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.CutsceneSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartCutscene(f)then local hG=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if hG and hG[1]==CinematicEventTypes.Cutscene then self:NextCutscene(f)end end end end;function Lib.CutsceneSystem.Global:CreateCutsceneGetPage(to)to.GetPage=function(self,n,rH)local ar=Lib.CutsceneSystem.Global:GetPageIDByName(n,rH)return Lib.CutsceneSystem.Global.Cutscene[n][ar]end end;function Lib.CutsceneSystem.Global:CreateCutsceneAddPage(to)to.AddPage=function(self,rA)if type(rA)=="table"then rA.__Legit=true;rA.Title=Localize(rA.Title)if rA.Text then rA.Text=Localize(rA.Text)end;if rA.Lines then rA.Lines=Localize(rA.Lines)end;if not rA.Lines and not rA.Text then assert(false,"Missing Lines or Text attribute!")return end;if rA.BigBars==nil then rA.BigBars=false end end;table.insert(to,rA)return rA end end;function Lib.CutsceneSystem.Global:StartCutscene(C,n,ho)self.CutsceneQueue[n]=self.CutsceneQueue[n]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(n,CinematicEventTypes.Cutscene,C,ho)end;function Lib.CutsceneSystem.Global:EndCutscene(n)collectgarbage("collect")Logic.SetGlobalInvulnerability(0)SendReportToLocal(Report.CutsceneEnded,n)if self.Cutscene[n].Finished then self.Cutscene[n]:Finished()end;FinishCinematicEvent(self.Cutscene[n].Name,n)self.Cutscene[n]=nil end;function Lib.CutsceneSystem.Global:NextCutscene(n)if self:CanStartCutscene(n)then local tp=Lib.UIEffects.Global:PopCinematicEventFromQueue(n)assert(tp[1]==CinematicEventTypes.Cutscene)StartCinematicEvent(tp[2],n)local tq=tp[3]tq.Name=tp[2]tq.PlayerID=n;tq.BarOpacity=tq.BarOpacity or 1;tq.CurrentPage=0;self.Cutscene[n]=tq;if tq.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Cutscene[n].Starting then self.Cutscene[n]:Starting()end;SendReportToLocal(Report.CutsceneStarted,n,tq.Name,tq)SendReport(Report.CutsceneStarted,n,tq.Name)end end;function Lib.CutsceneSystem.Global:StartCutsceneFlight(n,rQ,tr)if self.Cutscene[n]==nil then return end;self.Cutscene[n][rQ].Duration=tr;if self.Cutscene[n][rQ].Action then self.Cutscene[n][rQ]:Action()end;SendReportToLocal(Report.CutsceneFlightStarted,n,rQ,tr)end;function Lib.CutsceneSystem.Global:EndCutsceneFlight(n,rQ)if self.Cutscene[n]==nil then return end;SendReportToLocal(Report.CutsceneFlightEnded,n,rQ)end;function Lib.CutsceneSystem.Global:DisplayPage(n,rQ,tr)if self.Cutscene[n]==nil then return end;SendReportToGlobal(Report.CutscenePageShown,n,rQ,tr)end;function Lib.CutsceneSystem.Global:GetCurrentCutscene(n)return self.Cutscene[n]end;function Lib.CutsceneSystem.Global:GetCurrentCutscenePage(n)if self.Cutscene[n]then local rE=self.Cutscene[n].CurrentPage;return self.Cutscene[n][rE]end end;function Lib.CutsceneSystem.Global:GetPageIDByName(n,C)if type(C)=="string"then if self.Cutscene[n]~=nil then for f=1,#self.Cutscene[n],1 do if type(self.Cutscene[n][f])=="table"and self.Cutscene[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.CutsceneSystem.Global:CanStartCutscene(n)return self.Cutscene[n]==nil and not IsCinematicEventActive(n)and self.LoadscreenClosed end;function Lib.CutsceneSystem.Local:Initialize()if not self.IsInstalled then Report.CutsceneStarted=CreateReport("Event_CutsceneStarted")Report.CutsceneEnded=CreateReport("Event_CutsceneEnded")Report.CutscenePageShown=CreateReport("Event_CutscenePageShown")Report.CutsceneSkipButtonPressed=CreateReport("Event_CutsceneSkipButtonPressed")Report.CutsceneFlightStarted=CreateReport("Event_CutsceneFlightStarted")Report.CutsceneFlightEnded=CreateReport("Event_CutsceneFlightEnded")self:OverrideThroneRoomFunctions()Lib.CutsceneSystem.Global=nil end;self.IsInstalled=true end;function Lib.CutsceneSystem.Local:OnSaveGameLoaded()end;function Lib.CutsceneSystem.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then elseif aM==Report.CutsceneStarted then self:StartCutscene(arg[1],arg[2],arg[3])elseif aM==Report.CutsceneEnded then self:EndCutscene(arg[1])elseif aM==Report.CutsceneFlightStarted then self:StartCutsceneFlight(arg[1],arg[2],arg[3])elseif aM==Report.CutsceneFlightEnded then self:EndCutsceneFlight(arg[1],arg[2])elseif aM==Report.CutsceneSkipButtonPressed then self:SkipButtonPressed(arg[1])elseif aM==Report.CutscenePageShown then end end;function Lib.CutsceneSystem.Local:StartCutscene(n,ts,to)if GUI.GetPlayerID()~=n then return end;self.Cutscene[n]=to;self.Cutscene[n].LastSkipButtonPressed=0;self.Cutscene[n].CurrentPage=0;DeactivateNormalInterface(n)DeactivateBorderScroll(n)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,1)end;self:ActivateCinematicMode(n)self:NextFlight(n)end;function Lib.CutsceneSystem.Local:EndCutscene(n)collectgarbage("collect")if GUI.GetPlayerID()~=n then return end;if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,1)end;StopVoice("CutsceneSpeech")self:DeactivateCinematicMode(n)ActivateNormalInterface(n)ActivateBorderScroll(n)Lib.UITools.Widget:UpdateHiddenWidgets()self.Cutscene[n]=nil end;function Lib.CutsceneSystem.Local:NextFlight(n)if self.Cutscene[n]then self.Cutscene[n].CurrentPage=self.Cutscene[n].CurrentPage+1;local rE=self.Cutscene[n].CurrentPage;if self.Cutscene[n][rE]then local tt=self.Cutscene[n][rE].Flight;if Camera.IsValidCutscene(tt)then if GUI.GetPlayerID()==n then Camera.StartCutscene(tt)end else error("Lib.CutsceneSystem.Local:NextFlight: %s is an invalid flight!",tostring(tt))self:PropagateCutsceneEnded(n)end else self:PropagateCutsceneEnded(n)end end end;function Lib.CutsceneSystem.Local:PropagateCutsceneEnded(n)if not self.Cutscene[n]then return end;SendReportToGlobal(Report.CutsceneEnded,n)end;function Lib.CutsceneSystem.Local:FlightStarted(tr)local q=GUI.GetPlayerID()if self.Cutscene[q]then local rE=self.Cutscene[q].CurrentPage;local rB=self.Cutscene[q][rE]if rB.FarClipPlane then SetRenderDistance(rB.FarClipPlane)end;SendReportToGlobal(Report.CutsceneFlightStarted,q,rE,tr)end end;CutsceneFlightStarted=function(tr)Lib.CutsceneSystem.Local:FlightStarted(tr)end;function Lib.CutsceneSystem.Local:StartCutsceneFlight(n,rQ,tr)if self.Cutscene[n]==nil then return end;self:DisplayPage(n,rQ,tr)end;function Lib.CutsceneSystem.Local:FlightFinished()local q=GUI.GetPlayerID()if self.Cutscene[q]then local rE=self.Cutscene[q].CurrentPage;SendReportToGlobal(Report.CutsceneFlightEnded,q,rE)end end;CutsceneFlightFinished=function()Lib.CutsceneSystem.Local:FlightFinished()end;function Lib.CutsceneSystem.Local:EndCutsceneFlight(n,rQ)if self.Cutscene[n]==nil then return end;self:NextFlight(n)end;function Lib.CutsceneSystem.Local:DisplayPage(n,rQ,tr)if GUI.GetPlayerID()~=n then return end;self.Cutscene[n].AnimationQueue=self.Cutscene[n].AnimationQueue or{}self.Cutscene[n].CurrentPage=rQ;if type(self.Cutscene[n][rQ])=="table"then self.Cutscene[n][rQ].Started=Logic.GetTime()self.Cutscene[n][rQ].Duration=tr;ResetRenderDistance()self:DisplayPageBars(n,rQ)self:DisplayPageTitle(n,rQ)self:DisplayPageText(n,rQ)self:DisplayPageControls(n,rQ)self:DisplayPageFader(n,rQ)SendReportToGlobal(Report.CutscenePageShown,n,rQ,tr)end end;function Lib.CutsceneSystem.Local:DisplayPageBars(n,rQ)local rB=self.Cutscene[n][rQ]local rZ=rB.Opacity~=nil and rB.Opacity or 1;local r_=255*rZ;local s0=255*rZ;local s1=rB.BigBars and 1 or 0;local s2=rB.BigBars and 0 or 1;if rZ==0 then s1=0;s2=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoomBars",s1)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",s2)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",s1)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",s2)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarBottom",1,r_)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars/BarTop",1,r_)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarBottom",1,s0)XGUIEng.SetMaterialAlpha("/InGame/ThroneRoomBars_2/BarTop",1,s0)end;function Lib.CutsceneSystem.Local:DisplayPageTitle(n,rQ)local rB=self.Cutscene[n][rQ]local s3="/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight"XGUIEng.SetText(s3,"")if rB.Title then local hO=ConvertPlaceholders(Localize(rB.Title))if hO:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then hO=XGUIEng.GetStringTableText(hO)end;if hO:sub(1,1)~="{"then hO="{@color:255,250,0,255}{center}"..hO end;XGUIEng.SetText(s3,hO)end end;function Lib.CutsceneSystem.Local:DisplayPageText(n,rQ)local rB=self.Cutscene[n][rQ]local s4="/InGame/ThroneRoom/Main/MissionBriefing/Text"XGUIEng.SetText(s4,"")if rB.Text then local bq=ConvertPlaceholders(Localize(rB.Text))if bq:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then bq=XGUIEng.GetStringTableText(bq)end;if bq:sub(1,1)~="{"then bq="{center}"..bq end;if not rB.BigBars then bq="{cr}{cr}{cr}"..bq end;XGUIEng.SetText(s4,bq)end;StopVoice("CutsceneSpeech")if rB.Speech then PlayVoice(rB.Speech,"CutsceneSpeech")end end;function Lib.CutsceneSystem.Local:DisplayPageControls(n,rQ)local rB=self.Cutscene[n][rQ]local s5=1;if rB.DisableSkipping==true then self.Cutscene[n].FastForward=false;Game.GameTimeSetFactor(n,1)s5=0 end;XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",s5)end;function Lib.CutsceneSystem.Local:DisplayPageFader(n,rQ)local rB=self.Cutscene[n][rQ]g_Fade.To=rB.FaderAlpha or 0;local s8=rB.FadeIn;if s8 then FadeIn(s8)end;local s9=rB.FadeOut;if s9 then self.Cutscene[n].FaderJob=RequestHiResJob(function(iU,sa)if Logic.GetTimeMs()>iU-sa*1000 then FadeOut(sa)return true end end,rB.Started*1000+rB.Duration*100,s9)end end;function Lib.CutsceneSystem.Local:ThroneRoomCameraControl(n,rA)if rA then if rA.DisableSkipping then XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")return end;local ss=Localize(Lib.CutsceneSystem.Text.FastForwardActivate)if self.Cutscene[n].FastForward then ss=Localize(Lib.CutsceneSystem.Text.FastForwardDeactivate)end;XGUIEng.SetText("/InGame/ThroneRoom/Main/Skip","{center}"..ss)if self.Cutscene[n].FastForward then local tu=GetSecondsRealTime()if not self.Cutscene[n].FastForwardRealTime then self.Cutscene[n].FastForwardRealTime=tu end;if self.Cutscene[n].FastForwardRealTime<tu then self.Cutscene[n].FastForwardIndent=(self.Cutscene[n].FastForwardIndent or 0)+1;if self.Cutscene[n].FastForwardIndent>4 then self.Cutscene[n].FastForwardIndent=1 end;self.Cutscene[n].FastForwardRealTime=tu end;local bq="{cr}{cr}"..Localize(Lib.CutsceneSystem.Text.FastFormardMessage)local tv=string.rep("  ",self.Cutscene[n].FastForwardIndent or 0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",bq..tv..". . .")else XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")end end end;function Lib.CutsceneSystem.Local:SkipButtonPressed(n)if self.Cutscene[n]==nil then return end;if self.Cutscene[n].LastSkipButtonPressed+500<Logic.GetTimeMs()then self.Cutscene[n].LastSkipButtonPressed=Logic.GetTimeMs()if not Framework.IsNetworkGame()then if self.Cutscene[n].FastForward then self.Cutscene[n].FastForward=false;Game.GameTimeSetFactor(n,1)else self.Cutscene[n].FastForward=true;Game.GameTimeSetFactor(n,10)end end end end;function Lib.CutsceneSystem.Local:GetCurrentCutscene(n)return self.Cutscene[n]end;function Lib.CutsceneSystem.Local:GetCurrentCutscenePage(n)if self.Cutscene[n]then local rE=self.Cutscene[n].CurrentPage;return self.Cutscene[n][rE]end end;function Lib.CutsceneSystem.Local:GetPageIDByName(n,C)if type(C)=="string"then if self.Cutscene[n]~=nil then for f=1,#self.Cutscene[n],1 do if type(self.Cutscene[n][f])=="table"and self.Cutscene[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.CutsceneSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Lib_Camera_SkipButtonPressed=GameCallback_Lib_Camera_SkipButtonPressed;GameCallback_Lib_Camera_SkipButtonPressed=function(n)Lib.CutsceneSystem.Local.Orig_GameCallback_Lib_Camera_SkipButtonPressed(n)if n==GUI.GetPlayerID()then SendReportToGlobal(Report.CutsceneSkipButtonPressed,n)end end;self.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl=GameCallback_Lib_Camera_ThroneroomCameraControl;GameCallback_Lib_Camera_ThroneroomCameraControl=function(n)Lib.CutsceneSystem.Local.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl(n)if n==GUI.GetPlayerID()then local tq=Lib.CutsceneSystem.Local:GetCurrentCutscene(n)if tq~=nil then Lib.CutsceneSystem.Local:ThroneRoomCameraControl(n,Lib.CutsceneSystem.Local:GetCurrentCutscenePage(n))end end end;self.Orig_GameCallback_Escape=GameCallback_Escape;GameCallback_Escape=function()if Lib.CutsceneSystem.Local.Cutscene[GUI.GetPlayerID()]then return end;Lib.CutsceneSystem.Local.Orig_GameCallback_Escape()end end;function Lib.CutsceneSystem.Local:ActivateCinematicMode(n)if self.CinematicActive or GUI.GetPlayerID()~=n then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;local tl,tm=GUI.GetScreenSize()XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoomBars",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2",false)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_Dodge",false)XGUIEng.PushPage("/InGame/ThroneRoomBars_2_Dodge",false)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Skip",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/StartButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/Frame",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/DialogBG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogTopChooseKnight/FrameEdges",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/DialogBottomRight3pcs",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/KnightInfoButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Briefing",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/BackButton",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/Cutscene",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/TitleContainer",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Text",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Title",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/MissionBriefing/Objectives",1)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/BG",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo/LeftFrame",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")local E,F=XGUIEng.GetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight")XGUIEng.SetWidgetScreenPosition("/InGame/ThroneRoom/Main/DialogTopChooseKnight/ChooseYourKnight",E,65*tm/1080)if self.Cutscene[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",0)end;self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Cutscene[n].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Cutscene[n].EnableSky then Display.SetRenderSky(1)end;if not self.Cutscene[n].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(5)InitializeFader()g_Fade.To=1;SetFaderAlpha(1)if tn then ShowScriptConsole()end;if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.CutsceneSystem.Local:DeactivateCinematicMode(n)if not self.CinematicActive or GUI.GetPlayerID()~=n then return end;self.CinematicActive=false;local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionBriefing/Objectives"," ")if self.Cutscene[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",1)end;ResetRenderDistance()if tn then ShowScriptConsole()end end;function Lib.CutsceneSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.CutsceneSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if Lib.DialogSystem then return Lib.DialogSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.CutsceneSystem.Text.Request.Title,Lib.CutsceneSystem.Text.Request.Text,function(jA)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=jA==true end,false)end;RegisterModule(Lib.CutsceneSystem.Name)Lib.Register("module/information/DialogSystem_Behavior")function Reprisal_Dialog(C,tw)return B_Reprisal_Dialog:new(C,tw)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(bh,bi)if bh==0 then self.DialogName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Dialog:CustomFunction(bg)_G[self.Function](self.DialogName,bg.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(bg)if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Dialog)function Reward_Dialog(C,tw)return B_Reward_Dialog:new(C,tw)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Dialog)function Trigger_Dialog(C,n,dX)return B_Trigger_Dialog:new(C,n,dX)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(bh,bi)if bh==0 then self.DialogName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Dialog:CustomFunction(bg)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Dialog)Lib.Require("comfort/IsLocalScript")Lib.Register("module/information/DialogSystem_API")function StartDialog(tw,C,n)if GUI then return end;local q=n;if not q and not Framework.IsNetworkGame()then q=1 end;assert(C~=nil)assert(n~=nil)assert(type(tw)=="table","Dialog must be a table!")assert(#tw>0,"Dialog does not contain pages!")for f=1,#tw do assert(type(tw[f])~="table"or tw[f].__Legit,"Page is not initialized!")end;if tw.EnableSky==nil then tw.EnableSky=true end;if tw.EnableFoW==nil then tw.EnableFoW=false end;if tw.HideNotes==nil then tw.HideNotes=false end;if tw.EnableGlobalImmortality==nil then tw.EnableGlobalImmortality=true end;if tw.EnableBorderPins==nil then tw.EnableBorderPins=false end;if tw.RestoreGameSpeed==nil then tw.RestoreGameSpeed=true end;if tw.RestoreCamera==nil then tw.RestoreCamera=true end;Lib.DialogSystem.Global:StartDialog(C,q,tw)end;API.StartDialog=StartDialog;function RequestDialogAlternateGraphics()if not GUI then ExecuteLocal("RequestDialogAlternateGraphics()")return end;Lib.DialogSystem.Local:RequestAlternateGraphics()end;API.RequestDialogAlternateGraphics=RequestDialogAlternateGraphics;function IsDialogActive(n)if not IsLocalScript()then return Lib.DialogSystem.Global:GetCurrentDialog(n)~=nil end;return Lib.DialogSystem.Local:GetCurrentDialog(n)~=nil end;API.IsDialogActive=IsDialogActive;function AddDialogPages(tw)Lib.DialogSystem.Global:CreateDialogGetPage(tw)Lib.DialogSystem.Global:CreateDialogAddPage(tw)Lib.DialogSystem.Global:CreateDialogAddMCPage(tw)Lib.DialogSystem.Global:CreateDialogAddRedirect(tw)local AP=function(rA)local rB;if type(rA)=="table"then if rA.MC then rB=tw:AddMCPage(rA)else rB=tw:AddPage(rA)end else rB=tw:AddRedirect(rA)end;return rB end;local ASP=function(...)if type(arg[1])~="number"then Name=table.remove(arg,1)end;local bR=table.remove(arg,1)local R=table.remove(arg,1)local hO=table.remove(arg,1)local bq=table.remove(arg,1)local tx=table.remove(arg,1)local jy;if type(arg[1])=="function"then jy=table.remove(arg,1)end;return tw:AddPage{Name=Name,Title=hO,Text=bq,Actor=bR,Target=R,DialogCamera=tx==true,Action=jy}end;return AP,ASP end;API.AddDialogPages=AddDialogPages;function AP(ho)assert(false)end;function ASP(...)assert(false)end;Lib.Register("module/information/DialogSystem_Text")Lib.DialogSystem.Text={Continue={de="{cr}{cr}{azure}Weiter mit ESC",en="{cr}{cr}{azure}Continue with ESC",fr="{cr}{cr}{azure}Continuer avec ESC"},Request={Title={de="Grafik ändern",en="Alternate Graphics",fr="Graphiques alternatifs"},Text={de="Während des Spiels können die Grafikeinstellungen durch das Mapscript vorübergehend geändert werden. Willst du das zulassen?",en="During gameplay the graphic settings might be changed temporarily by the mapscript. Do you want to allow that?",fr="Pendant le jeu, les paramètres graphiques peuvent être modifiés temporairement par le mapscript. Voulez-vous autoriser cela?"}}}Lib.DialogSystem=Lib.DialogSystem or{}Lib.DialogSystem.Name="DialogSystem"Lib.DialogSystem.Global={Dialog={},DialogQueue={},DialogCounter=0}Lib.DialogSystem.Local={Config={DoAlternateGraphics=true},Dialog={}}CONST_DIALOG={TIMER_PER_CHAR=0.175,CAMERA_ANGLEDEFAULT=43,CAMERA_ROTATIONDEFAULT=-45,CAMERA_ZOOMDEFAULT=6500,CAMERA_FOVDEFAULT=42,DLGCAMERA_ANGLEDEFAULT=27,DLGCAMERA_ROTATIONDEFAULT=-45,DLGCAMERA_ZOOMDEFAULT=1750,DLGCAMERA_FOVDEFAULT=25}Lib.Require("comfort/GetPosition")Lib.Require("comfort/IsMultiplayer")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/settings/Sound")Lib.Require("module/information/Requester")Lib.Require("module/information/DialogSystem_Text")Lib.Require("module/information/DialogSystem_API")Lib.Require("module/information/DialogSystem_Behavior")Lib.Register("module/information/DialogSystem")CinematicEventTypes.Dialog=5;function Lib.DialogSystem.Global:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")for f=1,8 do self.DialogQueue[f]={}end;RequestHiResJob(function()Lib.DialogSystem.Global:UpdateQueue()Lib.DialogSystem.Global:DialogExecutionController()end)Lib.DialogSystem.Local=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Global:OnSaveGameLoaded()end;function Lib.DialogSystem.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then self:SkipButtonPressed(arg[1])elseif aM==Report.DialogStarted then self:NextPage(arg[1])elseif aM==Report.DialogEnded then elseif aM==Report.DialogPageShown then elseif aM==Report.DialogOptionSelected then self:OnOptionSelected(arg[1],arg[2])end end;function Lib.DialogSystem.Global:UpdateQueue()for f=1,8 do if self:CanStartDialog(f)then local hG=Lib.UIEffects.Global:LookUpCinematicInQueue(f)if hG and hG[1]==CinematicEventTypes.Dialog then self:NextDialog(f)end end end end;function Lib.DialogSystem.Global:DialogExecutionController()for f=1,8 do if self.Dialog[f]then local rE=self.Dialog[f].CurrentPage;local rB=self.Dialog[f][rE]if rB and not rB.MC and rB.Duration>0 and rB.AutoSkip then if rB.Started+rB.Duration<Logic.GetTime()then self:NextPage(f)end end end end end;function Lib.DialogSystem.Global:CreateDialogGetPage(tw)tw.GetPage=function(self,rH)local ar=Lib.DialogSystem.Global:GetPageIDByName(tw.PlayerID,rH)return Lib.DialogSystem.Global.Dialog[tw.PlayerID][ar]end end;function Lib.DialogSystem.Global:CreateDialogAddPage(tw)tw.AddPage=function(self,rA)self.Length=(self.Length or 0)+1;local rI="Page"..#self+1;if rA.Name then rI=rA.Name else rA.Name=rI end;rA.__Legit=true;rA.Text=Localize(rA.Text or"")rA.AutoSkip=false;if rA.Duration then if rA.Duration==-1 then rA.Duration=string.len(rA.Text or"")*CONST_DIALOG.TIMER_PER_CHAR;rA.Duration=rA.Duration<6 and 6 or rA.Duration<6 end;rA.AutoSkip=rA.Duration>0 end;if not rA.Rotation then rA.Rotation=CONST_DIALOG.CAMERA_ROTATIONDEFAULT;if rA.DialogCamera then rA.Rotation=CONST_DIALOG.DLGCAMERA_ROTATIONDEFAULT end;if rA.Position and type(rA.Position)~="table"then local ar=GetID(rA.Position)local S=Logic.GetEntityOrientation(ar)+90;rA.Rotation=S elseif rA.Target then local ar=GetID(rA.Target)local S=Logic.GetEntityOrientation(ar)+90;rA.Rotation=S end end;if not rA.Distance then rA.Distance=CONST_DIALOG.CAMERA_ZOOMDEFAULT;if rA.DialogCamera then rA.Distance=CONST_DIALOG.DLGCAMERA_ZOOMDEFAULT end end;if not rA.Angle then rA.Angle=CONST_DIALOG.CAMERA_ANGLEDEFAULT;if rA.DialogCamera then rA.Angle=CONST_DIALOG.DLGCAMERA_ANGLEDEFAULT end end;rA.GetSelected=function(self)return 0 end;table.insert(self,rA)return rA end end;function Lib.DialogSystem.Global:CreateDialogAddMCPage(tw)tw.AddMCPage=function(self,rA)local rB=self:AddPage(rA)if rB.MC then for f=1,#rB.MC do rB.MC[f][1]=Localize(rB.MC[f][1])rB.MC[f].ID=rB.MC[f].ID or f end;rB.AutoSkip=false;rB.Duration=-1 end;rB.GetSelected=function(self)if self.MC then return self.MC.Selected end;return 0 end;return rB end end;function Lib.DialogSystem.Global:CreateDialogAddRedirect(tw)tw.AddRedirect=function(self,O)self.Length=(self.Length or 0)+1;local rB=O==nil and-1 or O;table.insert(self,rB)return rB end end;function Lib.DialogSystem.Global:StartDialog(C,n,ho)self.DialogQueue[n]=self.DialogQueue[n]or{}Lib.UIEffects.Global:PushCinematicEventToQueue(n,CinematicEventTypes.Dialog,C,ho)end;function Lib.DialogSystem.Global:EndDialog(n)Logic.SetGlobalInvulnerability(0)ExecuteLocal([[Lib.DialogSystem.Local:ResetTimerButtons(%d);
          Camera.RTS_FollowEntity(0);]],n)SendReport(Report.DialogEnded,n,self.Dialog[n].Name)SendReportToLocal(Report.DialogEnded,n,self.Dialog[n].Name,self.Dialog[n])if self.Dialog[n].Finished then self.Dialog[n]:Finished()end;FinishCinematicEvent(self.Dialog[n].Name,n)self.Dialog[n]=nil end;function Lib.DialogSystem.Global:NextDialog(n)if self:CanStartDialog(n)then local ty=Lib.UIEffects.Global:PopCinematicEventFromQueue(n)assert(ty[1]==CinematicEventTypes.Dialog)StartCinematicEvent(ty[2],n)local tx=ty[3]tx.Name=ty[2]tx.PlayerID=n;tx.LastSkipButtonPressed=0;tx.CurrentPage=0;self.Dialog[n]=tx;if tx.EnableGlobalImmortality then Logic.SetGlobalInvulnerability(1)end;if self.Dialog[n].Starting then self.Dialog[n]:Starting()end;SendReportToLocal(Report.DialogStarted,n,self.Dialog[n].Name,self.Dialog[n])SendReport(Report.DialogStarted,n,self.Dialog[n].Name)end end;function Lib.DialogSystem.Global:NextPage(n)if self.Dialog[n]==nil then return end;self.Dialog[n].CurrentPage=self.Dialog[n].CurrentPage+1;local rE=self.Dialog[n].CurrentPage;if rE==-1 or rE==0 then self:EndDialog(n)return end;local rB=self.Dialog[n][rE]if type(rB)=="table"then if rE<=#self.Dialog[n]then self.Dialog[n][rE].Started=Logic.GetTime()self.Dialog[n][rE].Duration=rB.Duration or-1;if self.Dialog[n][rE].Action then self.Dialog[n][rE]:Action()end;self:DisplayPage(n,rE)else self:EndDialog(n)end elseif type(rB)=="number"or type(rB)=="string"then local aL=self:GetPageIDByName(n,self.Dialog[n][rE])self.Dialog[n].CurrentPage=aL-1;self:NextPage(n)else self:EndDialog(n)end end;function Lib.DialogSystem.Global:DisplayPage(n,rQ)if self.Dialog[n]==nil then return end;local rB=self.Dialog[n][rQ]if type(rB)=="table"then local rE=self.Dialog[n].CurrentPage;if rB.MC then for f=1,#rB.MC,1 do if type(rB.MC[f][3])=="function"then self.Dialog[n][rE].MC[f].Visible=rB.MC[f][3](n,rE,f)end end end end;SendReport(Report.DialogPageShown,n,rQ)SendReportToLocal(Report.DialogPageShown,n,rQ,rB)end;function Lib.DialogSystem.Global:SkipButtonPressed(n,rQ)if not self.Dialog[n]then return end;if self.Dialog[n].LastSkipButtonPressed+500>Logic.GetTimeMs()then return end;local rE=self.Dialog[n].CurrentPage;if self.Dialog[n][rE].AutoSkip or self.Dialog[n][rE].MC then return end;if self.Dialog[n][rE].OnForward then self.Dialog[n][rE]:OnForward()end;self.Dialog[n].LastSkipButtonPressed=Logic.GetTimeMs()self:NextPage(n)end;function Lib.DialogSystem.Global:OnOptionSelected(n,rR)if self.Dialog[n]==nil then return end;local rE=self.Dialog[n].CurrentPage;if type(self.Dialog[n][rE])~="table"then return end;local rB=self.Dialog[n][rE]if rB.MC then local rG;for f=1,#rB.MC,1 do if rB.MC[f].ID==rR then rG=rB.MC[f]end end;if rG~=nil then local aL=rG[2]if type(rG[2])=="function"then aL=rG[2](n,rE,rR)end;self.Dialog[n][rE].MC.Selected=rG.ID;self.Dialog[n].CurrentPage=self:GetPageIDByName(n,aL)-1;self:NextPage(n)end end end;function Lib.DialogSystem.Global:GetCurrentDialog(n)return self.Dialog[n]end;function Lib.DialogSystem.Global:GetCurrentDialogPage(n)if self.Dialog[n]then local rE=self.Dialog[n].CurrentPage;return self.Dialog[n][rE]end end;function Lib.DialogSystem.Global:GetPageIDByName(n,C)if type(C)=="string"then if self.Dialog[n]~=nil then for f=1,#self.Dialog[n],1 do if type(self.Dialog[n][f])=="table"and self.Dialog[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.DialogSystem.Global:CanStartDialog(n)return self.Dialog[n]==nil and not IsCinematicEventActive(n)and self.LoadscreenClosed end;function Lib.DialogSystem.Local:Initialize()if not self.IsInstalled then Report.DialogStarted=CreateReport("Event_DialogStarted")Report.DialogEnded=CreateReport("Event_DialogEnded")Report.DialogPageShown=CreateReport("Event_DialogPageShown")Report.DialogOptionSelected=CreateReport("Event_DialogOptionSelected")self:OverrideThroneRoomFunctions()Lib.DialogSystem.Global=nil end;self.IsInstalled=true end;function Lib.DialogSystem.Local:OnSaveGameLoaded()end;function Lib.DialogSystem.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.EscapePressed then elseif aM==Report.DialogStarted then self:StartDialog(arg[1],arg[2],arg[3])elseif aM==Report.DialogEnded then self:EndDialog(arg[1],arg[2],arg[3])elseif aM==Report.DialogPageShown then self:DisplayPage(arg[1],arg[2],arg[3])end end;function Lib.DialogSystem.Local:StartDialog(n,tz,tw)if GUI.GetPlayerID()~=n then return end;self.Dialog[n]=tw;self.Dialog[n].CurrentPage=0;local fP,fQ=Camera.RTS_GetLookAtPosition()local rD=Camera.RTS_GetRotationAngle()local rT=Camera.RTS_GetZoomFactor()local rU=Game.GameTimeGetFactor(n)local tA,tB=XGUIEng.GetWidgetLocalPosition("/InGame/Root/Normal/AlignBottomLeft/SubTitles")self.Dialog[n].Backup={SubTitles={tA,tB},Camera={fP,fQ,rD,rT},Speed=rU}DeactivateNormalInterface(n)DeactivateBorderScroll(n)if not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,1)end;self:ActivateCinematicMode(n)end;function Lib.DialogSystem.Local:EndDialog(n,tz,tw)if GUI.GetPlayerID()~=n then return end;if self.Dialog[n].RestoreGameSpeed and not Framework.IsNetworkGame()then Game.GameTimeSetFactor(n,self.Dialog[n].Backup.Speed)end;if self.Dialog[n].RestoreCamera then Camera.RTS_SetLookAtPosition(self.Dialog[n].Backup.Camera[1],self.Dialog[n].Backup.Camera[2])Camera.RTS_SetRotationAngle(self.Dialog[n].Backup.Camera[3])Camera.RTS_SetZoomFactor(self.Dialog[n].Backup.Camera[4])end;StopVoice("DialogSpeech")self:DeactivateCinematicMode(n)ActivateNormalInterface(n)ActivateBorderScroll(n)Lib.UITools.Widget:UpdateHiddenWidgets()self.Dialog[n]=nil;Display.SetRenderFogOfWar(1)Display.SetRenderBorderPins(1)Display.SetRenderSky(0)end;function Lib.DialogSystem.Local:DisplayPage(n,rQ,tC)if GUI.GetPlayerID()~=n then return end;self.Dialog[n][rQ]=tC;self.Dialog[n].CurrentPage=rQ;if type(self.Dialog[n][rQ])=="table"then self.Dialog[n][rQ].Started=Logic.GetTime()self:DisplayPageFader(n,rQ)self:DisplayPagePosition(n,rQ)self:DisplayPageActor(n,rQ)self:DisplayPageTitle(n,rQ)self:DisplayPageText(n,rQ)if self.Dialog[n][rQ].MC then self:DisplayPageOptionsDialog(n,rQ)end end end;function Lib.DialogSystem.Local:DisplayPagePosition(n,rQ)local rB=self.Dialog[n][rQ]Camera.RTS_FollowEntity(0)if rB.Position then local R=rB.Position;if type(R)~="table"then R=GetPosition(rB.Position)end;Camera.RTS_SetLookAtPosition(R.X,R.Y)elseif rB.Target then Camera.RTS_FollowEntity(GetID(rB.Target))else assert(false)end;Camera.RTS_SetRotationAngle(rB.Rotation)Camera.RTS_SetZoomFactor(rB.Distance/18000)Camera.RTS_SetZoomAngle(rB.Angle)end;function Lib.DialogSystem.Local:DisplayPageFader(n,rQ)local rB=self.Dialog[n][rQ]g_Fade.To=rB.FaderAlpha or 0;local s8=rB.FadeIn;if s8 then FadeIn(s8)end;local s9=rB.FadeOut;if s9 then self.Dialog[n].FaderJob=RequestHiResJob(function(iU,sa)if Logic.GetTimeMs()>iU-sa*1000 then FadeOut(sa)return true end end,Logic.GetTimeMs()+(rB.Duration or 0)*1000,s9)end end;function Lib.DialogSystem.Local:DisplayPageActor(n,rQ)local tD="/InGame/Root/Normal/AlignBottomLeft/Message"XGUIEng.ShowWidget(tD,1)XGUIEng.ShowAllSubWidgets(tD,1)XGUIEng.ShowWidget(tD.."/QuestLog",0)XGUIEng.ShowWidget(tD.."/Update",0)local rB=self.Dialog[n][rQ]if not rB.Actor or rB.Actor==-1 then XGUIEng.ShowWidget(tD,0)return end;local tE=self:GetPageActor(n,rQ)self:DisplayActorPortrait(n,tE)end;function Lib.DialogSystem.Local:GetPageActor(n,rQ)local tE=g_PlayerPortrait[n]local rB=self.Dialog[n][rQ]if type(rB.Actor)=="string"then tE=rB.Actor elseif type(rB.Actor)=="number"then tE=g_PlayerPortrait[rB.Actor]end;if not Models["Heads_"..tostring(tE)]then tE="H_NPC_Generic_Trader"end;return tE end;function Lib.DialogSystem.Local:DisplayPageTitle(n,rQ)local tD="/InGame/Root/Normal/AlignBottomLeft/Message"local rB=self.Dialog[n][rQ]if rB.Title then local hO=ConvertPlaceholders(Localize(rB.Title))if hO:find("^[A-Za-z0-9_]+/[A-Za-z0-9_]+$")then hO=XGUIEng.GetStringTableText(hO)end;if hO:sub(1,1)~="{"then hO="{center}"..hO end;XGUIEng.SetText(tD.."/MessagePortrait/PlayerName",hO)XGUIEng.ShowWidget(tD.."/MessagePortrait/PlayerName",1)else XGUIEng.ShowWidget(tD.."/MessagePortrait/PlayerName",0)end end;function Lib.DialogSystem.Local:DisplayPageText(n,rQ)self:ResetSubtitlesPosition(n)local rB=self.Dialog[n][rQ]local tF="/InGame/Root/Normal/AlignBottomLeft/SubTitles"if not rB or not rB.Text or rB.Text==""then XGUIEng.SetText(tF.."/VoiceText1"," ")XGUIEng.ShowWidget(tF,0)return end;XGUIEng.ShowWidget(tF,1)XGUIEng.ShowWidget(tF.."/Update",0)XGUIEng.ShowWidget(tF.."/VoiceText1",1)XGUIEng.ShowWidget(tF.."/BG",1)local bq=ConvertPlaceholders(Localize(rB.Text))local tG=""if not rB.AutoSkip and not rB.MC then tG=ConvertPlaceholders(Localize(Lib.DialogSystem.Text.Continue))end;XGUIEng.SetText(tF.."/VoiceText1",bq..tG)self:SetSubtitlesPosition(n,rQ)StopVoice("DialogSpeech")if rB and rB.Speech then PlayVoice(rB.Speech,"DialogSpeech")end end;function Lib.DialogSystem.Local:SetSubtitlesPosition(n,rQ)local rB=self.Dialog[n][rQ]local jO="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local h7=XGUIEng.GetTextHeight(jO.."/VoiceText1",true)local h8,h9=XGUIEng.GetWidgetSize(jO.."/VoiceText1")local f2,f3=XGUIEng.GetWidgetLocalPosition(jO)if rB.Actor then XGUIEng.SetWidgetSize(jO.."/BG",h8+10,h7+120)f3=675-h7;XGUIEng.SetWidgetLocalPosition(jO,f2,f3)else XGUIEng.SetWidgetSize(jO.."/BG",h8+10,h7+35)f3=1115-h7;XGUIEng.SetWidgetLocalPosition(jO,46,f3)end end;function Lib.DialogSystem.Local:ResetSubtitlesPosition(n)local R=self.Dialog[n].Backup.SubTitles;local tH="/InGame/Root/Normal/AlignBottomLeft/SubTitles"XGUIEng.SetWidgetLocalPosition(tH,R[1],R[2])end;function Lib.DialogSystem.Local:ResetTimerButtons(n)if GUI.GetPlayerID()~=n then return end;if not g_Interaction.TimerQuests then return end;local tI="/InGame/Root/Normal/AlignTopLeft/QuestTimers/"for f=1,6 do local tJ=tI..f.."/TimerButton"local tK=g_Interaction.TimerQuests[f]if tK~=nil then local ay=Quests[tK]if g_Interaction.CurrentMessageQuestIndex==tK and not QuestLog.IsQuestLogShown()then g_Interaction.CurrentMessageQuestIndex=nil;g_VoiceMessageIsRunning=false;g_VoiceMessageEndTime=nil;XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget(QuestLog.Widget.Main,0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.ShowAllSubWidgets("/InGame/Root/Normal/AlignBottomLeft/Message/QuestObjectives",0)XGUIEng.HighLightButton(tJ,0)end;if ay then self:DisplayActorPortrait(ay.SendingPlayer)end end end end;function Lib.DialogSystem.Local:DisplayActorPortrait(n,tL)local tD="/InGame/Root/Normal/AlignBottomLeft/Message"local tE=g_PlayerPortrait[n]if tL then if not Models["Heads_"..tostring(tL)]then tL="H_NPC_Generic_Trader"end;tE=tL end;XGUIEng.ShowWidget(tD.."/MessagePortrait",1)XGUIEng.ShowWidget(tD.."/QuestObjectives",0)SetPortraitWithCameraSettings(tD.."/MessagePortrait/3DPortraitFaceFX",tE)GUI.PortraitWidgetSetRegister(tD.."/MessagePortrait/3DPortraitFaceFX","Mood_Friendly",1,2,0)GUI.PortraitWidgetSetRegister(tD.."/MessagePortrait/3DPortraitFaceFX","Mood_Angry",1,2,0)end;function Lib.DialogSystem.Local:DisplayPageOptionsDialog(n,rQ)local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local se={GUI.GetScreenSize()}local rB=self.Dialog[n][rQ]local sf=XGUIEng.GetWidgetID(jS.."/ListBox")self.Dialog[n].MCSelectionBoxPosition={XGUIEng.GetWidgetScreenPosition(jS)}XGUIEng.ListBoxPopAll(sf)self.Dialog[n].MCSelectionOptionsMap={}for f=1,#rB.MC,1 do if rB.MC[f].Visible~=false then XGUIEng.ListBoxPushItem(sf,rB.MC[f][1])table.insert(self.Dialog[n].MCSelectionOptionsMap,rB.MC[f].ID)end end;XGUIEng.ListBoxSetSelectedIndex(sf,0)local tM={XGUIEng.GetWidgetScreenSize(jS)}local tN=math.ceil(se[1]*0.05+tM[1]/2)local tO=math.ceil(se[2]-(tM[2]+60*se[2]/540))if not rB.Actor then tN=15*se[1]/960;tO=math.ceil(se[2]-(tM[2]+0*se[2]/540))end;XGUIEng.SetWidgetScreenPosition(jS,tN,tO)XGUIEng.PushPage(jS,false)XGUIEng.ShowWidget(jS,1)if not rB.Actor then local s4="/InGame/Root/Normal/AlignBottomLeft/SubTitles"local tP,tQ=XGUIEng.GetWidgetLocalPosition(s4)XGUIEng.SetWidgetLocalPosition(s4,tP,tQ-220)end;self.Dialog[n].MCSelectionIsShown=true end;function Lib.DialogSystem.Local:OnOptionSelected(n)local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"local R=self.Dialog[n].MCSelectionBoxPosition;XGUIEng.SetWidgetScreenPosition(jS,R[1],R[2])XGUIEng.ShowWidget(jS,0)XGUIEng.PopPage()local fU=XGUIEng.ListBoxGetSelectedIndex(jS.."/ListBox")+1;local sj=self.Dialog[n].MCSelectionOptionsMap[fU]SendReport(Report.DialogOptionSelected,n,sj)SendReportToGlobal(Report.DialogOptionSelected,n,sj)end;function Lib.DialogSystem.Local:ThroneRoomCameraControl(n,rA)if rA then if self.Dialog[n].MCSelectionIsShown then local jS="/InGame/SoundOptionsMain/RightContainer/SoundProviderComboBoxContainer"if XGUIEng.IsWidgetShown(jS)==0 then self.Dialog[n].MCSelectionIsShown=false;self:OnOptionSelected(n)end end end end;function Lib.DialogSystem.Local:ConvertPosition(B)local R=B;if type(R)~="table"then R=GetPosition(B)end;return R.X,R.Y,R.Z end;function Lib.DialogSystem.Local:GetCurrentDialog(n)return self.Dialog[n]end;function Lib.DialogSystem.Local:GetCurrentDialogPage(n)if self.Dialog[n]then local rE=self.Dialog[n].CurrentPage;return self.Dialog[n][rE]end end;function Lib.DialogSystem.Local:GetPageIDByName(n,C)if type(C)=="string"then if self.Dialog[n]~=nil then for f=1,#self.Dialog[n],1 do if type(self.Dialog[n][f])=="table"and self.Dialog[n][f].Name==C then return f end end end;return 0 end;return C end;function Lib.DialogSystem.Local:IsAnyCinematicEventActive(n)for g,h in pairs(Lib.UIEffects.Local.CinematicEventStatus[n])do if h==1 then return true end end;return false end;function Lib.DialogSystem.Local:OverrideThroneRoomFunctions()self.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl=GameCallback_Lib_Camera_ThroneroomCameraControl;GameCallback_Lib_Camera_ThroneroomCameraControl=function(n)Lib.DialogSystem.Local.Orig_GameCallback_Lib_Camera_ThroneroomCameraControl(n)if n==GUI.GetPlayerID()then local tx=Lib.DialogSystem.Local:GetCurrentDialog(n)if tx~=nil then Lib.DialogSystem.Local:ThroneRoomCameraControl(n,Lib.DialogSystem.Local:GetCurrentDialogPage(n))end end end end;function Lib.DialogSystem.Local:ActivateCinematicMode(n)if self.CinematicActive or GUI.GetPlayerID()~=n then return end;self.CinematicActive=true;if not self.LoadscreenClosed then XGUIEng.PopPage()end;local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;XGUIEng.ShowWidget("/InGame/ThroneRoom",1)XGUIEng.PushPage("/InGame/ThroneRoom/Main",false)XGUIEng.ShowWidget("/InGame/ThroneRoomBars",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoomBars_2_Dodge",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/KnightInfo",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main",1)XGUIEng.ShowAllSubWidgets("/InGame/ThroneRoom/Main",0)XGUIEng.ShowWidget("/InGame/ThroneRoom/Main/updater",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",0)XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Text"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Title"," ")XGUIEng.SetText("/InGame/ThroneRoom/Main/MissionDialog/Objectives"," ")if self.Dialog[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",0)end;self.SelectionBackup={GUI.GetSelectedEntities()}GUI.ClearSelection()GUI.ClearNotes()GUI.ForbidContextSensitiveCommandsInSelectionState()GUI.ActivateCutSceneState()GUI.SetFeedbackSoundOutputState(0)GUI.EnableBattleSignals(false)Input.CutsceneMode()if not self.Dialog[n].EnableFoW then Display.SetRenderFogOfWar(0)end;if self.Dialog[n].EnableSky then Display.SetRenderSky(1)end;if not self.Dialog[n].EnableBorderPins then Display.SetRenderBorderPins(0)end;if self:IsChangingGraphicsPermited()then Display.SetUserOptionOcclusionEffect(0)end;Camera.SwitchCameraBehaviour(0)InitializeFader()g_Fade.To=0;SetFaderAlpha(0)if tn then ShowScriptConsole()end;if not self.LoadscreenClosed then XGUIEng.PushPage("/LoadScreen/LoadScreen",false)end end;function Lib.DialogSystem.Local:DeactivateCinematicMode(n)if not self.CinematicActive or GUI.GetPlayerID()~=n then return end;self.CinematicActive=false;local tn=IsScriptConsoleShown()if tn then HideScriptConsole()end;g_Fade.To=0;SetFaderAlpha(0)XGUIEng.PopPage()Camera.SwitchCameraBehaviour(0)Display.UseStandardSettings()Input.GameMode()GUI.EnableBattleSignals(true)GUI.SetFeedbackSoundOutputState(1)GUI.ActivateSelectionState()GUI.PermitContextSensitiveCommandsInSelectionState()for g,h in pairs(self.SelectionBackup)do GUI.SelectEntity(h)end;Display.SetRenderSky(0)Display.SetRenderBorderPins(1)Display.SetRenderFogOfWar(1)if Options.GetIntValue("Display","Occlusion",0)>0 then Display.SetUserOptionOcclusionEffect(1)end;XGUIEng.SetText("/InGame/Root/Normal/AlignBottomLeft/SubTitles/VoiceText1"," ")XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechButtons/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait/SpeechStartAgainOrStop",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles/Update",1)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/Message/MessagePortrait",0)XGUIEng.ShowWidget("/InGame/Root/Normal/AlignBottomLeft/SubTitles",0)XGUIEng.PopPage()XGUIEng.ShowWidget("/InGame/ThroneRoom",0)if self.Dialog[n].HideNotes then XGUIEng.ShowWidget("/InGame/Root/Normal/NotesWindow",1)end;ResetRenderDistance()self:ResetSubtitlesPosition(n)if tn then ShowScriptConsole()end end;function Lib.DialogSystem.Local:IsChangingGraphicsPermited()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:IsChangingGraphicsPermited()end;return self.Config.DoAlternateGraphics==true end;function Lib.DialogSystem.Local:RequestAlternateGraphics()if Lib.BriefingSystem then return Lib.BriefingSystem.Local:RequestAlternateGraphics()end;if IsMultiplayer()then return end;DialogRequestBox(GUI.GetPlayerID(),Lib.DialogSystem.Text.Request.Title,Lib.DialogSystem.Text.Request.Text,function(jA)Lib.BriefingSystem.Local.Config.DoAlternateGraphics=jA==true end,false)end;RegisterModule(Lib.DialogSystem.Name)Lib.Register("module/city/LifestockSystem_Text")Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Text={CattleStarved={de="Eure Kühe sind verhungert!",en="Your cows have starved to death!",fr="Tes vaches sont mortes de faim !"},SheepStarved={de="Eure Schafe sind verhungert!",en="Your sheep have starved to death!",fr="Vos moutons sont morts de faim!"}}Lib.Require("comfort/IsLocalScript")Lib.Register("module/city/LifestockSystem_API")function SetCattleBreedingParameters(ho)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(ho)=="table","Malformed data passed!")local tR=ho.BasePrice or 300;local tS=ho.GrainCost or 10;local tT=ho.GrainUpkeep or 1;local tU=ho.FeedingTimer or 0;local tV=ho.StarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.CattleBasePrice = %d]],tR)Lib.LifestockSystem.Global.CattleBasePrice=tR;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Cow] = %d]],tS)MerchantSystem.BasePrices[Goods.G_Cow]=tR;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainCost = %d]],tS)Lib.LifestockSystem.Global.CattleGrainCost=tS;ExecuteLocal([[Lib.LifestockSystem.Global.CattleGrainUpkeep = %d]],tT)Lib.LifestockSystem.Global.CattleGrainUpkeep=tT;ExecuteLocal([[Lib.LifestockSystem.Global.CattleFeedingTimer = %d]],tU)Lib.LifestockSystem.Global.CattleFeedingTimer=tU;ExecuteLocal([[Lib.LifestockSystem.Global.CattleStarveChance = %d]],tV)Lib.LifestockSystem.Global.CattleStarveChance=tV end;API.SetCattleBreedingParameters=SetCattleBreedingParameters;function SetSheepBreedingParameters(ho)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(ho)=="table","Malformed data passed!")local tW=ho.SheepBasePrice or 300;local tX=ho.SheepGrainCost or 10;local tY=ho.SheepGrainUpkeep or 1;local tZ=ho.SheepFeedingTimer or 0;local t_=ho.SheepStarveChance or 35;ExecuteLocal([[Lib.LifestockSystem.Global.SheepBasePrice = %d]],tW)Lib.LifestockSystem.Global.SheepBasePrice=tW;ExecuteLocal([[MerchantSystem.BasePrices[Goods.G_Sheep] = %d]],tW)MerchantSystem.BasePrices[Goods.G_Sheep]=tW;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainCost = %d]],tX)Lib.LifestockSystem.Global.SheepGrainCost=tX;ExecuteLocal([[Lib.LifestockSystem.Global.SheepGrainUpkeep = %d]],tY)Lib.LifestockSystem.Global.SheepGrainUpkeep=tY;ExecuteLocal([[Lib.LifestockSystem.Global.SheepFeedingTimer = %d]],tZ)Lib.LifestockSystem.Global.SheepFeedingTimer=tZ;ExecuteLocal([[Lib.LifestockSystem.Global.SheepStarveChance = %d]],t_)Lib.LifestockSystem.Global.SheepStarveChance=t_ end;API.SetSheepBreedingParameters=SetSheepBreedingParameters;function RequireTitleToBreedCattle(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Cattle)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_Cattle)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Cattle,0)end end;API.RequireTitleToBreedCattle=RequireTitleToBreedCattle;function RequireTitleToBreedSheep(gE)assert(not IsLocalScript(),"Can not be used in local script!")ExecuteLocal([[
        table.insert(NeedsAndRightsByKnightTitle[%d][4], 1, Technologies.R_Sheep)
        CreateTechnologyKnightTitleTable()
    ]],gE)table.insert(NeedsAndRightsByKnightTitle[gE][4],1,Technologies.R_Sheep)CreateTechnologyKnightTitleTable()for f=1,8 do Logic.TechnologySetState(f,Technologies.R_Sheep,0)end end;API.RequireTitleToBreedSheep=RequireTitleToBreedSheep;Lib.LifestockSystem=Lib.LifestockSystem or{}Lib.LifestockSystem.Name="LifestockSystem"Lib.LifestockSystem.Global={CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleStaved="",SheepStarved=""}}Lib.LifestockSystem.Local={BuyLock=false,CattleBasePrice=300,CattleGrainCost=10,CattleGrainUpkeep=1,CattleFeedingTimer=0,CattleStarveChance=35,SheepBasePrice=300,SheepGrainCost=10,SheepGrainUpkeep=1,SheepFeedingTimer=0,SheepStarveChance=35,Text={CattleTitle="",CattleDescription="",CattleDisabled="",SheepTitle="",SheepDescription="",SheepDisabled=""}}Lib.LifestockSystem.Shared={TechnologyConfig={{"R_Cattle",{de="Kühe züchten",en="Breeding Cows",fr="Vaches reproductrices"},{3,16,0},0},{"R_Sheep",{de="Schafe züchten",en="Breeding Sheeps",fr="Moutons reproducteurs"},{4,1,0},0}}}Lib.Require("comfort/SetHealth")Lib.Require("core/Core")Lib.Require("module/ui/UIEffects")Lib.Require("module/ui/UITools")Lib.Require("module/ui/UIBuilding")Lib.Require("module/faker/Technology")Lib.Require("module/city/Promotion")Lib.Require("module/city/LifestockSystem_API")Lib.Require("module/city/LifestockSystem_Text")Lib.Register("module/city/LifestockSystem")function Lib.LifestockSystem.Global:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)MerchantSystem.BasePricesOrigLifestockSystem={}MerchantSystem.BasePricesOrigLifestockSystem[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigLifestockSystem[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()RequestJob(function()Lib.LifestockSystem.Global:ControlFeeding()Lib.LifestockSystem.Global:ControlDecay()end)Lib.LifestockSystem.Local=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Global:OnSaveGameLoaded()end;function Lib.LifestockSystem.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.LanguageChanged then self.Text.CattleStarved=Localize(Lib.LifestockSystem.Text.CattleStarved)self.Text.SheepStarved=Localize(Lib.LifestockSystem.Text.SheepStarved)elseif aM==Report.BreedAnimalClicked then Lib.LifestockSystem.Global:BuyAnimal(arg[1],arg[2],arg[3])end end;function Lib.LifestockSystem.Global:BuyAnimal(bh,n,hL)local u0=Entities.A_X_Cow01;if bh=="Sheep"then local u1=math.floor(Logic.GetTime()%2)+1;u0=Entities["A_X_Sheep0"..u1]end;local u2=self[bh.."GrainCost"]if GetPlayerResources(Goods.G_Grain,n)<u2 then return end;local E,F=Logic.GetBuildingApproachPosition(hL)local w=Logic.CreateEntity(u0,E,F,0,n)AddGood(Goods.G_Grain,-1*u2,n)SendReport(Report[bh.."Bought"],n,w,hL)SendReportToLocal(Report[bh.."Bought"],n,w,hL)end;function Lib.LifestockSystem.Global:ControlFeeding()for q=1,8 do if Logic.PlayerGetIsHumanFlag(q)then local u3=self.CattleFeedingTimer;local u4={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.CattlePasture)}if u3>0 then local u5=math.max(u3*(1-0.03*#u4),15)if#u4>0 and math.floor(Logic.GetTime())%math.floor(u5)==0 then local qT=self.CattleGrainUpkeep;local u6=GetPlayerResources(Goods.G_Grain,q)if u6<qT then local u7=false;for g,h in pairs(u4)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_CattlePasture,E,F,750,1)if IsExisting(pQ)and math.random(1,100)<=self.CattleStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.CattleStarved,q,h)SendReport(Report.CattleStarved,q,h)u7=true end end;if u7 then local bq=Localize(self.Text.CattleStarved)AddMessage(bq)end else AddGood(Goods.G_Grain,-1*qT,q)end end end;local u8=self.SheepFeedingTimer;local pI={Logic.GetPlayerEntitiesInCategory(q,EntityCategories.SheepPasture)}if u8>0 then local u5=math.max(u8*(1-0.03*#pI),15)if#pI>0 and math.floor(Logic.GetTime())%math.floor(u5)==0 then local qT=self.SheepGrainUpkeep;local u6=GetPlayerResources(Goods.G_Grain,q)if u6<qT then local u7=false;for g,h in pairs(pI)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_CattlePasture,E,F,750,1)if IsExisting(pQ)and math.random(1,100)<=self.SheepStarveChance then if Logic.GetEntityHealth(h)>0 then SetHealth(h,0)end;SendReportToLocal(Report.SheepStarved,q,h)SendReport(Report.SheepStarved,q,h)end end;if u7 then local bq=Localize(self.Text.SheepStarved)AddMessage(bq)end else AddGood(Goods.G_Grain,-1*qT,q)end end end end end end;function Lib.LifestockSystem.Global:ControlDecay()if math.floor(Logic.GetTime())%10==0 then local pP=Logic.GetEntitiesOfType(Entities.R_DeadCow)for g,h in pairs(pP)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_CattlePasture,E,F,900,1)if IsExisting(pQ)then local cr=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cr-1)end end;local pR=Logic.GetEntitiesOfType(Entities.R_DeadSheep)for g,h in pairs(pR)do local E,F,G=Logic.EntityGetPos(h)local s,pQ=Logic.GetEntitiesInArea(Entities.B_SheepPasture,E,F,900,1)if IsExisting(pQ)then local cr=Logic.GetResourceDoodadGoodAmount(h)Logic.SetResourceDoodadGoodAmount(h,cr-1)end end end end;function Lib.LifestockSystem.Local:Initialize()if not self.IsInstalled then Report.BreedAnimalClicked=CreateReport("Event_BreedAnimalClicked")Report.CattleBought=CreateReport("Event_CattleBought")Report.SheepBought=CreateReport("Event_SheepBought")Report.CattleStarved=CreateReport("Event_CattleStarved")Report.SheepStarved=CreateReport("Event_SheepStarved")self.Text.CattleTitle=XGUIEng.GetStringTableText("Names/A_X_Cow01")self.Text.CattleDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Cow")self.Text.CattleDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")self.Text.SheepTitle=XGUIEng.GetStringTableText("Names/A_X_Sheep01")self.Text.SheepDescription=XGUIEng.GetStringTableText("UI_ObjectDescription/G_Sheep")self.Text.SheepDisabled=XGUIEng.GetStringTableText("UI_ButtonDisabled/PromoteKnight")MerchantSystem.BasePricesOrigLifestockSystem={}MerchantSystem.BasePricesOrigLifestockSystem[Goods.G_Sheep]=MerchantSystem.BasePrices[Goods.G_Sheep]MerchantSystem.BasePricesOrigLifestockSystem[Goods.G_Cow]=MerchantSystem.BasePrices[Goods.G_Cow]MerchantSystem.BasePrices[Goods.G_Sheep]=self.SheepBasePrice;MerchantSystem.BasePrices[Goods.G_Cow]=self.CattleBasePrice;Lib.LifestockSystem.Shared:CreateTechnologies()self:InitBuyCowButton()self:InitBuySheepButton()Lib.LifestockSystem.Global=nil end;self.IsInstalled=true end;function Lib.LifestockSystem.Local:OnSaveGameLoaded()end;function Lib.LifestockSystem.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.CattleBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end elseif aM==Report.SheepBought then if arg[1]==GUI.GetPlayerID()then self.BuyLock=false end end end;function Lib.LifestockSystem.Local:BuyAnimalAction(bh,gB,at)local u2=self[bh.."GrainCost"]local q=Logic.EntityGetPlayer(at)if GetPlayerResources(Goods.G_Grain,q)<u2 then local bq=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_Resources")Message(bq)return end;self.BuyLock=true;SendReportToGlobal(Report.BreedAnimalClicked,bh,q,at)SendReport(Report.BreedAnimalClicked,bh,q,at)end;function Lib.LifestockSystem.Local:BuyAnimalTooltip(bh,gB,at)local hO=self.Text[bh.."Title"]local bq=self.Text[bh.."Description"]local lz=""local u2=self[bh.."GrainCost"]local q=Logic.EntityGetPlayer(at)local u9=bh=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;if Logic.TechnologyGetState(q,u9)==0 then local bn=GUI_Tooltip.GetDisabledKeyForTechnologyType(u9)lz=GetStringText("UI_ButtonDisabled/"..bn)elseif XGUIEng.IsButtonDisabled(gB)==1 then lz=self.Text[bh.."Disabled"]end;SetTooltipCosts(hO,bq,lz,{Goods.G_Grain,u2},true)end;function Lib.LifestockSystem.Local:BuyAnimalUpdate(bh,gB,at)local q=Logic.EntityGetPlayer(at)local u9=bh=="Cattle"and Technologies.R_Cattle or Technologies.R_Sheep;local ua=Logic.GetEntityType(at)local ub=Logic.TechnologyGetState(q,u9)local kL=bh=="Cattle"and{3,16}or{4,1}local uc=0;local ud=GetPlayerEntities(q,ua)local pK={Logic.GetPlayerEntitiesInCategory(q,EntityCategories[bh.."Pasture"])}if ub~=TechnologyStates.Unlocked and ub~=TechnologyStates.Researched or self.BuyLock or#ud*5<=#pK then kL=bh=="Cattle"and{4,2}or{4,3}uc=1 end;XGUIEng.DisableButton(gB,uc)SetIcon(gB,kL)end;function Lib.LifestockSystem.Local:InitBuyCowButton()local jS="/InGame/Root/Normal/BuildingButtons/BuyCatapultCart"local R={XGUIEng.GetWidgetLocalPosition(jS)}AddBuildingButtonByTypeAtPosition(Entities.B_CattlePasture,R[1],R[2],function(gB,at)Lib.LifestockSystem.Local:BuyAnimalAction("Cattle",gB,at)end,function(gB,at)Lib.LifestockSystem.Local:BuyAnimalTooltip("Cattle",gB,at)end,function(gB,at)Lib.LifestockSystem.Local:BuyAnimalUpdate("Cattle",gB,at)end)end;function Lib.LifestockSystem.Local:InitBuySheepButton()local jS="/InGame/Root/Normal/BuildingButtons/BuyCatapultCart"local R={XGUIEng.GetWidgetLocalPosition(jS)}AddBuildingButtonByTypeAtPosition(Entities.B_SheepPasture,R[1],R[2],function(gB,at)Lib.LifestockSystem.Local:BuyAnimalAction("Sheep",gB,at)end,function(gB,at)Lib.LifestockSystem.Local:BuyAnimalTooltip("Sheep",gB,at)end,function(gB,at)Lib.LifestockSystem.Local:BuyAnimalUpdate("Sheep",gB,at)end)end;function Lib.LifestockSystem.Shared:CreateTechnologies()for f=1,#self.TechnologyConfig do if g_GameExtraNo>=self.TechnologyConfig[f][4]then if not Technologies[self.TechnologyConfig[f][1]]then AddCustomTechnology(self.TechnologyConfig[f][1],self.TechnologyConfig[f][2],self.TechnologyConfig[f][3])if not IsLocalScript()then for b8=1,8 do Logic.TechnologySetState(b8,Technologies[self.TechnologyConfig[f][1]],3)end end end end end end;RegisterModule(Lib.LifestockSystem.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/entity/EntitySearch_API")function SearchEntities(n,ue)return Lib.EntitySearch.Shared:SearchEntities(n,ue)end;API.SearchEntities=SearchEntities;function SearchEntitiesOfTypeInArea(ic,an,i,n)return Lib.EntitySearch.Shared:SearchEntitiesInArea(ic,an,n,i,nil)end;API.SearchEntitiesOfTypeInArea=SearchEntitiesOfTypeInArea;function SearchEntitiesOfCategoryInArea(ic,an,bv,n)return Lib.EntitySearch.Shared:SearchEntitiesInArea(ic,an,n,nil,bv)end;API.SearchEntitiesOfCategoryInArea=SearchEntitiesOfCategoryInArea;function SearchEntitiesOfTypeInTerritory(id,i,n)return Lib.EntitySearch.Shared:SearchEntitiesInTerritory(id,n,i,nil)end;API.SearchEntitiesOfTypeInTerritory=SearchEntitiesOfTypeInTerritory;function SearchEntitiesOfCategoryInTerritory(id,bv,n)return Lib.EntitySearch.Shared:SearchEntitiesInTerritory(id,n,nil,bv)end;API.SearchEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;API.GetEntitiesOfCategoryInTerritory=SearchEntitiesOfCategoryInTerritory;function SearchEntitiesByScriptname(cw)return Lib.EntitySearch.Shared:SearchEntitiesByScriptname(cw)end;API.SearchEntitiesByScriptname=SearchEntitiesByScriptname;function CreateSearchFilter(hn,da)Lib.EntitySearch.Shared:CreateFilter(hn,da)end;API.CreateSearchFilter=CreateSearchFilter;function DropSearchFilter(hn)Lib.EntitySearch.Shared:DropFilter(hn)end;API.DropSearchFilter=DropSearchFilter;function CommenceEntitySearch(uf)return Lib.EntitySearch.Shared:IterateOverEntities(uf)end;API.CommenceEntitySearch=CommenceEntitySearch;function GetEntitiesOfCategoriesInTerritories(n,bv,id)local cX=type(n)=="table"and n or{n}local cT=type(bv)=="table"and bv or{bv}local cR=type(id)=="table"and id or{id}local bt={}for f=1,#cX,1 do for b8=1,#cT,1 do for g=1,#cR,1 do local bw=SearchEntitiesOfCategoryInTerritory(cR[g],cT[b8],cX[f])bt=Array_Append(bt,bw)end end end;return bt end;API.GetEntitiesOfCategoriesInTerritories=GetEntitiesOfCategoriesInTerritories;Lib.EntitySearch=Lib.EntitySearch or{}Lib.EntitySearch.Name="EntitySearch"Lib.EntitySearch.Global={}Lib.EntitySearch.Local={}Lib.EntitySearch.Shared={Filters={["__Default"]=function(aM)return true end},Caches={Entity={},Filter={}}}Lib.Require("comfort/GetPosition")Lib.Require("comfort/GetDistance")Lib.Require("core/Core")Lib.Require("module/entity/EntitySearch_API")Lib.Register("module/entity/EntitySearch")function Lib.EntitySearch.Global:Initialize()end;function Lib.EntitySearch.Global:OnReportReceived(aM,...)if aM==Report.LoadscreenClosed then self.LoadscreenClosed=true end end;function Lib.EntitySearch.Local:Initialize()end;function Lib.EntitySearch.Local:OnReportReceived(aM,...)if aM==Report.LoadscreenClosed then self.LoadscreenClosed=true end end;function Lib.EntitySearch.Shared:CreateFilter(hn,da)self.Filters[hn]=da end;function Lib.EntitySearch.Shared:DropFilter(hn)self.Filters[hn]=nil end;function Lib.EntitySearch.Shared:IterateOverEntities(uf)local ug=self.Filters[uf]and uf or"__Default"local q9=math.floor(Logic.GetTime())local uh={}local ui;if self.Caches.Filter[ug]and self.Caches.Filter[ug][1]then if self.Caches.Filter[ug][1]+3<=q9 then self.Caches.Filter[ug]=nil elseif ug~="__Default"and self.Caches.Filter[ug][1]+1<=q9 then return self.Caches.Filter[ug][2]end end;if self.Caches.Entity[1]and self.Caches.Entity[1]+1>q9 then ui=self.Caches.Entity[2]else ui={}for s,h in pairs(Entities)do for s,ar in pairs(Logic.GetEntitiesOfType(h))do ui[#ui+1]=ar end end;self.Caches.Entity={q9,ui}end;local uj=self.Filters[uf]or self.Filters["__Default"]for f=1,#ui do if uj(ui[f])then uh[#uh+1]=ui[f]end end;self.Caches.Filter[ug]={q9,uh}return uh end;function Lib.EntitySearch.Shared:SearchEntities(n,ue)if ue==nil then ue=false end;local q9=math.floor(Logic.GetTime())local bn="hupl_"..n.."_"..tostring(ue)local dW=function(aM)if n and Logic.EntityGetPlayer(aM)~=n then return false end;if ue then if(Logic.IsBuilding(aM)or Logic.IsWall(aM))and Logic.IsConstructionComplete(aM)==0 then return false end;local m=Logic.GetEntityType(aM)local j=Logic.GetEntityType(m)if j and(string.find(j,"^S_")or string.find(j,"^XD_"))then return false end end;return true end;if not self.Filters[bn]then self:CreateFilter(bn,dW)end;if self.Caches.Filter[bn]and self.Caches.Filter[bn][2]and self.Caches.Filter[bn][1]+1>q9 then return self.Caches.Entity[bn][2]end;return CommenceEntitySearch(bn)end;function Lib.EntitySearch.Shared:SearchEntitiesByScriptname(cw)local q9=math.floor(Logic.GetTime())local bn="name_"..cw;local dW=function(aM)local aW=Logic.GetEntityName(aM)if not string.find(aW,cw)then return false end;return true end;if not self.Filters[bn]then self:CreateFilter(bn,dW)end;if self.Caches.Filter[bn]and self.Caches.Filter[bn][2]and self.Caches.Filter[bn][1]+1>q9 then return self.Caches.Entity[bn][2]end;return CommenceEntitySearch(bn)end;function Lib.EntitySearch.Shared:SearchEntitiesInArea(ic,an,n,i,bv)local q9=math.floor(Logic.GetTime())local R=an;if type(R)~="table"then R=GetPosition(R)end;local ai=ic;local E,F=R.X,R.Y;local cX=n;local cR=i;local cT=bv;local bn="area_"..ai.."_"..E.."_"..F.."_"..cX.."_"..cR.."_"..cT;local dW=function(aM)if n and Logic.EntityGetPlayer(aM)~=n then return false end;if i and Logic.GetEntityType(aM)~=i then return false end;if bv and Logic.IsEntityInCategory(aM,bv)==0 then return false end;if GetDistance(aM,R)>ic then return false end;return true end;if not self.Filters[bn]then self:CreateFilter(bn,dW)end;if self.Caches.Filter[bn]and self.Caches.Filter[bn][2]and self.Caches.Filter[bn][1]+1>q9 then return self.Caches.Entity[bn][2]end;return CommenceEntitySearch(bn)end;function Lib.EntitySearch.Shared:SearchEntitiesInTerritory(id,n,i,bv)local q9=math.floor(Logic.GetTime())local ai=id;local cX=n;local cR=i or"0"local cT=bv or"0"local bn="teri_"..ai.."_"..cX.."_"..cR.."_"..cT;local dW=function(aM)if n and Logic.EntityGetPlayer(aM)~=n then return false end;if i and Logic.GetEntityType(aM)~=i then return false end;if bv and Logic.IsEntityInCategory(aM,bv)==0 then return false end;if id and GetTerritoryUnderEntity(aM)~=id then return false end;return true end;if not self.Filters[bn]then self:CreateFilter(bn,dW)end;if self.Caches.Filter[bn]and self.Caches.Filter[bn][2]and self.Caches.Filter[bn][1]+1>q9 then return self.Caches.Entity[bn][2]end;return CommenceEntitySearch(bn)end;RegisterModule(Lib.EntitySearch.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/Trade_API")function CreateGoodOffer(uk,ul,um,un)ul=type(ul)=="string"and Goods[ul]or ul;local uo,up=Lib.Trade.Global:GetOfferAndTrader(uk,ul)if uo~=-1 and up~=-1 then local uq="Good offer for type %s already exists for player %d!"log(uq,Logic.GetGoodTypeName(ul),uk)return end;local ur=Logic.GetStoreHouse(uk)AddGoodToTradeBlackList(uk,ul)local us=Entities.U_Marketer;if ul==Goods.G_Medicine then us=Entities.U_Medicus end;if un==nil then un=MerchantSystem.RefreshRates[ul]or 0 end;local ut=Logic.AddGoodTraderOffer(ur,um,Goods.G_Gold,0,ul,MerchantSystem.Waggonload,1,un,us,Entities.U_ResourceMerchant)ExecuteLocal("GameCallback_CloseNPCInteraction(GUI.GetPlayerID(), %d)",ur)return ut end;API.AddGoodOffer=CreateGoodOffer;function CreateMercenaryOffer(uk,ul,um,un)ul=type(ul)=="string"and Entities[ul]or ul;local uo,up=Lib.Trade.Global:GetOfferAndTrader(uk,ul)if uo~=-1 and up~=-1 then local uq="Mercenary offer for type %s already exists for player %d!"log(uq,Logic.GetEntityTypeName(ul),uk)return end;local ur=Logic.GetStoreHouse(uk)if un==nil then un=MerchantSystem.RefreshRates[ul]or 0 end;local uu=3;local j=Logic.GetEntityTypeName(ul)if string.find(j,"MilitaryBow")or string.find(j,"MilitarySword")then uu=6 elseif string.find(j,"Cart")then uu=0 elseif string.find(j,"Knight")then uu=0 end;local ut=Logic.AddMercenaryTraderOffer(ur,um,Goods.G_Gold,0,ul,uu,1,un)ExecuteLocal("GameCallback_CloseNPCInteraction(GUI.GetPlayerID(), %d)",ur)return ut end;API.AddMercenaryOffer=CreateMercenaryOffer;function CreateEntertainerOffer(uk,ul)ul=type(ul)=="string"and Entities[ul]or ul;local uo,up=Lib.Trade.Global:GetOfferAndTrader(uk,ul)if uo~=-1 and up~=-1 then local uq="Entertainer offer for type %s already exists for player %d!"log(uq,Logic.GetEntityTypeName(ul),uk)return end;local ur=Logic.GetStoreHouse(uk)local ut=Logic.AddEntertainerTraderOffer(ur,1,Goods.G_Gold,0,ul,1,0)ExecuteLocal("GameCallback_CloseNPCInteraction(GUI.GetPlayerID(), %d)",ur)return ut end;API.AddEntertainerOffer=CreateEntertainerOffer;function PurchaseSetTraderAbilityForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.PurchaseTraderAbility[n]=da else Lib.Trade.Local.PurchaseTraderAbility.Default=da end end;API.PurchaseSetTraderAbilityForPlayer=PurchaseSetTraderAbilityForPlayer;function PurchaseSetDefaultTraderAbility(da)PurchaseSetTraderAbilityForPlayer(nil,da)end;API.PurchaseSetDefaultTraderAbility=PurchaseSetDefaultTraderAbility;function PurchaseSetBasePriceForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.PurchaseBasePrice[n]=da else Lib.Trade.Local.PurchaseBasePrice.Default=da end end;API.PurchaseSetBasePriceForPlayer=PurchaseSetBasePriceForPlayer;function PurchaseSetDefaultBasePrice(da)PurchaseSetBasePriceForPlayer(nil,da)end;API.PurchaseSetDefaultBasePrice=PurchaseSetDefaultBasePrice;function PurchaseSetInflationForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.PurchaseInflation[n]=da else Lib.Trade.Local.PurchaseInflation.Default=da end end;API.PurchaseSetInflationForPlayer=PurchaseSetInflationForPlayer;function PurchaseSetDefaultInflation(da)PurchaseSetInflationForPlayer(nil,da)end;API.PurchaseSetDefaultInflation=PurchaseSetDefaultInflation;function PurchaseSetConditionForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.PurchaseAllowed[n]=da else Lib.Trade.Local.PurchaseAllowed.Default=da end end;API.PurchaseSetConditionForPlayer=PurchaseSetConditionForPlayer;function PurchaseSetDefaultCondition(da)PurchaseSetConditionForPlayer(nil,da)end;API.PurchaseSetDefaultCondition=PurchaseSetDefaultCondition;function SaleSetTraderAbilityForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.SaleTraderAbility[n]=da else Lib.Trade.Local.SaleTraderAbility.Default=da end end;API.SaleSetTraderAbilityForPlayer=SaleSetTraderAbilityForPlayer;function SaleSetDefaultTraderAbility(da)SaleSetTraderAbilityForPlayer(nil,da)end;API.SaleSetDefaultTraderAbility=SaleSetDefaultTraderAbility;function SaleSetBasePriceForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.SaleBasePrice[n]=da else Lib.Trade.Local.SaleBasePrice.Default=da end end;API.SaleSetBasePriceForPlayer=SaleSetBasePriceForPlayer;function SaleSetDefaultBasePrice(da)SaleSetBasePriceForPlayer(nil,da)end;API.SaleSetDefaultBasePrice=SaleSetDefaultBasePrice;function SaleSetDeflationForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.SaleDeflation[n]=da else Lib.Trade.Local.SaleDeflation.Default=da end end;API.SaleSetDeflationForPlayer=SaleSetDeflationForPlayer;function SaleSetDefaultDeflation(da)SaleSetDeflationForPlayer(nil,da)end;API.SaleSetDefaultDeflation=SaleSetDefaultDeflation;function SaleSetConditionForPlayer(n,da)error(IsLocalScript(),"Can not be used in global script.")if n then Lib.Trade.Local.SaleAllowed[n]=da else Lib.Trade.Local.SaleAllowed.Default=da end end;API.SaleSetConditionForPlayer=SaleSetConditionForPlayer;function SaleSetDefaultCondition(da)SaleSetConditionForPlayer(nil,da)end;API.SaleSetDefaultCondition=SaleSetDefaultCondition;function GetOfferInformation(n)error(not IsLocalScript(),"Can not be used in local script.")return Lib.Trade.Global:GetStorehouseInformation(n)end;API.GetOfferInformation=GetOfferInformation;function GetOfferCount(n)error(not IsLocalScript(),"Can not be used in local script.")return Lib.Trade.Global:GetOfferCount(n)end;API.GetOfferCount=GetOfferCount;function IsGoodOrUnitOffered(n,oP)error(not IsLocalScript(),"Can not be used in local script.")local uo,up=Lib.Trade.Global:GetOfferAndTrader(n,oP)return uo~=-1 and up~=-1 end;API.IsGoodOrUnitOffered=IsGoodOrUnitOffered;function GetTradeOfferWaggonAmount(n,oP)error(not IsLocalScript(),"Can not be used in local script.")local c1=-1;local uv=Lib.Trade.Global:GetStorehouseInformation(n)for f=1,#uv[1]do if uv[1][f][3]==oP and uv[1][f][5]>0 then c1=uv[1][f][5]end end;return c1 end;API.GetTradeOfferWaggonAmount=GetTradeOfferWaggonAmount;function RemoveTradeOffer(n,oP)error(not IsLocalScript(),"Can not be used in local script.")return Lib.Trade.Global:RemoveTradeOffer(n,oP)end;API.RemoveTradeOffer=RemoveTradeOffer;function ModifyTradeOffer(n,oP,uw)error(not IsLocalScript(),"Can not be used in local script.")return Lib.Trade.Global:ModifyTradeOffer(n,oP,uw)end;API.ModifyTradeOffer=ModifyTradeOffer;Lib.Trade=Lib.Trade or{}Lib.Trade.Name="Trade"Lib.Trade.Global={Data={},PlayerOffersAmount={}}Lib.Trade.Local={Data={},ShowKnightTraderAbility=true,PurchaseTraderAbility={},PurchaseBasePrice={},PurchaseInflation={},PurchaseAllowed={},SaleTraderAbility={},SaleBasePrice={},SaleDeflation={},SaleAllowed={}}Lib.Trade.Shared={}TraderTypes={GoodTrader=0,MercenaryTrader=1,EntertainerTrader=2,Unknown=3}Lib.Require("comfort/IsHistoryEdition")Lib.Require("core/Core")Lib.Require("module/trade/Trade_API")Lib.Register("module/trade/Trade")function Lib.Trade.Global:Initialize()if not self.IsInstalled then Report.GoodsSold=CreateReport("Event_GoodsSold")Report.GoodsPurchased=CreateReport("Event_GoodsPurchased")Lib.Trade.Shared:OverwriteBasePricesAndRefreshRates()for q=1,8 do self.PlayerOffersAmount[q]={}end;self:OverwriteTradeFunctions()Lib.Trade.Local=nil end;self.IsInstalled=true end;function Lib.Trade.Global:OnSaveGameLoaded()end;function Lib.Trade.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.GoodsPurchased then SendReportToLocal(Report.GoodsPurchased,arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],arg[7])self:PerformFakeTrade(arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],arg[7])elseif aM==Report.GoodsSold then SendReportToLocal(Report.GoodsSold,arg[1],arg[2],arg[3],arg[4],arg[5],arg[6])end end;function Lib.Trade.Global:PerformFakeTrade(ux,uy,kx,aS,uz,uA,uB)local uC=Logic.GetStoreHouse(uA)local uD=Logic.GetStoreHouse(uB)local S=Logic.GetEntityOrientation(uD)-90;if uy==0 then if Logic.GetGoodCategoryForGoodType(kx)~=GoodCategories.GC_Animal then API.SendCart(uD,uA,kx,aS,nil,false)else StartSimpleJobEx(function(iU,uE,kx,n)if Logic.GetTime()>iU+5 then return true end;local E,F=Logic.GetBuildingApproachPosition(uE)local m=kx~=Goods.G_Cow and Entities.A_X_Sheep01 or Entities.A_X_Cow01;Logic.CreateEntityOnUnblockedLand(m,E,F,0,n)end,Logic.GetTime(),uD,kx,uA)end elseif uy==1 then local E,F=Logic.GetBuildingApproachPosition(uD)local ar=Logic.CreateBattalionOnUnblockedLand(kx,E,F,S,uA)Logic.MoveSettler(ar,E,F,-1)else local E,F=Logic.GetBuildingApproachPosition(uD)Logic.HireEntertainer(kx,uA,E,F)end;API.SendCart(uC,uB,Goods.G_Gold,uz,nil,false)AddGood(Goods.G_Gold,-1*uz,uA)local uF=0;local uv=self:GetStorehouseInformation(uB)for f=1,#uv[1]do if uv[1][f][3]==kx and uv[1][f][5]>0 then uF=uv[1][f][5]-1 end end;self:ModifyTradeOffer(uB,kx,uF)ExecuteLocal("GameCallback_MerchantInteraction(%d, %d, %d)",uD,uA,ux)end;function Lib.Trade.Global:GetStorehouseInformation(n)local kg=Logic.GetStoreHouse(n)local uG={Player=n,Storehouse=kg,OfferCount=0,{}}local uH=Logic.GetNumberOfMerchants(Logic.GetStoreHouse(n))local uI=0;if kg~=0 then for ax=0,uH,1 do local c2={Logic.GetMerchantOfferIDs(kg,ax,n)}for f=1,#c2,1 do local type,uJ,uK,uL=0,0,0,0;if Logic.IsGoodTrader(kg,ax)then type,uJ,uK,uL=Logic.GetGoodTraderOffer(kg,c2[f],n)if type==Goods.G_Sheep or type==Goods.G_Cow then uJ=5 end elseif Logic.IsMercenaryTrader(kg,ax)then type,uJ,uK,uL=Logic.GetMercenaryOffer(kg,c2[f],n)elseif Logic.IsEntertainerTrader(kg,ax)then type,uJ,uK,uL=Logic.GetEntertainerTraderOffer(kg,c2[f],n)end;uI=uI+1;local uM={ax,c2[f],type,uJ,uK,uL}table.insert(uG[1],uM)end end end;uG.OfferCount=uI;return uG end;function Lib.Trade.Global:GetOfferCount(n)local c2=self:GetStorehouseInformation(n)if c2 then return c2.OfferCount end;return 0 end;function Lib.Trade.Global:GetOfferAndTrader(n,oP)local nJ=self:GetStorehouseInformation(n)if nJ then for b8=1,#nJ[1],1 do if nJ[1][b8][3]==oP then return nJ[1][b8][2],nJ[1][b8][1],nJ.Storehouse end end end;return-1,-1,-1 end;function Lib.Trade.Global:GetTraderType(hL,uN)if Logic.IsGoodTrader(hL,uN)==true then return TraderTypes.GoodTrader elseif Logic.IsMercenaryTrader(hL,uN)==true then return TraderTypes.MercenaryTrader elseif Logic.IsEntertainerTrader(hL,uN)==true then return TraderTypes.EntertainerTrader else return TraderTypes.Unknown end end;function Lib.Trade.Global:RemoveTradeOffer(n,oP)local uo,up,kg=self:GetOfferAndTrader(n,oP)if not IsExisting(kg)then return end;local uO=up==1 and 2 or up==2 and 1 or 0;Logic.RemoveOffer(kg,uO,uo)end;function Lib.Trade.Global:RemoveTradeOfferByData(ho,bh)local uo=ho[1][bh][2]local up=ho[1][bh][1]local kg=ho.Storehouse;if not IsExisting(kg)then return end;local uO=up==1 and 2 or up==2 and 1 or 0;Logic.RemoveOffer(kg,uO,uo)end;function Lib.Trade.Global:ModifyTradeOffer(n,oP,uw)local uo,up,kg=self:GetOfferAndTrader(n,oP)if not IsExisting(kg)then return end;if uw==nil or uw==-1 then uw=self.PlayerOffersAmount[n][oP]end;if self.PlayerOffersAmount[n][oP]and self.PlayerOffersAmount[n][oP]<uw then uw=self.PlayerOffersAmount[n][oP]end;Logic.ModifyTraderOffer(kg,uo,uw,up)end;function Lib.Trade.Global:OverwriteTradeFunctions()AddOffer=function(uP,uQ,ao,un)local uR=Logic.EntityGetPlayer(GetID(uP))return CreateGoodOffer(uR,ao,uQ,un)end;AddMercenaryOffer=function(uS,aS,i,un)local uR=Logic.EntityGetPlayer(GetID(uS))return CreateMercenaryOffer(uR,i,aS,un)end;AddEntertainerOffer=function(uP,uT)local uR=Logic.EntityGetPlayer(GetID(uP))return CreateEntertainerOffer(uR,uT)end end;function Lib.Trade.Local:Initialize()if not self.IsInstalled then Report.GoodsSold=CreateReport("Event_GoodsSold")Report.GoodsPurchased=CreateReport("Event_GoodsPurchased")Lib.Trade.Shared:OverwriteBasePricesAndRefreshRates()g_Merchant.BuyFromPlayer={}if IsHistoryEdition()and Framework.IsNetworkGame()then return end;self:OverrideMerchantComputePurchasePrice()self:OverrideMerchantComputeSellingPrice()self:OverrideMerchantSellGoodsClicked()self:OverrideMerchantPurchaseOfferUpdate()self:OverrideMerchantPurchaseOfferClicked()Lib.Trade.Global=nil end;self.IsInstalled=true end;function Lib.Trade.Local:OnSaveGameLoaded()end;function Lib.Trade.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;function Lib.Trade.Local:GetTraderType(hL,uN)if Logic.IsGoodTrader(hL,uN)==true then return TraderTypes.GoodTrader elseif Logic.IsMercenaryTrader(hL,uN)==true then return TraderTypes.MercenaryTrader elseif Logic.IsEntertainerTrader(hL,uN)==true then return TraderTypes.EntertainerTrader else return TraderTypes.Unknown end end;function Lib.Trade.Local:OverrideMerchantPurchaseOfferUpdate()GUI_Merchant.OfferUpdate=function(kM)local d4=XGUIEng.GetCurrentWidgetID()local uU=XGUIEng.GetWidgetsMotherID(d4)local q=GUI.GetPlayerID()local kg=g_Merchant.ActiveMerchantBuilding;if kg==0 or Logic.IsEntityDestroyed(kg)==true then return end;if g_Merchant.Offers[kM]==nil then XGUIEng.ShowWidget(uU,0)return else XGUIEng.ShowWidget(uU,1)end;local uV=g_Merchant.Offers[kM].TraderType;local p1=g_Merchant.Offers[kM].OfferIndex;local bj,uW,uX,uY=0,0,0,0;if uV==g_Merchant.GoodTrader then bj,uW,uX,uY=Logic.GetGoodTraderOffer(kg,p1,q)if bj==Goods.G_Sheep or bj==Goods.G_Cow then uW=5 end;SetIcon(d4,g_TexturePositions.Goods[bj])elseif uV==g_Merchant.MercenaryTrader then bj,uW,uX,uY=Logic.GetMercenaryOffer(kg,p1,q)local j=Logic.GetEntityTypeName(bj)if bj==Entities.U_Thief then uW=1 elseif string.find(j,"U_MilitarySword")or string.find(j,"U_MilitaryBow")then uW=6 elseif string.find(j,"Cart")then uW=1 else uW=uW end;SetIcon(d4,g_TexturePositions.Entities[bj])elseif uV==g_Merchant.EntertainerTrader then bj,uW,uX,uY=Logic.GetEntertainerTraderOffer(kg,p1,q)if not(Logic.CanHireEntertainer(q)==true and Logic.EntertainerIsOnTheMap(bj)==false)then uX=0 end;SetIcon(d4,g_TexturePositions.Entities[bj])end;local uZ=XGUIEng.GetWidgetPathByID(uU).."/OfferAmount"XGUIEng.SetText(uZ,"{center}"..uX)local u_=XGUIEng.GetWidgetPathByID(uU).."/OfferGoodAmount"XGUIEng.SetText(u_,"{center}"..uW)if uX==0 then XGUIEng.DisableButton(d4,1)else XGUIEng.DisableButton(d4,0)end end end;function Lib.Trade.Local:OverrideMerchantPurchaseOfferClicked()local v0=function(i,kx,aS,uz,uA,uB)return true end;self.PurchaseAllowed.Default=v0;local v1={Locked=false}GameCallback_MerchantInteraction=function(hL,n,ux)if n==GUI.GetPlayerID()then v1.Locked=false end end;GUI_Merchant.OfferClicked=function(kM)local d4=XGUIEng.GetCurrentWidgetID()local q=GUI.GetPlayerID()local kg=g_Merchant.ActiveMerchantBuilding;if kg==0 or v1.Locked then return end;local v2=Logic.GetMarketplace(q)local v3=Logic.EntityGetPlayer(kg)local uV=g_Merchant.Offers[kM].TraderType;local p1=g_Merchant.Offers[kM].OfferIndex;local v4=true;local bj,uW,uX,uY=0,0,0,0;if uV==g_Merchant.GoodTrader then bj,uW,uX,uY=Logic.GetGoodTraderOffer(kg,p1,q)if Logic.GetGoodCategoryForGoodType(bj)==GoodCategories.GC_Resource then if Logic.GetPlayerUnreservedStorehouseSpace(q)<uW then v4=false;local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_MerchantStorehouseSpace")Message(nT)end elseif Logic.GetGoodCategoryForGoodType(bj)==GoodCategories.GC_Animal then v4=true else if Logic.CanFitAnotherMerchantOnMarketplace(v2)==false then v4=false;local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_MerchantMarketplaceFull")Message(nT)end end elseif uV==g_Merchant.EntertainerTrader then bj,uW,uX,uY=Logic.GetEntertainerTraderOffer(kg,p1,kg)if Logic.CanFitAnotherEntertainerOnMarketplace(v2)==false then v4=false;local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_MerchantMarketplaceFull")Message(nT)end elseif uV==g_Merchant.MercenaryTrader then bj,uW,uX,uY=Logic.GetMercenaryOffer(kg,p1,q)local kQ=Logic.GetEntityTypeName(bj)local v5=Logic.GetCurrentSoldierCount(q)local v6=Logic.GetCurrentSoldierLimit(q)local v7;if bj==Entities.U_Thief then v7=1 elseif string.find(kQ,"U_MilitarySword")or string.find(kQ,"U_MilitaryBow")then v7=6 elseif string.find(kQ,"Cart")then v7=0 else v7=uW end;if v5+v7>v6 then v4=false;local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_SoldierLimitReached")Message(nT)end end;if v4 then if Lib.Trade.Local.PurchaseAllowed[v3]then v4=Lib.Trade.Local.PurchaseAllowed[v3](uV,bj,uW,q,v3)else v4=Lib.Trade.Local.PurchaseAllowed.Default(uV,bj,uW,q,v3)end;if not v4 then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_GenericNotReadyYet")Message(nT)return end end;if v4==true then local pd=ComputePrice(kg,p1,q,uV)local v8=GetPlayerGoodsInSettlement(Goods.G_Gold,q)local v9=PlayerSectorTypes.Civil;local va=CanEntityReachTarget(q,Logic.GetStoreHouse(v3),Logic.GetStoreHouse(q),nil,v9)if va==false then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_GenericUnreachable")Message(nT)return end;if pd<=v8 then v1.Locked=true;GUI.ChangeMerchantOffer(kg,q,p1,pd)Sound.FXPlay2DSound("ui\\menu_click")if Lib.Trade.Local.ShowKnightTraderAbility then StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightTrading)end;g_Merchant.BuyFromPlayer[v3]=g_Merchant.BuyFromPlayer[v3]or{}g_Merchant.BuyFromPlayer[v3][bj]=(g_Merchant.BuyFromPlayer[v3][bj]or 0)+1;SendReportToGlobal(Report.GoodsPurchased,p1,uV,bj,uW,pd,q,v3)else local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_NotEnough_G_Gold")Message(nT)end end end end;function Lib.Trade.Local:OverrideMerchantSellGoodsClicked()local vb=function(i,kx,aS,uz,uA,uB)return true end;self.SaleAllowed.Default=vb;GUI_Trade.SellClicked=function()Sound.FXPlay2DSound("ui\\menu_click")if g_Trade.GoodAmount==0 then return end;local q=GUI.GetPlayerID()local vc=tonumber(XGUIEng.GetWidgetNameByID(XGUIEng.GetWidgetsMotherID(XGUIEng.GetCurrentWidgetID())))local cg=g_Trade.TargetPlayers[vc]local v9=PlayerSectorTypes.Civil;if g_Trade.GoodType==Goods.G_Gold then v9=PlayerSectorTypes.Thief end;local va=CanEntityReachTarget(cg,Logic.GetStoreHouse(q),Logic.GetStoreHouse(cg),nil,v9)if va==false then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_GenericUnreachable")Message(nT)return end;if g_Trade.GoodType==Goods.G_Gold then elseif Logic.GetGoodCategoryForGoodType(g_Trade.GoodType)==GoodCategories.GC_Resource then local vd=Logic.GetPlayerUnreservedStorehouseSpace(cg)if vd<g_Trade.GoodAmount then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_TargetFactionStorehouseSpace")Message(nT)return end else if Logic.GetNumberOfTradeGatherers(q)>=1 then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_TradeGathererUnderway")Message(nT)return end;if Logic.CanFitAnotherMerchantOnMarketplace(Logic.GetMarketplace(cg))==false then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_TargetFactionMarketplaceFull")Message(nT)return end end;local ve=true;if Lib.Trade.Local.SaleAllowed[cg]then ve=Lib.Trade.Local.SaleAllowed[cg](g_Merchant.GoodTrader,g_Trade.GoodType,g_Trade.GoodAmount,q,cg)else ve=Lib.Trade.Local.SaleAllowed.Default(g_Merchant.GoodTrader,g_Trade.GoodType,g_Trade.GoodAmount,q,cg)end;if not ve then local nT=XGUIEng.GetStringTableText("Feedback_TextLines/TextLine_GenericNotReadyYet")Message(nT)return end;local pd;local vf;if Logic.PlayerGetIsHumanFlag(cg)then pd=0;vf=0 else pd=GUI_Trade.ComputeSellingPrice(cg,g_Trade.GoodType,g_Trade.GoodAmount)vf=pd/g_Trade.GoodAmount end;GUI.StartTradeGoodGathering(q,cg,g_Trade.GoodType,g_Trade.GoodAmount,vf)GUI_FeedbackSpeech.Add("SpeechOnly_CartsSent",g_FeedbackSpeech.Categories.CartsUnderway,nil,nil)StartKnightVoiceForPermanentSpecialAbility(Entities.U_KnightTrading)if vf~=0 then if g_Trade.SellToPlayers[cg]==nil then g_Trade.SellToPlayers[cg]={}end;if g_Trade.SellToPlayers[cg][g_Trade.GoodType]==nil then g_Trade.SellToPlayers[cg][g_Trade.GoodType]=g_Trade.GoodAmount else g_Trade.SellToPlayers[cg][g_Trade.GoodType]=g_Trade.SellToPlayers[cg][g_Trade.GoodType]+g_Trade.GoodAmount end;SendReportToGlobal(Report.GoodsSold,g_Merchant.GoodTrader,g_Trade.GoodType,g_Trade.GoodAmount,pd,q,cg)end end end;function Lib.Trade.Local:OverrideMerchantComputePurchasePrice()local vg=function(uy,ul,oS,n,vh)local vi=Logic.GetKnightTraderAbilityModifier(n)return math.ceil(oS/vi)end;self.PurchaseTraderAbility.Default=vg;local vj=function(uy,ul,n,vh)local vk=MerchantSystem.BasePrices[ul]return vk==nil and 3 or vk end;self.PurchaseBasePrice.Default=vj;local vl=function(uy,ao,vm,uz,n,vh)vm=vm>8 and 8 or vm;local d=uz+math.ceil(uz/4)*vm;return d<uz and uz or d end;self.PurchaseInflation.Default=vl;ComputePrice=function(kg,uo,q,uV)local v3=Logic.EntityGetPlayer(kg)local m=Logic.GetGoodOfOffer(kg,uo,q,uV)local vk;if Lib.Trade.Local.PurchaseBasePrice[v3]then vk=Lib.Trade.Local.PurchaseBasePrice[v3](uV,m,q,v3)else vk=Lib.Trade.Local.PurchaseBasePrice.Default(uV,m,q,v3)end;local pd;if Lib.Trade.Local.PurchaseTraderAbility[v3]then pd=Lib.Trade.Local.PurchaseTraderAbility[v3](uV,m,vk,q,v3)else pd=Lib.Trade.Local.PurchaseTraderAbility.Default(uV,m,vk,q,v3)end;local bX=0;if g_Merchant.BuyFromPlayer[v3]and g_Merchant.BuyFromPlayer[v3][m]then bX=g_Merchant.BuyFromPlayer[v3][m]end;local vn;if Lib.Trade.Local.PurchaseInflation[v3]then vn=Lib.Trade.Local.PurchaseInflation[v3](uV,m,bX,pd,q,v3)else vn=Lib.Trade.Local.PurchaseInflation.Default(uV,m,bX,pd,q,v3)end;return vn end end;function Lib.Trade.Local:OverrideMerchantComputeSellingPrice()local vg=function(uy,ul,oS,n,vh)return oS end;self.SaleTraderAbility.Default=vg;local vj=function(uy,ul,n,vo)local vk=MerchantSystem.BasePrices[ul]return vk==nil and 3 or vk end;self.SaleBasePrice.Default=vj;local vp=function(uy,ul,vq,uz,n,vo)return uz-math.ceil(uz/4)end;self.SaleDeflation.Default=vp;GUI_Trade.ComputeSellingPrice=function(vo,ao,m0)if ao==Goods.G_Gold then return 0 end;local q=GUI.GetPlayerID()local vr=MerchantSystem.Waggonload;local vk;if Lib.Trade.Local.SaleBasePrice[vo]then vk=Lib.Trade.Local.SaleBasePrice[vo](g_Merchant.GoodTrader,ao,q,vo)else vk=Lib.Trade.Local.SaleBasePrice.Default(g_Merchant.GoodTrader,ao,q,vo)end;local pd=vk;if Lib.Trade.Local.SaleTraderAbility[vo]then pd=Lib.Trade.Local.SaleTraderAbility[vo](g_Merchant.GoodTrader,ao,vk,q,vo)else pd=Lib.Trade.Local.SaleTraderAbility.Default(g_Merchant.GoodTrader,ao,vk,q,vo)end;local vs=0;if g_Trade.SellToPlayers[vo]~=nil and g_Trade.SellToPlayers[vo][ao]~=nil then vs=g_Trade.SellToPlayers[vo][ao]end;local vi=math.ceil(pd/4)local vt=math.ceil(m0/vr)local vu=math.ceil(vs/vr)local vv;if Lib.Trade.Local.SaleDeflation[vo]then vv=Lib.Trade.Local.SaleDeflation[vo](g_Merchant.GoodTrader,ao,vu,pd,q,vo)else vv=Lib.Trade.Local.SaleDeflation.Default(g_Merchant.GoodTrader,ao,vu,pd,q,vo)end;local vw=0;for f=1,vt do vw=vw+math.min(vu*vi,vv)vu=vu+1 end;return vt*vk-vw end end;function Lib.Trade.Shared:OverwriteBasePricesAndRefreshRates()MerchantSystem.BasePrices[Entities.U_CatapultCart]=MerchantSystem.BasePrices[Entities.U_CatapultCart]or 1000;MerchantSystem.BasePrices[Entities.U_BatteringRamCart]=MerchantSystem.BasePrices[Entities.U_BatteringRamCart]or 450;MerchantSystem.BasePrices[Entities.U_SiegeTowerCart]=MerchantSystem.BasePrices[Entities.U_SiegeTowerCart]or 600;MerchantSystem.BasePrices[Entities.U_AmmunitionCart]=MerchantSystem.BasePrices[Entities.U_AmmunitionCart]or 150;MerchantSystem.BasePrices[Entities.U_MilitarySword_RedPrince]=MerchantSystem.BasePrices[Entities.U_MilitarySword_RedPrince]or 200;MerchantSystem.BasePrices[Entities.U_MilitarySword]=MerchantSystem.BasePrices[Entities.U_MilitarySword]or 200;MerchantSystem.BasePrices[Entities.U_MilitaryBow_RedPrince]=MerchantSystem.BasePrices[Entities.U_MilitaryBow_RedPrince]or 350;MerchantSystem.BasePrices[Entities.U_MilitaryBow]=MerchantSystem.BasePrices[Entities.U_MilitaryBow]or 350;MerchantSystem.RefreshRates[Entities.U_CatapultCart]=MerchantSystem.RefreshRates[Entities.U_CatapultCart]or 270;MerchantSystem.RefreshRates[Entities.U_BatteringRamCart]=MerchantSystem.RefreshRates[Entities.U_BatteringRamCart]or 190;MerchantSystem.RefreshRates[Entities.U_SiegeTowerCart]=MerchantSystem.RefreshRates[Entities.U_SiegeTowerCart]or 220;MerchantSystem.RefreshRates[Entities.U_AmmunitionCart]=MerchantSystem.RefreshRates[Entities.U_AmmunitionCart]or 150;MerchantSystem.RefreshRates[Entities.U_MilitaryBow_RedPrince]=MerchantSystem.RefreshRates[Entities.U_MilitarySword_RedPrince]or 150;MerchantSystem.RefreshRates[Entities.U_MilitarySword]=MerchantSystem.RefreshRates[Entities.U_MilitarySword]or 150;MerchantSystem.RefreshRates[Entities.U_MilitaryBow_RedPrince]=MerchantSystem.RefreshRates[Entities.U_MilitaryBow_RedPrince]or 150;MerchantSystem.RefreshRates[Entities.U_MilitaryBow]=MerchantSystem.RefreshRates[Entities.U_MilitaryBow]or 150;if g_GameExtraNo>=1 then MerchantSystem.BasePrices[Entities.U_MilitaryBow_Khana]=MerchantSystem.BasePrices[Entities.U_MilitaryBow_Khana]or 350;MerchantSystem.BasePrices[Entities.U_MilitarySword_Khana]=MerchantSystem.BasePrices[Entities.U_MilitarySword_Khana]or 200;MerchantSystem.RefreshRates[Entities.U_MilitaryBow_Khana]=MerchantSystem.RefreshRates[Entities.U_MilitaryBow_Khana]or 150;MerchantSystem.RefreshRates[Entities.U_MilitaryBow_Khana]=MerchantSystem.RefreshRates[Entities.U_MilitarySword_Khana]or 150 end end;RegisterModule(Lib.Trade.Name)Lib.Require("comfort/IsLocalScript")Lib.Register("module/trade/TradeRoute_API")function InitHarbor(n,...)assert(not IsLocalScript(),"Can not be used in local script!")assert(Logic.GetStoreHouse(n)~=0,"Player "..n.." is dead! :(")Lib.TradeRoute.Global:CreateHarbor(n,false)for f=1,#arg do AddTradeRoute(n,arg[f])end end;API.InitHarbor=InitHarbor;function DisposeHarbor(n)assert(not IsLocalScript(),"Can not be used in local script!")assert(Logic.GetStoreHouse(n)~=0,"Player "..n.." is dead! :(")Lib.TradeRoute.Global:DisposeHarbor(n)end;API.DisposeHarbor=DisposeHarbor;function AddTradeRoute(n,vx)assert(not IsLocalScript(),"Can not be used in local script!")assert(Logic.GetStoreHouse(n)~=0,"Player "..n.." is dead! :(")assert(type(vx)=="table","_Route must be a table!")assert(vx.Name~=nil,"Trade route must have a name!")assert(vx.Path and#vx.Path>=2,"Path of route "..vx.Name.." has to few nodes!")assert(vx.Offers and#vx.Offers>=1,"Route "..vx.Name.." has to few offers!")vx.Amount=vx.Amount or(#vx.Offers>4 and 4 or#vx.Offers)assert(vx.Amount>=1 and vx.Amount<=4,"Route "..vx.Name.." can only add up to 4 offers!")assert(vx.Amount<=#vx.Offers,"Route "..vx.Name.." has not enough offers to add!")if Lib.TradeRoute.Global:CountTradeRoutes(n)>0 and Lib.TradeRoute.Global:IsRetroHarbor(n)then assert(false,"Can't add routes to traveling salesman!")end;for f=1,#vx.Offers,1 do local vy=Goods[vx.Offers[f][1]]~=nil;local vz=Entities[vx.Offers[f][1]]~=nil;assert(vy or vz,"Offers["..f.."][1] is of invalid good or unit type!")local vA=type(vx.Offers[f][2])=="number"and vx.Offers[f][2]>=1;assert(vA,"Offers["..f.."][2] amount must be at least 1!")end;Lib.TradeRoute.Global:AddTradeRoute(n,vx)end;API.AddTradeRoute=AddTradeRoute;function ChangeTradeRouteGoods(n,vB,vC)assert(not IsLocalScript(),"Can not be used in local script!")assert(Logic.GetStoreHouse(n)~=0,"Player "..n.." is dead! :(")assert(type(vC)=="table"and#vC>=1,"_RouteOffers must be a table with entries!")for f=1,#vC,1 do local vy=Goods[vC[f][1]]~=nil;local vz=Entities[vC[f][1]]~=nil;assert(vy or vz,"Offers["..f.."][1] is of invalid good or unit type!")local vA=type(vC[f][2])=="number"and vC[f][2]>=1;assert(vA,"Offers["..f.."][2] amount must be at least 1!")end;Lib.TradeRoute.Global:AlterTradeRouteOffers(n,vB,vC)end;API.ChangeTradeRouteGoods=ChangeTradeRouteGoods;function RemoveTradeRoute(n,vB)assert(not IsLocalScript(),"Can not be used in local script!")assert(Logic.GetStoreHouse(n)~=0,"Player "..n.." is dead! :(")assert(not Lib.TradeRoute.Global:IsRetroHarbor(n),"Can't remove routes to traveling salesman!")return Lib.TradeRoute.Global:ShutdownTradeRoute(n,vB)end;API.RemoveTradeRoute=RemoveTradeRoute;function InitTravelingSalesman(vx)assert(not IsLocalScript(),"Can not be used in local script!")assert(type(vx)=="table","_Route must be a table!")assert(vx.PlayerID~=nil,"_Route.PlayerID is invalid!")local q=vx.PlayerID;vx.PlayerID=nil;Lib.TradeRoute.Global:CreateHarbor(q,true)assert(Logic.GetStoreHouse(q)~=0,"Player "..q.." is dead! :(")vx.Name="Player"..q.."_Route"vx.Message=vx.Message~=false;AddTradeRoute(q,vx)Lib.TradeRoute.Global:OnTravelingSalesmanInitalized(q)end;API.InitTravelingSalesman=InitTravelingSalesman;function DisposeTravelingSalesman(n)DisposeHarbor(n)end;API.DisposeTravelingSalesman=DisposeTravelingSalesman;function ChangeTravelingSalesmanGoods(n,vC)assert(Lib.TradeRoute.Global:IsRetroHarbor(n),"Not a traveling salesman!")ChangeTradeRouteGoods(n,"Player"..n.."_Route",vC)end;API.ChangeTravelingSalesmanGoods=ChangeTravelingSalesmanGoods;Lib.TradeRoute=Lib.TradeRoute or{}Lib.TradeRoute.Name="TradeRoute"Lib.TradeRoute.CinematicEvents={}Lib.TradeRoute.Global={Harbors={}}Lib.TradeRoute.Local={}Lib.TradeRoute.Text={}ShipTraderState={Waiting=1,MovingIn=2,Anchored=3,MovingOut=4}Lib.Require("core/Core")Lib.Require("module/trade/Trade")Lib.Require("module/trade/TradeRoute_API")Lib.Register("module/trade/TradeRoute")function Lib.TradeRoute.Global:Initialize()if not self.IsInstalled then Report.TradeShipSpawned=CreateReport("Event_TradeShipSpawned")Report.TradeShipArrived=CreateReport("Event_TradeShipArrived")Report.TradeShipLeft=CreateReport("Event_TradeShipLeft")Report.TradeShipDespawned=CreateReport("Event_TradeShipDespawned")RequestJob(function()Lib.TradeRoute.Global:ControlHarbors()end)Lib.TradeRoute.Local=nil end;self.IsInstalled=true end;function Lib.TradeRoute.Global:OnSaveGameLoaded()end;function Lib.TradeRoute.Global:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true elseif aM==Report.TradeShipSpawned then self:OnTravelingSalesmanShipSpawned(arg[1],arg[2],arg[3])elseif aM==Report.TradeShipArrived then self:OnTravelingSalesmanShipArrived(arg[1],arg[2],arg[3])elseif aM==Report.TradeShipLeft then self:OnTravelingSalesmanShipLeft(arg[1],arg[2],arg[3])end end;function Lib.TradeRoute.Global:CreateHarbor(n,vD)if self.Harbors[n]then self:DisposeHarbor(n)end;self.Harbors[n]={IsRetro=vD==true,AddedOffers={},Routes={}}end;function Lib.TradeRoute.Global:DisposeHarbor(n)local cq=Logic.GetStoreHouse(n)for g,h in pairs(self.Harbors[n].Routes)do self:PurgeTradeRoute(n,h.Name)end;if IsExisting(cq)then Logic.RemoveAllOffers(cq)end end;function Lib.TradeRoute.Global:IsRetroHarbor(n)if self.Harbors[n]then return self.Harbors[n].IsRetro==true end;return false end;function Lib.TradeRoute.Global:IsSendingMessage(n)return self.Harbors[n]and self.Harbors[n].Routes[1]and self.Harbors[n].Routes[1].Message end;function Lib.TradeRoute.Global:CountTradeRoutes(n)if self.Harbors[n]then return#self.Harbors[n].Routes end;return false end;function Lib.TradeRoute.Global:AddTradeRoute(n,ho)if not self.Harbors[n]then return end;for f=#self.Harbors[n].Routes,1,-1 do if self.Harbors[n].Routes[f].Name==ho.Name then return end end;ho.Interval=ho.Interval or 300;ho.Duration=ho.Duration or 120;ho.Timer=0;ho.State=ShipTraderState.Waiting;table.insert(self.Harbors[n].Routes,ho)end;function Lib.TradeRoute.Global:AlterTradeRouteOffers(n,C,vE)if not self.Harbors[n]then return end;for f=#self.Harbors[n].Routes,1,-1 do if self.Harbors[n].Routes[f].Name==C then vE.Message=self.Harbors[n].Routes[f].Message==true;self.Harbors[n].Routes[f].Offers=vE;return end end end;function Lib.TradeRoute.Global:PurgeAllTradeRoutes(n)if not self.Harbors[n]then return end;for f=#self.Harbors[n].Routes,1,-1 do local bk=table.remove(self.Harbors[n].Routes,f)if IsExisting(bk.ShipID)then DestroyEntity(bk.ShipID)end;if JobIsRunning(bk.ShipID)then EndJob(bk.ShipJob)end end end;function Lib.TradeRoute.Global:PurgeTradeRoute(n,C)if not self.Harbors[n]then return end;for f=#self.Harbors[n].Routes,1,-1 do if self.Harbors[n].Routes[f].Name==C then local bk=table.remove(self.Harbors[n].Routes,f)if IsExisting(bk.ShipID)then DestroyEntity(bk.ShipID)end;if JobIsRunning(bk.ShipID)then EndJob(bk.ShipJob)end;break end end end;function Lib.TradeRoute.Global:ShutdownTradeRoute(n,C)if self.Harbors[n]then for f=#self.Harbors[n].Routes,1,-1 do if self.Harbors[n].Routes[f].Name==C then return RequestJob(function(n,bh)if self.Harbors[n].Routes[bh].State==ShipTraderState.Waiting then local Name=self.Harbors[n].Routes[bh].Name;Lib.TradeRoute.Global:PurgeTradeRoute(n,Name)return true end end,n,f)end end end;return 0 end;function Lib.TradeRoute.Global:SpawnShip(n,bh)local vF=self.Harbors[n].Routes[bh]local p8=GetID(vF.Path[1])local E,F,G=Logic.EntityGetPos(p8)local S=Logic.GetEntityOrientation(p8)local ar=Logic.CreateEntity(Entities.D_X_TradeShip,E,F,S,0)self.Harbors[n].Routes[bh].ShipID=ar;self:SendShipSpawnedEvent(n,vF,ar)Logic.SetSpeedFactor(ar,3.0)return ar end;function Lib.TradeRoute.Global:DespawnShip(n,bh)local ar=self.Harbors[n].Routes[bh].ShipID;local vF=self.Harbors[n].Routes[bh]self:SendShipDespawnedEvent(n,vF,ar)DestroyEntity(ar)end;function Lib.TradeRoute.Global:MoveShipIn(n,bh)local vF=self.Harbors[n].Routes[bh]local ar=self.Harbors[n].Routes[bh].ShipID;local vG={}for f=1,#vF.Path do table.insert(vG,GetID(vF.Path[f]))end;local vH=Path:new(ar,vG,nil,nil,nil,nil,true,nil,nil,300)self.Harbors[n].Routes[bh].ShipJob=vH.Job;return ar end;function Lib.TradeRoute.Global:MoveShipOut(n,bh)local vF=self.Harbors[n].Routes[bh]local ar=self.Harbors[n].Routes[bh].ShipID;local vG={}for f=1,#vF.Path do table.insert(vG,GetID(vF.Path[f]))end;local vH=Path:new(ar,table.invert(vG),nil,nil,nil,nil,true,nil,nil,300)self.Harbors[n].Routes[bh].ShipJob=vH.Job;return ar end;function Lib.TradeRoute.Global:SendShipSpawnedEvent(n,vx,vI)SendReport(Report.TradeShipSpawned,n,vx.Name,vI)SendReportToLocal(Report.TradeShipSpawned,n,vx.Name,vI)end;function Lib.TradeRoute.Global:SendShipDespawnedEvent(n,vx,vI)SendReport(Report.TradeShipDespawned,n,vx.Name,vI)SendReportToLocal(Report.TradeShipDespawned,n,vx.Name,vI)end;function Lib.TradeRoute.Global:SendShipArrivedEvent(n,vx,vI)SendReport(Report.TradeShipArrived,n,vx.Name,vI)SendReportToLocal(Report.TradeShipArrived,n,vx.Name,vI)end;function Lib.TradeRoute.Global:SendShipLeftEvent(n,vx,vI)SendReport(Report.TradeShipLeft,n,vx.Name,vI)SendReportToLocal(Report.TradeShipLeft,n,vx.Name,vI)end;function Lib.TradeRoute.Global:AddTradeOffers(n,bh)local vJ=self.Harbors[n]local vF=vJ.Routes[bh]local c2={}if vF.Amount==#vF.Offers then c2=table.copy(vF.Offers)else local vK={}while#vK<vF.Amount do local ax=math.random(1,#vF.Offers)if not table.contains(vK,ax)then table.insert(vK,ax)end end;for f=1,#vK do table.insert(c2,table.copy(vF.Offers[vK[f]]))end end;local vL;for f=1,#c2 do local vy=true;local vM=false;local p0=Goods[c2[f][1]]if not p0 then vy=false;p0=Entities[c2[f][1]]if Logic.IsEntityTypeInCategory(Entities[c2[f][1]],EntityCategories.Military)==1 then vM=true end end;vL=GetOfferInformation(n)if not self:IsRetroHarbor(n)and vL.OfferCount>=4 then local vN=table.remove(self.Harbors[n].AddedOffers,1)RemoveTradeOffer(n,vN)end;vL=GetOfferInformation(n)RemoveTradeOffer(n,p0)if vy then CreateGoodOffer(n,p0,c2[f][2],60*60*24*7)else if not vM then CreateEntertainerOffer(n,p0)else CreateMercenaryOffer(n,p0,c2[f][2],60*60*24*7)end end;table.insert(self.Harbors[n].AddedOffers,p0)vL=GetOfferInformation(n)end;ExecuteLocal([[GameCallback_CloseNPCInteraction(GUI.GetPlayerID(), %d)]],vL.Storehouse)end;function Lib.TradeRoute.Global:RemoveTradeOffers(n,bh)if self:IsRetroHarbor(n)then local cq=Logic.GetStoreHouse(n)Logic.RemoveAllOffers(cq)end end;function Lib.TradeRoute.Global:ControlHarbors()for g,h in pairs(self.Harbors)do if Logic.GetStoreHouse(g)==0 then self:DisposeHarbor(g)else if#h.Routes>0 then local vL=GetOfferInformation(g)for f=1,#vL[1]do if vL[1][f][5]==0 then Lib.Trade.Global:RemoveTradeOfferByData(vL,f)for b8=#h.AddedOffers,1,-1 do if h.AddedOffers[b8]==vL[1][f][3]then table.remove(self.Harbors[g].AddedOffers,b8)end end end end;for f=1,#h.Routes do if h.Routes[f].State==ShipTraderState.Waiting then self.Harbors[g].Routes[f].Timer=h.Routes[f].Timer+1;if h.Routes[f].Timer>=h.Routes[f].Interval then self.Harbors[g].Routes[f].State=ShipTraderState.MovingIn;self.Harbors[g].Routes[f].Timer=0;self:SpawnShip(g,f)self:MoveShipIn(g,f)end elseif h.Routes[f].State==ShipTraderState.MovingIn then local vO=h.Routes[f].Path[#h.Routes[f].Path]local vP=h.Routes[f].ShipID;if IsNear(vP,vO,300)then self.Harbors[g].Routes[f].State=ShipTraderState.Anchored;self:SendShipArrivedEvent(g,h.Routes[f],vP)self:AddTradeOffers(g,f)end elseif h.Routes[f].State==ShipTraderState.Anchored then local vP=h.Routes[f].ShipID;self.Harbors[g].Routes[f].Timer=h.Routes[f].Timer+1;if h.Routes[f].Timer>=h.Routes[f].Duration then self.Harbors[g].Routes[f].State=ShipTraderState.MovingOut;self.Harbors[g].Routes[f].Timer=0;self:SendShipLeftEvent(g,h.Routes[f],vP)self:RemoveTradeOffers(g,f)self:MoveShipOut(g,f)end elseif h.Routes[f].State==ShipTraderState.MovingOut then local p7=h.Routes[f].Path[1]local vP=h.Routes[f].ShipID;if IsNear(vP,p7,300)then self.Harbors[g].Routes[f].State=ShipTraderState.Waiting;self:DespawnShip(g,f)end end end end end end end;function Lib.TradeRoute.Global:OnTravelingSalesmanInitalized(n)if self:IsRetroHarbor(n)then for q=1,8 do if n~=q and Logic.PlayerGetIsHumanFlag(q)then SetDiplomacyState(q,n,0)end end end end;function Lib.TradeRoute.Global:OnTravelingSalesmanShipSpawned(n,vB,vI)if self:IsRetroHarbor(n)then if self:IsSendingMessage(n)then ExecuteLocal("LocalScriptCallback_QueueVoiceMessage("..n..", 'TravelingSalesmanSpotted')")end end end;function Lib.TradeRoute.Global:OnTravelingSalesmanShipArrived(n,vB,vI)if self:IsRetroHarbor(n)then if self:IsSendingMessage(n)then ExecuteLocal("LocalScriptCallback_QueueVoiceMessage("..n..", 'TravelingSalesman')")end;for q=1,8 do if n~=q and Logic.PlayerGetIsHumanFlag(q)then SetDiplomacyState(q,n,1)end end end end;function Lib.TradeRoute.Global:OnTravelingSalesmanShipLeft(n,vB,vI)if self:IsRetroHarbor(n)then if self:IsSendingMessage(n)then ExecuteLocal("LocalScriptCallback_QueueVoiceMessage("..n..", 'TravelingSalesman_Failure')")end;for q=1,8 do if n~=q and Logic.PlayerGetIsHumanFlag(q)then SetDiplomacyState(q,n,0)end end end end;function Lib.TradeRoute.Local:Initialize()if not self.IsInstalled then Report.TradeShipSpawned=CreateReport("Event_TradeShipSpawned")Report.TradeShipArrived=CreateReport("Event_TradeShipArrived")Report.TradeShipLeft=CreateReport("Event_TradeShipLeft")Report.TradeShipDespawned=CreateReport("Event_TradeShipDespawned")Lib.TradeRoute.Local=nil end;self.IsInstalled=true end;function Lib.TradeRoute.Local:OnSaveGameLoaded()end;function Lib.TradeRoute.Local:OnReportReceived(aM,...)if aM==Report.LoadingFinished then self.LoadscreenClosed=true end end;RegisterModule(Lib.TradeRoute.Name)Lib.Register("core/QSB")ParameterType=ParameterType or{}Report=Report or{}g_QuestBehaviorVersion=1;g_QuestBehaviorTypes={}g_GameExtraNo=0;if Framework then g_GameExtraNo=Framework.GetGameExtraNo()elseif MapEditor then g_GameExtraNo=MapEditor.GetGameExtraNo()end;function LoadBehaviors()for f=1,#g_QuestBehaviorTypes,1 do local b5=g_QuestBehaviorTypes[f]if not _G["B_"..b5.Name].new then _G["B_"..b5.Name].new=function(self,...)local b6={...}local b7=table.copy(self)b7.i47ya_6aghw_frxil={}b7.v12ya_gg56h_al125={}for b8=1,#b6,1 do table.insert(b7.v12ya_gg56h_al125,b6[b8])if self.Parameter and self.Parameter[b8]~=nil then b7:AddParameter(b8-1,b6[b8])else table.insert(b7.i47ya_6aghw_frxil,b6[b8])end end;return b7 end end end end;function RegisterBehavior(b9)if GUI~=nil then return end;if type(b9)~="table"or b9.Name==nil then assert(false,"Behavior is invalid!")return end;if b9.RequiresExtraNo and b9.RequiresExtraNo>g_GameExtraNo then return end;if not _G["B_"..b9.Name]then error(string.format("Behavior %s does not exist!",b9.Name))return end;for f=1,#g_QuestBehaviorTypes,1 do if g_QuestBehaviorTypes[f].Name==b9.Name then return end end;if b9.CustomFunction then b9.CustomFunction_Orig=b9.CustomFunction;b9.CustomFunction=function(self,ba)if Lib.Core.Debug.CheckAtRun and self.DEBUG and not self.DEBUG_ERROR_FOUND and self:Debug(ba)then self.DEBUG_ERROR_FOUND=true end;return self:CustomFunction_Orig(ba)end end;table.insert(g_QuestBehaviorTypes,b9)end;if not MapEditor and GUI then return end;Lib.Require("comfort/GetPosition")Lib.Register("core/Core_Behavior")function Reward_DEBUG(bb,bc,bd,be,bf)return B_Reward_DEBUG:new(bb,bc,bd,be,bf)end;B_Reward_DEBUG={Name="Reward_DEBUG",Description={en="Reward: Start the debug mode. See documentation for more information.",de="Lohn: Startet den Debug-Modus. Für mehr Informationen siehe Dokumentation.",fr="Récompense: Démarre le mode de débug. Pour plus d'informations, voir la documentation."},Parameter={{ParameterType.Custom,en="Activate script errors",de="Skriptfeleranzeige nutzen",fr="Afficher les erreurs de script"},{ParameterType.Custom,en="Check quest while runtime",de="Quests zur Laufzeit prüfen",fr="Vérifier les quêtes au cours de l'exécution"},{ParameterType.Custom,en="Activate developing cheats",de="Cheats aktivieren",fr="Activer les cheats"},{ParameterType.Custom,en="Activate developing shell",de="Eingabe aktivieren",fr="Activer la saisie"},{ParameterType.Custom,en="Use quest trace",de="Questverfolgung",fr="Suivi de quête"}}}function B_Reward_DEBUG:GetRewardTable(bg)return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_DEBUG:AddParameter(bh,bi)if bh==0 then self.DisplayScriptErrors=ToBoolean(bi)elseif bh==1 then self.CheckWhileRuntime=ToBoolean(bi)elseif bh==2 then self.DevelopingCheats=ToBoolean(bi)elseif bh==3 then self.DevelopingShell=ToBoolean(bi)elseif bh==4 then self.UseQuestTrace=ToBoolean(bi)end end;function B_Reward_DEBUG:CustomFunction(bg)ActivateDebugMode(self.DisplayScriptErrors,self.CheckWhileRuntime,self.DevelopingCheats,self.DevelopingShell,self.UseQuestTrace)end;function B_Reward_DEBUG:GetCustomData(bh)return{"true","false"}end;RegisterBehavior(B_Reward_DEBUG)function Goal_ActivateObject(...)return B_Goal_ActivateObject:new(...)end;B_Goal_ActivateObject={Name="Goal_ActivateObject",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.ScriptName,en="Object name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_ActivateObject:GetGoalTable()return{Objective.Object,{self.ScriptName}}end;function B_Goal_ActivateObject:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_ActivateObject:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateObject)function Goal_Deliver(...)return B_Goal_Deliver:new(...)end;B_Goal_Deliver={Name="Goal_Deliver",Description={en="Goal: Deliver goods to quest giver or to another player.",de="Ziel: Liefere Waren zum Auftraggeber oder zu einem anderen Spieler.",fr="Objectif: livrer des marchandises au mandant ou à un autre joueur."},Parameter={{ParameterType.Custom,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Ressourcenmenge",fr="Quantité de ressources"},{ParameterType.Custom,en="To different player",de="Anderer Empfänger",fr="Autre bénéficiaire"},{ParameterType.Custom,en="Ignore capture",de="Abfangen ignorieren",fr="Ignorer une interception"}}}function B_Goal_Deliver:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Deliver,bj,self.GoodAmount,self.OverrideTarget,self.IgnoreCapture}end;function B_Goal_Deliver:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 elseif bh==2 then self.OverrideTarget=tonumber(bi)elseif bh==3 then self.IgnoreCapture=ToBoolean(bi)end end;function B_Goal_Deliver:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then table.insert(bk,"-")for f=1,8 do table.insert(bk,f)end elseif bh==3 then table.insert(bk,"true")table.insert(bk,"false")else assert(false)end;return bk end;function B_Goal_Deliver:GetMsgKey()local bj=Logic.GetGoodTypeID(self.GoodTypeName)local bl=Logic.GetGoodCategoryForGoodType(bj)local bm={[GoodCategories.GC_Clothes]="Quest_Deliver_GC_Clothes",[GoodCategories.GC_Entertainment]="Quest_Deliver_GC_Entertainment",[GoodCategories.GC_Food]="Quest_Deliver_GC_Food",[GoodCategories.GC_Gold]="Quest_Deliver_GC_Gold",[GoodCategories.GC_Hygiene]="Quest_Deliver_GC_Hygiene",[GoodCategories.GC_Medicine]="Quest_Deliver_GC_Medicine",[GoodCategories.GC_Water]="Quest_Deliver_GC_Water",[GoodCategories.GC_Weapon]="Quest_Deliver_GC_Weapon",[GoodCategories.GC_Resource]="Quest_Deliver_Resources"}if bl then local bn=bm[bl]if bn then return bn end end;return"Quest_Deliver_Goods"end;RegisterBehavior(B_Goal_Deliver)function Goal_Diplomacy(...)return B_Goal_Diplomacy:new(...)end;B_Goal_Diplomacy={Name="Goal_Diplomacy",Description={en="Goal: A diplomatic state must b reached. Can be lower than current state or higher.",de="Ziel: Die Beziehungen zu einem Spieler müssen entweder verbessert oder verschlechtert werden.",fr="Objectif: les relations avec un joueur doivent être soit améliorées, soit détériorées."},Parameter={{ParameterType.PlayerID,en="Party",de="Partei",fr="Faction"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Custom,en="Diplomacy state",de="Diplomatische Beziehung",fr="Relations diplomatiques"}},TextPattern={de="DIPLOMATIESTATUS ERREICHEN {cr}{cr}Status: %s{cr}Zur Partei: %s",en="DIPLOMATIC STATE {cr}{cr}State: %s{cr}To player: %s",fr="ATTEINDRE LE STATUT DE DIPLOMATIQUE {cr}{cr}Statut : %s{cr}Avec la faction : %s"}}function B_Goal_Diplomacy:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Diplomacy:GetDiplomacyMapping()return{[DiplomacyStates.Allied]={de="Verbündeter",en="Allied",fr="Allié"},[DiplomacyStates.TradeContact]={de="Handelspartner",en="Trade Contact",fr="Partenaire commercial"},[DiplomacyStates.EstablishedContact]={de="Bekannt",en="Established Contact",fr="Contact établi"},[DiplomacyStates.Undecided]={de="Unbekannt",en="Undecided",fr="Inconnu"},[DiplomacyStates.Enemy]={de="Feind",en="Enemy",fr="Ennemi"}}end;function B_Goal_Diplomacy:ChangeCaption(bg)local bo=self:GetDiplomacyMapping()local bp=GetPlayerName(self.PlayerID)or""local bq=string.format(Localize(self.TextPattern),Localize(bo[self.DiplState]),bp)Lib.Core.Quest:ChangeCustomQuestCaptionText(bq,bg)end;function B_Goal_Diplomacy:CustomFunction(bg)self:ChangeCaption(bg)if self.Relation=="<="then if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)<=self.DiplState then return true end elseif self.Relation==">="then if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)>=self.DiplState then return true end else if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)==self.DiplState then return true end end end;function B_Goal_Diplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Relation=bi elseif bh==2 then self.DiplState=DiplomacyStates[bi]end end;function B_Goal_Diplomacy:GetIcon()return{6,3}end;function B_Goal_Diplomacy:GetCustomData(bh)if bh==1 then return{">=","<=","=="}elseif bh==2 then return{"Allied","TradeContact","EstablishedContact","Undecided","Enemy"}end end;RegisterBehavior(B_Goal_Diplomacy)function Goal_DiscoverPlayer(...)return B_Goal_DiscoverPlayer:new(...)end;B_Goal_DiscoverPlayer={Name="Goal_DiscoverPlayer",Description={en="Goal: Discover the home territory of another player.",de="Ziel: Entdecke das Heimatterritorium eines Spielers.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DiscoverPlayer:GetGoalTable()return{Objective.Discover,2,{self.PlayerID}}end;function B_Goal_DiscoverPlayer:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DiscoverPlayer:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayer)function Goal_DiscoverTerritory(...)return B_Goal_DiscoverTerritory:new(...)end;B_Goal_DiscoverTerritory={Name="Goal_DiscoverTerritory",Description={en="Goal: Discover a territory",de="Ziel: Entdecke ein Territorium",fr="Objectif : Découvrir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_DiscoverTerritory:GetGoalTable()return{Objective.Discover,1,{self.TerritoryID}}end;function B_Goal_DiscoverTerritory:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end;assert(self.TerritoryID>0)end end;function B_Goal_DiscoverTerritory:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritory)function Goal_DestroyPlayer(...)return B_Goal_DestroyPlayer:new(...)end;B_Goal_DestroyPlayer={Name="Goal_DestroyPlayer",Description={en="Goal: Destroy a player (destroy a main building)",de="Ziel: Zerstöre einen Spieler (ein Hauptgebäude muss zerstört werden).",fr="Objectif : Détruire un joueur (un bâtiment principal doit être détruit)."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyPlayer:GetGoalTable()assert(self.PlayerID<=8 and self.PlayerID>=1,"Error in "..self.Name..": GetGoalTable: PlayerID is invalid")return{Objective.DestroyPlayers,self.PlayerID}end;function B_Goal_DestroyPlayer:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DestroyPlayer:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_DestroyEntities_Building"end;RegisterBehavior(B_Goal_DestroyPlayer)function Goal_StealInformation(...)return B_Goal_StealInformation:new(...)end;B_Goal_StealInformation={Name="Goal_StealInformation",Description={en="Goal: Steal information from another players castle",de="Ziel: Stehle Informationen aus der Burg eines Spielers",fr="Objectif : voler des informations du château d'un joueur"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_StealInformation:GetGoalTable()local aL=Logic.GetHeadquarters(self.PlayerID)if not aL or aL==0 then aL=Logic.GetStoreHouse(self.PlayerID)end;assert(aL and aL~=0)return{Objective.Steal,1,{aL}}end;function B_Goal_StealInformation:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_StealInformation:GetMsgKey()return"Quest_Steal_Info"end;RegisterBehavior(B_Goal_StealInformation)function Goal_DestroyAllPlayerUnits(...)return B_Goal_DestroyAllPlayerUnits:new(...)end;B_Goal_DestroyAllPlayerUnits={Name="Goal_DestroyAllPlayerUnits",Description={en="Goal: Destroy all units owned by player (be careful with script entities)",de="Ziel: Zerstöre alle Einheiten eines Spielers (vorsicht mit Script-Entities)",fr="Objectif: Détruire toutes les unités d'un joueur (attention aux entités de script)"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyAllPlayerUnits:GetGoalTable()return{Objective.DestroyAllPlayerUnits,self.PlayerID}end;function B_Goal_DestroyAllPlayerUnits:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;function B_Goal_DestroyAllPlayerUnits:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_DestroyPlayers_Bandits",[PlayerCategories.City]="Quest_DestroyPlayers_City",[PlayerCategories.Cloister]="Quest_DestroyPlayers_Cloister",[PlayerCategories.Harbour]="Quest_DestroyEntities_Building",[PlayerCategories.Village]="Quest_DestroyPlayers_Village"}local br=GetPlayerCategoryType(self.PlayerID)if br then local bn=bm[br]if bn then return bn end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyAllPlayerUnits)function Goal_DestroyScriptEntity(...)return B_Goal_DestroyScriptEntity:new(...)end;B_Goal_DestroyScriptEntity={Name="Goal_DestroyScriptEntity",Description={en="Goal: Destroy an entity",de="Ziel: Zerstöre eine Entität",fr="Objectif : Détruire une entité"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_DestroyScriptEntity:GetGoalTable()return{Objective.DestroyEntities,1,{self.ScriptName}}end;function B_Goal_DestroyScriptEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_DestroyScriptEntity:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ar=GetID(self.ScriptName)if ar and ar~=0 then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end end end end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyScriptEntity)function Goal_DestroyType(...)return B_Goal_DestroyType:new(...)end;B_Goal_DestroyType={Name="Goal_DestroyType",Description={en="Goal: Destroy entity types",de="Ziel: Zerstöre Entitätstypen",fr="Objectif: Détruire les types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_DestroyType:GetGoalTable()return{Objective.DestroyEntities,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_DestroyType:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1;self.DestroyTypeAmount=self.Amount elseif bh==2 then self.PlayerID=bi*1 end end;function B_Goal_DestroyType:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Entities)do if string.find(g,"^[ABU]_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then for f=0,8 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Goal_DestroyType:GetMsgKey()local ar=self.EntityName;if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_DestroyEntities_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableAnimal)==1 then return"Quest_DestroyEntities_Predators"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Destroy_Leader"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Military)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableSettler)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_DestroyEntities_Unit"end;return"Quest_DestroyEntities"end;RegisterBehavior(B_Goal_DestroyType)function Goal_EntityDistance(...)return B_Goal_EntityDistance:new(...)end;B_Goal_EntityDistance={Name="Goal_EntityDistance",Description={en="Goal: Distance between two entities",de="Ziel: Zwei Entities sollen zueinander eine Entfernung über- oder unterschreiten.",fr="Objectif: deux entités doivent se trouver à une distance supérieure ou inférieure l'une de l'autre."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_EntityDistance:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_EntityDistance:AddParameter(bh,bi)if bh==0 then self.Entity1=bi elseif bh==1 then self.Entity2=bi elseif bh==2 then self.bRelSmallerThan=bi=="<"elseif bh==3 then self.Distance=bi*1 end end;function B_Goal_EntityDistance:CustomFunction(bg)if Logic.IsEntityDestroyed(self.Entity1)or Logic.IsEntityDestroyed(self.Entity2)then return false end;local aB=GetID(self.Entity1)local aF=GetID(self.Entity2)local bs=Logic.CheckEntitiesDistance(aB,aF,self.Distance)if self.bRelSmallerThan and bs or not self.bRelSmallerThan and not bs then return true end end;function B_Goal_EntityDistance:GetCustomData(bh)local bk={}if bh==2 then table.insert(bk,">")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_EntityDistance:Debug(bg)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bg.Identifier..": "..self.Name..": At least 1 of the entities for distance check don't exist!")return true end;return false end;RegisterBehavior(B_Goal_EntityDistance)function Goal_KnightDistance(...)return B_Goal_KnightDistance:new(...)end;B_Goal_KnightDistance={Name="Goal_KnightDistance",Description={en="Goal: Bring the knight close to a given entity. If the distance is left at 0 it will automatically set to 2500.",de="Ziel: Bringe den Ritter nah an eine bestimmte Entität. Wird die Entfernung 0 gelassen, ist sie automatisch 2500.",fr="Objectif : Rapproche le chevalier d'une entité donnée. Si la distance est laissée à 0, elle est automatiquement de 2500."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"}}}function B_Goal_KnightDistance:GetGoalTable()return{Objective.Distance,-65566,self.Target,self.Distance,true}end;function B_Goal_KnightDistance:AddParameter(bh,bi)if bh==0 then self.Target=bi elseif bh==1 then if bi==nil or bi==""then bi=0 end;self.Distance=bi*1;if self.Distance==0 then self.Distance=2500 end end end;RegisterBehavior(B_Goal_KnightDistance)function Goal_UnitsOnTerritory(...)return B_Goal_UnitsOnTerritory:new(...)end;B_Goal_UnitsOnTerritory={Name="Goal_UnitsOnTerritory",Description={en="Goal: Place a certain amount of units on a territory",de="Ziel: Platziere eine bestimmte Anzahl Einheiten auf einem Gebiet",fr="Objectif: placer un certain nombre d'unités sur un territoire"},Parameter={{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Category",de="Kategorie",fr="Catégorie"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of units",de="Anzahl Einheiten",fr="Quantité d'unitées"}}}function B_Goal_UnitsOnTerritory:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_UnitsOnTerritory:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if self.TerritoryID==nil then self.TerritoryID=GetTerritoryIDByName(bi)end elseif bh==1 then self.PlayerID=tonumber(bi)*1 elseif bh==2 then self.Category=bi elseif bh==3 then self.bRelSmallerThan=tostring(bi)=="true"or tostring(bi)=="<"elseif bh==4 then self.NumberOfUnits=bi*1 end end;function B_Goal_UnitsOnTerritory:CustomFunction(bg)local bt=self:GetEntities(self.TerritoryID,self.PlayerID,EntityCategories[self.Category])if self.bRelSmallerThan==false and#bt>=self.NumberOfUnits then return true elseif self.bRelSmallerThan==true and#bt<self.NumberOfUnits then return true end end;function B_Goal_UnitsOnTerritory:GetEntities(bu,n,bv)local bt={}local bw={}if n==-1 then for f=0,8 do local bx=0;repeat bw={Logic.GetEntitiesOfCategoryInTerritory(bu,f,n,bx)}bt=Array_Append(bt,bw)bx=bx+#bw until#bw==0 end else local bx=0;repeat bw={Logic.GetEntitiesOfCategoryInTerritory(bu,n,bv,bx)}bt=Array_Append(bt,bw)bx=bx+#bw until#bw==0 end;return bt end;function B_Goal_UnitsOnTerritory:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,-1)for f=1,8 do table.insert(bk,f)end elseif bh==2 then for g,h in pairs(EntityCategories)do if not string.find(g,"^G_")and g~="SheepPasture"then table.insert(bk,g)end end;table.sort(bk)elseif bh==3 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_UnitsOnTerritory:Debug(bg)local by={Logic.GetTerritories()}if tonumber(self.TerritoryID)==nil or self.TerritoryID<0 or not table.contains(by,self.TerritoryID)then debug(false,bg.Identifier..": "..self.Name..": got an invalid territoryID!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true elseif not EntityCategories[self.Category]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity category!")return true elseif tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bg.Identifier..": "..self.Name..": amount is negative or nil!")return true end;return false end;RegisterBehavior(B_Goal_UnitsOnTerritory)function Goal_ActivateBuff(...)return B_Goal_ActivateBuff:new(...)end;B_Goal_ActivateBuff={Name="Goal_ActivateBuff",Description={en="Goal: Activate a buff",de="Ziel: Aktiviere einen Buff",fr="Objectif: Activer un bonus"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Buff",de="Buff",fr="Bonus"}}}function B_Goal_ActivateBuff:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ActivateBuff:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.BuffName=bi;self.Buff=Buffs[bi]end end;function B_Goal_ActivateBuff:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bm=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsVanilla)if g_GameExtraNo>=1 then bm=CopyTable(Lib.Core.Quest.Text.ActivateBuff.BuffsEx1,bm)end;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.ActivateBuff.Pattern),Localize(bm[self.BuffName])),bg)end;local bz=Logic.GetBuff(self.PlayerID,self.Buff)if bz and bz~=0 then return true end end;function B_Goal_ActivateBuff:GetCustomData(bh)local bk={}if bh==1 then bk={"Buff_Spice","Buff_Colour","Buff_Entertainers","Buff_FoodDiversity","Buff_ClothesDiversity","Buff_HygieneDiversity","Buff_EntertainmentDiversity","Buff_Sermon","Buff_Festival","Buff_ExtraPayment","Buff_HighTaxes","Buff_NoPayment","Buff_NoTaxes"}if g_GameExtraNo>=1 then table.insert(bk,"Buff_Gems")table.insert(bk,"Buff_MusicalInstrument")table.insert(bk,"Buff_Olibanum")end;table.sort(bk)else assert(false)end;return bk end;function B_Goal_ActivateBuff:GetIcon()local bm={[Buffs.Buff_Spice]="Goods.G_Salt",[Buffs.Buff_Colour]="Goods.G_Dye",[Buffs.Buff_Entertainers]="Entities.U_Entertainer_NA_FireEater",[Buffs.Buff_FoodDiversity]="Needs.Nutrition",[Buffs.Buff_ClothesDiversity]="Needs.Clothes",[Buffs.Buff_HygieneDiversity]="Needs.Hygiene",[Buffs.Buff_EntertainmentDiversity]="Needs.Entertainment",[Buffs.Buff_Sermon]="Technologies.R_Sermon",[Buffs.Buff_Festival]="Technologies.R_Festival",[Buffs.Buff_ExtraPayment]={1,8},[Buffs.Buff_HighTaxes]={1,6},[Buffs.Buff_NoPayment]={1,8},[Buffs.Buff_NoTaxes]={1,6}}if g_GameExtraNo and g_GameExtraNo>=1 then bm[Buffs.Buff_Gems]="Goods.G_Gems"bm[Buffs.Buff_MusicalInstrument]="Goods.G_MusicalInstrument"bm[Buffs.Buff_Olibanum]="Goods.G_Olibanum"end;return bm[self.Buff]end;function B_Goal_ActivateBuff:Debug(bg)if not self.Buff then debug(false,bg.Identifier..": "..self.Name..": buff '"..self.BuffName.."' does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_ActivateBuff)function Goal_BuildRoad(...)return B_Goal_BuildRoad:new(...)end;B_Goal_BuildRoad={Name="Goal_BuildRoad",Description={en="Goal: Connect two points with a street or a road",de="Ziel: Verbinde zwei Punkte mit einer Strasse oder einem Weg.",fr="Objectif: Relier deux points par une route ou un chemin."},Parameter={{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"},{ParameterType.Custom,en="Only roads",de="Nur Strassen",fr="Que des Routes"}}}function B_Goal_BuildRoad:GetGoalTable()return{Objective.BuildRoad,{GetID(self.Entity1),GetID(self.Entity2),false,0,self.bRoadsOnly}}end;function B_Goal_BuildRoad:AddParameter(bh,bi)if bh==0 then self.Entity1=bi elseif bh==1 then self.Entity2=bi elseif bh==2 then self.bRoadsOnly=ToBoolean(bi)end end;function B_Goal_BuildRoad:GetCustomData(bh)local bk;if bh==2 then bk={"true","false"}end;return bk end;function B_Goal_BuildRoad:Debug(bg)if not IsExisting(self.Entity1)or not IsExisting(self.Entity2)then debug(false,bg.Identifier..": "..self.Name..": first or second entity does not exist!")return true end;return false end;RegisterBehavior(B_Goal_BuildRoad)function Goal_BuildWall(...)return B_Goal_BuildWall:new(...)end;B_Goal_BuildWall={Name="Goal_BuildWall",Description={en="Goal: Build a wall between 2 positions bo stop the movement of an (hostile) player.",de="Ziel: Baue eine Mauer zwischen 2 Punkten, die die Bewegung eines (feindlichen) Spielers zwischen den Punkten verhindert.",fr="Objectif: Construire un mur entre 2 points qui empêche le déplacement d'un joueur (ennemi) entre les points."},Parameter={{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"},{ParameterType.ScriptName,en="Entity 1",de="Entity 1",fr="Entité 1"},{ParameterType.ScriptName,en="Entity 2",de="Entity 2",fr="Entité 2"}}}function B_Goal_BuildWall:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_BuildWall:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.EntityName1=bi elseif bh==2 then self.EntityName2=bi end end;function B_Goal_BuildWall:CustomFunction(bg)local bA=GetID(self.EntityName1)local bB=GetID(self.EntityName2)if not IsExisting(bA)then return false end;if not IsExisting(bB)then return false end;local E,F,G=Logic.EntityGetPos(bA)if Logic.IsBuilding(bA)==1 then E,F=Logic.GetBuildingApproachPosition(bA)end;local bC=Logic.GetPlayerSectorAtPosition(self.PlayerID,E,F)local E,F,G=Logic.EntityGetPos(bB)if Logic.IsBuilding(bB)==1 then E,F=Logic.GetBuildingApproachPosition(bB)end;local bD=Logic.GetPlayerSectorAtPosition(self.PlayerID,E,F)if bC~=bD then return true end;return nil end;function B_Goal_BuildWall:GetMsgKey()return"Quest_Create_Wall"end;function B_Goal_BuildWall:GetIcon()return{3,9}end;function B_Goal_BuildWall:Debug(bg)if not IsExisting(self.EntityName1)or not IsExisting(self.EntityName2)then debug(false,bg.Identifier..": "..self.Name..": first or second entity does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if GetDiplomacyState(bg.ReceivingPlayer,self.PlayerID)>-1 and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": player %d is neighter enemy or unknown to quest receiver!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Goal_BuildWall)function Goal_Claim(...)return B_Goal_Claim:new(...)end;B_Goal_Claim={Name="Goal_Claim",Description={en="Goal: Claim a territory",de="Ziel: Erobere ein Territorium",fr="Objectif: Conquérir un territoire"},Parameter={{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Claim:GetGoalTable()return{Objective.Claim,1,self.TerritoryID}end;function B_Goal_Claim:AddParameter(bh,bi)if bh==0 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end end end;function B_Goal_Claim:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_Claim)function Goal_ClaimXTerritories(...)return B_Goal_ClaimXTerritories:new(...)end;B_Goal_ClaimXTerritories={Name="Goal_ClaimXTerritories",Description={en="Goal: Claim the given number of territories, all player territories are counted",de="Ziel: Erobere die angegebene Anzahl Territorien, alle spielereigenen Territorien werden gezählt",fr="Objectif: conquérir le nombre de territoires indiqué, tous les territoires des joueurs sont comptabilisés."},Parameter={{ParameterType.Number,en="Territories",de="Territorien",fr="Territoire"}}}function B_Goal_ClaimXTerritories:GetGoalTable()return{Objective.Claim,2,self.TerritoriesToClaim}end;function B_Goal_ClaimXTerritories:AddParameter(bh,bi)if bh==0 then self.TerritoriesToClaim=bi*1 end end;function B_Goal_ClaimXTerritories:GetMsgKey()return"Quest_Claim_Territory"end;RegisterBehavior(B_Goal_ClaimXTerritories)function Goal_Create(...)return B_Goal_Create:new(...)end;B_Goal_Create={Name="Goal_Create",Description={en="Goal: Create Buildings/Units on a specified territory",de="Ziel: Erstelle Einheiten/Gebäude auf einem bestimmten Territorium.",fr="Objectif: créer des unités/bâtiments sur un territoire donné."},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.TerritoryNameWithUnknown,en="Territory",de="Territorium",fr="Territoire"}}}function B_Goal_Create:GetGoalTable()return{Objective.Create,assert(Entities[self.EntityName]),self.Amount,self.TerritoryID}end;function B_Goal_Create:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 elseif bh==2 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end end end;function B_Goal_Create:GetMsgKey()return Logic.IsEntityTypeInCategory(Entities[self.EntityName],EntityCategories.AttackableBuilding)==1 and"Quest_Create_Building"or"Quest_Create_Unit"end;RegisterBehavior(B_Goal_Create)function Goal_Produce(...)return B_Goal_Produce:new(...)end;B_Goal_Produce={Name="Goal_Produce",Description={en="Goal: Produce an amount of goods",de="Ziel: Produziere eine Anzahl einer bestimmten Ware.",fr="Objectif: produire un certain nombre d'une marchandise donnée."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Ressourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Ressource",fr="Quantité de ressources"}}}function B_Goal_Produce:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,bj,self.GoodAmount}end;function B_Goal_Produce:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 end end;function B_Goal_Produce:GetMsgKey()return"Quest_Produce"end;RegisterBehavior(B_Goal_Produce)function Goal_GoodAmount(...)return B_Goal_GoodAmount:new(...)end;B_Goal_GoodAmount={Name="Goal_GoodAmount",Description={en="Goal: Obtain an amount of goods - either by trading or producing them",de="Ziel: Beschaffe eine Anzahl Waren - entweder durch Handel oder durch eigene Produktion.",fr="Objectif: Se procurer un certain nombre de marchandises - soit par le commerce, soit par sa propre production."},Parameter={{ParameterType.Custom,en="Type of good",de="Warentyp",fr="TYpe de marchandises"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"}}}function B_Goal_GoodAmount:GetGoalTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Objective.Produce,bj,self.GoodAmount,self.bRelSmallerThan}end;function B_Goal_GoodAmount:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 elseif bh==2 then self.bRelSmallerThan=bi=="<"or tostring(bi)=="true"end end;function B_Goal_GoodAmount:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;RegisterBehavior(B_Goal_GoodAmount)function Goal_SatisfyNeed(...)return B_Goal_SatisfyNeed:new(...)end;B_Goal_SatisfyNeed={Name="Goal_SatisfyNeed",Description={en="Goal: Satisfy a need",de="Ziel: Erfuelle ein Beduerfnis",fr="Objectif: Répondre à un besoin"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"}}}function B_Goal_SatisfyNeed:GetGoalTable()return{Objective.SatisfyNeed,Needs[self.Need],self.PlayerID}end;function B_Goal_SatisfyNeed:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Need=bi end end;function B_Goal_SatisfyNeed:GetMsgKey()local bm={[Needs.Clothes]="Quest_SatisfyNeed_Clothes",[Needs.Entertainment]="Quest_SatisfyNeed_Entertainment",[Needs.Nutrition]="Quest_SatisfyNeed_Food",[Needs.Hygiene]="Quest_SatisfyNeed_Hygiene",[Needs.Medicine]="Quest_SatisfyNeed_Medicine"}local bn=bm[Needs[self.Need]]if bn then return bn end end;RegisterBehavior(B_Goal_SatisfyNeed)function Goal_SettlersNumber(...)return B_Goal_SettlersNumber:new(...)end;B_Goal_SettlersNumber={Name="Goal_SettlersNumber",Description={en="Goal: Get a given amount of settlers",de="Ziel: Erreiche eine bestimmte Anzahl Siedler.",fr="Objectif: atteindre un certain nombre de Settlers."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_SettlersNumber:GetGoalTable()return{Objective.SettlersNumber,self.PlayerID or 1,self.SettlersAmount}end;function B_Goal_SettlersNumber:AddParameter(bh,bi)if bh==0 then self.SettlersAmount=bi*1 elseif bh==1 then self.PlayerID=bi*1 end end;function B_Goal_SettlersNumber:GetMsgKey()return"Quest_NumberSettlers"end;RegisterBehavior(B_Goal_SettlersNumber)function Goal_Spouses(...)return B_Goal_Spouses:new(...)end;B_Goal_Spouses={Name="Goal_Spouses",Description={en="Goal: Get a given amount of spouses",de="Ziel: Erreiche eine bestimmte Ehefrauenanzahl",fr="Objectif: Atteindre un certain nombre d'épouses"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Goal_Spouses:GetGoalTable()return{Objective.Spouses,self.SpousesAmount}end;function B_Goal_Spouses:AddParameter(bh,bi)if bh==0 then self.SpousesAmount=bi*1 end end;function B_Goal_Spouses:GetMsgKey()return"Quest_NumberSpouses"end;RegisterBehavior(B_Goal_Spouses)function Goal_SoldierCount(...)return B_Goal_SoldierCount:new(...)end;B_Goal_SoldierCount={Name="Goal_SoldierCount",Description={en="Goal: Create a specified number of soldiers",de="Ziel: Erreiche eine Anzahl grösser oder kleiner der angegebenen Menge Soldaten.",fr="Objectif: Atteindre un nombre de soldats supérieur ou inférieur à la quantité indiquée."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"}}}function B_Goal_SoldierCount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SoldierCount:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.bRelSmallerThan=tostring(bi)=="true"or tostring(bi)=="<"elseif bh==2 then self.NumberOfUnits=bi*1 end end;function B_Goal_SoldierCount:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bE=tostring(self.bRelSmallerThan)local bp=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.SoldierCount.Pattern),bp,Localize(Lib.Core.Quest.Text.SoldierCount.Relation[bE]),self.NumberOfUnits),bg)end;local bF=Logic.GetCurrentSoldierCount(self.PlayerID)if self.bRelSmallerThan and bF<self.NumberOfUnits then return true elseif not self.bRelSmallerThan and bF>=self.NumberOfUnits then return true end;return nil end;function B_Goal_SoldierCount:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_SoldierCount:GetIcon()return{7,11}end;function B_Goal_SoldierCount:GetMsgKey()return"Quest_Create_Unit"end;function B_Goal_SoldierCount:Debug(bg)if tonumber(self.NumberOfUnits)==nil or self.NumberOfUnits<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be below 0!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Goal_SoldierCount)function Goal_KnightTitle(...)return B_Goal_KnightTitle:new(...)end;B_Goal_KnightTitle={Name="Goal_KnightTitle",Description={en="Goal: Reach a specified knight title",de="Ziel: Erreiche einen vorgegebenen Titel",fr="Objectif: atteindre un titre donné"},Parameter={{ParameterType.Custom,en="Knight title",de="Titel",fr="Titre"}}}function B_Goal_KnightTitle:GetGoalTable()return{Objective.KnightTitle,assert(KnightTitles[self.KnightTitle])}end;function B_Goal_KnightTitle:AddParameter(bh,bi)if bh==0 then self.KnightTitle=bi end end;function B_Goal_KnightTitle:GetMsgKey()return"Quest_KnightTitle"end;function B_Goal_KnightTitle:GetCustomData(bh)return{"Knight","Mayor","Baron","Earl","Marquees","Duke","Archduke"}end;RegisterBehavior(B_Goal_KnightTitle)function Goal_Festivals(...)return B_Goal_Festivals:new(...)end;B_Goal_Festivals={Name="Goal_Festivals",Description={en="Goal: The player has to start the given number of festivals.",de="Ziel: Der Spieler muss eine gewisse Anzahl Feste gestartet haben.",fr="Objectif: Le joueur doit avoir lancé un certain nombre de festivités."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Number,en="Number of festivals",de="Anzahl Feste",fr="Nombre de festivités"}}}function B_Goal_Festivals:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Festivals:AddParameter(bh,bi)if bh==0 then self.PlayerID=tonumber(bi)else assert(bh==1,"Error in "..self.Name..": AddParameter: Index is invalid.")self.NeededFestivals=tonumber(bi)end end;function B_Goal_Festivals:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bp=GetPlayerName(self.PlayerID)or""Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Localize(Lib.Core.Quest.Text.Festivals.Pattern),bp,self.NeededFestivals),bg)end;if Logic.GetStoreHouse(self.PlayerID)==0 then return false end;local bG={Logic.GetPlayerEntities(self.PlayerID,Entities.B_TableBeer,5,0)}local bH=0;for g=2,#bG do local bI=bG[g]if Logic.GetIndexOnOutStockByGoodType(bI,Goods.G_Beer)~=-1 then local bJ=Logic.GetAmountOnOutStockByGoodType(bI,Goods.G_Beer)bH=bH+bJ end end;if not self.FestivalStarted and bH>0 then self.FestivalStarted=true;self.FestivalCounter=self.FestivalCounter and self.FestivalCounter+1 or 1;if self.FestivalCounter>=self.NeededFestivals then self.FestivalCounter=nil;return true end elseif bH==0 then self.FestivalStarted=false end end;function B_Goal_Festivals:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif GetPlayerCategoryType(self.PlayerID)~=PlayerCategories.City then debug(false,bg.Identifier..": "..self.Name..":  Player "..self.PlayerID.." is no city")return true elseif self.NeededFestivals<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Festivals is negative")return true end;return false end;function B_Goal_Festivals:Reset()self.FestivalCounter=nil;self.FestivalStarted=nil end;function B_Goal_Festivals:GetIcon()return{4,15}end;RegisterBehavior(B_Goal_Festivals)function Goal_Capture(...)return B_Goal_Capture:new(...)end;B_Goal_Capture={Name="Goal_Capture",Description={en="Goal: Capture a cart.",de="Ziel: Ein Karren muss erobert werden.",fr="Objectif: un chariot doit être conquis."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Capture:GetGoalTable()return{Objective.Capture,1,{self.ScriptName}}end;function B_Goal_Capture:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_Capture:GetMsgKey()local ar=GetID(self.ScriptName)if Logic.IsEntityAlive(ar)then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end end end;RegisterBehavior(B_Goal_Capture)function Goal_CaptureType(...)return B_Goal_CaptureType:new(...)end;B_Goal_CaptureType={Name="Goal_CaptureType",Description={en="Goal: Capture specified entity types",de="Ziel: Nimm bestimmte Entitätstypen gefangen",fr="Objectif: capturer certains types d'entités"},Parameter={{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Goal_CaptureType:GetGoalTable()return{Objective.Capture,2,Entities[self.EntityName],self.Amount,self.PlayerID}end;function B_Goal_CaptureType:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 elseif bh==2 then self.PlayerID=bi*1 end end;function B_Goal_CaptureType:GetCustomData(bh)local bk={}if bh==0 then for g,h in pairs(Entities)do if string.find(g,"^U_.+Cart")or Logic.IsEntityTypeInCategory(h,EntityCategories.AttackableMerchant)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then for f=0,8 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Goal_CaptureType:GetMsgKey()local ar=self.EntityName;if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Capture_Cart"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SiegeEngine)==1 then return"Quest_Capture_SiegeEngine"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Worker)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Spouse)==1 or Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Capture_VIPOfPlayer"end end;RegisterBehavior(B_Goal_CaptureType)function Goal_Protect(...)return B_Goal_Protect:new(...)end;B_Goal_Protect={Name="Goal_Protect",Description={en="Goal: Protect an entity (entity needs a script name",de="Ziel: Beschütze eine Entität (Entität benötigt einen Skriptnamen)",fr="Objectif : Protéger une entité (l'entité nécessite un nom de script)"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Goal_Protect:GetGoalTable()return{Objective.Protect,{self.ScriptName}}end;function B_Goal_Protect:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Goal_Protect:GetMsgKey()if Logic.IsEntityAlive(self.ScriptName)then local ar=GetID(self.ScriptName)if ar and ar~=0 then ar=Logic.GetEntityType(ar)if ar and ar~=0 then if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.SpecialBuilding)==1 then local bm={[PlayerCategories.City]="Quest_Protect_City",[PlayerCategories.Cloister]="Quest_Protect_Cloister",[PlayerCategories.Village]="Quest_Protect_Village"}local br=GetPlayerCategoryType(Logic.EntityGetPlayer(GetID(self.ScriptName)))if br then local bn=bm[br]if bn then return bn end end;return"Quest_Protect_Building"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.Hero)==1 then return"Quest_Protect_Knight"elseif Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableMerchant)==1 then return"Quest_Protect_Cart"end end end end;return"Quest_Protect"end;RegisterBehavior(B_Goal_Protect)function Goal_Refill(...)return B_Goal_Refill:new(...)end;B_Goal_Refill={Name="Goal_Refill",Description={en="Goal: Refill an object using a geologist",de="Ziel: Eine Mine soll durch einen Geologen wieder aufgefuellt werden.",fr="Objectif: Une mine doit être réalimentée par un géologue."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"}},RequiresExtraNo=1}function B_Goal_Refill:GetGoalTable()return{Objective.Refill,{GetID(self.ScriptName)}}end;function B_Goal_Refill:GetIcon()return{8,1,1}end;function B_Goal_Refill:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;if g_GameExtraNo>0 then RegisterBehavior(B_Goal_Refill)end;function Goal_ResourceAmount(...)return B_Goal_ResourceAmount:new(...)end;B_Goal_ResourceAmount={Name="Goal_ResourceAmount",Description={en="Goal: Reach a specified amount of resources in a doodad",de="Ziel: In einer Mine soll weniger oder mehr als eine angegebene Anzahl an Rohstoffen sein.",fr="Objectif: Dans une mine, il doit y avoir moins ou plus de matières premières qu'un nombre indiqué."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_ResourceAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_ResourceAmount:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.bRelSmallerThan=bi=="<"elseif bh==2 then self.Amount=bi*1 end end;function B_Goal_ResourceAmount:CustomFunction(bg)local ar=GetID(self.ScriptName)if ar and ar~=0 and Logic.GetResourceDoodadGoodType(ar)~=0 then local bK=Logic.GetResourceDoodadGoodAmount(ar)if self.bRelSmallerThan and bK<self.Amount or not self.bRelSmallerThan and bK>=self.Amount then return true end end;return nil end;function B_Goal_ResourceAmount:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,">=")table.insert(bk,"<")else assert(false)end;return bk end;function B_Goal_ResourceAmount:Debug(bg)if not IsExisting(self.ScriptName)then debug(false,bg.Identifier..": "..self.Name..": entity '"..self.ScriptName.."' does not exist!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": error at amount! (nil or below 0)")return true end;return false end;RegisterBehavior(B_Goal_ResourceAmount)function Goal_InstantFailure()return B_Goal_InstantFailure:new()end;B_Goal_InstantFailure={Name="Goal_InstantFailure",Description={en="Goal: Instant failure, the goal returns false.",de="Ziel: Direkter Misserfolg, das Goal sendet false.",fr="Objectif: échec direct, le goal envoie false."}}function B_Goal_InstantFailure:GetGoalTable()return{Objective.DummyFail}end;RegisterBehavior(B_Goal_InstantFailure)function Goal_InstantSuccess()return B_Goal_InstantSuccess:new()end;B_Goal_InstantSuccess={Name="Goal_InstantSuccess",Description={en="Goal: Instant success, the goal returns true.",de="Ziel: Direkter Erfolg, das Goal sendet true.",fr="Objectif: succès direct, le goal envoie false."}}function B_Goal_InstantSuccess:GetGoalTable()return{Objective.Dummy}end;RegisterBehavior(B_Goal_InstantSuccess)function Goal_NoChange()return B_Goal_NoChange:new()end;B_Goal_NoChange={Name="Goal_NoChange",Description={en="Goal: The quest state doesn't change. Use reward functions of other quests to change the state of this quest.",de="Ziel: Der Questzustand wird nicht verändert. Ein Reward einer anderen Quest sollte den Zustand dieser Quest verändern.",fr="Objectif: L'état de la quête n'est pas modifié. Une récompense d'une autre quête doit modifier l'état de cette quête."}}function B_Goal_NoChange:GetGoalTable()return{Objective.NoChange}end;RegisterBehavior(B_Goal_NoChange)function Goal_MapScriptFunction(...)return B_Goal_MapScriptFunction:new(...)end;B_Goal_MapScriptFunction={Name="Goal_MapScriptFunction",Description={en="Goal: Calls a function within the global map script. Return 'true' means success, 'false' means failure and 'nil' doesn't change anything.",de="Ziel: Ruft eine Funktion im globalen Skript auf, die einen Wahrheitswert zurueckgibt. Rueckgabe 'true' gilt als erfuellt, 'false' als gescheitert und 'nil' ändert nichts.",fr="Objectif: Appelle une fonction dans le script global qui renvoie une valeur de vérité. Le retour 'true' est considéré comme rempli, 'false' comme échoué et 'nil' ne change rien."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Goal_MapScriptFunction:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Goal_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bg)end;function B_Goal_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Goal_MapScriptFunction)function Goal_CustomVariables(...)return B_Goal_CustomVariables:new(...)end;B_Goal_CustomVariables={Name="Goal_CustomVariables",Description={en="Goal: A customised variable has to assume a certain value.",de="Ziel: Eine benutzerdefinierte Variable muss einen bestimmten Wert annehmen.",fr="Objectif: une variable définie par l'utilisateur doit prendre une certaine valeur."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Goal_CustomVariables:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Relation=bi elseif bh==2 then local bL=tonumber(bi)self.Value=bL==nil and tostring(bi)or bL end end;function B_Goal_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then if bM==bN then return true end elseif self.Relation=="~="then if bM==bN then return true end elseif self.Relation=="<"then if bM<bN then return true end elseif self.Relation=="<="then if bM<=bN then return true end elseif self.Relation==">="then if bM>=bN then return true end else if bM>bN then return true end end;return nil end;function B_Goal_CustomVariables:GetCustomData(bh)return{"==","~=","<=","<",">",">="}end;function B_Goal_CustomVariables:Debug(bg)local bO={"==","~=","<=","<",">",">="}local bP={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bg.Identifier..": "..self.Name..": variable '"..self.VariableName.."' does not exist!")end;if not table.contains(bO,self.Relation)then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Goal_CustomVariables)function Reprisal_ObjectDeactivate(...)return B_Reprisal_InteractiveObjectDeactivate:new(...)end;B_Reprisal_InteractiveObjectDeactivate={Name="Reprisal_InteractiveObjectDeactivate",Description={en="Reprisal: Deactivates an interactive object",de="Vergeltung: Deaktiviert ein interaktives Objekt",fr="Rétribution: désactive un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"}}}function B_Reprisal_InteractiveObjectDeactivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectDeactivate:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Reprisal_InteractiveObjectDeactivate:CustomFunction(bg)InteractiveObjectDeactivate(self.ScriptName)end;function B_Reprisal_InteractiveObjectDeactivate:Debug(bg)if not Logic.IsInteractiveObject(GetID(self.ScriptName))and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bQ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bQ]and CONST_INITIALIZED_OBJECTS[bQ]==bg.Identifier then debug(false,bg.Identifier..": "..self.Name..": you can not deactivate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectDeactivate)function Reprisal_ObjectActivate(...)return B_Reprisal_InteractiveObjectActivate:new(...)end;B_Reprisal_InteractiveObjectActivate={Name="Reprisal_InteractiveObjectActivate",Description={en="Reprisal: Activates an interactive object",de="Vergeltung: Aktiviert ein interaktives Objekt",fr="Retribution : active un objet interactif"},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Object interactif"},{ParameterType.Custom,en="Availability",de="Nutzbarkeit",fr="Utilisabilité"}}}function B_Reprisal_InteractiveObjectActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_InteractiveObjectActivate:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then local b6=0;if bi=="Always"or 1 then b6=1 end;self.UsingState=b6*1 end end;function B_Reprisal_InteractiveObjectActivate:CustomFunction(bg)InteractiveObjectActivate(self.ScriptName,self.UsingState)end;function B_Reprisal_InteractiveObjectActivate:GetCustomData(bh)if bh==1 then return{"Knight only","Always"}end end;function B_Reprisal_InteractiveObjectActivate:Debug(bg)if not Logic.IsInteractiveObject(GetID(self.ScriptName))and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")self.WarningPrinted=true end;local bQ=GetID(self.ScriptName)if CONST_INITIALIZED_OBJECTS[bQ]and CONST_INITIALIZED_OBJECTS[bQ]==bg.Identifier then debug(false,bg.Identifier..": "..self.Name..": you can not activate in the same quest the object is initalized!")return true end;return false end;RegisterBehavior(B_Reprisal_InteractiveObjectActivate)function Reprisal_DiplomacyDecrease()return B_Reprisal_SlightlyDiplomacyDecrease:new()end;B_Reprisal_SlightlyDiplomacyDecrease={Name="Reprisal_SlightlyDiplomacyDecrease",Description={en="Reprisal: Diplomacy decreases slightly to another player.",de="Vergeltung: Der Diplomatiestatus zum Auftraggeber wird um eine Stufe verringert.",fr="Rétribution: le statut diplomatique avec le mandant est réduit d'un niveau."}}function B_Reprisal_SlightlyDiplomacyDecrease:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SlightlyDiplomacyDecrease:CustomFunction(bg)local bR=bg.SendingPlayer;local bS=bg.ReceivingPlayer;local State=GetDiplomacyState(bS,bR)if State>-2 then SetDiplomacyState(bS,bR,State-1)end end;function B_Reprisal_SlightlyDiplomacyDecrease:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Reprisal_SlightlyDiplomacyDecrease)function Reprisal_Diplomacy(...)return B_Reprisal_Diplomacy:new(...)end;B_Reprisal_Diplomacy={Name="Reprisal_Diplomacy",Description={en="Reprisal: Sets Diplomacy state of two Players to a stated value.",de="Vergeltung: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert.",fr="Rétribution: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."},Parameter={{ParameterType.PlayerID,en="PlayerID 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="PlayerID 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Reprisal_Diplomacy:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Diplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID1=bi*1 elseif bh==1 then self.PlayerID2=bi*1 elseif bh==2 then self.Relation=DiplomacyStates[bi]end end;function B_Reprisal_Diplomacy:CustomFunction(bg)SetDiplomacyState(self.PlayerID1,self.PlayerID2,self.Relation)end;function B_Reprisal_Diplomacy:Debug(bg)if not tonumber(self.PlayerID1)or self.PlayerID1<1 or self.PlayerID1>8 then debug(false,bg.Identifier..": "..self.Name..": PlayerID 1 is invalid!")return true elseif not tonumber(self.PlayerID2)or self.PlayerID2<1 or self.PlayerID2>8 then debug(false,bg.Identifier..": "..self.Name..": PlayerID 2 is invalid!")return true elseif not tonumber(self.Relation)or self.Relation<-2 or self.Relation>2 then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is a invalid diplomacy state!")return true end;return false end;RegisterBehavior(B_Reprisal_Diplomacy)function Reprisal_DestroyEntity(...)return B_Reprisal_DestroyEntity:new(...)end;B_Reprisal_DestroyEntity={Name="Reprisal_DestroyEntity",Description={en="Reprisal: Replaces an entity with an invisible script entity, which retains the entities name.",de="Vergeltung: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt.",fr="Rétribution: remplace une entité par une entité de script invisible qui prend son nom."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"}}}function B_Reprisal_DestroyEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Reprisal_DestroyEntity:CustomFunction(bg)ReplaceEntity(self.ScriptName,Entities.XD_ScriptEntity)end;function B_Reprisal_DestroyEntity:Debug(bg)if not IsExisting(self.ScriptName)and not self.WarningPrinted then warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is already destroyed!")self.WarningPrinted=true end;return false end;RegisterBehavior(B_Reprisal_DestroyEntity)function Reprisal_DestroyEffect(...)return B_Reprisal_DestroyEffect:new(...)end;B_Reprisal_DestroyEffect={Name="Reprisal_DestroyEffect",Description={en="Reprisal: Destroys an effect",de="Vergeltung: Zerstört einen Effekt",fr="Rétribution: détruit un effet"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Reprisal_DestroyEffect:AddParameter(bh,bi)if bh==0 then self.EffectName=bi end end;function B_Reprisal_DestroyEffect:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_DestroyEffect:CustomFunction(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;Logic.DestroyEffect(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Reprisal_DestroyEffect:Debug(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bg.Identifier..": "..self.Name..": Effect "..self.EffectName.." never created")end;return false end;RegisterBehavior(B_Reprisal_DestroyEffect)function Reprisal_Defeat()return B_Reprisal_Defeat:new()end;B_Reprisal_Defeat={Name="Reprisal_Defeat",Description={en="Reprisal: The player loses the game.",de="Vergeltung: Der Spieler verliert das Spiel.",fr="Rétribution: le joueur perd la partie."}}function B_Reprisal_Defeat:GetReprisalTable()return{Reprisal.Defeat}end;RegisterBehavior(B_Reprisal_Defeat)function Reprisal_FakeDefeat()return B_Reprisal_FakeDefeat:new()end;B_Reprisal_FakeDefeat={Name="Reprisal_FakeDefeat",Description={en="Reprisal: Displays a defeat icon for a quest",de="Vergeltung: Zeigt ein Niederlage Icon fuer eine Quest an",fr="Rétribution: affiche une icône de défaite pour une quête"}}function B_Reprisal_FakeDefeat:GetReprisalTable()return{Reprisal.FakeDefeat}end;RegisterBehavior(B_Reprisal_FakeDefeat)function Reprisal_ReplaceEntity(...)return B_Reprisal_ReplaceEntity:new(...)end;B_Reprisal_ReplaceEntity={Name="Reprisal_ReplaceEntity",Description={en="Reprisal: Replaces an entity with a new one of a different type. The playerID can be changed too.",de="Vergeltung: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden.",fr="Rétribution: remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."},Parameter={{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Custom,en="New Type",de="Neuer Typ",fr="Nouveau type"},{ParameterType.Custom,en="New playerID",de="Neue Spieler ID",fr="Nouvelle ID de joueur"}}}function B_Reprisal_ReplaceEntity:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ReplaceEntity:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.NewType=bi elseif bh==2 then self.PlayerID=tonumber(bi)end end;function B_Reprisal_ReplaceEntity:CustomFunction(bg)local bQ=GetID(self.ScriptName)local bT=self.PlayerID;if bT==Logic.EntityGetPlayer(bQ)then bT=nil end;ReplaceEntity(self.ScriptName,Entities[self.NewType],bT)end;function B_Reprisal_ReplaceEntity:GetCustomData(bh)local bk={}if bh==1 then for g,h in pairs(Entities)do local au={"^M_","^XS_","^X_","^XT_","^Z_","^XB_"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==2 then bk={"-","0","1","2","3","4","5","6","7","8"}end;return bk end;function B_Reprisal_ReplaceEntity:Debug(bg)if not Entities[self.NewType]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif self.PlayerID~=nil and(self.PlayerID<1 or self.PlayerID>8)then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;if not IsExisting(self.ScriptName)and not self.WarningPrinted then self.WarningPrinted=true;warn(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' does not exist!")end;return false end;RegisterBehavior(B_Reprisal_ReplaceEntity)function Reprisal_QuestRestart(...)return B_Reprisal_QuestRestart:new(...)end;B_Reprisal_QuestRestart={Name="Reprisal_QuestRestart",Description={en="Reprisal: Restarts a (completed) quest so it can be triggered and completed again",de="Vergeltung: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann",fr="Rétribution : relance une quête (terminée) pour qu'elle puisse être redéclenchée et terminée à nouveau"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestRestart:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestRestart:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestRestart:CustomFunction(bg)RestartQuest(self.QuestName,true)end;function B_Reprisal_QuestRestart:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestRestart)function Reprisal_QuestFailure(...)return B_Reprisal_QuestFailure:new(...)end;B_Reprisal_QuestFailure={Name="Reprisal_QuestFailure",Description={en="Reprisal: Lets another active quest fail",de="Vergeltung: Lässt eine andere aktive Quest fehlschlagen",fr="Rétribution: fait échouer une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestFailure:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestFailure:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestFailure:CustomFunction(bg)FailQuest(self.QuestName,true)end;function B_Reprisal_QuestFailure:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": got an invalid quest!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestFailure)function Reprisal_QuestSuccess(...)return B_Reprisal_QuestSuccess:new(...)end;B_Reprisal_QuestSuccess={Name="Reprisal_QuestSuccess",Description={en="Reprisal: Completes another active quest successfully",de="Vergeltung: Beendet eine andere aktive Quest erfolgreich",fr="Rétribution: Réussir une autre quête active"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestSuccess:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestSuccess:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestSuccess:CustomFunction(bg)WinQuest(self.QuestName,true)end;function B_Reprisal_QuestSuccess:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestSuccess)function Reprisal_QuestActivate(...)return B_Reprisal_QuestActivate:new(...)end;B_Reprisal_QuestActivate={Name="Reprisal_QuestActivate",Description={en="Reprisal: Activates another quest that is not triggered yet.",de="Vergeltung: Aktiviert eine andere Quest die noch nicht ausgelöst wurde.",fr="Rétribution: Active une autre quête qui n'a pas encore été déclenchée."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestActivate:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestActivate:AddParameter(bh,bi)if bh==0 then self.QuestName=bi else assert(false,"Error in "..self.Name..": AddParameter: Index is invalid")end end;function B_Reprisal_QuestActivate:CustomFunction(bg)StartQuest(self.QuestName,true)end;function B_Reprisal_QuestActivate:Debug(bg)if not IsValidQuest(self.QuestName)then debug(false,bg.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reprisal_QuestActivate)function Reprisal_QuestInterrupt(...)return B_Reprisal_QuestInterrupt:new(...)end;B_Reprisal_QuestInterrupt={Name="Reprisal_QuestInterrupt",Description={en="Reprisal: Interrupts another active quest without success or failure",de="Vergeltung: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg",fr="Rétribution : termine une autre quête active sans succès ni échec"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"}}}function B_Reprisal_QuestInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestInterrupt:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Reprisal_QuestInterrupt:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)local ay=Quests[bV]if ay.State==QuestState.Active then StopQuest(self.QuestName,true)end end end;function B_Reprisal_QuestInterrupt:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestInterrupt)function Reprisal_QuestForceInterrupt(...)return B_Reprisal_QuestForceInterrupt:new(...)end;B_Reprisal_QuestForceInterrupt={Name="Reprisal_QuestForceInterrupt",Description={en="Reprisal: Interrupts another quest (even when it isn't active yet) without success or failure",de="Vergeltung: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg",fr="Rétribution: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la Quête"},{ParameterType.Custom,en="Ended quests",de="Beendete Quests",fr="Quêtes terminées"}}}function B_Reprisal_QuestForceInterrupt:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_QuestForceInterrupt:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.InterruptEnded=ToBoolean(bi)end end;function B_Reprisal_QuestForceInterrupt:GetCustomData(bh)local bk={}if bh==1 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reprisal_QuestForceInterrupt:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)local ay=Quests[bV]if self.InterruptEnded or ay.State~=QuestState.Over then ay:Interrupt()end end end;function B_Reprisal_QuestForceInterrupt:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": quest "..self.QuestName.." does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_QuestForceInterrupt)function Reprisal_CustomVariables(...)return B_Reprisal_CustomVariables:new(...)end;B_Reprisal_CustomVariables={Name="Reprisal_CustomVariables",Description={en="Reprisal: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable.",de="Vergeltung: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein.",fr="Rétribution: effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."},Parameter={{ParameterType.Default,en="Name of variable",de="Variablenname",fr="Nom de la variable"},{ParameterType.Custom,en="Operator",de="Operator",fr="Operateur"},{ParameterType.Default,en="Value or variable",de="Wert oder Variable",fr="Valeur ou variable"}}}function B_Reprisal_CustomVariables:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Operator=bi elseif bh==2 then local bL=tonumber(bi)self.Value=bL==nil and tostring(bi)or bL end end;function B_Reprisal_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Operator=="="then bM=bN elseif self.Operator=="+"then bM=bM+bN elseif self.Operator=="-"then bM=bM-bN elseif self.Operator=="*"then bM=bM*bN elseif self.Operator=="/"then bM=bM/bN elseif self.Operator=="^"then bM=bM%bN end;SaveCustomVariable("BehaviorVariable_"..self.VariableName,bM)end;function B_Reprisal_CustomVariables:GetCustomData(bh)return{"=","+","-","*","/","^"}end;function B_Reprisal_CustomVariables:Debug(bg)local bW={"=","+","-","*","/","^"}if not table.contains(bW,self.Operator)then debug(false,bg.Identifier..": "..self.Name..": got an invalid operator!")return true elseif self.VariableName==""then debug(false,bg.Identifier..": "..self.Name..": missing name for variable!")return true end;return false end;RegisterBehavior(B_Reprisal_CustomVariables)function Reprisal_MapScriptFunction(...)return B_Reprisal_MapScriptFunction:new(...)end;B_Reprisal_MapScriptFunction={Name="Reprisal_MapScriptFunction",Description={en="Reprisal: Calls a function within the global map script if the quest has failed.",de="Vergeltung: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt.",fr="Rétribution: lance une fonction dans le script global de la carte en cas d'échec de la quête."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Reprisal_MapScriptFunction:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Reprisal_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then self.FuncName(unpack(self.i47ya_6aghw_frxil))return end;_G[self.FuncName](self,bg)end;function B_Reprisal_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_MapScriptFunction)function Reprisal_Technology(...)return B_Reprisal_Technology:new(...)end;B_Reprisal_Technology={Name="Reprisal_Technology",Description={en="Reprisal: Locks or unlocks a technology for the given player",de="Vergeltung: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player",fr="Rétribution: bloque ou autorise une technologie pour le joueur spécifié"},Parameter={{ParameterType.PlayerID,en="PlayerID",de="SpielerID",fr="PlayerID"},{ParameterType.Custom,en="Un / Lock",de="Sperren/Erlauben",fr="Bloquer/Autoriser"},{ParameterType.Custom,en="Technology",de="Technologie",fr="Technologie"}}}function B_Reprisal_Technology:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Technology:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.LockType=bi=="Lock"elseif bh==2 then self.Technology=bi end end;function B_Reprisal_Technology:CustomFunction(bg)if self.PlayerID and Logic.GetStoreHouse(self.PlayerID)~=0 and Technologies[self.Technology]then if self.LockType then LockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])else UnLockFeaturesForPlayer(self.PlayerID,Technologies[self.Technology])end else return false end end;function B_Reprisal_Technology:GetCustomData(bh)local bk={}if bh==1 then bk[1]="Lock"bk[2]="UnLock"elseif bh==2 then for g,h in pairs(Technologies)do table.insert(bk,g)end end;return bk end;function B_Reprisal_Technology:Debug(bg)if not Technologies[self.Technology]then debug(false,bg.Identifier..": "..self.Name..": got an invalid technology type!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got an invalid playerID!")return true end;return false end;RegisterBehavior(B_Reprisal_Technology)function Reward_ObjectDeactivate(...)return B_Reward_InteractiveObjectDeactivate:new(...)end;B_Reward_InteractiveObjectDeactivate=CopyTable(B_Reprisal_InteractiveObjectDeactivate)B_Reward_InteractiveObjectDeactivate.Name="Reward_InteractiveObjectDeactivate"B_Reward_InteractiveObjectDeactivate.Description.en="Reward: Deactivates an interactive object"B_Reward_InteractiveObjectDeactivate.Description.de="Lohn: Deaktiviert ein interaktives Objekt"B_Reward_InteractiveObjectDeactivate.Description.fr="Récompense: Désactive un objet interactif"B_Reward_InteractiveObjectDeactivate.GetReprisalTable=nil;B_Reward_InteractiveObjectDeactivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectDeactivate)function Reward_ObjectActivate(...)return B_Reward_InteractiveObjectActivate:new(...)end;B_Reward_InteractiveObjectActivate=CopyTable(B_Reprisal_InteractiveObjectActivate)B_Reward_InteractiveObjectActivate.Name="Reward_InteractiveObjectActivate"B_Reward_InteractiveObjectActivate.Description.en="Reward: Activates an interactive object"B_Reward_InteractiveObjectActivate.Description.de="Lohn: Aktiviert ein interaktives Objekt"B_Reward_InteractiveObjectActivate.Description.fr="Récompense: Active un objet interactif"B_Reward_InteractiveObjectActivate.GetReprisalTable=nil;B_Reward_InteractiveObjectActivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_InteractiveObjectActivate)function Reward_ObjectInit(...)return B_Reward_ObjectInit:new(...)end;B_Reward_ObjectInit={Name="Reward_ObjectInit",Description={en="Reward: Setup an interactive object with costs and rewards.",de="Lohn: Initialisiert ein interaktives Objekt mit seinen Kosten und Schätzen.",fr="Récompense: Initialise un objet interactif avec ses coûts et ses trésors."},Parameter={{ParameterType.ScriptName,en="Interactive object",de="Interaktives Objekt",fr="Obejct interactif"},{ParameterType.Number,en="Distance to use",de="Nutzungsentfernung",fr="Distance d'utilisation"},{ParameterType.Number,en="Waittime",de="Wartezeit",fr="Temps d'attente"},{ParameterType.Custom,en="Reward good",de="Belohnungsware",fr="Produits de récompense"},{ParameterType.Number,en="Reward amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Cost good 1",de="Kostenware 1",fr="Marchandise de coût 1"},{ParameterType.Number,en="Cost amount 1",de="Anzahl 1",fr="Quantité 1"},{ParameterType.Custom,en="Cost good 2",de="Kostenware 2",fr="Marchandise de coût 2"},{ParameterType.Number,en="Cost amount 2",de="Anzahl 2",fr="Quantité 2"},{ParameterType.Custom,en="Availability",de="Verfügbarkeit",fr="Disponibilité"}}}function B_Reward_ObjectInit:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_ObjectInit:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.Distance=bi*1 elseif bh==2 then self.Waittime=bi*1 elseif bh==3 then self.RewardType=bi elseif bh==4 then self.RewardAmount=bi*1 elseif bh==5 then self.FirstCostType=bi elseif bh==6 then self.FirstCostAmount=bi*1 elseif bh==7 then self.SecondCostType=bi elseif bh==8 then self.SecondCostAmount=bi*1 elseif bh==9 then local b6=nil;if bi=="Always"or bi==1 then b6=1 elseif bi=="Never"or bi==2 then b6=2 elseif bi=="Knight only"or bi==0 then b6=0 end;self.UsingState=b6 end end;function B_Reward_ObjectInit:CustomFunction(bg)local bQ=GetID(self.ScriptName)if bQ==0 then return end;CONST_INITIALIZED_OBJECTS[bQ]=bg.Identifier;Logic.InteractiveObjectClearCosts(bQ)Logic.InteractiveObjectClearRewards(bQ)Logic.InteractiveObjectSetInteractionDistance(bQ,self.Distance)Logic.InteractiveObjectSetTimeToOpen(bQ,self.Waittime)if self.RewardType and self.RewardType~="-"then Logic.InteractiveObjectAddRewards(bQ,Goods[self.RewardType],self.RewardAmount)end;if self.FirstCostType and self.FirstCostType~="-"then Logic.InteractiveObjectAddCosts(bQ,Goods[self.FirstCostType],self.FirstCostAmount)end;if self.SecondCostType and self.SecondCostType~="-"then Logic.InteractiveObjectAddCosts(bQ,Goods[self.SecondCostType],self.SecondCostAmount)end;Logic.InteractiveObjectSetAvailability(bQ,true)if self.UsingState then for f=1,8 do Logic.InteractiveObjectSetPlayerState(bQ,f,self.UsingState)end end;Logic.InteractiveObjectSetRewardResourceCartType(bQ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetRewardGoldCartType(bQ,Entities.U_GoldCart)Logic.InteractiveObjectSetCostResourceCartType(bQ,Entities.U_ResourceMerchant)Logic.InteractiveObjectSetCostGoldCartType(bQ,Entities.U_GoldCart)RemoveInteractiveObjectFromOpenedList(bQ)table.insert(HiddenTreasures,bQ)end;function B_Reward_ObjectInit:GetCustomData(bh)if bh==3 or bh==5 or bh==7 then local bk={"-","G_Beer","G_Bread","G_Broom","G_Carcass","G_Cheese","G_Clothes","G_Dye","G_Gold","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Salt","G_Sausage","G_SmokedFish","G_Soap","G_Stone","G_Water","G_Wood","G_Wool"}if g_GameExtraNo>=1 then bk[#bk+1]="G_Gems"bk[#bk+1]="G_MusicalInstrument"bk[#bk+1]="G_Olibanum"end;return bk elseif bh==9 then return{"-","Knight only","Always","Never"}end end;function B_Reward_ObjectInit:Debug(bg)if Logic.IsInteractiveObject(GetID(self.ScriptName))==false then debug(false,bg.Identifier..": "..self.Name..": '"..self.ScriptName.."' is not a interactive object!")return true end;if self.UsingState~=1 and self.Distance<50 then warn(false,bg.Identifier..": "..self.Name..": distance is maybe too short!")end;if self.Waittime<0 then debug(false,bg.Identifier..": "..self.Name..": waittime must be equal or greater than 0!")return true end;if self.RewardType and self.RewardType~="-"then if not Goods[self.RewardType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.RewardType.."' is invalid good type!")return true elseif self.RewardAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.FirstCostType and self.FirstCostType~="-"then if not Goods[self.FirstCostType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.FirstCostType.."' is invalid good type!")return true elseif self.FirstCostAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;if self.SecondCostType and self.SecondCostType~="-"then if not Goods[self.SecondCostType]then debug(false,bg.Identifier..": "..self.Name..": '"..self.SecondCostType.."' is invalid good type!")return true elseif self.SecondCostAmount<1 then debug(false,bg.Identifier..": "..self.Name..": amount can not be 0 or negative!")return true end end;return false end;RegisterBehavior(B_Reward_ObjectInit)function Reward_Diplomacy(...)return B_Reward_Diplomacy:new(...)end;B_Reward_Diplomacy=CopyTable(B_Reprisal_Diplomacy)B_Reward_Diplomacy.Name="Reward_Diplomacy"B_Reward_Diplomacy.Description.en="Reward: Sets Diplomacy state of two Players to a stated value."B_Reward_Diplomacy.Description.de="Lohn: Setzt den Diplomatiestatus zweier Spieler auf den angegebenen Wert."B_Reward_Diplomacy.Description.fr="Récompense: Définit le statut diplomatique de deux joueurs sur la valeur indiquée."B_Reward_Diplomacy.GetReprisalTable=nil;B_Reward_Diplomacy.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Diplomacy)function Reward_DiplomacyIncrease()return B_Reward_SlightlyDiplomacyIncrease:new()end;B_Reward_SlightlyDiplomacyIncrease={Name="Reward_SlightlyDiplomacyIncrease",Description={en="Reward: Diplomacy increases slightly to another player",de="Lohn: Verbesserung des Diplomatiestatus zu einem anderen Spieler",fr="Récompense: Amélioration du statut diplomatique avec un autre joueur"}}function B_Reward_SlightlyDiplomacyIncrease:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SlightlyDiplomacyIncrease:CustomFunction(bg)local bR=bg.SendingPlayer;local bS=bg.ReceivingPlayer;local State=GetDiplomacyState(bS,bR)if State<2 then SetDiplomacyState(bS,bR,State+1)end end;function B_Reward_SlightlyDiplomacyIncrease:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Reward_SlightlyDiplomacyIncrease)function Reward_TradePost(...)return B_Reward_TradePost:new(...)end;B_Reward_TradePost={Name="B_Reward_TradePost",Description={en="Sets options for a Tradepost and deactivates it.",de="Stellt einen Handelsposten ein und deaktiviert ihn.",fr=""},Parameter={{ParameterType.ScriptName,en="ScriptName",de="ScriptName"},{ParameterType.PlayerID,en="PlayerID",de="PlayerID"},{ParameterType.Custom,en="Type of good to pay 1",de="Resourcentyp Bezahlung 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 1",de="Resourcentyp Angebot 1",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource"},{ParameterType.Custom,en="Type of good to pay 2",de="Resourcentyp Bezahlung 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 2",de="Resourcentyp Angebot 2",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 3",de="Resourcentyp Bezahlung 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 3",de="Resourcentyp Angebot 3",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to pay 4",de="Resourcentyp Bezahlung 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""},{ParameterType.Custom,en="Type of good to get 4",de="Resourcentyp Angebot 4",fr=""},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr=""}}}function B_Reward_TradePost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_TradePost:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==3 then self.PayType1=bi elseif bh==4 then self.PayAmount1=bi*1 elseif bh==5 then self.OfferType1=bi elseif bh==6 then self.OfferAmount1=bi*1 elseif bh==7 then self.PayType2=bi elseif bh==8 then self.PayAmount2=bi*1 elseif bh==9 then self.OfferType2=bi elseif bh==10 then self.OfferAmount2=bi*1 elseif bh==11 then self.PayType3=bi elseif bh==12 then self.PayAmount3=bi*1 elseif bh==13 then self.OfferType3=bi elseif bh==14 then self.OfferAmount3=bi*1 elseif bh==15 then self.PayType4=bi elseif bh==16 then self.PayAmount4=bi*1 elseif bh==17 then self.OfferType4=bi elseif bh==18 then self.OfferAmount4=bi*1 end end;function B_Reward_TradePost:CustomFunction(bg)local bX=0;for f=1,4 do if self["PayAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]and self["OfferAmount"..f]>0 then bX=f else break end end;debug(IsExisting(self.ScriptName),bg.Identifier..": Error in "..self.Name..": CustomFunction: Tradepost is missing")local bY=GetID(self.ScriptName)if bX>0 then Logic.TradePost_SetTradePartnerGenerateGoodsFlag(bY,true)Logic.TradePost_SetTradePartnerPlayerID(bY,self.PlayerID)for f=1,bX do for b8=1,bX do Logic.TradePost_SetTradeDefinition(bY,b8-1,Goods[self["PayType"..b8]],self["PayAmount"..b8],Goods[self["OfferType"..b8]],self["OfferAmount"..b8])end end;Logic.TradePost_SetActiveTradeSlot(bY,0)Logic.InteractiveObjectSetAvailability(bY,false)for q=1,8 do Logic.InteractiveObjectSetPlayerState(bY,q,2)end end end;function B_Reward_TradePost:DEBUG(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..":  Error in "..self.Name..": Player "..self.PlayerID.." is dead :-(")return true elseif not IsExisting(self.ScriptName)then debug(false,bg.Identifier..":  Error in "..self.Name..": No TradePost found")return true end;for f=1,4 do if self["PayAmount"..f]and self["OfferAmount"..f]and self["PayAmount"..f]>0 and self["OfferAmount"..f]>0 and(not Goods[self["PayType"..f]]or not Goods[self["OfferType"..f]])then debug(false,bg.Identifier..":  Error in "..self.Name..": Offer type or pay type in Slot "..f.." is wrong")return true end end end;function B_Reward_TradePost:GetCustomData(bZ)if bZ>=2 and bZ<=16 and bZ%2==0 then return{"G_Carcass","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Milk","G_RawFish","G_Stone","G_Wood","G_Wool","G_Salt","G_Dye","G_Olibanum","G_Gems","G_MusicalInstrument"}end end;if g_GameExtraNo and g_GameExtraNo>=1 then RegisterBehavior(B_Reward_TradePost)end;function Reward_TradeOffers(...)return B_Reward_Merchant:new(...)end;B_Reward_Merchant={Name="Reward_Merchant",Description={en="Reward: Deletes all existing offers for a merchant and sets new offers, if given",de="Lohn: Löscht alle Angebote eines Händlers und setzt neue, wenn angegeben",fr="Récompense: Supprime toutes les offres d'un commerçant et en place de nouvelles si elles sont indiquées."},Parameter={{ParameterType.Custom,en="PlayerID",de="PlayerID",fr="PlayerID"},{ParameterType.Custom,en="Amount 1",de="Menge 1",fr="Quantité 1"},{ParameterType.Custom,en="Offer 1",de="Angebot 1",fr="Offre 1"},{ParameterType.Custom,en="Amount 2",de="Menge 2",fr="Quantité 2"},{ParameterType.Custom,en="Offer 2",de="Angebot 2",fr="Offre 2"},{ParameterType.Custom,en="Amount 3",de="Menge 3",fr="Quantité 3"},{ParameterType.Custom,en="Offer 3",de="Angebot 3",fr="Offr 3e"},{ParameterType.Custom,en="Amount 4",de="Menge 4",fr="Quantité 4"},{ParameterType.Custom,en="Offer 4",de="Angebot 4",fr="Offre 4"}}}function B_Reward_Merchant:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Merchant:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then bi=bi or 0;self.AmountOffer1=bi*1 elseif bh==2 then self.Offer1=bi elseif bh==3 then bi=bi or 0;self.AmountOffer2=bi*1 elseif bh==4 then self.Offer2=bi elseif bh==5 then bi=bi or 0;self.AmountOffer3=bi*1 elseif bh==6 then self.Offer3=bi elseif bh==7 then bi=bi or 0;self.AmountOffer4=bi*1 elseif bh==8 then self.Offer4=bi end end;function B_Reward_Merchant:CustomFunction()if self.PlayerID>1 and self.PlayerID<9 then local b_=Logic.GetStoreHouse(self.PlayerID)Logic.RemoveAllOffers(b_)for f=1,4 do if self["Offer"..f]and self["Offer"..f]~="-"then if Goods[self["Offer"..f]]then AddOffer(b_,self["AmountOffer"..f],Goods[self["Offer"..f]])elseif Logic.IsEntityTypeInCategory(Entities[self["Offer"..f]],EntityCategories.Military)==1 then AddMercenaryOffer(b_,self["AmountOffer"..f],Entities[self["Offer"..f]])else AddEntertainerOffer(b_,Entities[self["Offer"..f]])end end end end end;function B_Reward_Merchant:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.PlayerID.." is dead. :-(")return true end end;function B_Reward_Merchant:GetCustomData(bh)local c0={1,2,3,4,5,6,7,8}local c1={"1","2","3","4","5","6","7","8","9"}local c2={"-","G_Beer","G_Bow","G_Bread","G_Broom","G_Candle","G_Carcass","G_Cheese","G_Clothes","G_Cow","G_Grain","G_Herb","G_Honeycomb","G_Iron","G_Leather","G_Medicine","G_Milk","G_RawFish","G_Sausage","G_Sheep","G_SmokedFish","G_Soap","G_Stone","G_Sword","G_Wood","G_Wool","G_Salt","G_Dye","U_AmmunitionCart","U_BatteringRamCart","U_CatapultCart","U_SiegeTowerCart","U_MilitaryBandit_Melee_ME","U_MilitaryBandit_Melee_SE","U_MilitaryBandit_Melee_NA","U_MilitaryBandit_Melee_NE","U_MilitaryBandit_Ranged_ME","U_MilitaryBandit_Ranged_NA","U_MilitaryBandit_Ranged_NE","U_MilitaryBandit_Ranged_SE","U_MilitaryBow_RedPrince","U_MilitaryBow","U_MilitarySword_RedPrince","U_MilitarySword","U_Entertainer_NA_FireEater","U_Entertainer_NA_StiltWalker","U_Entertainer_NE_StrongestMan_Barrel","U_Entertainer_NE_StrongestMan_Stone"}if g_GameExtraNo and g_GameExtraNo>=1 then table.insert(c2,"G_Gems")table.insert(c2,"G_Olibanum")table.insert(c2,"G_MusicalInstrument")table.insert(c2,"G_MilitaryBandit_Ranged_AS")table.insert(c2,"G_MilitaryBandit_Melee_AS")table.insert(c2,"U_MilitarySword_Khana")table.insert(c2,"U_MilitaryBow_Khana")end;if bh==0 then return c0 elseif bh==1 or bh==3 or bh==5 or bh==7 then return c1 elseif bh==2 or bh==4 or bh==6 or bh==8 then return c2 end end;RegisterBehavior(B_Reward_Merchant)function Reward_DestroyEntity(...)return B_Reward_DestroyEntity:new(...)end;B_Reward_DestroyEntity=CopyTable(B_Reprisal_DestroyEntity)B_Reward_DestroyEntity.Name="Reward_DestroyEntity"B_Reward_DestroyEntity.Description.en="Reward: Replaces an entity with an invisible script entity, which retains the entities name."B_Reward_DestroyEntity.Description.de="Lohn: Ersetzt eine Entity mit einer unsichtbaren Script-Entity, die den Namen übernimmt."B_Reward_DestroyEntity.Description.fr="Récompense: Remplace une entité par une entité de script invisible qui prend le nom."B_Reward_DestroyEntity.GetReprisalTable=nil;B_Reward_DestroyEntity.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEntity)function Reward_DestroyEffect(...)return B_Reward_DestroyEffect:new(...)end;B_Reward_DestroyEffect=CopyTable(B_Reprisal_DestroyEffect)B_Reward_DestroyEffect.Name="Reward_DestroyEffect"B_Reward_DestroyEffect.Description.en="Reward: Destroys an effect."B_Reward_DestroyEffect.Description.de="Lohn: Zerstört einen Effekt."B_Reward_DestroyEffect.Description.fr="Récompense: Détruit un effet."B_Reward_DestroyEffect.GetReprisalTable=nil;B_Reward_DestroyEffect.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_DestroyEffect)function Reward_CreateBattalion(...)return B_Reward_CreateBattalion:new(...)end;B_Reward_CreateBattalion={Name="Reward_CreateBattalion",Description={en="Reward: Replaces a script entity with a battalion, which retains the entities name",de="Lohn: Ersetzt eine Script-Entity durch ein Bataillon, welches den Namen der Script-Entity übernimmt",fr="Récompense: Remplace une entité de script par un bataillon qui prend le nom de l'entité de script."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de Soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'IA"}}}function B_Reward_CreateBattalion:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateBattalion:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.Orientation=bi*1 elseif bh==4 then self.SoldierCount=bi*1 elseif bh==5 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateBattalion:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,self.SoldierCount)local c4=GetID(self.ScriptNameEntity)if Logic.IsBuilding(c4)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(c3,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end;function B_Reward_CreateBattalion:GetCustomData(bh)local bk={}if bh==2 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateBattalion:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerID is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bg.Identifier..": "..self.Name..": you can not create a empty batallion!")return true end;return false end;RegisterBehavior(B_Reward_CreateBattalion)function Reward_CreateSeveralBattalions(...)return B_Reward_CreateSeveralBattalions:new(...)end;B_Reward_CreateSeveralBattalions={Name="Reward_CreateSeveralBattalions",Description={en="Reward: Creates a given amount of battalions",de="Lohn: Erstellt eine gegebene Anzahl Bataillone",fr="Récompense: Crée un nombre donné de bataillons"},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Quentité de Script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Number,en="Number of soldiers",de="Anzahl Soldaten",fr="Nombre de soldats"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralBattalions:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralBattalions:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then self.ScriptNameEntity=bi elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.UnitKey=bi elseif bh==4 then self.Orientation=bi*1 elseif bh==5 then self.SoldierCount=bi*1 elseif bh==6 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateSeveralBattalions:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local c5=GetID(self.ScriptNameEntity)local E,F,G=Logic.EntityGetPos(c5)if Logic.IsBuilding(c5)==1 then E,F=Logic.GetBuildingApproachPosition(c5)end;for f=1,self.Amount do local c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],E,F,self.Orientation,self.PlayerID,self.SoldierCount)Logic.SetEntityName(c3,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end end;function B_Reward_CreateSeveralBattalions:GetCustomData(bh)local bk={}if bh==3 then for g,h in pairs(Entities)do if Logic.IsEntityTypeInCategory(h,EntityCategories.Soldier)==1 then table.insert(bk,g)end end;table.sort(bk)elseif bh==6 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateSeveralBattalions:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerDI is wrong!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.SoldierCount)==nil or self.SoldierCount<1 then debug(false,bg.Identifier..": "..self.Name..": you can not create a empty batallion!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralBattalions)function Reward_CreateEffect(...)return B_Reward_CreateEffect:new(...)end;B_Reward_CreateEffect={Name="Reward_CreateEffect",Description={en="Reward: Creates an effect at a specified position",de="Lohn: Erstellt einen Effekt an der angegebenen Position",fr="Récompense: Crée un effet à la position indiquée"},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.ScriptName,en="Location",de="Ort",fr="Lieu"},{ParameterType.Number,en="Orientation (in degrees)(-1: from locating entity)",de="Ausrichtung (in Grad)(-1: von Positionseinheit)",fr="Orientation (en degrés)(-1 : de l'unité de position)"}}}function B_Reward_CreateEffect:AddParameter(bh,bi)if bh==0 then self.EffectName=bi elseif bh==1 then self.Type=EGL_Effects[bi]elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.Location=bi elseif bh==4 then self.Orientation=bi*1 end end;function B_Reward_CreateEffect:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEffect:CustomFunction(bg)if Logic.IsEntityDestroyed(self.Location)then return end;local c6=assert(GetID(self.Location),bg.Identifier.."Error in "..self.Name..": CustomFunction: Entity is invalid")if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then return end;local c7,c8=Logic.GetEntityPosition(c6)local aR=tonumber(self.Orientation)local c9=Logic.CreateEffectWithOrientation(self.Type,c7,c8,aR,self.PlayerID)if self.EffectName~=""then CONST_EFFECT_NAME_TO_ID[self.EffectName]=c9 end end;function B_Reward_CreateEffect:Debug(bg)if CONST_EFFECT_NAME_TO_ID[self.EffectName]and Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])then debug(false,bg.Identifier..": "..self.Name..": effect already exists!")return true elseif not IsExisting(self.Location)then debug(false,bg.Identifier..": "..self.Name..": location '"..self.Location.."' is missing!")return true elseif self.PlayerID and(self.PlayerID<0 or self.PlayerID>8)then debug(false,bg.Identifier..": "..self.Name..": invalid playerID!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": invalid orientation!")return true end end;function B_Reward_CreateEffect:GetCustomData(bh)assert(bh==1,"Error in "..self.Name..": GetCustomData: Index is invalid.")local ca={}for g,h in pairs(EGL_Effects)do table.insert(ca,g)end;table.sort(ca)return ca end;RegisterBehavior(B_Reward_CreateEffect)function Reward_CreateEntity(...)return B_Reward_CreateEntity:new(...)end;B_Reward_CreateEntity={Name="Reward_CreateEntity",Description={en="Reward: Replaces an entity by a new one of a given type",de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs",fr="Récompense: Remplace une entité par une nouvelle entité de type donné"},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateEntity:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateEntity:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.Orientation=bi*1 elseif bh==4 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateEntity:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3;if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,1)local cb,cc=Logic.GetSoldiersAttachedToLeader(c3)Logic.SetOrientation(cc,math.floor(self.Orientation+0.5))else c3=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID)end;local c4=GetID(self.ScriptNameEntity)if Logic.IsBuilding(c4)==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(c3,self.ScriptNameEntity)end;if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end;function B_Reward_CreateEntity:GetCustomData(bh)local bk={}if bh==2 then for g,h in pairs(Entities)do local au={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==4 or bh==5 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateEntity:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<0 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": playerID is not valid!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true end;return false end;RegisterBehavior(B_Reward_CreateEntity)B_Reward_CreateSettler=CopyTable(B_Reward_CreateEntity)B_Reward_CreateSettler.Name="Reward_CreateSettler"B_Reward_CreateSettler.Description.en="Reward: Replaces an entity by a new one of a given type"B_Reward_CreateSettler.Description.de="Lohn: Ersetzt eine Entity durch eine neue gegebenen Typs"B_Reward_CreateSettler.Description.fr="Récompense: Remplace une entité par une nouvelle entité de type donné"RegisterBehavior(B_Reward_CreateSettler)function Reward_CreateSeveralEntities(...)return B_Reward_CreateSeveralEntities:new(...)end;B_Reward_CreateSeveralEntities={Name="Reward_CreateSeveralEntities",Description={en="Reward: Creating serveral battalions at the position of a entity. They retains the entities name and a _[index] suffix",de="Lohn: Erzeugt mehrere Entities an der Position der Entity. Sie übernimmt den Namen der Script Entity und den Suffix _[index]",fr="Récompense: Crée plusieurs Entities à la position de l'Entity. Elle reprend le nom de l'entité script et le suffixe _[index]."},Parameter={{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de script"},{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Designation de type"},{ParameterType.Number,en="Orientation (in degrees)",de="Ausrichtung (in Grad)",fr="Orientation (en degrés)"},{ParameterType.Custom,en="Hide from AI",de="Vor KI verstecken",fr="Cacher de l'AI"}}}function B_Reward_CreateSeveralEntities:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_CreateSeveralEntities:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then self.ScriptNameEntity=bi elseif bh==2 then self.PlayerID=bi*1 elseif bh==3 then self.UnitKey=bi elseif bh==4 then self.Orientation=bi*1 elseif bh==5 then self.HideFromAI=ToBoolean(bi)end end;function B_Reward_CreateSeveralEntities:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local aP=GetPosition(self.ScriptNameEntity)local c3;for f=1,self.Amount do if Logic.IsEntityTypeInCategory(self.UnitKey,EntityCategories.Soldier)==1 then c3=Logic.CreateBattalionOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID,1)local cb,cc=Logic.GetSoldiersAttachedToLeader(c3)Logic.SetOrientation(cc,math.floor(self.Orientation+0.5))else c3=Logic.CreateEntityOnUnblockedLand(Entities[self.UnitKey],aP.X,aP.Y,self.Orientation,self.PlayerID)end;Logic.SetEntityName(c3,self.ScriptNameEntity.."_"..f)if self.HideFromAI then AICore.HideEntityFromAI(self.PlayerID,c3,true)end end end;function B_Reward_CreateSeveralEntities:GetCustomData(bh)local bk={}if bh==3 then for g,h in pairs(Entities)do local au={"^M_*","^XS_*","^X_*","^XT_*","^Z_*"}local bU=false;for f=1,#au do if g:find(au[f])then bU=true;break end end;if not bU then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 or bh==6 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_CreateSeveralEntities:Debug(bg)if not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": got an invalid entity type!")return true elseif not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.PlayerID)==nil or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif tonumber(self.Orientation)==nil then debug(false,bg.Identifier..": "..self.Name..": orientation must be a number!")return true elseif tonumber(self.Amount)==nil or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_CreateSeveralEntities)function Reward_MoveSettler(...)return B_Reward_MoveSettler:new(...)end;B_Reward_MoveSettler={Name="Reward_MoveSettler",Description={en="Reward: Moves a (NPC) settler to a destination. Must not be AI controlled, or it won't move",de="Lohn: Bewegt einen (NPC) Siedler zu einem Zielort. Darf keinem KI Spieler gehören, ansonsten wird sich der Siedler nicht bewegen",fr="Récompense: Déplace un settler (NPC) vers une destination. Ne doit pas appartenir à un joueur IA, sinon le settler ne se déplacera pas."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"}}}function B_Reward_MoveSettler:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveSettler:AddParameter(bh,bi)if bh==0 then self.ScriptNameUnit=bi elseif bh==1 then self.ScriptNameDest=bi end end;function B_Reward_MoveSettler:CustomFunction(bg)if Logic.IsEntityDestroyed(self.ScriptNameUnit)or Logic.IsEntityDestroyed(self.ScriptNameDest)then return false end;local cd=GetID(self.ScriptNameDest)local ce,cf=Logic.GetEntityPosition(cd)if Logic.IsBuilding(cd)==1 then ce,cf=Logic.GetBuildingApproachPosition(cd)end;Logic.MoveSettler(GetID(self.ScriptNameUnit),ce,cf)end;function B_Reward_MoveSettler:Debug(bg)if not IsExisting(self.ScriptNameUnit)then debug(false,bg.Identifier..": "..self.Name..": mover entity does not exist!")return true elseif not IsExisting(self.ScriptNameDest)then debug(false,bg.Identifier..": "..self.Name..": destination does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveSettler)function Reward_Victory()return B_Reward_Victory:new()end;B_Reward_Victory={Name="Reward_Victory",Description={en="Reward: The player wins the game.",de="Lohn: Der Spieler gewinnt das Spiel.",fr="Récompense: Le Joueur gagne la partie."}}function B_Reward_Victory:GetRewardTable()return{Reward.Victory}end;RegisterBehavior(B_Reward_Victory)function Reward_Defeat()return B_Reward_Defeat:new()end;B_Reward_Defeat={Name="Reward_Defeat",Description={en="Reward: The player loses the game.",de="Lohn: Der Spieler verliert das Spiel.",fr="Récompense: le Joueur perd la partie."}}function B_Reward_Defeat:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_Defeat:CustomFunction(bg)bg:TerminateEventsAndStuff()Logic.ExecuteInLuaLocalState("GUI_Window.MissionEndScreenSetVictoryReasonText("..g_VictoryAndDefeatType.DefeatMissionFailed..")")Defeated(bg.ReceivingPlayer)end;RegisterBehavior(B_Reward_Defeat)function Reward_FakeVictory()return B_Reward_FakeVictory:new()end;B_Reward_FakeVictory={Name="Reward_FakeVictory",Description={en="Reward: Display a victory icon for a quest",de="Lohn: Zeigt ein Siegesicon fuer diese Quest",fr="Récompense: Affiche une icône de victoire pour cette quête"}}function B_Reward_FakeVictory:GetRewardTable()return{Reward.FakeVictory}end;RegisterBehavior(B_Reward_FakeVictory)function Reward_AI_SpawnAndAttackTerritory(...)return B_Reward_AI_SpawnAndAttackTerritory:new(...)end;B_Reward_AI_SpawnAndAttackTerritory={Name="Reward_AI_SpawnAndAttackTerritory",Description={en="Reward: Spawns AI troops and attacks a territory (Hint: Use for hidden quests as a surprise)",de="Lohn: Erstellt KI Truppen und greift ein Territorium an (Tipp: Fuer eine versteckte Quest als Ueberraschung verwenden)",fr="Récompense: Créez des troupes d'IA et attaquez un territoire (astuce : utilisez une surprise pour une quête cachée)."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.TerritoryName,en="Territory",de="Territorium",fr="Territoire"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Number,en="Catapults",de="Katapulte",fr="Catapultes"},{ParameterType.Number,en="Siege towers",de="Belagerungstuerme",fr="Tours de siège"},{ParameterType.Number,en="Rams",de="Rammen",fr="Bélier"},{ParameterType.Number,en="Ammo carts",de="Munitionswagen",fr="Chariot à munitions"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndAttackTerritory:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackTerritory:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TerritoryID=tonumber(bi)if not self.TerritoryID then self.TerritoryID=GetTerritoryIDByName(bi)end elseif bh==3 then self.NumSword=bi*1 elseif bh==4 then self.NumBow=bi*1 elseif bh==5 then self.NumCatapults=bi*1 elseif bh==6 then self.NumSiegeTowers=bi*1 elseif bh==7 then self.NumRams=bi*1 elseif bh==8 then self.NumAmmoCarts=bi*1 elseif bh==9 then if bi=="Normal"or bi==false then self.TroopType=false elseif bi=="RedPrince"or bi==true then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==10 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndAttackTerritory:GetCustomData(bh)local bk={}if bh==9 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==10 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndAttackTerritory:CustomFunction(bg)local cg=Logic.GetTerritoryAcquiringBuildingID(self.TerritoryID)if cg~=0 then AIScript_SpawnAndAttackCity(self.AIPlayerID,cg,self.Spawnpoint,self.NumSword,self.NumBow,self.NumCatapults,self.NumSiegeTowers,self.NumRams,self.NumAmmoCarts,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackTerritory:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif self.TerritoryID==0 then debug(false,bg.Identifier..": "..self.Name..": Territory unknown")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true elseif self.NumCatapults<0 then debug(false,bg.Identifier..": "..self.Name..": Catapults is negative")return true elseif self.NumSiegeTowers<0 then debug(false,bg.Identifier..": "..self.Name..": SiegeTowers is negative")return true elseif self.NumRams<0 then debug(false,bg.Identifier..": "..self.Name..": Rams is negative")return true elseif self.NumAmmoCarts<0 then debug(false,bg.Identifier..": "..self.Name..": AmmoCarts is negative")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackTerritory)function Reward_AI_SpawnAndAttackArea(...)return B_Reward_AI_SpawnAndAttackArea:new(...)end;B_Reward_AI_SpawnAndAttackArea={Name="Reward_AI_SpawnAndAttackArea",Description={en="Reward: Spawns AI troops and attacks everything within the specified area, except the players main buildings",de="Lohn: Erstellt KI Truppen und greift ein angegebenes Gebiet an, aber nicht die Hauptgebauede eines Spielers",fr="Récompense: Crée des troupes IA et attaque une zone spécifiée, mais pas les bâtiments principaux d'un joueur."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldats"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser des troupes existantes"}}}function B_Reward_AI_SpawnAndAttackArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndAttackArea:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TargetName=bi elseif bh==3 then self.Radius=bi*1 elseif bh==4 then self.NumSword=bi*1 elseif bh==5 then self.NumBow=bi*1 elseif bh==6 then if bi=="Normal"or bi==false then self.TroopType=false elseif bi=="RedPrince"or bi==true then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==7 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndAttackArea:GetCustomData(bh)local bk={}if bh==6 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==7 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndAttackArea:CustomFunction(bg)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local cg=GetID(self.TargetName)AIScript_SpawnAndRaidSettlement(self.AIPlayerID,cg,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.TroopType,self.ReuseTroops)end end;function B_Reward_AI_SpawnAndAttackArea:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bg.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndAttackArea)function Reward_AI_SpawnAndProtectArea(...)return B_Reward_AI_SpawnAndProtectArea:new(...)end;B_Reward_AI_SpawnAndProtectArea={Name="Reward_AI_SpawnAndProtectArea",Description={en="Reward: Spawns AI troops and defends a specified area",de="Lohn: Erstellt KI Truppen und verteidigt ein angegebenes Gebiet",fr="Récompense: Crée des troupes d'IA et défend un territoire donné"},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.ScriptName,en="Spawn point",de="Erstellungsort",fr="Lieu de création"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Radius",de="Radius",fr="Rayon"},{ParameterType.Number,en="Time (-1 for infinite)",de="Zeit (-1 fuer unendlich)",fr="Temps (-1 pour infini)"},{ParameterType.Number,en="Sword",de="Schwert",fr="Épéiste"},{ParameterType.Number,en="Bow",de="Bogen",fr="Archer"},{ParameterType.Custom,en="Capture tradecarts",de="Handelskarren angreifen",fr="Attaquer les chariots de commerce"},{ParameterType.Custom,en="Soldier type",de="Soldatentyp",fr="Type de soldat"},{ParameterType.Custom,en="Reuse troops",de="Verwende bestehende Truppen",fr="Utiliser les troupes existantes"}}}function B_Reward_AI_SpawnAndProtectArea:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SpawnAndProtectArea:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then self.Spawnpoint=bi elseif bh==2 then self.TargetName=bi elseif bh==3 then self.Radius=bi*1 elseif bh==4 then self.Time=bi*1 elseif bh==5 then self.NumSword=bi*1 elseif bh==6 then self.NumBow=bi*1 elseif bh==7 then self.CaptureTradeCarts=ToBoolean(bi)elseif bh==8 then if bi=="Normal"or bi==true then self.TroopType=false elseif bi=="RedPrince"or bi==false then self.TroopType=true elseif bi=="Bandit"or bi==2 then self.TroopType=2 elseif bi=="Cultist"or bi==3 then self.TroopType=3 else assert(false)end elseif bh==9 then self.ReuseTroops=ToBoolean(bi)end end;function B_Reward_AI_SpawnAndProtectArea:GetCustomData(bh)local bk={}if bh==7 then table.insert(bk,"false")table.insert(bk,"true")elseif bh==8 then table.insert(bk,"Normal")table.insert(bk,"RedPrince")table.insert(bk,"Bandit")if g_GameExtraNo>=1 then table.insert(bk,"Cultist")end elseif bh==9 then table.insert(bk,"false")table.insert(bk,"true")else assert(false)end;return bk end;function B_Reward_AI_SpawnAndProtectArea:CustomFunction(bg)if Logic.IsEntityAlive(self.TargetName)and Logic.IsEntityAlive(self.Spawnpoint)then local cg=GetID(self.TargetName)AIScript_SpawnAndProtectArea(self.AIPlayerID,cg,self.Spawnpoint,self.Radius,self.NumSword,self.NumBow,self.Time,self.TroopType,self.ReuseTroops,self.CaptureTradeCarts)end end;function B_Reward_AI_SpawnAndProtectArea:Debug(bg)if self.AIPlayerID<2 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong")return true elseif Logic.IsEntityDestroyed(self.Spawnpoint)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.SpawnPoint.." is missing")return true elseif Logic.IsEntityDestroyed(self.TargetName)then debug(false,bg.Identifier..": "..self.Name..": Entity "..self.TargetName.." is missing")return true elseif self.Radius<1 then debug(false,bg.Identifier..": "..self.Name..": Radius is to small or negative")return true elseif self.Time<-1 then debug(false,bg.Identifier..": "..self.Name..": Time is smaller than -1")return true elseif self.NumSword<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Swords is negative")return true elseif self.NumBow<0 then debug(false,bg.Identifier..": "..self.Name..": Number of Bows is negative")return true elseif self.NumBow+self.NumSword<1 then debug(false,bg.Identifier..": "..self.Name..": No Soldiers?")return true end;return false end;RegisterBehavior(B_Reward_AI_SpawnAndProtectArea)function Reward_AI_SetNumericalFact(...)return B_Reward_AI_SetNumericalFact:new(...)end;B_Reward_AI_SetNumericalFact={Name="Reward_AI_SetNumericalFact",Description={en="Reward: Sets a numerical fact for the AI player",de="Lohn: Setzt eine Verhaltensregel fuer den KI-Spieler. ",fr="Récompense: Définit une règle de comportement pour le joueur IA."},Parameter={{ParameterType.PlayerID,en="AI Player",de="KI Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Numerical Fact",de="Verhaltensregel",fr="Règle de conduite"},{ParameterType.Number,en="Value",de="Wert",fr="Valeur"}}}function B_Reward_AI_SetNumericalFact:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetNumericalFact:AddParameter(bh,bi)if bh==0 then self.AIPlayerID=bi*1 elseif bh==1 then local ch={["Courage"]="FEAR",["Reconstruction"]="BARB",["Build Order"]="BPMX",["Conquer Outposts"]="FCOP",["Mount Outposts"]="FMOP",["max. Bowmen"]="FMBM",["max. Swordmen"]="FMSM",["max. Rams"]="FMRA",["max. Catapults"]="FMCA",["max. Ammunition Carts"]="FMAC",["max. Siege Towers"]="FMST",["max. Wall Catapults"]="FMBA",["FEAR"]="FEAR",["BARB"]="BARB",["BPMX"]="BPMX",["FCOP"]="FCOP",["FMOP"]="FMOP",["FMBM"]="FMBM",["FMSM"]="FMSM",["FMRA"]="FMRA",["FMCA"]="FMCA",["FMAC"]="FMAC",["FMST"]="FMST",["FMBA"]="FMBA"}self.NumericalFact=ch[bi]elseif bh==2 then self.Value=bi*1 end end;function B_Reward_AI_SetNumericalFact:CustomFunction(bg)if self.NumericalFact~=nil then AICore.SetNumericalFact(self.AIPlayerID,self.NumericalFact,self.Value)end end;function B_Reward_AI_SetNumericalFact:GetCustomData(bh)if bh==1 then return{"Courage","Reconstruction","Build Order","Conquer Outposts","Mount Outposts","max. Bowmen","max. Swordmen","max. Rams","max. Catapults","max. Ammunition Carts","max. Siege Towers","max. Wall Catapults"}end end;function B_Reward_AI_SetNumericalFact:Debug(bg)if Logic.GetStoreHouse(self.AIPlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayerID.." is wrong or dead!")return true elseif not self.NumericalFact then debug(false,bg.Identifier..": "..self.Name..": invalid numerical fact choosen!")return true else if self.NumericalFact=="BARB"or self.NumericalFact=="FCOP"or self.NumericalFact=="FMOP"then if self.Value~=0 and self.Value~=1 then debug(false,bg.Identifier..": "..self.Name..": BARB, FCOP, FMOP: value must be 1 or 0!")return true end elseif self.NumericalFact=="FEAR"then if self.Value<=0 then debug(false,bg.Identifier..": "..self.Name..": FEAR: value must greater than 0!")return true end else if self.Value<0 then debug(false,bg.Identifier..": "..self.Name..": value must always greater than or equal 0!")return true end end end;return false end;RegisterBehavior(B_Reward_AI_SetNumericalFact)function Reward_AI_Aggressiveness(...)return B_Reward_AI_Aggressiveness:new(...)end;B_Reward_AI_Aggressiveness={Name="Reward_AI_Aggressiveness",Description={en="Reward: Sets the AI player's aggressiveness.",de="Lohn: Setzt die Aggressivität des KI-Spielers fest.",fr="Récompense: Définit l'agressivité du joueur IA."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.Custom,en="Aggressiveness (1-3)",de="Aggressivität (1-3)",fr="Agressivité (1-3)"}}}function B_Reward_AI_Aggressiveness:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_Aggressiveness:AddParameter(bh,bi)if bh==0 then self.AIPlayer=bi*1 elseif bh==1 then self.Aggressiveness=tonumber(bi)end end;function B_Reward_AI_Aggressiveness:CustomFunction()local aQ=PlayerAIs[self.AIPlayer]or AIPlayerTable[self.AIPlayer]or AIPlayer:new(self.AIPlayer,AIPlayerProfile_City)assert(aQ~=nil)PlayerAIs[self.AIPlayer]=aQ;if self.Aggressiveness>=2 then aQ.ProfileLoop=AIProfile_Skirmish;aQ.Skirmish=aQ.Skirmish or{}aQ.Skirmish.Claim_MinTime=SkirmishDefault.Claim_MinTime+(self.Aggressiveness-2)*390;aQ.Skirmish.Claim_MaxTime=aQ.Skirmish.Claim_MinTime*2 else aQ.ProfileLoop=AIPlayerProfile_City end end;function B_Reward_AI_Aggressiveness:Debug(bg)if self.AIPlayer<1 or Logic.GetStoreHouse(self.AIPlayer)==0 then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end end;function B_Reward_AI_Aggressiveness:GetCustomData(bh)return{"1","2","3"}end;RegisterBehavior(B_Reward_AI_Aggressiveness)function Reward_AI_SetEnemy(...)return B_Reward_AI_SetEnemy:new(...)end;B_Reward_AI_SetEnemy={Name="Reward_AI_SetEnemy",Description={en="Reward:Sets the enemy of an AI player (the AI only handles one enemy properly).",de="Lohn: Legt den Feind eines KI-Spielers fest (die KI behandelt nur einen Feind korrekt).",fr="Récompense: Définit l'ennemi d'un joueur IA (l'IA ne traite correctement qu'un seul ennemi)."},Parameter={{ParameterType.PlayerID,en="AI player",de="KI-Spieler",fr="Joueur AI"},{ParameterType.PlayerID,en="Enemy",de="Feind",fr="Ennemi"}}}function B_Reward_AI_SetEnemy:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEnemy:AddParameter(bh,bi)if bh==0 then self.AIPlayer=bi*1 elseif bh==1 then self.Enemy=bi*1 end end;function B_Reward_AI_SetEnemy:CustomFunction()local aQ=PlayerAIs[self.AIPlayer]if aQ and aQ.Skirmish then aQ.Skirmish.Enemy=self.Enemy end end;function B_Reward_AI_SetEnemy:Debug(bg)if self.AIPlayer<1 or self.AIPlayer>8 or Logic.PlayerGetIsHumanFlag(self.AIPlayer)then debug(false,bg.Identifier..": "..self.Name..": Player "..self.AIPlayer.." is wrong")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEnemy)function Reward_ReplaceEntity(...)return B_Reward_ReplaceEntity:new(...)end;B_Reward_ReplaceEntity=CopyTable(B_Reprisal_ReplaceEntity)B_Reward_ReplaceEntity.Name="Reward_ReplaceEntity"B_Reward_ReplaceEntity.Description.en="Reward: Replaces an entity with a new one of a different type. The playerID can be changed too."B_Reward_ReplaceEntity.Description.de="Lohn: Ersetzt eine Entity durch eine neue anderen Typs. Es kann auch die Spielerzugehörigkeit geändert werden."B_Reward_ReplaceEntity.Description.fr="Récompense: Remplace une entité par une nouvelle entité d'un autre type. Il est également possible de changer l'appartenance d'un joueur."B_Reward_ReplaceEntity.GetReprisalTable=nil;B_Reward_ReplaceEntity.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ReplaceEntity)function Reward_SetResourceAmount(...)return B_Reward_SetResourceAmount:new(...)end;B_Reward_SetResourceAmount={Name="Reward_SetResourceAmount",Description={en="Reward: Set the current and maximum amount of a resource doodad (the amount can also set to 0)",de="Lohn: Setzt die aktuellen sowie maximalen Resourcen in einem Doodad (auch 0 ist möglich)",fr="Récompense: Définit les ressources actuelles ainsi que les ressources maximales dans un Doodad (0 est également possible)"},Parameter={{ParameterType.ScriptName,en="Ressource",de="Resource",fr="Ressources"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Reward_SetResourceAmount:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SetResourceAmount:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi elseif bh==1 then self.Amount=bi*1 end end;function B_Reward_SetResourceAmount:CustomFunction(bg)if Logic.IsEntityDestroyed(self.ScriptName)then return false end;local w=GetID(self.ScriptName)if Logic.GetResourceDoodadGoodType(w)==0 then return false end;Logic.SetResourceDoodadGoodAmount(w,self.Amount)end;function B_Reward_SetResourceAmount:Debug(bg)if not IsExisting(self.ScriptName)then debug(false,bg.Identifier..": "..self.Name..": resource entity does not exist!")return true elseif not type(self.Amount)=="number"or self.Amount<0 then debug(false,bg.Identifier..": "..self.Name..": resource amount can not be negative!")return true end;return false end;RegisterBehavior(B_Reward_SetResourceAmount)function Reward_Resources(...)return B_Reward_Resources:new(...)end;B_Reward_Resources={Name="Reward_Resources",Description={en="Reward: The player receives a given amount of Goods in his store.",de="Lohn: Legt der Partei die angegebenen Rohstoffe ins Lagerhaus.",fr="Récompense: Placez les matières premières indiquées dans l'entrepôt de la faction."},Parameter={{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Nombre de ressources"}}}function B_Reward_Resources:AddParameter(bh,bi)if bh==0 then self.GoodTypeName=bi elseif bh==1 then self.GoodAmount=bi*1 end end;function B_Reward_Resources:GetRewardTable()local bj=Logic.GetGoodTypeID(self.GoodTypeName)return{Reward.Resources,bj,self.GoodAmount}end;RegisterBehavior(B_Reward_Resources)function Reward_SendCart(...)return B_Reward_SendCart:new(...)end;B_Reward_SendCart={Name="Reward_SendCart",Description={en="Reward: Sends a cart to a player. It spawns at a building or by replacing an entity. The cart can replace the entity if it's not a building.",de="Lohn: Sendet einen Karren zu einem Spieler. Der Karren wird an einem Gebäude oder einer Entity erstellt. Er ersetzt die Entity, wenn diese kein Gebäude ist.",fr="Récompense: Envoie un chariot à un joueur. Le chariot est créé sur un bâtiment ou une entité. Elle remplace l'entité si celle-ci n'est pas un bâtiment."},Parameter={{ParameterType.ScriptName,en="Script entity",de="Script Entity",fr="Entité de Script"},{ParameterType.PlayerID,en="Owning player",de="Besitzer",fr="Propriétaire"},{ParameterType.Custom,en="Type name",de="Typbezeichnung",fr="Désignation du type"},{ParameterType.Custom,en="Good type",de="Warentyp",fr="Type de marchandise"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"},{ParameterType.Custom,en="Override target player",de="Anderer Zielspieler",fr="Autre joueur destinataire"},{ParameterType.Custom,en="Ignore reservations",de="Ignoriere Reservierungen",fr="Ignorer les réservations"},{ParameterType.Custom,en="Replace entity",de="Entity ersetzen",fr="Remplacer une entité"}}}function B_Reward_SendCart:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_SendCart:AddParameter(bh,bi)if bh==0 then self.ScriptNameEntity=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then self.UnitKey=bi elseif bh==3 then self.GoodType=bi elseif bh==4 then self.GoodAmount=bi*1 elseif bh==5 then self.OverrideTargetPlayer=tonumber(bi)elseif bh==6 then self.IgnoreReservation=ToBoolean(bi)elseif bh==7 then self.ReplaceEntity=ToBoolean(bi)end end;function B_Reward_SendCart:CustomFunction(bg)if not IsExisting(self.ScriptNameEntity)then return false end;local ar=SendCart(self.ScriptNameEntity,self.PlayerID,Goods[self.GoodType],self.GoodAmount,Entities[self.UnitKey],self.IgnoreReservation)if self.ReplaceEntity and Logic.IsBuilding(GetID(self.ScriptNameEntity))==0 then DestroyEntity(self.ScriptNameEntity)Logic.SetEntityName(ar,self.ScriptNameEntity)end;if self.OverrideTargetPlayer then Logic.ResourceMerchant_OverrideTargetPlayerID(ar,self.OverrideTargetPlayer)end end;function B_Reward_SendCart:GetCustomData(bh)local bk={}if bh==2 then bk={"U_ResourceMerchant","U_Medicus","U_Marketer","U_ThiefCart","U_GoldCart","U_Noblemen_Cart","U_RegaliaCart"}elseif bh==3 then for g,h in pairs(Goods)do if string.find(g,"^G_")then table.insert(bk,g)end end;table.sort(bk)elseif bh==5 then table.insert(bk,"-")for f=1,8 do table.insert(bk,f)end elseif bh==6 then table.insert(bk,"false")table.insert(bk,"true")elseif bh==7 then table.insert(bk,"false")table.insert(bk,"true")end;return bk end;function B_Reward_SendCart:Debug(bg)if not IsExisting(self.ScriptNameEntity)then debug(false,bg.Identifier..": "..self.Name..": spawnpoint does not exist!")return true elseif not tonumber(self.PlayerID)or self.PlayerID<1 or self.PlayerID>8 then debug(false,bg.Identifier..": "..self.Name..": got a invalid playerID!")return true elseif not Entities[self.UnitKey]then debug(false,bg.Identifier..": "..self.Name..": entity type '"..self.UnitKey.."' is invalid!")return true elseif not Goods[self.GoodType]then debug(false,bg.Identifier..": "..self.Name..": good type '"..self.GoodType.."' is invalid!")return true elseif not tonumber(self.GoodAmount)or self.GoodAmount<1 then debug(false,bg.Identifier..": "..self.Name..": good amount can not be below 1!")return true elseif tonumber(self.OverrideTargetPlayer)and(self.OverrideTargetPlayer<1 or self.OverrideTargetPlayer>8)then debug(false,bg.Identifier..": "..self.Name..": overwrite target player with invalid playerID!")return true end;return false end;RegisterBehavior(B_Reward_SendCart)function Reward_Units(...)return B_Reward_Units:new(...)end;B_Reward_Units={Name="Reward_Units",Description={en="Reward: Creates units for the quest receiver.",de="Lohn: Erzeugt einige Einheiten für den Auftragnehmer.",fr="Récompense: Unités"},Parameter={{ParameterType.Entity,en="Type name",de="Typbezeichnung",fr="Désignation de type"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}}}function B_Reward_Units:AddParameter(bh,bi)if bh==0 then self.EntityName=bi elseif bh==1 then self.Amount=bi*1 end end;function B_Reward_Units:GetRewardTable()return{Reward.Units,assert(Entities[self.EntityName]),self.Amount}end;RegisterBehavior(B_Reward_Units)function Reward_QuestRestart(...)return B_Reward_QuestRestart:new(...)end;B_Reward_QuestRestart=CopyTable(B_Reprisal_QuestRestart)B_Reward_QuestRestart.Name="Reward_QuestRestart"B_Reward_QuestRestart.Description.en="Reward: Restarts a (completed) quest so it can be triggered and completed again."B_Reward_QuestRestart.Description.de="Lohn: Startet eine (beendete) Quest neu, damit diese neu ausgelöst und beendet werden kann."B_Reward_QuestRestart.Description.fr="Récompense: Redémarre une quête (terminée) pour qu'elle puisse être redéclenchée et terminée."B_Reward_QuestRestart.GetReprisalTable=nil;B_Reward_QuestRestart.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestRestart)function Reward_QuestFailure(...)return B_Reward_QuestFailure:new(...)end;B_Reward_QuestFailure=CopyTable(B_Reprisal_QuestFailure)B_Reward_QuestFailure.Name="Reward_QuestFailure"B_Reward_QuestFailure.Description.en="Reward: Lets another active quest fail."B_Reward_QuestFailure.Description.de="Lohn: Lässt eine andere aktive Quest fehlschlagen."B_Reward_QuestFailure.Description.fr="Récompense: Fait échouer une autre quête active."B_Reward_QuestFailure.GetReprisalTable=nil;B_Reward_QuestFailure.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestFailure)function Reward_QuestSuccess(...)return B_Reward_QuestSuccess:new(...)end;B_Reward_QuestSuccess=CopyTable(B_Reprisal_QuestSuccess)B_Reward_QuestSuccess.Name="Reward_QuestSuccess"B_Reward_QuestSuccess.Description.en="Reward: Completes another active quest successfully."B_Reward_QuestSuccess.Description.de="Lohn: Beendet eine andere aktive Quest erfolgreich."B_Reward_QuestSuccess.Description.fr="Récompense: Termine avec succès une autre quête active."B_Reward_QuestSuccess.GetReprisalTable=nil;B_Reward_QuestSuccess.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestSuccess)function Reward_QuestActivate(...)return B_Reward_QuestActivate:new(...)end;B_Reward_QuestActivate=CopyTable(B_Reprisal_QuestActivate)B_Reward_QuestActivate.Name="Reward_QuestActivate"B_Reward_QuestActivate.Description.en="Reward: Activates another quest that is not triggered yet."B_Reward_QuestActivate.Description.de="Lohn: Aktiviert eine andere Quest die noch nicht ausgelöst wurde."B_Reward_QuestActivate.Description.fr="Récompense: Active une autre quête qui n'a pas encore été déclenchée."B_Reward_QuestActivate.GetReprisalTable=nil;B_Reward_QuestActivate.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestActivate)function Reward_QuestInterrupt(...)return B_Reward_QuestInterrupt:new(...)end;B_Reward_QuestInterrupt=CopyTable(B_Reprisal_QuestInterrupt)B_Reward_QuestInterrupt.Name="Reward_QuestInterrupt"B_Reward_QuestInterrupt.Description.en="Reward: Interrupts another active quest without success or failure."B_Reward_QuestInterrupt.Description.de="Lohn: Beendet eine andere aktive Quest ohne Erfolg oder Misserfolg."B_Reward_QuestInterrupt.Description.fr="Récompense: Termine une autre quête active sans succès ni échec."B_Reward_QuestInterrupt.GetReprisalTable=nil;B_Reward_QuestInterrupt.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestInterrupt)function Reward_QuestForceInterrupt(...)return B_Reward_QuestForceInterrupt:new(...)end;B_Reward_QuestForceInterrupt=CopyTable(B_Reprisal_QuestForceInterrupt)B_Reward_QuestForceInterrupt.Name="Reward_QuestForceInterrupt"B_Reward_QuestForceInterrupt.Description.en="Reward: Interrupts another quest (even when it isn't active yet) without success or failure."B_Reward_QuestForceInterrupt.Description.de="Lohn: Beendet eine andere Quest, auch wenn diese noch nicht aktiv ist ohne Erfolg oder Misserfolg."B_Reward_QuestForceInterrupt.Description.fr="Récompense: Termine une autre quête, même si elle n'est pas encore active, sans succès ni échec."B_Reward_QuestForceInterrupt.GetReprisalTable=nil;B_Reward_QuestForceInterrupt.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_QuestForceInterrupt)function Reward_CustomVariables(...)return B_Reward_CustomVariables:new(...)end;B_Reward_CustomVariables=CopyTable(B_Reprisal_CustomVariables)B_Reward_CustomVariables.Name="Reward_CustomVariables"B_Reward_CustomVariables.Description.en="Reward: Executes a mathematical operation with this variable. The other operand can be a number or another custom variable."B_Reward_CustomVariables.Description.de="Lohn: Führt eine mathematische Operation mit der Variable aus. Der andere Operand kann eine Zahl oder eine Custom-Varible sein."B_Reward_CustomVariables.Description.fr="Récompense: Effectue une opération mathématique sur la variable. L'autre opérateur peut être un nombre ou une variable personnalisée."B_Reward_CustomVariables.GetReprisalTable=nil;B_Reward_CustomVariables.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_CustomVariables)function Reward_MapScriptFunction(...)return B_Reward_MapScriptFunction:new(...)end;B_Reward_MapScriptFunction=CopyTable(B_Reprisal_MapScriptFunction)B_Reward_MapScriptFunction.Name="Reward_MapScriptFunction"B_Reward_MapScriptFunction.Description.en="Reward: Calls a function within the global map script if the quest has failed."B_Reward_MapScriptFunction.Description.de="Lohn: Ruft eine Funktion im globalen Kartenskript auf, wenn die Quest fehlschlägt."B_Reward_MapScriptFunction.Description.fr="Récompense: Invoque une fonction dans le script global de la carte en cas d'échec de la quête."B_Reward_MapScriptFunction.GetReprisalTable=nil;B_Reward_MapScriptFunction.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_MapScriptFunction)function Reward_Technology(...)return B_Reward_Technology:new(...)end;B_Reward_Technology=CopyTable(B_Reprisal_Technology)B_Reward_Technology.Name="Reward_Technology"B_Reward_Technology.Description.en="Reward: Locks or unlocks a technology for the given player."B_Reward_Technology.Description.de="Lohn: Sperrt oder erlaubt eine Technolgie fuer den angegebenen Player."B_Reward_Technology.Description.fr="Récompense: Bloque ou autorise une technologie pour le joueur spécifié."B_Reward_Technology.GetReprisalTable=nil;B_Reward_Technology.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Technology)function Reward_PrestigePoints(...)return B_Reward_PrestigePoints:mew(...)end;B_Reward_PrestigePoints={Name="Reward_PrestigePoints",Description={en="Reward: Gives the quest receiver prestige.",de="Lohn: Gibt dem Auftragnehmer Prestige.",fr="Récompense: Prestige"},Parameter={{ParameterType.Number,en="Points",de="Punkte",fr="Points"}}}function B_Reward_PrestigePoints:AddParameter(bh,bi)if bh==0 then self.Points=bi end end;function B_Reward_PrestigePoints:GetRewardTable()return{Reward.PrestigePoints,self.Points}end;RegisterBehavior(B_Reward_PrestigePoints)function Reward_AI_MountOutpost(...)return B_Reward_AI_MountOutpost:new(...)end;B_Reward_AI_MountOutpost={Name="Reward_AI_MountOutpost",Description={en="Reward: Places a troop of soldiers on a named outpost.",de="Lohn: Platziert einen Trupp Soldaten auf einem Aussenposten der KI.",fr="Récompense: Place un groupe de soldats sur un avant-poste de l'IA."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Soldiers type",de="Soldatentyp",fr="Type de soldat"}}}function B_Reward_AI_MountOutpost:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_MountOutpost:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi else self.SoldiersType=bi end end;function B_Reward_AI_MountOutpost:CustomFunction(bg)local ci=assert(not Logic.IsEntityDestroyed(self.Scriptname)and GetID(self.Scriptname),bg.Identifier..": Error in "..self.Name..": CustomFunction: Outpost is invalid")local cj=Logic.EntityGetPlayer(ci)local ck,cl=Logic.GetBuildingApproachPosition(ci)local cm=Logic.CreateBattalionOnUnblockedLand(Entities[self.SoldiersType],ck,cl,0,cj,0)AICore.HideEntityFromAI(cj,cm,true)Logic.CommandEntityToMountBuilding(cm,ci)end;function B_Reward_AI_MountOutpost:GetCustomData(bh)if bh==1 then local bk={}for g,h in pairs(Entities)do if string.find(g,"U_MilitaryBandit")or string.find(g,"U_MilitarySword")or string.find(g,"U_MilitaryBow")then bk[#bk+1]=g end end;return bk end end;function B_Reward_AI_MountOutpost:Debug(bg)if Logic.IsEntityDestroyed(self.Scriptname)then debug(false,bg.Identifier..": "..self.Name..": Outpost "..self.Scriptname.." is missing")return true end end;RegisterBehavior(B_Reward_AI_MountOutpost)function Reward_QuestRestartForceActive(...)return B_Reward_QuestRestartForceActive:new(...)end;B_Reward_QuestRestartForceActive={Name="Reward_QuestRestartForceActive",Description={en="Reward: Restarts a (completed) quest and triggers it immediately.",de="Lohn: Startet eine (beendete) Quest neu und triggert sie sofort.",fr="Récompense: Redémarre une quête (terminée) et la déclenche immédiatement."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Reward_QuestRestartForceActive:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_QuestRestartForceActive:AddParameter(bh,bi)self.QuestName=bi end;function B_Reward_QuestRestartForceActive:CustomFunction(bg)local bV,ay=self:ResetQuest(bg)if bV then ay:SetMsgKeyOverride()ay:SetIconOverride()ay:Trigger()end end;B_Reward_QuestRestartForceActive.ResetQuest=B_Reward_QuestRestart.CustomFunction;function B_Reward_QuestRestartForceActive:Debug(bg)if not Quests[GetQuestID(self.QuestName)]then debug(false,bg.Identifier..": "..self.Name..": Quest: "..self.QuestName.." does not exist")return true end;return false end;RegisterBehavior(B_Reward_QuestRestartForceActive)function Reward_UpgradeBuilding(...)return B_Reward_UpgradeBuilding:new(...)end;B_Reward_UpgradeBuilding={Name="Reward_UpgradeBuilding",Description={en="Reward: Upgrades a building",de="Lohn: Baut ein Gebäude aus",fr="Récompense: Améliore un Bâtiment"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"}}}function B_Reward_UpgradeBuilding:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_UpgradeBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi end end;function B_Reward_UpgradeBuilding:CustomFunction(bg)local cn=GetID(self.Building)if cn~=0 and Logic.IsBuilding(cn)==1 and Logic.IsBuildingUpgradable(cn,true)and Logic.IsBuildingUpgradable(cn,false)then Logic.UpgradeBuilding(cn)end end;function B_Reward_UpgradeBuilding:Debug(bg)local cn=GetID(self.Building)if not(cn~=0 and Logic.IsBuilding(cn)==1 and Logic.IsBuildingUpgradable(cn,true)and Logic.IsBuildingUpgradable(cn,false))then debug(false,bg.Identifier..": "..self.Name..": Building is wrong")return true end end;RegisterBehavior(B_Reward_UpgradeBuilding)function Reward_SetBuildingUpgradeLevel(...)return B_Reward_SetBuildingUpgradeLevel:new(...)end;B_Reward_SetBuildingUpgradeLevel={Name="Reward_SetBuildingUpgradeLevel",Description={en="Reward: Sets the upgrade level of the specified building.",de="Lohn: Legt das Upgrade-Level eines Gebaeudes fest.",fr="Récompense: Définit le niveau d'amélioration d'un bâtiment."},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Upgrade level",de="Upgrade-Level",fr="Niveau d'amélioration"}}}function B_Reward_SetBuildingUpgradeLevel:GetRewardTable()return{Reward.Custom,self,self.CustomFunction}end;function B_Reward_SetBuildingUpgradeLevel:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then self.UpgradeLevel=tonumber(bi)end end;function B_Reward_SetBuildingUpgradeLevel:CustomFunction()local cn=Logic.GetEntityIDByName(self.Building)local co=Logic.GetUpgradeLevel(cn)local cp=Logic.GetMaxUpgradeLevel(cn)if cn~=0 and Logic.IsBuilding(cn)==1 and(Logic.IsBuildingUpgradable(cn,true)or cp~=0 and cp==co)then Logic.SetUpgradableBuildingState(cn,math.min(self.UpgradeLevel,cp),0)end end;function B_Reward_SetBuildingUpgradeLevel:Debug(bg)local cn=Logic.GetEntityIDByName(self.Building)if not cn or Logic.IsBuilding(cn)==0 then debug(false,bg.Identifier..": "..self.Name..": Building "..self.Building.." is missing or no building.")return true elseif not self.UpgradeLevel or self.UpgradeLevel<0 then debug(false,bg.Identifier..": "..self.Name..": Upgrade level is wrong")return true end end;function B_Reward_SetBuildingUpgradeLevel:GetCustomData(bh)if bh==1 then return{"0","1","2","3"}end end;RegisterBehavior(B_Reward_SetBuildingUpgradeLevel)function Trigger_PlayerDiscovered(...)return B_Trigger_PlayerDiscovered:new(...)end;B_Trigger_PlayerDiscovered={Name="Trigger_PlayerDiscovered",Description={en="Trigger: if a given player has been discovered",de="Auslöser: wenn ein angegebener Spieler entdeckt wurde",fr="Déclencheur: lorsqu'un joueur spécifié est découvert"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"}}}function B_Trigger_PlayerDiscovered:GetTriggerTable()return{Triggers.PlayerDiscovered,self.PlayerID}end;function B_Trigger_PlayerDiscovered:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 end end;RegisterBehavior(B_Trigger_PlayerDiscovered)function Trigger_OnDiplomacy(...)return B_Trigger_OnDiplomacy:new(...)end;B_Trigger_OnDiplomacy={Name="Trigger_OnDiplomacy",Description={en="Trigger: if diplomatic relations have been established with a player",de="Auslöser: wenn ein angegebener Diplomatie-Status mit einem Spieler erreicht wurde.",fr="Déclencheur: lorsqu'un statut diplomatique spécifié a été atteint avec un joueur."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.DiplomacyState,en="Relation",de="Beziehung",fr="Relation diplomatique"}}}function B_Trigger_OnDiplomacy:GetTriggerTable()return{Triggers.Diplomacy,self.PlayerID,assert(DiplomacyStates[self.DiplState])}end;function B_Trigger_OnDiplomacy:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.DiplState=bi end end;RegisterBehavior(B_Trigger_OnDiplomacy)function Trigger_OnNeedUnsatisfied(...)return B_Trigger_OnNeedUnsatisfied:new(...)end;B_Trigger_OnNeedUnsatisfied={Name="Trigger_OnNeedUnsatisfied",Description={en="Trigger: if a specified need is unsatisfied",de="Auslöser: wenn ein bestimmtes Beduerfnis nicht befriedigt ist.",fr="Déclencheur: lorsqu'un certain besoin n'est pas satisfait."},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.Need,en="Need",de="Beduerfnis",fr="Besoin"},{ParameterType.Number,en="Workers on strike",de="Streikende Arbeiter",fr="Travailleurs en grève"}}}function B_Trigger_OnNeedUnsatisfied:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnNeedUnsatisfied:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.Need=bi elseif bh==2 then self.WorkersOnStrike=bi*1 end end;function B_Trigger_OnNeedUnsatisfied:CustomFunction(bg)return Logic.GetNumberOfStrikingWorkersPerNeed(self.PlayerID,Needs[self.Need])>=self.WorkersOnStrike end;function B_Trigger_OnNeedUnsatisfied:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Needs[self.Need]then debug(false,bg.Identifier..": "..self.Name..": "..self.Need.." does not exist.")return true elseif self.WorkersOnStrike<0 then debug(false,bg.Identifier..": "..self.Name..": WorkersOnStrike value negative")return true end;return false end;RegisterBehavior(B_Trigger_OnNeedUnsatisfied)function Trigger_OnResourceDepleted(...)return B_Trigger_OnResourceDepleted:new(...)end;B_Trigger_OnResourceDepleted={Name="Trigger_OnResourceDepleted",Description={en="Trigger: if a resource is (temporarily) depleted",de="Auslöser: wenn eine Ressource (zeitweilig) verbraucht ist",fr="Déclencheur: lorsqu'une ressource est (temporairement) consommée"},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de script"}}}function B_Trigger_OnResourceDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnResourceDepleted:AddParameter(bh,bi)if bh==0 then self.ScriptName=bi end end;function B_Trigger_OnResourceDepleted:CustomFunction(bg)local ar=GetID(self.ScriptName)return not ar or ar==0 or Logic.GetResourceDoodadGoodType(ar)==0 or Logic.GetResourceDoodadGoodAmount(ar)==0 end;RegisterBehavior(B_Trigger_OnResourceDepleted)function Trigger_OnAmountOfGoods(...)return B_Trigger_OnAmountOfGoods:new(...)end;B_Trigger_OnAmountOfGoods={Name="Trigger_OnAmountOfGoods",Description={en="Trigger: if the player has gathered a given amount of resources in his storehouse",de="Auslöser: wenn der Spieler eine bestimmte Menge einer Ressource in seinem Lagerhaus hat",fr="Déclencheur: lorsque le joueur a une certaine quantité d'une ressource dans son entrepôt"},Parameter={{ParameterType.PlayerID,en="Player",de="Spieler",fr="Joueur"},{ParameterType.RawGoods,en="Type of good",de="Resourcentyp",fr="Type de ressources"},{ParameterType.Number,en="Amount of good",de="Anzahl der Resource",fr="Quantité de ressources"}}}function B_Trigger_OnAmountOfGoods:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAmountOfGoods:AddParameter(bh,bi)if bh==0 then self.PlayerID=bi*1 elseif bh==1 then self.GoodTypeName=bi elseif bh==2 then self.GoodAmount=bi*1 end end;function B_Trigger_OnAmountOfGoods:CustomFunction(bg)local cq=Logic.GetStoreHouse(self.PlayerID)if cq==0 then return false end;local bj=Logic.GetGoodTypeID(self.GoodTypeName)local cr=Logic.GetAmountOnOutStockByGoodType(cq,bj)if cr>=self.GoodAmount then return true end;return false end;function B_Trigger_OnAmountOfGoods:Debug(bg)if Logic.GetStoreHouse(self.PlayerID)==0 then debug(false,bg.Identifier..": "..self.Name..": "..self.PlayerID.." does not exist.")return true elseif not Goods[self.GoodTypeName]then debug(false,bg.Identifier..": "..self.Name..": Good type is wrong.")return true elseif self.GoodAmount<0 then debug(false,bg.Identifier..": "..self.Name..": Good amount is negative.")return true end;return false end;RegisterBehavior(B_Trigger_OnAmountOfGoods)function Trigger_OnQuestActive(...)return B_Trigger_OnQuestActiveWait:new(...)end;Trigger_OnQuestActiveWait=Trigger_OnQuestActive;B_Trigger_OnQuestActiveWait={Name="Trigger_OnQuestActiveWait",Description={en="Trigger: if a given quest has been activated. Waiting time optional",de="Auslöser: wenn eine angegebene Quest aktiviert wurde. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a été activée. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestActiveWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestActiveWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestActiveWait:CustomFunction(bg)local bV=GetQuestID(self.QuestName)if bV~=nil then assert(type(bV)=="number")if Quests[bV].State==QuestState.Active then self.WasActivated=self.WasActivated or true end;if self.WasActivated then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestActiveWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestActiveWait:Interrupt(bg)end;function B_Trigger_OnQuestActiveWait:Reset(bg)self.WaitTimeTimer=nil;self.WasActivated=nil end;RegisterBehavior(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive=CopyTable(B_Trigger_OnQuestActiveWait)B_Trigger_OnQuestActive.Name="Trigger_OnQuestActive"B_Trigger_OnQuestActive.Description.en="Trigger: Starts the quest after another has been activated."B_Trigger_OnQuestActive.Description.de="Auslöser: Startet den Quest, wenn ein anderer aktiviert wird."B_Trigger_OnQuestActive.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est activée."B_Trigger_OnQuestActive.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestActive:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestActive)function Trigger_OnQuestFailure(...)return B_Trigger_OnQuestFailureWait:new(...)end;Trigger_OnQuestFailureWait=Trigger_OnQuestFailure;B_Trigger_OnQuestFailureWait={Name="Trigger_OnQuestFailureWait",Description={en="Trigger: if a given quest has failed. Waiting time optional",de="Auslöser: wenn eine angegebene Quest fehlgeschlagen ist. Optional mit Wartezeit",fr="Déclencheur: lorsqu'une quête indiquée a échoué. En option avec délai d'attente"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestFailureWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestFailureWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestFailureWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].Result==QuestResult.Failure then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestFailureWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestFailureWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestFailureWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure=CopyTable(B_Trigger_OnQuestFailureWait)B_Trigger_OnQuestFailure.Name="Trigger_OnQuestFailure"B_Trigger_OnQuestFailure.Description.en="Trigger: Starts the quest after another has failed."B_Trigger_OnQuestFailure.Description.de="Auslöser: Startet den Quest, wenn ein anderer fehlschlägt."B_Trigger_OnQuestFailure.Description.fr="Déclencheur: Lance la quête lorsqu'une autre échoue."B_Trigger_OnQuestFailure.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestFailure:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestFailure)function Trigger_OnQuestNotTriggered(...)return B_Trigger_OnQuestNotTriggered:new(...)end;B_Trigger_OnQuestNotTriggered={Name="Trigger_OnQuestNotTriggered",Description={en="Trigger: if a given quest is not yet active. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest noch inaktiv ist. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée est encore inactive. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}}function B_Trigger_OnQuestNotTriggered:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestNotTriggered:AddParameter(bh,bi)if bh==0 then self.QuestName=bi end end;function B_Trigger_OnQuestNotTriggered:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.NotTriggered then return true end end;return false end;function B_Trigger_OnQuestNotTriggered:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true end;return false end;RegisterBehavior(B_Trigger_OnQuestNotTriggered)function Trigger_OnQuestInterrupted(...)return B_Trigger_OnQuestInterruptedWait:new(...)end;Trigger_OnQuestInterruptedWait=Trigger_OnQuestInterrupted;B_Trigger_OnQuestInterruptedWait={Name="Trigger_OnQuestInterruptedWait",Description={en="Trigger: if a given quest has been interrupted. Should be used in combination with other triggers.",de="Auslöser: wenn eine angegebene Quest abgebrochen wurde. Sollte mit weiteren Triggern kombiniert werden.",fr="Déclencheur: lorsqu'une quête indiquée a été interrompue. Doit être combiné avec d'autres déclencheurs."},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestInterruptedWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestInterruptedWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestInterruptedWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.Over and Quests[bV].Result==QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestInterruptedWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestInterruptedWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestInterruptedWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted=CopyTable(B_Trigger_OnQuestInterruptedWait)B_Trigger_OnQuestInterrupted.Name="Trigger_OnQuestInterrupted"B_Trigger_OnQuestInterrupted.Description.en="Trigger: Starts the quest after another is interrupted."B_Trigger_OnQuestInterrupted.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgebrochen wurde."B_Trigger_OnQuestInterrupted.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre a été annulée."B_Trigger_OnQuestInterrupted.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestInterrupted:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestInterrupted)function Trigger_OnQuestOver(...)return B_Trigger_OnQuestOverWait:new(...)end;Trigger_OnQuestOverWait=Trigger_OnQuestOver;B_Trigger_OnQuestOverWait={Name="Trigger_OnQuestOverWait",Description={en="Trigger: if a given quest has been finished, regardless of its result. Waiting time optional",de="Auslöser: wenn eine angegebene Quest beendet wurde, unabhängig von deren Ergebnis. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée est terminée, indépendamment de son résultat. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestOverWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestOverWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestOverWait:CustomFunction(bg)if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].State==QuestState.Over and Quests[bV].Result~=QuestResult.Interrupted then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestOverWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waitTime must be a number!")return true end;return false end;function B_Trigger_OnQuestOverWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestOverWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver=CopyTable(B_Trigger_OnQuestOverWait)B_Trigger_OnQuestOver.Name="Trigger_OnQuestOver"B_Trigger_OnQuestOver.Description.en="Trigger: Starts the quest after another finished."B_Trigger_OnQuestOver.Description.de="Auslöser: Startet den Quest, wenn ein anderer abgeschlossen wurde."B_Trigger_OnQuestOver.Description.fr="Déclencheur: Démarre la quête lorsqu'une autre est terminée."B_Trigger_OnQuestOver.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestOver:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestOver)function Trigger_OnQuestSuccess(...)return B_Trigger_OnQuestSuccessWait:new(...)end;Trigger_OnQuestSuccessWait=Trigger_OnQuestSuccess;B_Trigger_OnQuestSuccessWait={Name="Trigger_OnQuestSuccessWait",Description={en="Trigger: if a given quest has been finished successfully. Waiting time optional",de="Auslöser: wenn eine angegebene Quest erfolgreich abgeschlossen wurde. Wartezeit optional",fr="Déclencheur: lorsqu'une quête indiquée a été accomplie avec succès. Délai d'attente optionnel"},Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"},{ParameterType.Number,en="Waiting time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_OnQuestSuccessWait:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnQuestSuccessWait:AddParameter(bh,bi)if bh==0 then self.QuestName=bi elseif bh==1 then self.WaitTime=bi~=nil and tonumber(bi)or 0 end end;function B_Trigger_OnQuestSuccessWait:CustomFunction()if GetQuestID(self.QuestName)~=nil then local bV=GetQuestID(self.QuestName)if Quests[bV].Result==QuestResult.Success then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end end;return false end;function B_Trigger_OnQuestSuccessWait:Debug(bg)if type(self.QuestName)~="string"then debug(false,bg.Identifier..": "..self.Name..": invalid quest name!")return true elseif self.WaitTime and(type(self.WaitTime)~="number"or self.WaitTime<0)then debug(false,bg.Identifier..": "..self.Name..": waittime must be a number!")return true end;return false end;function B_Trigger_OnQuestSuccessWait:Interrupt(bg)self.WaitTimeTimer=nil end;function B_Trigger_OnQuestSuccessWait:Reset(bg)self.WaitTimeTimer=nil end;RegisterBehavior(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess=CopyTable(B_Trigger_OnQuestSuccessWait)B_Trigger_OnQuestSuccess.Name="Trigger_OnQuestSuccess"B_Trigger_OnQuestSuccess.Description.en="Trigger: Starts the quest after another finished successfully."B_Trigger_OnQuestSuccess.Description.de="Auslöser: Startet den Quest, wenn ein anderer erfolgreich abgeschlossen wurde."B_Trigger_OnQuestSuccess.Description.de="Déclencheur: Démarre la quête lorsqu'une autre a été accomplie avec succès."B_Trigger_OnQuestSuccess.Parameter={{ParameterType.QuestName,en="Quest name",de="Questname",fr="Nom de la quête"}}function B_Trigger_OnQuestSuccess:AddParameter(bh,bi)if bh==0 then self.QuestName=bi;self.WaitTime=0 end end;RegisterBehavior(B_Trigger_OnQuestSuccess)function Trigger_CustomVariables(...)return B_Trigger_CustomVariables:new(...)end;B_Trigger_CustomVariables={Name="Trigger_CustomVariables",Description={en="Trigger: if the variable has a certain value.",de="Auslöser: wenn die Variable einen bestimmen Wert eingenommen hat.",fr="Déclencheur: lorsque la variable a pris une valeur déterminée."},Parameter={{ParameterType.Default,en="Name of Variable",de="Variablennamen",fr="Noms de variables"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Default,en="Value",de="Wert",fr="Valeur"}}}function B_Trigger_CustomVariables:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_CustomVariables:AddParameter(bh,bi)if bh==0 then self.VariableName=bi elseif bh==1 then self.Relation=bi elseif bh==2 then local bL=tonumber(bi)bL=bL~=nil and bL or bi;self.Value=bL end end;function B_Trigger_CustomVariables:CustomFunction()local bM=ObtainCustomVariable("BehaviorVariable_"..self.VariableName,0)local bN=self.Value;if type(self.Value)=="string"then bN=ObtainCustomVariable("BehaviorVariable_"..self.Value,0)end;if self.Relation=="=="then return bM==bN elseif self.Relation~="~="then return bM~=bN elseif self.Relation==">"then return bM>bN elseif self.Relation==">="then return bM>=bN elseif self.Relation=="<="then return bM<=bN else return bM<bN end;return false end;function B_Trigger_CustomVariables:GetCustomData(bh)if bh==1 then return{"==","~=","<=","<",">",">="}end end;function B_Trigger_CustomVariables:Debug(bg)local bO={"==","~=","<=","<",">",">="}local bP={true,false,nil}if not ObtainCustomVariable("BehaviorVariable_"..self.VariableName)then warn(false,bg.Identifier..": "..self.Name..": variable '"..self.VariableName.."' do not exist!")end;if not table.contains(bO,self.Relation)then debug(false,bg.Identifier..": "..self.Name..": '"..self.Relation.."' is an invalid relation!")return true end;return false end;RegisterBehavior(B_Trigger_CustomVariables)function Trigger_AlwaysActive()return B_Trigger_AlwaysActive:new()end;B_Trigger_AlwaysActive={Name="Trigger_AlwaysActive",Description={en="Trigger: the map has been started.",de="Auslöser: Start der Karte.",fr="Déclencheur: Démarrage de la carte."}}function B_Trigger_AlwaysActive:GetTriggerTable()return{Triggers.Time,0}end;RegisterBehavior(B_Trigger_AlwaysActive)function Trigger_OnMonth(...)return B_Trigger_OnMonth:new(...)end;B_Trigger_OnMonth={Name="Trigger_OnMonth",Description={en="Trigger: a specified month",de="Auslöser: ein bestimmter Monat",fr="Déclencheur: un mois donné"},Parameter={{ParameterType.Custom,en="Month",de="Monat",fr="Mois"}}}function B_Trigger_OnMonth:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonth:AddParameter(bh,bi)if bh==0 then self.Month=bi*1 end end;function B_Trigger_OnMonth:CustomFunction(bg)return self.Month==Logic.GetCurrentMonth()end;function B_Trigger_OnMonth:GetCustomData(bh)local bk={}if bh==0 then for f=1,12 do table.insert(bk,f)end else assert(false)end;return bk end;function B_Trigger_OnMonth:Debug(bg)if self.Month<1 or self.Month>12 then debug(false,bg.Identifier..": "..self.Name..": Month has the wrong value")return true end;return false end;RegisterBehavior(B_Trigger_OnMonth)function Trigger_OnMonsoon()return B_Trigger_OnMonsoon:new()end;B_Trigger_OnMonsoon={Name="Trigger_OnMonsoon",Description={en="Trigger: on monsoon.",de="Auslöser: wenn der Monsun beginnt.",fr="Déclencheur: lorsque la mousson commence."},RequiresExtraNo=1}function B_Trigger_OnMonsoon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnMonsoon:CustomFunction(bg)if Logic.GetWeatherDoesShallowWaterFlood(0)then return true end end;RegisterBehavior(B_Trigger_OnMonsoon)function Trigger_Time(...)return B_Trigger_Time:new(...)end;B_Trigger_Time={Name="Trigger_Time",Description={en="Trigger: a given amount of time since map start",de="Auslöser: eine gewisse Anzahl Sekunden nach Spielbeginn",fr="Déclencheur: un certain nombre de secondes après le début du jeu"},Parameter={{ParameterType.Number,en="Time (sec.)",de="Zeit (Sek.)",fr="Temps (sec.)"}}}function B_Trigger_Time:GetTriggerTable()return{Triggers.Time,self.Time}end;function B_Trigger_Time:AddParameter(bh,bi)if bh==0 then self.Time=bi*1 end end;RegisterBehavior(B_Trigger_Time)function Trigger_OnWaterFreezes()return B_Trigger_OnWaterFreezes:new()end;B_Trigger_OnWaterFreezes={Name="Trigger_OnWaterFreezes",Description={en="Trigger: if the water starts freezing",de="Auslöser: wenn die Gewässer gefrieren",fr="Déclencheur: lorsque les eaux gèlent"}}function B_Trigger_OnWaterFreezes:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnWaterFreezes:CustomFunction(bg)if Logic.GetWeatherDoesWaterFreeze(0)then return true end end;RegisterBehavior(B_Trigger_OnWaterFreezes)function Trigger_NeverTriggered()return B_Trigger_NeverTriggered:new()end;B_Trigger_NeverTriggered={Name="Trigger_NeverTriggered",Description={en="Trigger: Never triggers a Quest. The quest may be set active by Reward_QuestActivate or Reward_QuestRestartForceActive",de="Auslöser: Löst nie eine Quest aus. Die Quest kann von Reward_QuestActivate oder Reward_QuestRestartForceActive aktiviert werden.",fr="Déclencheur: Ne déclenche jamais de quête. La quête peut être activée par Reward_QuestActivate ou Reward_QuestRestartForceActive."}}function B_Trigger_NeverTriggered:GetTriggerTable()return{Triggers.Custom2,{self,function()end}}end;RegisterBehavior(B_Trigger_NeverTriggered)function Trigger_OnAtLeastOneQuestFailure(...)return B_Trigger_OnAtLeastOneQuestFailure:new(...)end;B_Trigger_OnAtLeastOneQuestFailure={Name="Trigger_OnAtLeastOneQuestFailure",Description={en="Trigger: if one or both of the given quests have failed.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge fehlgeschlagen sind.",fr="Déclencheur: si l'une des quêtes indiquées ou les deux ont échoué."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestFailure:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestFailure:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnAtLeastOneQuestFailure:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if cs.State==QuestState.Over and cs.Result==QuestResult.Failure or ct.State==QuestState.Over and ct.Result==QuestResult.Failure then return true end;return false end;function B_Trigger_OnAtLeastOneQuestFailure:Debug(bg)if self.Quest1==self.Quest2 then debug(false,bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestFailure)function Trigger_OnAtLeastOneQuestSuccess(...)return B_Trigger_OnAtLeastOneQuestSuccess:new(...)end;B_Trigger_OnAtLeastOneQuestSuccess={Name="Trigger_OnAtLeastOneQuestSuccess",Description={en="Trigger: if one or both of the given quests are won.",de="Auslöser: wenn einer oder beide der angegebenen Aufträge gewonnen wurden.",fr="Déclencheur : si une ou les deux missions indiquées ont été gagnées."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnAtLeastOneQuestSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastOneQuestSuccess:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnAtLeastOneQuestSuccess:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if cs.State==QuestState.Over and cs.Result==QuestResult.Success or ct.State==QuestState.Over and ct.Result==QuestResult.Success then return true end;return false end;function B_Trigger_OnAtLeastOneQuestSuccess:Debug(bg)if self.Quest1==self.Quest2 then debug(false,bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then debug(false,bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnAtLeastOneQuestSuccess)function Trigger_MapScriptFunction(...)return B_Trigger_MapScriptFunction:new(...)end;B_Trigger_MapScriptFunction={Name="Trigger_MapScriptFunction",Description={en="Trigger: Calls a function within the global map script. If the function returns true the quest will be started",de="Auslöser: Ruft eine Funktion im globalen Skript auf. Wenn sie true sendet, wird die Quest gestartet.",fr="Déclencheur: Appelle une fonction dans le script global. Si elle envoie true, la quête est lancée."},Parameter={{ParameterType.Default,en="Function name",de="Funktionsname",fr="Nom de la fonction"}}}function B_Trigger_MapScriptFunction:GetTriggerTable(bg)return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_MapScriptFunction:AddParameter(bh,bi)if bh==0 then self.FuncName=bi end end;function B_Trigger_MapScriptFunction:CustomFunction(bg)if type(self.FuncName)=="function"then return self.FuncName(unpack(self.i47ya_6aghw_frxil))end;return _G[self.FuncName](self,bg)end;function B_Trigger_MapScriptFunction:Debug(bg)if not self.FuncName then debug(false,bg.Identifier..": "..self.Name..": function reference is invalid!")return true end;if type(self.FuncName)~="function"and not _G[self.FuncName]then debug(false,bg.Identifier..": "..self.Name..": function does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_MapScriptFunction)function Trigger_OnEffectDestroyed(...)return B_Trigger_OnEffectDestroyed:new(...)end;B_Trigger_OnEffectDestroyed={Name="Trigger_OnEffectDestroyed",Description={en="Trigger: Starts a quest after an effect was destroyed",de="Auslöser: Startet eine Quest, nachdem ein Effekt zerstoert wurde",fr="Déclencheur: Démarre une quête après la destruction d'un effet."},Parameter={{ParameterType.Default,en="Effect name",de="Effektname",fr="Nom de l'effet"}}}function B_Trigger_OnEffectDestroyed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnEffectDestroyed:AddParameter(bh,bi)if bh==0 then self.EffectName=bi end end;function B_Trigger_OnEffectDestroyed:CustomFunction()return not CONST_EFFECT_NAME_TO_ID[self.EffectName]or not Logic.IsEffectRegistered(CONST_EFFECT_NAME_TO_ID[self.EffectName])end;function B_Trigger_OnEffectDestroyed:Debug(bg)if not CONST_EFFECT_NAME_TO_ID[self.EffectName]then debug(false,bg.Identifier..": "..self.Name..": Effect has never existed")return true end end;RegisterBehavior(B_Trigger_OnEffectDestroyed)Lib.Register("module/entity/NPC_Behavior")function Goal_NPC(iF,iG)return B_Goal_NPC:new(iF,iG)end;B_Goal_NPC={Name="Goal_NPC",Description={en="Goal: The hero has to talk to a non-player character.",de="Ziel: Der Held muss einen Nichtspielercharakter ansprechen.",fr="Objectif: le héros doit interpeller un personnage non joueur."},Parameter={{ParameterType.ScriptName,en="NPC",de="NPC",fr="NPC"},{ParameterType.ScriptName,en="Hero",de="Held",fr="Héro"}}}function B_Goal_NPC:GetGoalTable()return{Objective.Distance,-65565,self.Hero,self.NPC,self}end;function B_Goal_NPC:AddParameter(bh,bi)if bh==0 then self.NPC=bi elseif bh==1 then self.Hero=bi;if self.Hero=="-"then self.Hero=nil end end end;function B_Goal_NPC:GetIcon()return{14,10}end;RegisterBehavior(B_Goal_NPC)Lib.Register("module/io/IO_Behavior")function Goal_ActivateSeveralObjects(...)return B_Goal_ActivateSeveralObjects:new(...)end;B_Goal_ActivateSeveralObjects={Name="Goal_ActivateSeveralObjects",Description={en="Goal: Activate an interactive object",de="Ziel: Aktiviere ein interaktives Objekt",fr="Objectif: activer un objet interactif"},Parameter={{ParameterType.Default,en="Object name 1",de="Skriptname 1",fr="Nom de l'entité 1"},{ParameterType.Default,en="Object name 2",de="Skriptname 2",fr="Nom de l'entité 2"},{ParameterType.Default,en="Object name 3",de="Skriptname 3",fr="Nom de l'entité 3"},{ParameterType.Default,en="Object name 4",de="Skriptname 4",fr="Nom de l'entité 4"}},ScriptNames={}}function B_Goal_ActivateSeveralObjects:GetGoalTable()return{Objective.Object,{unpack(self.ScriptNames)}}end;function B_Goal_ActivateSeveralObjects:AddParameter(bh,bi)if bh==0 then assert(bi~=nil and bi~="","Goal_ActivateSeveralObjects: At least one IO needed!")end;if bi~=nil and bi~=""then table.insert(self.ScriptNames,bi)end end;function B_Goal_ActivateSeveralObjects:GetMsgKey()return"Quest_Object_Activate"end;RegisterBehavior(B_Goal_ActivateSeveralObjects)B_Reward_ObjectInit.CustomFunction=function(self,bg)local w=GetID(self.ScriptName)if w==0 then return end;CONST_INITIALIZED_OBJECTS[w]=bg.Identifier;local k_;if self.RewardType and self.RewardType~="-"then k_={Goods[self.RewardType],self.RewardAmount}end;local l0;if self.FirstCostType and self.FirstCostType~="-"then l0=k_ or{}table.insert(l0,Goods[self.FirstCostType])table.insert(l0,Goods[self.FirstCostAmount])end;if self.SecondCostType and self.SecondCostType~="-"then l0=k_ or{}table.insert(l0,Goods[self.SecondCostType])table.insert(l0,Goods[self.SecondCostAmount])end;SetupObject{Name=self.ScriptName,Distance=self.Distance,Waittime=self.Waittime,Reward=k_,Costs=l0}InteractiveObjectActivate(self.ScriptName,self.UsingState)end;Lib.Register("module/quest/Quest_Behavior")function Goal_WinQuest(...)return B_Goal_WinQuest:new(...)end;B_Goal_WinQuest={Name="Goal_WinQuest",Description={en="Goal: The player has to win a given quest.",de="Ziel: Der Spieler muss eine angegebene Quest erfolgreich abschliessen.",fr="Objectif: Le joueur doit réussir une quête indiquée."},Parameter={{ParameterType.QuestName,en="Quest Name",de="Questname",fr="Nom de la quête"}}}function B_Goal_WinQuest:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_WinQuest:AddParameter(bh,bi)if bh==0 then self.Quest=bi end end;function B_Goal_WinQuest:CustomFunction(bg)local ne=Quests[GetQuestID(self.Quest)]if ne then if ne.Result==QuestResult.Failure then return false end;if ne.Result==QuestResult.Success then return true end end;return nil end;function B_Goal_WinQuest:Debug(bg)if Quests[GetQuestID(self.Quest)]==nil then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest.."' does not exist!")return true end;return false end;RegisterBehavior(B_Goal_WinQuest)function Goal_DiscoverPlayers(...)return B_Goal_DiscoverPlayers:new(...)end;B_Goal_DiscoverPlayers={Name="Goal_DiscoverPlayers",Description={en="Goal: Discover the home territory of some other players.",de="Ziel: Entdecke das Heimatterritorium einiger Spieler.",fr="Objectif: Découvrir le territoire d'origine d'un joueur."},Parameter={{ParameterType.Custom,en="Player amount",de="Spieleranzahl",fr="Montant du Joueur"},{ParameterType.PlayerID,en="Player 1",de="Spieler 1",fr="Joueur 1"},{ParameterType.PlayerID,en="Player 2",de="Spieler 2",fr="Joueur 2"},{ParameterType.PlayerID,en="Player 3",de="Spieler 3",fr="Joueur 3"},{ParameterType.PlayerID,en="Player 4",de="Spieler 4",fr="Joueur 4"},{ParameterType.PlayerID,en="Player 5",de="Spieler 5",fr="Joueur 5"}}}function B_Goal_DiscoverPlayers:GetGoalTable()return{Objective.Discover,2,{unpack(self.PlayerList)}}end;function B_Goal_DiscoverPlayers:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 end;if bh>0 then self.PlayerList=self.PlayerList or{}if bh<=self.Amount then local q=bi*1;table.insert(self.PlayerList,q)end end end;function B_Goal_DiscoverPlayers:GetMsgKey()local bm={[PlayerCategories.BanditsCamp]="Quest_Discover",[PlayerCategories.City]="Quest_Discover_City",[PlayerCategories.Cloister]="Quest_Discover_Cloister",[PlayerCategories.Harbour]="Quest_Discover",[PlayerCategories.Village]="Quest_Discover_Village"}local br=GetPlayerCategoryType(self.PlayerList[1]or 1)if br then local bn=bm[br]if bn then return bn end end;return"Quest_Discover"end;RegisterBehavior(B_Goal_DiscoverPlayers)function Goal_DiscoverTerritories(...)return B_Goal_DiscoverTerritories:new(...)end;B_Goal_DiscoverTerritories={Name="Goal_DiscoverTerritories",Description={en="Goal: Discover multiple territories",de="Ziel: Entdecke mehrere Territorien",fr="Objectif : Découvrez plusieurs territoires"},Parameter={{ParameterType.Custom,en="Territory amount",de="Territorienanzahl",fr="Montant du territoire"},{ParameterType.TerritoryName,en="Territory 1",de="Territorium 1",fr="Territoire 1"},{ParameterType.TerritoryName,en="Territory 2",de="Territorium 2",fr="Territoire 2"},{ParameterType.TerritoryName,en="Territory 3",de="Territorium 3",fr="Territoire 3"},{ParameterType.TerritoryName,en="Territory 4",de="Territorium 4",fr="Territoire 4"},{ParameterType.TerritoryName,en="Territory 5",de="Territorium 5",fr="Territoire 5"}}}function B_Goal_DiscoverTerritories:GetGoalTable()return{Objective.Discover,1,{unpack(self.TerritoryList)}}end;function B_Goal_DiscoverTerritories:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 end;if bh>0 then self.TerritoryList=self.TerritoryList or{}if bh<=self.Amount then local a1=tonumber(bi)if not a1 then a1=GetTerritoryIDByName(bi)end;assert(a1>0)table.insert(self.TerritoryList,a1)end end end;function B_Goal_DiscoverTerritories:GetMsgKey()return"Quest_Discover_Territory"end;RegisterBehavior(B_Goal_DiscoverTerritories)function Trigger_OnAtLeastXOfYQuestsSuccess(...)return B_Trigger_OnAtLeastXOfYQuestsSuccess:new(...)end;B_Trigger_OnAtLeastXOfYQuestsSuccess={Name="Trigger_OnAtLeastXOfYQuestsSuccess",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests erfolgreich abgeschlossen wurden.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont été accomplies avec succès."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:AddParameter(bh,bi)if bh==0 then self.LeastAmount=tonumber(bi)elseif bh==1 then self.QuestAmount=tonumber(bi)elseif bh==2 then self.QuestName1=bi elseif bh==3 then self.QuestName2=bi elseif bh==4 then self.QuestName3=bi elseif bh==5 then self.QuestName4=bi elseif bh==6 then self.QuestName5=bi end end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:CustomFunction()local nf=0;for f=1,self.QuestAmount do local bV=GetQuestID(self["QuestName"..f])if IsValidQuest(bV)then if Quests[bV].Result==QuestResult.Success then nf=nf+1;if nf>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:Debug(bg)local ng=self.LeastAmount;local nh=self.QuestAmount;if ng<=0 or ng>5 then debug(false,bg.Identifier..": "..self.Name..": LeastAmount is wrong")return true elseif nh<=0 or nh>5 then debug(false,bg.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif ng>nh then debug(false,bg.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,nh do if not IsValidQuest(self["QuestName"..f])then debug(false,bg.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsSuccess:GetCustomData(bh)if bh==0 or bh==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsSuccess)function Trigger_OnAtLeastXOfYQuestsFailed(...)return B_Trigger_OnAtLeastXOfYQuestsFailed:new(...)end;B_Trigger_OnAtLeastXOfYQuestsFailed={Name="Trigger_OnAtLeastXOfYQuestsFailed",Description={en="Trigger: if at least X of Y given quests has been finished successfully.",de="Auslöser: wenn X von Y angegebener Quests fehlgeschlagen sind.",fr="Déclencheur: lorsque X des Y quêtes indiquées ont échoué."},Parameter={{ParameterType.Custom,en="Least Amount",de="Mindest Anzahl",fr="Nombre minimum"},{ParameterType.Custom,en="Quest Amount",de="Quest Anzahl",fr="Nombre de quêtes"},{ParameterType.QuestName,en="Quest name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest name 2",de="Questname 2",fr="Nom de la quête 2"},{ParameterType.QuestName,en="Quest name 3",de="Questname 3",fr="Nom de la quête 3"},{ParameterType.QuestName,en="Quest name 4",de="Questname 4",fr="Nom de la quête 4"},{ParameterType.QuestName,en="Quest name 5",de="Questname 5",fr="Nom de la quête 5"}}}function B_Trigger_OnAtLeastXOfYQuestsFailed:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnAtLeastXOfYQuestsFailed:AddParameter(bh,bi)if bh==0 then self.LeastAmount=tonumber(bi)elseif bh==1 then self.QuestAmount=tonumber(bi)elseif bh==2 then self.QuestName1=bi elseif bh==3 then self.QuestName2=bi elseif bh==4 then self.QuestName3=bi elseif bh==5 then self.QuestName4=bi elseif bh==6 then self.QuestName5=bi end end;function B_Trigger_OnAtLeastXOfYQuestsFailed:CustomFunction()local nf=0;for f=1,self.QuestAmount do local bV=GetQuestID(self["QuestName"..f])if IsValidQuest(bV)then if Quests[bV].Result==QuestResult.Failure then nf=nf+1;if nf>=self.LeastAmount then return true end end end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:Debug(bg)local ng=self.LeastAmount;local nh=self.QuestAmount;if ng<=0 or ng>5 then error(bg.Identifier..":"..self.Name..": LeastAmount is wrong")return true elseif nh<=0 or nh>5 then error(bg.Identifier..": "..self.Name..": QuestAmount is wrong")return true elseif ng>nh then error(bg.Identifier..": "..self.Name..": LeastAmount is greater than QuestAmount")return true end;for f=1,nh do if not IsValidQuest(self["QuestName"..f])then error(bg.Identifier..": "..self.Name..": Quest "..self["QuestName"..f].." not found")return true end end;return false end;function B_Trigger_OnAtLeastXOfYQuestsFailed:GetCustomData(bh)if bh==0 or bh==1 then return{"1","2","3","4","5"}end end;RegisterBehavior(B_Trigger_OnAtLeastXOfYQuestsFailed)function Trigger_OnExactOneQuestIsWon(...)return B_Trigger_OnExactOneQuestIsWon:new(...)end;B_Trigger_OnExactOneQuestIsWon={Name="Trigger_OnExactOneQuestIsWon",Description={en="Trigger: if one of two given quests has been finished successfully, but NOT both.",de="Auslöser: wenn eine von zwei angegebenen Quests (aber NICHT beide) erfolgreich abgeschlossen wurde.",fr="Déclencheur: lorsque l'une des deux quêtes indiquées (mais PAS les deux) a été accomplie avec succès."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsWon:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsWon:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnExactOneQuestIsWon:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if ct and cs then local ni=cs.State==QuestState.Over and cs.Result==QuestResult.Success;local nj=ct.State==QuestState.Over and ct.Result==QuestResult.Success;if ni and not nj or not ni and nj then return true end end;return false end;function B_Trigger_OnExactOneQuestIsWon:Debug(bg)if self.Quest1==self.Quest2 then error(bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsWon)function Trigger_OnExactOneQuestIsLost(...)return B_Trigger_OnExactOneQuestIsLost:new(...)end;B_Trigger_OnExactOneQuestIsLost={Name="Trigger_OnExactOneQuestIsLost",Description={en="Trigger: If one of two given quests has been lost, but NOT both.",de="Auslöser: Wenn einer von zwei angegebenen Quests (aber NICHT beide) fehlschlägt.",fr="Déclencheur: Si l'une des deux quêtes indiquées (mais PAS les deux) échoue."},Parameter={{ParameterType.QuestName,en="Quest Name 1",de="Questname 1",fr="Nom de la quête 1"},{ParameterType.QuestName,en="Quest Name 2",de="Questname 2",fr="Nom de la quête 2"}}}function B_Trigger_OnExactOneQuestIsLost:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_OnExactOneQuestIsLost:AddParameter(bh,bi)self.QuestTable={}if bh==0 then self.Quest1=bi elseif bh==1 then self.Quest2=bi end end;function B_Trigger_OnExactOneQuestIsLost:CustomFunction(bg)local cs=Quests[GetQuestID(self.Quest1)]local ct=Quests[GetQuestID(self.Quest2)]if ct and cs then local ni=cs.State==QuestState.Over and cs.Result==QuestResult.Failure;local nj=ct.State==QuestState.Over and ct.Result==QuestResult.Failure;if ni and not nj or not ni and nj then return true end end;return false end;function B_Trigger_OnExactOneQuestIsLost:Debug(bg)if self.Quest1==self.Quest2 then error(bg.Identifier..": "..self.Name..": Both quests are identical!")return true elseif not IsValidQuest(self.Quest1)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest1 .."' does not exist!")return true elseif not IsValidQuest(self.Quest2)then error(bg.Identifier..": "..self.Name..": Quest '"..self.Quest2 .."' does not exist!")return true end;return false end;RegisterBehavior(B_Trigger_OnExactOneQuestIsLost)Lib.Register("module/quest/QuestBehavior_Behavior")function Goal_MoveToPosition(...)return B_Goal_MoveToPosition:new(...)end;B_Goal_MoveToPosition={Name="Goal_MoveToPosition",Description={en="Goal: A entity have to moved as close as the distance to another entity. The target can be marked with a static marker.",de="Ziel: Ein Entity muss sich einer anderen bis auf eine bestimmte Distanz nähern. Die Lupe wird angezeigt, das Ziel kann markiert werden.",fr="Objectif: une entité doit s'approcher d'une autre à une distance donnée. La loupe est affichée, la cible peut être marquée."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target",de="Ziel",fr="Cible"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Custom,en="Marker",de="Ziel markieren",fr="Marquer la cible"}}}function B_Goal_MoveToPosition:GetGoalTable()return{Objective.Distance,self.Entity,self.Target,self.Distance,self.Marker}end;function B_Goal_MoveToPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.Distance=bi*1 elseif bh==3 then self.Marker=ToBoolean(bi)end end;function B_Goal_MoveToPosition:GetCustomData(bh)local bk={}if bh==3 then bk={"true","false"}end;return bk end;RegisterBehavior(B_Goal_MoveToPosition)function Goal_AmmunitionAmount(...)return B_Goal_AmmunitionAmount:new(...)end;B_Goal_AmmunitionAmount={Name="Goal_AmmunitionAmount",Description={en="Goal: Reach a smaller or bigger value than the given amount of ammunition in a war machine.",de="Ziel: Über- oder unterschreite die angegebene Anzahl Munition in einem Kriegsgerät.",fr="Objectif : Dépasser ou ne pas dépasser le nombre de munitions indiqué dans un engin de guerre."},Parameter={{ParameterType.ScriptName,en="Script name",de="Skriptname",fr="Nom de l'entité"},{ParameterType.Custom,en="Relation",de="Relation",fr="Relation"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"}}}function B_Goal_AmmunitionAmount:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_AmmunitionAmount:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi elseif bh==1 then self.bRelSmallerThan=tostring(bi)=="true"or bi=="<"elseif bh==2 then self.Amount=bi*1 end end;function B_Goal_AmmunitionAmount:CustomFunction()local w=GetID(self.Scriptname)if not IsExisting(w)then return false end;local bK=Logic.GetAmmunitionAmount(w)if self.bRelSmallerThan and bK<self.Amount or not self.bRelSmallerThan and bK>=self.Amount then return true end;return nil end;function B_Goal_AmmunitionAmount:Debug(bg)if self.Amount<0 then error(bg.Identifier..": "..self.Name..": Amount is negative")return true end end;function B_Goal_AmmunitionAmount:GetCustomData(bh)if bh==1 then return{"<",">="}end end;RegisterBehavior(B_Goal_AmmunitionAmount)function Goal_CityReputation(...)return B_Goal_CityReputation:new(...)end;B_Goal_CityReputation={Name="Goal_CityReputation",Description={en="Goal: The reputation of the quest receivers city must at least reach the desired hight.",de="Ziel: Der Ruf der Stadt des Empfängers muss mindestens so hoch sein, wie angegeben.",fr="Objectif: la réputation de la ville du receveur doit être au moins aussi élevée que celle indiquée."},Parameter={{ParameterType.Number,en="City reputation",de="Ruf der Stadt",fr="Réputation de la ville"}},Text={de="RUF DER STADT{cr}{cr}Hebe den Ruf der Stadt durch weise Herrschaft an!{cr}Benötigter Ruf: %d",en="CITY REPUTATION{cr}{cr}Raise your reputation by fair rulership!{cr}Needed reputation: %d",fr="RÉPUTATION DE LA VILLE{cr}{cr} Augmente la réputation de la ville en la gouvernant sagement!{cr}Réputation requise : %d"}}function B_Goal_CityReputation:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_CityReputation:AddParameter(bh,bi)if bh==0 then self.Reputation=bi*1 end end;function B_Goal_CityReputation:CustomFunction(bg)self:SetCaption(bg)local nY=Logic.GetCityReputation(bg.ReceivingPlayer)*100;if nY>=self.Reputation then return true end end;function B_Goal_CityReputation:SetCaption(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bq=string.format(Localize(self.Text),self.Reputation)Lib.Core.Quest:ChangeCustomQuestCaptionText(bq.."%",bg)end end;function B_Goal_CityReputation:GetIcon()return{5,14}end;function B_Goal_CityReputation:Debug(bg)if type(self.Reputation)~="number"or self.Reputation<0 or self.Reputation>100 then error(bg.Identifier..": "..self.Name..": Reputation must be between 0 and 100!")return true end;return false end;RegisterBehavior(B_Goal_CityReputation)function Goal_DestroySpawnedEntities(...)return B_Goal_DestroySpawnedEntities:new(...)end;B_Goal_DestroySpawnedEntities={Name="Goal_DestroySpawnedEntities",Description={en="Goal: Destroy all entities spawned at the spawnpoint.",de="Ziel: Zerstöre alle Entitäten, die bei dem Spawnpoint erzeugt wurde.",fr="Objectif: Détruire toutes les entités créées au point d'apparition."},Parameter={{ParameterType.ScriptName,en="Spawnpoint",de="Spawnpoint",fr="Point d'émergence"},{ParameterType.Number,en="Amount",de="Menge",fr="Quantité"},{ParameterType.Custom,en="Name is prefixed",de="Name ist Präfix",fr="Le nom est un préfixe"}}}function B_Goal_DestroySpawnedEntities:GetGoalTable()if self.Prefixed then local dg=table.remove(self.SpawnPoint)local f=1;while IsExisting(dg..f)do table.insert(self.SpawnPoint,dg..f)f=f+1 end;assert(#self.SpawnPoint>0,"No spawnpoints found!")end;return{Objective.DestroyEntities,3,self.SpawnPoint,self.Amount}end;function B_Goal_DestroySpawnedEntities:AddParameter(bh,bi)if bh==0 then self.SpawnPoint={bi}elseif bh==1 then self.Amount=bi*1 elseif bh==2 then bi=bi or"false"self.Prefixed=ToBoolean(bi)end end;function B_Goal_DestroySpawnedEntities:GetMsgKey()local ar=GetID(self.SpawnPoint[1])if ar~=0 then local j=Logic.GetEntityTypeName(Logic.GetEntityType(ar))if Logic.IsEntityTypeInCategory(ar,EntityCategories.AttackableBuilding)==1 then return"Quest_Destroy_Leader"elseif j:find("Bear")or j:find("Lion")or j:find("Tiger")or j:find("Wolf")then return"Quest_DestroyEntities_Predators"elseif j:find("Military")or j:find("Cart")then return"Quest_DestroyEntities_Unit"end end;return"Quest_DestroyEntities"end;function B_Goal_DestroySpawnedEntities:GetCustomData(bh)if bh==2 then return{"false","true"}end end;RegisterBehavior(B_Goal_DestroySpawnedEntities)function Goal_StealGold(...)return B_Goal_StealGold:new(...)end;B_Goal_StealGold={Name="Goal_StealGold",Description={en="Goal: Steal an explicit amount of gold from a players or any players city buildings.",de="Ziel: Diebe sollen eine bestimmte Menge Gold aus feindlichen Stadtgebäuden stehlen.",fr="Objectif: les voleurs doivent dérober une certaine quantité d'or dans les bâtiments urbains ennemis."},Parameter={{ParameterType.Number,en="Amount on Gold",de="Zu stehlende Menge",fr="Quantité à voler"},{ParameterType.Custom,en="Target player",de="Spieler von dem gestohlen wird",fr="Joueur à qui l'on vole"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Print progress",de="Fortschritt ausgeben",fr="Afficher les progrès"}}}function B_Goal_StealGold:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealGold:AddParameter(bh,bi)if bh==0 then self.Amount=bi*1 elseif bh==1 then local q=tonumber(bi)or-1;self.Target=q*1 elseif bh==2 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)elseif bh==3 then bi=bi or"true"self.Printout=ToBoolean(bi)end;self.StohlenGold=0 end;function B_Goal_StealGold:GetCustomData(bh)if bh==1 then return{"-",1,2,3,4,5,6,7,8}elseif bh==2 then return{"true","false"}end end;function B_Goal_StealGold:SetDescriptionOverwrite(bg)local nZ=Localize({de=" anderen Spielern ",en=" different parties ",fr=" d'autres joueurs "})if self.Target~=-1 then nZ=GetPlayerName(self.Target)if nZ==nil or nZ==""then nZ=" PLAYER_NAME_MISSING "end end;if self.CheatEarnings then local n_={self.Target}if self.Target==-1 then n_={1,2,3,4,5,6,7,8}end;for f=1,#n_,1 do if f~=bg.ReceivingPlayer and Logic.GetStoreHouse(f)~=0 then local kc={Logic.GetPlayerEntitiesInCategory(f,EntityCategories.CityBuilding)}for b8=1,#kc,1 do local o0=Logic.GetBuildingProductEarnings(kc[b8])if o0<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(kc[b8],o0+1)end end end end end;local bH=self.Amount-self.StohlenGold;bH=bH>0 and bH or 0;local h5={de="Gold von %s stehlen {cr}{cr}Aus Stadtgebäuden zu stehlende Goldmenge: %d",en="Steal gold from %s {cr}{cr}Amount on gold to steal from city buildings: %d",fr="Voler l'or de %s {cr}{cr}Quantité d'or à voler dans les bâtiments de la ville : %d"}return"{center}"..string.format(Localize(h5),nZ,bH)end;function B_Goal_StealGold:CustomFunction(bg)if Lib.Core.Quest then Lib.Core.Quest:ChangeCustomQuestCaptionText(self:SetDescriptionOverwrite(bg),bg)end;if self.StohlenGold>=self.Amount then return true end;return nil end;function B_Goal_StealGold:GetIcon()return{5,13}end;function B_Goal_StealGold:Debug(bg)if tonumber(self.Amount)==nil and self.Amount<0 then error(bg.Identifier..": "..self.Name..": amount can not be negative!")return true end;return false end;function B_Goal_StealGold:Reset(bg)self.StohlenGold=0 end;RegisterBehavior(B_Goal_StealGold)function Goal_StealFromBuilding(...)return B_Goal_StealFromBuilding:new(...)end;B_Goal_StealFromBuilding={Name="Goal_StealFromBuilding",Description={en="Goal: The player has to steal from a building. Not a castle and not a village storehouse!",de="Ziel: Der Spieler muss ein bestimmtes Gebäude bestehlen. Dies darf keine Burg und kein Dorflagerhaus sein!",fr="Objectif: Le joueur doit voler un bâtiment spécifique. Il ne peut s'agir ni d'un château ni d'un entrepôt de village !"},Parameter={{ParameterType.ScriptName,en="Building",de="Gebäude",fr="Bâtiment"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"}}}function B_Goal_StealFromBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_StealFromBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)end;self.RobberList={}end;function B_Goal_StealFromBuilding:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Goal_StealFromBuilding:SetDescriptionOverwrite(bg)local o1=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Cathedrals)==1;local o2=Logic.GetEntityType(GetID(self.Building))==Entities.B_StoreHouse;local o3=Logic.GetEntityType(GetID(self.Building))==Entities.B_Cistern;local h5;if o1 then h5={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert die markierte Kirche.",en="Sabotage {cr}{cr} Send a thief to sabotage the marked chapel.",fr="Sabotage {cr}{cr} Envoyez un voleur pour saboter la chapelle marquée."}elseif o2 then h5={de="Lagerhaus bestehlen {cr}{cr} Sendet einen Dieb in das markierte Lagerhaus.",en="Steal from storehouse {cr}{cr} Steal from the marked storehouse.",fr="Voler un entrepôt {cr}{cr} Envoie un voleur dans l'entrepôt marqué."}elseif o3 then h5={de="Sabotage {cr}{cr} Sendet einen Dieb und sabotiert den markierten Brunnen.",en="Sabotage {cr}{cr} Send a thief and break the marked well of the enemy.",fr="Sabotage {cr}{cr} Envoie un voleur et sabote le puits marqué."}else h5={de="Gebäude bestehlen {cr}{cr} Sendet einen Dieb und bestehlt das markierte Gebäude.",en="Steal from building {cr}{cr} Send a thief to steal from the marked building.",fr="Voler un bâtiment {cr}{cr} Envoie un voleur et vole le bâtiment marqué."}end;return"{center}"..Localize(h5)end;function B_Goal_StealFromBuilding:CustomFunction(bg)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aP=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aP.X,aP.Y,0)end;if self.CheatEarnings then local kg=GetID(self.Building)local o0=Logic.GetBuildingProductEarnings(kg)if Logic.IsEntityInCategory(kg,EntityCategories.CityBuilding)==1 and o0<45 and Logic.GetTime()%5==0 then Logic.SetBuildingEarnings(kg,o0+1)end end;if self.SuccessfullyStohlen then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_StealFromBuilding:GetIcon()return{5,13}end;function B_Goal_StealFromBuilding:Debug(bg)local o4=Logic.GetEntityTypeName(Logic.GetEntityType(GetID(self.Building)))local o5=Logic.IsEntityInCategory(GetID(self.Building),EntityCategories.Headquarters)==1;if Logic.IsBuilding(GetID(self.Building))==0 then error(bg.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bg.Identifier..": "..self.Name..": target is destroyed :(")return true elseif string.find(o4,"B_NPC_BanditsHQ")or string.find(o4,"B_NPC_Cloister")or string.find(o4,"B_NPC_StoreHouse")then error(bg.Identifier..": "..self.Name..": village storehouses are not allowed!")return true elseif o5 then error(bg.Identifier..": "..self.Name..": use Goal_StealInformation for headquarters!")return true end;return false end;function B_Goal_StealFromBuilding:Reset(bg)self.SuccessfullyStohlen=false;self.RobberList={}self.Marker=nil end;function B_Goal_StealFromBuilding:Interrupt(bg)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_StealFromBuilding)function Goal_SpyOnBuilding(...)return B_Goal_SpyOnBuilding:new(...)end;B_Goal_SpyOnBuilding={Name="Goal_SpyOnBuilding",IconOverwrite={5,13},Description={en="Goal: Infiltrate a building with a thief. A thief must be able to steal from the target building.",de="Ziel: Infiltriere ein Gebäude mit einem Dieb. Nur mit Gebaueden möglich, die bestohlen werden koennen.",fr="Objectif: Infiltrer un bâtiment avec un voleur. Seulement possible avec des bâtiments qui peuvent être volés."},Parameter={{ParameterType.ScriptName,en="Target Building",de="Zielgebäude",fr="Bâtiment cible"},{ParameterType.Custom,en="Cheat earnings",de="Einnahmen generieren",fr="Générer des revenus"},{ParameterType.Custom,en="Destroy Thief",de="Dieb löschen",fr="Supprimer le voleur"}}}function B_Goal_SpyOnBuilding:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_SpyOnBuilding:AddParameter(bh,bi)if bh==0 then self.Building=bi elseif bh==1 then bi=bi or"false"self.CheatEarnings=ToBoolean(bi)elseif bh==2 then bi=bi or"true"self.Delete=ToBoolean(bi)end end;function B_Goal_SpyOnBuilding:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Goal_SpyOnBuilding:SetDescriptionOverwrite(bg)if not bg.QuestDescription then local h5={de="Gebäude infriltrieren {cr}{cr}Spioniere das markierte Gebäude mit einem Dieb aus!",en="Infiltrate building {cr}{cr}Spy on the highlighted buildings with a thief!",fr="Infiltrer un bâtiment {cr}{cr}Espionner le bâtiment marqué avec un voleur!"}return Localize(h5)else return bg.QuestDescription end end;function B_Goal_SpyOnBuilding:CustomFunction(bg)if not IsExisting(self.Building)then if self.Marker then Logic.DestroyEffect(self.Marker)end;return false end;if not self.Marker then local aP=GetPosition(self.Building)self.Marker=Logic.CreateEffect(EGL_Effects.E_Questmarker,aP.X,aP.Y,0)end;if self.CheatEarnings then local kg=GetID(self.Building)if Logic.IsEntityInCategory(kg,EntityCategories.CityBuilding)==1 and Logic.GetBuildingEarnings(kg)<5 then Logic.SetBuildingEarnings(kg,5)end end;if self.Infiltrated then Logic.DestroyEffect(self.Marker)return true end;return nil end;function B_Goal_SpyOnBuilding:GetIcon()return self.IconOverwrite end;function B_Goal_SpyOnBuilding:Debug(bg)if Logic.IsBuilding(GetID(self.Building))==0 then error(bg.Identifier..": "..self.Name..": target is not a building")return true elseif not IsExisting(self.Building)then error(bg.Identifier..": "..self.Name..": target is destroyed :(")return true end;return false end;function B_Goal_SpyOnBuilding:Reset(bg)self.Infiltrated=false;self.Marker=nil end;function B_Goal_SpyOnBuilding:Interrupt(bg)Logic.DestroyEffect(self.Marker)end;RegisterBehavior(B_Goal_SpyOnBuilding)function Goal_DestroySoldiers(...)return B_Goal_DestroySoldiers:new(...)end;B_Goal_DestroySoldiers={Name="Goal_DestroySoldiers",Description={en="Goal: Destroy a given amount of enemy soldiers",de="Ziel: Zerstöre eine Anzahl gegnerischer Soldaten",fr="Objectif: Détruire un certain nombre de soldats ennemis"},Parameter={{ParameterType.PlayerID,en="Attacking Player",de="Angreifer",fr="Attaquant"},{ParameterType.PlayerID,en="Defending Player",de="Verteidiger",fr="Défenseur"},{ParameterType.Number,en="Amount",de="Anzahl",fr="Quantité"}},Text={de="{center}SOLDATEN ZERSTÖREN {cr}{cr}von der Partei: %s{cr}{cr}Anzahl: %d",en="{center}DESTROY SOLDIERS {cr}{cr}from faction: %s{cr}{cr}Amount: %d",fr="{center}DESTRUIRE DES SOLDATS {cr}{cr}de la faction: %s{cr}{cr}Nombre : %d"}}function B_Goal_DestroySoldiers:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_DestroySoldiers:AddParameter(bh,bi)if bh==0 then self.AttackingPlayer=bi*1 elseif bh==1 then self.AttackedPlayer=bi*1 elseif bh==2 then self.KillsNeeded=bi*1 end end;function B_Goal_DestroySoldiers:CustomFunction(bg)if not bg.QuestDescription or bg.QuestDescription==""then local bp=GetPlayerName(self.AttackedPlayer)or"Player "..self.AttackedPlayer;Lib.Core.Quest:ChangeCustomQuestCaptionText(string.format(Lib.Core.Text:Localize(self.Text),bp,self.KillsNeeded),bg)end;local o6=GetEnemySoldierKillsOfPlayer(self.AttackingPlayer,self.AttackedPlayer)if not self.KillstStart then self.KillstStart=o6 end;if self.KillsNeeded<=o6-self.KillstStart then return true end end;function B_Goal_DestroySoldiers:Debug(bg)if Logic.GetStoreHouse(self.AttackingPlayer)==0 then error(bg.Identifier..": "..self.Name..": Player "..self.AttackinPlayer.." is dead :-(")return true elseif Logic.GetStoreHouse(self.AttackedPlayer)==0 then error(bg.Identifier..": "..self.Name..": Player "..self.AttackedPlayer.." is dead :-(")return true elseif self.KillsNeeded<0 then error(bg.Identifier..": "..self.Name..": Amount negative")return true end end;function B_Goal_DestroySoldiers:Reset()self.KillstStart=nil end;function B_Goal_DestroySoldiers:GetIcon()return{7,12}end;RegisterBehavior(B_Goal_DestroySoldiers)function Reprisal_SetPosition(...)return B_Reprisal_SetPosition:new(...)end;B_Reprisal_SetPosition={Name="Reprisal_SetPosition",Description={en="Reprisal: Places an entity relative to the position of another. The entity can look the target.",de="Vergeltung: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden.",fr="Rétribution: place une Entity vis-à-vis de l'emplacement d'une autre. L'entité peut être orientée vers la cible."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.ScriptName,en="Target position",de="Zielposition",fr="Position cible"},{ParameterType.Custom,en="Face to face",de="Ziel ansehen",fr="Voir la cible"},{ParameterType.Number,en="Distance",de="Zielentfernung",fr="Distance de la cible"}}}function B_Reprisal_SetPosition:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.FaceToFace=ToBoolean(bi)elseif bh==3 then self.Distance=bi~=nil and tonumber(bi)or 100 end end;function B_Reprisal_SetPosition:CustomFunction(bg)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;local c6=GetID(self.Entity)local o7=GetID(self.Target)local E,F,G=Logic.EntityGetPos(o7)if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)end;local o8=Logic.GetEntityOrientation(o7)+90;if self.FaceToFace then E=E+self.Distance*math.cos(math.rad(o8))F=F+self.Distance*math.sin(math.rad(o8))Logic.DEBUG_SetSettlerPosition(c6,E,F)LookAt(self.Entity,self.Target)else if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)end;Logic.DEBUG_SetSettlerPosition(c6,E,F)end end;function B_Reprisal_SetPosition:GetCustomData(bh)if bh==2 then return{"true","false"}end end;function B_Reprisal_SetPosition:Debug(bg)if self.FaceToFace then if tonumber(self.Distance)==nil or self.Distance<50 then error(bg.Identifier..": "..self.Name..": Distance is nil or to short!")return true end end;if not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bg.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetPosition)function Reprisal_ChangePlayer(...)return B_Reprisal_ChangePlayer:new(...)end;B_Reprisal_ChangePlayer={Name="Reprisal_ChangePlayer",Description={en="Reprisal: Changes the owner of the entity or a battalion.",de="Vergeltung: Aendert den Besitzer einer Entity oder eines Battalions.",fr="Rétribution : Change le propriétaire d'une entité ou d'un bataillon."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Player",de="Spieler",fr="Joueur"}}}function B_Reprisal_ChangePlayer:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_ChangePlayer:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Player=tostring(bi)end end;function B_Reprisal_ChangePlayer:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)if Logic.IsLeader(bQ)==1 then Logic.ChangeSettlerPlayerID(bQ,self.Player)else Logic.ChangeEntityPlayerID(bQ,self.Player)end end;function B_Reprisal_ChangePlayer:GetCustomData(bh)if bh==1 then return{"0","1","2","3","4","5","6","7","8"}end end;function B_Reprisal_ChangePlayer:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_ChangePlayer)function Reprisal_SetVisible(...)return B_Reprisal_SetVisible:new(...)end;B_Reprisal_SetVisible={Name="Reprisal_SetVisible",Description={en="Reprisal: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst.",fr="Rétribution: fixe la visibilité d'une Entité. S'il s'agit d'un spawn, les Entities spawnées sont également affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Visible",de="Sichtbar",fr="Visible"}}}function B_Reprisal_SetVisible:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVisible:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Visible=ToBoolean(bi)end end;function B_Reprisal_SetVisible:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local bT=Logic.EntityGetPlayer(bQ)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)if string.find(o9,"^S_")or string.find(o9,"^B_NPC_Bandits")or string.find(o9,"^B_NPC_Barracks")then local oa={Logic.GetSpawnedEntities(bQ)}for f=1,#oa do if Logic.IsLeader(oa[f])==1 then local ob={Logic.GetSoldiersAttachedToLeader(oa[f])}for b8=2,#ob do Logic.SetVisible(ob[b8],self.Visible)end else Logic.SetVisible(oa[f],self.Visible)end end else if Logic.IsLeader(bQ)==1 then local ob={Logic.GetSoldiersAttachedToLeader(bQ)}for b8=2,#ob do Logic.SetVisible(ob[b8],self.Visible)end else Logic.SetVisible(bQ,self.Visible)end end end;function B_Reprisal_SetVisible:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Reprisal_SetVisible:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVisible)function Reprisal_SetVulnerability(...)return B_Reprisal_SetVulnerability:new(...)end;B_Reprisal_SetVulnerability={Name="Reprisal_SetVulnerability",Description={en="Reprisal: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected.",de="Vergeltung: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen.",fr="Rétribution: rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les Entities spawnées sont affectées."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Vulnerability",de="Verwundbar",fr="Vulnérabilité"}}}function B_Reprisal_SetVulnerability:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetVulnerability:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Vulnerability=ToBoolean(bi)end end;function B_Reprisal_SetVulnerability:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)local oc={bQ}if string.find(o9,"S_")or string.find(o9,"B_NPC_Bandits")or string.find(o9,"B_NPC_Barracks")then oc={Logic.GetSpawnedEntities(bQ)}end;local od="MakeInvulnerable"if self.Vulnerability then od="MakeVulnerable"end;for f=1,#oc,1 do if Logic.IsLeader(oc[f])==1 then local aJ={Logic.GetSoldiersAttachedToLeader(oc[f])}for b8=2,#aJ,1 do _G[od](aJ[b8])end end;_G[od](oc[f])end end;function B_Reprisal_SetVulnerability:GetCustomData(bh)if bh==1 then return{"true","false"}end end;function B_Reprisal_SetVulnerability:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetVulnerability)function Reprisal_SetModel(...)return B_Reprisal_SetModel:new(...)end;B_Reprisal_SetModel={Name="Reprisal_SetModel",Description={en="Reprisal: Changes the model of the entity. Be careful, some models crash the game.",de="Vergeltung: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz.",fr="Rétribution: modifie le modèle d'une entité. Attention: certains modèles entraînent un crash."},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="Model",de="Model",fr="Modèle"}}}function B_Reprisal_SetModel:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_SetModel:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Model=bi end end;function B_Reprisal_SetModel:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)Logic.SetModel(bQ,Models[self.Model])end;function B_Reprisal_SetModel:GetCustomData(bh)if bh==1 then local bk={}for g,h in pairs(Models)do if not string.find(g,"Animals_")and not string.find(g,"MissionMap_")and not string.find(g,"R_Fish")and not string.find(g,"^[GEHUVXYZgt][ADSTfm]*")and not string.find(string.lower(g),"goods|tools_")then table.insert(bk,g)end end;table.insert(bk,"Effects_Dust01")table.insert(bk,"Effects_E_DestructionSmoke")table.insert(bk,"Effects_E_DustLarge")table.insert(bk,"Effects_E_DustSmall")table.insert(bk,"Effects_E_Firebreath")table.insert(bk,"Effects_E_Fireworks01")table.insert(bk,"Effects_E_Flies01")table.insert(bk,"Effects_E_Grasshopper03")table.insert(bk,"Effects_E_HealingFX")table.insert(bk,"Effects_E_Knight_Chivalry_Aura")table.insert(bk,"Effects_E_Knight_Plunder_Aura")table.insert(bk,"Effects_E_Knight_Song_Aura")table.insert(bk,"Effects_E_Knight_Trader_Aura")table.insert(bk,"Effects_E_Knight_Wisdom_Aura")table.insert(bk,"Effects_E_KnightFight")table.insert(bk,"Effects_E_NA_BlowingSand01")table.insert(bk,"Effects_E_NE_BlowingSnow01")table.insert(bk,"Effects_E_Oillamp")table.insert(bk,"Effects_E_SickBuilding")table.insert(bk,"Effects_E_Splash")table.insert(bk,"Effects_E_Torch")table.insert(bk,"Effects_Fire01")table.insert(bk,"Effects_FX_Lantern")table.insert(bk,"Effects_FX_SmokeBIG")table.insert(bk,"Effects_XF_BuildingSmoke")table.insert(bk,"Effects_XF_BuildingSmokeLarge")table.insert(bk,"Effects_XF_BuildingSmokeMedium")table.insert(bk,"Effects_XF_HouseFire")table.insert(bk,"Effects_XF_HouseFireLo")table.insert(bk,"Effects_XF_HouseFireMedium")table.insert(bk,"Effects_XF_HouseFireSmall")if g_GameExtraNo>0 then table.insert(bk,"Effects_E_KhanaTemple_Fire")table.insert(bk,"Effects_E_Knight_Saraya_Aura")end;table.sort(bk)return bk end end;function B_Reprisal_SetModel:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;if not Models[self.Model]then error(bg.Identifier..": "..self.Name..": model '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reprisal_SetModel)function Reward_SetPosition(...)return B_Reward_SetPosition:new(...)end;B_Reward_SetPosition=CopyTable(B_Reprisal_SetPosition)B_Reward_SetPosition.Name="Reward_SetPosition"B_Reward_SetPosition.Description.en="Reward: Places an entity relative to the position of another. The entity can look the target."B_Reward_SetPosition.Description.de="Lohn: Setzt eine Entity relativ zur Position einer anderen. Die Entity kann zum Ziel ausgerichtet werden."B_Reward_SetPosition.Description.fr="Récompense: Définit une Entity vis-à-vis de la position d'une autre. L'entité peut être orientée vers la cible."B_Reward_SetPosition.GetReprisalTable=nil;B_Reward_SetPosition.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetPosition)function Reward_ChangePlayer(...)return B_Reward_ChangePlayer:new(...)end;B_Reward_ChangePlayer=CopyTable(B_Reprisal_ChangePlayer)B_Reward_ChangePlayer.Name="Reward_ChangePlayer"B_Reward_ChangePlayer.Description.en="Reward: Changes the owner of the entity or a battalion."B_Reward_ChangePlayer.Description.de="Lohn: Ändert den Besitzer einer Entity oder eines Battalions."B_Reward_ChangePlayer.Description.fr="Récompense: Change le propriétaire d'une entité ou d'un bataillon."B_Reward_ChangePlayer.GetReprisalTable=nil;B_Reward_ChangePlayer.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_ChangePlayer)function Reward_MoveToPosition(...)return B_Reward_MoveToPosition:new(...)end;B_Reward_MoveToPosition={Name="Reward_MoveToPosition",Description={en="Reward: Moves an entity relative to another entity. If angle is zero the entities will be standing directly face to face.",de="Lohn: Bewegt eine Entity relativ zur Position einer anderen. Wenn Winkel 0 ist, stehen sich die Entities direkt gegenüber.",fr="Récompense: Déplace une entité par rapport à la position d'une autre. Si l'angle est égal à 0, les entités sont directement opposées."},Parameter={{ParameterType.ScriptName,en="Settler",de="Siedler",fr="Settler"},{ParameterType.ScriptName,en="Destination",de="Ziel",fr="Destination"},{ParameterType.Number,en="Distance",de="Entfernung",fr="Distance"},{ParameterType.Number,en="Angle",de="Winkel",fr="Angle"}}}function B_Reward_MoveToPosition:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_MoveToPosition:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Target=bi elseif bh==2 then self.Distance=bi*1 elseif bh==3 then self.Angle=bi*1 end end;function B_Reward_MoveToPosition:CustomFunction(bg)if not IsExisting(self.Entity)or not IsExisting(self.Target)then return end;self.Angle=self.Angle or 0;local c6=GetID(self.Entity)local o7=GetID(self.Target)local aR=Logic.GetEntityOrientation(o7)local E,F,G=Logic.EntityGetPos(o7)if Logic.IsBuilding(o7)==1 then E,F=Logic.GetBuildingApproachPosition(o7)aR=aR-90 end;E=E+self.Distance*math.cos(math.rad(aR+self.Angle))F=F+self.Distance*math.sin(math.rad(aR+self.Angle))Logic.MoveSettler(c6,E,F)self.EntityMovingJob=RequestJob(function(oe,of)if Logic.IsEntityMoving(oe)==false then LookAt(oe,of)return true end end,c6,o7)end;function B_Reward_MoveToPosition:Reset(bg)if self.EntityMovingJob then EndJob(self.EntityMovingJob)end end;function B_Reward_MoveToPosition:Debug(bg)if tonumber(self.Distance)==nil or self.Distance<50 then error(bg.Identifier..": "..self.Name..": Distance is nil or to short!")return true elseif not IsExisting(self.Entity)or not IsExisting(self.Target)then error(bg.Identifier..": "..self.Name..": Mover entity or target entity does not exist!")return true end;return false end;RegisterBehavior(B_Reward_MoveToPosition)function Reward_VictoryWithParty()return B_Reward_VictoryWithParty:new()end;B_Reward_VictoryWithParty={Name="Reward_VictoryWithParty",Description={en="Reward: (Singleplayer) The player wins the game with an animated festival on the market. Continue playing deleates the festival.",de="Lohn: (Einzelspieler) Der Spieler gewinnt das Spiel mit einer animierten Siegesfeier. Bei weiterspielen wird das Fest gelöscht.",fr="Récompense: (Joueur unique) Le joueur gagne la partie avec une fête de la victoire animée. Si le joueur continue à jouer, la fête est effacée."},Parameter={}}function B_Reward_VictoryWithParty:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_VictoryWithParty:AddParameter(bh,bi)end;function B_Reward_VictoryWithParty:CustomFunction(bg)if not Lib.QuestBehavior then return end;if Framework.IsNetworkGame()then error(bg.Identifier..": "..self.Name..": Can not be used in multiplayer!")return end;Victory(g_VictoryAndDefeatType.VictoryMissionComplete)local q=bg.ReceivingPlayer;local og=Logic.GetMarketplace(q)if IsExisting(og)then local aP=GetPosition(og)Logic.CreateEffect(EGL_Effects.FXFireworks01,aP.X,aP.Y,0)Logic.CreateEffect(EGL_Effects.FXFireworks02,aP.X,aP.Y,0)local oh=self:GenerateParty(q)Lib.QuestBehavior.Global.VictoryWithPartyEntities[q]=oh;Logic.ExecuteInLuaLocalState(string.format([[
                local MarketID = %d
                if IsExisting(MarketID) then
                    CameraAnimation.AllowAbort = false
                    CameraAnimation.QueueAnimation(CameraAnimation.SetCameraToEntity, MarketID)
                    CameraAnimation.QueueAnimation(CameraAnimation.StartCameraRotation, 5)
                    CameraAnimation.QueueAnimation(CameraAnimation.Stay ,9999)
                end

                GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty = GUI_Window.ContinuePlayingClicked
                GUI_Window.ContinuePlayingClicked = function()
                    GUI_Window.ContinuePlayingClicked_Orig_Reward_VictoryWithParty()
                    
                    local PlayerID = GUI.GetPlayerID()
                    GUI.SendScriptCommand("B_Reward_VictoryWithParty:ClearParty(" ..PlayerID.. ")")

                    CameraAnimation.AllowAbort = true
                    CameraAnimation.Abort()
                end
            ]],og))end end;function B_Reward_VictoryWithParty:ClearParty(n)if Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]then for g,h in pairs(Lib.QuestBehavior.Global.VictoryWithPartyEntities[n])do DestroyEntity(h)end;Lib.QuestBehavior.Global.VictoryWithPartyEntities[n]=nil end end;function B_Reward_VictoryWithParty:GenerateParty(n)local oi={}local oj=Logic.GetMarketplace(n)if oj~=nil and oj~=0 then local ok,ol=Logic.GetEntityPosition(oj)local ar=Logic.CreateEntity(Entities.D_X_Garland,ok,ol,0,n)table.insert(oi,ar)for b8=1,10 do for g=1,10 do local om=ok-700+b8*150;local on=ol-700+g*150;local oo=math.random(1,100)if oo>70 then local op=GetRandomSettlerType()local S=math.random(1,359)local oq=Logic.CreateEntityOnUnblockedLand(op,om,on,S,n)Logic.SetTaskList(oq,TaskLists.TL_WORKER_FESTIVAL_APPLAUD_SPEECH)table.insert(oi,oq)end end end end;return oi end;function B_Reward_VictoryWithParty:Debug(bg)if Lib.QuestBehavior then if Lib.QuestBehavior.Global.VictoryWithPartyEntities[bg.ReceivingPlayer]then error(bg.Identifier..": "..self.Name..": Victory festival already started for player "..bg.ReceivingPlayer.."!")return true end end;return false end;RegisterBehavior(B_Reward_VictoryWithParty)function Reward_SetVisible(...)return B_Reward_SetVisible:new(...)end;B_Reward_SetVisible=CopyTable(B_Reprisal_SetVisible)B_Reward_SetVisible.Name="Reward_SetVisible"B_Reward_SetVisible.Description.en="Reward: Changes the visibility of an entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVisible.Description.de="Lohn: Setzt die Sichtbarkeit einer Entity. Handelt es sich um einen Spawner werden auch die gespawnten Entities beeinflusst."B_Reward_SetVisible.Description.fr="Récompense: Définit la visibilité d'une Entity. S'il s'agit d'un spawn, les entités spawnées sont également influencées."B_Reward_SetVisible.GetReprisalTable=nil;B_Reward_SetVisible.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVisible)function Reward_SetVulnerability(...)return B_Reward_SetVulnerability:new(...)end;B_Reward_SetVulnerability=CopyTable(B_Reprisal_SetVulnerability)B_Reward_SetVulnerability.Name="Reward_SetVulnerability"B_Reward_SetVulnerability.Description.en="Reward: Changes the vulnerability of the entity. If the entity is a spawner the spawned entities will be affected."B_Reward_SetVulnerability.Description.de="Lohn: Macht eine Entity verwundbar oder unverwundbar. Handelt es sich um einen Spawner, sind die gespawnten Entities betroffen."B_Reward_SetVulnerability.Description.fr="Récompense: Rend une Entité vulnérable ou invulnérable. S'il s'agit d'un spawn, les entités spawnées sont affectées."B_Reward_SetVulnerability.GetReprisalTable=nil;B_Reward_SetVulnerability.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetVulnerability)function Reward_SetModel(...)return B_Reward_SetModel:new(...)end;B_Reward_SetModel=CopyTable(B_Reprisal_SetModel)B_Reward_SetModel.Name="Reward_SetModel"B_Reward_SetModel.Description.en="Reward: Changes the model of the entity. Be careful, some models crash the game."B_Reward_SetModel.Description.de="Lohn: Ändert das Model einer Entity. Achtung: Einige Modelle führen zum Absturz."B_Reward_SetModel.Description.fr="Récompense: Modifie le modèle d'une entité. Attention : certains modèles entraînent un plantage."B_Reward_SetModel.GetReprisalTable=nil;B_Reward_SetModel.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_SetModel)function Reward_AI_SetEntityControlled(...)return B_Reward_AI_SetEntityControlled:new(...)end;B_Reward_AI_SetEntityControlled={Name="Reward_AI_SetEntityControlled",Description={en="Reward: Bind or Unbind an entity or a battalion to/from an AI player. The AI player must be activated!",de="Lohn: Die KI kontrolliert die Entity oder der KI die Kontrolle entziehen. Die KI muss aktiv sein!",fr="Récompense: L'IA contrôle l'entité ou retirer le contrôle à l'IA. L'IA doit être active !"},Parameter={{ParameterType.ScriptName,en="Entity",de="Entity",fr="Entité"},{ParameterType.Custom,en="AI control entity",de="KI kontrolliert Entity",fr="L'IA contrôle l'entité"}}}function B_Reward_AI_SetEntityControlled:GetRewardTable()return{Reward.Custom,{self,self.CustomFunction}}end;function B_Reward_AI_SetEntityControlled:AddParameter(bh,bi)if bh==0 then self.Entity=bi elseif bh==1 then self.Hidden=ToBoolean(bi)end end;function B_Reward_AI_SetEntityControlled:CustomFunction(bg)if not IsExisting(self.Entity)then return end;local bQ=GetID(self.Entity)local bT=Logic.EntityGetPlayer(bQ)local ms=Logic.GetEntityType(bQ)local o9=Logic.GetEntityTypeName(ms)if string.find(o9,"S_")or string.find(o9,"B_NPC_Bandits")or string.find(o9,"B_NPC_Barracks")then local oa={Logic.GetSpawnedEntities(bQ)}for f=1,#oa do if Logic.IsLeader(oa[f])==1 then AICore.HideEntityFromAI(bT,oa[f],not self.Hidden)end end else AICore.HideEntityFromAI(bT,bQ,not self.Hidden)end end;function B_Reward_AI_SetEntityControlled:GetCustomData(bh)if bh==1 then return{"false","true"}end end;function B_Reward_AI_SetEntityControlled:Debug(bg)if not IsExisting(self.Entity)then error(bg.Identifier..": "..self.Name..": entity '"..self.Entity.."' does not exist!")return true end;return false end;RegisterBehavior(B_Reward_AI_SetEntityControlled)function Trigger_AmmunitionDepleted(...)return B_Trigger_AmmunitionDepleted:new(...)end;B_Trigger_AmmunitionDepleted={Name="Trigger_AmmunitionDepleted",Description={en="Trigger: if the ammunition of the entity is depleted.",de="Auslöser: wenn die Munition der Entity aufgebraucht ist.",fr="Déclencheur: lorsque les munitions de l'entité sont épuisées."},Parameter={{ParameterType.Scriptname,en="Script name",de="Skriptname",fr="Nom de l'entité"}}}function B_Trigger_AmmunitionDepleted:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_AmmunitionDepleted:AddParameter(bh,bi)if bh==0 then self.Scriptname=bi end end;function B_Trigger_AmmunitionDepleted:CustomFunction()if not IsExisting(self.Scriptname)then return false end;local w=GetID(self.Scriptname)if Logic.GetAmmunitionAmount(w)>0 then return false end;return true end;function B_Trigger_AmmunitionDepleted:Debug(bg)if not IsExisting(self.Scriptname)then error(bg.Identifier..": "..self.Name..": '"..self.Scriptname.."' is destroyed!")return true end;return false end;RegisterBehavior(B_Trigger_AmmunitionDepleted)Lib.Register("module/trade/Warehouse_Behavior")B_Reward_TradePost.DEBUG_Orig_Warehouse=B_Reward_TradePost.DEBUG;B_Reward_TradePost.DEBUG=function(self,bg)local ax=Lib.Warehouse.Global:GetIndex(self.ScriptName)if ax~=0 then debug(false,bg.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return false end;return self:DEBUG_Orig_Warehouse(bg)end;B_Reward_TradePost.CustomFunction_Orig_Warehouse=B_Reward_TradePost.CustomFunction;B_Reward_TradePost.CustomFunction=function(self,bg)local ax=Lib.Warehouse.Global:GetIndex(self.ScriptName)if ax~=0 then debug(false,bg.Identifier..": Error in "..self.Name..": Can not use a tradepost that is already a warehouse!")return end;self:CustomFunction_Orig_Warehouse(bg)end;Lib.Register("module/information/BriefingSystem_Behavior")function Reprisal_Briefing(C,rr)return B_Reprisal_Briefing:new(C,rr)end;B_Reprisal_Briefing={Name="Reprisal_Briefing",Description={en="Reprisal: Calls a function to start an new briefing.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Briefing.",fr="Rétribution: Appelle la fonction et démarre le briefing qu'elle contient."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.Default,en="Briefing function",de="Funktion mit Briefing",fr="Fonction avec briefing"}}}function B_Reprisal_Briefing:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Briefing:AddParameter(bh,bi)if bh==0 then self.BriefingName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Briefing:CustomFunction(bg)_G[self.Function](self.BriefingName,bg.ReceivingPlayer)end;function B_Reprisal_Briefing:Debug(bg)if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Briefing)function Reward_Briefing(C,rr)return B_Reward_Briefing:new(C,rr)end;B_Reward_Briefing=CopyTable(B_Reprisal_Briefing)B_Reward_Briefing.Name="Reward_Briefing"B_Reward_Briefing.Description.en="Reward: Calls a function to start an new briefing."B_Reward_Briefing.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Briefing."B_Reward_Briefing.Description.fr="Récompense: Appelle la fonction et démarre le briefing qu'elle contient."B_Reward_Briefing.GetReprisalTable=nil;B_Reward_Briefing.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Briefing)function Trigger_Briefing(C,n,dX)return B_Trigger_Briefing:new(C,n,dX)end;B_Trigger_Briefing={Name="Trigger_Briefing",Description={en="Trigger: Checks if an briefing has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Briefing beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un briefing est terminé et lance ensuite la quête."},Parameter={{ParameterType.Default,en="Briefing name",de="Name des Briefing",fr="Nom du briefing"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Briefing:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Briefing:AddParameter(bh,bi)if bh==0 then self.BriefingName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Briefing:CustomFunction(bg)if GetCinematicEvent(self.BriefingName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Briefing:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.BriefingName==nil or self.BriefingName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Briefing)Lib.Register("module/information/CutsceneSystem_Behavior")function Reprisal_Cutscene(C,to)return B_Reprisal_Cutscene:new(C,to)end;B_Reprisal_Cutscene={Name="Reprisal_Cutscene",Description={en="Reprisal: Calls a function to start an new Cutscene.",de="Vergeltung: Ruft die Funktion auf und startet die enthaltene Cutscene.",fr="Rétribution : Appelle la fonction et démarre la cutscene contenue."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.Default,en="Cutscene function",de="Funktion mit Cutscene",fr="Fonction avec cutscene"}}}function B_Reprisal_Cutscene:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Cutscene:AddParameter(bh,bi)if bh==0 then self.CutsceneName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Cutscene:CustomFunction(bg)_G[self.Function](self.CutsceneName,bg.ReceivingPlayer)end;function B_Reprisal_Cutscene:Debug(bg)if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Cutscene)function Reward_Cutscene(C,to)return B_Reward_Cutscene:new(C,to)end;B_Reward_Cutscene=CopyTable(B_Reprisal_Cutscene)B_Reward_Cutscene.Name="Reward_Cutscene"B_Reward_Cutscene.Description.en="Reward: Calls a function to start an new Cutscene."B_Reward_Cutscene.Description.de="Lohn: Ruft die Funktion auf und startet die enthaltene Cutscene."B_Reward_Cutscene.Description.fr="Récompense: Appelle la fonction et démarre la cutscene contenue."B_Reward_Cutscene.GetReprisalTable=nil;B_Reward_Cutscene.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Cutscene)function Trigger_Cutscene(C,n,dX)return B_Trigger_Cutscene:new(C,n,dX)end;B_Trigger_Cutscene={Name="Trigger_Cutscene",Description={en="Trigger: Checks if an Cutscene has concluded and starts the quest if so.",de="Auslöser: Prüft, ob eine Cutscene beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si une cutscene est terminée et démarre ensuite la quête."},Parameter={{ParameterType.Default,en="Cutscene name",de="Name der Cutscene",fr="Nom de la cutscene"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Cutscene:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Cutscene:AddParameter(bh,bi)if bh==0 then self.CutsceneName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Cutscene:CustomFunction(bg)if GetCinematicEvent(self.CutsceneName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Cutscene:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.CutsceneName==nil or self.CutsceneName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Cutscene)Lib.Register("module/information/DialogSystem_Behavior")function Reprisal_Dialog(C,tw)return B_Reprisal_Dialog:new(C,tw)end;B_Reprisal_Dialog={Name="Reprisal_Dialog",Description={en="Reprisal: Calls a function to start an new dialog.",de="Vergeltung: Ruft die Funktion auf und startet das enthaltene Dialog.",fr="Rétribution: Appelle la fonction et démarre le dialogue contenu."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.Default,en="Dialog function",de="Funktion mit Dialog",fr="Fonction du dialogue"}}}function B_Reprisal_Dialog:GetReprisalTable()return{Reprisal.Custom,{self,self.CustomFunction}}end;function B_Reprisal_Dialog:AddParameter(bh,bi)if bh==0 then self.DialogName=bi elseif bh==1 then self.Function=bi end end;function B_Reprisal_Dialog:CustomFunction(bg)_G[self.Function](self.DialogName,bg.ReceivingPlayer)end;function B_Reprisal_Dialog:Debug(bg)if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;if not type(_G[self.Function])=="function"then debug(false,bg.Identifier..": "..self.Name..": '"..self.Function.."' was not found!")return true end;return false end;RegisterBehavior(B_Reprisal_Dialog)function Reward_Dialog(C,tw)return B_Reward_Dialog:new(C,tw)end;B_Reward_Dialog=CopyTable(B_Reprisal_Dialog)B_Reward_Dialog.Name="Reward_Dialog"B_Reward_Dialog.Description.en="Reward: Calls a function to start an new dialog."B_Reward_Dialog.Description.de="Lohn: Ruft die Funktion auf und startet das enthaltene Dialog."B_Reward_Dialog.Description.fr="Récompense: Appelle la fonction et lance le dialogue qu'elle contient."B_Reward_Dialog.GetReprisalTable=nil;B_Reward_Dialog.GetRewardTable=function(self,bg)return{Reward.Custom,{self,self.CustomFunction}}end;RegisterBehavior(B_Reward_Dialog)function Trigger_Dialog(C,n,dX)return B_Trigger_Dialog:new(C,n,dX)end;B_Trigger_Dialog={Name="Trigger_Dialog",Description={en="Trigger: Checks if an dialog has concluded and starts the quest if so.",de="Auslöser: Prüft, ob ein Dialog beendet ist und startet dann den Quest.",fr="Déclencheur: Vérifie si un dialogue est terminé et démarre alors la quête."},Parameter={{ParameterType.Default,en="Dialog name",de="Name des Dialog",fr="Nom du dialogue"},{ParameterType.PlayerID,en="Player ID",de="Player ID",fr="Player ID"},{ParameterType.Number,en="Wait time",de="Wartezeit",fr="Temps d'attente"}}}function B_Trigger_Dialog:GetTriggerTable()return{Triggers.Custom2,{self,self.CustomFunction}}end;function B_Trigger_Dialog:AddParameter(bh,bi)if bh==0 then self.DialogName=bi elseif bh==1 then self.PlayerID=bi*1 elseif bh==2 then bi=bi or 0;self.WaitTime=bi*1 end end;function B_Trigger_Dialog:CustomFunction(bg)if GetCinematicEvent(self.DialogName,self.PlayerID)==CinematicEventState.Concluded then if self.WaitTime and self.WaitTime>0 then self.WaitTimeTimer=self.WaitTimeTimer or Logic.GetTime()if Logic.GetTime()>=self.WaitTimeTimer+self.WaitTime then return true end else return true end end;return false end;function B_Trigger_Dialog:Debug(bg)if self.WaitTime<0 then debug(false,string.format("%s: %s: Wait time must be 0 or greater!",bg.Identifier,self.Name))return true end;if self.PlayerID<1 or self.PlayerID>8 then debug(false,string.format("%s: %s: Player-ID must be between 1 and 8!",bg.Identifier,self.Name))return true end;if self.DialogName==nil or self.DialogName==""then debug(false,string.format("%s: %s: Dialog name is invalid!",bg.Identifier,self.Name))return true end;return false end;RegisterBehavior(B_Trigger_Dialog)Lib.Register("module/information/Requester_Behavior")function Goal_Decide(...)return B_Goal_Decide:new(...)end;g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;B_Goal_Decide={Name="Goal_Decide",Description={en="Goal: Opens a Yes/No Dialog. The decision dictates the quest result (yes=true, no=false).",de="Ziel: Öffnet einen Ja/Nein-Dialog. Die Entscheidung bestimmt das Quest-Ergebnis (ja=true, nein=false).",fr="Objectif: ouvre une fenêtre de dialogue oui/non. La décision détermine le résultat de la quête (oui=true, non=false)."},Parameter={{ParameterType.Default,en="Text",de="Text",fr="Text"},{ParameterType.Default,en="Title",de="Titel",fr="Titre"},{ParameterType.Custom,en="Button labels",de="Button Beschriftung",fr="Inscription sur le bouton"}}}function B_Goal_Decide:GetGoalTable()return{Objective.Custom2,{self,self.CustomFunction}}end;function B_Goal_Decide:AddParameter(bh,bi)if bh==0 then self.Text=bi elseif bh==1 then self.Title=bi elseif bh==2 then self.Buttons=bi=="Ok/Cancel"or bi==true end end;function B_Goal_Decide:CustomFunction(bg)if Framework.IsNetworkGame()then return false end;if IsCinematicEventActive and IsCinematicEventActive(bg.ReceivingPlayer)then return end;if g_GoalDecideDialogDisplayed==nil then g_GoalDecideDialogDisplayed=true;ExecuteLocal([[DialogRequestBox("%s", "%s", function(_Yes) end, %s)]],self.Title,self.Text,self.Buttons and"true"or"nil")end;local jr=g_DecisionWindowResult;if jr~=nil then g_GoalDecideDialogDisplayed=nil;g_DecisionWindowResult=nil;return jr end end;function B_Goal_Decide:GetCustomData(bh)if bh==2 then return{"Yes/No","Ok/Cancel"}end end;function B_Goal_Decide:Debug(bg)if Framework.IsNetworkGame()then debug(false,bg.Identifier..": "..self.Name..": Can not be used in multiplayer!")return true end;if bg.Visible==true then debug(false,bg.Identifier..": "..self.Name..": Is supposed to be used in invisible quests!")return true end;return false end;function B_Goal_Decide:Reset()g_GoalDecideDialogDisplayed=nil end;RegisterBehavior(B_Goal_Decide)